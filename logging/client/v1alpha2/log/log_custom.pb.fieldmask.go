// Code generated by protoc-gen-goten-object
// File: edgelq/logging/proto/v1alpha2/log_custom.proto
// DO NOT EDIT!!!

package log_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	logging_common "github.com/cloudwan/edgelq-sdk/logging/common/v1alpha2"
	log "github.com/cloudwan/edgelq-sdk/logging/resources/v1alpha2/log"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &rpc.Status{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &logging_common.LabelDescriptor{}
	_ = &log.Log{}
)

type ListLogsRequest_FieldMask struct {
	Paths []ListLogsRequest_FieldPath
}

func FullListLogsRequest_FieldMask() *ListLogsRequest_FieldMask {
	res := &ListLogsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListLogsRequest_FieldTerminalPath{selector: ListLogsRequest_FieldPathSelectorParents})
	res.Paths = append(res.Paths, &ListLogsRequest_FieldTerminalPath{selector: ListLogsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListLogsRequest_FieldTerminalPath{selector: ListLogsRequest_FieldPathSelectorInterval})
	res.Paths = append(res.Paths, &ListLogsRequest_FieldTerminalPath{selector: ListLogsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListLogsRequest_FieldTerminalPath{selector: ListLogsRequest_FieldPathSelectorPageToken})
	return res
}

func (fieldMask *ListLogsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListLogsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListLogsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListLogsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListLogsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListLogsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListLogsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListLogsRequest_FieldPath(raw)
	})
}

func (fieldMask *ListLogsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListLogsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListLogsRequest_FieldMask) Subtract(other *ListLogsRequest_FieldMask) *ListLogsRequest_FieldMask {
	result := &ListLogsRequest_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[ListLogsRequest_FieldPathSelector]gotenobject.FieldMask{
		ListLogsRequest_FieldPathSelectorInterval: &logging_common.TimeInterval_FieldMask{},
	}
	mySubMasks := map[ListLogsRequest_FieldPathSelector]gotenobject.FieldMask{
		ListLogsRequest_FieldPathSelectorInterval: &logging_common.TimeInterval_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListLogsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListLogsRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListLogsRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case ListLogsRequest_FieldPathSelectorInterval:
						mySubMasks[ListLogsRequest_FieldPathSelectorInterval] = logging_common.FullTimeInterval_FieldMask()
					}
				} else if tp, ok := path.(*ListLogsRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListLogsRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListLogsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListLogsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListLogsRequest_FieldMask) FilterInputFields() *ListLogsRequest_FieldMask {
	result := &ListLogsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListLogsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListLogsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListLogsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListLogsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListLogsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListLogsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListLogsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListLogsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListLogsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListLogsRequest_FieldMask) AppendPath(path ListLogsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListLogsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListLogsRequest_FieldPath))
}

func (fieldMask *ListLogsRequest_FieldMask) GetPaths() []ListLogsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListLogsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListLogsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListLogsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListLogsRequest_FieldMask) Set(target, source *ListLogsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListLogsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListLogsRequest), source.(*ListLogsRequest))
}

func (fieldMask *ListLogsRequest_FieldMask) Project(source *ListLogsRequest) *ListLogsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListLogsRequest{}
	intervalMask := &logging_common.TimeInterval_FieldMask{}
	wholeIntervalAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListLogsRequest_FieldTerminalPath:
			switch tp.selector {
			case ListLogsRequest_FieldPathSelectorParents:
				result.Parents = source.Parents
			case ListLogsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListLogsRequest_FieldPathSelectorInterval:
				result.Interval = source.Interval
				wholeIntervalAccepted = true
			case ListLogsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListLogsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			}
		case *ListLogsRequest_FieldSubPath:
			switch tp.selector {
			case ListLogsRequest_FieldPathSelectorInterval:
				intervalMask.AppendPath(tp.subPath.(logging_common.TimeInterval_FieldPath))
			}
		}
	}
	if wholeIntervalAccepted == false && len(intervalMask.Paths) > 0 {
		result.Interval = intervalMask.Project(source.GetInterval())
	}
	return result
}

func (fieldMask *ListLogsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListLogsRequest))
}

func (fieldMask *ListLogsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListLogsResponse_FieldMask struct {
	Paths []ListLogsResponse_FieldPath
}

func FullListLogsResponse_FieldMask() *ListLogsResponse_FieldMask {
	res := &ListLogsResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListLogsResponse_FieldTerminalPath{selector: ListLogsResponse_FieldPathSelectorLogs})
	res.Paths = append(res.Paths, &ListLogsResponse_FieldTerminalPath{selector: ListLogsResponse_FieldPathSelectorNextPageToken})
	res.Paths = append(res.Paths, &ListLogsResponse_FieldTerminalPath{selector: ListLogsResponse_FieldPathSelectorExecutionErrors})
	return res
}

func (fieldMask *ListLogsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListLogsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListLogsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListLogsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListLogsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListLogsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListLogsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListLogsResponse_FieldPath(raw)
	})
}

func (fieldMask *ListLogsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListLogsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListLogsResponse_FieldMask) Subtract(other *ListLogsResponse_FieldMask) *ListLogsResponse_FieldMask {
	result := &ListLogsResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ListLogsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListLogsResponse_FieldPathSelectorLogs:            &log.Log_FieldMask{},
		ListLogsResponse_FieldPathSelectorExecutionErrors: &rpc.Status_FieldMask{},
	}
	mySubMasks := map[ListLogsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListLogsResponse_FieldPathSelectorLogs:            &log.Log_FieldMask{},
		ListLogsResponse_FieldPathSelectorExecutionErrors: &rpc.Status_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListLogsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListLogsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListLogsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListLogsResponse_FieldPathSelectorLogs:
						mySubMasks[ListLogsResponse_FieldPathSelectorLogs] = log.FullLog_FieldMask()
					case ListLogsResponse_FieldPathSelectorExecutionErrors:
						mySubMasks[ListLogsResponse_FieldPathSelectorExecutionErrors] = rpc.FullStatus_FieldMask()
					}
				} else if tp, ok := path.(*ListLogsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListLogsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListLogsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListLogsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListLogsResponse_FieldMask) FilterInputFields() *ListLogsResponse_FieldMask {
	result := &ListLogsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListLogsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListLogsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListLogsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListLogsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListLogsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListLogsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListLogsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListLogsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListLogsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListLogsResponse_FieldMask) AppendPath(path ListLogsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListLogsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListLogsResponse_FieldPath))
}

func (fieldMask *ListLogsResponse_FieldMask) GetPaths() []ListLogsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListLogsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListLogsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListLogsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListLogsResponse_FieldMask) Set(target, source *ListLogsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListLogsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListLogsResponse), source.(*ListLogsResponse))
}

func (fieldMask *ListLogsResponse_FieldMask) Project(source *ListLogsResponse) *ListLogsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListLogsResponse{}
	logsMask := &log.Log_FieldMask{}
	wholeLogsAccepted := false
	executionErrorsMask := &rpc.Status_FieldMask{}
	wholeExecutionErrorsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListLogsResponse_FieldTerminalPath:
			switch tp.selector {
			case ListLogsResponse_FieldPathSelectorLogs:
				result.Logs = source.Logs
				wholeLogsAccepted = true
			case ListLogsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			case ListLogsResponse_FieldPathSelectorExecutionErrors:
				result.ExecutionErrors = source.ExecutionErrors
				wholeExecutionErrorsAccepted = true
			}
		case *ListLogsResponse_FieldSubPath:
			switch tp.selector {
			case ListLogsResponse_FieldPathSelectorLogs:
				logsMask.AppendPath(tp.subPath.(log.Log_FieldPath))
			case ListLogsResponse_FieldPathSelectorExecutionErrors:
				executionErrorsMask.AppendPath(tp.subPath.(rpc.Status_FieldPath))
			}
		}
	}
	if wholeLogsAccepted == false && len(logsMask.Paths) > 0 {
		for _, sourceItem := range source.GetLogs() {
			result.Logs = append(result.Logs, logsMask.Project(sourceItem))
		}
	}
	if wholeExecutionErrorsAccepted == false && len(executionErrorsMask.Paths) > 0 {
		for _, sourceItem := range source.GetExecutionErrors() {
			result.ExecutionErrors = append(result.ExecutionErrors, executionErrorsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListLogsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListLogsResponse))
}

func (fieldMask *ListLogsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListLogsResponse_ErrorDetails_FieldMask struct {
	Paths []ListLogsResponseErrorDetails_FieldPath
}

func FullListLogsResponse_ErrorDetails_FieldMask() *ListLogsResponse_ErrorDetails_FieldMask {
	res := &ListLogsResponse_ErrorDetails_FieldMask{}
	res.Paths = append(res.Paths, &ListLogsResponseErrorDetails_FieldTerminalPath{selector: ListLogsResponseErrorDetails_FieldPathSelectorRegionId})
	return res
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListLogsResponseErrorDetails_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListLogsResponseErrorDetails_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListLogsResponseErrorDetails_FieldPath(raw)
	})
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) ProtoMessage() {}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) Subtract(other *ListLogsResponse_ErrorDetails_FieldMask) *ListLogsResponse_ErrorDetails_FieldMask {
	result := &ListLogsResponse_ErrorDetails_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListLogsResponseErrorDetails_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListLogsResponse_ErrorDetails_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) FilterInputFields() *ListLogsResponse_ErrorDetails_FieldMask {
	result := &ListLogsResponse_ErrorDetails_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListLogsResponseErrorDetails_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListLogsResponseErrorDetails_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListLogsResponse_ErrorDetails_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListLogsResponse_ErrorDetails_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) AppendPath(path ListLogsResponseErrorDetails_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListLogsResponseErrorDetails_FieldPath))
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) GetPaths() []ListLogsResponseErrorDetails_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListLogsResponseErrorDetails_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) Set(target, source *ListLogsResponse_ErrorDetails) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListLogsResponse_ErrorDetails), source.(*ListLogsResponse_ErrorDetails))
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) Project(source *ListLogsResponse_ErrorDetails) *ListLogsResponse_ErrorDetails {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListLogsResponse_ErrorDetails{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListLogsResponseErrorDetails_FieldTerminalPath:
			switch tp.selector {
			case ListLogsResponseErrorDetails_FieldPathSelectorRegionId:
				result.RegionId = source.RegionId
			}
		}
	}
	return result
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListLogsResponse_ErrorDetails))
}

func (fieldMask *ListLogsResponse_ErrorDetails_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateLogsRequest_FieldMask struct {
	Paths []CreateLogsRequest_FieldPath
}

func FullCreateLogsRequest_FieldMask() *CreateLogsRequest_FieldMask {
	res := &CreateLogsRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateLogsRequest_FieldTerminalPath{selector: CreateLogsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateLogsRequest_FieldTerminalPath{selector: CreateLogsRequest_FieldPathSelectorLogs})
	return res
}

func (fieldMask *CreateLogsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateLogsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateLogsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateLogsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateLogsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateLogsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateLogsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateLogsRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateLogsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateLogsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateLogsRequest_FieldMask) Subtract(other *CreateLogsRequest_FieldMask) *CreateLogsRequest_FieldMask {
	result := &CreateLogsRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateLogsRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateLogsRequest_FieldPathSelectorLogs: &log.Log_FieldMask{},
	}
	mySubMasks := map[CreateLogsRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateLogsRequest_FieldPathSelectorLogs: &log.Log_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateLogsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateLogsRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateLogsRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateLogsRequest_FieldPathSelectorLogs:
						mySubMasks[CreateLogsRequest_FieldPathSelectorLogs] = log.FullLog_FieldMask()
					}
				} else if tp, ok := path.(*CreateLogsRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateLogsRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateLogsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateLogsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateLogsRequest_FieldMask) FilterInputFields() *CreateLogsRequest_FieldMask {
	result := &CreateLogsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateLogsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateLogsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateLogsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateLogsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateLogsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateLogsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateLogsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateLogsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateLogsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateLogsRequest_FieldMask) AppendPath(path CreateLogsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateLogsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateLogsRequest_FieldPath))
}

func (fieldMask *CreateLogsRequest_FieldMask) GetPaths() []CreateLogsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateLogsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateLogsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateLogsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateLogsRequest_FieldMask) Set(target, source *CreateLogsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateLogsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateLogsRequest), source.(*CreateLogsRequest))
}

func (fieldMask *CreateLogsRequest_FieldMask) Project(source *CreateLogsRequest) *CreateLogsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateLogsRequest{}
	logsMask := &log.Log_FieldMask{}
	wholeLogsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateLogsRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateLogsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateLogsRequest_FieldPathSelectorLogs:
				result.Logs = source.Logs
				wholeLogsAccepted = true
			}
		case *CreateLogsRequest_FieldSubPath:
			switch tp.selector {
			case CreateLogsRequest_FieldPathSelectorLogs:
				logsMask.AppendPath(tp.subPath.(log.Log_FieldPath))
			}
		}
	}
	if wholeLogsAccepted == false && len(logsMask.Paths) > 0 {
		for _, sourceItem := range source.GetLogs() {
			result.Logs = append(result.Logs, logsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *CreateLogsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateLogsRequest))
}

func (fieldMask *CreateLogsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateLogsResponse_FieldMask struct {
	Paths []CreateLogsResponse_FieldPath
}

func FullCreateLogsResponse_FieldMask() *CreateLogsResponse_FieldMask {
	res := &CreateLogsResponse_FieldMask{}
	res.Paths = append(res.Paths, &CreateLogsResponse_FieldTerminalPath{selector: CreateLogsResponse_FieldPathSelectorLogNames})
	res.Paths = append(res.Paths, &CreateLogsResponse_FieldTerminalPath{selector: CreateLogsResponse_FieldPathSelectorFailedLogs})
	return res
}

func (fieldMask *CreateLogsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateLogsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateLogsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateLogsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateLogsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateLogsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateLogsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateLogsResponse_FieldPath(raw)
	})
}

func (fieldMask *CreateLogsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *CreateLogsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateLogsResponse_FieldMask) Subtract(other *CreateLogsResponse_FieldMask) *CreateLogsResponse_FieldMask {
	result := &CreateLogsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateLogsResponse_FieldPathSelector]gotenobject.FieldMask{
		CreateLogsResponse_FieldPathSelectorFailedLogs: &CreateLogsResponse_CreateError_FieldMask{},
	}
	mySubMasks := map[CreateLogsResponse_FieldPathSelector]gotenobject.FieldMask{
		CreateLogsResponse_FieldPathSelectorFailedLogs: &CreateLogsResponse_CreateError_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateLogsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateLogsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateLogsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateLogsResponse_FieldPathSelectorFailedLogs:
						mySubMasks[CreateLogsResponse_FieldPathSelectorFailedLogs] = FullCreateLogsResponse_CreateError_FieldMask()
					}
				} else if tp, ok := path.(*CreateLogsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateLogsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateLogsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateLogsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateLogsResponse_FieldMask) FilterInputFields() *CreateLogsResponse_FieldMask {
	result := &CreateLogsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateLogsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateLogsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateLogsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateLogsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateLogsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateLogsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateLogsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateLogsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateLogsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateLogsResponse_FieldMask) AppendPath(path CreateLogsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateLogsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateLogsResponse_FieldPath))
}

func (fieldMask *CreateLogsResponse_FieldMask) GetPaths() []CreateLogsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateLogsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateLogsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateLogsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateLogsResponse_FieldMask) Set(target, source *CreateLogsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateLogsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateLogsResponse), source.(*CreateLogsResponse))
}

func (fieldMask *CreateLogsResponse_FieldMask) Project(source *CreateLogsResponse) *CreateLogsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateLogsResponse{}
	failedLogsMask := &CreateLogsResponse_CreateError_FieldMask{}
	wholeFailedLogsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateLogsResponse_FieldTerminalPath:
			switch tp.selector {
			case CreateLogsResponse_FieldPathSelectorLogNames:
				result.LogNames = source.LogNames
			case CreateLogsResponse_FieldPathSelectorFailedLogs:
				result.FailedLogs = source.FailedLogs
				wholeFailedLogsAccepted = true
			}
		case *CreateLogsResponse_FieldSubPath:
			switch tp.selector {
			case CreateLogsResponse_FieldPathSelectorFailedLogs:
				failedLogsMask.AppendPath(tp.subPath.(CreateLogsResponseCreateError_FieldPath))
			}
		}
	}
	if wholeFailedLogsAccepted == false && len(failedLogsMask.Paths) > 0 {
		for _, sourceItem := range source.GetFailedLogs() {
			result.FailedLogs = append(result.FailedLogs, failedLogsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *CreateLogsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateLogsResponse))
}

func (fieldMask *CreateLogsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateLogsResponse_CreateError_FieldMask struct {
	Paths []CreateLogsResponseCreateError_FieldPath
}

func FullCreateLogsResponse_CreateError_FieldMask() *CreateLogsResponse_CreateError_FieldMask {
	res := &CreateLogsResponse_CreateError_FieldMask{}
	res.Paths = append(res.Paths, &CreateLogsResponseCreateError_FieldTerminalPath{selector: CreateLogsResponseCreateError_FieldPathSelectorLogs})
	res.Paths = append(res.Paths, &CreateLogsResponseCreateError_FieldTerminalPath{selector: CreateLogsResponseCreateError_FieldPathSelectorStatus})
	return res
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateLogsResponse_CreateError_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateLogsResponseCreateError_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateLogsResponseCreateError_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateLogsResponseCreateError_FieldPath(raw)
	})
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) ProtoMessage() {}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) Subtract(other *CreateLogsResponse_CreateError_FieldMask) *CreateLogsResponse_CreateError_FieldMask {
	result := &CreateLogsResponse_CreateError_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateLogsResponseCreateError_FieldPathSelector]gotenobject.FieldMask{
		CreateLogsResponseCreateError_FieldPathSelectorLogs:   &log.Log_FieldMask{},
		CreateLogsResponseCreateError_FieldPathSelectorStatus: &rpc.Status_FieldMask{},
	}
	mySubMasks := map[CreateLogsResponseCreateError_FieldPathSelector]gotenobject.FieldMask{
		CreateLogsResponseCreateError_FieldPathSelectorLogs:   &log.Log_FieldMask{},
		CreateLogsResponseCreateError_FieldPathSelectorStatus: &rpc.Status_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateLogsResponseCreateError_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateLogsResponseCreateError_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateLogsResponseCreateError_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateLogsResponseCreateError_FieldPathSelectorLogs:
						mySubMasks[CreateLogsResponseCreateError_FieldPathSelectorLogs] = log.FullLog_FieldMask()
					case CreateLogsResponseCreateError_FieldPathSelectorStatus:
						mySubMasks[CreateLogsResponseCreateError_FieldPathSelectorStatus] = rpc.FullStatus_FieldMask()
					}
				} else if tp, ok := path.(*CreateLogsResponseCreateError_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateLogsResponseCreateError_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateLogsResponse_CreateError_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateLogsResponse_CreateError_FieldMask) FilterInputFields() *CreateLogsResponse_CreateError_FieldMask {
	result := &CreateLogsResponse_CreateError_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateLogsResponse_CreateError_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateLogsResponseCreateError_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateLogsResponseCreateError_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateLogsResponse_CreateError_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateLogsResponse_CreateError_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) AppendPath(path CreateLogsResponseCreateError_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateLogsResponseCreateError_FieldPath))
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) GetPaths() []CreateLogsResponseCreateError_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateLogsResponseCreateError_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) Set(target, source *CreateLogsResponse_CreateError) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateLogsResponse_CreateError), source.(*CreateLogsResponse_CreateError))
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) Project(source *CreateLogsResponse_CreateError) *CreateLogsResponse_CreateError {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateLogsResponse_CreateError{}
	logsMask := &log.Log_FieldMask{}
	wholeLogsAccepted := false
	statusMask := &rpc.Status_FieldMask{}
	wholeStatusAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateLogsResponseCreateError_FieldTerminalPath:
			switch tp.selector {
			case CreateLogsResponseCreateError_FieldPathSelectorLogs:
				result.Logs = source.Logs
				wholeLogsAccepted = true
			case CreateLogsResponseCreateError_FieldPathSelectorStatus:
				result.Status = source.Status
				wholeStatusAccepted = true
			}
		case *CreateLogsResponseCreateError_FieldSubPath:
			switch tp.selector {
			case CreateLogsResponseCreateError_FieldPathSelectorLogs:
				logsMask.AppendPath(tp.subPath.(log.Log_FieldPath))
			case CreateLogsResponseCreateError_FieldPathSelectorStatus:
				statusMask.AppendPath(tp.subPath.(rpc.Status_FieldPath))
			}
		}
	}
	if wholeLogsAccepted == false && len(logsMask.Paths) > 0 {
		for _, sourceItem := range source.GetLogs() {
			result.Logs = append(result.Logs, logsMask.Project(sourceItem))
		}
	}
	if wholeStatusAccepted == false && len(statusMask.Paths) > 0 {
		result.Status = statusMask.Project(source.GetStatus())
	}
	return result
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateLogsResponse_CreateError))
}

func (fieldMask *CreateLogsResponse_CreateError_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
