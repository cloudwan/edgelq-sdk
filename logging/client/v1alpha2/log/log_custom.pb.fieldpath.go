// Code generated by protoc-gen-goten-object
// File: edgelq/logging/proto/v1alpha2/log_custom.proto
// DO NOT EDIT!!!

package log_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	logging_common "github.com/cloudwan/edgelq-sdk/logging/common/v1alpha2"
	log "github.com/cloudwan/edgelq-sdk/logging/resources/v1alpha2/log"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &rpc.Status{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &logging_common.LabelDescriptor{}
	_ = &log.Log{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListLogsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListLogsRequest_FieldPathSelector
	Get(source *ListLogsRequest) []interface{}
	GetSingle(source *ListLogsRequest) (interface{}, bool)
	ClearValue(item *ListLogsRequest)

	// Those methods build corresponding ListLogsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListLogsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListLogsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListLogsRequest_FieldPathArrayItemValue
}

type ListLogsRequest_FieldPathSelector int32

const (
	ListLogsRequest_FieldPathSelectorParents   ListLogsRequest_FieldPathSelector = 0
	ListLogsRequest_FieldPathSelectorFilter    ListLogsRequest_FieldPathSelector = 1
	ListLogsRequest_FieldPathSelectorInterval  ListLogsRequest_FieldPathSelector = 2
	ListLogsRequest_FieldPathSelectorPageSize  ListLogsRequest_FieldPathSelector = 3
	ListLogsRequest_FieldPathSelectorPageToken ListLogsRequest_FieldPathSelector = 4
)

func (s ListLogsRequest_FieldPathSelector) String() string {
	switch s {
	case ListLogsRequest_FieldPathSelectorParents:
		return "parents"
	case ListLogsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListLogsRequest_FieldPathSelectorInterval:
		return "interval"
	case ListLogsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListLogsRequest_FieldPathSelectorPageToken:
		return "page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", s))
	}
}

func BuildListLogsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListLogsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListLogsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parents":
			return &ListLogsRequest_FieldTerminalPath{selector: ListLogsRequest_FieldPathSelectorParents}, nil
		case "filter":
			return &ListLogsRequest_FieldTerminalPath{selector: ListLogsRequest_FieldPathSelectorFilter}, nil
		case "interval":
			return &ListLogsRequest_FieldTerminalPath{selector: ListLogsRequest_FieldPathSelectorInterval}, nil
		case "page_size", "pageSize", "page-size":
			return &ListLogsRequest_FieldTerminalPath{selector: ListLogsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListLogsRequest_FieldTerminalPath{selector: ListLogsRequest_FieldPathSelectorPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "interval":
			if subpath, err := logging_common.BuildTimeInterval_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListLogsRequest_FieldSubPath{selector: ListLogsRequest_FieldPathSelectorInterval, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListLogsRequest", fp)
}

func ParseListLogsRequest_FieldPath(rawField string) (ListLogsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListLogsRequest_FieldPath(fp)
}

func MustParseListLogsRequest_FieldPath(rawField string) ListLogsRequest_FieldPath {
	fp, err := ParseListLogsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListLogsRequest_FieldTerminalPath struct {
	selector ListLogsRequest_FieldPathSelector
}

var _ ListLogsRequest_FieldPath = (*ListLogsRequest_FieldTerminalPath)(nil)

func (fp *ListLogsRequest_FieldTerminalPath) Selector() ListLogsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListLogsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListLogsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListLogsRequest
func (fp *ListLogsRequest_FieldTerminalPath) Get(source *ListLogsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListLogsRequest_FieldPathSelectorParents:
			for _, value := range source.GetParents() {
				values = append(values, value)
			}
		case ListLogsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListLogsRequest_FieldPathSelectorInterval:
			if source.Interval != nil {
				values = append(values, source.Interval)
			}
		case ListLogsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListLogsRequest_FieldPathSelectorPageToken:
			values = append(values, source.PageToken)
		default:
			panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListLogsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListLogsRequest))
}

// GetSingle returns value pointed by specific field of from source ListLogsRequest
func (fp *ListLogsRequest_FieldTerminalPath) GetSingle(source *ListLogsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListLogsRequest_FieldPathSelectorParents:
		res := source.GetParents()
		return res, res != nil
	case ListLogsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListLogsRequest_FieldPathSelectorInterval:
		res := source.GetInterval()
		return res, res != nil
	case ListLogsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListLogsRequest_FieldPathSelectorPageToken:
		return source.GetPageToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fp.selector))
	}
}

func (fp *ListLogsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListLogsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListLogsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListLogsRequest_FieldPathSelectorParents:
		return ([]*log.ParentReference)(nil)
	case ListLogsRequest_FieldPathSelectorFilter:
		return (*log.Filter)(nil)
	case ListLogsRequest_FieldPathSelectorInterval:
		return (*logging_common.TimeInterval)(nil)
	case ListLogsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListLogsRequest_FieldPathSelectorPageToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fp.selector))
	}
}

func (fp *ListLogsRequest_FieldTerminalPath) ClearValue(item *ListLogsRequest) {
	if item != nil {
		switch fp.selector {
		case ListLogsRequest_FieldPathSelectorParents:
			item.Parents = nil
		case ListLogsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListLogsRequest_FieldPathSelectorInterval:
			item.Interval = nil
		case ListLogsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListLogsRequest_FieldPathSelectorPageToken:
			item.PageToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListLogsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListLogsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListLogsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListLogsRequest_FieldPathSelectorParents ||
		fp.selector == ListLogsRequest_FieldPathSelectorFilter ||
		fp.selector == ListLogsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListLogsRequest_FieldPathSelectorPageToken
}

func (fp *ListLogsRequest_FieldTerminalPath) WithIValue(value interface{}) ListLogsRequest_FieldPathValue {
	switch fp.selector {
	case ListLogsRequest_FieldPathSelectorParents:
		return &ListLogsRequest_FieldTerminalPathValue{ListLogsRequest_FieldTerminalPath: *fp, value: value.([]*log.ParentReference)}
	case ListLogsRequest_FieldPathSelectorFilter:
		return &ListLogsRequest_FieldTerminalPathValue{ListLogsRequest_FieldTerminalPath: *fp, value: value.(*log.Filter)}
	case ListLogsRequest_FieldPathSelectorInterval:
		return &ListLogsRequest_FieldTerminalPathValue{ListLogsRequest_FieldTerminalPath: *fp, value: value.(*logging_common.TimeInterval)}
	case ListLogsRequest_FieldPathSelectorPageSize:
		return &ListLogsRequest_FieldTerminalPathValue{ListLogsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListLogsRequest_FieldPathSelectorPageToken:
		return &ListLogsRequest_FieldTerminalPathValue{ListLogsRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fp.selector))
	}
}

func (fp *ListLogsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListLogsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListLogsRequest_FieldPathArrayOfValues {
	fpaov := &ListLogsRequest_FieldTerminalPathArrayOfValues{ListLogsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListLogsRequest_FieldPathSelectorParents:
		return &ListLogsRequest_FieldTerminalPathArrayOfValues{ListLogsRequest_FieldTerminalPath: *fp, values: values.([][]*log.ParentReference)}
	case ListLogsRequest_FieldPathSelectorFilter:
		return &ListLogsRequest_FieldTerminalPathArrayOfValues{ListLogsRequest_FieldTerminalPath: *fp, values: values.([]*log.Filter)}
	case ListLogsRequest_FieldPathSelectorInterval:
		return &ListLogsRequest_FieldTerminalPathArrayOfValues{ListLogsRequest_FieldTerminalPath: *fp, values: values.([]*logging_common.TimeInterval)}
	case ListLogsRequest_FieldPathSelectorPageSize:
		return &ListLogsRequest_FieldTerminalPathArrayOfValues{ListLogsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListLogsRequest_FieldPathSelectorPageToken:
		return &ListLogsRequest_FieldTerminalPathArrayOfValues{ListLogsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListLogsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListLogsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListLogsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case ListLogsRequest_FieldPathSelectorParents:
		return &ListLogsRequest_FieldTerminalPathArrayItemValue{ListLogsRequest_FieldTerminalPath: *fp, value: value.(*log.ParentReference)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fp.selector))
	}
}

func (fp *ListLogsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListLogsRequest_FieldSubPath struct {
	selector ListLogsRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListLogsRequest_FieldPath = (*ListLogsRequest_FieldSubPath)(nil)

func (fps *ListLogsRequest_FieldSubPath) Selector() ListLogsRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ListLogsRequest_FieldSubPath) AsIntervalSubPath() (logging_common.TimeInterval_FieldPath, bool) {
	res, ok := fps.subPath.(logging_common.TimeInterval_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListLogsRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListLogsRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListLogsRequest
func (fps *ListLogsRequest_FieldSubPath) Get(source *ListLogsRequest) (values []interface{}) {
	if asTimeIntervalFieldPath, ok := fps.AsIntervalSubPath(); ok {
		values = append(values, asTimeIntervalFieldPath.Get(source.GetInterval())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fps.selector))
	}
	return
}

func (fps *ListLogsRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListLogsRequest))
}

// GetSingle returns value of selected field from source ListLogsRequest
func (fps *ListLogsRequest_FieldSubPath) GetSingle(source *ListLogsRequest) (interface{}, bool) {
	switch fps.selector {
	case ListLogsRequest_FieldPathSelectorInterval:
		if source.GetInterval() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fps.selector))
	}
}

func (fps *ListLogsRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListLogsRequest))
}

// GetDefault returns a default value of the field type
func (fps *ListLogsRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListLogsRequest_FieldSubPath) ClearValue(item *ListLogsRequest) {
	if item != nil {
		switch fps.selector {
		case ListLogsRequest_FieldPathSelectorInterval:
			fps.subPath.ClearValueRaw(item.Interval)
		default:
			panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fps.selector))
		}
	}
}

func (fps *ListLogsRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListLogsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListLogsRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListLogsRequest_FieldSubPath) WithIValue(value interface{}) ListLogsRequest_FieldPathValue {
	return &ListLogsRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListLogsRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListLogsRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ListLogsRequest_FieldPathArrayOfValues {
	return &ListLogsRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListLogsRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListLogsRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ListLogsRequest_FieldPathArrayItemValue {
	return &ListLogsRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListLogsRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListLogsRequest_FieldPathValue allows storing values for ListLogsRequest fields according to their type
type ListLogsRequest_FieldPathValue interface {
	ListLogsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListLogsRequest)
	CompareWith(*ListLogsRequest) (cmp int, comparable bool)
}

func ParseListLogsRequest_FieldPathValue(pathStr, valueStr string) (ListLogsRequest_FieldPathValue, error) {
	fp, err := ParseListLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListLogsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListLogsRequest_FieldPathValue), nil
}

func MustParseListLogsRequest_FieldPathValue(pathStr, valueStr string) ListLogsRequest_FieldPathValue {
	fpv, err := ParseListLogsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListLogsRequest_FieldTerminalPathValue struct {
	ListLogsRequest_FieldTerminalPath
	value interface{}
}

var _ ListLogsRequest_FieldPathValue = (*ListLogsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListLogsRequest' as interface{}
func (fpv *ListLogsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListLogsRequest_FieldTerminalPathValue) AsParentsValue() ([]*log.ParentReference, bool) {
	res, ok := fpv.value.([]*log.ParentReference)
	return res, ok
}
func (fpv *ListLogsRequest_FieldTerminalPathValue) AsFilterValue() (*log.Filter, bool) {
	res, ok := fpv.value.(*log.Filter)
	return res, ok
}
func (fpv *ListLogsRequest_FieldTerminalPathValue) AsIntervalValue() (*logging_common.TimeInterval, bool) {
	res, ok := fpv.value.(*logging_common.TimeInterval)
	return res, ok
}
func (fpv *ListLogsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListLogsRequest_FieldTerminalPathValue) AsPageTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ListLogsRequest
func (fpv *ListLogsRequest_FieldTerminalPathValue) SetTo(target **ListLogsRequest) {
	if *target == nil {
		*target = new(ListLogsRequest)
	}
	switch fpv.selector {
	case ListLogsRequest_FieldPathSelectorParents:
		(*target).Parents = fpv.value.([]*log.ParentReference)
	case ListLogsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*log.Filter)
	case ListLogsRequest_FieldPathSelectorInterval:
		(*target).Interval = fpv.value.(*logging_common.TimeInterval)
	case ListLogsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListLogsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fpv.selector))
	}
}

func (fpv *ListLogsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListLogsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListLogsRequest_FieldTerminalPathValue' with the value under path in 'ListLogsRequest'.
func (fpv *ListLogsRequest_FieldTerminalPathValue) CompareWith(source *ListLogsRequest) (int, bool) {
	switch fpv.selector {
	case ListLogsRequest_FieldPathSelectorParents:
		return 0, false
	case ListLogsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListLogsRequest_FieldPathSelectorInterval:
		return 0, false
	case ListLogsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListLogsRequest_FieldPathSelectorPageToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetPageToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fpv.selector))
	}
}

func (fpv *ListLogsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListLogsRequest))
}

type ListLogsRequest_FieldSubPathValue struct {
	ListLogsRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListLogsRequest_FieldPathValue = (*ListLogsRequest_FieldSubPathValue)(nil)

func (fpvs *ListLogsRequest_FieldSubPathValue) AsIntervalPathValue() (logging_common.TimeInterval_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(logging_common.TimeInterval_FieldPathValue)
	return res, ok
}

func (fpvs *ListLogsRequest_FieldSubPathValue) SetTo(target **ListLogsRequest) {
	if *target == nil {
		*target = new(ListLogsRequest)
	}
	switch fpvs.Selector() {
	case ListLogsRequest_FieldPathSelectorInterval:
		fpvs.subPathValue.(logging_common.TimeInterval_FieldPathValue).SetTo(&(*target).Interval)
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ListLogsRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListLogsRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListLogsRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListLogsRequest_FieldSubPathValue) CompareWith(source *ListLogsRequest) (int, bool) {
	switch fpvs.Selector() {
	case ListLogsRequest_FieldPathSelectorInterval:
		return fpvs.subPathValue.(logging_common.TimeInterval_FieldPathValue).CompareWith(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ListLogsRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListLogsRequest))
}

// ListLogsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListLogsRequest according to their type
// Present only for array (repeated) types.
type ListLogsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListLogsRequest_FieldPath
	ContainsValue(*ListLogsRequest) bool
}

// ParseListLogsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListLogsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListLogsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListLogsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListLogsRequest_FieldPathArrayItemValue), nil
}

func MustParseListLogsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListLogsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListLogsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListLogsRequest_FieldTerminalPathArrayItemValue struct {
	ListLogsRequest_FieldTerminalPath
	value interface{}
}

var _ ListLogsRequest_FieldPathArrayItemValue = (*ListLogsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListLogsRequest as interface{}
func (fpaiv *ListLogsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListLogsRequest_FieldTerminalPathArrayItemValue) AsParentsItemValue() (*log.ParentReference, bool) {
	res, ok := fpaiv.value.(*log.ParentReference)
	return res, ok
}

func (fpaiv *ListLogsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListLogsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListLogsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListLogsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListLogsRequest'
func (fpaiv *ListLogsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListLogsRequest) bool {
	slice := fpaiv.ListLogsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListLogsRequest_FieldSubPathArrayItemValue struct {
	ListLogsRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListLogsRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListLogsRequest_FieldSubPathArrayItemValue) AsIntervalPathItemValue() (logging_common.TimeInterval_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(logging_common.TimeInterval_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListLogsRequest'
func (fpaivs *ListLogsRequest_FieldSubPathArrayItemValue) ContainsValue(source *ListLogsRequest) bool {
	switch fpaivs.Selector() {
	case ListLogsRequest_FieldPathSelectorInterval:
		return fpaivs.subPathItemValue.(logging_common.TimeInterval_FieldPathArrayItemValue).ContainsValue(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsRequest: %d", fpaivs.Selector()))
	}
}

// ListLogsRequest_FieldPathArrayOfValues allows storing slice of values for ListLogsRequest fields according to their type
type ListLogsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListLogsRequest_FieldPath
}

func ParseListLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListLogsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListLogsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListLogsRequest_FieldPathArrayOfValues), nil
}

func MustParseListLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListLogsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListLogsRequest_FieldTerminalPathArrayOfValues struct {
	ListLogsRequest_FieldTerminalPath
	values interface{}
}

var _ ListLogsRequest_FieldPathArrayOfValues = (*ListLogsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListLogsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListLogsRequest_FieldPathSelectorParents:
		for _, v := range fpaov.values.([][]*log.ParentReference) {
			values = append(values, v)
		}
	case ListLogsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*log.Filter) {
			values = append(values, v)
		}
	case ListLogsRequest_FieldPathSelectorInterval:
		for _, v := range fpaov.values.([]*logging_common.TimeInterval) {
			values = append(values, v)
		}
	case ListLogsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListLogsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListLogsRequest_FieldTerminalPathArrayOfValues) AsParentsArrayOfValues() ([][]*log.ParentReference, bool) {
	res, ok := fpaov.values.([][]*log.ParentReference)
	return res, ok
}
func (fpaov *ListLogsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*log.Filter, bool) {
	res, ok := fpaov.values.([]*log.Filter)
	return res, ok
}
func (fpaov *ListLogsRequest_FieldTerminalPathArrayOfValues) AsIntervalArrayOfValues() ([]*logging_common.TimeInterval, bool) {
	res, ok := fpaov.values.([]*logging_common.TimeInterval)
	return res, ok
}
func (fpaov *ListLogsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListLogsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type ListLogsRequest_FieldSubPathArrayOfValues struct {
	ListLogsRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListLogsRequest_FieldPathArrayOfValues = (*ListLogsRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListLogsRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListLogsRequest_FieldSubPathArrayOfValues) AsIntervalPathArrayOfValues() (logging_common.TimeInterval_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(logging_common.TimeInterval_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListLogsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListLogsResponse_FieldPathSelector
	Get(source *ListLogsResponse) []interface{}
	GetSingle(source *ListLogsResponse) (interface{}, bool)
	ClearValue(item *ListLogsResponse)

	// Those methods build corresponding ListLogsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListLogsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListLogsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListLogsResponse_FieldPathArrayItemValue
}

type ListLogsResponse_FieldPathSelector int32

const (
	ListLogsResponse_FieldPathSelectorLogs            ListLogsResponse_FieldPathSelector = 0
	ListLogsResponse_FieldPathSelectorNextPageToken   ListLogsResponse_FieldPathSelector = 1
	ListLogsResponse_FieldPathSelectorExecutionErrors ListLogsResponse_FieldPathSelector = 2
)

func (s ListLogsResponse_FieldPathSelector) String() string {
	switch s {
	case ListLogsResponse_FieldPathSelectorLogs:
		return "logs"
	case ListLogsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListLogsResponse_FieldPathSelectorExecutionErrors:
		return "execution_errors"
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", s))
	}
}

func BuildListLogsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListLogsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListLogsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "logs":
			return &ListLogsResponse_FieldTerminalPath{selector: ListLogsResponse_FieldPathSelectorLogs}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListLogsResponse_FieldTerminalPath{selector: ListLogsResponse_FieldPathSelectorNextPageToken}, nil
		case "execution_errors", "executionErrors", "execution-errors":
			return &ListLogsResponse_FieldTerminalPath{selector: ListLogsResponse_FieldPathSelectorExecutionErrors}, nil
		}
	} else {
		switch fp[0] {
		case "logs":
			if subpath, err := log.BuildLog_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListLogsResponse_FieldSubPath{selector: ListLogsResponse_FieldPathSelectorLogs, subPath: subpath}, nil
			}
		case "execution_errors", "executionErrors", "execution-errors":
			if subpath, err := rpc.BuildStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListLogsResponse_FieldSubPath{selector: ListLogsResponse_FieldPathSelectorExecutionErrors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListLogsResponse", fp)
}

func ParseListLogsResponse_FieldPath(rawField string) (ListLogsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListLogsResponse_FieldPath(fp)
}

func MustParseListLogsResponse_FieldPath(rawField string) ListLogsResponse_FieldPath {
	fp, err := ParseListLogsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListLogsResponse_FieldTerminalPath struct {
	selector ListLogsResponse_FieldPathSelector
}

var _ ListLogsResponse_FieldPath = (*ListLogsResponse_FieldTerminalPath)(nil)

func (fp *ListLogsResponse_FieldTerminalPath) Selector() ListLogsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListLogsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListLogsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListLogsResponse
func (fp *ListLogsResponse_FieldTerminalPath) Get(source *ListLogsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListLogsResponse_FieldPathSelectorLogs:
			for _, value := range source.GetLogs() {
				values = append(values, value)
			}
		case ListLogsResponse_FieldPathSelectorNextPageToken:
			values = append(values, source.NextPageToken)
		case ListLogsResponse_FieldPathSelectorExecutionErrors:
			for _, value := range source.GetExecutionErrors() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListLogsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListLogsResponse))
}

// GetSingle returns value pointed by specific field of from source ListLogsResponse
func (fp *ListLogsResponse_FieldTerminalPath) GetSingle(source *ListLogsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListLogsResponse_FieldPathSelectorLogs:
		res := source.GetLogs()
		return res, res != nil
	case ListLogsResponse_FieldPathSelectorNextPageToken:
		return source.GetNextPageToken(), source != nil
	case ListLogsResponse_FieldPathSelectorExecutionErrors:
		res := source.GetExecutionErrors()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fp.selector))
	}
}

func (fp *ListLogsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListLogsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListLogsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListLogsResponse_FieldPathSelectorLogs:
		return ([]*log.Log)(nil)
	case ListLogsResponse_FieldPathSelectorNextPageToken:
		return ""
	case ListLogsResponse_FieldPathSelectorExecutionErrors:
		return ([]*rpc.Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fp.selector))
	}
}

func (fp *ListLogsResponse_FieldTerminalPath) ClearValue(item *ListLogsResponse) {
	if item != nil {
		switch fp.selector {
		case ListLogsResponse_FieldPathSelectorLogs:
			item.Logs = nil
		case ListLogsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = ""
		case ListLogsResponse_FieldPathSelectorExecutionErrors:
			item.ExecutionErrors = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListLogsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListLogsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListLogsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListLogsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListLogsResponse_FieldTerminalPath) WithIValue(value interface{}) ListLogsResponse_FieldPathValue {
	switch fp.selector {
	case ListLogsResponse_FieldPathSelectorLogs:
		return &ListLogsResponse_FieldTerminalPathValue{ListLogsResponse_FieldTerminalPath: *fp, value: value.([]*log.Log)}
	case ListLogsResponse_FieldPathSelectorNextPageToken:
		return &ListLogsResponse_FieldTerminalPathValue{ListLogsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case ListLogsResponse_FieldPathSelectorExecutionErrors:
		return &ListLogsResponse_FieldTerminalPathValue{ListLogsResponse_FieldTerminalPath: *fp, value: value.([]*rpc.Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fp.selector))
	}
}

func (fp *ListLogsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListLogsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListLogsResponse_FieldPathArrayOfValues {
	fpaov := &ListLogsResponse_FieldTerminalPathArrayOfValues{ListLogsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListLogsResponse_FieldPathSelectorLogs:
		return &ListLogsResponse_FieldTerminalPathArrayOfValues{ListLogsResponse_FieldTerminalPath: *fp, values: values.([][]*log.Log)}
	case ListLogsResponse_FieldPathSelectorNextPageToken:
		return &ListLogsResponse_FieldTerminalPathArrayOfValues{ListLogsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case ListLogsResponse_FieldPathSelectorExecutionErrors:
		return &ListLogsResponse_FieldTerminalPathArrayOfValues{ListLogsResponse_FieldTerminalPath: *fp, values: values.([][]*rpc.Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListLogsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListLogsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListLogsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListLogsResponse_FieldPathSelectorLogs:
		return &ListLogsResponse_FieldTerminalPathArrayItemValue{ListLogsResponse_FieldTerminalPath: *fp, value: value.(*log.Log)}
	case ListLogsResponse_FieldPathSelectorExecutionErrors:
		return &ListLogsResponse_FieldTerminalPathArrayItemValue{ListLogsResponse_FieldTerminalPath: *fp, value: value.(*rpc.Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fp.selector))
	}
}

func (fp *ListLogsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListLogsResponse_FieldSubPath struct {
	selector ListLogsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListLogsResponse_FieldPath = (*ListLogsResponse_FieldSubPath)(nil)

func (fps *ListLogsResponse_FieldSubPath) Selector() ListLogsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListLogsResponse_FieldSubPath) AsLogsSubPath() (log.Log_FieldPath, bool) {
	res, ok := fps.subPath.(log.Log_FieldPath)
	return res, ok
}
func (fps *ListLogsResponse_FieldSubPath) AsExecutionErrorsSubPath() (rpc.Status_FieldPath, bool) {
	res, ok := fps.subPath.(rpc.Status_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListLogsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListLogsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListLogsResponse
func (fps *ListLogsResponse_FieldSubPath) Get(source *ListLogsResponse) (values []interface{}) {
	if asLogFieldPath, ok := fps.AsLogsSubPath(); ok {
		for _, item := range source.GetLogs() {
			values = append(values, asLogFieldPath.Get(item)...)
		}
	} else if asStatusFieldPath, ok := fps.AsExecutionErrorsSubPath(); ok {
		for _, item := range source.GetExecutionErrors() {
			values = append(values, asStatusFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListLogsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListLogsResponse))
}

// GetSingle returns value of selected field from source ListLogsResponse
func (fps *ListLogsResponse_FieldSubPath) GetSingle(source *ListLogsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListLogsResponse_FieldPathSelectorLogs:
		if len(source.GetLogs()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLogs()[0])
	case ListLogsResponse_FieldPathSelectorExecutionErrors:
		if len(source.GetExecutionErrors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetExecutionErrors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fps.selector))
	}
}

func (fps *ListLogsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListLogsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListLogsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListLogsResponse_FieldSubPath) ClearValue(item *ListLogsResponse) {
	if item != nil {
		switch fps.selector {
		case ListLogsResponse_FieldPathSelectorLogs:
			for _, subItem := range item.Logs {
				fps.subPath.ClearValueRaw(subItem)
			}
		case ListLogsResponse_FieldPathSelectorExecutionErrors:
			for _, subItem := range item.ExecutionErrors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListLogsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListLogsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListLogsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListLogsResponse_FieldSubPath) WithIValue(value interface{}) ListLogsResponse_FieldPathValue {
	return &ListLogsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListLogsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListLogsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListLogsResponse_FieldPathArrayOfValues {
	return &ListLogsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListLogsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListLogsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListLogsResponse_FieldPathArrayItemValue {
	return &ListLogsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListLogsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListLogsResponse_FieldPathValue allows storing values for ListLogsResponse fields according to their type
type ListLogsResponse_FieldPathValue interface {
	ListLogsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListLogsResponse)
	CompareWith(*ListLogsResponse) (cmp int, comparable bool)
}

func ParseListLogsResponse_FieldPathValue(pathStr, valueStr string) (ListLogsResponse_FieldPathValue, error) {
	fp, err := ParseListLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListLogsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListLogsResponse_FieldPathValue), nil
}

func MustParseListLogsResponse_FieldPathValue(pathStr, valueStr string) ListLogsResponse_FieldPathValue {
	fpv, err := ParseListLogsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListLogsResponse_FieldTerminalPathValue struct {
	ListLogsResponse_FieldTerminalPath
	value interface{}
}

var _ ListLogsResponse_FieldPathValue = (*ListLogsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListLogsResponse' as interface{}
func (fpv *ListLogsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListLogsResponse_FieldTerminalPathValue) AsLogsValue() ([]*log.Log, bool) {
	res, ok := fpv.value.([]*log.Log)
	return res, ok
}
func (fpv *ListLogsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ListLogsResponse_FieldTerminalPathValue) AsExecutionErrorsValue() ([]*rpc.Status, bool) {
	res, ok := fpv.value.([]*rpc.Status)
	return res, ok
}

// SetTo stores value for selected field for object ListLogsResponse
func (fpv *ListLogsResponse_FieldTerminalPathValue) SetTo(target **ListLogsResponse) {
	if *target == nil {
		*target = new(ListLogsResponse)
	}
	switch fpv.selector {
	case ListLogsResponse_FieldPathSelectorLogs:
		(*target).Logs = fpv.value.([]*log.Log)
	case ListLogsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(string)
	case ListLogsResponse_FieldPathSelectorExecutionErrors:
		(*target).ExecutionErrors = fpv.value.([]*rpc.Status)
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fpv.selector))
	}
}

func (fpv *ListLogsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListLogsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListLogsResponse_FieldTerminalPathValue' with the value under path in 'ListLogsResponse'.
func (fpv *ListLogsResponse_FieldTerminalPathValue) CompareWith(source *ListLogsResponse) (int, bool) {
	switch fpv.selector {
	case ListLogsResponse_FieldPathSelectorLogs:
		return 0, false
	case ListLogsResponse_FieldPathSelectorNextPageToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetNextPageToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListLogsResponse_FieldPathSelectorExecutionErrors:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fpv.selector))
	}
}

func (fpv *ListLogsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListLogsResponse))
}

type ListLogsResponse_FieldSubPathValue struct {
	ListLogsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListLogsResponse_FieldPathValue = (*ListLogsResponse_FieldSubPathValue)(nil)

func (fpvs *ListLogsResponse_FieldSubPathValue) AsLogsPathValue() (log.Log_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(log.Log_FieldPathValue)
	return res, ok
}
func (fpvs *ListLogsResponse_FieldSubPathValue) AsExecutionErrorsPathValue() (rpc.Status_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(rpc.Status_FieldPathValue)
	return res, ok
}

func (fpvs *ListLogsResponse_FieldSubPathValue) SetTo(target **ListLogsResponse) {
	if *target == nil {
		*target = new(ListLogsResponse)
	}
	switch fpvs.Selector() {
	case ListLogsResponse_FieldPathSelectorLogs:
		panic("FieldPath setter is unsupported for array subpaths")
	case ListLogsResponse_FieldPathSelectorExecutionErrors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListLogsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListLogsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListLogsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListLogsResponse_FieldSubPathValue) CompareWith(source *ListLogsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListLogsResponse_FieldPathSelectorLogs:
		return 0, false // repeated field
	case ListLogsResponse_FieldPathSelectorExecutionErrors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListLogsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListLogsResponse))
}

// ListLogsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListLogsResponse according to their type
// Present only for array (repeated) types.
type ListLogsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListLogsResponse_FieldPath
	ContainsValue(*ListLogsResponse) bool
}

// ParseListLogsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListLogsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListLogsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListLogsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListLogsResponse_FieldPathArrayItemValue), nil
}

func MustParseListLogsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListLogsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListLogsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListLogsResponse_FieldTerminalPathArrayItemValue struct {
	ListLogsResponse_FieldTerminalPath
	value interface{}
}

var _ ListLogsResponse_FieldPathArrayItemValue = (*ListLogsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListLogsResponse as interface{}
func (fpaiv *ListLogsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListLogsResponse_FieldTerminalPathArrayItemValue) AsLogsItemValue() (*log.Log, bool) {
	res, ok := fpaiv.value.(*log.Log)
	return res, ok
}
func (fpaiv *ListLogsResponse_FieldTerminalPathArrayItemValue) AsExecutionErrorsItemValue() (*rpc.Status, bool) {
	res, ok := fpaiv.value.(*rpc.Status)
	return res, ok
}

func (fpaiv *ListLogsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListLogsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListLogsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListLogsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListLogsResponse'
func (fpaiv *ListLogsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListLogsResponse) bool {
	slice := fpaiv.ListLogsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListLogsResponse_FieldSubPathArrayItemValue struct {
	ListLogsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListLogsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListLogsResponse_FieldSubPathArrayItemValue) AsLogsPathItemValue() (log.Log_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(log.Log_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ListLogsResponse_FieldSubPathArrayItemValue) AsExecutionErrorsPathItemValue() (rpc.Status_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(rpc.Status_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListLogsResponse'
func (fpaivs *ListLogsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListLogsResponse) bool {
	switch fpaivs.Selector() {
	case ListLogsResponse_FieldPathSelectorLogs:
		return false // repeated/map field
	case ListLogsResponse_FieldPathSelectorExecutionErrors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse: %d", fpaivs.Selector()))
	}
}

// ListLogsResponse_FieldPathArrayOfValues allows storing slice of values for ListLogsResponse fields according to their type
type ListLogsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListLogsResponse_FieldPath
}

func ParseListLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListLogsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListLogsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListLogsResponse_FieldPathArrayOfValues), nil
}

func MustParseListLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListLogsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListLogsResponse_FieldTerminalPathArrayOfValues struct {
	ListLogsResponse_FieldTerminalPath
	values interface{}
}

var _ ListLogsResponse_FieldPathArrayOfValues = (*ListLogsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListLogsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListLogsResponse_FieldPathSelectorLogs:
		for _, v := range fpaov.values.([][]*log.Log) {
			values = append(values, v)
		}
	case ListLogsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ListLogsResponse_FieldPathSelectorExecutionErrors:
		for _, v := range fpaov.values.([][]*rpc.Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListLogsResponse_FieldTerminalPathArrayOfValues) AsLogsArrayOfValues() ([][]*log.Log, bool) {
	res, ok := fpaov.values.([][]*log.Log)
	return res, ok
}
func (fpaov *ListLogsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ListLogsResponse_FieldTerminalPathArrayOfValues) AsExecutionErrorsArrayOfValues() ([][]*rpc.Status, bool) {
	res, ok := fpaov.values.([][]*rpc.Status)
	return res, ok
}

type ListLogsResponse_FieldSubPathArrayOfValues struct {
	ListLogsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListLogsResponse_FieldPathArrayOfValues = (*ListLogsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListLogsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListLogsResponse_FieldSubPathArrayOfValues) AsLogsPathArrayOfValues() (log.Log_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(log.Log_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ListLogsResponse_FieldSubPathArrayOfValues) AsExecutionErrorsPathArrayOfValues() (rpc.Status_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(rpc.Status_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListLogsResponseErrorDetails_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListLogsResponseErrorDetails_FieldPathSelector
	Get(source *ListLogsResponse_ErrorDetails) []interface{}
	GetSingle(source *ListLogsResponse_ErrorDetails) (interface{}, bool)
	ClearValue(item *ListLogsResponse_ErrorDetails)

	// Those methods build corresponding ListLogsResponseErrorDetails_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListLogsResponseErrorDetails_FieldPathValue
	WithIArrayOfValues(values interface{}) ListLogsResponseErrorDetails_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListLogsResponseErrorDetails_FieldPathArrayItemValue
}

type ListLogsResponseErrorDetails_FieldPathSelector int32

const (
	ListLogsResponseErrorDetails_FieldPathSelectorRegionId ListLogsResponseErrorDetails_FieldPathSelector = 0
)

func (s ListLogsResponseErrorDetails_FieldPathSelector) String() string {
	switch s {
	case ListLogsResponseErrorDetails_FieldPathSelectorRegionId:
		return "region_id"
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse_ErrorDetails: %d", s))
	}
}

func BuildListLogsResponseErrorDetails_FieldPath(fp gotenobject.RawFieldPath) (ListLogsResponseErrorDetails_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListLogsResponse_ErrorDetails")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "region_id", "regionId", "region-id":
			return &ListLogsResponseErrorDetails_FieldTerminalPath{selector: ListLogsResponseErrorDetails_FieldPathSelectorRegionId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListLogsResponse_ErrorDetails", fp)
}

func ParseListLogsResponseErrorDetails_FieldPath(rawField string) (ListLogsResponseErrorDetails_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListLogsResponseErrorDetails_FieldPath(fp)
}

func MustParseListLogsResponseErrorDetails_FieldPath(rawField string) ListLogsResponseErrorDetails_FieldPath {
	fp, err := ParseListLogsResponseErrorDetails_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListLogsResponseErrorDetails_FieldTerminalPath struct {
	selector ListLogsResponseErrorDetails_FieldPathSelector
}

var _ ListLogsResponseErrorDetails_FieldPath = (*ListLogsResponseErrorDetails_FieldTerminalPath)(nil)

func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) Selector() ListLogsResponseErrorDetails_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListLogsResponse_ErrorDetails
func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) Get(source *ListLogsResponse_ErrorDetails) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListLogsResponseErrorDetails_FieldPathSelectorRegionId:
			values = append(values, source.RegionId)
		default:
			panic(fmt.Sprintf("Invalid selector for ListLogsResponse_ErrorDetails: %d", fp.selector))
		}
	}
	return
}

func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListLogsResponse_ErrorDetails))
}

// GetSingle returns value pointed by specific field of from source ListLogsResponse_ErrorDetails
func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) GetSingle(source *ListLogsResponse_ErrorDetails) (interface{}, bool) {
	switch fp.selector {
	case ListLogsResponseErrorDetails_FieldPathSelectorRegionId:
		return source.GetRegionId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse_ErrorDetails: %d", fp.selector))
	}
}

func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListLogsResponse_ErrorDetails))
}

// GetDefault returns a default value of the field type
func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListLogsResponseErrorDetails_FieldPathSelectorRegionId:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse_ErrorDetails: %d", fp.selector))
	}
}

func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) ClearValue(item *ListLogsResponse_ErrorDetails) {
	if item != nil {
		switch fp.selector {
		case ListLogsResponseErrorDetails_FieldPathSelectorRegionId:
			item.RegionId = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ListLogsResponse_ErrorDetails: %d", fp.selector))
		}
	}
}

func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListLogsResponse_ErrorDetails))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListLogsResponseErrorDetails_FieldPathSelectorRegionId
}

func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) WithIValue(value interface{}) ListLogsResponseErrorDetails_FieldPathValue {
	switch fp.selector {
	case ListLogsResponseErrorDetails_FieldPathSelectorRegionId:
		return &ListLogsResponseErrorDetails_FieldTerminalPathValue{ListLogsResponseErrorDetails_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse_ErrorDetails: %d", fp.selector))
	}
}

func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListLogsResponseErrorDetails_FieldPathArrayOfValues {
	fpaov := &ListLogsResponseErrorDetails_FieldTerminalPathArrayOfValues{ListLogsResponseErrorDetails_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListLogsResponseErrorDetails_FieldPathSelectorRegionId:
		return &ListLogsResponseErrorDetails_FieldTerminalPathArrayOfValues{ListLogsResponseErrorDetails_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse_ErrorDetails: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListLogsResponseErrorDetails_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse_ErrorDetails: %d", fp.selector))
	}
}

func (fp *ListLogsResponseErrorDetails_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListLogsResponseErrorDetails_FieldPathValue allows storing values for ErrorDetails fields according to their type
type ListLogsResponseErrorDetails_FieldPathValue interface {
	ListLogsResponseErrorDetails_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListLogsResponse_ErrorDetails)
	CompareWith(*ListLogsResponse_ErrorDetails) (cmp int, comparable bool)
}

func ParseListLogsResponseErrorDetails_FieldPathValue(pathStr, valueStr string) (ListLogsResponseErrorDetails_FieldPathValue, error) {
	fp, err := ParseListLogsResponseErrorDetails_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ErrorDetails field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListLogsResponseErrorDetails_FieldPathValue), nil
}

func MustParseListLogsResponseErrorDetails_FieldPathValue(pathStr, valueStr string) ListLogsResponseErrorDetails_FieldPathValue {
	fpv, err := ParseListLogsResponseErrorDetails_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListLogsResponseErrorDetails_FieldTerminalPathValue struct {
	ListLogsResponseErrorDetails_FieldTerminalPath
	value interface{}
}

var _ ListLogsResponseErrorDetails_FieldPathValue = (*ListLogsResponseErrorDetails_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ErrorDetails' as interface{}
func (fpv *ListLogsResponseErrorDetails_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListLogsResponseErrorDetails_FieldTerminalPathValue) AsRegionIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ErrorDetails
func (fpv *ListLogsResponseErrorDetails_FieldTerminalPathValue) SetTo(target **ListLogsResponse_ErrorDetails) {
	if *target == nil {
		*target = new(ListLogsResponse_ErrorDetails)
	}
	switch fpv.selector {
	case ListLogsResponseErrorDetails_FieldPathSelectorRegionId:
		(*target).RegionId = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse_ErrorDetails: %d", fpv.selector))
	}
}

func (fpv *ListLogsResponseErrorDetails_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListLogsResponse_ErrorDetails)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListLogsResponseErrorDetails_FieldTerminalPathValue' with the value under path in 'ListLogsResponse_ErrorDetails'.
func (fpv *ListLogsResponseErrorDetails_FieldTerminalPathValue) CompareWith(source *ListLogsResponse_ErrorDetails) (int, bool) {
	switch fpv.selector {
	case ListLogsResponseErrorDetails_FieldPathSelectorRegionId:
		leftValue := fpv.value.(string)
		rightValue := source.GetRegionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogsResponse_ErrorDetails: %d", fpv.selector))
	}
}

func (fpv *ListLogsResponseErrorDetails_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListLogsResponse_ErrorDetails))
}

// ListLogsResponseErrorDetails_FieldPathArrayItemValue allows storing single item in Path-specific values for ErrorDetails according to their type
// Present only for array (repeated) types.
type ListLogsResponseErrorDetails_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListLogsResponseErrorDetails_FieldPath
	ContainsValue(*ListLogsResponse_ErrorDetails) bool
}

// ParseListLogsResponseErrorDetails_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListLogsResponseErrorDetails_FieldPathArrayItemValue(pathStr, valueStr string) (ListLogsResponseErrorDetails_FieldPathArrayItemValue, error) {
	fp, err := ParseListLogsResponseErrorDetails_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ErrorDetails field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListLogsResponseErrorDetails_FieldPathArrayItemValue), nil
}

func MustParseListLogsResponseErrorDetails_FieldPathArrayItemValue(pathStr, valueStr string) ListLogsResponseErrorDetails_FieldPathArrayItemValue {
	fpaiv, err := ParseListLogsResponseErrorDetails_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListLogsResponseErrorDetails_FieldTerminalPathArrayItemValue struct {
	ListLogsResponseErrorDetails_FieldTerminalPath
	value interface{}
}

var _ ListLogsResponseErrorDetails_FieldPathArrayItemValue = (*ListLogsResponseErrorDetails_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListLogsResponse_ErrorDetails as interface{}
func (fpaiv *ListLogsResponseErrorDetails_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListLogsResponseErrorDetails_FieldTerminalPathArrayItemValue) GetSingle(source *ListLogsResponse_ErrorDetails) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListLogsResponseErrorDetails_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListLogsResponse_ErrorDetails))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ErrorDetails'
func (fpaiv *ListLogsResponseErrorDetails_FieldTerminalPathArrayItemValue) ContainsValue(source *ListLogsResponse_ErrorDetails) bool {
	slice := fpaiv.ListLogsResponseErrorDetails_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListLogsResponseErrorDetails_FieldPathArrayOfValues allows storing slice of values for ErrorDetails fields according to their type
type ListLogsResponseErrorDetails_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListLogsResponseErrorDetails_FieldPath
}

func ParseListLogsResponseErrorDetails_FieldPathArrayOfValues(pathStr, valuesStr string) (ListLogsResponseErrorDetails_FieldPathArrayOfValues, error) {
	fp, err := ParseListLogsResponseErrorDetails_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ErrorDetails field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListLogsResponseErrorDetails_FieldPathArrayOfValues), nil
}

func MustParseListLogsResponseErrorDetails_FieldPathArrayOfValues(pathStr, valuesStr string) ListLogsResponseErrorDetails_FieldPathArrayOfValues {
	fpaov, err := ParseListLogsResponseErrorDetails_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListLogsResponseErrorDetails_FieldTerminalPathArrayOfValues struct {
	ListLogsResponseErrorDetails_FieldTerminalPath
	values interface{}
}

var _ ListLogsResponseErrorDetails_FieldPathArrayOfValues = (*ListLogsResponseErrorDetails_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListLogsResponseErrorDetails_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListLogsResponseErrorDetails_FieldPathSelectorRegionId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListLogsResponseErrorDetails_FieldTerminalPathArrayOfValues) AsRegionIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateLogsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateLogsRequest_FieldPathSelector
	Get(source *CreateLogsRequest) []interface{}
	GetSingle(source *CreateLogsRequest) (interface{}, bool)
	ClearValue(item *CreateLogsRequest)

	// Those methods build corresponding CreateLogsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateLogsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateLogsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateLogsRequest_FieldPathArrayItemValue
}

type CreateLogsRequest_FieldPathSelector int32

const (
	CreateLogsRequest_FieldPathSelectorParent CreateLogsRequest_FieldPathSelector = 0
	CreateLogsRequest_FieldPathSelectorLogs   CreateLogsRequest_FieldPathSelector = 1
)

func (s CreateLogsRequest_FieldPathSelector) String() string {
	switch s {
	case CreateLogsRequest_FieldPathSelectorParent:
		return "parent"
	case CreateLogsRequest_FieldPathSelectorLogs:
		return "logs"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", s))
	}
}

func BuildCreateLogsRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateLogsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateLogsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateLogsRequest_FieldTerminalPath{selector: CreateLogsRequest_FieldPathSelectorParent}, nil
		case "logs":
			return &CreateLogsRequest_FieldTerminalPath{selector: CreateLogsRequest_FieldPathSelectorLogs}, nil
		}
	} else {
		switch fp[0] {
		case "logs":
			if subpath, err := log.BuildLog_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateLogsRequest_FieldSubPath{selector: CreateLogsRequest_FieldPathSelectorLogs, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateLogsRequest", fp)
}

func ParseCreateLogsRequest_FieldPath(rawField string) (CreateLogsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateLogsRequest_FieldPath(fp)
}

func MustParseCreateLogsRequest_FieldPath(rawField string) CreateLogsRequest_FieldPath {
	fp, err := ParseCreateLogsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateLogsRequest_FieldTerminalPath struct {
	selector CreateLogsRequest_FieldPathSelector
}

var _ CreateLogsRequest_FieldPath = (*CreateLogsRequest_FieldTerminalPath)(nil)

func (fp *CreateLogsRequest_FieldTerminalPath) Selector() CreateLogsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateLogsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateLogsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateLogsRequest
func (fp *CreateLogsRequest_FieldTerminalPath) Get(source *CreateLogsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateLogsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateLogsRequest_FieldPathSelectorLogs:
			for _, value := range source.GetLogs() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateLogsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateLogsRequest))
}

// GetSingle returns value pointed by specific field of from source CreateLogsRequest
func (fp *CreateLogsRequest_FieldTerminalPath) GetSingle(source *CreateLogsRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateLogsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateLogsRequest_FieldPathSelectorLogs:
		res := source.GetLogs()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fp.selector))
	}
}

func (fp *CreateLogsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateLogsRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateLogsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateLogsRequest_FieldPathSelectorParent:
		return (*log.ParentReference)(nil)
	case CreateLogsRequest_FieldPathSelectorLogs:
		return ([]*log.Log)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fp.selector))
	}
}

func (fp *CreateLogsRequest_FieldTerminalPath) ClearValue(item *CreateLogsRequest) {
	if item != nil {
		switch fp.selector {
		case CreateLogsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateLogsRequest_FieldPathSelectorLogs:
			item.Logs = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateLogsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateLogsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateLogsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateLogsRequest_FieldPathSelectorParent
}

func (fp *CreateLogsRequest_FieldTerminalPath) WithIValue(value interface{}) CreateLogsRequest_FieldPathValue {
	switch fp.selector {
	case CreateLogsRequest_FieldPathSelectorParent:
		return &CreateLogsRequest_FieldTerminalPathValue{CreateLogsRequest_FieldTerminalPath: *fp, value: value.(*log.ParentReference)}
	case CreateLogsRequest_FieldPathSelectorLogs:
		return &CreateLogsRequest_FieldTerminalPathValue{CreateLogsRequest_FieldTerminalPath: *fp, value: value.([]*log.Log)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fp.selector))
	}
}

func (fp *CreateLogsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateLogsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateLogsRequest_FieldPathArrayOfValues {
	fpaov := &CreateLogsRequest_FieldTerminalPathArrayOfValues{CreateLogsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateLogsRequest_FieldPathSelectorParent:
		return &CreateLogsRequest_FieldTerminalPathArrayOfValues{CreateLogsRequest_FieldTerminalPath: *fp, values: values.([]*log.ParentReference)}
	case CreateLogsRequest_FieldPathSelectorLogs:
		return &CreateLogsRequest_FieldTerminalPathArrayOfValues{CreateLogsRequest_FieldTerminalPath: *fp, values: values.([][]*log.Log)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateLogsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateLogsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateLogsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case CreateLogsRequest_FieldPathSelectorLogs:
		return &CreateLogsRequest_FieldTerminalPathArrayItemValue{CreateLogsRequest_FieldTerminalPath: *fp, value: value.(*log.Log)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fp.selector))
	}
}

func (fp *CreateLogsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateLogsRequest_FieldSubPath struct {
	selector CreateLogsRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateLogsRequest_FieldPath = (*CreateLogsRequest_FieldSubPath)(nil)

func (fps *CreateLogsRequest_FieldSubPath) Selector() CreateLogsRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateLogsRequest_FieldSubPath) AsLogsSubPath() (log.Log_FieldPath, bool) {
	res, ok := fps.subPath.(log.Log_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateLogsRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateLogsRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateLogsRequest
func (fps *CreateLogsRequest_FieldSubPath) Get(source *CreateLogsRequest) (values []interface{}) {
	if asLogFieldPath, ok := fps.AsLogsSubPath(); ok {
		for _, item := range source.GetLogs() {
			values = append(values, asLogFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateLogsRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateLogsRequest))
}

// GetSingle returns value of selected field from source CreateLogsRequest
func (fps *CreateLogsRequest_FieldSubPath) GetSingle(source *CreateLogsRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateLogsRequest_FieldPathSelectorLogs:
		if len(source.GetLogs()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLogs()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fps.selector))
	}
}

func (fps *CreateLogsRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateLogsRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateLogsRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateLogsRequest_FieldSubPath) ClearValue(item *CreateLogsRequest) {
	if item != nil {
		switch fps.selector {
		case CreateLogsRequest_FieldPathSelectorLogs:
			for _, subItem := range item.Logs {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateLogsRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateLogsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateLogsRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateLogsRequest_FieldSubPath) WithIValue(value interface{}) CreateLogsRequest_FieldPathValue {
	return &CreateLogsRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateLogsRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateLogsRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateLogsRequest_FieldPathArrayOfValues {
	return &CreateLogsRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateLogsRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateLogsRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateLogsRequest_FieldPathArrayItemValue {
	return &CreateLogsRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateLogsRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateLogsRequest_FieldPathValue allows storing values for CreateLogsRequest fields according to their type
type CreateLogsRequest_FieldPathValue interface {
	CreateLogsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateLogsRequest)
	CompareWith(*CreateLogsRequest) (cmp int, comparable bool)
}

func ParseCreateLogsRequest_FieldPathValue(pathStr, valueStr string) (CreateLogsRequest_FieldPathValue, error) {
	fp, err := ParseCreateLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateLogsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateLogsRequest_FieldPathValue), nil
}

func MustParseCreateLogsRequest_FieldPathValue(pathStr, valueStr string) CreateLogsRequest_FieldPathValue {
	fpv, err := ParseCreateLogsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateLogsRequest_FieldTerminalPathValue struct {
	CreateLogsRequest_FieldTerminalPath
	value interface{}
}

var _ CreateLogsRequest_FieldPathValue = (*CreateLogsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateLogsRequest' as interface{}
func (fpv *CreateLogsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateLogsRequest_FieldTerminalPathValue) AsParentValue() (*log.ParentReference, bool) {
	res, ok := fpv.value.(*log.ParentReference)
	return res, ok
}
func (fpv *CreateLogsRequest_FieldTerminalPathValue) AsLogsValue() ([]*log.Log, bool) {
	res, ok := fpv.value.([]*log.Log)
	return res, ok
}

// SetTo stores value for selected field for object CreateLogsRequest
func (fpv *CreateLogsRequest_FieldTerminalPathValue) SetTo(target **CreateLogsRequest) {
	if *target == nil {
		*target = new(CreateLogsRequest)
	}
	switch fpv.selector {
	case CreateLogsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*log.ParentReference)
	case CreateLogsRequest_FieldPathSelectorLogs:
		(*target).Logs = fpv.value.([]*log.Log)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fpv.selector))
	}
}

func (fpv *CreateLogsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateLogsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateLogsRequest_FieldTerminalPathValue' with the value under path in 'CreateLogsRequest'.
func (fpv *CreateLogsRequest_FieldTerminalPathValue) CompareWith(source *CreateLogsRequest) (int, bool) {
	switch fpv.selector {
	case CreateLogsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*log.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateLogsRequest_FieldPathSelectorLogs:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fpv.selector))
	}
}

func (fpv *CreateLogsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateLogsRequest))
}

type CreateLogsRequest_FieldSubPathValue struct {
	CreateLogsRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateLogsRequest_FieldPathValue = (*CreateLogsRequest_FieldSubPathValue)(nil)

func (fpvs *CreateLogsRequest_FieldSubPathValue) AsLogsPathValue() (log.Log_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(log.Log_FieldPathValue)
	return res, ok
}

func (fpvs *CreateLogsRequest_FieldSubPathValue) SetTo(target **CreateLogsRequest) {
	if *target == nil {
		*target = new(CreateLogsRequest)
	}
	switch fpvs.Selector() {
	case CreateLogsRequest_FieldPathSelectorLogs:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateLogsRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateLogsRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateLogsRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateLogsRequest_FieldSubPathValue) CompareWith(source *CreateLogsRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateLogsRequest_FieldPathSelectorLogs:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateLogsRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateLogsRequest))
}

// CreateLogsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateLogsRequest according to their type
// Present only for array (repeated) types.
type CreateLogsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateLogsRequest_FieldPath
	ContainsValue(*CreateLogsRequest) bool
}

// ParseCreateLogsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateLogsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateLogsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateLogsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateLogsRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateLogsRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateLogsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateLogsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateLogsRequest_FieldTerminalPathArrayItemValue struct {
	CreateLogsRequest_FieldTerminalPath
	value interface{}
}

var _ CreateLogsRequest_FieldPathArrayItemValue = (*CreateLogsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateLogsRequest as interface{}
func (fpaiv *CreateLogsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *CreateLogsRequest_FieldTerminalPathArrayItemValue) AsLogsItemValue() (*log.Log, bool) {
	res, ok := fpaiv.value.(*log.Log)
	return res, ok
}

func (fpaiv *CreateLogsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateLogsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateLogsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateLogsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateLogsRequest'
func (fpaiv *CreateLogsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateLogsRequest) bool {
	slice := fpaiv.CreateLogsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateLogsRequest_FieldSubPathArrayItemValue struct {
	CreateLogsRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateLogsRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateLogsRequest_FieldSubPathArrayItemValue) AsLogsPathItemValue() (log.Log_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(log.Log_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateLogsRequest'
func (fpaivs *CreateLogsRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateLogsRequest) bool {
	switch fpaivs.Selector() {
	case CreateLogsRequest_FieldPathSelectorLogs:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsRequest: %d", fpaivs.Selector()))
	}
}

// CreateLogsRequest_FieldPathArrayOfValues allows storing slice of values for CreateLogsRequest fields according to their type
type CreateLogsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateLogsRequest_FieldPath
}

func ParseCreateLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateLogsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateLogsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateLogsRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateLogsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateLogsRequest_FieldTerminalPathArrayOfValues struct {
	CreateLogsRequest_FieldTerminalPath
	values interface{}
}

var _ CreateLogsRequest_FieldPathArrayOfValues = (*CreateLogsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateLogsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateLogsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*log.ParentReference) {
			values = append(values, v)
		}
	case CreateLogsRequest_FieldPathSelectorLogs:
		for _, v := range fpaov.values.([][]*log.Log) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateLogsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*log.ParentReference, bool) {
	res, ok := fpaov.values.([]*log.ParentReference)
	return res, ok
}
func (fpaov *CreateLogsRequest_FieldTerminalPathArrayOfValues) AsLogsArrayOfValues() ([][]*log.Log, bool) {
	res, ok := fpaov.values.([][]*log.Log)
	return res, ok
}

type CreateLogsRequest_FieldSubPathArrayOfValues struct {
	CreateLogsRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateLogsRequest_FieldPathArrayOfValues = (*CreateLogsRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateLogsRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateLogsRequest_FieldSubPathArrayOfValues) AsLogsPathArrayOfValues() (log.Log_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(log.Log_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateLogsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateLogsResponse_FieldPathSelector
	Get(source *CreateLogsResponse) []interface{}
	GetSingle(source *CreateLogsResponse) (interface{}, bool)
	ClearValue(item *CreateLogsResponse)

	// Those methods build corresponding CreateLogsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateLogsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateLogsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateLogsResponse_FieldPathArrayItemValue
}

type CreateLogsResponse_FieldPathSelector int32

const (
	CreateLogsResponse_FieldPathSelectorLogNames   CreateLogsResponse_FieldPathSelector = 0
	CreateLogsResponse_FieldPathSelectorFailedLogs CreateLogsResponse_FieldPathSelector = 1
)

func (s CreateLogsResponse_FieldPathSelector) String() string {
	switch s {
	case CreateLogsResponse_FieldPathSelectorLogNames:
		return "log_names"
	case CreateLogsResponse_FieldPathSelectorFailedLogs:
		return "failed_logs"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", s))
	}
}

func BuildCreateLogsResponse_FieldPath(fp gotenobject.RawFieldPath) (CreateLogsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateLogsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "log_names", "logNames", "log-names":
			return &CreateLogsResponse_FieldTerminalPath{selector: CreateLogsResponse_FieldPathSelectorLogNames}, nil
		case "failed_logs", "failedLogs", "failed-logs":
			return &CreateLogsResponse_FieldTerminalPath{selector: CreateLogsResponse_FieldPathSelectorFailedLogs}, nil
		}
	} else {
		switch fp[0] {
		case "failed_logs", "failedLogs", "failed-logs":
			if subpath, err := BuildCreateLogsResponseCreateError_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateLogsResponse_FieldSubPath{selector: CreateLogsResponse_FieldPathSelectorFailedLogs, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateLogsResponse", fp)
}

func ParseCreateLogsResponse_FieldPath(rawField string) (CreateLogsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateLogsResponse_FieldPath(fp)
}

func MustParseCreateLogsResponse_FieldPath(rawField string) CreateLogsResponse_FieldPath {
	fp, err := ParseCreateLogsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateLogsResponse_FieldTerminalPath struct {
	selector CreateLogsResponse_FieldPathSelector
}

var _ CreateLogsResponse_FieldPath = (*CreateLogsResponse_FieldTerminalPath)(nil)

func (fp *CreateLogsResponse_FieldTerminalPath) Selector() CreateLogsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateLogsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateLogsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateLogsResponse
func (fp *CreateLogsResponse_FieldTerminalPath) Get(source *CreateLogsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateLogsResponse_FieldPathSelectorLogNames:
			if source.LogNames != nil {
				values = append(values, source.LogNames)
			}
		case CreateLogsResponse_FieldPathSelectorFailedLogs:
			for _, value := range source.GetFailedLogs() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateLogsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateLogsResponse))
}

// GetSingle returns value pointed by specific field of from source CreateLogsResponse
func (fp *CreateLogsResponse_FieldTerminalPath) GetSingle(source *CreateLogsResponse) (interface{}, bool) {
	switch fp.selector {
	case CreateLogsResponse_FieldPathSelectorLogNames:
		res := source.GetLogNames()
		return res, res != nil
	case CreateLogsResponse_FieldPathSelectorFailedLogs:
		res := source.GetFailedLogs()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fp.selector))
	}
}

func (fp *CreateLogsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateLogsResponse))
}

// GetDefault returns a default value of the field type
func (fp *CreateLogsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateLogsResponse_FieldPathSelectorLogNames:
		return (map[uint32]*log.Reference)(nil)
	case CreateLogsResponse_FieldPathSelectorFailedLogs:
		return ([]*CreateLogsResponse_CreateError)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fp.selector))
	}
}

func (fp *CreateLogsResponse_FieldTerminalPath) ClearValue(item *CreateLogsResponse) {
	if item != nil {
		switch fp.selector {
		case CreateLogsResponse_FieldPathSelectorLogNames:
			item.LogNames = nil
		case CreateLogsResponse_FieldPathSelectorFailedLogs:
			item.FailedLogs = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fp.selector))
		}
	}
}

func (fp *CreateLogsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateLogsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateLogsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateLogsResponse_FieldPathSelectorLogNames
}

func (fp *CreateLogsResponse_FieldTerminalPath) WithIValue(value interface{}) CreateLogsResponse_FieldPathValue {
	switch fp.selector {
	case CreateLogsResponse_FieldPathSelectorLogNames:
		return &CreateLogsResponse_FieldTerminalPathValue{CreateLogsResponse_FieldTerminalPath: *fp, value: value.(map[uint32]*log.Reference)}
	case CreateLogsResponse_FieldPathSelectorFailedLogs:
		return &CreateLogsResponse_FieldTerminalPathValue{CreateLogsResponse_FieldTerminalPath: *fp, value: value.([]*CreateLogsResponse_CreateError)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fp.selector))
	}
}

func (fp *CreateLogsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateLogsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateLogsResponse_FieldPathArrayOfValues {
	fpaov := &CreateLogsResponse_FieldTerminalPathArrayOfValues{CreateLogsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateLogsResponse_FieldPathSelectorLogNames:
		return &CreateLogsResponse_FieldTerminalPathArrayOfValues{CreateLogsResponse_FieldTerminalPath: *fp, values: values.([]map[uint32]*log.Reference)}
	case CreateLogsResponse_FieldPathSelectorFailedLogs:
		return &CreateLogsResponse_FieldTerminalPathArrayOfValues{CreateLogsResponse_FieldTerminalPath: *fp, values: values.([][]*CreateLogsResponse_CreateError)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateLogsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateLogsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateLogsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case CreateLogsResponse_FieldPathSelectorFailedLogs:
		return &CreateLogsResponse_FieldTerminalPathArrayItemValue{CreateLogsResponse_FieldTerminalPath: *fp, value: value.(*CreateLogsResponse_CreateError)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fp.selector))
	}
}

func (fp *CreateLogsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateLogsResponse_FieldSubPath struct {
	selector CreateLogsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateLogsResponse_FieldPath = (*CreateLogsResponse_FieldSubPath)(nil)

func (fps *CreateLogsResponse_FieldSubPath) Selector() CreateLogsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *CreateLogsResponse_FieldSubPath) AsFailedLogsSubPath() (CreateLogsResponseCreateError_FieldPath, bool) {
	res, ok := fps.subPath.(CreateLogsResponseCreateError_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateLogsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateLogsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateLogsResponse
func (fps *CreateLogsResponse_FieldSubPath) Get(source *CreateLogsResponse) (values []interface{}) {
	if asCreateErrorFieldPath, ok := fps.AsFailedLogsSubPath(); ok {
		for _, item := range source.GetFailedLogs() {
			values = append(values, asCreateErrorFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fps.selector))
	}
	return
}

func (fps *CreateLogsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateLogsResponse))
}

// GetSingle returns value of selected field from source CreateLogsResponse
func (fps *CreateLogsResponse_FieldSubPath) GetSingle(source *CreateLogsResponse) (interface{}, bool) {
	switch fps.selector {
	case CreateLogsResponse_FieldPathSelectorFailedLogs:
		if len(source.GetFailedLogs()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetFailedLogs()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fps.selector))
	}
}

func (fps *CreateLogsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateLogsResponse))
}

// GetDefault returns a default value of the field type
func (fps *CreateLogsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateLogsResponse_FieldSubPath) ClearValue(item *CreateLogsResponse) {
	if item != nil {
		switch fps.selector {
		case CreateLogsResponse_FieldPathSelectorFailedLogs:
			for _, subItem := range item.FailedLogs {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fps.selector))
		}
	}
}

func (fps *CreateLogsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateLogsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateLogsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateLogsResponse_FieldSubPath) WithIValue(value interface{}) CreateLogsResponse_FieldPathValue {
	return &CreateLogsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateLogsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateLogsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) CreateLogsResponse_FieldPathArrayOfValues {
	return &CreateLogsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateLogsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateLogsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) CreateLogsResponse_FieldPathArrayItemValue {
	return &CreateLogsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateLogsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateLogsResponse_FieldPathValue allows storing values for CreateLogsResponse fields according to their type
type CreateLogsResponse_FieldPathValue interface {
	CreateLogsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateLogsResponse)
	CompareWith(*CreateLogsResponse) (cmp int, comparable bool)
}

func ParseCreateLogsResponse_FieldPathValue(pathStr, valueStr string) (CreateLogsResponse_FieldPathValue, error) {
	fp, err := ParseCreateLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateLogsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateLogsResponse_FieldPathValue), nil
}

func MustParseCreateLogsResponse_FieldPathValue(pathStr, valueStr string) CreateLogsResponse_FieldPathValue {
	fpv, err := ParseCreateLogsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateLogsResponse_FieldTerminalPathValue struct {
	CreateLogsResponse_FieldTerminalPath
	value interface{}
}

var _ CreateLogsResponse_FieldPathValue = (*CreateLogsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateLogsResponse' as interface{}
func (fpv *CreateLogsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateLogsResponse_FieldTerminalPathValue) AsLogNamesValue() (map[uint32]*log.Reference, bool) {
	res, ok := fpv.value.(map[uint32]*log.Reference)
	return res, ok
}
func (fpv *CreateLogsResponse_FieldTerminalPathValue) AsFailedLogsValue() ([]*CreateLogsResponse_CreateError, bool) {
	res, ok := fpv.value.([]*CreateLogsResponse_CreateError)
	return res, ok
}

// SetTo stores value for selected field for object CreateLogsResponse
func (fpv *CreateLogsResponse_FieldTerminalPathValue) SetTo(target **CreateLogsResponse) {
	if *target == nil {
		*target = new(CreateLogsResponse)
	}
	switch fpv.selector {
	case CreateLogsResponse_FieldPathSelectorLogNames:
		(*target).LogNames = fpv.value.(map[uint32]*log.Reference)
	case CreateLogsResponse_FieldPathSelectorFailedLogs:
		(*target).FailedLogs = fpv.value.([]*CreateLogsResponse_CreateError)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fpv.selector))
	}
}

func (fpv *CreateLogsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateLogsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateLogsResponse_FieldTerminalPathValue' with the value under path in 'CreateLogsResponse'.
func (fpv *CreateLogsResponse_FieldTerminalPathValue) CompareWith(source *CreateLogsResponse) (int, bool) {
	switch fpv.selector {
	case CreateLogsResponse_FieldPathSelectorLogNames:
		return 0, false
	case CreateLogsResponse_FieldPathSelectorFailedLogs:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fpv.selector))
	}
}

func (fpv *CreateLogsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateLogsResponse))
}

type CreateLogsResponse_FieldSubPathValue struct {
	CreateLogsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateLogsResponse_FieldPathValue = (*CreateLogsResponse_FieldSubPathValue)(nil)

func (fpvs *CreateLogsResponse_FieldSubPathValue) AsFailedLogsPathValue() (CreateLogsResponseCreateError_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(CreateLogsResponseCreateError_FieldPathValue)
	return res, ok
}

func (fpvs *CreateLogsResponse_FieldSubPathValue) SetTo(target **CreateLogsResponse) {
	if *target == nil {
		*target = new(CreateLogsResponse)
	}
	switch fpvs.Selector() {
	case CreateLogsResponse_FieldPathSelectorFailedLogs:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateLogsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateLogsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateLogsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateLogsResponse_FieldSubPathValue) CompareWith(source *CreateLogsResponse) (int, bool) {
	switch fpvs.Selector() {
	case CreateLogsResponse_FieldPathSelectorFailedLogs:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateLogsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateLogsResponse))
}

// CreateLogsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateLogsResponse according to their type
// Present only for array (repeated) types.
type CreateLogsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateLogsResponse_FieldPath
	ContainsValue(*CreateLogsResponse) bool
}

// ParseCreateLogsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateLogsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (CreateLogsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateLogsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateLogsResponse_FieldPathArrayItemValue), nil
}

func MustParseCreateLogsResponse_FieldPathArrayItemValue(pathStr, valueStr string) CreateLogsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateLogsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateLogsResponse_FieldTerminalPathArrayItemValue struct {
	CreateLogsResponse_FieldTerminalPath
	value interface{}
}

var _ CreateLogsResponse_FieldPathArrayItemValue = (*CreateLogsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateLogsResponse as interface{}
func (fpaiv *CreateLogsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *CreateLogsResponse_FieldTerminalPathArrayItemValue) AsFailedLogsItemValue() (*CreateLogsResponse_CreateError, bool) {
	res, ok := fpaiv.value.(*CreateLogsResponse_CreateError)
	return res, ok
}

func (fpaiv *CreateLogsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *CreateLogsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateLogsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateLogsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateLogsResponse'
func (fpaiv *CreateLogsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateLogsResponse) bool {
	slice := fpaiv.CreateLogsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateLogsResponse_FieldSubPathArrayItemValue struct {
	CreateLogsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateLogsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateLogsResponse_FieldSubPathArrayItemValue) AsFailedLogsPathItemValue() (CreateLogsResponseCreateError_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(CreateLogsResponseCreateError_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateLogsResponse'
func (fpaivs *CreateLogsResponse_FieldSubPathArrayItemValue) ContainsValue(source *CreateLogsResponse) bool {
	switch fpaivs.Selector() {
	case CreateLogsResponse_FieldPathSelectorFailedLogs:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse: %d", fpaivs.Selector()))
	}
}

// CreateLogsResponse_FieldPathArrayOfValues allows storing slice of values for CreateLogsResponse fields according to their type
type CreateLogsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateLogsResponse_FieldPath
}

func ParseCreateLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateLogsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateLogsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateLogsResponse_FieldPathArrayOfValues), nil
}

func MustParseCreateLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) CreateLogsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseCreateLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateLogsResponse_FieldTerminalPathArrayOfValues struct {
	CreateLogsResponse_FieldTerminalPath
	values interface{}
}

var _ CreateLogsResponse_FieldPathArrayOfValues = (*CreateLogsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateLogsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateLogsResponse_FieldPathSelectorLogNames:
		for _, v := range fpaov.values.([]map[uint32]*log.Reference) {
			values = append(values, v)
		}
	case CreateLogsResponse_FieldPathSelectorFailedLogs:
		for _, v := range fpaov.values.([][]*CreateLogsResponse_CreateError) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateLogsResponse_FieldTerminalPathArrayOfValues) AsLogNamesArrayOfValues() ([]map[uint32]*log.Reference, bool) {
	res, ok := fpaov.values.([]map[uint32]*log.Reference)
	return res, ok
}
func (fpaov *CreateLogsResponse_FieldTerminalPathArrayOfValues) AsFailedLogsArrayOfValues() ([][]*CreateLogsResponse_CreateError, bool) {
	res, ok := fpaov.values.([][]*CreateLogsResponse_CreateError)
	return res, ok
}

type CreateLogsResponse_FieldSubPathArrayOfValues struct {
	CreateLogsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateLogsResponse_FieldPathArrayOfValues = (*CreateLogsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateLogsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateLogsResponse_FieldSubPathArrayOfValues) AsFailedLogsPathArrayOfValues() (CreateLogsResponseCreateError_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(CreateLogsResponseCreateError_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateLogsResponseCreateError_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateLogsResponseCreateError_FieldPathSelector
	Get(source *CreateLogsResponse_CreateError) []interface{}
	GetSingle(source *CreateLogsResponse_CreateError) (interface{}, bool)
	ClearValue(item *CreateLogsResponse_CreateError)

	// Those methods build corresponding CreateLogsResponseCreateError_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateLogsResponseCreateError_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateLogsResponseCreateError_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateLogsResponseCreateError_FieldPathArrayItemValue
}

type CreateLogsResponseCreateError_FieldPathSelector int32

const (
	CreateLogsResponseCreateError_FieldPathSelectorLogs   CreateLogsResponseCreateError_FieldPathSelector = 0
	CreateLogsResponseCreateError_FieldPathSelectorStatus CreateLogsResponseCreateError_FieldPathSelector = 1
)

func (s CreateLogsResponseCreateError_FieldPathSelector) String() string {
	switch s {
	case CreateLogsResponseCreateError_FieldPathSelectorLogs:
		return "logs"
	case CreateLogsResponseCreateError_FieldPathSelectorStatus:
		return "status"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", s))
	}
}

func BuildCreateLogsResponseCreateError_FieldPath(fp gotenobject.RawFieldPath) (CreateLogsResponseCreateError_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateLogsResponse_CreateError")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "logs":
			return &CreateLogsResponseCreateError_FieldTerminalPath{selector: CreateLogsResponseCreateError_FieldPathSelectorLogs}, nil
		case "status":
			return &CreateLogsResponseCreateError_FieldTerminalPath{selector: CreateLogsResponseCreateError_FieldPathSelectorStatus}, nil
		}
	} else {
		switch fp[0] {
		case "logs":
			if subpath, err := log.BuildLog_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateLogsResponseCreateError_FieldSubPath{selector: CreateLogsResponseCreateError_FieldPathSelectorLogs, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := rpc.BuildStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateLogsResponseCreateError_FieldSubPath{selector: CreateLogsResponseCreateError_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateLogsResponse_CreateError", fp)
}

func ParseCreateLogsResponseCreateError_FieldPath(rawField string) (CreateLogsResponseCreateError_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateLogsResponseCreateError_FieldPath(fp)
}

func MustParseCreateLogsResponseCreateError_FieldPath(rawField string) CreateLogsResponseCreateError_FieldPath {
	fp, err := ParseCreateLogsResponseCreateError_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateLogsResponseCreateError_FieldTerminalPath struct {
	selector CreateLogsResponseCreateError_FieldPathSelector
}

var _ CreateLogsResponseCreateError_FieldPath = (*CreateLogsResponseCreateError_FieldTerminalPath)(nil)

func (fp *CreateLogsResponseCreateError_FieldTerminalPath) Selector() CreateLogsResponseCreateError_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateLogsResponseCreateError_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateLogsResponseCreateError_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateLogsResponse_CreateError
func (fp *CreateLogsResponseCreateError_FieldTerminalPath) Get(source *CreateLogsResponse_CreateError) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateLogsResponseCreateError_FieldPathSelectorLogs:
			for _, value := range source.GetLogs() {
				values = append(values, value)
			}
		case CreateLogsResponseCreateError_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateLogsResponseCreateError_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateLogsResponse_CreateError))
}

// GetSingle returns value pointed by specific field of from source CreateLogsResponse_CreateError
func (fp *CreateLogsResponseCreateError_FieldTerminalPath) GetSingle(source *CreateLogsResponse_CreateError) (interface{}, bool) {
	switch fp.selector {
	case CreateLogsResponseCreateError_FieldPathSelectorLogs:
		res := source.GetLogs()
		return res, res != nil
	case CreateLogsResponseCreateError_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fp.selector))
	}
}

func (fp *CreateLogsResponseCreateError_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateLogsResponse_CreateError))
}

// GetDefault returns a default value of the field type
func (fp *CreateLogsResponseCreateError_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateLogsResponseCreateError_FieldPathSelectorLogs:
		return ([]*log.Log)(nil)
	case CreateLogsResponseCreateError_FieldPathSelectorStatus:
		return (*rpc.Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fp.selector))
	}
}

func (fp *CreateLogsResponseCreateError_FieldTerminalPath) ClearValue(item *CreateLogsResponse_CreateError) {
	if item != nil {
		switch fp.selector {
		case CreateLogsResponseCreateError_FieldPathSelectorLogs:
			item.Logs = nil
		case CreateLogsResponseCreateError_FieldPathSelectorStatus:
			item.Status = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fp.selector))
		}
	}
}

func (fp *CreateLogsResponseCreateError_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateLogsResponse_CreateError))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateLogsResponseCreateError_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreateLogsResponseCreateError_FieldTerminalPath) WithIValue(value interface{}) CreateLogsResponseCreateError_FieldPathValue {
	switch fp.selector {
	case CreateLogsResponseCreateError_FieldPathSelectorLogs:
		return &CreateLogsResponseCreateError_FieldTerminalPathValue{CreateLogsResponseCreateError_FieldTerminalPath: *fp, value: value.([]*log.Log)}
	case CreateLogsResponseCreateError_FieldPathSelectorStatus:
		return &CreateLogsResponseCreateError_FieldTerminalPathValue{CreateLogsResponseCreateError_FieldTerminalPath: *fp, value: value.(*rpc.Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fp.selector))
	}
}

func (fp *CreateLogsResponseCreateError_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateLogsResponseCreateError_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateLogsResponseCreateError_FieldPathArrayOfValues {
	fpaov := &CreateLogsResponseCreateError_FieldTerminalPathArrayOfValues{CreateLogsResponseCreateError_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateLogsResponseCreateError_FieldPathSelectorLogs:
		return &CreateLogsResponseCreateError_FieldTerminalPathArrayOfValues{CreateLogsResponseCreateError_FieldTerminalPath: *fp, values: values.([][]*log.Log)}
	case CreateLogsResponseCreateError_FieldPathSelectorStatus:
		return &CreateLogsResponseCreateError_FieldTerminalPathArrayOfValues{CreateLogsResponseCreateError_FieldTerminalPath: *fp, values: values.([]*rpc.Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateLogsResponseCreateError_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateLogsResponseCreateError_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateLogsResponseCreateError_FieldPathArrayItemValue {
	switch fp.selector {
	case CreateLogsResponseCreateError_FieldPathSelectorLogs:
		return &CreateLogsResponseCreateError_FieldTerminalPathArrayItemValue{CreateLogsResponseCreateError_FieldTerminalPath: *fp, value: value.(*log.Log)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fp.selector))
	}
}

func (fp *CreateLogsResponseCreateError_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateLogsResponseCreateError_FieldSubPath struct {
	selector CreateLogsResponseCreateError_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateLogsResponseCreateError_FieldPath = (*CreateLogsResponseCreateError_FieldSubPath)(nil)

func (fps *CreateLogsResponseCreateError_FieldSubPath) Selector() CreateLogsResponseCreateError_FieldPathSelector {
	return fps.selector
}
func (fps *CreateLogsResponseCreateError_FieldSubPath) AsLogsSubPath() (log.Log_FieldPath, bool) {
	res, ok := fps.subPath.(log.Log_FieldPath)
	return res, ok
}
func (fps *CreateLogsResponseCreateError_FieldSubPath) AsStatusSubPath() (rpc.Status_FieldPath, bool) {
	res, ok := fps.subPath.(rpc.Status_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateLogsResponseCreateError_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateLogsResponseCreateError_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateLogsResponse_CreateError
func (fps *CreateLogsResponseCreateError_FieldSubPath) Get(source *CreateLogsResponse_CreateError) (values []interface{}) {
	if asLogFieldPath, ok := fps.AsLogsSubPath(); ok {
		for _, item := range source.GetLogs() {
			values = append(values, asLogFieldPath.Get(item)...)
		}
	} else if asStatusFieldPath, ok := fps.AsStatusSubPath(); ok {
		values = append(values, asStatusFieldPath.Get(source.GetStatus())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fps.selector))
	}
	return
}

func (fps *CreateLogsResponseCreateError_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateLogsResponse_CreateError))
}

// GetSingle returns value of selected field from source CreateLogsResponse_CreateError
func (fps *CreateLogsResponseCreateError_FieldSubPath) GetSingle(source *CreateLogsResponse_CreateError) (interface{}, bool) {
	switch fps.selector {
	case CreateLogsResponseCreateError_FieldPathSelectorLogs:
		if len(source.GetLogs()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLogs()[0])
	case CreateLogsResponseCreateError_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fps.selector))
	}
}

func (fps *CreateLogsResponseCreateError_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateLogsResponse_CreateError))
}

// GetDefault returns a default value of the field type
func (fps *CreateLogsResponseCreateError_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateLogsResponseCreateError_FieldSubPath) ClearValue(item *CreateLogsResponse_CreateError) {
	if item != nil {
		switch fps.selector {
		case CreateLogsResponseCreateError_FieldPathSelectorLogs:
			for _, subItem := range item.Logs {
				fps.subPath.ClearValueRaw(subItem)
			}
		case CreateLogsResponseCreateError_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fps.selector))
		}
	}
}

func (fps *CreateLogsResponseCreateError_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateLogsResponse_CreateError))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateLogsResponseCreateError_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateLogsResponseCreateError_FieldSubPath) WithIValue(value interface{}) CreateLogsResponseCreateError_FieldPathValue {
	return &CreateLogsResponseCreateError_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateLogsResponseCreateError_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateLogsResponseCreateError_FieldSubPath) WithIArrayOfValues(values interface{}) CreateLogsResponseCreateError_FieldPathArrayOfValues {
	return &CreateLogsResponseCreateError_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateLogsResponseCreateError_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateLogsResponseCreateError_FieldSubPath) WithIArrayItemValue(value interface{}) CreateLogsResponseCreateError_FieldPathArrayItemValue {
	return &CreateLogsResponseCreateError_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateLogsResponseCreateError_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateLogsResponseCreateError_FieldPathValue allows storing values for CreateError fields according to their type
type CreateLogsResponseCreateError_FieldPathValue interface {
	CreateLogsResponseCreateError_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateLogsResponse_CreateError)
	CompareWith(*CreateLogsResponse_CreateError) (cmp int, comparable bool)
}

func ParseCreateLogsResponseCreateError_FieldPathValue(pathStr, valueStr string) (CreateLogsResponseCreateError_FieldPathValue, error) {
	fp, err := ParseCreateLogsResponseCreateError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateError field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateLogsResponseCreateError_FieldPathValue), nil
}

func MustParseCreateLogsResponseCreateError_FieldPathValue(pathStr, valueStr string) CreateLogsResponseCreateError_FieldPathValue {
	fpv, err := ParseCreateLogsResponseCreateError_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateLogsResponseCreateError_FieldTerminalPathValue struct {
	CreateLogsResponseCreateError_FieldTerminalPath
	value interface{}
}

var _ CreateLogsResponseCreateError_FieldPathValue = (*CreateLogsResponseCreateError_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateError' as interface{}
func (fpv *CreateLogsResponseCreateError_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateLogsResponseCreateError_FieldTerminalPathValue) AsLogsValue() ([]*log.Log, bool) {
	res, ok := fpv.value.([]*log.Log)
	return res, ok
}
func (fpv *CreateLogsResponseCreateError_FieldTerminalPathValue) AsStatusValue() (*rpc.Status, bool) {
	res, ok := fpv.value.(*rpc.Status)
	return res, ok
}

// SetTo stores value for selected field for object CreateError
func (fpv *CreateLogsResponseCreateError_FieldTerminalPathValue) SetTo(target **CreateLogsResponse_CreateError) {
	if *target == nil {
		*target = new(CreateLogsResponse_CreateError)
	}
	switch fpv.selector {
	case CreateLogsResponseCreateError_FieldPathSelectorLogs:
		(*target).Logs = fpv.value.([]*log.Log)
	case CreateLogsResponseCreateError_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*rpc.Status)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fpv.selector))
	}
}

func (fpv *CreateLogsResponseCreateError_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateLogsResponse_CreateError)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateLogsResponseCreateError_FieldTerminalPathValue' with the value under path in 'CreateLogsResponse_CreateError'.
func (fpv *CreateLogsResponseCreateError_FieldTerminalPathValue) CompareWith(source *CreateLogsResponse_CreateError) (int, bool) {
	switch fpv.selector {
	case CreateLogsResponseCreateError_FieldPathSelectorLogs:
		return 0, false
	case CreateLogsResponseCreateError_FieldPathSelectorStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fpv.selector))
	}
}

func (fpv *CreateLogsResponseCreateError_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateLogsResponse_CreateError))
}

type CreateLogsResponseCreateError_FieldSubPathValue struct {
	CreateLogsResponseCreateError_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateLogsResponseCreateError_FieldPathValue = (*CreateLogsResponseCreateError_FieldSubPathValue)(nil)

func (fpvs *CreateLogsResponseCreateError_FieldSubPathValue) AsLogsPathValue() (log.Log_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(log.Log_FieldPathValue)
	return res, ok
}
func (fpvs *CreateLogsResponseCreateError_FieldSubPathValue) AsStatusPathValue() (rpc.Status_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(rpc.Status_FieldPathValue)
	return res, ok
}

func (fpvs *CreateLogsResponseCreateError_FieldSubPathValue) SetTo(target **CreateLogsResponse_CreateError) {
	if *target == nil {
		*target = new(CreateLogsResponse_CreateError)
	}
	switch fpvs.Selector() {
	case CreateLogsResponseCreateError_FieldPathSelectorLogs:
		panic("FieldPath setter is unsupported for array subpaths")
	case CreateLogsResponseCreateError_FieldPathSelectorStatus:
		fpvs.subPathValue.(rpc.Status_FieldPathValue).SetTo(&(*target).Status)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateLogsResponseCreateError_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateLogsResponse_CreateError)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateLogsResponseCreateError_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateLogsResponseCreateError_FieldSubPathValue) CompareWith(source *CreateLogsResponse_CreateError) (int, bool) {
	switch fpvs.Selector() {
	case CreateLogsResponseCreateError_FieldPathSelectorLogs:
		return 0, false // repeated field
	case CreateLogsResponseCreateError_FieldPathSelectorStatus:
		return fpvs.subPathValue.(rpc.Status_FieldPathValue).CompareWith(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateLogsResponseCreateError_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateLogsResponse_CreateError))
}

// CreateLogsResponseCreateError_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateError according to their type
// Present only for array (repeated) types.
type CreateLogsResponseCreateError_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateLogsResponseCreateError_FieldPath
	ContainsValue(*CreateLogsResponse_CreateError) bool
}

// ParseCreateLogsResponseCreateError_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateLogsResponseCreateError_FieldPathArrayItemValue(pathStr, valueStr string) (CreateLogsResponseCreateError_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateLogsResponseCreateError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateError field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateLogsResponseCreateError_FieldPathArrayItemValue), nil
}

func MustParseCreateLogsResponseCreateError_FieldPathArrayItemValue(pathStr, valueStr string) CreateLogsResponseCreateError_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateLogsResponseCreateError_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateLogsResponseCreateError_FieldTerminalPathArrayItemValue struct {
	CreateLogsResponseCreateError_FieldTerminalPath
	value interface{}
}

var _ CreateLogsResponseCreateError_FieldPathArrayItemValue = (*CreateLogsResponseCreateError_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateLogsResponse_CreateError as interface{}
func (fpaiv *CreateLogsResponseCreateError_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *CreateLogsResponseCreateError_FieldTerminalPathArrayItemValue) AsLogsItemValue() (*log.Log, bool) {
	res, ok := fpaiv.value.(*log.Log)
	return res, ok
}

func (fpaiv *CreateLogsResponseCreateError_FieldTerminalPathArrayItemValue) GetSingle(source *CreateLogsResponse_CreateError) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateLogsResponseCreateError_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateLogsResponse_CreateError))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateError'
func (fpaiv *CreateLogsResponseCreateError_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateLogsResponse_CreateError) bool {
	slice := fpaiv.CreateLogsResponseCreateError_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateLogsResponseCreateError_FieldSubPathArrayItemValue struct {
	CreateLogsResponseCreateError_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateLogsResponseCreateError_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateLogsResponseCreateError_FieldSubPathArrayItemValue) AsLogsPathItemValue() (log.Log_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(log.Log_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *CreateLogsResponseCreateError_FieldSubPathArrayItemValue) AsStatusPathItemValue() (rpc.Status_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(rpc.Status_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateError'
func (fpaivs *CreateLogsResponseCreateError_FieldSubPathArrayItemValue) ContainsValue(source *CreateLogsResponse_CreateError) bool {
	switch fpaivs.Selector() {
	case CreateLogsResponseCreateError_FieldPathSelectorLogs:
		return false // repeated/map field
	case CreateLogsResponseCreateError_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(rpc.Status_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogsResponse_CreateError: %d", fpaivs.Selector()))
	}
}

// CreateLogsResponseCreateError_FieldPathArrayOfValues allows storing slice of values for CreateError fields according to their type
type CreateLogsResponseCreateError_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateLogsResponseCreateError_FieldPath
}

func ParseCreateLogsResponseCreateError_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateLogsResponseCreateError_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateLogsResponseCreateError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateError field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateLogsResponseCreateError_FieldPathArrayOfValues), nil
}

func MustParseCreateLogsResponseCreateError_FieldPathArrayOfValues(pathStr, valuesStr string) CreateLogsResponseCreateError_FieldPathArrayOfValues {
	fpaov, err := ParseCreateLogsResponseCreateError_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateLogsResponseCreateError_FieldTerminalPathArrayOfValues struct {
	CreateLogsResponseCreateError_FieldTerminalPath
	values interface{}
}

var _ CreateLogsResponseCreateError_FieldPathArrayOfValues = (*CreateLogsResponseCreateError_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateLogsResponseCreateError_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateLogsResponseCreateError_FieldPathSelectorLogs:
		for _, v := range fpaov.values.([][]*log.Log) {
			values = append(values, v)
		}
	case CreateLogsResponseCreateError_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*rpc.Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateLogsResponseCreateError_FieldTerminalPathArrayOfValues) AsLogsArrayOfValues() ([][]*log.Log, bool) {
	res, ok := fpaov.values.([][]*log.Log)
	return res, ok
}
func (fpaov *CreateLogsResponseCreateError_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*rpc.Status, bool) {
	res, ok := fpaov.values.([]*rpc.Status)
	return res, ok
}

type CreateLogsResponseCreateError_FieldSubPathArrayOfValues struct {
	CreateLogsResponseCreateError_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateLogsResponseCreateError_FieldPathArrayOfValues = (*CreateLogsResponseCreateError_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateLogsResponseCreateError_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateLogsResponseCreateError_FieldSubPathArrayOfValues) AsLogsPathArrayOfValues() (log.Log_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(log.Log_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *CreateLogsResponseCreateError_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (rpc.Status_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(rpc.Status_FieldPathArrayOfValues)
	return res, ok
}
