// Code generated by protoc-gen-goten-object
// File: edgelq/logging/proto/v1alpha2/log_descriptor_service.proto
// DO NOT EDIT!!!

package log_descriptor_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	log_descriptor "github.com/cloudwan/edgelq-sdk/logging/resources/v1alpha2/log_descriptor"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &log_descriptor.LogDescriptor{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetLogDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetLogDescriptorRequest_FieldPathSelector
	Get(source *GetLogDescriptorRequest) []interface{}
	GetSingle(source *GetLogDescriptorRequest) (interface{}, bool)
	ClearValue(item *GetLogDescriptorRequest)

	// Those methods build corresponding GetLogDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetLogDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetLogDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetLogDescriptorRequest_FieldPathArrayItemValue
}

type GetLogDescriptorRequest_FieldPathSelector int32

const (
	GetLogDescriptorRequest_FieldPathSelectorName      GetLogDescriptorRequest_FieldPathSelector = 0
	GetLogDescriptorRequest_FieldPathSelectorFieldMask GetLogDescriptorRequest_FieldPathSelector = 1
	GetLogDescriptorRequest_FieldPathSelectorView      GetLogDescriptorRequest_FieldPathSelector = 2
)

func (s GetLogDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case GetLogDescriptorRequest_FieldPathSelectorName:
		return "name"
	case GetLogDescriptorRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetLogDescriptorRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetLogDescriptorRequest: %d", s))
	}
}

func BuildGetLogDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (GetLogDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetLogDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetLogDescriptorRequest_FieldTerminalPath{selector: GetLogDescriptorRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetLogDescriptorRequest_FieldTerminalPath{selector: GetLogDescriptorRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetLogDescriptorRequest_FieldTerminalPath{selector: GetLogDescriptorRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetLogDescriptorRequest", fp)
}

func ParseGetLogDescriptorRequest_FieldPath(rawField string) (GetLogDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetLogDescriptorRequest_FieldPath(fp)
}

func MustParseGetLogDescriptorRequest_FieldPath(rawField string) GetLogDescriptorRequest_FieldPath {
	fp, err := ParseGetLogDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetLogDescriptorRequest_FieldTerminalPath struct {
	selector GetLogDescriptorRequest_FieldPathSelector
}

var _ GetLogDescriptorRequest_FieldPath = (*GetLogDescriptorRequest_FieldTerminalPath)(nil)

func (fp *GetLogDescriptorRequest_FieldTerminalPath) Selector() GetLogDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetLogDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetLogDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetLogDescriptorRequest
func (fp *GetLogDescriptorRequest_FieldTerminalPath) Get(source *GetLogDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetLogDescriptorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetLogDescriptorRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetLogDescriptorRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetLogDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetLogDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetLogDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source GetLogDescriptorRequest
func (fp *GetLogDescriptorRequest_FieldTerminalPath) GetSingle(source *GetLogDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case GetLogDescriptorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetLogDescriptorRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetLogDescriptorRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetLogDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetLogDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetLogDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetLogDescriptorRequest_FieldPathSelectorName:
		return (*log_descriptor.Reference)(nil)
	case GetLogDescriptorRequest_FieldPathSelectorFieldMask:
		return (*log_descriptor.LogDescriptor_FieldMask)(nil)
	case GetLogDescriptorRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetLogDescriptorRequest_FieldTerminalPath) ClearValue(item *GetLogDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case GetLogDescriptorRequest_FieldPathSelectorName:
			item.Name = nil
		case GetLogDescriptorRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetLogDescriptorRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetLogDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *GetLogDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetLogDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetLogDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetLogDescriptorRequest_FieldPathSelectorName ||
		fp.selector == GetLogDescriptorRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetLogDescriptorRequest_FieldPathSelectorView
}

func (fp *GetLogDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) GetLogDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case GetLogDescriptorRequest_FieldPathSelectorName:
		return &GetLogDescriptorRequest_FieldTerminalPathValue{GetLogDescriptorRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.Reference)}
	case GetLogDescriptorRequest_FieldPathSelectorFieldMask:
		return &GetLogDescriptorRequest_FieldTerminalPathValue{GetLogDescriptorRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.LogDescriptor_FieldMask)}
	case GetLogDescriptorRequest_FieldPathSelectorView:
		return &GetLogDescriptorRequest_FieldTerminalPathValue{GetLogDescriptorRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetLogDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetLogDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetLogDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &GetLogDescriptorRequest_FieldTerminalPathArrayOfValues{GetLogDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetLogDescriptorRequest_FieldPathSelectorName:
		return &GetLogDescriptorRequest_FieldTerminalPathArrayOfValues{GetLogDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.Reference)}
	case GetLogDescriptorRequest_FieldPathSelectorFieldMask:
		return &GetLogDescriptorRequest_FieldTerminalPathArrayOfValues{GetLogDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.LogDescriptor_FieldMask)}
	case GetLogDescriptorRequest_FieldPathSelectorView:
		return &GetLogDescriptorRequest_FieldTerminalPathArrayOfValues{GetLogDescriptorRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetLogDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetLogDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetLogDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetLogDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetLogDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetLogDescriptorRequest_FieldPathValue allows storing values for GetLogDescriptorRequest fields according to their type
type GetLogDescriptorRequest_FieldPathValue interface {
	GetLogDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetLogDescriptorRequest)
	CompareWith(*GetLogDescriptorRequest) (cmp int, comparable bool)
}

func ParseGetLogDescriptorRequest_FieldPathValue(pathStr, valueStr string) (GetLogDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseGetLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetLogDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetLogDescriptorRequest_FieldPathValue), nil
}

func MustParseGetLogDescriptorRequest_FieldPathValue(pathStr, valueStr string) GetLogDescriptorRequest_FieldPathValue {
	fpv, err := ParseGetLogDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetLogDescriptorRequest_FieldTerminalPathValue struct {
	GetLogDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ GetLogDescriptorRequest_FieldPathValue = (*GetLogDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetLogDescriptorRequest' as interface{}
func (fpv *GetLogDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetLogDescriptorRequest_FieldTerminalPathValue) AsNameValue() (*log_descriptor.Reference, bool) {
	res, ok := fpv.value.(*log_descriptor.Reference)
	return res, ok
}
func (fpv *GetLogDescriptorRequest_FieldTerminalPathValue) AsFieldMaskValue() (*log_descriptor.LogDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*log_descriptor.LogDescriptor_FieldMask)
	return res, ok
}
func (fpv *GetLogDescriptorRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetLogDescriptorRequest
func (fpv *GetLogDescriptorRequest_FieldTerminalPathValue) SetTo(target **GetLogDescriptorRequest) {
	if *target == nil {
		*target = new(GetLogDescriptorRequest)
	}
	switch fpv.selector {
	case GetLogDescriptorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*log_descriptor.Reference)
	case GetLogDescriptorRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*log_descriptor.LogDescriptor_FieldMask)
	case GetLogDescriptorRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetLogDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *GetLogDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetLogDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetLogDescriptorRequest_FieldTerminalPathValue' with the value under path in 'GetLogDescriptorRequest'.
func (fpv *GetLogDescriptorRequest_FieldTerminalPathValue) CompareWith(source *GetLogDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case GetLogDescriptorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*log_descriptor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetLogDescriptorRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetLogDescriptorRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetLogDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *GetLogDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetLogDescriptorRequest))
}

// GetLogDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetLogDescriptorRequest according to their type
// Present only for array (repeated) types.
type GetLogDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetLogDescriptorRequest_FieldPath
	ContainsValue(*GetLogDescriptorRequest) bool
}

// ParseGetLogDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetLogDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetLogDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetLogDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseGetLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetLogDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetLogDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	GetLogDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ GetLogDescriptorRequest_FieldPathArrayItemValue = (*GetLogDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetLogDescriptorRequest as interface{}
func (fpaiv *GetLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetLogDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetLogDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetLogDescriptorRequest'
func (fpaiv *GetLogDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetLogDescriptorRequest) bool {
	slice := fpaiv.GetLogDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetLogDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for GetLogDescriptorRequest fields according to their type
type GetLogDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetLogDescriptorRequest_FieldPath
}

func ParseGetLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetLogDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetLogDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetLogDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseGetLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetLogDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetLogDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	GetLogDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ GetLogDescriptorRequest_FieldPathArrayOfValues = (*GetLogDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetLogDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetLogDescriptorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*log_descriptor.Reference) {
			values = append(values, v)
		}
	case GetLogDescriptorRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*log_descriptor.LogDescriptor_FieldMask) {
			values = append(values, v)
		}
	case GetLogDescriptorRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetLogDescriptorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*log_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*log_descriptor.Reference)
	return res, ok
}
func (fpaov *GetLogDescriptorRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*log_descriptor.LogDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*log_descriptor.LogDescriptor_FieldMask)
	return res, ok
}
func (fpaov *GetLogDescriptorRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetLogDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetLogDescriptorsRequest_FieldPathSelector
	Get(source *BatchGetLogDescriptorsRequest) []interface{}
	GetSingle(source *BatchGetLogDescriptorsRequest) (interface{}, bool)
	ClearValue(item *BatchGetLogDescriptorsRequest)

	// Those methods build corresponding BatchGetLogDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetLogDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetLogDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetLogDescriptorsRequest_FieldPathArrayItemValue
}

type BatchGetLogDescriptorsRequest_FieldPathSelector int32

const (
	BatchGetLogDescriptorsRequest_FieldPathSelectorNames     BatchGetLogDescriptorsRequest_FieldPathSelector = 0
	BatchGetLogDescriptorsRequest_FieldPathSelectorFieldMask BatchGetLogDescriptorsRequest_FieldPathSelector = 1
	BatchGetLogDescriptorsRequest_FieldPathSelectorView      BatchGetLogDescriptorsRequest_FieldPathSelector = 2
)

func (s BatchGetLogDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetLogDescriptorsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetLogDescriptorsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsRequest: %d", s))
	}
}

func BuildBatchGetLogDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetLogDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetLogDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetLogDescriptorsRequest_FieldTerminalPath{selector: BatchGetLogDescriptorsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetLogDescriptorsRequest_FieldTerminalPath{selector: BatchGetLogDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetLogDescriptorsRequest_FieldTerminalPath{selector: BatchGetLogDescriptorsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetLogDescriptorsRequest", fp)
}

func ParseBatchGetLogDescriptorsRequest_FieldPath(rawField string) (BatchGetLogDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetLogDescriptorsRequest_FieldPath(fp)
}

func MustParseBatchGetLogDescriptorsRequest_FieldPath(rawField string) BatchGetLogDescriptorsRequest_FieldPath {
	fp, err := ParseBatchGetLogDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetLogDescriptorsRequest_FieldTerminalPath struct {
	selector BatchGetLogDescriptorsRequest_FieldPathSelector
}

var _ BatchGetLogDescriptorsRequest_FieldPath = (*BatchGetLogDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) Selector() BatchGetLogDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetLogDescriptorsRequest
func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) Get(source *BatchGetLogDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetLogDescriptorsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetLogDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetLogDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetLogDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetLogDescriptorsRequest
func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) GetSingle(source *BatchGetLogDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetLogDescriptorsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetLogDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetLogDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetLogDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetLogDescriptorsRequest_FieldPathSelectorNames:
		return ([]*log_descriptor.Reference)(nil)
	case BatchGetLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*log_descriptor.LogDescriptor_FieldMask)(nil)
	case BatchGetLogDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) ClearValue(item *BatchGetLogDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetLogDescriptorsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetLogDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetLogDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetLogDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetLogDescriptorsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetLogDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetLogDescriptorsRequest_FieldPathSelectorView
}

func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetLogDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetLogDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetLogDescriptorsRequest_FieldTerminalPathValue{BatchGetLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.([]*log_descriptor.Reference)}
	case BatchGetLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return &BatchGetLogDescriptorsRequest_FieldTerminalPathValue{BatchGetLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.LogDescriptor_FieldMask)}
	case BatchGetLogDescriptorsRequest_FieldPathSelectorView:
		return &BatchGetLogDescriptorsRequest_FieldTerminalPathValue{BatchGetLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetLogDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetLogDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetLogDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetLogDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetLogDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([][]*log_descriptor.Reference)}
	case BatchGetLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return &BatchGetLogDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.LogDescriptor_FieldMask)}
	case BatchGetLogDescriptorsRequest_FieldPathSelectorView:
		return &BatchGetLogDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetLogDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetLogDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetLogDescriptorsRequest_FieldTerminalPathArrayItemValue{BatchGetLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetLogDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetLogDescriptorsRequest_FieldPathValue allows storing values for BatchGetLogDescriptorsRequest fields according to their type
type BatchGetLogDescriptorsRequest_FieldPathValue interface {
	BatchGetLogDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetLogDescriptorsRequest)
	CompareWith(*BatchGetLogDescriptorsRequest) (cmp int, comparable bool)
}

func ParseBatchGetLogDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetLogDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetLogDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetLogDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetLogDescriptorsRequest_FieldPathValue), nil
}

func MustParseBatchGetLogDescriptorsRequest_FieldPathValue(pathStr, valueStr string) BatchGetLogDescriptorsRequest_FieldPathValue {
	fpv, err := ParseBatchGetLogDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetLogDescriptorsRequest_FieldTerminalPathValue struct {
	BatchGetLogDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetLogDescriptorsRequest_FieldPathValue = (*BatchGetLogDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetLogDescriptorsRequest' as interface{}
func (fpv *BatchGetLogDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetLogDescriptorsRequest_FieldTerminalPathValue) AsNamesValue() ([]*log_descriptor.Reference, bool) {
	res, ok := fpv.value.([]*log_descriptor.Reference)
	return res, ok
}
func (fpv *BatchGetLogDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*log_descriptor.LogDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*log_descriptor.LogDescriptor_FieldMask)
	return res, ok
}
func (fpv *BatchGetLogDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetLogDescriptorsRequest
func (fpv *BatchGetLogDescriptorsRequest_FieldTerminalPathValue) SetTo(target **BatchGetLogDescriptorsRequest) {
	if *target == nil {
		*target = new(BatchGetLogDescriptorsRequest)
	}
	switch fpv.selector {
	case BatchGetLogDescriptorsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*log_descriptor.Reference)
	case BatchGetLogDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*log_descriptor.LogDescriptor_FieldMask)
	case BatchGetLogDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetLogDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetLogDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetLogDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetLogDescriptorsRequest'.
func (fpv *BatchGetLogDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetLogDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetLogDescriptorsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetLogDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetLogDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetLogDescriptorsRequest))
}

// BatchGetLogDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetLogDescriptorsRequest according to their type
// Present only for array (repeated) types.
type BatchGetLogDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetLogDescriptorsRequest_FieldPath
	ContainsValue(*BatchGetLogDescriptorsRequest) bool
}

// ParseBatchGetLogDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetLogDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetLogDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetLogDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetLogDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetLogDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetLogDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetLogDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetLogDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetLogDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetLogDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetLogDescriptorsRequest_FieldPathArrayItemValue = (*BatchGetLogDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetLogDescriptorsRequest as interface{}
func (fpaiv *BatchGetLogDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetLogDescriptorsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*log_descriptor.Reference, bool) {
	res, ok := fpaiv.value.(*log_descriptor.Reference)
	return res, ok
}

func (fpaiv *BatchGetLogDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetLogDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetLogDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetLogDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetLogDescriptorsRequest'
func (fpaiv *BatchGetLogDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetLogDescriptorsRequest) bool {
	slice := fpaiv.BatchGetLogDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetLogDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetLogDescriptorsRequest fields according to their type
type BatchGetLogDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetLogDescriptorsRequest_FieldPath
}

func ParseBatchGetLogDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetLogDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetLogDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetLogDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetLogDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetLogDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetLogDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetLogDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetLogDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetLogDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetLogDescriptorsRequest_FieldPathArrayOfValues = (*BatchGetLogDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetLogDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetLogDescriptorsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*log_descriptor.Reference) {
			values = append(values, v)
		}
	case BatchGetLogDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*log_descriptor.LogDescriptor_FieldMask) {
			values = append(values, v)
		}
	case BatchGetLogDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*log_descriptor.Reference, bool) {
	res, ok := fpaov.values.([][]*log_descriptor.Reference)
	return res, ok
}
func (fpaov *BatchGetLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*log_descriptor.LogDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*log_descriptor.LogDescriptor_FieldMask)
	return res, ok
}
func (fpaov *BatchGetLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetLogDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetLogDescriptorsResponse_FieldPathSelector
	Get(source *BatchGetLogDescriptorsResponse) []interface{}
	GetSingle(source *BatchGetLogDescriptorsResponse) (interface{}, bool)
	ClearValue(item *BatchGetLogDescriptorsResponse)

	// Those methods build corresponding BatchGetLogDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetLogDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetLogDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetLogDescriptorsResponse_FieldPathArrayItemValue
}

type BatchGetLogDescriptorsResponse_FieldPathSelector int32

const (
	BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors BatchGetLogDescriptorsResponse_FieldPathSelector = 0
	BatchGetLogDescriptorsResponse_FieldPathSelectorMissing        BatchGetLogDescriptorsResponse_FieldPathSelector = 1
)

func (s BatchGetLogDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return "log_descriptors"
	case BatchGetLogDescriptorsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", s))
	}
}

func BuildBatchGetLogDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetLogDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetLogDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "log_descriptors", "logDescriptors", "log-descriptors":
			return &BatchGetLogDescriptorsResponse_FieldTerminalPath{selector: BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors}, nil
		case "missing":
			return &BatchGetLogDescriptorsResponse_FieldTerminalPath{selector: BatchGetLogDescriptorsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "log_descriptors", "logDescriptors", "log-descriptors":
			if subpath, err := log_descriptor.BuildLogDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetLogDescriptorsResponse_FieldSubPath{selector: BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetLogDescriptorsResponse", fp)
}

func ParseBatchGetLogDescriptorsResponse_FieldPath(rawField string) (BatchGetLogDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetLogDescriptorsResponse_FieldPath(fp)
}

func MustParseBatchGetLogDescriptorsResponse_FieldPath(rawField string) BatchGetLogDescriptorsResponse_FieldPath {
	fp, err := ParseBatchGetLogDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetLogDescriptorsResponse_FieldTerminalPath struct {
	selector BatchGetLogDescriptorsResponse_FieldPathSelector
}

var _ BatchGetLogDescriptorsResponse_FieldPath = (*BatchGetLogDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) Selector() BatchGetLogDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetLogDescriptorsResponse
func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) Get(source *BatchGetLogDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
			for _, value := range source.GetLogDescriptors() {
				values = append(values, value)
			}
		case BatchGetLogDescriptorsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetLogDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetLogDescriptorsResponse
func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) GetSingle(source *BatchGetLogDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		res := source.GetLogDescriptors()
		return res, res != nil
	case BatchGetLogDescriptorsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetLogDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return ([]*log_descriptor.LogDescriptor)(nil)
	case BatchGetLogDescriptorsResponse_FieldPathSelectorMissing:
		return ([]*log_descriptor.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) ClearValue(item *BatchGetLogDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
			item.LogDescriptors = nil
		case BatchGetLogDescriptorsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetLogDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetLogDescriptorsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetLogDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return &BatchGetLogDescriptorsResponse_FieldTerminalPathValue{BatchGetLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*log_descriptor.LogDescriptor)}
	case BatchGetLogDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetLogDescriptorsResponse_FieldTerminalPathValue{BatchGetLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*log_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetLogDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetLogDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetLogDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return &BatchGetLogDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetLogDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*log_descriptor.LogDescriptor)}
	case BatchGetLogDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetLogDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetLogDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*log_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetLogDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return &BatchGetLogDescriptorsResponse_FieldTerminalPathArrayItemValue{BatchGetLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*log_descriptor.LogDescriptor)}
	case BatchGetLogDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetLogDescriptorsResponse_FieldTerminalPathArrayItemValue{BatchGetLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*log_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetLogDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetLogDescriptorsResponse_FieldSubPath struct {
	selector BatchGetLogDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetLogDescriptorsResponse_FieldPath = (*BatchGetLogDescriptorsResponse_FieldSubPath)(nil)

func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) Selector() BatchGetLogDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) AsLogDescriptorsSubPath() (log_descriptor.LogDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(log_descriptor.LogDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetLogDescriptorsResponse
func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) Get(source *BatchGetLogDescriptorsResponse) (values []interface{}) {
	if asLogDescriptorFieldPath, ok := fps.AsLogDescriptorsSubPath(); ok {
		for _, item := range source.GetLogDescriptors() {
			values = append(values, asLogDescriptorFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetLogDescriptorsResponse))
}

// GetSingle returns value of selected field from source BatchGetLogDescriptorsResponse
func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) GetSingle(source *BatchGetLogDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		if len(source.GetLogDescriptors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLogDescriptors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetLogDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) ClearValue(item *BatchGetLogDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
			for _, subItem := range item.LogDescriptors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetLogDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetLogDescriptorsResponse_FieldPathValue {
	return &BatchGetLogDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetLogDescriptorsResponse_FieldPathArrayOfValues {
	return &BatchGetLogDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetLogDescriptorsResponse_FieldPathArrayItemValue {
	return &BatchGetLogDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetLogDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetLogDescriptorsResponse_FieldPathValue allows storing values for BatchGetLogDescriptorsResponse fields according to their type
type BatchGetLogDescriptorsResponse_FieldPathValue interface {
	BatchGetLogDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetLogDescriptorsResponse)
	CompareWith(*BatchGetLogDescriptorsResponse) (cmp int, comparable bool)
}

func ParseBatchGetLogDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetLogDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetLogDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetLogDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetLogDescriptorsResponse_FieldPathValue), nil
}

func MustParseBatchGetLogDescriptorsResponse_FieldPathValue(pathStr, valueStr string) BatchGetLogDescriptorsResponse_FieldPathValue {
	fpv, err := ParseBatchGetLogDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetLogDescriptorsResponse_FieldTerminalPathValue struct {
	BatchGetLogDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetLogDescriptorsResponse_FieldPathValue = (*BatchGetLogDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetLogDescriptorsResponse' as interface{}
func (fpv *BatchGetLogDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetLogDescriptorsResponse_FieldTerminalPathValue) AsLogDescriptorsValue() ([]*log_descriptor.LogDescriptor, bool) {
	res, ok := fpv.value.([]*log_descriptor.LogDescriptor)
	return res, ok
}
func (fpv *BatchGetLogDescriptorsResponse_FieldTerminalPathValue) AsMissingValue() ([]*log_descriptor.Reference, bool) {
	res, ok := fpv.value.([]*log_descriptor.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetLogDescriptorsResponse
func (fpv *BatchGetLogDescriptorsResponse_FieldTerminalPathValue) SetTo(target **BatchGetLogDescriptorsResponse) {
	if *target == nil {
		*target = new(BatchGetLogDescriptorsResponse)
	}
	switch fpv.selector {
	case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		(*target).LogDescriptors = fpv.value.([]*log_descriptor.LogDescriptor)
	case BatchGetLogDescriptorsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*log_descriptor.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetLogDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetLogDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetLogDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetLogDescriptorsResponse'.
func (fpv *BatchGetLogDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetLogDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return 0, false
	case BatchGetLogDescriptorsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetLogDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetLogDescriptorsResponse))
}

type BatchGetLogDescriptorsResponse_FieldSubPathValue struct {
	BatchGetLogDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetLogDescriptorsResponse_FieldPathValue = (*BatchGetLogDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetLogDescriptorsResponse_FieldSubPathValue) AsLogDescriptorsPathValue() (log_descriptor.LogDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(log_descriptor.LogDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetLogDescriptorsResponse_FieldSubPathValue) SetTo(target **BatchGetLogDescriptorsResponse) {
	if *target == nil {
		*target = new(BatchGetLogDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetLogDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetLogDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetLogDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetLogDescriptorsResponse_FieldSubPathValue) CompareWith(source *BatchGetLogDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetLogDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetLogDescriptorsResponse))
}

// BatchGetLogDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetLogDescriptorsResponse according to their type
// Present only for array (repeated) types.
type BatchGetLogDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetLogDescriptorsResponse_FieldPath
	ContainsValue(*BatchGetLogDescriptorsResponse) bool
}

// ParseBatchGetLogDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetLogDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetLogDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetLogDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetLogDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetLogDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetLogDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetLogDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetLogDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetLogDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetLogDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetLogDescriptorsResponse_FieldPathArrayItemValue = (*BatchGetLogDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetLogDescriptorsResponse as interface{}
func (fpaiv *BatchGetLogDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetLogDescriptorsResponse_FieldTerminalPathArrayItemValue) AsLogDescriptorsItemValue() (*log_descriptor.LogDescriptor, bool) {
	res, ok := fpaiv.value.(*log_descriptor.LogDescriptor)
	return res, ok
}
func (fpaiv *BatchGetLogDescriptorsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*log_descriptor.Reference, bool) {
	res, ok := fpaiv.value.(*log_descriptor.Reference)
	return res, ok
}

func (fpaiv *BatchGetLogDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetLogDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetLogDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetLogDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetLogDescriptorsResponse'
func (fpaiv *BatchGetLogDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetLogDescriptorsResponse) bool {
	slice := fpaiv.BatchGetLogDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetLogDescriptorsResponse_FieldSubPathArrayItemValue struct {
	BatchGetLogDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetLogDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetLogDescriptorsResponse_FieldSubPathArrayItemValue) AsLogDescriptorsPathItemValue() (log_descriptor.LogDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(log_descriptor.LogDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetLogDescriptorsResponse'
func (fpaivs *BatchGetLogDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetLogDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetLogDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetLogDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetLogDescriptorsResponse fields according to their type
type BatchGetLogDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetLogDescriptorsResponse_FieldPath
}

func ParseBatchGetLogDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetLogDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetLogDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetLogDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetLogDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetLogDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetLogDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetLogDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetLogDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetLogDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetLogDescriptorsResponse_FieldPathArrayOfValues = (*BatchGetLogDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetLogDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		for _, v := range fpaov.values.([][]*log_descriptor.LogDescriptor) {
			values = append(values, v)
		}
	case BatchGetLogDescriptorsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*log_descriptor.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetLogDescriptorsResponse_FieldTerminalPathArrayOfValues) AsLogDescriptorsArrayOfValues() ([][]*log_descriptor.LogDescriptor, bool) {
	res, ok := fpaov.values.([][]*log_descriptor.LogDescriptor)
	return res, ok
}
func (fpaov *BatchGetLogDescriptorsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*log_descriptor.Reference, bool) {
	res, ok := fpaov.values.([][]*log_descriptor.Reference)
	return res, ok
}

type BatchGetLogDescriptorsResponse_FieldSubPathArrayOfValues struct {
	BatchGetLogDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetLogDescriptorsResponse_FieldPathArrayOfValues = (*BatchGetLogDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetLogDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetLogDescriptorsResponse_FieldSubPathArrayOfValues) AsLogDescriptorsPathArrayOfValues() (log_descriptor.LogDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(log_descriptor.LogDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListLogDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListLogDescriptorsRequest_FieldPathSelector
	Get(source *ListLogDescriptorsRequest) []interface{}
	GetSingle(source *ListLogDescriptorsRequest) (interface{}, bool)
	ClearValue(item *ListLogDescriptorsRequest)

	// Those methods build corresponding ListLogDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListLogDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListLogDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListLogDescriptorsRequest_FieldPathArrayItemValue
}

type ListLogDescriptorsRequest_FieldPathSelector int32

const (
	ListLogDescriptorsRequest_FieldPathSelectorParent    ListLogDescriptorsRequest_FieldPathSelector = 0
	ListLogDescriptorsRequest_FieldPathSelectorPageSize  ListLogDescriptorsRequest_FieldPathSelector = 1
	ListLogDescriptorsRequest_FieldPathSelectorPageToken ListLogDescriptorsRequest_FieldPathSelector = 2
	ListLogDescriptorsRequest_FieldPathSelectorOrderBy   ListLogDescriptorsRequest_FieldPathSelector = 3
	ListLogDescriptorsRequest_FieldPathSelectorFilter    ListLogDescriptorsRequest_FieldPathSelector = 4
	ListLogDescriptorsRequest_FieldPathSelectorFieldMask ListLogDescriptorsRequest_FieldPathSelector = 5
	ListLogDescriptorsRequest_FieldPathSelectorView      ListLogDescriptorsRequest_FieldPathSelector = 6
)

func (s ListLogDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case ListLogDescriptorsRequest_FieldPathSelectorParent:
		return "parent"
	case ListLogDescriptorsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListLogDescriptorsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListLogDescriptorsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListLogDescriptorsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListLogDescriptorsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsRequest: %d", s))
	}
}

func BuildListLogDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListLogDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListLogDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListLogDescriptorsRequest", fp)
}

func ParseListLogDescriptorsRequest_FieldPath(rawField string) (ListLogDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListLogDescriptorsRequest_FieldPath(fp)
}

func MustParseListLogDescriptorsRequest_FieldPath(rawField string) ListLogDescriptorsRequest_FieldPath {
	fp, err := ParseListLogDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListLogDescriptorsRequest_FieldTerminalPath struct {
	selector ListLogDescriptorsRequest_FieldPathSelector
}

var _ ListLogDescriptorsRequest_FieldPath = (*ListLogDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *ListLogDescriptorsRequest_FieldTerminalPath) Selector() ListLogDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListLogDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListLogDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListLogDescriptorsRequest
func (fp *ListLogDescriptorsRequest_FieldTerminalPath) Get(source *ListLogDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListLogDescriptorsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListLogDescriptorsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListLogDescriptorsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListLogDescriptorsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListLogDescriptorsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListLogDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListLogDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListLogDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListLogDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source ListLogDescriptorsRequest
func (fp *ListLogDescriptorsRequest_FieldTerminalPath) GetSingle(source *ListLogDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListLogDescriptorsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListLogDescriptorsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListLogDescriptorsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListLogDescriptorsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListLogDescriptorsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListLogDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListLogDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListLogDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListLogDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListLogDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListLogDescriptorsRequest_FieldPathSelectorParent:
		return (*log_descriptor.ParentName)(nil)
	case ListLogDescriptorsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListLogDescriptorsRequest_FieldPathSelectorPageToken:
		return (*log_descriptor.PagerCursor)(nil)
	case ListLogDescriptorsRequest_FieldPathSelectorOrderBy:
		return (*log_descriptor.OrderBy)(nil)
	case ListLogDescriptorsRequest_FieldPathSelectorFilter:
		return (*log_descriptor.Filter)(nil)
	case ListLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*log_descriptor.LogDescriptor_FieldMask)(nil)
	case ListLogDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListLogDescriptorsRequest_FieldTerminalPath) ClearValue(item *ListLogDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case ListLogDescriptorsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListLogDescriptorsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListLogDescriptorsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListLogDescriptorsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListLogDescriptorsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListLogDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListLogDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListLogDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListLogDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListLogDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListLogDescriptorsRequest_FieldPathSelectorParent ||
		fp.selector == ListLogDescriptorsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListLogDescriptorsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListLogDescriptorsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListLogDescriptorsRequest_FieldPathSelectorFilter ||
		fp.selector == ListLogDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListLogDescriptorsRequest_FieldPathSelectorView
}

func (fp *ListLogDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) ListLogDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case ListLogDescriptorsRequest_FieldPathSelectorParent:
		return &ListLogDescriptorsRequest_FieldTerminalPathValue{ListLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.ParentName)}
	case ListLogDescriptorsRequest_FieldPathSelectorPageSize:
		return &ListLogDescriptorsRequest_FieldTerminalPathValue{ListLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListLogDescriptorsRequest_FieldPathSelectorPageToken:
		return &ListLogDescriptorsRequest_FieldTerminalPathValue{ListLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.PagerCursor)}
	case ListLogDescriptorsRequest_FieldPathSelectorOrderBy:
		return &ListLogDescriptorsRequest_FieldTerminalPathValue{ListLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.OrderBy)}
	case ListLogDescriptorsRequest_FieldPathSelectorFilter:
		return &ListLogDescriptorsRequest_FieldTerminalPathValue{ListLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.Filter)}
	case ListLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return &ListLogDescriptorsRequest_FieldTerminalPathValue{ListLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.LogDescriptor_FieldMask)}
	case ListLogDescriptorsRequest_FieldPathSelectorView:
		return &ListLogDescriptorsRequest_FieldTerminalPathValue{ListLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListLogDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListLogDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListLogDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues{ListLogDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListLogDescriptorsRequest_FieldPathSelectorParent:
		return &ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues{ListLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.ParentName)}
	case ListLogDescriptorsRequest_FieldPathSelectorPageSize:
		return &ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues{ListLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListLogDescriptorsRequest_FieldPathSelectorPageToken:
		return &ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues{ListLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.PagerCursor)}
	case ListLogDescriptorsRequest_FieldPathSelectorOrderBy:
		return &ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues{ListLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.OrderBy)}
	case ListLogDescriptorsRequest_FieldPathSelectorFilter:
		return &ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues{ListLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.Filter)}
	case ListLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return &ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues{ListLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.LogDescriptor_FieldMask)}
	case ListLogDescriptorsRequest_FieldPathSelectorView:
		return &ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues{ListLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListLogDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListLogDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListLogDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListLogDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListLogDescriptorsRequest_FieldPathValue allows storing values for ListLogDescriptorsRequest fields according to their type
type ListLogDescriptorsRequest_FieldPathValue interface {
	ListLogDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListLogDescriptorsRequest)
	CompareWith(*ListLogDescriptorsRequest) (cmp int, comparable bool)
}

func ParseListLogDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (ListLogDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseListLogDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListLogDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListLogDescriptorsRequest_FieldPathValue), nil
}

func MustParseListLogDescriptorsRequest_FieldPathValue(pathStr, valueStr string) ListLogDescriptorsRequest_FieldPathValue {
	fpv, err := ParseListLogDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListLogDescriptorsRequest_FieldTerminalPathValue struct {
	ListLogDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ ListLogDescriptorsRequest_FieldPathValue = (*ListLogDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListLogDescriptorsRequest' as interface{}
func (fpv *ListLogDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListLogDescriptorsRequest_FieldTerminalPathValue) AsParentValue() (*log_descriptor.ParentName, bool) {
	res, ok := fpv.value.(*log_descriptor.ParentName)
	return res, ok
}
func (fpv *ListLogDescriptorsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListLogDescriptorsRequest_FieldTerminalPathValue) AsPageTokenValue() (*log_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*log_descriptor.PagerCursor)
	return res, ok
}
func (fpv *ListLogDescriptorsRequest_FieldTerminalPathValue) AsOrderByValue() (*log_descriptor.OrderBy, bool) {
	res, ok := fpv.value.(*log_descriptor.OrderBy)
	return res, ok
}
func (fpv *ListLogDescriptorsRequest_FieldTerminalPathValue) AsFilterValue() (*log_descriptor.Filter, bool) {
	res, ok := fpv.value.(*log_descriptor.Filter)
	return res, ok
}
func (fpv *ListLogDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*log_descriptor.LogDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*log_descriptor.LogDescriptor_FieldMask)
	return res, ok
}
func (fpv *ListLogDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListLogDescriptorsRequest
func (fpv *ListLogDescriptorsRequest_FieldTerminalPathValue) SetTo(target **ListLogDescriptorsRequest) {
	if *target == nil {
		*target = new(ListLogDescriptorsRequest)
	}
	switch fpv.selector {
	case ListLogDescriptorsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*log_descriptor.ParentName)
	case ListLogDescriptorsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListLogDescriptorsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*log_descriptor.PagerCursor)
	case ListLogDescriptorsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*log_descriptor.OrderBy)
	case ListLogDescriptorsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*log_descriptor.Filter)
	case ListLogDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*log_descriptor.LogDescriptor_FieldMask)
	case ListLogDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *ListLogDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListLogDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListLogDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'ListLogDescriptorsRequest'.
func (fpv *ListLogDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *ListLogDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case ListLogDescriptorsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*log_descriptor.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListLogDescriptorsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListLogDescriptorsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListLogDescriptorsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListLogDescriptorsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListLogDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *ListLogDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListLogDescriptorsRequest))
}

// ListLogDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListLogDescriptorsRequest according to their type
// Present only for array (repeated) types.
type ListLogDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListLogDescriptorsRequest_FieldPath
	ContainsValue(*ListLogDescriptorsRequest) bool
}

// ParseListLogDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListLogDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListLogDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListLogDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListLogDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListLogDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseListLogDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListLogDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListLogDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListLogDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	ListLogDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ ListLogDescriptorsRequest_FieldPathArrayItemValue = (*ListLogDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListLogDescriptorsRequest as interface{}
func (fpaiv *ListLogDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListLogDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListLogDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListLogDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListLogDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListLogDescriptorsRequest'
func (fpaiv *ListLogDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListLogDescriptorsRequest) bool {
	slice := fpaiv.ListLogDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListLogDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for ListLogDescriptorsRequest fields according to their type
type ListLogDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListLogDescriptorsRequest_FieldPath
}

func ParseListLogDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListLogDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListLogDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListLogDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListLogDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseListLogDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListLogDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListLogDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	ListLogDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ ListLogDescriptorsRequest_FieldPathArrayOfValues = (*ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListLogDescriptorsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*log_descriptor.ParentName) {
			values = append(values, v)
		}
	case ListLogDescriptorsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListLogDescriptorsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*log_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case ListLogDescriptorsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*log_descriptor.OrderBy) {
			values = append(values, v)
		}
	case ListLogDescriptorsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*log_descriptor.Filter) {
			values = append(values, v)
		}
	case ListLogDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*log_descriptor.LogDescriptor_FieldMask) {
			values = append(values, v)
		}
	case ListLogDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*log_descriptor.ParentName, bool) {
	res, ok := fpaov.values.([]*log_descriptor.ParentName)
	return res, ok
}
func (fpaov *ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*log_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*log_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*log_descriptor.OrderBy, bool) {
	res, ok := fpaov.values.([]*log_descriptor.OrderBy)
	return res, ok
}
func (fpaov *ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*log_descriptor.Filter, bool) {
	res, ok := fpaov.values.([]*log_descriptor.Filter)
	return res, ok
}
func (fpaov *ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*log_descriptor.LogDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*log_descriptor.LogDescriptor_FieldMask)
	return res, ok
}
func (fpaov *ListLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListLogDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListLogDescriptorsResponse_FieldPathSelector
	Get(source *ListLogDescriptorsResponse) []interface{}
	GetSingle(source *ListLogDescriptorsResponse) (interface{}, bool)
	ClearValue(item *ListLogDescriptorsResponse)

	// Those methods build corresponding ListLogDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListLogDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListLogDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListLogDescriptorsResponse_FieldPathArrayItemValue
}

type ListLogDescriptorsResponse_FieldPathSelector int32

const (
	ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors ListLogDescriptorsResponse_FieldPathSelector = 0
	ListLogDescriptorsResponse_FieldPathSelectorPrevPageToken  ListLogDescriptorsResponse_FieldPathSelector = 1
	ListLogDescriptorsResponse_FieldPathSelectorNextPageToken  ListLogDescriptorsResponse_FieldPathSelector = 2
)

func (s ListLogDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return "log_descriptors"
	case ListLogDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListLogDescriptorsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", s))
	}
}

func BuildListLogDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListLogDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListLogDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "log_descriptors", "logDescriptors", "log-descriptors":
			return &ListLogDescriptorsResponse_FieldTerminalPath{selector: ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListLogDescriptorsResponse_FieldTerminalPath{selector: ListLogDescriptorsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListLogDescriptorsResponse_FieldTerminalPath{selector: ListLogDescriptorsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "log_descriptors", "logDescriptors", "log-descriptors":
			if subpath, err := log_descriptor.BuildLogDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListLogDescriptorsResponse_FieldSubPath{selector: ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListLogDescriptorsResponse", fp)
}

func ParseListLogDescriptorsResponse_FieldPath(rawField string) (ListLogDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListLogDescriptorsResponse_FieldPath(fp)
}

func MustParseListLogDescriptorsResponse_FieldPath(rawField string) ListLogDescriptorsResponse_FieldPath {
	fp, err := ParseListLogDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListLogDescriptorsResponse_FieldTerminalPath struct {
	selector ListLogDescriptorsResponse_FieldPathSelector
}

var _ ListLogDescriptorsResponse_FieldPath = (*ListLogDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *ListLogDescriptorsResponse_FieldTerminalPath) Selector() ListLogDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListLogDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListLogDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListLogDescriptorsResponse
func (fp *ListLogDescriptorsResponse_FieldTerminalPath) Get(source *ListLogDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
			for _, value := range source.GetLogDescriptors() {
				values = append(values, value)
			}
		case ListLogDescriptorsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListLogDescriptorsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListLogDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListLogDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source ListLogDescriptorsResponse
func (fp *ListLogDescriptorsResponse_FieldTerminalPath) GetSingle(source *ListLogDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		res := source.GetLogDescriptors()
		return res, res != nil
	case ListLogDescriptorsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListLogDescriptorsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListLogDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListLogDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListLogDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return ([]*log_descriptor.LogDescriptor)(nil)
	case ListLogDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return (*log_descriptor.PagerCursor)(nil)
	case ListLogDescriptorsResponse_FieldPathSelectorNextPageToken:
		return (*log_descriptor.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListLogDescriptorsResponse_FieldTerminalPath) ClearValue(item *ListLogDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
			item.LogDescriptors = nil
		case ListLogDescriptorsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListLogDescriptorsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListLogDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListLogDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListLogDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListLogDescriptorsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListLogDescriptorsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListLogDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) ListLogDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return &ListLogDescriptorsResponse_FieldTerminalPathValue{ListLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*log_descriptor.LogDescriptor)}
	case ListLogDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return &ListLogDescriptorsResponse_FieldTerminalPathValue{ListLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*log_descriptor.PagerCursor)}
	case ListLogDescriptorsResponse_FieldPathSelectorNextPageToken:
		return &ListLogDescriptorsResponse_FieldTerminalPathValue{ListLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*log_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListLogDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListLogDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListLogDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &ListLogDescriptorsResponse_FieldTerminalPathArrayOfValues{ListLogDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return &ListLogDescriptorsResponse_FieldTerminalPathArrayOfValues{ListLogDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*log_descriptor.LogDescriptor)}
	case ListLogDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return &ListLogDescriptorsResponse_FieldTerminalPathArrayOfValues{ListLogDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*log_descriptor.PagerCursor)}
	case ListLogDescriptorsResponse_FieldPathSelectorNextPageToken:
		return &ListLogDescriptorsResponse_FieldTerminalPathArrayOfValues{ListLogDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*log_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListLogDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListLogDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListLogDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return &ListLogDescriptorsResponse_FieldTerminalPathArrayItemValue{ListLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*log_descriptor.LogDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListLogDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListLogDescriptorsResponse_FieldSubPath struct {
	selector ListLogDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListLogDescriptorsResponse_FieldPath = (*ListLogDescriptorsResponse_FieldSubPath)(nil)

func (fps *ListLogDescriptorsResponse_FieldSubPath) Selector() ListLogDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListLogDescriptorsResponse_FieldSubPath) AsLogDescriptorsSubPath() (log_descriptor.LogDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(log_descriptor.LogDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListLogDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListLogDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListLogDescriptorsResponse
func (fps *ListLogDescriptorsResponse_FieldSubPath) Get(source *ListLogDescriptorsResponse) (values []interface{}) {
	if asLogDescriptorFieldPath, ok := fps.AsLogDescriptorsSubPath(); ok {
		for _, item := range source.GetLogDescriptors() {
			values = append(values, asLogDescriptorFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListLogDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListLogDescriptorsResponse))
}

// GetSingle returns value of selected field from source ListLogDescriptorsResponse
func (fps *ListLogDescriptorsResponse_FieldSubPath) GetSingle(source *ListLogDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		if len(source.GetLogDescriptors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLogDescriptors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *ListLogDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListLogDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListLogDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListLogDescriptorsResponse_FieldSubPath) ClearValue(item *ListLogDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
			for _, subItem := range item.LogDescriptors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListLogDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListLogDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListLogDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListLogDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) ListLogDescriptorsResponse_FieldPathValue {
	return &ListLogDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListLogDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListLogDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListLogDescriptorsResponse_FieldPathArrayOfValues {
	return &ListLogDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListLogDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListLogDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListLogDescriptorsResponse_FieldPathArrayItemValue {
	return &ListLogDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListLogDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListLogDescriptorsResponse_FieldPathValue allows storing values for ListLogDescriptorsResponse fields according to their type
type ListLogDescriptorsResponse_FieldPathValue interface {
	ListLogDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListLogDescriptorsResponse)
	CompareWith(*ListLogDescriptorsResponse) (cmp int, comparable bool)
}

func ParseListLogDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (ListLogDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseListLogDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListLogDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListLogDescriptorsResponse_FieldPathValue), nil
}

func MustParseListLogDescriptorsResponse_FieldPathValue(pathStr, valueStr string) ListLogDescriptorsResponse_FieldPathValue {
	fpv, err := ParseListLogDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListLogDescriptorsResponse_FieldTerminalPathValue struct {
	ListLogDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ ListLogDescriptorsResponse_FieldPathValue = (*ListLogDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListLogDescriptorsResponse' as interface{}
func (fpv *ListLogDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListLogDescriptorsResponse_FieldTerminalPathValue) AsLogDescriptorsValue() ([]*log_descriptor.LogDescriptor, bool) {
	res, ok := fpv.value.([]*log_descriptor.LogDescriptor)
	return res, ok
}
func (fpv *ListLogDescriptorsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*log_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*log_descriptor.PagerCursor)
	return res, ok
}
func (fpv *ListLogDescriptorsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*log_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*log_descriptor.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListLogDescriptorsResponse
func (fpv *ListLogDescriptorsResponse_FieldTerminalPathValue) SetTo(target **ListLogDescriptorsResponse) {
	if *target == nil {
		*target = new(ListLogDescriptorsResponse)
	}
	switch fpv.selector {
	case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		(*target).LogDescriptors = fpv.value.([]*log_descriptor.LogDescriptor)
	case ListLogDescriptorsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*log_descriptor.PagerCursor)
	case ListLogDescriptorsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*log_descriptor.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *ListLogDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListLogDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListLogDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'ListLogDescriptorsResponse'.
func (fpv *ListLogDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *ListLogDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return 0, false
	case ListLogDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListLogDescriptorsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *ListLogDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListLogDescriptorsResponse))
}

type ListLogDescriptorsResponse_FieldSubPathValue struct {
	ListLogDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListLogDescriptorsResponse_FieldPathValue = (*ListLogDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *ListLogDescriptorsResponse_FieldSubPathValue) AsLogDescriptorsPathValue() (log_descriptor.LogDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(log_descriptor.LogDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *ListLogDescriptorsResponse_FieldSubPathValue) SetTo(target **ListLogDescriptorsResponse) {
	if *target == nil {
		*target = new(ListLogDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListLogDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListLogDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListLogDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListLogDescriptorsResponse_FieldSubPathValue) CompareWith(source *ListLogDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListLogDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListLogDescriptorsResponse))
}

// ListLogDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListLogDescriptorsResponse according to their type
// Present only for array (repeated) types.
type ListLogDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListLogDescriptorsResponse_FieldPath
	ContainsValue(*ListLogDescriptorsResponse) bool
}

// ParseListLogDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListLogDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListLogDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListLogDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListLogDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListLogDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseListLogDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListLogDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListLogDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListLogDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	ListLogDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ ListLogDescriptorsResponse_FieldPathArrayItemValue = (*ListLogDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListLogDescriptorsResponse as interface{}
func (fpaiv *ListLogDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListLogDescriptorsResponse_FieldTerminalPathArrayItemValue) AsLogDescriptorsItemValue() (*log_descriptor.LogDescriptor, bool) {
	res, ok := fpaiv.value.(*log_descriptor.LogDescriptor)
	return res, ok
}

func (fpaiv *ListLogDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListLogDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListLogDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListLogDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListLogDescriptorsResponse'
func (fpaiv *ListLogDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListLogDescriptorsResponse) bool {
	slice := fpaiv.ListLogDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListLogDescriptorsResponse_FieldSubPathArrayItemValue struct {
	ListLogDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListLogDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListLogDescriptorsResponse_FieldSubPathArrayItemValue) AsLogDescriptorsPathItemValue() (log_descriptor.LogDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(log_descriptor.LogDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListLogDescriptorsResponse'
func (fpaivs *ListLogDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListLogDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListLogDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// ListLogDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for ListLogDescriptorsResponse fields according to their type
type ListLogDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListLogDescriptorsResponse_FieldPath
}

func ParseListLogDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListLogDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListLogDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListLogDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListLogDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseListLogDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListLogDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListLogDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListLogDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	ListLogDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ ListLogDescriptorsResponse_FieldPathArrayOfValues = (*ListLogDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListLogDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors:
		for _, v := range fpaov.values.([][]*log_descriptor.LogDescriptor) {
			values = append(values, v)
		}
	case ListLogDescriptorsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*log_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case ListLogDescriptorsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*log_descriptor.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListLogDescriptorsResponse_FieldTerminalPathArrayOfValues) AsLogDescriptorsArrayOfValues() ([][]*log_descriptor.LogDescriptor, bool) {
	res, ok := fpaov.values.([][]*log_descriptor.LogDescriptor)
	return res, ok
}
func (fpaov *ListLogDescriptorsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*log_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*log_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *ListLogDescriptorsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*log_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*log_descriptor.PagerCursor)
	return res, ok
}

type ListLogDescriptorsResponse_FieldSubPathArrayOfValues struct {
	ListLogDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListLogDescriptorsResponse_FieldPathArrayOfValues = (*ListLogDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListLogDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListLogDescriptorsResponse_FieldSubPathArrayOfValues) AsLogDescriptorsPathArrayOfValues() (log_descriptor.LogDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(log_descriptor.LogDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchLogDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchLogDescriptorRequest_FieldPathSelector
	Get(source *WatchLogDescriptorRequest) []interface{}
	GetSingle(source *WatchLogDescriptorRequest) (interface{}, bool)
	ClearValue(item *WatchLogDescriptorRequest)

	// Those methods build corresponding WatchLogDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchLogDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchLogDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchLogDescriptorRequest_FieldPathArrayItemValue
}

type WatchLogDescriptorRequest_FieldPathSelector int32

const (
	WatchLogDescriptorRequest_FieldPathSelectorName      WatchLogDescriptorRequest_FieldPathSelector = 0
	WatchLogDescriptorRequest_FieldPathSelectorFieldMask WatchLogDescriptorRequest_FieldPathSelector = 1
	WatchLogDescriptorRequest_FieldPathSelectorView      WatchLogDescriptorRequest_FieldPathSelector = 2
)

func (s WatchLogDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case WatchLogDescriptorRequest_FieldPathSelectorName:
		return "name"
	case WatchLogDescriptorRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchLogDescriptorRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorRequest: %d", s))
	}
}

func BuildWatchLogDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchLogDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchLogDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchLogDescriptorRequest_FieldTerminalPath{selector: WatchLogDescriptorRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchLogDescriptorRequest_FieldTerminalPath{selector: WatchLogDescriptorRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchLogDescriptorRequest_FieldTerminalPath{selector: WatchLogDescriptorRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchLogDescriptorRequest", fp)
}

func ParseWatchLogDescriptorRequest_FieldPath(rawField string) (WatchLogDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchLogDescriptorRequest_FieldPath(fp)
}

func MustParseWatchLogDescriptorRequest_FieldPath(rawField string) WatchLogDescriptorRequest_FieldPath {
	fp, err := ParseWatchLogDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchLogDescriptorRequest_FieldTerminalPath struct {
	selector WatchLogDescriptorRequest_FieldPathSelector
}

var _ WatchLogDescriptorRequest_FieldPath = (*WatchLogDescriptorRequest_FieldTerminalPath)(nil)

func (fp *WatchLogDescriptorRequest_FieldTerminalPath) Selector() WatchLogDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchLogDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchLogDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchLogDescriptorRequest
func (fp *WatchLogDescriptorRequest_FieldTerminalPath) Get(source *WatchLogDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchLogDescriptorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchLogDescriptorRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchLogDescriptorRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchLogDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchLogDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source WatchLogDescriptorRequest
func (fp *WatchLogDescriptorRequest_FieldTerminalPath) GetSingle(source *WatchLogDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchLogDescriptorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchLogDescriptorRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchLogDescriptorRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchLogDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchLogDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchLogDescriptorRequest_FieldPathSelectorName:
		return (*log_descriptor.Reference)(nil)
	case WatchLogDescriptorRequest_FieldPathSelectorFieldMask:
		return (*log_descriptor.LogDescriptor_FieldMask)(nil)
	case WatchLogDescriptorRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorRequest_FieldTerminalPath) ClearValue(item *WatchLogDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case WatchLogDescriptorRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchLogDescriptorRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchLogDescriptorRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchLogDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchLogDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchLogDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchLogDescriptorRequest_FieldPathSelectorName ||
		fp.selector == WatchLogDescriptorRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchLogDescriptorRequest_FieldPathSelectorView
}

func (fp *WatchLogDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) WatchLogDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case WatchLogDescriptorRequest_FieldPathSelectorName:
		return &WatchLogDescriptorRequest_FieldTerminalPathValue{WatchLogDescriptorRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.Reference)}
	case WatchLogDescriptorRequest_FieldPathSelectorFieldMask:
		return &WatchLogDescriptorRequest_FieldTerminalPathValue{WatchLogDescriptorRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.LogDescriptor_FieldMask)}
	case WatchLogDescriptorRequest_FieldPathSelectorView:
		return &WatchLogDescriptorRequest_FieldTerminalPathValue{WatchLogDescriptorRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchLogDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchLogDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &WatchLogDescriptorRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchLogDescriptorRequest_FieldPathSelectorName:
		return &WatchLogDescriptorRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.Reference)}
	case WatchLogDescriptorRequest_FieldPathSelectorFieldMask:
		return &WatchLogDescriptorRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.LogDescriptor_FieldMask)}
	case WatchLogDescriptorRequest_FieldPathSelectorView:
		return &WatchLogDescriptorRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchLogDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchLogDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchLogDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchLogDescriptorRequest_FieldPathValue allows storing values for WatchLogDescriptorRequest fields according to their type
type WatchLogDescriptorRequest_FieldPathValue interface {
	WatchLogDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchLogDescriptorRequest)
	CompareWith(*WatchLogDescriptorRequest) (cmp int, comparable bool)
}

func ParseWatchLogDescriptorRequest_FieldPathValue(pathStr, valueStr string) (WatchLogDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseWatchLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchLogDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchLogDescriptorRequest_FieldPathValue), nil
}

func MustParseWatchLogDescriptorRequest_FieldPathValue(pathStr, valueStr string) WatchLogDescriptorRequest_FieldPathValue {
	fpv, err := ParseWatchLogDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchLogDescriptorRequest_FieldTerminalPathValue struct {
	WatchLogDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ WatchLogDescriptorRequest_FieldPathValue = (*WatchLogDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchLogDescriptorRequest' as interface{}
func (fpv *WatchLogDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchLogDescriptorRequest_FieldTerminalPathValue) AsNameValue() (*log_descriptor.Reference, bool) {
	res, ok := fpv.value.(*log_descriptor.Reference)
	return res, ok
}
func (fpv *WatchLogDescriptorRequest_FieldTerminalPathValue) AsFieldMaskValue() (*log_descriptor.LogDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*log_descriptor.LogDescriptor_FieldMask)
	return res, ok
}
func (fpv *WatchLogDescriptorRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchLogDescriptorRequest
func (fpv *WatchLogDescriptorRequest_FieldTerminalPathValue) SetTo(target **WatchLogDescriptorRequest) {
	if *target == nil {
		*target = new(WatchLogDescriptorRequest)
	}
	switch fpv.selector {
	case WatchLogDescriptorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*log_descriptor.Reference)
	case WatchLogDescriptorRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*log_descriptor.LogDescriptor_FieldMask)
	case WatchLogDescriptorRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *WatchLogDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchLogDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchLogDescriptorRequest_FieldTerminalPathValue' with the value under path in 'WatchLogDescriptorRequest'.
func (fpv *WatchLogDescriptorRequest_FieldTerminalPathValue) CompareWith(source *WatchLogDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case WatchLogDescriptorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*log_descriptor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchLogDescriptorRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchLogDescriptorRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *WatchLogDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchLogDescriptorRequest))
}

// WatchLogDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchLogDescriptorRequest according to their type
// Present only for array (repeated) types.
type WatchLogDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchLogDescriptorRequest_FieldPath
	ContainsValue(*WatchLogDescriptorRequest) bool
}

// ParseWatchLogDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchLogDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchLogDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchLogDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchLogDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchLogDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	WatchLogDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ WatchLogDescriptorRequest_FieldPathArrayItemValue = (*WatchLogDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchLogDescriptorRequest as interface{}
func (fpaiv *WatchLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchLogDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchLogDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchLogDescriptorRequest'
func (fpaiv *WatchLogDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchLogDescriptorRequest) bool {
	slice := fpaiv.WatchLogDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchLogDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for WatchLogDescriptorRequest fields according to their type
type WatchLogDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchLogDescriptorRequest_FieldPath
}

func ParseWatchLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchLogDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchLogDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchLogDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchLogDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchLogDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	WatchLogDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ WatchLogDescriptorRequest_FieldPathArrayOfValues = (*WatchLogDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchLogDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchLogDescriptorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*log_descriptor.Reference) {
			values = append(values, v)
		}
	case WatchLogDescriptorRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*log_descriptor.LogDescriptor_FieldMask) {
			values = append(values, v)
		}
	case WatchLogDescriptorRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchLogDescriptorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*log_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*log_descriptor.Reference)
	return res, ok
}
func (fpaov *WatchLogDescriptorRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*log_descriptor.LogDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*log_descriptor.LogDescriptor_FieldMask)
	return res, ok
}
func (fpaov *WatchLogDescriptorRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchLogDescriptorResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchLogDescriptorResponse_FieldPathSelector
	Get(source *WatchLogDescriptorResponse) []interface{}
	GetSingle(source *WatchLogDescriptorResponse) (interface{}, bool)
	ClearValue(item *WatchLogDescriptorResponse)

	// Those methods build corresponding WatchLogDescriptorResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchLogDescriptorResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchLogDescriptorResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchLogDescriptorResponse_FieldPathArrayItemValue
}

type WatchLogDescriptorResponse_FieldPathSelector int32

const (
	WatchLogDescriptorResponse_FieldPathSelectorChange WatchLogDescriptorResponse_FieldPathSelector = 0
)

func (s WatchLogDescriptorResponse_FieldPathSelector) String() string {
	switch s {
	case WatchLogDescriptorResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorResponse: %d", s))
	}
}

func BuildWatchLogDescriptorResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchLogDescriptorResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchLogDescriptorResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchLogDescriptorResponse_FieldTerminalPath{selector: WatchLogDescriptorResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchLogDescriptorResponse", fp)
}

func ParseWatchLogDescriptorResponse_FieldPath(rawField string) (WatchLogDescriptorResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchLogDescriptorResponse_FieldPath(fp)
}

func MustParseWatchLogDescriptorResponse_FieldPath(rawField string) WatchLogDescriptorResponse_FieldPath {
	fp, err := ParseWatchLogDescriptorResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchLogDescriptorResponse_FieldTerminalPath struct {
	selector WatchLogDescriptorResponse_FieldPathSelector
}

var _ WatchLogDescriptorResponse_FieldPath = (*WatchLogDescriptorResponse_FieldTerminalPath)(nil)

func (fp *WatchLogDescriptorResponse_FieldTerminalPath) Selector() WatchLogDescriptorResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchLogDescriptorResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchLogDescriptorResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchLogDescriptorResponse
func (fp *WatchLogDescriptorResponse_FieldTerminalPath) Get(source *WatchLogDescriptorResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchLogDescriptorResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchLogDescriptorResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchLogDescriptorResponse))
}

// GetSingle returns value pointed by specific field of from source WatchLogDescriptorResponse
func (fp *WatchLogDescriptorResponse_FieldTerminalPath) GetSingle(source *WatchLogDescriptorResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchLogDescriptorResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchLogDescriptorResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchLogDescriptorResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchLogDescriptorResponse_FieldPathSelectorChange:
		return (*log_descriptor.LogDescriptorChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorResponse_FieldTerminalPath) ClearValue(item *WatchLogDescriptorResponse) {
	if item != nil {
		switch fp.selector {
		case WatchLogDescriptorResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchLogDescriptorResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchLogDescriptorResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchLogDescriptorResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchLogDescriptorResponse_FieldPathSelectorChange
}

func (fp *WatchLogDescriptorResponse_FieldTerminalPath) WithIValue(value interface{}) WatchLogDescriptorResponse_FieldPathValue {
	switch fp.selector {
	case WatchLogDescriptorResponse_FieldPathSelectorChange:
		return &WatchLogDescriptorResponse_FieldTerminalPathValue{WatchLogDescriptorResponse_FieldTerminalPath: *fp, value: value.(*log_descriptor.LogDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchLogDescriptorResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchLogDescriptorResponse_FieldPathArrayOfValues {
	fpaov := &WatchLogDescriptorResponse_FieldTerminalPathArrayOfValues{WatchLogDescriptorResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchLogDescriptorResponse_FieldPathSelectorChange:
		return &WatchLogDescriptorResponse_FieldTerminalPathArrayOfValues{WatchLogDescriptorResponse_FieldTerminalPath: *fp, values: values.([]*log_descriptor.LogDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchLogDescriptorResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchLogDescriptorResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchLogDescriptorResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchLogDescriptorResponse_FieldPathValue allows storing values for WatchLogDescriptorResponse fields according to their type
type WatchLogDescriptorResponse_FieldPathValue interface {
	WatchLogDescriptorResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchLogDescriptorResponse)
	CompareWith(*WatchLogDescriptorResponse) (cmp int, comparable bool)
}

func ParseWatchLogDescriptorResponse_FieldPathValue(pathStr, valueStr string) (WatchLogDescriptorResponse_FieldPathValue, error) {
	fp, err := ParseWatchLogDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchLogDescriptorResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchLogDescriptorResponse_FieldPathValue), nil
}

func MustParseWatchLogDescriptorResponse_FieldPathValue(pathStr, valueStr string) WatchLogDescriptorResponse_FieldPathValue {
	fpv, err := ParseWatchLogDescriptorResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchLogDescriptorResponse_FieldTerminalPathValue struct {
	WatchLogDescriptorResponse_FieldTerminalPath
	value interface{}
}

var _ WatchLogDescriptorResponse_FieldPathValue = (*WatchLogDescriptorResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchLogDescriptorResponse' as interface{}
func (fpv *WatchLogDescriptorResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchLogDescriptorResponse_FieldTerminalPathValue) AsChangeValue() (*log_descriptor.LogDescriptorChange, bool) {
	res, ok := fpv.value.(*log_descriptor.LogDescriptorChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchLogDescriptorResponse
func (fpv *WatchLogDescriptorResponse_FieldTerminalPathValue) SetTo(target **WatchLogDescriptorResponse) {
	if *target == nil {
		*target = new(WatchLogDescriptorResponse)
	}
	switch fpv.selector {
	case WatchLogDescriptorResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*log_descriptor.LogDescriptorChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorResponse: %d", fpv.selector))
	}
}

func (fpv *WatchLogDescriptorResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchLogDescriptorResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchLogDescriptorResponse_FieldTerminalPathValue' with the value under path in 'WatchLogDescriptorResponse'.
func (fpv *WatchLogDescriptorResponse_FieldTerminalPathValue) CompareWith(source *WatchLogDescriptorResponse) (int, bool) {
	switch fpv.selector {
	case WatchLogDescriptorResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorResponse: %d", fpv.selector))
	}
}

func (fpv *WatchLogDescriptorResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchLogDescriptorResponse))
}

// WatchLogDescriptorResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchLogDescriptorResponse according to their type
// Present only for array (repeated) types.
type WatchLogDescriptorResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchLogDescriptorResponse_FieldPath
	ContainsValue(*WatchLogDescriptorResponse) bool
}

// ParseWatchLogDescriptorResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchLogDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchLogDescriptorResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchLogDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchLogDescriptorResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchLogDescriptorResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchLogDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchLogDescriptorResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchLogDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchLogDescriptorResponse_FieldTerminalPathArrayItemValue struct {
	WatchLogDescriptorResponse_FieldTerminalPath
	value interface{}
}

var _ WatchLogDescriptorResponse_FieldPathArrayItemValue = (*WatchLogDescriptorResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchLogDescriptorResponse as interface{}
func (fpaiv *WatchLogDescriptorResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchLogDescriptorResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchLogDescriptorResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchLogDescriptorResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchLogDescriptorResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchLogDescriptorResponse'
func (fpaiv *WatchLogDescriptorResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchLogDescriptorResponse) bool {
	slice := fpaiv.WatchLogDescriptorResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchLogDescriptorResponse_FieldPathArrayOfValues allows storing slice of values for WatchLogDescriptorResponse fields according to their type
type WatchLogDescriptorResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchLogDescriptorResponse_FieldPath
}

func ParseWatchLogDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchLogDescriptorResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchLogDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchLogDescriptorResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchLogDescriptorResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchLogDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchLogDescriptorResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchLogDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchLogDescriptorResponse_FieldTerminalPathArrayOfValues struct {
	WatchLogDescriptorResponse_FieldTerminalPath
	values interface{}
}

var _ WatchLogDescriptorResponse_FieldPathArrayOfValues = (*WatchLogDescriptorResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchLogDescriptorResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchLogDescriptorResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*log_descriptor.LogDescriptorChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchLogDescriptorResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*log_descriptor.LogDescriptorChange, bool) {
	res, ok := fpaov.values.([]*log_descriptor.LogDescriptorChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchLogDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchLogDescriptorsRequest_FieldPathSelector
	Get(source *WatchLogDescriptorsRequest) []interface{}
	GetSingle(source *WatchLogDescriptorsRequest) (interface{}, bool)
	ClearValue(item *WatchLogDescriptorsRequest)

	// Those methods build corresponding WatchLogDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchLogDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchLogDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchLogDescriptorsRequest_FieldPathArrayItemValue
}

type WatchLogDescriptorsRequest_FieldPathSelector int32

const (
	WatchLogDescriptorsRequest_FieldPathSelectorType         WatchLogDescriptorsRequest_FieldPathSelector = 0
	WatchLogDescriptorsRequest_FieldPathSelectorParent       WatchLogDescriptorsRequest_FieldPathSelector = 1
	WatchLogDescriptorsRequest_FieldPathSelectorPageSize     WatchLogDescriptorsRequest_FieldPathSelector = 2
	WatchLogDescriptorsRequest_FieldPathSelectorPageToken    WatchLogDescriptorsRequest_FieldPathSelector = 3
	WatchLogDescriptorsRequest_FieldPathSelectorOrderBy      WatchLogDescriptorsRequest_FieldPathSelector = 4
	WatchLogDescriptorsRequest_FieldPathSelectorResumeToken  WatchLogDescriptorsRequest_FieldPathSelector = 5
	WatchLogDescriptorsRequest_FieldPathSelectorFilter       WatchLogDescriptorsRequest_FieldPathSelector = 6
	WatchLogDescriptorsRequest_FieldPathSelectorFieldMask    WatchLogDescriptorsRequest_FieldPathSelector = 7
	WatchLogDescriptorsRequest_FieldPathSelectorView         WatchLogDescriptorsRequest_FieldPathSelector = 8
	WatchLogDescriptorsRequest_FieldPathSelectorMaxChunkSize WatchLogDescriptorsRequest_FieldPathSelector = 9
)

func (s WatchLogDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchLogDescriptorsRequest_FieldPathSelectorType:
		return "type"
	case WatchLogDescriptorsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchLogDescriptorsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchLogDescriptorsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchLogDescriptorsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchLogDescriptorsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchLogDescriptorsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchLogDescriptorsRequest_FieldPathSelectorView:
		return "view"
	case WatchLogDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsRequest: %d", s))
	}
}

func BuildWatchLogDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchLogDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchLogDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchLogDescriptorsRequest", fp)
}

func ParseWatchLogDescriptorsRequest_FieldPath(rawField string) (WatchLogDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchLogDescriptorsRequest_FieldPath(fp)
}

func MustParseWatchLogDescriptorsRequest_FieldPath(rawField string) WatchLogDescriptorsRequest_FieldPath {
	fp, err := ParseWatchLogDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchLogDescriptorsRequest_FieldTerminalPath struct {
	selector WatchLogDescriptorsRequest_FieldPathSelector
}

var _ WatchLogDescriptorsRequest_FieldPath = (*WatchLogDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) Selector() WatchLogDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchLogDescriptorsRequest
func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) Get(source *WatchLogDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchLogDescriptorsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchLogDescriptorsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchLogDescriptorsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchLogDescriptorsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchLogDescriptorsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchLogDescriptorsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchLogDescriptorsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchLogDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchLogDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchLogDescriptorsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchLogDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchLogDescriptorsRequest
func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) GetSingle(source *WatchLogDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchLogDescriptorsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchLogDescriptorsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchLogDescriptorsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchLogDescriptorsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchLogDescriptorsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchLogDescriptorsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchLogDescriptorsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchLogDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchLogDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchLogDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchLogDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchLogDescriptorsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchLogDescriptorsRequest_FieldPathSelectorParent:
		return (*log_descriptor.ParentReference)(nil)
	case WatchLogDescriptorsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchLogDescriptorsRequest_FieldPathSelectorPageToken:
		return (*log_descriptor.PagerCursor)(nil)
	case WatchLogDescriptorsRequest_FieldPathSelectorOrderBy:
		return (*log_descriptor.OrderBy)(nil)
	case WatchLogDescriptorsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchLogDescriptorsRequest_FieldPathSelectorFilter:
		return (*log_descriptor.Filter)(nil)
	case WatchLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*log_descriptor.LogDescriptor_FieldMask)(nil)
	case WatchLogDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchLogDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) ClearValue(item *WatchLogDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchLogDescriptorsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchLogDescriptorsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchLogDescriptorsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchLogDescriptorsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchLogDescriptorsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchLogDescriptorsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchLogDescriptorsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchLogDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchLogDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchLogDescriptorsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchLogDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchLogDescriptorsRequest_FieldPathSelectorType ||
		fp.selector == WatchLogDescriptorsRequest_FieldPathSelectorParent ||
		fp.selector == WatchLogDescriptorsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchLogDescriptorsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchLogDescriptorsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchLogDescriptorsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchLogDescriptorsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchLogDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchLogDescriptorsRequest_FieldPathSelectorView ||
		fp.selector == WatchLogDescriptorsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchLogDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case WatchLogDescriptorsRequest_FieldPathSelectorType:
		return &WatchLogDescriptorsRequest_FieldTerminalPathValue{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchLogDescriptorsRequest_FieldPathSelectorParent:
		return &WatchLogDescriptorsRequest_FieldTerminalPathValue{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.ParentReference)}
	case WatchLogDescriptorsRequest_FieldPathSelectorPageSize:
		return &WatchLogDescriptorsRequest_FieldTerminalPathValue{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchLogDescriptorsRequest_FieldPathSelectorPageToken:
		return &WatchLogDescriptorsRequest_FieldTerminalPathValue{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.PagerCursor)}
	case WatchLogDescriptorsRequest_FieldPathSelectorOrderBy:
		return &WatchLogDescriptorsRequest_FieldTerminalPathValue{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.OrderBy)}
	case WatchLogDescriptorsRequest_FieldPathSelectorResumeToken:
		return &WatchLogDescriptorsRequest_FieldTerminalPathValue{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchLogDescriptorsRequest_FieldPathSelectorFilter:
		return &WatchLogDescriptorsRequest_FieldTerminalPathValue{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.Filter)}
	case WatchLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return &WatchLogDescriptorsRequest_FieldTerminalPathValue{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.LogDescriptor_FieldMask)}
	case WatchLogDescriptorsRequest_FieldPathSelectorView:
		return &WatchLogDescriptorsRequest_FieldTerminalPathValue{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchLogDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchLogDescriptorsRequest_FieldTerminalPathValue{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchLogDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchLogDescriptorsRequest_FieldPathSelectorType:
		return &WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchLogDescriptorsRequest_FieldPathSelectorParent:
		return &WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.ParentReference)}
	case WatchLogDescriptorsRequest_FieldPathSelectorPageSize:
		return &WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchLogDescriptorsRequest_FieldPathSelectorPageToken:
		return &WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.PagerCursor)}
	case WatchLogDescriptorsRequest_FieldPathSelectorOrderBy:
		return &WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.OrderBy)}
	case WatchLogDescriptorsRequest_FieldPathSelectorResumeToken:
		return &WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchLogDescriptorsRequest_FieldPathSelectorFilter:
		return &WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.Filter)}
	case WatchLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return &WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.LogDescriptor_FieldMask)}
	case WatchLogDescriptorsRequest_FieldPathSelectorView:
		return &WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchLogDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchLogDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchLogDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchLogDescriptorsRequest_FieldPathValue allows storing values for WatchLogDescriptorsRequest fields according to their type
type WatchLogDescriptorsRequest_FieldPathValue interface {
	WatchLogDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchLogDescriptorsRequest)
	CompareWith(*WatchLogDescriptorsRequest) (cmp int, comparable bool)
}

func ParseWatchLogDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (WatchLogDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseWatchLogDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchLogDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchLogDescriptorsRequest_FieldPathValue), nil
}

func MustParseWatchLogDescriptorsRequest_FieldPathValue(pathStr, valueStr string) WatchLogDescriptorsRequest_FieldPathValue {
	fpv, err := ParseWatchLogDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchLogDescriptorsRequest_FieldTerminalPathValue struct {
	WatchLogDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchLogDescriptorsRequest_FieldPathValue = (*WatchLogDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchLogDescriptorsRequest' as interface{}
func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) AsParentValue() (*log_descriptor.ParentReference, bool) {
	res, ok := fpv.value.(*log_descriptor.ParentReference)
	return res, ok
}
func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) AsPageTokenValue() (*log_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*log_descriptor.PagerCursor)
	return res, ok
}
func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) AsOrderByValue() (*log_descriptor.OrderBy, bool) {
	res, ok := fpv.value.(*log_descriptor.OrderBy)
	return res, ok
}
func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) AsFilterValue() (*log_descriptor.Filter, bool) {
	res, ok := fpv.value.(*log_descriptor.Filter)
	return res, ok
}
func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*log_descriptor.LogDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*log_descriptor.LogDescriptor_FieldMask)
	return res, ok
}
func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchLogDescriptorsRequest
func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) SetTo(target **WatchLogDescriptorsRequest) {
	if *target == nil {
		*target = new(WatchLogDescriptorsRequest)
	}
	switch fpv.selector {
	case WatchLogDescriptorsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchLogDescriptorsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*log_descriptor.ParentReference)
	case WatchLogDescriptorsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchLogDescriptorsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*log_descriptor.PagerCursor)
	case WatchLogDescriptorsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*log_descriptor.OrderBy)
	case WatchLogDescriptorsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchLogDescriptorsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*log_descriptor.Filter)
	case WatchLogDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*log_descriptor.LogDescriptor_FieldMask)
	case WatchLogDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchLogDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchLogDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchLogDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'WatchLogDescriptorsRequest'.
func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *WatchLogDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case WatchLogDescriptorsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchLogDescriptorsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*log_descriptor.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchLogDescriptorsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchLogDescriptorsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchLogDescriptorsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchLogDescriptorsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchLogDescriptorsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchLogDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchLogDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchLogDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchLogDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchLogDescriptorsRequest))
}

// WatchLogDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchLogDescriptorsRequest according to their type
// Present only for array (repeated) types.
type WatchLogDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchLogDescriptorsRequest_FieldPath
	ContainsValue(*WatchLogDescriptorsRequest) bool
}

// ParseWatchLogDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchLogDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchLogDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchLogDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchLogDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchLogDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchLogDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchLogDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchLogDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchLogDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	WatchLogDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchLogDescriptorsRequest_FieldPathArrayItemValue = (*WatchLogDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchLogDescriptorsRequest as interface{}
func (fpaiv *WatchLogDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchLogDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchLogDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchLogDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchLogDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchLogDescriptorsRequest'
func (fpaiv *WatchLogDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchLogDescriptorsRequest) bool {
	slice := fpaiv.WatchLogDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchLogDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for WatchLogDescriptorsRequest fields according to their type
type WatchLogDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchLogDescriptorsRequest_FieldPath
}

func ParseWatchLogDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchLogDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchLogDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchLogDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchLogDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchLogDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchLogDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchLogDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	WatchLogDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchLogDescriptorsRequest_FieldPathArrayOfValues = (*WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchLogDescriptorsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchLogDescriptorsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*log_descriptor.ParentReference) {
			values = append(values, v)
		}
	case WatchLogDescriptorsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchLogDescriptorsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*log_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case WatchLogDescriptorsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*log_descriptor.OrderBy) {
			values = append(values, v)
		}
	case WatchLogDescriptorsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchLogDescriptorsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*log_descriptor.Filter) {
			values = append(values, v)
		}
	case WatchLogDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*log_descriptor.LogDescriptor_FieldMask) {
			values = append(values, v)
		}
	case WatchLogDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchLogDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*log_descriptor.ParentReference, bool) {
	res, ok := fpaov.values.([]*log_descriptor.ParentReference)
	return res, ok
}
func (fpaov *WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*log_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*log_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*log_descriptor.OrderBy, bool) {
	res, ok := fpaov.values.([]*log_descriptor.OrderBy)
	return res, ok
}
func (fpaov *WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*log_descriptor.Filter, bool) {
	res, ok := fpaov.values.([]*log_descriptor.Filter)
	return res, ok
}
func (fpaov *WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*log_descriptor.LogDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*log_descriptor.LogDescriptor_FieldMask)
	return res, ok
}
func (fpaov *WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchLogDescriptorsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchLogDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchLogDescriptorsResponse_FieldPathSelector
	Get(source *WatchLogDescriptorsResponse) []interface{}
	GetSingle(source *WatchLogDescriptorsResponse) (interface{}, bool)
	ClearValue(item *WatchLogDescriptorsResponse)

	// Those methods build corresponding WatchLogDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchLogDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchLogDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchLogDescriptorsResponse_FieldPathArrayItemValue
}

type WatchLogDescriptorsResponse_FieldPathSelector int32

const (
	WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges WatchLogDescriptorsResponse_FieldPathSelector = 0
	WatchLogDescriptorsResponse_FieldPathSelectorIsCurrent            WatchLogDescriptorsResponse_FieldPathSelector = 1
	WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange      WatchLogDescriptorsResponse_FieldPathSelector = 2
	WatchLogDescriptorsResponse_FieldPathSelectorResumeToken          WatchLogDescriptorsResponse_FieldPathSelector = 3
	WatchLogDescriptorsResponse_FieldPathSelectorSnapshotSize         WatchLogDescriptorsResponse_FieldPathSelector = 4
	WatchLogDescriptorsResponse_FieldPathSelectorIsSoftReset          WatchLogDescriptorsResponse_FieldPathSelector = 5
	WatchLogDescriptorsResponse_FieldPathSelectorIsHardReset          WatchLogDescriptorsResponse_FieldPathSelector = 6
)

func (s WatchLogDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges:
		return "log_descriptor_changes"
	case WatchLogDescriptorsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchLogDescriptorsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchLogDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchLogDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchLogDescriptorsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", s))
	}
}

func BuildWatchLogDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchLogDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchLogDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "log_descriptor_changes", "logDescriptorChanges", "log-descriptor-changes":
			return &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchLogDescriptorsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchLogDescriptorsResponse_FieldSubPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchLogDescriptorsResponse", fp)
}

func ParseWatchLogDescriptorsResponse_FieldPath(rawField string) (WatchLogDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchLogDescriptorsResponse_FieldPath(fp)
}

func MustParseWatchLogDescriptorsResponse_FieldPath(rawField string) WatchLogDescriptorsResponse_FieldPath {
	fp, err := ParseWatchLogDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchLogDescriptorsResponse_FieldTerminalPath struct {
	selector WatchLogDescriptorsResponse_FieldPathSelector
}

var _ WatchLogDescriptorsResponse_FieldPath = (*WatchLogDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) Selector() WatchLogDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchLogDescriptorsResponse
func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) Get(source *WatchLogDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges:
			for _, value := range source.GetLogDescriptorChanges() {
				values = append(values, value)
			}
		case WatchLogDescriptorsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchLogDescriptorsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchLogDescriptorsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchLogDescriptorsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchLogDescriptorsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchLogDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchLogDescriptorsResponse
func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) GetSingle(source *WatchLogDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges:
		res := source.GetLogDescriptorChanges()
		return res, res != nil
	case WatchLogDescriptorsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchLogDescriptorsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchLogDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchLogDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchLogDescriptorsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchLogDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges:
		return ([]*log_descriptor.LogDescriptorChange)(nil)
	case WatchLogDescriptorsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchLogDescriptorsResponse_PageTokenChange)(nil)
	case WatchLogDescriptorsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchLogDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchLogDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchLogDescriptorsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) ClearValue(item *WatchLogDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges:
			item.LogDescriptorChanges = nil
		case WatchLogDescriptorsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchLogDescriptorsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchLogDescriptorsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchLogDescriptorsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchLogDescriptorsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchLogDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges ||
		fp.selector == WatchLogDescriptorsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchLogDescriptorsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchLogDescriptorsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchLogDescriptorsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchLogDescriptorsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchLogDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges:
		return &WatchLogDescriptorsResponse_FieldTerminalPathValue{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*log_descriptor.LogDescriptorChange)}
	case WatchLogDescriptorsResponse_FieldPathSelectorIsCurrent:
		return &WatchLogDescriptorsResponse_FieldTerminalPathValue{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return &WatchLogDescriptorsResponse_FieldTerminalPathValue{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*WatchLogDescriptorsResponse_PageTokenChange)}
	case WatchLogDescriptorsResponse_FieldPathSelectorResumeToken:
		return &WatchLogDescriptorsResponse_FieldTerminalPathValue{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchLogDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return &WatchLogDescriptorsResponse_FieldTerminalPathValue{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchLogDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return &WatchLogDescriptorsResponse_FieldTerminalPathValue{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchLogDescriptorsResponse_FieldPathSelectorIsHardReset:
		return &WatchLogDescriptorsResponse_FieldTerminalPathValue{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchLogDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchLogDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges:
		return &WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*log_descriptor.LogDescriptorChange)}
	case WatchLogDescriptorsResponse_FieldPathSelectorIsCurrent:
		return &WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return &WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*WatchLogDescriptorsResponse_PageTokenChange)}
	case WatchLogDescriptorsResponse_FieldPathSelectorResumeToken:
		return &WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchLogDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return &WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchLogDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return &WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchLogDescriptorsResponse_FieldPathSelectorIsHardReset:
		return &WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchLogDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges:
		return &WatchLogDescriptorsResponse_FieldTerminalPathArrayItemValue{WatchLogDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*log_descriptor.LogDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchLogDescriptorsResponse_FieldSubPath struct {
	selector WatchLogDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchLogDescriptorsResponse_FieldPath = (*WatchLogDescriptorsResponse_FieldSubPath)(nil)

func (fps *WatchLogDescriptorsResponse_FieldSubPath) Selector() WatchLogDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchLogDescriptorsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchLogDescriptorsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchLogDescriptorsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchLogDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchLogDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchLogDescriptorsResponse
func (fps *WatchLogDescriptorsResponse_FieldSubPath) Get(source *WatchLogDescriptorsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchLogDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchLogDescriptorsResponse))
}

// GetSingle returns value of selected field from source WatchLogDescriptorsResponse
func (fps *WatchLogDescriptorsResponse_FieldSubPath) GetSingle(source *WatchLogDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *WatchLogDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchLogDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchLogDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchLogDescriptorsResponse_FieldSubPath) ClearValue(item *WatchLogDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchLogDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchLogDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchLogDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchLogDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) WatchLogDescriptorsResponse_FieldPathValue {
	return &WatchLogDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchLogDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchLogDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchLogDescriptorsResponse_FieldPathArrayOfValues {
	return &WatchLogDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchLogDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchLogDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchLogDescriptorsResponse_FieldPathArrayItemValue {
	return &WatchLogDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchLogDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchLogDescriptorsResponse_FieldPathValue allows storing values for WatchLogDescriptorsResponse fields according to their type
type WatchLogDescriptorsResponse_FieldPathValue interface {
	WatchLogDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchLogDescriptorsResponse)
	CompareWith(*WatchLogDescriptorsResponse) (cmp int, comparable bool)
}

func ParseWatchLogDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (WatchLogDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseWatchLogDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchLogDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchLogDescriptorsResponse_FieldPathValue), nil
}

func MustParseWatchLogDescriptorsResponse_FieldPathValue(pathStr, valueStr string) WatchLogDescriptorsResponse_FieldPathValue {
	fpv, err := ParseWatchLogDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchLogDescriptorsResponse_FieldTerminalPathValue struct {
	WatchLogDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchLogDescriptorsResponse_FieldPathValue = (*WatchLogDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchLogDescriptorsResponse' as interface{}
func (fpv *WatchLogDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchLogDescriptorsResponse_FieldTerminalPathValue) AsLogDescriptorChangesValue() ([]*log_descriptor.LogDescriptorChange, bool) {
	res, ok := fpv.value.([]*log_descriptor.LogDescriptorChange)
	return res, ok
}
func (fpv *WatchLogDescriptorsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchLogDescriptorsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchLogDescriptorsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchLogDescriptorsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchLogDescriptorsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchLogDescriptorsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchLogDescriptorsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchLogDescriptorsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchLogDescriptorsResponse
func (fpv *WatchLogDescriptorsResponse_FieldTerminalPathValue) SetTo(target **WatchLogDescriptorsResponse) {
	if *target == nil {
		*target = new(WatchLogDescriptorsResponse)
	}
	switch fpv.selector {
	case WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges:
		(*target).LogDescriptorChanges = fpv.value.([]*log_descriptor.LogDescriptorChange)
	case WatchLogDescriptorsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchLogDescriptorsResponse_PageTokenChange)
	case WatchLogDescriptorsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchLogDescriptorsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchLogDescriptorsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchLogDescriptorsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchLogDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchLogDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchLogDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'WatchLogDescriptorsResponse'.
func (fpv *WatchLogDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *WatchLogDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges:
		return 0, false
	case WatchLogDescriptorsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchLogDescriptorsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchLogDescriptorsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchLogDescriptorsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchLogDescriptorsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchLogDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchLogDescriptorsResponse))
}

type WatchLogDescriptorsResponse_FieldSubPathValue struct {
	WatchLogDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchLogDescriptorsResponse_FieldPathValue = (*WatchLogDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchLogDescriptorsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchLogDescriptorsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchLogDescriptorsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchLogDescriptorsResponse_FieldSubPathValue) SetTo(target **WatchLogDescriptorsResponse) {
	if *target == nil {
		*target = new(WatchLogDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchLogDescriptorsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchLogDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchLogDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchLogDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchLogDescriptorsResponse_FieldSubPathValue) CompareWith(source *WatchLogDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchLogDescriptorsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchLogDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchLogDescriptorsResponse))
}

// WatchLogDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchLogDescriptorsResponse according to their type
// Present only for array (repeated) types.
type WatchLogDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchLogDescriptorsResponse_FieldPath
	ContainsValue(*WatchLogDescriptorsResponse) bool
}

// ParseWatchLogDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchLogDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchLogDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchLogDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchLogDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchLogDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchLogDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchLogDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchLogDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchLogDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	WatchLogDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchLogDescriptorsResponse_FieldPathArrayItemValue = (*WatchLogDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchLogDescriptorsResponse as interface{}
func (fpaiv *WatchLogDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchLogDescriptorsResponse_FieldTerminalPathArrayItemValue) AsLogDescriptorChangesItemValue() (*log_descriptor.LogDescriptorChange, bool) {
	res, ok := fpaiv.value.(*log_descriptor.LogDescriptorChange)
	return res, ok
}

func (fpaiv *WatchLogDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchLogDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchLogDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchLogDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchLogDescriptorsResponse'
func (fpaiv *WatchLogDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchLogDescriptorsResponse) bool {
	slice := fpaiv.WatchLogDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchLogDescriptorsResponse_FieldSubPathArrayItemValue struct {
	WatchLogDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchLogDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchLogDescriptorsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchLogDescriptorsResponse'
func (fpaivs *WatchLogDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchLogDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// WatchLogDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for WatchLogDescriptorsResponse fields according to their type
type WatchLogDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchLogDescriptorsResponse_FieldPath
}

func ParseWatchLogDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchLogDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchLogDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchLogDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchLogDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchLogDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchLogDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchLogDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	WatchLogDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchLogDescriptorsResponse_FieldPathArrayOfValues = (*WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges:
		for _, v := range fpaov.values.([][]*log_descriptor.LogDescriptorChange) {
			values = append(values, v)
		}
	case WatchLogDescriptorsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchLogDescriptorsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchLogDescriptorsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchLogDescriptorsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchLogDescriptorsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchLogDescriptorsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues) AsLogDescriptorChangesArrayOfValues() ([][]*log_descriptor.LogDescriptorChange, bool) {
	res, ok := fpaov.values.([][]*log_descriptor.LogDescriptorChange)
	return res, ok
}
func (fpaov *WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchLogDescriptorsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchLogDescriptorsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchLogDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchLogDescriptorsResponse_FieldSubPathArrayOfValues struct {
	WatchLogDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchLogDescriptorsResponse_FieldPathArrayOfValues = (*WatchLogDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchLogDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchLogDescriptorsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchLogDescriptorsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchLogDescriptorsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchLogDescriptorsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchLogDescriptorsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchLogDescriptorsResponse_PageTokenChange)

	// Those methods build corresponding WatchLogDescriptorsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchLogDescriptorsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchLogDescriptorsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchLogDescriptorsResponsePageTokenChange_FieldPathSelector = 0
	WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchLogDescriptorsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchLogDescriptorsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchLogDescriptorsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchLogDescriptorsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchLogDescriptorsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchLogDescriptorsResponse_PageTokenChange", fp)
}

func ParseWatchLogDescriptorsResponsePageTokenChange_FieldPath(rawField string) (WatchLogDescriptorsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchLogDescriptorsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchLogDescriptorsResponsePageTokenChange_FieldPath(rawField string) WatchLogDescriptorsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchLogDescriptorsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchLogDescriptorsResponsePageTokenChange_FieldPathSelector
}

var _ WatchLogDescriptorsResponsePageTokenChange_FieldPath = (*WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) Selector() WatchLogDescriptorsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchLogDescriptorsResponse_PageTokenChange
func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchLogDescriptorsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchLogDescriptorsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchLogDescriptorsResponse_PageTokenChange
func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchLogDescriptorsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchLogDescriptorsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*log_descriptor.PagerCursor)(nil)
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*log_descriptor.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchLogDescriptorsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchLogDescriptorsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchLogDescriptorsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathValue{WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*log_descriptor.PagerCursor)}
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathValue{WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*log_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*log_descriptor.PagerCursor)}
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*log_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchLogDescriptorsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchLogDescriptorsResponsePageTokenChange_FieldPathValue interface {
	WatchLogDescriptorsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchLogDescriptorsResponse_PageTokenChange)
	CompareWith(*WatchLogDescriptorsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchLogDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchLogDescriptorsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchLogDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchLogDescriptorsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchLogDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchLogDescriptorsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchLogDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchLogDescriptorsResponsePageTokenChange_FieldPathValue = (*WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*log_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*log_descriptor.PagerCursor)
	return res, ok
}
func (fpv *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*log_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*log_descriptor.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchLogDescriptorsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchLogDescriptorsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*log_descriptor.PagerCursor)
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*log_descriptor.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchLogDescriptorsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchLogDescriptorsResponse_PageTokenChange'.
func (fpv *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchLogDescriptorsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchLogDescriptorsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchLogDescriptorsResponse_PageTokenChange))
}

// WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchLogDescriptorsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchLogDescriptorsResponse_PageTokenChange) bool
}

// ParseWatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchLogDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchLogDescriptorsResponse_PageTokenChange as interface{}
func (fpaiv *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchLogDescriptorsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchLogDescriptorsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchLogDescriptorsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchLogDescriptorsResponsePageTokenChange_FieldPath
}

func ParseWatchLogDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchLogDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchLogDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchLogDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchLogDescriptorsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*log_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*log_descriptor.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*log_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*log_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*log_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*log_descriptor.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateLogDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateLogDescriptorRequest_FieldPathSelector
	Get(source *CreateLogDescriptorRequest) []interface{}
	GetSingle(source *CreateLogDescriptorRequest) (interface{}, bool)
	ClearValue(item *CreateLogDescriptorRequest)

	// Those methods build corresponding CreateLogDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateLogDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateLogDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateLogDescriptorRequest_FieldPathArrayItemValue
}

type CreateLogDescriptorRequest_FieldPathSelector int32

const (
	CreateLogDescriptorRequest_FieldPathSelectorParent        CreateLogDescriptorRequest_FieldPathSelector = 0
	CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor CreateLogDescriptorRequest_FieldPathSelector = 1
)

func (s CreateLogDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case CreateLogDescriptorRequest_FieldPathSelectorParent:
		return "parent"
	case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		return "log_descriptor"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", s))
	}
}

func BuildCreateLogDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateLogDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateLogDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateLogDescriptorRequest_FieldTerminalPath{selector: CreateLogDescriptorRequest_FieldPathSelectorParent}, nil
		case "log_descriptor", "logDescriptor", "log-descriptor":
			return &CreateLogDescriptorRequest_FieldTerminalPath{selector: CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor}, nil
		}
	} else {
		switch fp[0] {
		case "log_descriptor", "logDescriptor", "log-descriptor":
			if subpath, err := log_descriptor.BuildLogDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateLogDescriptorRequest_FieldSubPath{selector: CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateLogDescriptorRequest", fp)
}

func ParseCreateLogDescriptorRequest_FieldPath(rawField string) (CreateLogDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateLogDescriptorRequest_FieldPath(fp)
}

func MustParseCreateLogDescriptorRequest_FieldPath(rawField string) CreateLogDescriptorRequest_FieldPath {
	fp, err := ParseCreateLogDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateLogDescriptorRequest_FieldTerminalPath struct {
	selector CreateLogDescriptorRequest_FieldPathSelector
}

var _ CreateLogDescriptorRequest_FieldPath = (*CreateLogDescriptorRequest_FieldTerminalPath)(nil)

func (fp *CreateLogDescriptorRequest_FieldTerminalPath) Selector() CreateLogDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateLogDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateLogDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateLogDescriptorRequest
func (fp *CreateLogDescriptorRequest_FieldTerminalPath) Get(source *CreateLogDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateLogDescriptorRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
			if source.LogDescriptor != nil {
				values = append(values, source.LogDescriptor)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateLogDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateLogDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source CreateLogDescriptorRequest
func (fp *CreateLogDescriptorRequest_FieldTerminalPath) GetSingle(source *CreateLogDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateLogDescriptorRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		res := source.GetLogDescriptor()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateLogDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateLogDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateLogDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateLogDescriptorRequest_FieldPathSelectorParent:
		return (*log_descriptor.ParentReference)(nil)
	case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		return (*log_descriptor.LogDescriptor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateLogDescriptorRequest_FieldTerminalPath) ClearValue(item *CreateLogDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case CreateLogDescriptorRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
			item.LogDescriptor = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateLogDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateLogDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateLogDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateLogDescriptorRequest_FieldPathSelectorParent
}

func (fp *CreateLogDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) CreateLogDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case CreateLogDescriptorRequest_FieldPathSelectorParent:
		return &CreateLogDescriptorRequest_FieldTerminalPathValue{CreateLogDescriptorRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.ParentReference)}
	case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		return &CreateLogDescriptorRequest_FieldTerminalPathValue{CreateLogDescriptorRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.LogDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateLogDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateLogDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateLogDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &CreateLogDescriptorRequest_FieldTerminalPathArrayOfValues{CreateLogDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateLogDescriptorRequest_FieldPathSelectorParent:
		return &CreateLogDescriptorRequest_FieldTerminalPathArrayOfValues{CreateLogDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.ParentReference)}
	case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		return &CreateLogDescriptorRequest_FieldTerminalPathArrayOfValues{CreateLogDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.LogDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateLogDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateLogDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateLogDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateLogDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateLogDescriptorRequest_FieldSubPath struct {
	selector CreateLogDescriptorRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateLogDescriptorRequest_FieldPath = (*CreateLogDescriptorRequest_FieldSubPath)(nil)

func (fps *CreateLogDescriptorRequest_FieldSubPath) Selector() CreateLogDescriptorRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateLogDescriptorRequest_FieldSubPath) AsLogDescriptorSubPath() (log_descriptor.LogDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(log_descriptor.LogDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateLogDescriptorRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateLogDescriptorRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateLogDescriptorRequest
func (fps *CreateLogDescriptorRequest_FieldSubPath) Get(source *CreateLogDescriptorRequest) (values []interface{}) {
	if asLogDescriptorFieldPath, ok := fps.AsLogDescriptorSubPath(); ok {
		values = append(values, asLogDescriptorFieldPath.Get(source.GetLogDescriptor())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateLogDescriptorRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateLogDescriptorRequest))
}

// GetSingle returns value of selected field from source CreateLogDescriptorRequest
func (fps *CreateLogDescriptorRequest_FieldSubPath) GetSingle(source *CreateLogDescriptorRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		if source.GetLogDescriptor() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLogDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fps.selector))
	}
}

func (fps *CreateLogDescriptorRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateLogDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateLogDescriptorRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateLogDescriptorRequest_FieldSubPath) ClearValue(item *CreateLogDescriptorRequest) {
	if item != nil {
		switch fps.selector {
		case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
			fps.subPath.ClearValueRaw(item.LogDescriptor)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateLogDescriptorRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateLogDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateLogDescriptorRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateLogDescriptorRequest_FieldSubPath) WithIValue(value interface{}) CreateLogDescriptorRequest_FieldPathValue {
	return &CreateLogDescriptorRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateLogDescriptorRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateLogDescriptorRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateLogDescriptorRequest_FieldPathArrayOfValues {
	return &CreateLogDescriptorRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateLogDescriptorRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateLogDescriptorRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateLogDescriptorRequest_FieldPathArrayItemValue {
	return &CreateLogDescriptorRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateLogDescriptorRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateLogDescriptorRequest_FieldPathValue allows storing values for CreateLogDescriptorRequest fields according to their type
type CreateLogDescriptorRequest_FieldPathValue interface {
	CreateLogDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateLogDescriptorRequest)
	CompareWith(*CreateLogDescriptorRequest) (cmp int, comparable bool)
}

func ParseCreateLogDescriptorRequest_FieldPathValue(pathStr, valueStr string) (CreateLogDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseCreateLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateLogDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateLogDescriptorRequest_FieldPathValue), nil
}

func MustParseCreateLogDescriptorRequest_FieldPathValue(pathStr, valueStr string) CreateLogDescriptorRequest_FieldPathValue {
	fpv, err := ParseCreateLogDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateLogDescriptorRequest_FieldTerminalPathValue struct {
	CreateLogDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ CreateLogDescriptorRequest_FieldPathValue = (*CreateLogDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateLogDescriptorRequest' as interface{}
func (fpv *CreateLogDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateLogDescriptorRequest_FieldTerminalPathValue) AsParentValue() (*log_descriptor.ParentReference, bool) {
	res, ok := fpv.value.(*log_descriptor.ParentReference)
	return res, ok
}
func (fpv *CreateLogDescriptorRequest_FieldTerminalPathValue) AsLogDescriptorValue() (*log_descriptor.LogDescriptor, bool) {
	res, ok := fpv.value.(*log_descriptor.LogDescriptor)
	return res, ok
}

// SetTo stores value for selected field for object CreateLogDescriptorRequest
func (fpv *CreateLogDescriptorRequest_FieldTerminalPathValue) SetTo(target **CreateLogDescriptorRequest) {
	if *target == nil {
		*target = new(CreateLogDescriptorRequest)
	}
	switch fpv.selector {
	case CreateLogDescriptorRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*log_descriptor.ParentReference)
	case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		(*target).LogDescriptor = fpv.value.(*log_descriptor.LogDescriptor)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *CreateLogDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateLogDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateLogDescriptorRequest_FieldTerminalPathValue' with the value under path in 'CreateLogDescriptorRequest'.
func (fpv *CreateLogDescriptorRequest_FieldTerminalPathValue) CompareWith(source *CreateLogDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case CreateLogDescriptorRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*log_descriptor.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *CreateLogDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateLogDescriptorRequest))
}

type CreateLogDescriptorRequest_FieldSubPathValue struct {
	CreateLogDescriptorRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateLogDescriptorRequest_FieldPathValue = (*CreateLogDescriptorRequest_FieldSubPathValue)(nil)

func (fpvs *CreateLogDescriptorRequest_FieldSubPathValue) AsLogDescriptorPathValue() (log_descriptor.LogDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(log_descriptor.LogDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *CreateLogDescriptorRequest_FieldSubPathValue) SetTo(target **CreateLogDescriptorRequest) {
	if *target == nil {
		*target = new(CreateLogDescriptorRequest)
	}
	switch fpvs.Selector() {
	case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		fpvs.subPathValue.(log_descriptor.LogDescriptor_FieldPathValue).SetTo(&(*target).LogDescriptor)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateLogDescriptorRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateLogDescriptorRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateLogDescriptorRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateLogDescriptorRequest_FieldSubPathValue) CompareWith(source *CreateLogDescriptorRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		return fpvs.subPathValue.(log_descriptor.LogDescriptor_FieldPathValue).CompareWith(source.GetLogDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateLogDescriptorRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateLogDescriptorRequest))
}

// CreateLogDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateLogDescriptorRequest according to their type
// Present only for array (repeated) types.
type CreateLogDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateLogDescriptorRequest_FieldPath
	ContainsValue(*CreateLogDescriptorRequest) bool
}

// ParseCreateLogDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateLogDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateLogDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateLogDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateLogDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateLogDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	CreateLogDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ CreateLogDescriptorRequest_FieldPathArrayItemValue = (*CreateLogDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateLogDescriptorRequest as interface{}
func (fpaiv *CreateLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateLogDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateLogDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateLogDescriptorRequest'
func (fpaiv *CreateLogDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateLogDescriptorRequest) bool {
	slice := fpaiv.CreateLogDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateLogDescriptorRequest_FieldSubPathArrayItemValue struct {
	CreateLogDescriptorRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateLogDescriptorRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateLogDescriptorRequest_FieldSubPathArrayItemValue) AsLogDescriptorPathItemValue() (log_descriptor.LogDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(log_descriptor.LogDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateLogDescriptorRequest'
func (fpaivs *CreateLogDescriptorRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateLogDescriptorRequest) bool {
	switch fpaivs.Selector() {
	case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		return fpaivs.subPathItemValue.(log_descriptor.LogDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetLogDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateLogDescriptorRequest: %d", fpaivs.Selector()))
	}
}

// CreateLogDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for CreateLogDescriptorRequest fields according to their type
type CreateLogDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateLogDescriptorRequest_FieldPath
}

func ParseCreateLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateLogDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateLogDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateLogDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateLogDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateLogDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	CreateLogDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ CreateLogDescriptorRequest_FieldPathArrayOfValues = (*CreateLogDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateLogDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateLogDescriptorRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*log_descriptor.ParentReference) {
			values = append(values, v)
		}
	case CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		for _, v := range fpaov.values.([]*log_descriptor.LogDescriptor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateLogDescriptorRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*log_descriptor.ParentReference, bool) {
	res, ok := fpaov.values.([]*log_descriptor.ParentReference)
	return res, ok
}
func (fpaov *CreateLogDescriptorRequest_FieldTerminalPathArrayOfValues) AsLogDescriptorArrayOfValues() ([]*log_descriptor.LogDescriptor, bool) {
	res, ok := fpaov.values.([]*log_descriptor.LogDescriptor)
	return res, ok
}

type CreateLogDescriptorRequest_FieldSubPathArrayOfValues struct {
	CreateLogDescriptorRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateLogDescriptorRequest_FieldPathArrayOfValues = (*CreateLogDescriptorRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateLogDescriptorRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateLogDescriptorRequest_FieldSubPathArrayOfValues) AsLogDescriptorPathArrayOfValues() (log_descriptor.LogDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(log_descriptor.LogDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateLogDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateLogDescriptorRequest_FieldPathSelector
	Get(source *UpdateLogDescriptorRequest) []interface{}
	GetSingle(source *UpdateLogDescriptorRequest) (interface{}, bool)
	ClearValue(item *UpdateLogDescriptorRequest)

	// Those methods build corresponding UpdateLogDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateLogDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateLogDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateLogDescriptorRequest_FieldPathArrayItemValue
}

type UpdateLogDescriptorRequest_FieldPathSelector int32

const (
	UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor UpdateLogDescriptorRequest_FieldPathSelector = 0
	UpdateLogDescriptorRequest_FieldPathSelectorUpdateMask    UpdateLogDescriptorRequest_FieldPathSelector = 1
	UpdateLogDescriptorRequest_FieldPathSelectorCas           UpdateLogDescriptorRequest_FieldPathSelector = 2
)

func (s UpdateLogDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		return "log_descriptor"
	case UpdateLogDescriptorRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateLogDescriptorRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", s))
	}
}

func BuildUpdateLogDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateLogDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateLogDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "log_descriptor", "logDescriptor", "log-descriptor":
			return &UpdateLogDescriptorRequest_FieldTerminalPath{selector: UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateLogDescriptorRequest_FieldTerminalPath{selector: UpdateLogDescriptorRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateLogDescriptorRequest_FieldTerminalPath{selector: UpdateLogDescriptorRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "log_descriptor", "logDescriptor", "log-descriptor":
			if subpath, err := log_descriptor.BuildLogDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateLogDescriptorRequest_FieldSubPath{selector: UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateLogDescriptorRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateLogDescriptorRequest_FieldSubPath{selector: UpdateLogDescriptorRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateLogDescriptorRequest", fp)
}

func ParseUpdateLogDescriptorRequest_FieldPath(rawField string) (UpdateLogDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateLogDescriptorRequest_FieldPath(fp)
}

func MustParseUpdateLogDescriptorRequest_FieldPath(rawField string) UpdateLogDescriptorRequest_FieldPath {
	fp, err := ParseUpdateLogDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateLogDescriptorRequest_FieldTerminalPath struct {
	selector UpdateLogDescriptorRequest_FieldPathSelector
}

var _ UpdateLogDescriptorRequest_FieldPath = (*UpdateLogDescriptorRequest_FieldTerminalPath)(nil)

func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) Selector() UpdateLogDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateLogDescriptorRequest
func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) Get(source *UpdateLogDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
			if source.LogDescriptor != nil {
				values = append(values, source.LogDescriptor)
			}
		case UpdateLogDescriptorRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateLogDescriptorRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateLogDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateLogDescriptorRequest
func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) GetSingle(source *UpdateLogDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		res := source.GetLogDescriptor()
		return res, res != nil
	case UpdateLogDescriptorRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateLogDescriptorRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateLogDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		return (*log_descriptor.LogDescriptor)(nil)
	case UpdateLogDescriptorRequest_FieldPathSelectorUpdateMask:
		return (*log_descriptor.LogDescriptor_FieldMask)(nil)
	case UpdateLogDescriptorRequest_FieldPathSelectorCas:
		return (*UpdateLogDescriptorRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) ClearValue(item *UpdateLogDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
			item.LogDescriptor = nil
		case UpdateLogDescriptorRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateLogDescriptorRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateLogDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateLogDescriptorRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateLogDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		return &UpdateLogDescriptorRequest_FieldTerminalPathValue{UpdateLogDescriptorRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.LogDescriptor)}
	case UpdateLogDescriptorRequest_FieldPathSelectorUpdateMask:
		return &UpdateLogDescriptorRequest_FieldTerminalPathValue{UpdateLogDescriptorRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.LogDescriptor_FieldMask)}
	case UpdateLogDescriptorRequest_FieldPathSelectorCas:
		return &UpdateLogDescriptorRequest_FieldTerminalPathValue{UpdateLogDescriptorRequest_FieldTerminalPath: *fp, value: value.(*UpdateLogDescriptorRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateLogDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &UpdateLogDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateLogDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		return &UpdateLogDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateLogDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.LogDescriptor)}
	case UpdateLogDescriptorRequest_FieldPathSelectorUpdateMask:
		return &UpdateLogDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateLogDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.LogDescriptor_FieldMask)}
	case UpdateLogDescriptorRequest_FieldPathSelectorCas:
		return &UpdateLogDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateLogDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*UpdateLogDescriptorRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateLogDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateLogDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateLogDescriptorRequest_FieldSubPath struct {
	selector UpdateLogDescriptorRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateLogDescriptorRequest_FieldPath = (*UpdateLogDescriptorRequest_FieldSubPath)(nil)

func (fps *UpdateLogDescriptorRequest_FieldSubPath) Selector() UpdateLogDescriptorRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateLogDescriptorRequest_FieldSubPath) AsLogDescriptorSubPath() (log_descriptor.LogDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(log_descriptor.LogDescriptor_FieldPath)
	return res, ok
}
func (fps *UpdateLogDescriptorRequest_FieldSubPath) AsCasSubPath() (UpdateLogDescriptorRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateLogDescriptorRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateLogDescriptorRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateLogDescriptorRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateLogDescriptorRequest
func (fps *UpdateLogDescriptorRequest_FieldSubPath) Get(source *UpdateLogDescriptorRequest) (values []interface{}) {
	if asLogDescriptorFieldPath, ok := fps.AsLogDescriptorSubPath(); ok {
		values = append(values, asLogDescriptorFieldPath.Get(source.GetLogDescriptor())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateLogDescriptorRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateLogDescriptorRequest))
}

// GetSingle returns value of selected field from source UpdateLogDescriptorRequest
func (fps *UpdateLogDescriptorRequest_FieldSubPath) GetSingle(source *UpdateLogDescriptorRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		if source.GetLogDescriptor() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLogDescriptor())
	case UpdateLogDescriptorRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fps.selector))
	}
}

func (fps *UpdateLogDescriptorRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateLogDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateLogDescriptorRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateLogDescriptorRequest_FieldSubPath) ClearValue(item *UpdateLogDescriptorRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
			fps.subPath.ClearValueRaw(item.LogDescriptor)
		case UpdateLogDescriptorRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateLogDescriptorRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateLogDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateLogDescriptorRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateLogDescriptorRequest_FieldSubPath) WithIValue(value interface{}) UpdateLogDescriptorRequest_FieldPathValue {
	return &UpdateLogDescriptorRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateLogDescriptorRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateLogDescriptorRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateLogDescriptorRequest_FieldPathArrayOfValues {
	return &UpdateLogDescriptorRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateLogDescriptorRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateLogDescriptorRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateLogDescriptorRequest_FieldPathArrayItemValue {
	return &UpdateLogDescriptorRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateLogDescriptorRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateLogDescriptorRequest_FieldPathValue allows storing values for UpdateLogDescriptorRequest fields according to their type
type UpdateLogDescriptorRequest_FieldPathValue interface {
	UpdateLogDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateLogDescriptorRequest)
	CompareWith(*UpdateLogDescriptorRequest) (cmp int, comparable bool)
}

func ParseUpdateLogDescriptorRequest_FieldPathValue(pathStr, valueStr string) (UpdateLogDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseUpdateLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateLogDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateLogDescriptorRequest_FieldPathValue), nil
}

func MustParseUpdateLogDescriptorRequest_FieldPathValue(pathStr, valueStr string) UpdateLogDescriptorRequest_FieldPathValue {
	fpv, err := ParseUpdateLogDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateLogDescriptorRequest_FieldTerminalPathValue struct {
	UpdateLogDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateLogDescriptorRequest_FieldPathValue = (*UpdateLogDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateLogDescriptorRequest' as interface{}
func (fpv *UpdateLogDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateLogDescriptorRequest_FieldTerminalPathValue) AsLogDescriptorValue() (*log_descriptor.LogDescriptor, bool) {
	res, ok := fpv.value.(*log_descriptor.LogDescriptor)
	return res, ok
}
func (fpv *UpdateLogDescriptorRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*log_descriptor.LogDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*log_descriptor.LogDescriptor_FieldMask)
	return res, ok
}
func (fpv *UpdateLogDescriptorRequest_FieldTerminalPathValue) AsCasValue() (*UpdateLogDescriptorRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateLogDescriptorRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateLogDescriptorRequest
func (fpv *UpdateLogDescriptorRequest_FieldTerminalPathValue) SetTo(target **UpdateLogDescriptorRequest) {
	if *target == nil {
		*target = new(UpdateLogDescriptorRequest)
	}
	switch fpv.selector {
	case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		(*target).LogDescriptor = fpv.value.(*log_descriptor.LogDescriptor)
	case UpdateLogDescriptorRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*log_descriptor.LogDescriptor_FieldMask)
	case UpdateLogDescriptorRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateLogDescriptorRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateLogDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateLogDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateLogDescriptorRequest_FieldTerminalPathValue' with the value under path in 'UpdateLogDescriptorRequest'.
func (fpv *UpdateLogDescriptorRequest_FieldTerminalPathValue) CompareWith(source *UpdateLogDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		return 0, false
	case UpdateLogDescriptorRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateLogDescriptorRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateLogDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateLogDescriptorRequest))
}

type UpdateLogDescriptorRequest_FieldSubPathValue struct {
	UpdateLogDescriptorRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateLogDescriptorRequest_FieldPathValue = (*UpdateLogDescriptorRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateLogDescriptorRequest_FieldSubPathValue) AsLogDescriptorPathValue() (log_descriptor.LogDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(log_descriptor.LogDescriptor_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateLogDescriptorRequest_FieldSubPathValue) AsCasPathValue() (UpdateLogDescriptorRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateLogDescriptorRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateLogDescriptorRequest_FieldSubPathValue) SetTo(target **UpdateLogDescriptorRequest) {
	if *target == nil {
		*target = new(UpdateLogDescriptorRequest)
	}
	switch fpvs.Selector() {
	case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		fpvs.subPathValue.(log_descriptor.LogDescriptor_FieldPathValue).SetTo(&(*target).LogDescriptor)
	case UpdateLogDescriptorRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateLogDescriptorRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateLogDescriptorRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateLogDescriptorRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateLogDescriptorRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateLogDescriptorRequest_FieldSubPathValue) CompareWith(source *UpdateLogDescriptorRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		return fpvs.subPathValue.(log_descriptor.LogDescriptor_FieldPathValue).CompareWith(source.GetLogDescriptor())
	case UpdateLogDescriptorRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateLogDescriptorRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateLogDescriptorRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateLogDescriptorRequest))
}

// UpdateLogDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateLogDescriptorRequest according to their type
// Present only for array (repeated) types.
type UpdateLogDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateLogDescriptorRequest_FieldPath
	ContainsValue(*UpdateLogDescriptorRequest) bool
}

// ParseUpdateLogDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateLogDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateLogDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateLogDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateLogDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateLogDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	UpdateLogDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateLogDescriptorRequest_FieldPathArrayItemValue = (*UpdateLogDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateLogDescriptorRequest as interface{}
func (fpaiv *UpdateLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateLogDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateLogDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateLogDescriptorRequest'
func (fpaiv *UpdateLogDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateLogDescriptorRequest) bool {
	slice := fpaiv.UpdateLogDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateLogDescriptorRequest_FieldSubPathArrayItemValue struct {
	UpdateLogDescriptorRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateLogDescriptorRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateLogDescriptorRequest_FieldSubPathArrayItemValue) AsLogDescriptorPathItemValue() (log_descriptor.LogDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(log_descriptor.LogDescriptor_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateLogDescriptorRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateLogDescriptorRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateLogDescriptorRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateLogDescriptorRequest'
func (fpaivs *UpdateLogDescriptorRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateLogDescriptorRequest) bool {
	switch fpaivs.Selector() {
	case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		return fpaivs.subPathItemValue.(log_descriptor.LogDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetLogDescriptor())
	case UpdateLogDescriptorRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateLogDescriptorRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest: %d", fpaivs.Selector()))
	}
}

// UpdateLogDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for UpdateLogDescriptorRequest fields according to their type
type UpdateLogDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateLogDescriptorRequest_FieldPath
}

func ParseUpdateLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateLogDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateLogDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateLogDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateLogDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateLogDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	UpdateLogDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateLogDescriptorRequest_FieldPathArrayOfValues = (*UpdateLogDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateLogDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor:
		for _, v := range fpaov.values.([]*log_descriptor.LogDescriptor) {
			values = append(values, v)
		}
	case UpdateLogDescriptorRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*log_descriptor.LogDescriptor_FieldMask) {
			values = append(values, v)
		}
	case UpdateLogDescriptorRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateLogDescriptorRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateLogDescriptorRequest_FieldTerminalPathArrayOfValues) AsLogDescriptorArrayOfValues() ([]*log_descriptor.LogDescriptor, bool) {
	res, ok := fpaov.values.([]*log_descriptor.LogDescriptor)
	return res, ok
}
func (fpaov *UpdateLogDescriptorRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*log_descriptor.LogDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*log_descriptor.LogDescriptor_FieldMask)
	return res, ok
}
func (fpaov *UpdateLogDescriptorRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateLogDescriptorRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateLogDescriptorRequest_CAS)
	return res, ok
}

type UpdateLogDescriptorRequest_FieldSubPathArrayOfValues struct {
	UpdateLogDescriptorRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateLogDescriptorRequest_FieldPathArrayOfValues = (*UpdateLogDescriptorRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateLogDescriptorRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateLogDescriptorRequest_FieldSubPathArrayOfValues) AsLogDescriptorPathArrayOfValues() (log_descriptor.LogDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(log_descriptor.LogDescriptor_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateLogDescriptorRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateLogDescriptorRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateLogDescriptorRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateLogDescriptorRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateLogDescriptorRequestCAS_FieldPathSelector
	Get(source *UpdateLogDescriptorRequest_CAS) []interface{}
	GetSingle(source *UpdateLogDescriptorRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateLogDescriptorRequest_CAS)

	// Those methods build corresponding UpdateLogDescriptorRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateLogDescriptorRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateLogDescriptorRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateLogDescriptorRequestCAS_FieldPathArrayItemValue
}

type UpdateLogDescriptorRequestCAS_FieldPathSelector int32

const (
	UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState UpdateLogDescriptorRequestCAS_FieldPathSelector = 0
	UpdateLogDescriptorRequestCAS_FieldPathSelectorFieldMask        UpdateLogDescriptorRequestCAS_FieldPathSelector = 1
)

func (s UpdateLogDescriptorRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", s))
	}
}

func BuildUpdateLogDescriptorRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateLogDescriptorRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateLogDescriptorRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateLogDescriptorRequestCAS_FieldTerminalPath{selector: UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateLogDescriptorRequestCAS_FieldTerminalPath{selector: UpdateLogDescriptorRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := log_descriptor.BuildLogDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateLogDescriptorRequestCAS_FieldSubPath{selector: UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateLogDescriptorRequest_CAS", fp)
}

func ParseUpdateLogDescriptorRequestCAS_FieldPath(rawField string) (UpdateLogDescriptorRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateLogDescriptorRequestCAS_FieldPath(fp)
}

func MustParseUpdateLogDescriptorRequestCAS_FieldPath(rawField string) UpdateLogDescriptorRequestCAS_FieldPath {
	fp, err := ParseUpdateLogDescriptorRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateLogDescriptorRequestCAS_FieldTerminalPath struct {
	selector UpdateLogDescriptorRequestCAS_FieldPathSelector
}

var _ UpdateLogDescriptorRequestCAS_FieldPath = (*UpdateLogDescriptorRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) Selector() UpdateLogDescriptorRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateLogDescriptorRequest_CAS
func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) Get(source *UpdateLogDescriptorRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateLogDescriptorRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateLogDescriptorRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateLogDescriptorRequest_CAS
func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) GetSingle(source *UpdateLogDescriptorRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateLogDescriptorRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return (*log_descriptor.LogDescriptor)(nil)
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return (*log_descriptor.LogDescriptor_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) ClearValue(item *UpdateLogDescriptorRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateLogDescriptorRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateLogDescriptorRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateLogDescriptorRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateLogDescriptorRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateLogDescriptorRequestCAS_FieldTerminalPathValue{UpdateLogDescriptorRequestCAS_FieldTerminalPath: *fp, value: value.(*log_descriptor.LogDescriptor)}
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateLogDescriptorRequestCAS_FieldTerminalPathValue{UpdateLogDescriptorRequestCAS_FieldTerminalPath: *fp, value: value.(*log_descriptor.LogDescriptor_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateLogDescriptorRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateLogDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateLogDescriptorRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateLogDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateLogDescriptorRequestCAS_FieldTerminalPath: *fp, values: values.([]*log_descriptor.LogDescriptor)}
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateLogDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateLogDescriptorRequestCAS_FieldTerminalPath: *fp, values: values.([]*log_descriptor.LogDescriptor_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateLogDescriptorRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateLogDescriptorRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateLogDescriptorRequestCAS_FieldSubPath struct {
	selector UpdateLogDescriptorRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateLogDescriptorRequestCAS_FieldPath = (*UpdateLogDescriptorRequestCAS_FieldSubPath)(nil)

func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) Selector() UpdateLogDescriptorRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) AsConditionalStateSubPath() (log_descriptor.LogDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(log_descriptor.LogDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateLogDescriptorRequest_CAS
func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) Get(source *UpdateLogDescriptorRequest_CAS) (values []interface{}) {
	if asLogDescriptorFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asLogDescriptorFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateLogDescriptorRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateLogDescriptorRequest_CAS
func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) GetSingle(source *UpdateLogDescriptorRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateLogDescriptorRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) ClearValue(item *UpdateLogDescriptorRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateLogDescriptorRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateLogDescriptorRequestCAS_FieldPathValue {
	return &UpdateLogDescriptorRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateLogDescriptorRequestCAS_FieldPathArrayOfValues {
	return &UpdateLogDescriptorRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateLogDescriptorRequestCAS_FieldPathArrayItemValue {
	return &UpdateLogDescriptorRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateLogDescriptorRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateLogDescriptorRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateLogDescriptorRequestCAS_FieldPathValue interface {
	UpdateLogDescriptorRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateLogDescriptorRequest_CAS)
	CompareWith(*UpdateLogDescriptorRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateLogDescriptorRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateLogDescriptorRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateLogDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateLogDescriptorRequestCAS_FieldPathValue), nil
}

func MustParseUpdateLogDescriptorRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateLogDescriptorRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateLogDescriptorRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateLogDescriptorRequestCAS_FieldTerminalPathValue struct {
	UpdateLogDescriptorRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateLogDescriptorRequestCAS_FieldPathValue = (*UpdateLogDescriptorRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateLogDescriptorRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateLogDescriptorRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*log_descriptor.LogDescriptor, bool) {
	res, ok := fpv.value.(*log_descriptor.LogDescriptor)
	return res, ok
}
func (fpv *UpdateLogDescriptorRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*log_descriptor.LogDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*log_descriptor.LogDescriptor_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateLogDescriptorRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateLogDescriptorRequest_CAS) {
	if *target == nil {
		*target = new(UpdateLogDescriptorRequest_CAS)
	}
	switch fpv.selector {
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*log_descriptor.LogDescriptor)
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*log_descriptor.LogDescriptor_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateLogDescriptorRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateLogDescriptorRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateLogDescriptorRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateLogDescriptorRequest_CAS'.
func (fpv *UpdateLogDescriptorRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateLogDescriptorRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateLogDescriptorRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateLogDescriptorRequest_CAS))
}

type UpdateLogDescriptorRequestCAS_FieldSubPathValue struct {
	UpdateLogDescriptorRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateLogDescriptorRequestCAS_FieldPathValue = (*UpdateLogDescriptorRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateLogDescriptorRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (log_descriptor.LogDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(log_descriptor.LogDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateLogDescriptorRequestCAS_FieldSubPathValue) SetTo(target **UpdateLogDescriptorRequest_CAS) {
	if *target == nil {
		*target = new(UpdateLogDescriptorRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(log_descriptor.LogDescriptor_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateLogDescriptorRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateLogDescriptorRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateLogDescriptorRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateLogDescriptorRequestCAS_FieldSubPathValue) CompareWith(source *UpdateLogDescriptorRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(log_descriptor.LogDescriptor_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateLogDescriptorRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateLogDescriptorRequest_CAS))
}

// UpdateLogDescriptorRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateLogDescriptorRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateLogDescriptorRequestCAS_FieldPath
	ContainsValue(*UpdateLogDescriptorRequest_CAS) bool
}

// ParseUpdateLogDescriptorRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateLogDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateLogDescriptorRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateLogDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateLogDescriptorRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateLogDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateLogDescriptorRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateLogDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateLogDescriptorRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateLogDescriptorRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateLogDescriptorRequestCAS_FieldPathArrayItemValue = (*UpdateLogDescriptorRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateLogDescriptorRequest_CAS as interface{}
func (fpaiv *UpdateLogDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateLogDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateLogDescriptorRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateLogDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateLogDescriptorRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateLogDescriptorRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateLogDescriptorRequest_CAS) bool {
	slice := fpaiv.UpdateLogDescriptorRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateLogDescriptorRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateLogDescriptorRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateLogDescriptorRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateLogDescriptorRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (log_descriptor.LogDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(log_descriptor.LogDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateLogDescriptorRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateLogDescriptorRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(log_descriptor.LogDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateLogDescriptorRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateLogDescriptorRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateLogDescriptorRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateLogDescriptorRequestCAS_FieldPath
}

func ParseUpdateLogDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateLogDescriptorRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateLogDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateLogDescriptorRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateLogDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateLogDescriptorRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateLogDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateLogDescriptorRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateLogDescriptorRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateLogDescriptorRequestCAS_FieldPathArrayOfValues = (*UpdateLogDescriptorRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateLogDescriptorRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*log_descriptor.LogDescriptor) {
			values = append(values, v)
		}
	case UpdateLogDescriptorRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*log_descriptor.LogDescriptor_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateLogDescriptorRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*log_descriptor.LogDescriptor, bool) {
	res, ok := fpaov.values.([]*log_descriptor.LogDescriptor)
	return res, ok
}
func (fpaov *UpdateLogDescriptorRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*log_descriptor.LogDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*log_descriptor.LogDescriptor_FieldMask)
	return res, ok
}

type UpdateLogDescriptorRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateLogDescriptorRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateLogDescriptorRequestCAS_FieldPathArrayOfValues = (*UpdateLogDescriptorRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateLogDescriptorRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateLogDescriptorRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (log_descriptor.LogDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(log_descriptor.LogDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteLogDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteLogDescriptorRequest_FieldPathSelector
	Get(source *DeleteLogDescriptorRequest) []interface{}
	GetSingle(source *DeleteLogDescriptorRequest) (interface{}, bool)
	ClearValue(item *DeleteLogDescriptorRequest)

	// Those methods build corresponding DeleteLogDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteLogDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteLogDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteLogDescriptorRequest_FieldPathArrayItemValue
}

type DeleteLogDescriptorRequest_FieldPathSelector int32

const (
	DeleteLogDescriptorRequest_FieldPathSelectorName DeleteLogDescriptorRequest_FieldPathSelector = 0
)

func (s DeleteLogDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteLogDescriptorRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteLogDescriptorRequest: %d", s))
	}
}

func BuildDeleteLogDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteLogDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteLogDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteLogDescriptorRequest_FieldTerminalPath{selector: DeleteLogDescriptorRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteLogDescriptorRequest", fp)
}

func ParseDeleteLogDescriptorRequest_FieldPath(rawField string) (DeleteLogDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteLogDescriptorRequest_FieldPath(fp)
}

func MustParseDeleteLogDescriptorRequest_FieldPath(rawField string) DeleteLogDescriptorRequest_FieldPath {
	fp, err := ParseDeleteLogDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteLogDescriptorRequest_FieldTerminalPath struct {
	selector DeleteLogDescriptorRequest_FieldPathSelector
}

var _ DeleteLogDescriptorRequest_FieldPath = (*DeleteLogDescriptorRequest_FieldTerminalPath)(nil)

func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) Selector() DeleteLogDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteLogDescriptorRequest
func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) Get(source *DeleteLogDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteLogDescriptorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteLogDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteLogDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteLogDescriptorRequest
func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) GetSingle(source *DeleteLogDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteLogDescriptorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteLogDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteLogDescriptorRequest_FieldPathSelectorName:
		return (*log_descriptor.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) ClearValue(item *DeleteLogDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteLogDescriptorRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteLogDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteLogDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteLogDescriptorRequest_FieldPathSelectorName
}

func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteLogDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case DeleteLogDescriptorRequest_FieldPathSelectorName:
		return &DeleteLogDescriptorRequest_FieldTerminalPathValue{DeleteLogDescriptorRequest_FieldTerminalPath: *fp, value: value.(*log_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteLogDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &DeleteLogDescriptorRequest_FieldTerminalPathArrayOfValues{DeleteLogDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteLogDescriptorRequest_FieldPathSelectorName:
		return &DeleteLogDescriptorRequest_FieldTerminalPathArrayOfValues{DeleteLogDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*log_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteLogDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteLogDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteLogDescriptorRequest: %d", fp.selector))
	}
}

func (fp *DeleteLogDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteLogDescriptorRequest_FieldPathValue allows storing values for DeleteLogDescriptorRequest fields according to their type
type DeleteLogDescriptorRequest_FieldPathValue interface {
	DeleteLogDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteLogDescriptorRequest)
	CompareWith(*DeleteLogDescriptorRequest) (cmp int, comparable bool)
}

func ParseDeleteLogDescriptorRequest_FieldPathValue(pathStr, valueStr string) (DeleteLogDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseDeleteLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteLogDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteLogDescriptorRequest_FieldPathValue), nil
}

func MustParseDeleteLogDescriptorRequest_FieldPathValue(pathStr, valueStr string) DeleteLogDescriptorRequest_FieldPathValue {
	fpv, err := ParseDeleteLogDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteLogDescriptorRequest_FieldTerminalPathValue struct {
	DeleteLogDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteLogDescriptorRequest_FieldPathValue = (*DeleteLogDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteLogDescriptorRequest' as interface{}
func (fpv *DeleteLogDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteLogDescriptorRequest_FieldTerminalPathValue) AsNameValue() (*log_descriptor.Reference, bool) {
	res, ok := fpv.value.(*log_descriptor.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteLogDescriptorRequest
func (fpv *DeleteLogDescriptorRequest_FieldTerminalPathValue) SetTo(target **DeleteLogDescriptorRequest) {
	if *target == nil {
		*target = new(DeleteLogDescriptorRequest)
	}
	switch fpv.selector {
	case DeleteLogDescriptorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*log_descriptor.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteLogDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteLogDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteLogDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteLogDescriptorRequest_FieldTerminalPathValue' with the value under path in 'DeleteLogDescriptorRequest'.
func (fpv *DeleteLogDescriptorRequest_FieldTerminalPathValue) CompareWith(source *DeleteLogDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case DeleteLogDescriptorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*log_descriptor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteLogDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteLogDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteLogDescriptorRequest))
}

// DeleteLogDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteLogDescriptorRequest according to their type
// Present only for array (repeated) types.
type DeleteLogDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteLogDescriptorRequest_FieldPath
	ContainsValue(*DeleteLogDescriptorRequest) bool
}

// ParseDeleteLogDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteLogDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteLogDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteLogDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteLogDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteLogDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteLogDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	DeleteLogDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteLogDescriptorRequest_FieldPathArrayItemValue = (*DeleteLogDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteLogDescriptorRequest as interface{}
func (fpaiv *DeleteLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteLogDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteLogDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteLogDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteLogDescriptorRequest'
func (fpaiv *DeleteLogDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteLogDescriptorRequest) bool {
	slice := fpaiv.DeleteLogDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteLogDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for DeleteLogDescriptorRequest fields according to their type
type DeleteLogDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteLogDescriptorRequest_FieldPath
}

func ParseDeleteLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteLogDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteLogDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteLogDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteLogDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteLogDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteLogDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteLogDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	DeleteLogDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteLogDescriptorRequest_FieldPathArrayOfValues = (*DeleteLogDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteLogDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteLogDescriptorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*log_descriptor.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteLogDescriptorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*log_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*log_descriptor.Reference)
	return res, ok
}
