// Code generated by protoc-gen-goten-client
// API: LogDescriptorService
// DO NOT EDIT!!!

package log_descriptor_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	log_descriptor "github.com/cloudwan/edgelq-sdk/logging/resources/v1alpha2/log_descriptor"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &log_descriptor.LogDescriptor{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogDescriptorServiceClient is the client API for LogDescriptorService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogDescriptorServiceClient interface {
	GetLogDescriptor(ctx context.Context, in *GetLogDescriptorRequest, opts ...grpc.CallOption) (*log_descriptor.LogDescriptor, error)
	BatchGetLogDescriptors(ctx context.Context, in *BatchGetLogDescriptorsRequest, opts ...grpc.CallOption) (*BatchGetLogDescriptorsResponse, error)
	ListLogDescriptors(ctx context.Context, in *ListLogDescriptorsRequest, opts ...grpc.CallOption) (*ListLogDescriptorsResponse, error)
	WatchLogDescriptor(ctx context.Context, in *WatchLogDescriptorRequest, opts ...grpc.CallOption) (WatchLogDescriptorClientStream, error)
	WatchLogDescriptors(ctx context.Context, in *WatchLogDescriptorsRequest, opts ...grpc.CallOption) (WatchLogDescriptorsClientStream, error)
	CreateLogDescriptor(ctx context.Context, in *CreateLogDescriptorRequest, opts ...grpc.CallOption) (*log_descriptor.LogDescriptor, error)
	UpdateLogDescriptor(ctx context.Context, in *UpdateLogDescriptorRequest, opts ...grpc.CallOption) (*log_descriptor.LogDescriptor, error)
	DeleteLogDescriptor(ctx context.Context, in *DeleteLogDescriptorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewLogDescriptorServiceClient(cc grpc.ClientConnInterface) LogDescriptorServiceClient {
	return &client{cc}
}

func (c *client) GetLogDescriptor(ctx context.Context, in *GetLogDescriptorRequest, opts ...grpc.CallOption) (*log_descriptor.LogDescriptor, error) {
	out := new(log_descriptor.LogDescriptor)
	err := c.cc.Invoke(ctx, "/ntt.logging.v1alpha2.LogDescriptorService/GetLogDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetLogDescriptors(ctx context.Context, in *BatchGetLogDescriptorsRequest, opts ...grpc.CallOption) (*BatchGetLogDescriptorsResponse, error) {
	out := new(BatchGetLogDescriptorsResponse)
	err := c.cc.Invoke(ctx, "/ntt.logging.v1alpha2.LogDescriptorService/BatchGetLogDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListLogDescriptors(ctx context.Context, in *ListLogDescriptorsRequest, opts ...grpc.CallOption) (*ListLogDescriptorsResponse, error) {
	out := new(ListLogDescriptorsResponse)
	err := c.cc.Invoke(ctx, "/ntt.logging.v1alpha2.LogDescriptorService/ListLogDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchLogDescriptor(ctx context.Context, in *WatchLogDescriptorRequest, opts ...grpc.CallOption) (WatchLogDescriptorClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchLogDescriptor",
			ServerStreams: true,
		},
		"/ntt.logging.v1alpha2.LogDescriptorService/WatchLogDescriptor", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchLogDescriptorWatchLogDescriptorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchLogDescriptorClientStream interface {
	Recv() (*WatchLogDescriptorResponse, error)
	grpc.ClientStream
}

type watchLogDescriptorWatchLogDescriptorClient struct {
	grpc.ClientStream
}

func (x *watchLogDescriptorWatchLogDescriptorClient) Recv() (*WatchLogDescriptorResponse, error) {
	m := new(WatchLogDescriptorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchLogDescriptors(ctx context.Context, in *WatchLogDescriptorsRequest, opts ...grpc.CallOption) (WatchLogDescriptorsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchLogDescriptors",
			ServerStreams: true,
		},
		"/ntt.logging.v1alpha2.LogDescriptorService/WatchLogDescriptors", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchLogDescriptorsWatchLogDescriptorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchLogDescriptorsClientStream interface {
	Recv() (*WatchLogDescriptorsResponse, error)
	grpc.ClientStream
}

type watchLogDescriptorsWatchLogDescriptorsClient struct {
	grpc.ClientStream
}

func (x *watchLogDescriptorsWatchLogDescriptorsClient) Recv() (*WatchLogDescriptorsResponse, error) {
	m := new(WatchLogDescriptorsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateLogDescriptor(ctx context.Context, in *CreateLogDescriptorRequest, opts ...grpc.CallOption) (*log_descriptor.LogDescriptor, error) {
	out := new(log_descriptor.LogDescriptor)
	err := c.cc.Invoke(ctx, "/ntt.logging.v1alpha2.LogDescriptorService/CreateLogDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateLogDescriptor(ctx context.Context, in *UpdateLogDescriptorRequest, opts ...grpc.CallOption) (*log_descriptor.LogDescriptor, error) {
	out := new(log_descriptor.LogDescriptor)
	err := c.cc.Invoke(ctx, "/ntt.logging.v1alpha2.LogDescriptorService/UpdateLogDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteLogDescriptor(ctx context.Context, in *DeleteLogDescriptorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.logging.v1alpha2.LogDescriptorService/DeleteLogDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
