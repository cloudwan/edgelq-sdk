// Code generated by protoc-gen-goten-object
// File: edgelq/logging/proto/v1alpha2/log_descriptor_service.proto
// DO NOT EDIT!!!

package log_descriptor_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	log_descriptor "github.com/cloudwan/edgelq-sdk/logging/resources/v1alpha2/log_descriptor"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &log_descriptor.LogDescriptor{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetLogDescriptorRequest) GotenObjectExt() {}

func (o *GetLogDescriptorRequest) MakeFullFieldMask() *GetLogDescriptorRequest_FieldMask {
	return FullGetLogDescriptorRequest_FieldMask()
}

func (o *GetLogDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetLogDescriptorRequest_FieldMask()
}

func (o *GetLogDescriptorRequest) MakeDiffFieldMask(other *GetLogDescriptorRequest) *GetLogDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &GetLogDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetLogDescriptorRequest_FieldMask()
	}

	res := &GetLogDescriptorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetLogDescriptorRequest_FieldTerminalPath{selector: GetLogDescriptorRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetLogDescriptorRequest_FieldTerminalPath{selector: GetLogDescriptorRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetLogDescriptorRequest_FieldTerminalPath{selector: GetLogDescriptorRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetLogDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetLogDescriptorRequest))
}

func (o *GetLogDescriptorRequest) Clone() *GetLogDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &GetLogDescriptorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &log_descriptor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*log_descriptor.LogDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *GetLogDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetLogDescriptorRequest) Merge(source *GetLogDescriptorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &log_descriptor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(log_descriptor.LogDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetLogDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetLogDescriptorRequest))
}

func (o *BatchGetLogDescriptorsRequest) GotenObjectExt() {}

func (o *BatchGetLogDescriptorsRequest) MakeFullFieldMask() *BatchGetLogDescriptorsRequest_FieldMask {
	return FullBatchGetLogDescriptorsRequest_FieldMask()
}

func (o *BatchGetLogDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetLogDescriptorsRequest_FieldMask()
}

func (o *BatchGetLogDescriptorsRequest) MakeDiffFieldMask(other *BatchGetLogDescriptorsRequest) *BatchGetLogDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetLogDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetLogDescriptorsRequest_FieldMask()
	}

	res := &BatchGetLogDescriptorsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetLogDescriptorsRequest_FieldTerminalPath{selector: BatchGetLogDescriptorsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetLogDescriptorsRequest_FieldTerminalPath{selector: BatchGetLogDescriptorsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetLogDescriptorsRequest_FieldTerminalPath{selector: BatchGetLogDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetLogDescriptorsRequest_FieldTerminalPath{selector: BatchGetLogDescriptorsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetLogDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetLogDescriptorsRequest))
}

func (o *BatchGetLogDescriptorsRequest) Clone() *BatchGetLogDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetLogDescriptorsRequest{}
	result.Names = make([]*log_descriptor.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &log_descriptor.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*log_descriptor.LogDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetLogDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetLogDescriptorsRequest) Merge(source *BatchGetLogDescriptorsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *log_descriptor.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &log_descriptor.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(log_descriptor.LogDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetLogDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetLogDescriptorsRequest))
}

func (o *BatchGetLogDescriptorsResponse) GotenObjectExt() {}

func (o *BatchGetLogDescriptorsResponse) MakeFullFieldMask() *BatchGetLogDescriptorsResponse_FieldMask {
	return FullBatchGetLogDescriptorsResponse_FieldMask()
}

func (o *BatchGetLogDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetLogDescriptorsResponse_FieldMask()
}

func (o *BatchGetLogDescriptorsResponse) MakeDiffFieldMask(other *BatchGetLogDescriptorsResponse) *BatchGetLogDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetLogDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetLogDescriptorsResponse_FieldMask()
	}

	res := &BatchGetLogDescriptorsResponse_FieldMask{}

	if len(o.GetLogDescriptors()) == len(other.GetLogDescriptors()) {
		for i, lValue := range o.GetLogDescriptors() {
			rValue := other.GetLogDescriptors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetLogDescriptorsResponse_FieldTerminalPath{selector: BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetLogDescriptorsResponse_FieldTerminalPath{selector: BatchGetLogDescriptorsResponse_FieldPathSelectorLogDescriptors})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetLogDescriptorsResponse_FieldTerminalPath{selector: BatchGetLogDescriptorsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetLogDescriptorsResponse_FieldTerminalPath{selector: BatchGetLogDescriptorsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetLogDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetLogDescriptorsResponse))
}

func (o *BatchGetLogDescriptorsResponse) Clone() *BatchGetLogDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetLogDescriptorsResponse{}
	result.LogDescriptors = make([]*log_descriptor.LogDescriptor, len(o.LogDescriptors))
	for i, sourceValue := range o.LogDescriptors {
		result.LogDescriptors[i] = sourceValue.Clone()
	}
	result.Missing = make([]*log_descriptor.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &log_descriptor.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetLogDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetLogDescriptorsResponse) Merge(source *BatchGetLogDescriptorsResponse) {
	for _, sourceValue := range source.GetLogDescriptors() {
		exists := false
		for _, currentValue := range o.LogDescriptors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *log_descriptor.LogDescriptor
			if sourceValue != nil {
				newDstElement = new(log_descriptor.LogDescriptor)
				newDstElement.Merge(sourceValue)
			}
			o.LogDescriptors = append(o.LogDescriptors, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *log_descriptor.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &log_descriptor.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetLogDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetLogDescriptorsResponse))
}

func (o *ListLogDescriptorsRequest) GotenObjectExt() {}

func (o *ListLogDescriptorsRequest) MakeFullFieldMask() *ListLogDescriptorsRequest_FieldMask {
	return FullListLogDescriptorsRequest_FieldMask()
}

func (o *ListLogDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListLogDescriptorsRequest_FieldMask()
}

func (o *ListLogDescriptorsRequest) MakeDiffFieldMask(other *ListLogDescriptorsRequest) *ListLogDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListLogDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListLogDescriptorsRequest_FieldMask()
	}

	res := &ListLogDescriptorsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListLogDescriptorsRequest_FieldTerminalPath{selector: ListLogDescriptorsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListLogDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListLogDescriptorsRequest))
}

func (o *ListLogDescriptorsRequest) Clone() *ListLogDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &ListLogDescriptorsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &log_descriptor.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &log_descriptor.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &log_descriptor.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &log_descriptor.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*log_descriptor.LogDescriptor_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListLogDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListLogDescriptorsRequest) Merge(source *ListLogDescriptorsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &log_descriptor.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &log_descriptor.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &log_descriptor.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &log_descriptor.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(log_descriptor.LogDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListLogDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListLogDescriptorsRequest))
}

func (o *ListLogDescriptorsResponse) GotenObjectExt() {}

func (o *ListLogDescriptorsResponse) MakeFullFieldMask() *ListLogDescriptorsResponse_FieldMask {
	return FullListLogDescriptorsResponse_FieldMask()
}

func (o *ListLogDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListLogDescriptorsResponse_FieldMask()
}

func (o *ListLogDescriptorsResponse) MakeDiffFieldMask(other *ListLogDescriptorsResponse) *ListLogDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListLogDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListLogDescriptorsResponse_FieldMask()
	}

	res := &ListLogDescriptorsResponse_FieldMask{}

	if len(o.GetLogDescriptors()) == len(other.GetLogDescriptors()) {
		for i, lValue := range o.GetLogDescriptors() {
			rValue := other.GetLogDescriptors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListLogDescriptorsResponse_FieldTerminalPath{selector: ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListLogDescriptorsResponse_FieldTerminalPath{selector: ListLogDescriptorsResponse_FieldPathSelectorLogDescriptors})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListLogDescriptorsResponse_FieldTerminalPath{selector: ListLogDescriptorsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListLogDescriptorsResponse_FieldTerminalPath{selector: ListLogDescriptorsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListLogDescriptorsResponse_FieldTerminalPath{selector: ListLogDescriptorsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListLogDescriptorsResponse_FieldTerminalPath{selector: ListLogDescriptorsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListLogDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListLogDescriptorsResponse))
}

func (o *ListLogDescriptorsResponse) Clone() *ListLogDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &ListLogDescriptorsResponse{}
	result.LogDescriptors = make([]*log_descriptor.LogDescriptor, len(o.LogDescriptors))
	for i, sourceValue := range o.LogDescriptors {
		result.LogDescriptors[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &log_descriptor.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &log_descriptor.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListLogDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListLogDescriptorsResponse) Merge(source *ListLogDescriptorsResponse) {
	for _, sourceValue := range source.GetLogDescriptors() {
		exists := false
		for _, currentValue := range o.LogDescriptors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *log_descriptor.LogDescriptor
			if sourceValue != nil {
				newDstElement = new(log_descriptor.LogDescriptor)
				newDstElement.Merge(sourceValue)
			}
			o.LogDescriptors = append(o.LogDescriptors, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &log_descriptor.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &log_descriptor.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListLogDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListLogDescriptorsResponse))
}

func (o *WatchLogDescriptorRequest) GotenObjectExt() {}

func (o *WatchLogDescriptorRequest) MakeFullFieldMask() *WatchLogDescriptorRequest_FieldMask {
	return FullWatchLogDescriptorRequest_FieldMask()
}

func (o *WatchLogDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLogDescriptorRequest_FieldMask()
}

func (o *WatchLogDescriptorRequest) MakeDiffFieldMask(other *WatchLogDescriptorRequest) *WatchLogDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchLogDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLogDescriptorRequest_FieldMask()
	}

	res := &WatchLogDescriptorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchLogDescriptorRequest_FieldTerminalPath{selector: WatchLogDescriptorRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchLogDescriptorRequest_FieldTerminalPath{selector: WatchLogDescriptorRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchLogDescriptorRequest_FieldTerminalPath{selector: WatchLogDescriptorRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchLogDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLogDescriptorRequest))
}

func (o *WatchLogDescriptorRequest) Clone() *WatchLogDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &WatchLogDescriptorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &log_descriptor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*log_descriptor.LogDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchLogDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLogDescriptorRequest) Merge(source *WatchLogDescriptorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &log_descriptor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(log_descriptor.LogDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchLogDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLogDescriptorRequest))
}

func (o *WatchLogDescriptorResponse) GotenObjectExt() {}

func (o *WatchLogDescriptorResponse) MakeFullFieldMask() *WatchLogDescriptorResponse_FieldMask {
	return FullWatchLogDescriptorResponse_FieldMask()
}

func (o *WatchLogDescriptorResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLogDescriptorResponse_FieldMask()
}

func (o *WatchLogDescriptorResponse) MakeDiffFieldMask(other *WatchLogDescriptorResponse) *WatchLogDescriptorResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchLogDescriptorResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLogDescriptorResponse_FieldMask()
	}

	res := &WatchLogDescriptorResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchLogDescriptorResponse_FieldTerminalPath{selector: WatchLogDescriptorResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchLogDescriptorResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLogDescriptorResponse))
}

func (o *WatchLogDescriptorResponse) Clone() *WatchLogDescriptorResponse {
	if o == nil {
		return nil
	}
	result := &WatchLogDescriptorResponse{}
	result.Change = proto.Clone(o.Change).(*log_descriptor.LogDescriptorChange)
	return result
}

func (o *WatchLogDescriptorResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLogDescriptorResponse) Merge(source *WatchLogDescriptorResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(log_descriptor.LogDescriptorChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchLogDescriptorResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLogDescriptorResponse))
}

func (o *WatchLogDescriptorsRequest) GotenObjectExt() {}

func (o *WatchLogDescriptorsRequest) MakeFullFieldMask() *WatchLogDescriptorsRequest_FieldMask {
	return FullWatchLogDescriptorsRequest_FieldMask()
}

func (o *WatchLogDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLogDescriptorsRequest_FieldMask()
}

func (o *WatchLogDescriptorsRequest) MakeDiffFieldMask(other *WatchLogDescriptorsRequest) *WatchLogDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchLogDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLogDescriptorsRequest_FieldMask()
	}

	res := &WatchLogDescriptorsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsRequest_FieldTerminalPath{selector: WatchLogDescriptorsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchLogDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLogDescriptorsRequest))
}

func (o *WatchLogDescriptorsRequest) Clone() *WatchLogDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &WatchLogDescriptorsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &log_descriptor.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &log_descriptor.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &log_descriptor.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &log_descriptor.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*log_descriptor.LogDescriptor_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchLogDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLogDescriptorsRequest) Merge(source *WatchLogDescriptorsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &log_descriptor.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &log_descriptor.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &log_descriptor.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &log_descriptor.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(log_descriptor.LogDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchLogDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLogDescriptorsRequest))
}

func (o *WatchLogDescriptorsResponse) GotenObjectExt() {}

func (o *WatchLogDescriptorsResponse) MakeFullFieldMask() *WatchLogDescriptorsResponse_FieldMask {
	return FullWatchLogDescriptorsResponse_FieldMask()
}

func (o *WatchLogDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLogDescriptorsResponse_FieldMask()
}

func (o *WatchLogDescriptorsResponse) MakeDiffFieldMask(other *WatchLogDescriptorsResponse) *WatchLogDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchLogDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLogDescriptorsResponse_FieldMask()
	}

	res := &WatchLogDescriptorsResponse_FieldMask{}

	if len(o.GetLogDescriptorChanges()) == len(other.GetLogDescriptorChanges()) {
		for i, lValue := range o.GetLogDescriptorChanges() {
			rValue := other.GetLogDescriptorChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorLogDescriptorChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchLogDescriptorsResponse_FieldSubPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsResponse_FieldTerminalPath{selector: WatchLogDescriptorsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchLogDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLogDescriptorsResponse))
}

func (o *WatchLogDescriptorsResponse) Clone() *WatchLogDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &WatchLogDescriptorsResponse{}
	result.LogDescriptorChanges = make([]*log_descriptor.LogDescriptorChange, len(o.LogDescriptorChanges))
	for i, sourceValue := range o.LogDescriptorChanges {
		result.LogDescriptorChanges[i] = proto.Clone(sourceValue).(*log_descriptor.LogDescriptorChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchLogDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLogDescriptorsResponse) Merge(source *WatchLogDescriptorsResponse) {
	for _, sourceValue := range source.GetLogDescriptorChanges() {
		exists := false
		for _, currentValue := range o.LogDescriptorChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *log_descriptor.LogDescriptorChange
			if sourceValue != nil {
				newDstElement = new(log_descriptor.LogDescriptorChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.LogDescriptorChanges = append(o.LogDescriptorChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchLogDescriptorsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchLogDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLogDescriptorsResponse))
}

func (o *WatchLogDescriptorsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchLogDescriptorsResponse_PageTokenChange) MakeFullFieldMask() *WatchLogDescriptorsResponse_PageTokenChange_FieldMask {
	return FullWatchLogDescriptorsResponse_PageTokenChange_FieldMask()
}

func (o *WatchLogDescriptorsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLogDescriptorsResponse_PageTokenChange_FieldMask()
}

func (o *WatchLogDescriptorsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchLogDescriptorsResponse_PageTokenChange) *WatchLogDescriptorsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchLogDescriptorsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLogDescriptorsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchLogDescriptorsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchLogDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchLogDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchLogDescriptorsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLogDescriptorsResponse_PageTokenChange))
}

func (o *WatchLogDescriptorsResponse_PageTokenChange) Clone() *WatchLogDescriptorsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchLogDescriptorsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &log_descriptor.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &log_descriptor.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchLogDescriptorsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLogDescriptorsResponse_PageTokenChange) Merge(source *WatchLogDescriptorsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &log_descriptor.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &log_descriptor.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchLogDescriptorsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLogDescriptorsResponse_PageTokenChange))
}

func (o *CreateLogDescriptorRequest) GotenObjectExt() {}

func (o *CreateLogDescriptorRequest) MakeFullFieldMask() *CreateLogDescriptorRequest_FieldMask {
	return FullCreateLogDescriptorRequest_FieldMask()
}

func (o *CreateLogDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateLogDescriptorRequest_FieldMask()
}

func (o *CreateLogDescriptorRequest) MakeDiffFieldMask(other *CreateLogDescriptorRequest) *CreateLogDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateLogDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateLogDescriptorRequest_FieldMask()
	}

	res := &CreateLogDescriptorRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateLogDescriptorRequest_FieldTerminalPath{selector: CreateLogDescriptorRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetLogDescriptor().MakeDiffFieldMask(other.GetLogDescriptor())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateLogDescriptorRequest_FieldTerminalPath{selector: CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateLogDescriptorRequest_FieldSubPath{selector: CreateLogDescriptorRequest_FieldPathSelectorLogDescriptor, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateLogDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateLogDescriptorRequest))
}

func (o *CreateLogDescriptorRequest) Clone() *CreateLogDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &CreateLogDescriptorRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &log_descriptor.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.LogDescriptor = o.LogDescriptor.Clone()
	return result
}

func (o *CreateLogDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateLogDescriptorRequest) Merge(source *CreateLogDescriptorRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &log_descriptor.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetLogDescriptor() != nil {
		if o.LogDescriptor == nil {
			o.LogDescriptor = new(log_descriptor.LogDescriptor)
		}
		o.LogDescriptor.Merge(source.GetLogDescriptor())
	}
}

func (o *CreateLogDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateLogDescriptorRequest))
}

func (o *UpdateLogDescriptorRequest) GotenObjectExt() {}

func (o *UpdateLogDescriptorRequest) MakeFullFieldMask() *UpdateLogDescriptorRequest_FieldMask {
	return FullUpdateLogDescriptorRequest_FieldMask()
}

func (o *UpdateLogDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateLogDescriptorRequest_FieldMask()
}

func (o *UpdateLogDescriptorRequest) MakeDiffFieldMask(other *UpdateLogDescriptorRequest) *UpdateLogDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateLogDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateLogDescriptorRequest_FieldMask()
	}

	res := &UpdateLogDescriptorRequest_FieldMask{}
	{
		subMask := o.GetLogDescriptor().MakeDiffFieldMask(other.GetLogDescriptor())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateLogDescriptorRequest_FieldTerminalPath{selector: UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateLogDescriptorRequest_FieldSubPath{selector: UpdateLogDescriptorRequest_FieldPathSelectorLogDescriptor, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateLogDescriptorRequest_FieldTerminalPath{selector: UpdateLogDescriptorRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateLogDescriptorRequest_FieldTerminalPath{selector: UpdateLogDescriptorRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateLogDescriptorRequest_FieldSubPath{selector: UpdateLogDescriptorRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateLogDescriptorRequest_FieldTerminalPath{selector: UpdateLogDescriptorRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateLogDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateLogDescriptorRequest))
}

func (o *UpdateLogDescriptorRequest) Clone() *UpdateLogDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &UpdateLogDescriptorRequest{}
	result.LogDescriptor = o.LogDescriptor.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*log_descriptor.LogDescriptor_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateLogDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateLogDescriptorRequest) Merge(source *UpdateLogDescriptorRequest) {
	if source.GetLogDescriptor() != nil {
		if o.LogDescriptor == nil {
			o.LogDescriptor = new(log_descriptor.LogDescriptor)
		}
		o.LogDescriptor.Merge(source.GetLogDescriptor())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(log_descriptor.LogDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateLogDescriptorRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateLogDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateLogDescriptorRequest))
}

func (o *UpdateLogDescriptorRequest_CAS) GotenObjectExt() {}

func (o *UpdateLogDescriptorRequest_CAS) MakeFullFieldMask() *UpdateLogDescriptorRequest_CAS_FieldMask {
	return FullUpdateLogDescriptorRequest_CAS_FieldMask()
}

func (o *UpdateLogDescriptorRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateLogDescriptorRequest_CAS_FieldMask()
}

func (o *UpdateLogDescriptorRequest_CAS) MakeDiffFieldMask(other *UpdateLogDescriptorRequest_CAS) *UpdateLogDescriptorRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateLogDescriptorRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateLogDescriptorRequest_CAS_FieldMask()
	}

	res := &UpdateLogDescriptorRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateLogDescriptorRequestCAS_FieldTerminalPath{selector: UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateLogDescriptorRequestCAS_FieldSubPath{selector: UpdateLogDescriptorRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateLogDescriptorRequestCAS_FieldTerminalPath{selector: UpdateLogDescriptorRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateLogDescriptorRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateLogDescriptorRequest_CAS))
}

func (o *UpdateLogDescriptorRequest_CAS) Clone() *UpdateLogDescriptorRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateLogDescriptorRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*log_descriptor.LogDescriptor_FieldMask)
	return result
}

func (o *UpdateLogDescriptorRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateLogDescriptorRequest_CAS) Merge(source *UpdateLogDescriptorRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(log_descriptor.LogDescriptor)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(log_descriptor.LogDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateLogDescriptorRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateLogDescriptorRequest_CAS))
}

func (o *DeleteLogDescriptorRequest) GotenObjectExt() {}

func (o *DeleteLogDescriptorRequest) MakeFullFieldMask() *DeleteLogDescriptorRequest_FieldMask {
	return FullDeleteLogDescriptorRequest_FieldMask()
}

func (o *DeleteLogDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteLogDescriptorRequest_FieldMask()
}

func (o *DeleteLogDescriptorRequest) MakeDiffFieldMask(other *DeleteLogDescriptorRequest) *DeleteLogDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteLogDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteLogDescriptorRequest_FieldMask()
	}

	res := &DeleteLogDescriptorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteLogDescriptorRequest_FieldTerminalPath{selector: DeleteLogDescriptorRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteLogDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteLogDescriptorRequest))
}

func (o *DeleteLogDescriptorRequest) Clone() *DeleteLogDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &DeleteLogDescriptorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &log_descriptor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteLogDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteLogDescriptorRequest) Merge(source *DeleteLogDescriptorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &log_descriptor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteLogDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteLogDescriptorRequest))
}
