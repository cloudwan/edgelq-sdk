// Code generated by protoc-gen-goten-validate
// File: edgelq/logging/proto/v1/log_custom.proto
// DO NOT EDIT!!!

package log_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	bucket "github.com/cloudwan/edgelq-sdk/logging/resources/v1/bucket"
	common "github.com/cloudwan/edgelq-sdk/logging/resources/v1/common"
	log "github.com/cloudwan/edgelq-sdk/logging/resources/v1/log"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &rpc.Status{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &bucket.Bucket{}
	_ = &common.LabelDescriptor{}
	_ = &log.Log{}
	_ = &meta_service.Service{}
)

func (obj *ListLogsRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if obj.Interval == nil {
		return gotenvalidate.NewValidationError("ListLogsRequest", "interval", obj.Interval, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.Interval).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ListLogsRequest", "interval", obj.Interval, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListLogsResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Logs {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListLogsResponse", "logs", obj.Logs[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.ExecutionErrors {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListLogsResponse", "executionErrors", obj.ExecutionErrors[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListLogsResponse_ErrorDetails) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CreateLogsRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Logs {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateLogsRequest", "logs", obj.Logs[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CreateLogsResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.FailedLogs {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateLogsResponse", "failedLogs", obj.FailedLogs[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CreateLogsResponse_CreateError) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Logs {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateError", "logs", obj.Logs[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.Status).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("CreateError", "status", obj.Status, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StreamingCreateLogsRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Logs {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StreamingCreateLogsRequest", "logs", obj.Logs[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StreamingCreateLogsResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.FailedLogs {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("StreamingCreateLogsResponse", "failedLogs", obj.FailedLogs[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
