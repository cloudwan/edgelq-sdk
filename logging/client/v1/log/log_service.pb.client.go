// Code generated by protoc-gen-goten-client
// API: LogService
// DO NOT EDIT!!!

package log_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	log "github.com/cloudwan/edgelq-sdk/logging/resources/v1/log"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &log.Log{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogServiceClient is the client API for LogService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogServiceClient interface {
	ListLogs(ctx context.Context, in *ListLogsRequest, opts ...grpc.CallOption) (*ListLogsResponse, error)
	CreateLogs(ctx context.Context, in *CreateLogsRequest, opts ...grpc.CallOption) (*CreateLogsResponse, error)
	StreamingCreateLogs(ctx context.Context, opts ...grpc.CallOption) (StreamingCreateLogsClientStream, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &client{cc}
}

func (c *client) ListLogs(ctx context.Context, in *ListLogsRequest, opts ...grpc.CallOption) (*ListLogsResponse, error) {
	out := new(ListLogsResponse)
	err := c.cc.Invoke(ctx, "/ntt.logging.v1.LogService/ListLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateLogs(ctx context.Context, in *CreateLogsRequest, opts ...grpc.CallOption) (*CreateLogsResponse, error) {
	out := new(CreateLogsResponse)
	err := c.cc.Invoke(ctx, "/ntt.logging.v1.LogService/CreateLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) StreamingCreateLogs(ctx context.Context, opts ...grpc.CallOption) (StreamingCreateLogsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "StreamingCreateLogs",
			ServerStreams: true,
			ClientStreams: true,
		},
		"/ntt.logging.v1.LogService/StreamingCreateLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingCreateLogsStreamingCreateLogsClient{stream}
	return x, nil
}

type StreamingCreateLogsClientStream interface {
	Send(*StreamingCreateLogsRequest) error
	Recv() (*StreamingCreateLogsResponse, error)
	grpc.ClientStream
}

type streamingCreateLogsStreamingCreateLogsClient struct {
	grpc.ClientStream
}

func (x *streamingCreateLogsStreamingCreateLogsClient) Send(m *StreamingCreateLogsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingCreateLogsStreamingCreateLogsClient) Recv() (*StreamingCreateLogsResponse, error) {
	m := new(StreamingCreateLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}
