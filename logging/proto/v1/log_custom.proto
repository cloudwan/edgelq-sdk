syntax = "proto3";

package ntt.logging.v1;

import "edgelq-sdk/common/rpc/status.proto";
import "edgelq-sdk/logging/proto/v1/common.proto";
import "edgelq-sdk/logging/proto/v1/log.proto";

option go_package = "github.com/cloudwan/edgelq-sdk/logging/client/v1/log;log_client";
option java_multiple_files = false;
option java_outer_classname = "LogCustomProto";
option java_package = "com.ntt.logging.pb.v1";

// Request message for method [ListLogs][ntt.logging.v1.ListLogs]
message ListLogsRequest {
  // Parent references of ntt.logging.v1.Log
  repeated string parents = 1;

  // Filter that specifies which logs should be returned
  string filter = 2;

  // The time interval for which results should be returned. Only logs
  // that contain data points in the specified interval are included
  // in the response.
  TimeInterval interval = 3;

  // Cap on a number of log entries to be included in a response.
  // Number of logs in an actual response can be higher, since logs are
  // read in bulk with second precision - exceed logs above the limit will share
  // same timestamp as the logs below the limit.
  //
  // Results will be adjusted to the "end time" taken from interval field
  // (adjusted also by page_token if provided).
  int32 page_size = 5;

  // Token which identifies next page with further results. Token should be
  // taken from
  // [ListLogsResponse.next_page_token][ntt.logging.v1.ListLogsResponse.next_page_token].
  string page_token = 6;
}

// Response message for method [ListLogs][ntt.logging.v1.ListLogs]
message ListLogsResponse {
  // Logs that match the filter included in the request.
  repeated Log logs = 1;

  // If there are more results than have been returned, then this field is set
  // to a non-empty value. To see the additional results,
  // use that value as `pageToken` in the next call to this method.
  string next_page_token = 2;

  // Query execution errors that may have caused the logs data returned
  // to be incomplete.
  repeated ntt.rpc.Status execution_errors = 3;

  // ErrorDetails is used when one of the queried regions fails to produce
  // results. It is used in execution_errors field (see subfield
  // ntt.rpc.Status.details).
  message ErrorDetails {
    // region id which failed to give results.
    string region_id = 1;
  }
}

// Request message for method [CreateLogs][ntt.logging.v1.CreateLogs]
message CreateLogsRequest {
  // Parent reference of ntt.logging.v1.Log
  string parent = 1;

  // List of logs to create/append. If they have specified name
  // field, it must match provided parent field.
  repeated Log logs = 2;
}

// Response message for method [CreateLogs][ntt.logging.v1.CreateLogs]
message CreateLogsResponse {
  // Log names indexed by Create position. All logs, except
  // failed ones will be present. If all logs were written successfully,
  // then map will have keys all from 0 to N-1.
  map<uint32, string> log_names = 1;

  // Logs that failed to be created
  repeated CreateError failed_logs = 2;

  // Describes the result of a failed request to write logs.
  message CreateError {
    // All logs that failed to be written. This field provides all of
    // the context that would be needed to retry the operation.
    repeated Log logs = 1;

    // The status of the requested write operation.
    ntt.rpc.Status status = 2;
  }
}

// A request message of the StreamingCreateLogs method.
// This method only supports creating logs for the same project and region for
// the entire duration of the stream. Any client that intends
// to create logs in multiple projects or regions should not use this API. If
// the client uses the same scope, service, version and log descriptor, these
// fields need not be sent after the first message even if binary key is not
// used in the log entry. The server will set the values observed in the first
// message in case these are empty and binary key is also not present in the log
message StreamingCreateLogsRequest {
  // Parent reference of ntt.logging.v1.Log
  // only required in the first request message
  string parent = 1;

  // only required in the first request in order to route the request to the
  // correct region
  string region_id = 2;

  // List of logs to create/append. If they have specified name
  // field, it must match provided parent field
  repeated Log logs = 3;
}

// A response message of the StreamingCreateLogs method.
message StreamingCreateLogsResponse {
  // Binary key will be set in the map key corresponding to the array index
  // in the request, but only if the particular request entry did not use binary
  // key. Indices for log entries in request having binary key set will be
  // ignored in the response
  map<uint32, string> bin_keys = 1;

  // Logs that failed to be created
  repeated CreateLogsResponse.CreateError failed_logs = 2;
}
