// Code generated by protoc-gen-goten-object
// File: edgelq/logging/proto/v1alpha2/log.proto
// DO NOT EDIT!!!

package log

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	log_descriptor "github.com/cloudwan/edgelq-sdk/logging/resources/v1alpha2/log_descriptor"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &log_descriptor.LogDescriptor{}
	_ = &structpb.Struct{}
	_ = &timestamppb.Timestamp{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Log_FieldPath interface {
	gotenobject.FieldPath
	Selector() Log_FieldPathSelector
	Get(source *Log) []interface{}
	GetSingle(source *Log) (interface{}, bool)
	ClearValue(item *Log)

	// Those methods build corresponding Log_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Log_FieldPathValue
	WithIArrayOfValues(values interface{}) Log_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Log_FieldPathArrayItemValue
}

type Log_FieldPathSelector int32

const (
	Log_FieldPathSelectorName          Log_FieldPathSelector = 0
	Log_FieldPathSelectorScope         Log_FieldPathSelector = 1
	Log_FieldPathSelectorService       Log_FieldPathSelector = 2
	Log_FieldPathSelectorRegion        Log_FieldPathSelector = 3
	Log_FieldPathSelectorVersion       Log_FieldPathSelector = 4
	Log_FieldPathSelectorLogDescriptor Log_FieldPathSelector = 5
	Log_FieldPathSelectorLabels        Log_FieldPathSelector = 6
	Log_FieldPathSelectorTime          Log_FieldPathSelector = 7
	Log_FieldPathSelectorPayload       Log_FieldPathSelector = 8
)

func (s Log_FieldPathSelector) String() string {
	switch s {
	case Log_FieldPathSelectorName:
		return "name"
	case Log_FieldPathSelectorScope:
		return "scope"
	case Log_FieldPathSelectorService:
		return "service"
	case Log_FieldPathSelectorRegion:
		return "region"
	case Log_FieldPathSelectorVersion:
		return "version"
	case Log_FieldPathSelectorLogDescriptor:
		return "log_descriptor"
	case Log_FieldPathSelectorLabels:
		return "labels"
	case Log_FieldPathSelectorTime:
		return "time"
	case Log_FieldPathSelectorPayload:
		return "payload"
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", s))
	}
}

func BuildLog_FieldPath(fp gotenobject.RawFieldPath) (Log_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Log")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Log_FieldTerminalPath{selector: Log_FieldPathSelectorName}, nil
		case "scope":
			return &Log_FieldTerminalPath{selector: Log_FieldPathSelectorScope}, nil
		case "service":
			return &Log_FieldTerminalPath{selector: Log_FieldPathSelectorService}, nil
		case "region":
			return &Log_FieldTerminalPath{selector: Log_FieldPathSelectorRegion}, nil
		case "version":
			return &Log_FieldTerminalPath{selector: Log_FieldPathSelectorVersion}, nil
		case "log_descriptor", "logDescriptor", "log-descriptor":
			return &Log_FieldTerminalPath{selector: Log_FieldPathSelectorLogDescriptor}, nil
		case "labels":
			return &Log_FieldTerminalPath{selector: Log_FieldPathSelectorLabels}, nil
		case "time":
			return &Log_FieldTerminalPath{selector: Log_FieldPathSelectorTime}, nil
		case "payload":
			return &Log_FieldTerminalPath{selector: Log_FieldPathSelectorPayload}, nil
		}
	} else {
		switch fp[0] {
		case "labels":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object Log)", fp)
			}
			return &Log_FieldPathMap{selector: Log_FieldPathSelectorLabels, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Log", fp)
}

func ParseLog_FieldPath(rawField string) (Log_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildLog_FieldPath(fp)
}

func MustParseLog_FieldPath(rawField string) Log_FieldPath {
	fp, err := ParseLog_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Log_FieldTerminalPath struct {
	selector Log_FieldPathSelector
}

var _ Log_FieldPath = (*Log_FieldTerminalPath)(nil)

func (fp *Log_FieldTerminalPath) Selector() Log_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Log_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Log_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Log
func (fp *Log_FieldTerminalPath) Get(source *Log) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Log_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Log_FieldPathSelectorScope:
			values = append(values, source.Scope)
		case Log_FieldPathSelectorService:
			values = append(values, source.Service)
		case Log_FieldPathSelectorRegion:
			values = append(values, source.Region)
		case Log_FieldPathSelectorVersion:
			values = append(values, source.Version)
		case Log_FieldPathSelectorLogDescriptor:
			if source.LogDescriptor != nil {
				values = append(values, source.LogDescriptor)
			}
		case Log_FieldPathSelectorLabels:
			values = append(values, source.Labels)
		case Log_FieldPathSelectorTime:
			if source.Time != nil {
				values = append(values, source.Time)
			}
		case Log_FieldPathSelectorPayload:
			if source.Payload != nil {
				values = append(values, source.Payload)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Log: %d", fp.selector))
		}
	}
	return
}

func (fp *Log_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Log))
}

// GetSingle returns value pointed by specific field of from source Log
func (fp *Log_FieldTerminalPath) GetSingle(source *Log) (interface{}, bool) {
	switch fp.selector {
	case Log_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Log_FieldPathSelectorScope:
		return source.GetScope(), source != nil
	case Log_FieldPathSelectorService:
		return source.GetService(), source != nil
	case Log_FieldPathSelectorRegion:
		return source.GetRegion(), source != nil
	case Log_FieldPathSelectorVersion:
		return source.GetVersion(), source != nil
	case Log_FieldPathSelectorLogDescriptor:
		res := source.GetLogDescriptor()
		return res, res != nil
	case Log_FieldPathSelectorLabels:
		res := source.GetLabels()
		return res, res != nil
	case Log_FieldPathSelectorTime:
		res := source.GetTime()
		return res, res != nil
	case Log_FieldPathSelectorPayload:
		res := source.GetPayload()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fp.selector))
	}
}

func (fp *Log_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Log))
}

// GetDefault returns a default value of the field type
func (fp *Log_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Log_FieldPathSelectorName:
		return (*Name)(nil)
	case Log_FieldPathSelectorScope:
		return ""
	case Log_FieldPathSelectorService:
		return ""
	case Log_FieldPathSelectorRegion:
		return ""
	case Log_FieldPathSelectorVersion:
		return ""
	case Log_FieldPathSelectorLogDescriptor:
		return (*log_descriptor.Reference)(nil)
	case Log_FieldPathSelectorLabels:
		return (map[string]string)(nil)
	case Log_FieldPathSelectorTime:
		return (*timestamppb.Timestamp)(nil)
	case Log_FieldPathSelectorPayload:
		return (*structpb.Struct)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fp.selector))
	}
}

func (fp *Log_FieldTerminalPath) ClearValue(item *Log) {
	if item != nil {
		switch fp.selector {
		case Log_FieldPathSelectorName:
			item.Name = nil
		case Log_FieldPathSelectorScope:
			item.Scope = ""
		case Log_FieldPathSelectorService:
			item.Service = ""
		case Log_FieldPathSelectorRegion:
			item.Region = ""
		case Log_FieldPathSelectorVersion:
			item.Version = ""
		case Log_FieldPathSelectorLogDescriptor:
			item.LogDescriptor = nil
		case Log_FieldPathSelectorLabels:
			item.Labels = nil
		case Log_FieldPathSelectorTime:
			item.Time = nil
		case Log_FieldPathSelectorPayload:
			item.Payload = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Log: %d", fp.selector))
		}
	}
}

func (fp *Log_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Log))
}

// IsLeaf - whether field path is holds simple value
func (fp *Log_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Log_FieldPathSelectorName ||
		fp.selector == Log_FieldPathSelectorScope ||
		fp.selector == Log_FieldPathSelectorService ||
		fp.selector == Log_FieldPathSelectorRegion ||
		fp.selector == Log_FieldPathSelectorVersion ||
		fp.selector == Log_FieldPathSelectorLogDescriptor ||
		fp.selector == Log_FieldPathSelectorLabels ||
		fp.selector == Log_FieldPathSelectorTime ||
		fp.selector == Log_FieldPathSelectorPayload
}

func (fp *Log_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Log_FieldTerminalPath) WithIValue(value interface{}) Log_FieldPathValue {
	switch fp.selector {
	case Log_FieldPathSelectorName:
		return &Log_FieldTerminalPathValue{Log_FieldTerminalPath: *fp, value: value.(*Name)}
	case Log_FieldPathSelectorScope:
		return &Log_FieldTerminalPathValue{Log_FieldTerminalPath: *fp, value: value.(string)}
	case Log_FieldPathSelectorService:
		return &Log_FieldTerminalPathValue{Log_FieldTerminalPath: *fp, value: value.(string)}
	case Log_FieldPathSelectorRegion:
		return &Log_FieldTerminalPathValue{Log_FieldTerminalPath: *fp, value: value.(string)}
	case Log_FieldPathSelectorVersion:
		return &Log_FieldTerminalPathValue{Log_FieldTerminalPath: *fp, value: value.(string)}
	case Log_FieldPathSelectorLogDescriptor:
		return &Log_FieldTerminalPathValue{Log_FieldTerminalPath: *fp, value: value.(*log_descriptor.Reference)}
	case Log_FieldPathSelectorLabels:
		return &Log_FieldTerminalPathValue{Log_FieldTerminalPath: *fp, value: value.(map[string]string)}
	case Log_FieldPathSelectorTime:
		return &Log_FieldTerminalPathValue{Log_FieldTerminalPath: *fp, value: value.(*timestamppb.Timestamp)}
	case Log_FieldPathSelectorPayload:
		return &Log_FieldTerminalPathValue{Log_FieldTerminalPath: *fp, value: value.(*structpb.Struct)}
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fp.selector))
	}
}

func (fp *Log_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Log_FieldTerminalPath) WithIArrayOfValues(values interface{}) Log_FieldPathArrayOfValues {
	fpaov := &Log_FieldTerminalPathArrayOfValues{Log_FieldTerminalPath: *fp}
	switch fp.selector {
	case Log_FieldPathSelectorName:
		return &Log_FieldTerminalPathArrayOfValues{Log_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Log_FieldPathSelectorScope:
		return &Log_FieldTerminalPathArrayOfValues{Log_FieldTerminalPath: *fp, values: values.([]string)}
	case Log_FieldPathSelectorService:
		return &Log_FieldTerminalPathArrayOfValues{Log_FieldTerminalPath: *fp, values: values.([]string)}
	case Log_FieldPathSelectorRegion:
		return &Log_FieldTerminalPathArrayOfValues{Log_FieldTerminalPath: *fp, values: values.([]string)}
	case Log_FieldPathSelectorVersion:
		return &Log_FieldTerminalPathArrayOfValues{Log_FieldTerminalPath: *fp, values: values.([]string)}
	case Log_FieldPathSelectorLogDescriptor:
		return &Log_FieldTerminalPathArrayOfValues{Log_FieldTerminalPath: *fp, values: values.([]*log_descriptor.Reference)}
	case Log_FieldPathSelectorLabels:
		return &Log_FieldTerminalPathArrayOfValues{Log_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	case Log_FieldPathSelectorTime:
		return &Log_FieldTerminalPathArrayOfValues{Log_FieldTerminalPath: *fp, values: values.([]*timestamppb.Timestamp)}
	case Log_FieldPathSelectorPayload:
		return &Log_FieldTerminalPathArrayOfValues{Log_FieldTerminalPath: *fp, values: values.([]*structpb.Struct)}
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fp.selector))
	}
	return fpaov
}

func (fp *Log_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Log_FieldTerminalPath) WithIArrayItemValue(value interface{}) Log_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fp.selector))
	}
}

func (fp *Log_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type Log_FieldPathMap struct {
	key      string
	selector Log_FieldPathSelector
}

var _ Log_FieldPath = (*Log_FieldPathMap)(nil)

func (fpm *Log_FieldPathMap) Selector() Log_FieldPathSelector {
	return fpm.selector
}

func (fpm *Log_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *Log_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *Log_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source Log
func (fpm *Log_FieldPathMap) Get(source *Log) (values []interface{}) {
	switch fpm.selector {
	case Log_FieldPathSelectorLabels:
		if value, ok := source.GetLabels()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fpm.selector))
	}
	return
}

func (fpm *Log_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*Log))
}

// GetSingle returns value by selected field map key from source Log
func (fpm *Log_FieldPathMap) GetSingle(source *Log) (interface{}, bool) {
	switch fpm.selector {
	case Log_FieldPathSelectorLabels:
		res, ok := source.GetLabels()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fpm.selector))
	}
}

func (fpm *Log_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*Log))
}

// GetDefault returns a default value of the field type
func (fpm *Log_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case Log_FieldPathSelectorLabels:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fpm.selector))
	}
}

func (fpm *Log_FieldPathMap) ClearValue(item *Log) {
	if item != nil {
		switch fpm.selector {
		case Log_FieldPathSelectorLabels:
			delete(item.Labels, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for Log: %d", fpm.selector))
		}
	}
}

func (fpm *Log_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*Log))
}

// IsLeaf - whether field path is holds simple value
func (fpm *Log_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case Log_FieldPathSelectorLabels:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fpm.selector))
	}
}

func (fpm *Log_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *Log_FieldPathMap) WithIValue(value interface{}) Log_FieldPathValue {
	switch fpm.selector {
	case Log_FieldPathSelectorLabels:
		return &Log_FieldPathMapValue{Log_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fpm.selector))
	}
}

func (fpm *Log_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *Log_FieldPathMap) WithIArrayOfValues(values interface{}) Log_FieldPathArrayOfValues {
	switch fpm.selector {
	case Log_FieldPathSelectorLabels:
		return &Log_FieldPathMapArrayOfValues{Log_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fpm.selector))
	}
}

func (fpm *Log_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *Log_FieldPathMap) WithIArrayItemValue(value interface{}) Log_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *Log_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// Log_FieldPathValue allows storing values for Log fields according to their type
type Log_FieldPathValue interface {
	Log_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Log)
	CompareWith(*Log) (cmp int, comparable bool)
}

func ParseLog_FieldPathValue(pathStr, valueStr string) (Log_FieldPathValue, error) {
	fp, err := ParseLog_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Log field path value from %s: %v", valueStr, err)
	}
	return fpv.(Log_FieldPathValue), nil
}

func MustParseLog_FieldPathValue(pathStr, valueStr string) Log_FieldPathValue {
	fpv, err := ParseLog_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Log_FieldTerminalPathValue struct {
	Log_FieldTerminalPath
	value interface{}
}

var _ Log_FieldPathValue = (*Log_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Log' as interface{}
func (fpv *Log_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Log_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Log_FieldTerminalPathValue) AsScopeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Log_FieldTerminalPathValue) AsServiceValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Log_FieldTerminalPathValue) AsRegionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Log_FieldTerminalPathValue) AsVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Log_FieldTerminalPathValue) AsLogDescriptorValue() (*log_descriptor.Reference, bool) {
	res, ok := fpv.value.(*log_descriptor.Reference)
	return res, ok
}
func (fpv *Log_FieldTerminalPathValue) AsLabelsValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}
func (fpv *Log_FieldTerminalPathValue) AsTimeValue() (*timestamppb.Timestamp, bool) {
	res, ok := fpv.value.(*timestamppb.Timestamp)
	return res, ok
}
func (fpv *Log_FieldTerminalPathValue) AsPayloadValue() (*structpb.Struct, bool) {
	res, ok := fpv.value.(*structpb.Struct)
	return res, ok
}

// SetTo stores value for selected field for object Log
func (fpv *Log_FieldTerminalPathValue) SetTo(target **Log) {
	if *target == nil {
		*target = new(Log)
	}
	switch fpv.selector {
	case Log_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Log_FieldPathSelectorScope:
		(*target).Scope = fpv.value.(string)
	case Log_FieldPathSelectorService:
		(*target).Service = fpv.value.(string)
	case Log_FieldPathSelectorRegion:
		(*target).Region = fpv.value.(string)
	case Log_FieldPathSelectorVersion:
		(*target).Version = fpv.value.(string)
	case Log_FieldPathSelectorLogDescriptor:
		(*target).LogDescriptor = fpv.value.(*log_descriptor.Reference)
	case Log_FieldPathSelectorLabels:
		(*target).Labels = fpv.value.(map[string]string)
	case Log_FieldPathSelectorTime:
		(*target).Time = fpv.value.(*timestamppb.Timestamp)
	case Log_FieldPathSelectorPayload:
		(*target).Payload = fpv.value.(*structpb.Struct)
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fpv.selector))
	}
}

func (fpv *Log_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Log)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Log_FieldTerminalPathValue' with the value under path in 'Log'.
func (fpv *Log_FieldTerminalPathValue) CompareWith(source *Log) (int, bool) {
	switch fpv.selector {
	case Log_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Log_FieldPathSelectorScope:
		leftValue := fpv.value.(string)
		rightValue := source.GetScope()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Log_FieldPathSelectorService:
		leftValue := fpv.value.(string)
		rightValue := source.GetService()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Log_FieldPathSelectorRegion:
		leftValue := fpv.value.(string)
		rightValue := source.GetRegion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Log_FieldPathSelectorVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Log_FieldPathSelectorLogDescriptor:
		leftValue := fpv.value.(*log_descriptor.Reference)
		rightValue := source.GetLogDescriptor()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Log_FieldPathSelectorLabels:
		return 0, false
	case Log_FieldPathSelectorTime:
		leftValue := fpv.value.(*timestamppb.Timestamp)
		rightValue := source.GetTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case Log_FieldPathSelectorPayload:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fpv.selector))
	}
}

func (fpv *Log_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Log))
}

type Log_FieldPathMapValue struct {
	Log_FieldPathMap
	value interface{}
}

var _ Log_FieldPathValue = (*Log_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in Log as interface{}
func (fpmv *Log_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *Log_FieldPathMapValue) AsLabelsElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in Log
func (fpmv *Log_FieldPathMapValue) SetTo(target **Log) {
	if *target == nil {
		*target = new(Log)
	}
	switch fpmv.selector {
	case Log_FieldPathSelectorLabels:
		if (*target).Labels == nil {
			(*target).Labels = make(map[string]string)
		}
		(*target).Labels[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fpmv.selector))
	}
}

func (fpmv *Log_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Log)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Log_FieldPathMapValue' with the value under path in 'Log'.
func (fpmv *Log_FieldPathMapValue) CompareWith(source *Log) (int, bool) {
	switch fpmv.selector {
	case Log_FieldPathSelectorLabels:
		leftValue := fpmv.value.(string)
		rightValue := source.GetLabels()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Log: %d", fpmv.selector))
	}
}

func (fpmv *Log_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*Log))
}

// Log_FieldPathArrayItemValue allows storing single item in Path-specific values for Log according to their type
// Present only for array (repeated) types.
type Log_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Log_FieldPath
	ContainsValue(*Log) bool
}

// ParseLog_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseLog_FieldPathArrayItemValue(pathStr, valueStr string) (Log_FieldPathArrayItemValue, error) {
	fp, err := ParseLog_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Log field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Log_FieldPathArrayItemValue), nil
}

func MustParseLog_FieldPathArrayItemValue(pathStr, valueStr string) Log_FieldPathArrayItemValue {
	fpaiv, err := ParseLog_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Log_FieldTerminalPathArrayItemValue struct {
	Log_FieldTerminalPath
	value interface{}
}

var _ Log_FieldPathArrayItemValue = (*Log_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Log as interface{}
func (fpaiv *Log_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Log_FieldTerminalPathArrayItemValue) GetSingle(source *Log) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Log_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Log))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Log'
func (fpaiv *Log_FieldTerminalPathArrayItemValue) ContainsValue(source *Log) bool {
	slice := fpaiv.Log_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// Log_FieldPathArrayOfValues allows storing slice of values for Log fields according to their type
type Log_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Log_FieldPath
}

func ParseLog_FieldPathArrayOfValues(pathStr, valuesStr string) (Log_FieldPathArrayOfValues, error) {
	fp, err := ParseLog_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Log field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Log_FieldPathArrayOfValues), nil
}

func MustParseLog_FieldPathArrayOfValues(pathStr, valuesStr string) Log_FieldPathArrayOfValues {
	fpaov, err := ParseLog_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Log_FieldTerminalPathArrayOfValues struct {
	Log_FieldTerminalPath
	values interface{}
}

var _ Log_FieldPathArrayOfValues = (*Log_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Log_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Log_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Log_FieldPathSelectorScope:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Log_FieldPathSelectorService:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Log_FieldPathSelectorRegion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Log_FieldPathSelectorVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Log_FieldPathSelectorLogDescriptor:
		for _, v := range fpaov.values.([]*log_descriptor.Reference) {
			values = append(values, v)
		}
	case Log_FieldPathSelectorLabels:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	case Log_FieldPathSelectorTime:
		for _, v := range fpaov.values.([]*timestamppb.Timestamp) {
			values = append(values, v)
		}
	case Log_FieldPathSelectorPayload:
		for _, v := range fpaov.values.([]*structpb.Struct) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Log_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Log_FieldTerminalPathArrayOfValues) AsScopeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Log_FieldTerminalPathArrayOfValues) AsServiceArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Log_FieldTerminalPathArrayOfValues) AsRegionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Log_FieldTerminalPathArrayOfValues) AsVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Log_FieldTerminalPathArrayOfValues) AsLogDescriptorArrayOfValues() ([]*log_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*log_descriptor.Reference)
	return res, ok
}
func (fpaov *Log_FieldTerminalPathArrayOfValues) AsLabelsArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}
func (fpaov *Log_FieldTerminalPathArrayOfValues) AsTimeArrayOfValues() ([]*timestamppb.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamppb.Timestamp)
	return res, ok
}
func (fpaov *Log_FieldTerminalPathArrayOfValues) AsPayloadArrayOfValues() ([]*structpb.Struct, bool) {
	res, ok := fpaov.values.([]*structpb.Struct)
	return res, ok
}

type Log_FieldPathMapArrayOfValues struct {
	Log_FieldPathMap
	values interface{}
}

var _ Log_FieldPathArrayOfValues = (*Log_FieldPathMapArrayOfValues)(nil)

func (fpmaov *Log_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case Log_FieldPathSelectorLabels:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *Log_FieldPathMapArrayOfValues) AsLabelsArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}
