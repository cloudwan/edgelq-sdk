// Code generated by protoc-gen-goten-resource
// Resource: Log
// DO NOT EDIT!!!

package log

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	log_descriptor "github.com/cloudwan/edgelq-sdk/logging/resources/v1alpha2/log_descriptor"
	structpb "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &log_descriptor.LogDescriptor{}
	_ = &structpb.Struct{}
	_ = &timestamp.Timestamp{}
)

type LogList []*Log

func (l LogList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Log))
}

func (l LogList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(LogList)...)
}

func (l LogList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LogList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l LogList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Log)
}

func (l LogList) Length() int {
	return len(l)
}

type LogNameList []*Name

func (l LogNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l LogNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(LogNameList)...)
}

func (l LogNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LogNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l LogNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l LogNameList) Length() int {
	return len(l)
}

type LogReferenceList []*Reference

func (l LogReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l LogReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(LogReferenceList)...)
}

func (l LogReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LogReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l LogReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l LogReferenceList) Length() int {
	return len(l)
}

type LogParentNameList []*ParentName

func (l LogParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l LogParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(LogParentNameList)...)
}

func (l LogParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LogParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l LogParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l LogParentNameList) Length() int {
	return len(l)
}

type LogParentReferenceList []*ParentReference

func (l LogParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l LogParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(LogParentReferenceList)...)
}

func (l LogParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LogParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l LogParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l LogParentReferenceList) Length() int {
	return len(l)
}

type LogMap map[Name]*Log

func (m LogMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m LogMap) Set(res gotenresource.Resource) {
	tRes := res.(*Log)
	m[*tRes.Name] = tRes
}

func (m LogMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m LogMap) Length() int {
	return len(m)
}

func (m LogMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
