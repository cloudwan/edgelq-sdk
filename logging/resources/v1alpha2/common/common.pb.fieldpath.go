// Code generated by protoc-gen-goten-object
// File: edgelq/logging/proto/v1alpha2/common.proto
// DO NOT EDIT!!!

package common

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &timestamppb.Timestamp{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type LabelDescriptor_FieldPath interface {
	gotenobject.FieldPath
	Selector() LabelDescriptor_FieldPathSelector
	Get(source *LabelDescriptor) []interface{}
	GetSingle(source *LabelDescriptor) (interface{}, bool)
	ClearValue(item *LabelDescriptor)

	// Those methods build corresponding LabelDescriptor_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) LabelDescriptor_FieldPathValue
	WithIArrayOfValues(values interface{}) LabelDescriptor_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) LabelDescriptor_FieldPathArrayItemValue
}

type LabelDescriptor_FieldPathSelector int32

const (
	LabelDescriptor_FieldPathSelectorKey         LabelDescriptor_FieldPathSelector = 0
	LabelDescriptor_FieldPathSelectorDescription LabelDescriptor_FieldPathSelector = 1
)

func (s LabelDescriptor_FieldPathSelector) String() string {
	switch s {
	case LabelDescriptor_FieldPathSelectorKey:
		return "key"
	case LabelDescriptor_FieldPathSelectorDescription:
		return "description"
	default:
		panic(fmt.Sprintf("Invalid selector for LabelDescriptor: %d", s))
	}
}

func BuildLabelDescriptor_FieldPath(fp gotenobject.RawFieldPath) (LabelDescriptor_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object LabelDescriptor")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "key":
			return &LabelDescriptor_FieldTerminalPath{selector: LabelDescriptor_FieldPathSelectorKey}, nil
		case "description":
			return &LabelDescriptor_FieldTerminalPath{selector: LabelDescriptor_FieldPathSelectorDescription}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object LabelDescriptor", fp)
}

func ParseLabelDescriptor_FieldPath(rawField string) (LabelDescriptor_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildLabelDescriptor_FieldPath(fp)
}

func MustParseLabelDescriptor_FieldPath(rawField string) LabelDescriptor_FieldPath {
	fp, err := ParseLabelDescriptor_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type LabelDescriptor_FieldTerminalPath struct {
	selector LabelDescriptor_FieldPathSelector
}

var _ LabelDescriptor_FieldPath = (*LabelDescriptor_FieldTerminalPath)(nil)

func (fp *LabelDescriptor_FieldTerminalPath) Selector() LabelDescriptor_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *LabelDescriptor_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *LabelDescriptor_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source LabelDescriptor
func (fp *LabelDescriptor_FieldTerminalPath) Get(source *LabelDescriptor) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case LabelDescriptor_FieldPathSelectorKey:
			values = append(values, source.Key)
		case LabelDescriptor_FieldPathSelectorDescription:
			values = append(values, source.Description)
		default:
			panic(fmt.Sprintf("Invalid selector for LabelDescriptor: %d", fp.selector))
		}
	}
	return
}

func (fp *LabelDescriptor_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*LabelDescriptor))
}

// GetSingle returns value pointed by specific field of from source LabelDescriptor
func (fp *LabelDescriptor_FieldTerminalPath) GetSingle(source *LabelDescriptor) (interface{}, bool) {
	switch fp.selector {
	case LabelDescriptor_FieldPathSelectorKey:
		return source.GetKey(), source != nil
	case LabelDescriptor_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for LabelDescriptor: %d", fp.selector))
	}
}

func (fp *LabelDescriptor_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*LabelDescriptor))
}

// GetDefault returns a default value of the field type
func (fp *LabelDescriptor_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case LabelDescriptor_FieldPathSelectorKey:
		return ""
	case LabelDescriptor_FieldPathSelectorDescription:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for LabelDescriptor: %d", fp.selector))
	}
}

func (fp *LabelDescriptor_FieldTerminalPath) ClearValue(item *LabelDescriptor) {
	if item != nil {
		switch fp.selector {
		case LabelDescriptor_FieldPathSelectorKey:
			item.Key = ""
		case LabelDescriptor_FieldPathSelectorDescription:
			item.Description = ""
		default:
			panic(fmt.Sprintf("Invalid selector for LabelDescriptor: %d", fp.selector))
		}
	}
}

func (fp *LabelDescriptor_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*LabelDescriptor))
}

// IsLeaf - whether field path is holds simple value
func (fp *LabelDescriptor_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == LabelDescriptor_FieldPathSelectorKey ||
		fp.selector == LabelDescriptor_FieldPathSelectorDescription
}

func (fp *LabelDescriptor_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *LabelDescriptor_FieldTerminalPath) WithIValue(value interface{}) LabelDescriptor_FieldPathValue {
	switch fp.selector {
	case LabelDescriptor_FieldPathSelectorKey:
		return &LabelDescriptor_FieldTerminalPathValue{LabelDescriptor_FieldTerminalPath: *fp, value: value.(string)}
	case LabelDescriptor_FieldPathSelectorDescription:
		return &LabelDescriptor_FieldTerminalPathValue{LabelDescriptor_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelDescriptor: %d", fp.selector))
	}
}

func (fp *LabelDescriptor_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *LabelDescriptor_FieldTerminalPath) WithIArrayOfValues(values interface{}) LabelDescriptor_FieldPathArrayOfValues {
	fpaov := &LabelDescriptor_FieldTerminalPathArrayOfValues{LabelDescriptor_FieldTerminalPath: *fp}
	switch fp.selector {
	case LabelDescriptor_FieldPathSelectorKey:
		return &LabelDescriptor_FieldTerminalPathArrayOfValues{LabelDescriptor_FieldTerminalPath: *fp, values: values.([]string)}
	case LabelDescriptor_FieldPathSelectorDescription:
		return &LabelDescriptor_FieldTerminalPathArrayOfValues{LabelDescriptor_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelDescriptor: %d", fp.selector))
	}
	return fpaov
}

func (fp *LabelDescriptor_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *LabelDescriptor_FieldTerminalPath) WithIArrayItemValue(value interface{}) LabelDescriptor_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for LabelDescriptor: %d", fp.selector))
	}
}

func (fp *LabelDescriptor_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// LabelDescriptor_FieldPathValue allows storing values for LabelDescriptor fields according to their type
type LabelDescriptor_FieldPathValue interface {
	LabelDescriptor_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **LabelDescriptor)
	CompareWith(*LabelDescriptor) (cmp int, comparable bool)
}

func ParseLabelDescriptor_FieldPathValue(pathStr, valueStr string) (LabelDescriptor_FieldPathValue, error) {
	fp, err := ParseLabelDescriptor_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LabelDescriptor field path value from %s: %v", valueStr, err)
	}
	return fpv.(LabelDescriptor_FieldPathValue), nil
}

func MustParseLabelDescriptor_FieldPathValue(pathStr, valueStr string) LabelDescriptor_FieldPathValue {
	fpv, err := ParseLabelDescriptor_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type LabelDescriptor_FieldTerminalPathValue struct {
	LabelDescriptor_FieldTerminalPath
	value interface{}
}

var _ LabelDescriptor_FieldPathValue = (*LabelDescriptor_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'LabelDescriptor' as interface{}
func (fpv *LabelDescriptor_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *LabelDescriptor_FieldTerminalPathValue) AsKeyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *LabelDescriptor_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object LabelDescriptor
func (fpv *LabelDescriptor_FieldTerminalPathValue) SetTo(target **LabelDescriptor) {
	if *target == nil {
		*target = new(LabelDescriptor)
	}
	switch fpv.selector {
	case LabelDescriptor_FieldPathSelectorKey:
		(*target).Key = fpv.value.(string)
	case LabelDescriptor_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for LabelDescriptor: %d", fpv.selector))
	}
}

func (fpv *LabelDescriptor_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*LabelDescriptor)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'LabelDescriptor_FieldTerminalPathValue' with the value under path in 'LabelDescriptor'.
func (fpv *LabelDescriptor_FieldTerminalPathValue) CompareWith(source *LabelDescriptor) (int, bool) {
	switch fpv.selector {
	case LabelDescriptor_FieldPathSelectorKey:
		leftValue := fpv.value.(string)
		rightValue := source.GetKey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case LabelDescriptor_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelDescriptor: %d", fpv.selector))
	}
}

func (fpv *LabelDescriptor_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*LabelDescriptor))
}

// LabelDescriptor_FieldPathArrayItemValue allows storing single item in Path-specific values for LabelDescriptor according to their type
// Present only for array (repeated) types.
type LabelDescriptor_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	LabelDescriptor_FieldPath
	ContainsValue(*LabelDescriptor) bool
}

// ParseLabelDescriptor_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseLabelDescriptor_FieldPathArrayItemValue(pathStr, valueStr string) (LabelDescriptor_FieldPathArrayItemValue, error) {
	fp, err := ParseLabelDescriptor_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LabelDescriptor field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(LabelDescriptor_FieldPathArrayItemValue), nil
}

func MustParseLabelDescriptor_FieldPathArrayItemValue(pathStr, valueStr string) LabelDescriptor_FieldPathArrayItemValue {
	fpaiv, err := ParseLabelDescriptor_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type LabelDescriptor_FieldTerminalPathArrayItemValue struct {
	LabelDescriptor_FieldTerminalPath
	value interface{}
}

var _ LabelDescriptor_FieldPathArrayItemValue = (*LabelDescriptor_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object LabelDescriptor as interface{}
func (fpaiv *LabelDescriptor_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *LabelDescriptor_FieldTerminalPathArrayItemValue) GetSingle(source *LabelDescriptor) (interface{}, bool) {
	return nil, false
}

func (fpaiv *LabelDescriptor_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*LabelDescriptor))
}

// Contains returns a boolean indicating if value that is being held is present in given 'LabelDescriptor'
func (fpaiv *LabelDescriptor_FieldTerminalPathArrayItemValue) ContainsValue(source *LabelDescriptor) bool {
	slice := fpaiv.LabelDescriptor_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// LabelDescriptor_FieldPathArrayOfValues allows storing slice of values for LabelDescriptor fields according to their type
type LabelDescriptor_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	LabelDescriptor_FieldPath
}

func ParseLabelDescriptor_FieldPathArrayOfValues(pathStr, valuesStr string) (LabelDescriptor_FieldPathArrayOfValues, error) {
	fp, err := ParseLabelDescriptor_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LabelDescriptor field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(LabelDescriptor_FieldPathArrayOfValues), nil
}

func MustParseLabelDescriptor_FieldPathArrayOfValues(pathStr, valuesStr string) LabelDescriptor_FieldPathArrayOfValues {
	fpaov, err := ParseLabelDescriptor_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type LabelDescriptor_FieldTerminalPathArrayOfValues struct {
	LabelDescriptor_FieldTerminalPath
	values interface{}
}

var _ LabelDescriptor_FieldPathArrayOfValues = (*LabelDescriptor_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *LabelDescriptor_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case LabelDescriptor_FieldPathSelectorKey:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case LabelDescriptor_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *LabelDescriptor_FieldTerminalPathArrayOfValues) AsKeyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *LabelDescriptor_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type LabelKeySet_FieldPath interface {
	gotenobject.FieldPath
	Selector() LabelKeySet_FieldPathSelector
	Get(source *LabelKeySet) []interface{}
	GetSingle(source *LabelKeySet) (interface{}, bool)
	ClearValue(item *LabelKeySet)

	// Those methods build corresponding LabelKeySet_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) LabelKeySet_FieldPathValue
	WithIArrayOfValues(values interface{}) LabelKeySet_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) LabelKeySet_FieldPathArrayItemValue
}

type LabelKeySet_FieldPathSelector int32

const (
	LabelKeySet_FieldPathSelectorLabelKeys LabelKeySet_FieldPathSelector = 0
)

func (s LabelKeySet_FieldPathSelector) String() string {
	switch s {
	case LabelKeySet_FieldPathSelectorLabelKeys:
		return "label_keys"
	default:
		panic(fmt.Sprintf("Invalid selector for LabelKeySet: %d", s))
	}
}

func BuildLabelKeySet_FieldPath(fp gotenobject.RawFieldPath) (LabelKeySet_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object LabelKeySet")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "label_keys", "labelKeys", "label-keys":
			return &LabelKeySet_FieldTerminalPath{selector: LabelKeySet_FieldPathSelectorLabelKeys}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object LabelKeySet", fp)
}

func ParseLabelKeySet_FieldPath(rawField string) (LabelKeySet_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildLabelKeySet_FieldPath(fp)
}

func MustParseLabelKeySet_FieldPath(rawField string) LabelKeySet_FieldPath {
	fp, err := ParseLabelKeySet_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type LabelKeySet_FieldTerminalPath struct {
	selector LabelKeySet_FieldPathSelector
}

var _ LabelKeySet_FieldPath = (*LabelKeySet_FieldTerminalPath)(nil)

func (fp *LabelKeySet_FieldTerminalPath) Selector() LabelKeySet_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *LabelKeySet_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *LabelKeySet_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source LabelKeySet
func (fp *LabelKeySet_FieldTerminalPath) Get(source *LabelKeySet) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case LabelKeySet_FieldPathSelectorLabelKeys:
			for _, value := range source.GetLabelKeys() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for LabelKeySet: %d", fp.selector))
		}
	}
	return
}

func (fp *LabelKeySet_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*LabelKeySet))
}

// GetSingle returns value pointed by specific field of from source LabelKeySet
func (fp *LabelKeySet_FieldTerminalPath) GetSingle(source *LabelKeySet) (interface{}, bool) {
	switch fp.selector {
	case LabelKeySet_FieldPathSelectorLabelKeys:
		res := source.GetLabelKeys()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for LabelKeySet: %d", fp.selector))
	}
}

func (fp *LabelKeySet_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*LabelKeySet))
}

// GetDefault returns a default value of the field type
func (fp *LabelKeySet_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case LabelKeySet_FieldPathSelectorLabelKeys:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for LabelKeySet: %d", fp.selector))
	}
}

func (fp *LabelKeySet_FieldTerminalPath) ClearValue(item *LabelKeySet) {
	if item != nil {
		switch fp.selector {
		case LabelKeySet_FieldPathSelectorLabelKeys:
			item.LabelKeys = nil
		default:
			panic(fmt.Sprintf("Invalid selector for LabelKeySet: %d", fp.selector))
		}
	}
}

func (fp *LabelKeySet_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*LabelKeySet))
}

// IsLeaf - whether field path is holds simple value
func (fp *LabelKeySet_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == LabelKeySet_FieldPathSelectorLabelKeys
}

func (fp *LabelKeySet_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *LabelKeySet_FieldTerminalPath) WithIValue(value interface{}) LabelKeySet_FieldPathValue {
	switch fp.selector {
	case LabelKeySet_FieldPathSelectorLabelKeys:
		return &LabelKeySet_FieldTerminalPathValue{LabelKeySet_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelKeySet: %d", fp.selector))
	}
}

func (fp *LabelKeySet_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *LabelKeySet_FieldTerminalPath) WithIArrayOfValues(values interface{}) LabelKeySet_FieldPathArrayOfValues {
	fpaov := &LabelKeySet_FieldTerminalPathArrayOfValues{LabelKeySet_FieldTerminalPath: *fp}
	switch fp.selector {
	case LabelKeySet_FieldPathSelectorLabelKeys:
		return &LabelKeySet_FieldTerminalPathArrayOfValues{LabelKeySet_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelKeySet: %d", fp.selector))
	}
	return fpaov
}

func (fp *LabelKeySet_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *LabelKeySet_FieldTerminalPath) WithIArrayItemValue(value interface{}) LabelKeySet_FieldPathArrayItemValue {
	switch fp.selector {
	case LabelKeySet_FieldPathSelectorLabelKeys:
		return &LabelKeySet_FieldTerminalPathArrayItemValue{LabelKeySet_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelKeySet: %d", fp.selector))
	}
}

func (fp *LabelKeySet_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// LabelKeySet_FieldPathValue allows storing values for LabelKeySet fields according to their type
type LabelKeySet_FieldPathValue interface {
	LabelKeySet_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **LabelKeySet)
	CompareWith(*LabelKeySet) (cmp int, comparable bool)
}

func ParseLabelKeySet_FieldPathValue(pathStr, valueStr string) (LabelKeySet_FieldPathValue, error) {
	fp, err := ParseLabelKeySet_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LabelKeySet field path value from %s: %v", valueStr, err)
	}
	return fpv.(LabelKeySet_FieldPathValue), nil
}

func MustParseLabelKeySet_FieldPathValue(pathStr, valueStr string) LabelKeySet_FieldPathValue {
	fpv, err := ParseLabelKeySet_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type LabelKeySet_FieldTerminalPathValue struct {
	LabelKeySet_FieldTerminalPath
	value interface{}
}

var _ LabelKeySet_FieldPathValue = (*LabelKeySet_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'LabelKeySet' as interface{}
func (fpv *LabelKeySet_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *LabelKeySet_FieldTerminalPathValue) AsLabelKeysValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object LabelKeySet
func (fpv *LabelKeySet_FieldTerminalPathValue) SetTo(target **LabelKeySet) {
	if *target == nil {
		*target = new(LabelKeySet)
	}
	switch fpv.selector {
	case LabelKeySet_FieldPathSelectorLabelKeys:
		(*target).LabelKeys = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for LabelKeySet: %d", fpv.selector))
	}
}

func (fpv *LabelKeySet_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*LabelKeySet)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'LabelKeySet_FieldTerminalPathValue' with the value under path in 'LabelKeySet'.
func (fpv *LabelKeySet_FieldTerminalPathValue) CompareWith(source *LabelKeySet) (int, bool) {
	switch fpv.selector {
	case LabelKeySet_FieldPathSelectorLabelKeys:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for LabelKeySet: %d", fpv.selector))
	}
}

func (fpv *LabelKeySet_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*LabelKeySet))
}

// LabelKeySet_FieldPathArrayItemValue allows storing single item in Path-specific values for LabelKeySet according to their type
// Present only for array (repeated) types.
type LabelKeySet_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	LabelKeySet_FieldPath
	ContainsValue(*LabelKeySet) bool
}

// ParseLabelKeySet_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseLabelKeySet_FieldPathArrayItemValue(pathStr, valueStr string) (LabelKeySet_FieldPathArrayItemValue, error) {
	fp, err := ParseLabelKeySet_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LabelKeySet field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(LabelKeySet_FieldPathArrayItemValue), nil
}

func MustParseLabelKeySet_FieldPathArrayItemValue(pathStr, valueStr string) LabelKeySet_FieldPathArrayItemValue {
	fpaiv, err := ParseLabelKeySet_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type LabelKeySet_FieldTerminalPathArrayItemValue struct {
	LabelKeySet_FieldTerminalPath
	value interface{}
}

var _ LabelKeySet_FieldPathArrayItemValue = (*LabelKeySet_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object LabelKeySet as interface{}
func (fpaiv *LabelKeySet_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *LabelKeySet_FieldTerminalPathArrayItemValue) AsLabelKeysItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *LabelKeySet_FieldTerminalPathArrayItemValue) GetSingle(source *LabelKeySet) (interface{}, bool) {
	return nil, false
}

func (fpaiv *LabelKeySet_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*LabelKeySet))
}

// Contains returns a boolean indicating if value that is being held is present in given 'LabelKeySet'
func (fpaiv *LabelKeySet_FieldTerminalPathArrayItemValue) ContainsValue(source *LabelKeySet) bool {
	slice := fpaiv.LabelKeySet_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// LabelKeySet_FieldPathArrayOfValues allows storing slice of values for LabelKeySet fields according to their type
type LabelKeySet_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	LabelKeySet_FieldPath
}

func ParseLabelKeySet_FieldPathArrayOfValues(pathStr, valuesStr string) (LabelKeySet_FieldPathArrayOfValues, error) {
	fp, err := ParseLabelKeySet_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LabelKeySet field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(LabelKeySet_FieldPathArrayOfValues), nil
}

func MustParseLabelKeySet_FieldPathArrayOfValues(pathStr, valuesStr string) LabelKeySet_FieldPathArrayOfValues {
	fpaov, err := ParseLabelKeySet_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type LabelKeySet_FieldTerminalPathArrayOfValues struct {
	LabelKeySet_FieldTerminalPath
	values interface{}
}

var _ LabelKeySet_FieldPathArrayOfValues = (*LabelKeySet_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *LabelKeySet_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case LabelKeySet_FieldPathSelectorLabelKeys:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *LabelKeySet_FieldTerminalPathArrayOfValues) AsLabelKeysArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TimeInterval_FieldPath interface {
	gotenobject.FieldPath
	Selector() TimeInterval_FieldPathSelector
	Get(source *TimeInterval) []interface{}
	GetSingle(source *TimeInterval) (interface{}, bool)
	ClearValue(item *TimeInterval)

	// Those methods build corresponding TimeInterval_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TimeInterval_FieldPathValue
	WithIArrayOfValues(values interface{}) TimeInterval_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TimeInterval_FieldPathArrayItemValue
}

type TimeInterval_FieldPathSelector int32

const (
	TimeInterval_FieldPathSelectorEndTime   TimeInterval_FieldPathSelector = 0
	TimeInterval_FieldPathSelectorStartTime TimeInterval_FieldPathSelector = 1
)

func (s TimeInterval_FieldPathSelector) String() string {
	switch s {
	case TimeInterval_FieldPathSelectorEndTime:
		return "end_time"
	case TimeInterval_FieldPathSelectorStartTime:
		return "start_time"
	default:
		panic(fmt.Sprintf("Invalid selector for TimeInterval: %d", s))
	}
}

func BuildTimeInterval_FieldPath(fp gotenobject.RawFieldPath) (TimeInterval_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TimeInterval")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "end_time", "endTime", "end-time":
			return &TimeInterval_FieldTerminalPath{selector: TimeInterval_FieldPathSelectorEndTime}, nil
		case "start_time", "startTime", "start-time":
			return &TimeInterval_FieldTerminalPath{selector: TimeInterval_FieldPathSelectorStartTime}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TimeInterval", fp)
}

func ParseTimeInterval_FieldPath(rawField string) (TimeInterval_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTimeInterval_FieldPath(fp)
}

func MustParseTimeInterval_FieldPath(rawField string) TimeInterval_FieldPath {
	fp, err := ParseTimeInterval_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TimeInterval_FieldTerminalPath struct {
	selector TimeInterval_FieldPathSelector
}

var _ TimeInterval_FieldPath = (*TimeInterval_FieldTerminalPath)(nil)

func (fp *TimeInterval_FieldTerminalPath) Selector() TimeInterval_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TimeInterval_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TimeInterval_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TimeInterval
func (fp *TimeInterval_FieldTerminalPath) Get(source *TimeInterval) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TimeInterval_FieldPathSelectorEndTime:
			if source.EndTime != nil {
				values = append(values, source.EndTime)
			}
		case TimeInterval_FieldPathSelectorStartTime:
			if source.StartTime != nil {
				values = append(values, source.StartTime)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TimeInterval: %d", fp.selector))
		}
	}
	return
}

func (fp *TimeInterval_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TimeInterval))
}

// GetSingle returns value pointed by specific field of from source TimeInterval
func (fp *TimeInterval_FieldTerminalPath) GetSingle(source *TimeInterval) (interface{}, bool) {
	switch fp.selector {
	case TimeInterval_FieldPathSelectorEndTime:
		res := source.GetEndTime()
		return res, res != nil
	case TimeInterval_FieldPathSelectorStartTime:
		res := source.GetStartTime()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TimeInterval: %d", fp.selector))
	}
}

func (fp *TimeInterval_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TimeInterval))
}

// GetDefault returns a default value of the field type
func (fp *TimeInterval_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TimeInterval_FieldPathSelectorEndTime:
		return (*timestamppb.Timestamp)(nil)
	case TimeInterval_FieldPathSelectorStartTime:
		return (*timestamppb.Timestamp)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeInterval: %d", fp.selector))
	}
}

func (fp *TimeInterval_FieldTerminalPath) ClearValue(item *TimeInterval) {
	if item != nil {
		switch fp.selector {
		case TimeInterval_FieldPathSelectorEndTime:
			item.EndTime = nil
		case TimeInterval_FieldPathSelectorStartTime:
			item.StartTime = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TimeInterval: %d", fp.selector))
		}
	}
}

func (fp *TimeInterval_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TimeInterval))
}

// IsLeaf - whether field path is holds simple value
func (fp *TimeInterval_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TimeInterval_FieldPathSelectorEndTime ||
		fp.selector == TimeInterval_FieldPathSelectorStartTime
}

func (fp *TimeInterval_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TimeInterval_FieldTerminalPath) WithIValue(value interface{}) TimeInterval_FieldPathValue {
	switch fp.selector {
	case TimeInterval_FieldPathSelectorEndTime:
		return &TimeInterval_FieldTerminalPathValue{TimeInterval_FieldTerminalPath: *fp, value: value.(*timestamppb.Timestamp)}
	case TimeInterval_FieldPathSelectorStartTime:
		return &TimeInterval_FieldTerminalPathValue{TimeInterval_FieldTerminalPath: *fp, value: value.(*timestamppb.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeInterval: %d", fp.selector))
	}
}

func (fp *TimeInterval_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TimeInterval_FieldTerminalPath) WithIArrayOfValues(values interface{}) TimeInterval_FieldPathArrayOfValues {
	fpaov := &TimeInterval_FieldTerminalPathArrayOfValues{TimeInterval_FieldTerminalPath: *fp}
	switch fp.selector {
	case TimeInterval_FieldPathSelectorEndTime:
		return &TimeInterval_FieldTerminalPathArrayOfValues{TimeInterval_FieldTerminalPath: *fp, values: values.([]*timestamppb.Timestamp)}
	case TimeInterval_FieldPathSelectorStartTime:
		return &TimeInterval_FieldTerminalPathArrayOfValues{TimeInterval_FieldTerminalPath: *fp, values: values.([]*timestamppb.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeInterval: %d", fp.selector))
	}
	return fpaov
}

func (fp *TimeInterval_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TimeInterval_FieldTerminalPath) WithIArrayItemValue(value interface{}) TimeInterval_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for TimeInterval: %d", fp.selector))
	}
}

func (fp *TimeInterval_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// TimeInterval_FieldPathValue allows storing values for TimeInterval fields according to their type
type TimeInterval_FieldPathValue interface {
	TimeInterval_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TimeInterval)
	CompareWith(*TimeInterval) (cmp int, comparable bool)
}

func ParseTimeInterval_FieldPathValue(pathStr, valueStr string) (TimeInterval_FieldPathValue, error) {
	fp, err := ParseTimeInterval_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TimeInterval field path value from %s: %v", valueStr, err)
	}
	return fpv.(TimeInterval_FieldPathValue), nil
}

func MustParseTimeInterval_FieldPathValue(pathStr, valueStr string) TimeInterval_FieldPathValue {
	fpv, err := ParseTimeInterval_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TimeInterval_FieldTerminalPathValue struct {
	TimeInterval_FieldTerminalPath
	value interface{}
}

var _ TimeInterval_FieldPathValue = (*TimeInterval_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'TimeInterval' as interface{}
func (fpv *TimeInterval_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TimeInterval_FieldTerminalPathValue) AsEndTimeValue() (*timestamppb.Timestamp, bool) {
	res, ok := fpv.value.(*timestamppb.Timestamp)
	return res, ok
}
func (fpv *TimeInterval_FieldTerminalPathValue) AsStartTimeValue() (*timestamppb.Timestamp, bool) {
	res, ok := fpv.value.(*timestamppb.Timestamp)
	return res, ok
}

// SetTo stores value for selected field for object TimeInterval
func (fpv *TimeInterval_FieldTerminalPathValue) SetTo(target **TimeInterval) {
	if *target == nil {
		*target = new(TimeInterval)
	}
	switch fpv.selector {
	case TimeInterval_FieldPathSelectorEndTime:
		(*target).EndTime = fpv.value.(*timestamppb.Timestamp)
	case TimeInterval_FieldPathSelectorStartTime:
		(*target).StartTime = fpv.value.(*timestamppb.Timestamp)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeInterval: %d", fpv.selector))
	}
}

func (fpv *TimeInterval_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TimeInterval)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TimeInterval_FieldTerminalPathValue' with the value under path in 'TimeInterval'.
func (fpv *TimeInterval_FieldTerminalPathValue) CompareWith(source *TimeInterval) (int, bool) {
	switch fpv.selector {
	case TimeInterval_FieldPathSelectorEndTime:
		leftValue := fpv.value.(*timestamppb.Timestamp)
		rightValue := source.GetEndTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case TimeInterval_FieldPathSelectorStartTime:
		leftValue := fpv.value.(*timestamppb.Timestamp)
		rightValue := source.GetStartTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeInterval: %d", fpv.selector))
	}
}

func (fpv *TimeInterval_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TimeInterval))
}

// TimeInterval_FieldPathArrayItemValue allows storing single item in Path-specific values for TimeInterval according to their type
// Present only for array (repeated) types.
type TimeInterval_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TimeInterval_FieldPath
	ContainsValue(*TimeInterval) bool
}

// ParseTimeInterval_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTimeInterval_FieldPathArrayItemValue(pathStr, valueStr string) (TimeInterval_FieldPathArrayItemValue, error) {
	fp, err := ParseTimeInterval_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TimeInterval field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TimeInterval_FieldPathArrayItemValue), nil
}

func MustParseTimeInterval_FieldPathArrayItemValue(pathStr, valueStr string) TimeInterval_FieldPathArrayItemValue {
	fpaiv, err := ParseTimeInterval_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TimeInterval_FieldTerminalPathArrayItemValue struct {
	TimeInterval_FieldTerminalPath
	value interface{}
}

var _ TimeInterval_FieldPathArrayItemValue = (*TimeInterval_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TimeInterval as interface{}
func (fpaiv *TimeInterval_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *TimeInterval_FieldTerminalPathArrayItemValue) GetSingle(source *TimeInterval) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TimeInterval_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TimeInterval))
}

// Contains returns a boolean indicating if value that is being held is present in given 'TimeInterval'
func (fpaiv *TimeInterval_FieldTerminalPathArrayItemValue) ContainsValue(source *TimeInterval) bool {
	slice := fpaiv.TimeInterval_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// TimeInterval_FieldPathArrayOfValues allows storing slice of values for TimeInterval fields according to their type
type TimeInterval_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TimeInterval_FieldPath
}

func ParseTimeInterval_FieldPathArrayOfValues(pathStr, valuesStr string) (TimeInterval_FieldPathArrayOfValues, error) {
	fp, err := ParseTimeInterval_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TimeInterval field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TimeInterval_FieldPathArrayOfValues), nil
}

func MustParseTimeInterval_FieldPathArrayOfValues(pathStr, valuesStr string) TimeInterval_FieldPathArrayOfValues {
	fpaov, err := ParseTimeInterval_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TimeInterval_FieldTerminalPathArrayOfValues struct {
	TimeInterval_FieldTerminalPath
	values interface{}
}

var _ TimeInterval_FieldPathArrayOfValues = (*TimeInterval_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TimeInterval_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TimeInterval_FieldPathSelectorEndTime:
		for _, v := range fpaov.values.([]*timestamppb.Timestamp) {
			values = append(values, v)
		}
	case TimeInterval_FieldPathSelectorStartTime:
		for _, v := range fpaov.values.([]*timestamppb.Timestamp) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TimeInterval_FieldTerminalPathArrayOfValues) AsEndTimeArrayOfValues() ([]*timestamppb.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamppb.Timestamp)
	return res, ok
}
func (fpaov *TimeInterval_FieldTerminalPathArrayOfValues) AsStartTimeArrayOfValues() ([]*timestamppb.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamppb.Timestamp)
	return res, ok
}
