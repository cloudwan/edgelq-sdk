// Code generated by protoc-gen-goten-object
// File: edgelq/logging/proto/v1/bucket.proto
// DO NOT EDIT!!!

package bucket

import (
	"encoding/json"
	"strings"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	log_descriptor "github.com/cloudwan/edgelq-sdk/logging/resources/v1/log_descriptor"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &log_descriptor.LogDescriptor{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

type Bucket_FieldMask struct {
	Paths []Bucket_FieldPath
}

func FullBucket_FieldMask() *Bucket_FieldMask {
	res := &Bucket_FieldMask{}
	res.Paths = append(res.Paths, &Bucket_FieldTerminalPath{selector: Bucket_FieldPathSelectorName})
	res.Paths = append(res.Paths, &Bucket_FieldTerminalPath{selector: Bucket_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &Bucket_FieldTerminalPath{selector: Bucket_FieldPathSelectorServices})
	res.Paths = append(res.Paths, &Bucket_FieldTerminalPath{selector: Bucket_FieldPathSelectorVersions})
	res.Paths = append(res.Paths, &Bucket_FieldTerminalPath{selector: Bucket_FieldPathSelectorLogs})
	res.Paths = append(res.Paths, &Bucket_FieldTerminalPath{selector: Bucket_FieldPathSelectorRequiredAltKvs})
	return res
}

func (fieldMask *Bucket_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Bucket_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Bucket_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Bucket_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBucket_FieldPath(raw)
	})
}

func (fieldMask *Bucket_FieldMask) ProtoMessage() {}

func (fieldMask *Bucket_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Bucket_FieldMask) Subtract(other *Bucket_FieldMask) *Bucket_FieldMask {
	result := &Bucket_FieldMask{}
	removedSelectors := make([]bool, 6)
	otherSubMasks := map[Bucket_FieldPathSelector]gotenobject.FieldMask{
		Bucket_FieldPathSelectorMetadata:       &meta.Meta_FieldMask{},
		Bucket_FieldPathSelectorLogs:           &Bucket_RequiredTypedLabels_FieldMask{},
		Bucket_FieldPathSelectorRequiredAltKvs: &Bucket_ResolvedKeysWithValues_FieldMask{},
	}
	mySubMasks := map[Bucket_FieldPathSelector]gotenobject.FieldMask{
		Bucket_FieldPathSelectorMetadata:       &meta.Meta_FieldMask{},
		Bucket_FieldPathSelectorLogs:           &Bucket_RequiredTypedLabels_FieldMask{},
		Bucket_FieldPathSelectorRequiredAltKvs: &Bucket_ResolvedKeysWithValues_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Bucket_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Bucket_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Bucket_FieldTerminalPath); ok {
					switch tp.selector {
					case Bucket_FieldPathSelectorMetadata:
						mySubMasks[Bucket_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case Bucket_FieldPathSelectorLogs:
						mySubMasks[Bucket_FieldPathSelectorLogs] = FullBucket_RequiredTypedLabels_FieldMask()
					case Bucket_FieldPathSelectorRequiredAltKvs:
						mySubMasks[Bucket_FieldPathSelectorRequiredAltKvs] = FullBucket_ResolvedKeysWithValues_FieldMask()
					}
				} else if tp, ok := path.(*Bucket_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Bucket_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Bucket_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Bucket_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Bucket_FieldMask) FilterInputFields() *Bucket_FieldMask {
	result := &Bucket_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case Bucket_FieldPathSelectorRequiredAltKvs:
		case Bucket_FieldPathSelectorMetadata:
			if _, ok := path.(*Bucket_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Bucket_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Bucket_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Bucket_FieldSubPath{selector: Bucket_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Bucket_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Bucket_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Bucket_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBucket_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Bucket_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Bucket_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Bucket_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Bucket_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Bucket_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Bucket_FieldMask) AppendPath(path Bucket_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Bucket_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Bucket_FieldPath))
}

func (fieldMask *Bucket_FieldMask) GetPaths() []Bucket_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Bucket_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Bucket_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBucket_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Bucket_FieldMask) Set(target, source *Bucket) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Bucket_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Bucket), source.(*Bucket))
}

func (fieldMask *Bucket_FieldMask) Project(source *Bucket) *Bucket {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Bucket{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	logsMask := &Bucket_RequiredTypedLabels_FieldMask{}
	wholeLogsAccepted := false
	requiredAltKvsMask := &Bucket_ResolvedKeysWithValues_FieldMask{}
	wholeRequiredAltKvsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Bucket_FieldTerminalPath:
			switch tp.selector {
			case Bucket_FieldPathSelectorName:
				result.Name = source.Name
			case Bucket_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case Bucket_FieldPathSelectorServices:
				result.Services = source.Services
			case Bucket_FieldPathSelectorVersions:
				result.Versions = source.Versions
			case Bucket_FieldPathSelectorLogs:
				result.Logs = source.Logs
				wholeLogsAccepted = true
			case Bucket_FieldPathSelectorRequiredAltKvs:
				result.RequiredAltKvs = source.RequiredAltKvs
				wholeRequiredAltKvsAccepted = true
			}
		case *Bucket_FieldSubPath:
			switch tp.selector {
			case Bucket_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case Bucket_FieldPathSelectorLogs:
				logsMask.AppendPath(tp.subPath.(BucketRequiredTypedLabels_FieldPath))
			case Bucket_FieldPathSelectorRequiredAltKvs:
				requiredAltKvsMask.AppendPath(tp.subPath.(BucketResolvedKeysWithValues_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeLogsAccepted == false && len(logsMask.Paths) > 0 {
		for _, sourceItem := range source.GetLogs() {
			result.Logs = append(result.Logs, logsMask.Project(sourceItem))
		}
	}
	if wholeRequiredAltKvsAccepted == false && len(requiredAltKvsMask.Paths) > 0 {
		for _, sourceItem := range source.GetRequiredAltKvs() {
			result.RequiredAltKvs = append(result.RequiredAltKvs, requiredAltKvsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Bucket_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Bucket))
}

func (fieldMask *Bucket_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Bucket_ResolvedValues_FieldMask struct {
	Paths []BucketResolvedValues_FieldPath
}

func FullBucket_ResolvedValues_FieldMask() *Bucket_ResolvedValues_FieldMask {
	res := &Bucket_ResolvedValues_FieldMask{}
	res.Paths = append(res.Paths, &BucketResolvedValues_FieldTerminalPath{selector: BucketResolvedValues_FieldPathSelectorKey})
	res.Paths = append(res.Paths, &BucketResolvedValues_FieldTerminalPath{selector: BucketResolvedValues_FieldPathSelectorValues})
	return res
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BucketResolvedValues_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBucketResolvedValues_FieldPath(raw)
	})
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) ProtoMessage() {}

func (fieldMask *Bucket_ResolvedValues_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) Subtract(other *Bucket_ResolvedValues_FieldMask) *Bucket_ResolvedValues_FieldMask {
	result := &Bucket_ResolvedValues_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BucketResolvedValues_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Bucket_ResolvedValues_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Bucket_ResolvedValues_FieldMask) FilterInputFields() *Bucket_ResolvedValues_FieldMask {
	result := &Bucket_ResolvedValues_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Bucket_ResolvedValues_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BucketResolvedValues_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBucketResolvedValues_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Bucket_ResolvedValues_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Bucket_ResolvedValues_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) AppendPath(path BucketResolvedValues_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BucketResolvedValues_FieldPath))
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) GetPaths() []BucketResolvedValues_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBucketResolvedValues_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) Set(target, source *Bucket_ResolvedValues) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Bucket_ResolvedValues), source.(*Bucket_ResolvedValues))
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) Project(source *Bucket_ResolvedValues) *Bucket_ResolvedValues {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Bucket_ResolvedValues{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BucketResolvedValues_FieldTerminalPath:
			switch tp.selector {
			case BucketResolvedValues_FieldPathSelectorKey:
				result.Key = source.Key
			case BucketResolvedValues_FieldPathSelectorValues:
				result.Values = source.Values
			}
		}
	}
	return result
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Bucket_ResolvedValues))
}

func (fieldMask *Bucket_ResolvedValues_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Bucket_ResolvedKeysWithValues_FieldMask struct {
	Paths []BucketResolvedKeysWithValues_FieldPath
}

func FullBucket_ResolvedKeysWithValues_FieldMask() *Bucket_ResolvedKeysWithValues_FieldMask {
	res := &Bucket_ResolvedKeysWithValues_FieldMask{}
	res.Paths = append(res.Paths, &BucketResolvedKeysWithValues_FieldTerminalPath{selector: BucketResolvedKeysWithValues_FieldPathSelectorResolvedKvs})
	return res
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BucketResolvedKeysWithValues_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBucketResolvedKeysWithValues_FieldPath(raw)
	})
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) ProtoMessage() {}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) Subtract(other *Bucket_ResolvedKeysWithValues_FieldMask) *Bucket_ResolvedKeysWithValues_FieldMask {
	result := &Bucket_ResolvedKeysWithValues_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[BucketResolvedKeysWithValues_FieldPathSelector]gotenobject.FieldMask{
		BucketResolvedKeysWithValues_FieldPathSelectorResolvedKvs: &Bucket_ResolvedValues_FieldMask{},
	}
	mySubMasks := map[BucketResolvedKeysWithValues_FieldPathSelector]gotenobject.FieldMask{
		BucketResolvedKeysWithValues_FieldPathSelectorResolvedKvs: &Bucket_ResolvedValues_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BucketResolvedKeysWithValues_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BucketResolvedKeysWithValues_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BucketResolvedKeysWithValues_FieldTerminalPath); ok {
					switch tp.selector {
					case BucketResolvedKeysWithValues_FieldPathSelectorResolvedKvs:
						mySubMasks[BucketResolvedKeysWithValues_FieldPathSelectorResolvedKvs] = FullBucket_ResolvedValues_FieldMask()
					}
				} else if tp, ok := path.(*BucketResolvedKeysWithValues_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BucketResolvedKeysWithValues_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Bucket_ResolvedKeysWithValues_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) FilterInputFields() *Bucket_ResolvedKeysWithValues_FieldMask {
	result := &Bucket_ResolvedKeysWithValues_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BucketResolvedKeysWithValues_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBucketResolvedKeysWithValues_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Bucket_ResolvedKeysWithValues_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Bucket_ResolvedKeysWithValues_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) AppendPath(path BucketResolvedKeysWithValues_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BucketResolvedKeysWithValues_FieldPath))
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) GetPaths() []BucketResolvedKeysWithValues_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBucketResolvedKeysWithValues_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) Set(target, source *Bucket_ResolvedKeysWithValues) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Bucket_ResolvedKeysWithValues), source.(*Bucket_ResolvedKeysWithValues))
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) Project(source *Bucket_ResolvedKeysWithValues) *Bucket_ResolvedKeysWithValues {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Bucket_ResolvedKeysWithValues{}
	resolvedKvsMask := &Bucket_ResolvedValues_FieldMask{}
	wholeResolvedKvsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BucketResolvedKeysWithValues_FieldTerminalPath:
			switch tp.selector {
			case BucketResolvedKeysWithValues_FieldPathSelectorResolvedKvs:
				result.ResolvedKvs = source.ResolvedKvs
				wholeResolvedKvsAccepted = true
			}
		case *BucketResolvedKeysWithValues_FieldSubPath:
			switch tp.selector {
			case BucketResolvedKeysWithValues_FieldPathSelectorResolvedKvs:
				resolvedKvsMask.AppendPath(tp.subPath.(BucketResolvedValues_FieldPath))
			}
		}
	}
	if wholeResolvedKvsAccepted == false && len(resolvedKvsMask.Paths) > 0 {
		for _, sourceItem := range source.GetResolvedKvs() {
			result.ResolvedKvs = append(result.ResolvedKvs, resolvedKvsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Bucket_ResolvedKeysWithValues))
}

func (fieldMask *Bucket_ResolvedKeysWithValues_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Bucket_RequiredTypedLabels_FieldMask struct {
	Paths []BucketRequiredTypedLabels_FieldPath
}

func FullBucket_RequiredTypedLabels_FieldMask() *Bucket_RequiredTypedLabels_FieldMask {
	res := &Bucket_RequiredTypedLabels_FieldMask{}
	res.Paths = append(res.Paths, &BucketRequiredTypedLabels_FieldTerminalPath{selector: BucketRequiredTypedLabels_FieldPathSelectorDescriptors})
	res.Paths = append(res.Paths, &BucketRequiredTypedLabels_FieldTerminalPath{selector: BucketRequiredTypedLabels_FieldPathSelectorLabels})
	return res
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BucketRequiredTypedLabels_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBucketRequiredTypedLabels_FieldPath(raw)
	})
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) ProtoMessage() {}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) Subtract(other *Bucket_RequiredTypedLabels_FieldMask) *Bucket_RequiredTypedLabels_FieldMask {
	result := &Bucket_RequiredTypedLabels_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BucketRequiredTypedLabels_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Bucket_RequiredTypedLabels_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) FilterInputFields() *Bucket_RequiredTypedLabels_FieldMask {
	result := &Bucket_RequiredTypedLabels_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BucketRequiredTypedLabels_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBucketRequiredTypedLabels_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Bucket_RequiredTypedLabels_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Bucket_RequiredTypedLabels_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) AppendPath(path BucketRequiredTypedLabels_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BucketRequiredTypedLabels_FieldPath))
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) GetPaths() []BucketRequiredTypedLabels_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBucketRequiredTypedLabels_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) Set(target, source *Bucket_RequiredTypedLabels) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Bucket_RequiredTypedLabels), source.(*Bucket_RequiredTypedLabels))
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) Project(source *Bucket_RequiredTypedLabels) *Bucket_RequiredTypedLabels {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Bucket_RequiredTypedLabels{}
	var labelsMapKeys []string
	wholeLabelsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BucketRequiredTypedLabels_FieldTerminalPath:
			switch tp.selector {
			case BucketRequiredTypedLabels_FieldPathSelectorDescriptors:
				result.Descriptors = source.Descriptors
			case BucketRequiredTypedLabels_FieldPathSelectorLabels:
				result.Labels = source.Labels
				wholeLabelsAccepted = true
			}
		case *BucketRequiredTypedLabels_FieldPathMap:
			switch tp.selector {
			case BucketRequiredTypedLabels_FieldPathSelectorLabels:
				labelsMapKeys = append(labelsMapKeys, tp.key)
			}
		}
	}
	if wholeLabelsAccepted == false && len(labelsMapKeys) > 0 && source.GetLabels() != nil {
		copiedMap := map[string]*Bucket_RequiredTypedLabels_Strings{}
		sourceMap := source.GetLabels()
		for _, key := range labelsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.Labels = copiedMap
	}
	return result
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Bucket_RequiredTypedLabels))
}

func (fieldMask *Bucket_RequiredTypedLabels_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Bucket_RequiredTypedLabels_Strings_FieldMask struct {
	Paths []BucketRequiredTypedLabelsStrings_FieldPath
}

func FullBucket_RequiredTypedLabels_Strings_FieldMask() *Bucket_RequiredTypedLabels_Strings_FieldMask {
	res := &Bucket_RequiredTypedLabels_Strings_FieldMask{}
	res.Paths = append(res.Paths, &BucketRequiredTypedLabelsStrings_FieldTerminalPath{selector: BucketRequiredTypedLabelsStrings_FieldPathSelectorStrings})
	return res
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BucketRequiredTypedLabelsStrings_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBucketRequiredTypedLabelsStrings_FieldPath(raw)
	})
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) ProtoMessage() {}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) Subtract(other *Bucket_RequiredTypedLabels_Strings_FieldMask) *Bucket_RequiredTypedLabels_Strings_FieldMask {
	result := &Bucket_RequiredTypedLabels_Strings_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BucketRequiredTypedLabelsStrings_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Bucket_RequiredTypedLabels_Strings_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) FilterInputFields() *Bucket_RequiredTypedLabels_Strings_FieldMask {
	result := &Bucket_RequiredTypedLabels_Strings_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BucketRequiredTypedLabelsStrings_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBucketRequiredTypedLabelsStrings_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Bucket_RequiredTypedLabels_Strings_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Bucket_RequiredTypedLabels_Strings_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) AppendPath(path BucketRequiredTypedLabelsStrings_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BucketRequiredTypedLabelsStrings_FieldPath))
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) GetPaths() []BucketRequiredTypedLabelsStrings_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBucketRequiredTypedLabelsStrings_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) Set(target, source *Bucket_RequiredTypedLabels_Strings) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Bucket_RequiredTypedLabels_Strings), source.(*Bucket_RequiredTypedLabels_Strings))
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) Project(source *Bucket_RequiredTypedLabels_Strings) *Bucket_RequiredTypedLabels_Strings {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Bucket_RequiredTypedLabels_Strings{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BucketRequiredTypedLabelsStrings_FieldTerminalPath:
			switch tp.selector {
			case BucketRequiredTypedLabelsStrings_FieldPathSelectorStrings:
				result.Strings = source.Strings
			}
		}
	}
	return result
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Bucket_RequiredTypedLabels_Strings))
}

func (fieldMask *Bucket_RequiredTypedLabels_Strings_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
