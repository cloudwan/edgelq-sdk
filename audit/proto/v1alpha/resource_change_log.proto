syntax = "proto3";

package ntt.audit.v1alpha;

import "edgelq-sdk/audit/proto/v1alpha/common.proto";
import "google/api/resource.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha/resource_change_log;resource_change_log";
option java_multiple_files = true;
option java_outer_classname = "ResourceChangeLogProto";
option java_package = "com.ntt.audit.pb.v1alpha";

// ResourceChangeLog Resource
message ResourceChangeLog {
  option (google.api.resource) = {
    type : "audit.edgelq.com/ResourceChangeLog"
    pattern : "resourceChangeLogs/{resource_change_log}"
    pattern : "projects/{project}/resourceChangeLogs/{resource_change_log}"
    pattern : "organizations/{organization}/resourceChangeLogs/"
              "{resource_change_log}"
  };

  // Name of ResourceChangeLog. It contains scope + ID of the log.
  // ID is a base64 encoded unique key that identifies tuple:
  //   scope
  //   request_id
  //   authentication.principal
  //   service.name
  //   resource.name
  //   resource.type
  //   resource.pre.labels
  //   resource.post.labels
  //
  // ID part should not be decoded, but treated as opaque string
  string name = 1;

  // Contains scope from name field without resource ID.
  // Used for internal purpose for filtering (logs are using custom store).
  // Supported formats are:
  // - organization/umbrella
  // - projects/mars_exploration
  // - <system>
  string scope = 2;

  // Unique identifier of request - it must match the one
  // in the associated activity log.
  uint64 request_id = 3;

  // Time of the change - equal to request timestamp (activity log)
  google.protobuf.Timestamp timestamp = 4;

  // Authentication data - informs who made a change
  Authentication authentication = 5;

  // Information about the service
  ServiceData service = 6;

  // Describes change on the resource
  ResourceChange resource = 7;

  // Describes state of the transaction
  TransactionInfo transaction = 8;

  // Description of change on the resource
  message ResourceChange {
    // Fully qualified name of the resource (eg. "RoleBinding/Public")
    // that has changed from this request (if successful)
    string name = 1;

    // Name of the resource type for example "RoleBinding".
    string type = 2;

    // Action on the resource
    Action action = 3;

    // State of the resource before change.
    // It is empty if action is CREATE
    ObjectState pre = 4;

    // State of the resource after change.
    // It is empty if action is DELETE
    ObjectState post = 5;

    // Type of change
    enum Action {
      UNDEFINED = 0; // to avoid blank item when printing logs

      CREATE = 1;

      UPDATE = 2;

      DELETE = 3;
    }
  }

  // Information about transaction where change
  // has been executed
  message TransactionInfo {
    // unique identifier of the transaction.
    string identifier = 1;

    // Indicator of try counter. If transaction has been
    // concluded at first try, try_counter will be 1. If
    // on the second try, then number will be 2 (etc).
    int32 try_counter = 2;

    // State of the transaction.
    State state = 3;

    // State of the transaction.
    enum State {
      UNDEFINED = 0; // to avoid blank item when printing logs

      // Indicates that this change did not happen -
      // it is just proposal of the change.
      // Such a log should be followed by another
      // ResourceChangeLog with value COMMITTED
      // or ROLLED_BACK.
      // If one transaction has been retried
      // multiple times, then there may be multiple
      // records with PRE_COMMITTED, last record
      // should indicate final transaction state.
      PRE_COMMITTED = 1;

      // Indicates change has been committed
      // successfully.
      COMMITTED = 2;

      // Indicates that change did not happen.
      // Log of this type should be treated as
      // attempt of change.
      ROLLED_BACK = 3;
    }
  }
}
