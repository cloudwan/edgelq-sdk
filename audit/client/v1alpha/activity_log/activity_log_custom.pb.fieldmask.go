// Code generated by protoc-gen-goten-object
// File: edgelq/audit/proto/v1alpha/activity_log_custom.proto
// DO NOT EDIT!!!

package activity_log_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	audit_common "github.com/cloudwan/edgelq-sdk/audit/common/v1alpha"
	activity_log "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha/activity_log"
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &activity_log.ActivityLog{}
	_ = &audit_common.Authentication{}
	_ = &rpc.Status{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
)

type ListActivityLogsRequest_FieldMask struct {
	Paths []ListActivityLogsRequest_FieldPath
}

func FullListActivityLogsRequest_FieldMask() *ListActivityLogsRequest_FieldMask {
	res := &ListActivityLogsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorParents})
	res.Paths = append(res.Paths, &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorInterval})
	res.Paths = append(res.Paths, &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorPageToken})
	return res
}

func (fieldMask *ListActivityLogsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListActivityLogsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListActivityLogsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListActivityLogsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListActivityLogsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListActivityLogsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListActivityLogsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListActivityLogsRequest_FieldPath(raw)
	})
}

func (fieldMask *ListActivityLogsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListActivityLogsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListActivityLogsRequest_FieldMask) Subtract(other *ListActivityLogsRequest_FieldMask) *ListActivityLogsRequest_FieldMask {
	result := &ListActivityLogsRequest_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[ListActivityLogsRequest_FieldPathSelector]gotenobject.FieldMask{
		ListActivityLogsRequest_FieldPathSelectorInterval: &audit_common.TimeInterval_FieldMask{},
	}
	mySubMasks := map[ListActivityLogsRequest_FieldPathSelector]gotenobject.FieldMask{
		ListActivityLogsRequest_FieldPathSelectorInterval: &audit_common.TimeInterval_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListActivityLogsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListActivityLogsRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListActivityLogsRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case ListActivityLogsRequest_FieldPathSelectorInterval:
						mySubMasks[ListActivityLogsRequest_FieldPathSelectorInterval] = audit_common.FullTimeInterval_FieldMask()
					}
				} else if tp, ok := path.(*ListActivityLogsRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListActivityLogsRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListActivityLogsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListActivityLogsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListActivityLogsRequest_FieldMask) FilterInputFields() *ListActivityLogsRequest_FieldMask {
	result := &ListActivityLogsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListActivityLogsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListActivityLogsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListActivityLogsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListActivityLogsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListActivityLogsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListActivityLogsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListActivityLogsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListActivityLogsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListActivityLogsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListActivityLogsRequest_FieldMask) AppendPath(path ListActivityLogsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListActivityLogsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListActivityLogsRequest_FieldPath))
}

func (fieldMask *ListActivityLogsRequest_FieldMask) GetPaths() []ListActivityLogsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListActivityLogsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListActivityLogsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListActivityLogsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListActivityLogsRequest_FieldMask) Set(target, source *ListActivityLogsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListActivityLogsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListActivityLogsRequest), source.(*ListActivityLogsRequest))
}

func (fieldMask *ListActivityLogsRequest_FieldMask) Project(source *ListActivityLogsRequest) *ListActivityLogsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListActivityLogsRequest{}
	intervalMask := &audit_common.TimeInterval_FieldMask{}
	wholeIntervalAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListActivityLogsRequest_FieldTerminalPath:
			switch tp.selector {
			case ListActivityLogsRequest_FieldPathSelectorParents:
				result.Parents = source.Parents
			case ListActivityLogsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListActivityLogsRequest_FieldPathSelectorInterval:
				result.Interval = source.Interval
				wholeIntervalAccepted = true
			case ListActivityLogsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListActivityLogsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			}
		case *ListActivityLogsRequest_FieldSubPath:
			switch tp.selector {
			case ListActivityLogsRequest_FieldPathSelectorInterval:
				intervalMask.AppendPath(tp.subPath.(audit_common.TimeInterval_FieldPath))
			}
		}
	}
	if wholeIntervalAccepted == false && len(intervalMask.Paths) > 0 {
		result.Interval = intervalMask.Project(source.GetInterval())
	}
	return result
}

func (fieldMask *ListActivityLogsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListActivityLogsRequest))
}

func (fieldMask *ListActivityLogsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListActivityLogsResponse_FieldMask struct {
	Paths []ListActivityLogsResponse_FieldPath
}

func FullListActivityLogsResponse_FieldMask() *ListActivityLogsResponse_FieldMask {
	res := &ListActivityLogsResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListActivityLogsResponse_FieldTerminalPath{selector: ListActivityLogsResponse_FieldPathSelectorActivityLogs})
	res.Paths = append(res.Paths, &ListActivityLogsResponse_FieldTerminalPath{selector: ListActivityLogsResponse_FieldPathSelectorNextPageToken})
	res.Paths = append(res.Paths, &ListActivityLogsResponse_FieldTerminalPath{selector: ListActivityLogsResponse_FieldPathSelectorExecutionErrors})
	return res
}

func (fieldMask *ListActivityLogsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListActivityLogsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListActivityLogsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListActivityLogsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListActivityLogsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListActivityLogsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListActivityLogsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListActivityLogsResponse_FieldPath(raw)
	})
}

func (fieldMask *ListActivityLogsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListActivityLogsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListActivityLogsResponse_FieldMask) Subtract(other *ListActivityLogsResponse_FieldMask) *ListActivityLogsResponse_FieldMask {
	result := &ListActivityLogsResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ListActivityLogsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListActivityLogsResponse_FieldPathSelectorActivityLogs:    &activity_log.ActivityLog_FieldMask{},
		ListActivityLogsResponse_FieldPathSelectorExecutionErrors: &rpc.Status_FieldMask{},
	}
	mySubMasks := map[ListActivityLogsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListActivityLogsResponse_FieldPathSelectorActivityLogs:    &activity_log.ActivityLog_FieldMask{},
		ListActivityLogsResponse_FieldPathSelectorExecutionErrors: &rpc.Status_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListActivityLogsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListActivityLogsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListActivityLogsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
						mySubMasks[ListActivityLogsResponse_FieldPathSelectorActivityLogs] = activity_log.FullActivityLog_FieldMask()
					case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
						mySubMasks[ListActivityLogsResponse_FieldPathSelectorExecutionErrors] = rpc.FullStatus_FieldMask()
					}
				} else if tp, ok := path.(*ListActivityLogsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListActivityLogsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListActivityLogsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListActivityLogsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListActivityLogsResponse_FieldMask) FilterInputFields() *ListActivityLogsResponse_FieldMask {
	result := &ListActivityLogsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListActivityLogsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListActivityLogsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListActivityLogsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListActivityLogsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListActivityLogsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListActivityLogsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListActivityLogsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListActivityLogsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListActivityLogsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListActivityLogsResponse_FieldMask) AppendPath(path ListActivityLogsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListActivityLogsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListActivityLogsResponse_FieldPath))
}

func (fieldMask *ListActivityLogsResponse_FieldMask) GetPaths() []ListActivityLogsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListActivityLogsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListActivityLogsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListActivityLogsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListActivityLogsResponse_FieldMask) Set(target, source *ListActivityLogsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListActivityLogsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListActivityLogsResponse), source.(*ListActivityLogsResponse))
}

func (fieldMask *ListActivityLogsResponse_FieldMask) Project(source *ListActivityLogsResponse) *ListActivityLogsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListActivityLogsResponse{}
	activityLogsMask := &activity_log.ActivityLog_FieldMask{}
	wholeActivityLogsAccepted := false
	executionErrorsMask := &rpc.Status_FieldMask{}
	wholeExecutionErrorsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListActivityLogsResponse_FieldTerminalPath:
			switch tp.selector {
			case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
				result.ActivityLogs = source.ActivityLogs
				wholeActivityLogsAccepted = true
			case ListActivityLogsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
				result.ExecutionErrors = source.ExecutionErrors
				wholeExecutionErrorsAccepted = true
			}
		case *ListActivityLogsResponse_FieldSubPath:
			switch tp.selector {
			case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
				activityLogsMask.AppendPath(tp.subPath.(activity_log.ActivityLog_FieldPath))
			case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
				executionErrorsMask.AppendPath(tp.subPath.(rpc.Status_FieldPath))
			}
		}
	}
	if wholeActivityLogsAccepted == false && len(activityLogsMask.Paths) > 0 {
		for _, sourceItem := range source.GetActivityLogs() {
			result.ActivityLogs = append(result.ActivityLogs, activityLogsMask.Project(sourceItem))
		}
	}
	if wholeExecutionErrorsAccepted == false && len(executionErrorsMask.Paths) > 0 {
		for _, sourceItem := range source.GetExecutionErrors() {
			result.ExecutionErrors = append(result.ExecutionErrors, executionErrorsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListActivityLogsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListActivityLogsResponse))
}

func (fieldMask *ListActivityLogsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateActivityLogsRequest_FieldMask struct {
	Paths []CreateActivityLogsRequest_FieldPath
}

func FullCreateActivityLogsRequest_FieldMask() *CreateActivityLogsRequest_FieldMask {
	res := &CreateActivityLogsRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateActivityLogsRequest_FieldTerminalPath{selector: CreateActivityLogsRequest_FieldPathSelectorActivityLogs})
	return res
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateActivityLogsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateActivityLogsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateActivityLogsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateActivityLogsRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateActivityLogsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) Subtract(other *CreateActivityLogsRequest_FieldMask) *CreateActivityLogsRequest_FieldMask {
	result := &CreateActivityLogsRequest_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[CreateActivityLogsRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateActivityLogsRequest_FieldPathSelectorActivityLogs: &activity_log.ActivityLog_FieldMask{},
	}
	mySubMasks := map[CreateActivityLogsRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateActivityLogsRequest_FieldPathSelectorActivityLogs: &activity_log.ActivityLog_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateActivityLogsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateActivityLogsRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateActivityLogsRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
						mySubMasks[CreateActivityLogsRequest_FieldPathSelectorActivityLogs] = activity_log.FullActivityLog_FieldMask()
					}
				} else if tp, ok := path.(*CreateActivityLogsRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateActivityLogsRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateActivityLogsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateActivityLogsRequest_FieldMask) FilterInputFields() *CreateActivityLogsRequest_FieldMask {
	result := &CreateActivityLogsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateActivityLogsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateActivityLogsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateActivityLogsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateActivityLogsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateActivityLogsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) AppendPath(path CreateActivityLogsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateActivityLogsRequest_FieldPath))
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) GetPaths() []CreateActivityLogsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateActivityLogsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) Set(target, source *CreateActivityLogsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateActivityLogsRequest), source.(*CreateActivityLogsRequest))
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) Project(source *CreateActivityLogsRequest) *CreateActivityLogsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateActivityLogsRequest{}
	activityLogsMask := &activity_log.ActivityLog_FieldMask{}
	wholeActivityLogsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateActivityLogsRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
				result.ActivityLogs = source.ActivityLogs
				wholeActivityLogsAccepted = true
			}
		case *CreateActivityLogsRequest_FieldSubPath:
			switch tp.selector {
			case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
				activityLogsMask.AppendPath(tp.subPath.(activity_log.ActivityLog_FieldPath))
			}
		}
	}
	if wholeActivityLogsAccepted == false && len(activityLogsMask.Paths) > 0 {
		for _, sourceItem := range source.GetActivityLogs() {
			result.ActivityLogs = append(result.ActivityLogs, activityLogsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateActivityLogsRequest))
}

func (fieldMask *CreateActivityLogsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateActivityLogsResponse_FieldMask struct {
	Paths []CreateActivityLogsResponse_FieldPath
}

func FullCreateActivityLogsResponse_FieldMask() *CreateActivityLogsResponse_FieldMask {
	res := &CreateActivityLogsResponse_FieldMask{}
	res.Paths = append(res.Paths, &CreateActivityLogsResponse_FieldTerminalPath{selector: CreateActivityLogsResponse_FieldPathSelectorLogNames})
	return res
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateActivityLogsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateActivityLogsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateActivityLogsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateActivityLogsResponse_FieldPath(raw)
	})
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *CreateActivityLogsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) Subtract(other *CreateActivityLogsResponse_FieldMask) *CreateActivityLogsResponse_FieldMask {
	result := &CreateActivityLogsResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateActivityLogsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateActivityLogsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateActivityLogsResponse_FieldMask) FilterInputFields() *CreateActivityLogsResponse_FieldMask {
	result := &CreateActivityLogsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateActivityLogsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateActivityLogsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateActivityLogsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateActivityLogsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateActivityLogsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) AppendPath(path CreateActivityLogsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateActivityLogsResponse_FieldPath))
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) GetPaths() []CreateActivityLogsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateActivityLogsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) Set(target, source *CreateActivityLogsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateActivityLogsResponse), source.(*CreateActivityLogsResponse))
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) Project(source *CreateActivityLogsResponse) *CreateActivityLogsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateActivityLogsResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateActivityLogsResponse_FieldTerminalPath:
			switch tp.selector {
			case CreateActivityLogsResponse_FieldPathSelectorLogNames:
				result.LogNames = source.LogNames
			}
		}
	}
	return result
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateActivityLogsResponse))
}

func (fieldMask *CreateActivityLogsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
