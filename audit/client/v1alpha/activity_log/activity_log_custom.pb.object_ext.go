// Code generated by protoc-gen-goten-object
// File: edgelq/audit/proto/v1alpha/activity_log_custom.proto
// DO NOT EDIT!!!

package activity_log_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	audit_common "github.com/cloudwan/edgelq-sdk/audit/common/v1alpha"
	activity_log "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha/activity_log"
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &activity_log.ActivityLog{}
	_ = &audit_common.Authentication{}
	_ = &rpc.Status{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
)

func (o *ListActivityLogsRequest) GotenObjectExt() {}

func (o *ListActivityLogsRequest) MakeFullFieldMask() *ListActivityLogsRequest_FieldMask {
	return FullListActivityLogsRequest_FieldMask()
}

func (o *ListActivityLogsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListActivityLogsRequest_FieldMask()
}

func (o *ListActivityLogsRequest) MakeDiffFieldMask(other *ListActivityLogsRequest) *ListActivityLogsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListActivityLogsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListActivityLogsRequest_FieldMask()
	}

	res := &ListActivityLogsRequest_FieldMask{}

	if len(o.GetParents()) == len(other.GetParents()) {
		for i, lValue := range o.GetParents() {
			rValue := other.GetParents()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorParents})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorParents})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorFilter})
	}
	{
		subMask := o.GetInterval().MakeDiffFieldMask(other.GetInterval())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorInterval})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListActivityLogsRequest_FieldSubPath{selector: ListActivityLogsRequest_FieldPathSelectorInterval, subPath: subpath})
			}
		}
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken() != other.GetPageToken() {
		res.Paths = append(res.Paths, &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorPageToken})
	}
	return res
}

func (o *ListActivityLogsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListActivityLogsRequest))
}

func (o *ListActivityLogsRequest) Clone() *ListActivityLogsRequest {
	if o == nil {
		return nil
	}
	result := &ListActivityLogsRequest{}
	result.Parents = make([]*activity_log.ParentReference, len(o.Parents))
	for i, sourceValue := range o.Parents {
		if sourceValue == nil {
			result.Parents[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Parents[i] = &activity_log.ParentReference{}
			if err := result.Parents[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &activity_log.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Interval = o.Interval.Clone()
	result.PageSize = o.PageSize
	result.PageToken = o.PageToken
	return result
}

func (o *ListActivityLogsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListActivityLogsRequest) Merge(source *ListActivityLogsRequest) {
	for _, sourceValue := range source.GetParents() {
		exists := false
		for _, currentValue := range o.Parents {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *activity_log.ParentReference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &activity_log.ParentReference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Parents = append(o.Parents, newDstElement)
		}
	}

	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &activity_log.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetInterval() != nil {
		if o.Interval == nil {
			o.Interval = new(audit_common.TimeInterval)
		}
		o.Interval.Merge(source.GetInterval())
	}
	o.PageSize = source.GetPageSize()
	o.PageToken = source.GetPageToken()
}

func (o *ListActivityLogsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListActivityLogsRequest))
}

func (o *ListActivityLogsResponse) GotenObjectExt() {}

func (o *ListActivityLogsResponse) MakeFullFieldMask() *ListActivityLogsResponse_FieldMask {
	return FullListActivityLogsResponse_FieldMask()
}

func (o *ListActivityLogsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListActivityLogsResponse_FieldMask()
}

func (o *ListActivityLogsResponse) MakeDiffFieldMask(other *ListActivityLogsResponse) *ListActivityLogsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListActivityLogsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListActivityLogsResponse_FieldMask()
	}

	res := &ListActivityLogsResponse_FieldMask{}

	if len(o.GetActivityLogs()) == len(other.GetActivityLogs()) {
		for i, lValue := range o.GetActivityLogs() {
			rValue := other.GetActivityLogs()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListActivityLogsResponse_FieldTerminalPath{selector: ListActivityLogsResponse_FieldPathSelectorActivityLogs})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListActivityLogsResponse_FieldTerminalPath{selector: ListActivityLogsResponse_FieldPathSelectorActivityLogs})
	}
	if o.GetNextPageToken() != other.GetNextPageToken() {
		res.Paths = append(res.Paths, &ListActivityLogsResponse_FieldTerminalPath{selector: ListActivityLogsResponse_FieldPathSelectorNextPageToken})
	}

	if len(o.GetExecutionErrors()) == len(other.GetExecutionErrors()) {
		for i, lValue := range o.GetExecutionErrors() {
			rValue := other.GetExecutionErrors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListActivityLogsResponse_FieldTerminalPath{selector: ListActivityLogsResponse_FieldPathSelectorExecutionErrors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListActivityLogsResponse_FieldTerminalPath{selector: ListActivityLogsResponse_FieldPathSelectorExecutionErrors})
	}
	return res
}

func (o *ListActivityLogsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListActivityLogsResponse))
}

func (o *ListActivityLogsResponse) Clone() *ListActivityLogsResponse {
	if o == nil {
		return nil
	}
	result := &ListActivityLogsResponse{}
	result.ActivityLogs = make([]*activity_log.ActivityLog, len(o.ActivityLogs))
	for i, sourceValue := range o.ActivityLogs {
		result.ActivityLogs[i] = sourceValue.Clone()
	}
	result.NextPageToken = o.NextPageToken
	result.ExecutionErrors = make([]*rpc.Status, len(o.ExecutionErrors))
	for i, sourceValue := range o.ExecutionErrors {
		result.ExecutionErrors[i] = sourceValue.Clone()
	}
	return result
}

func (o *ListActivityLogsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListActivityLogsResponse) Merge(source *ListActivityLogsResponse) {
	for _, sourceValue := range source.GetActivityLogs() {
		exists := false
		for _, currentValue := range o.ActivityLogs {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *activity_log.ActivityLog
			if sourceValue != nil {
				newDstElement = new(activity_log.ActivityLog)
				newDstElement.Merge(sourceValue)
			}
			o.ActivityLogs = append(o.ActivityLogs, newDstElement)
		}
	}

	o.NextPageToken = source.GetNextPageToken()
	for _, sourceValue := range source.GetExecutionErrors() {
		exists := false
		for _, currentValue := range o.ExecutionErrors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *rpc.Status
			if sourceValue != nil {
				newDstElement = new(rpc.Status)
				newDstElement.Merge(sourceValue)
			}
			o.ExecutionErrors = append(o.ExecutionErrors, newDstElement)
		}
	}

}

func (o *ListActivityLogsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListActivityLogsResponse))
}

func (o *CreateActivityLogsRequest) GotenObjectExt() {}

func (o *CreateActivityLogsRequest) MakeFullFieldMask() *CreateActivityLogsRequest_FieldMask {
	return FullCreateActivityLogsRequest_FieldMask()
}

func (o *CreateActivityLogsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateActivityLogsRequest_FieldMask()
}

func (o *CreateActivityLogsRequest) MakeDiffFieldMask(other *CreateActivityLogsRequest) *CreateActivityLogsRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateActivityLogsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateActivityLogsRequest_FieldMask()
	}

	res := &CreateActivityLogsRequest_FieldMask{}

	if len(o.GetActivityLogs()) == len(other.GetActivityLogs()) {
		for i, lValue := range o.GetActivityLogs() {
			rValue := other.GetActivityLogs()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &CreateActivityLogsRequest_FieldTerminalPath{selector: CreateActivityLogsRequest_FieldPathSelectorActivityLogs})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &CreateActivityLogsRequest_FieldTerminalPath{selector: CreateActivityLogsRequest_FieldPathSelectorActivityLogs})
	}
	return res
}

func (o *CreateActivityLogsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateActivityLogsRequest))
}

func (o *CreateActivityLogsRequest) Clone() *CreateActivityLogsRequest {
	if o == nil {
		return nil
	}
	result := &CreateActivityLogsRequest{}
	result.ActivityLogs = make([]*activity_log.ActivityLog, len(o.ActivityLogs))
	for i, sourceValue := range o.ActivityLogs {
		result.ActivityLogs[i] = sourceValue.Clone()
	}
	return result
}

func (o *CreateActivityLogsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateActivityLogsRequest) Merge(source *CreateActivityLogsRequest) {
	for _, sourceValue := range source.GetActivityLogs() {
		exists := false
		for _, currentValue := range o.ActivityLogs {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *activity_log.ActivityLog
			if sourceValue != nil {
				newDstElement = new(activity_log.ActivityLog)
				newDstElement.Merge(sourceValue)
			}
			o.ActivityLogs = append(o.ActivityLogs, newDstElement)
		}
	}

}

func (o *CreateActivityLogsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateActivityLogsRequest))
}

func (o *CreateActivityLogsResponse) GotenObjectExt() {}

func (o *CreateActivityLogsResponse) MakeFullFieldMask() *CreateActivityLogsResponse_FieldMask {
	return FullCreateActivityLogsResponse_FieldMask()
}

func (o *CreateActivityLogsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateActivityLogsResponse_FieldMask()
}

func (o *CreateActivityLogsResponse) MakeDiffFieldMask(other *CreateActivityLogsResponse) *CreateActivityLogsResponse_FieldMask {
	if o == nil && other == nil {
		return &CreateActivityLogsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateActivityLogsResponse_FieldMask()
	}

	res := &CreateActivityLogsResponse_FieldMask{}

	if len(o.GetLogNames()) == len(other.GetLogNames()) {
		for i, lValue := range o.GetLogNames() {
			rValue := other.GetLogNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &CreateActivityLogsResponse_FieldTerminalPath{selector: CreateActivityLogsResponse_FieldPathSelectorLogNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &CreateActivityLogsResponse_FieldTerminalPath{selector: CreateActivityLogsResponse_FieldPathSelectorLogNames})
	}
	return res
}

func (o *CreateActivityLogsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateActivityLogsResponse))
}

func (o *CreateActivityLogsResponse) Clone() *CreateActivityLogsResponse {
	if o == nil {
		return nil
	}
	result := &CreateActivityLogsResponse{}
	result.LogNames = make([]*activity_log.Reference, len(o.LogNames))
	for i, sourceValue := range o.LogNames {
		if sourceValue == nil {
			result.LogNames[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.LogNames[i] = &activity_log.Reference{}
			if err := result.LogNames[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *CreateActivityLogsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateActivityLogsResponse) Merge(source *CreateActivityLogsResponse) {
	for _, sourceValue := range source.GetLogNames() {
		exists := false
		for _, currentValue := range o.LogNames {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *activity_log.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &activity_log.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.LogNames = append(o.LogNames, newDstElement)
		}
	}

}

func (o *CreateActivityLogsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateActivityLogsResponse))
}
