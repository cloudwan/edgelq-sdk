// Code generated by protoc-gen-goten-object
// File: edgelq/audit/proto/v1alpha/activity_log_custom.proto
// DO NOT EDIT!!!

package activity_log_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	audit_common "github.com/cloudwan/edgelq-sdk/audit/common/v1alpha"
	activity_log "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha/activity_log"
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &activity_log.ActivityLog{}
	_ = &audit_common.Authentication{}
	_ = &rpc.Status{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListActivityLogsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListActivityLogsRequest_FieldPathSelector
	Get(source *ListActivityLogsRequest) []interface{}
	GetSingle(source *ListActivityLogsRequest) (interface{}, bool)
	ClearValue(item *ListActivityLogsRequest)

	// Those methods build corresponding ListActivityLogsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListActivityLogsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListActivityLogsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListActivityLogsRequest_FieldPathArrayItemValue
}

type ListActivityLogsRequest_FieldPathSelector int32

const (
	ListActivityLogsRequest_FieldPathSelectorParents   ListActivityLogsRequest_FieldPathSelector = 0
	ListActivityLogsRequest_FieldPathSelectorFilter    ListActivityLogsRequest_FieldPathSelector = 1
	ListActivityLogsRequest_FieldPathSelectorInterval  ListActivityLogsRequest_FieldPathSelector = 2
	ListActivityLogsRequest_FieldPathSelectorPageSize  ListActivityLogsRequest_FieldPathSelector = 3
	ListActivityLogsRequest_FieldPathSelectorPageToken ListActivityLogsRequest_FieldPathSelector = 4
)

func (s ListActivityLogsRequest_FieldPathSelector) String() string {
	switch s {
	case ListActivityLogsRequest_FieldPathSelectorParents:
		return "parents"
	case ListActivityLogsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListActivityLogsRequest_FieldPathSelectorInterval:
		return "interval"
	case ListActivityLogsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListActivityLogsRequest_FieldPathSelectorPageToken:
		return "page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", s))
	}
}

func BuildListActivityLogsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListActivityLogsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListActivityLogsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parents":
			return &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorParents}, nil
		case "filter":
			return &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorFilter}, nil
		case "interval":
			return &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorInterval}, nil
		case "page_size", "pageSize", "page-size":
			return &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListActivityLogsRequest_FieldTerminalPath{selector: ListActivityLogsRequest_FieldPathSelectorPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "interval":
			if subpath, err := audit_common.BuildTimeInterval_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListActivityLogsRequest_FieldSubPath{selector: ListActivityLogsRequest_FieldPathSelectorInterval, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListActivityLogsRequest", fp)
}

func ParseListActivityLogsRequest_FieldPath(rawField string) (ListActivityLogsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListActivityLogsRequest_FieldPath(fp)
}

func MustParseListActivityLogsRequest_FieldPath(rawField string) ListActivityLogsRequest_FieldPath {
	fp, err := ParseListActivityLogsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListActivityLogsRequest_FieldTerminalPath struct {
	selector ListActivityLogsRequest_FieldPathSelector
}

var _ ListActivityLogsRequest_FieldPath = (*ListActivityLogsRequest_FieldTerminalPath)(nil)

func (fp *ListActivityLogsRequest_FieldTerminalPath) Selector() ListActivityLogsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListActivityLogsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListActivityLogsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListActivityLogsRequest
func (fp *ListActivityLogsRequest_FieldTerminalPath) Get(source *ListActivityLogsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListActivityLogsRequest_FieldPathSelectorParents:
			for _, value := range source.GetParents() {
				values = append(values, value)
			}
		case ListActivityLogsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListActivityLogsRequest_FieldPathSelectorInterval:
			if source.Interval != nil {
				values = append(values, source.Interval)
			}
		case ListActivityLogsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListActivityLogsRequest_FieldPathSelectorPageToken:
			values = append(values, source.PageToken)
		default:
			panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListActivityLogsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListActivityLogsRequest))
}

// GetSingle returns value pointed by specific field of from source ListActivityLogsRequest
func (fp *ListActivityLogsRequest_FieldTerminalPath) GetSingle(source *ListActivityLogsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListActivityLogsRequest_FieldPathSelectorParents:
		res := source.GetParents()
		return res, res != nil
	case ListActivityLogsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListActivityLogsRequest_FieldPathSelectorInterval:
		res := source.GetInterval()
		return res, res != nil
	case ListActivityLogsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListActivityLogsRequest_FieldPathSelectorPageToken:
		return source.GetPageToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fp.selector))
	}
}

func (fp *ListActivityLogsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListActivityLogsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListActivityLogsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListActivityLogsRequest_FieldPathSelectorParents:
		return ([]*activity_log.ParentReference)(nil)
	case ListActivityLogsRequest_FieldPathSelectorFilter:
		return (*activity_log.Filter)(nil)
	case ListActivityLogsRequest_FieldPathSelectorInterval:
		return (*audit_common.TimeInterval)(nil)
	case ListActivityLogsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListActivityLogsRequest_FieldPathSelectorPageToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fp.selector))
	}
}

func (fp *ListActivityLogsRequest_FieldTerminalPath) ClearValue(item *ListActivityLogsRequest) {
	if item != nil {
		switch fp.selector {
		case ListActivityLogsRequest_FieldPathSelectorParents:
			item.Parents = nil
		case ListActivityLogsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListActivityLogsRequest_FieldPathSelectorInterval:
			item.Interval = nil
		case ListActivityLogsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListActivityLogsRequest_FieldPathSelectorPageToken:
			item.PageToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListActivityLogsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListActivityLogsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListActivityLogsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListActivityLogsRequest_FieldPathSelectorParents ||
		fp.selector == ListActivityLogsRequest_FieldPathSelectorFilter ||
		fp.selector == ListActivityLogsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListActivityLogsRequest_FieldPathSelectorPageToken
}

func (fp *ListActivityLogsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListActivityLogsRequest_FieldTerminalPath) WithIValue(value interface{}) ListActivityLogsRequest_FieldPathValue {
	switch fp.selector {
	case ListActivityLogsRequest_FieldPathSelectorParents:
		return &ListActivityLogsRequest_FieldTerminalPathValue{ListActivityLogsRequest_FieldTerminalPath: *fp, value: value.([]*activity_log.ParentReference)}
	case ListActivityLogsRequest_FieldPathSelectorFilter:
		return &ListActivityLogsRequest_FieldTerminalPathValue{ListActivityLogsRequest_FieldTerminalPath: *fp, value: value.(*activity_log.Filter)}
	case ListActivityLogsRequest_FieldPathSelectorInterval:
		return &ListActivityLogsRequest_FieldTerminalPathValue{ListActivityLogsRequest_FieldTerminalPath: *fp, value: value.(*audit_common.TimeInterval)}
	case ListActivityLogsRequest_FieldPathSelectorPageSize:
		return &ListActivityLogsRequest_FieldTerminalPathValue{ListActivityLogsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListActivityLogsRequest_FieldPathSelectorPageToken:
		return &ListActivityLogsRequest_FieldTerminalPathValue{ListActivityLogsRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fp.selector))
	}
}

func (fp *ListActivityLogsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListActivityLogsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListActivityLogsRequest_FieldPathArrayOfValues {
	fpaov := &ListActivityLogsRequest_FieldTerminalPathArrayOfValues{ListActivityLogsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListActivityLogsRequest_FieldPathSelectorParents:
		return &ListActivityLogsRequest_FieldTerminalPathArrayOfValues{ListActivityLogsRequest_FieldTerminalPath: *fp, values: values.([][]*activity_log.ParentReference)}
	case ListActivityLogsRequest_FieldPathSelectorFilter:
		return &ListActivityLogsRequest_FieldTerminalPathArrayOfValues{ListActivityLogsRequest_FieldTerminalPath: *fp, values: values.([]*activity_log.Filter)}
	case ListActivityLogsRequest_FieldPathSelectorInterval:
		return &ListActivityLogsRequest_FieldTerminalPathArrayOfValues{ListActivityLogsRequest_FieldTerminalPath: *fp, values: values.([]*audit_common.TimeInterval)}
	case ListActivityLogsRequest_FieldPathSelectorPageSize:
		return &ListActivityLogsRequest_FieldTerminalPathArrayOfValues{ListActivityLogsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListActivityLogsRequest_FieldPathSelectorPageToken:
		return &ListActivityLogsRequest_FieldTerminalPathArrayOfValues{ListActivityLogsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListActivityLogsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListActivityLogsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListActivityLogsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case ListActivityLogsRequest_FieldPathSelectorParents:
		return &ListActivityLogsRequest_FieldTerminalPathArrayItemValue{ListActivityLogsRequest_FieldTerminalPath: *fp, value: value.(*activity_log.ParentReference)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fp.selector))
	}
}

func (fp *ListActivityLogsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListActivityLogsRequest_FieldSubPath struct {
	selector ListActivityLogsRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListActivityLogsRequest_FieldPath = (*ListActivityLogsRequest_FieldSubPath)(nil)

func (fps *ListActivityLogsRequest_FieldSubPath) Selector() ListActivityLogsRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ListActivityLogsRequest_FieldSubPath) AsIntervalSubPath() (audit_common.TimeInterval_FieldPath, bool) {
	res, ok := fps.subPath.(audit_common.TimeInterval_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListActivityLogsRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListActivityLogsRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListActivityLogsRequest
func (fps *ListActivityLogsRequest_FieldSubPath) Get(source *ListActivityLogsRequest) (values []interface{}) {
	if asTimeIntervalFieldPath, ok := fps.AsIntervalSubPath(); ok {
		values = append(values, asTimeIntervalFieldPath.Get(source.GetInterval())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fps.selector))
	}
	return
}

func (fps *ListActivityLogsRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListActivityLogsRequest))
}

// GetSingle returns value of selected field from source ListActivityLogsRequest
func (fps *ListActivityLogsRequest_FieldSubPath) GetSingle(source *ListActivityLogsRequest) (interface{}, bool) {
	switch fps.selector {
	case ListActivityLogsRequest_FieldPathSelectorInterval:
		if source.GetInterval() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fps.selector))
	}
}

func (fps *ListActivityLogsRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListActivityLogsRequest))
}

// GetDefault returns a default value of the field type
func (fps *ListActivityLogsRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListActivityLogsRequest_FieldSubPath) ClearValue(item *ListActivityLogsRequest) {
	if item != nil {
		switch fps.selector {
		case ListActivityLogsRequest_FieldPathSelectorInterval:
			fps.subPath.ClearValueRaw(item.Interval)
		default:
			panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fps.selector))
		}
	}
}

func (fps *ListActivityLogsRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListActivityLogsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListActivityLogsRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListActivityLogsRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListActivityLogsRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListActivityLogsRequest_FieldSubPath) WithIValue(value interface{}) ListActivityLogsRequest_FieldPathValue {
	return &ListActivityLogsRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListActivityLogsRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListActivityLogsRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ListActivityLogsRequest_FieldPathArrayOfValues {
	return &ListActivityLogsRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListActivityLogsRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListActivityLogsRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ListActivityLogsRequest_FieldPathArrayItemValue {
	return &ListActivityLogsRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListActivityLogsRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListActivityLogsRequest_FieldPathValue allows storing values for ListActivityLogsRequest fields according to their type
type ListActivityLogsRequest_FieldPathValue interface {
	ListActivityLogsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListActivityLogsRequest)
	CompareWith(*ListActivityLogsRequest) (cmp int, comparable bool)
}

func ParseListActivityLogsRequest_FieldPathValue(pathStr, valueStr string) (ListActivityLogsRequest_FieldPathValue, error) {
	fp, err := ParseListActivityLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListActivityLogsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListActivityLogsRequest_FieldPathValue), nil
}

func MustParseListActivityLogsRequest_FieldPathValue(pathStr, valueStr string) ListActivityLogsRequest_FieldPathValue {
	fpv, err := ParseListActivityLogsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListActivityLogsRequest_FieldTerminalPathValue struct {
	ListActivityLogsRequest_FieldTerminalPath
	value interface{}
}

var _ ListActivityLogsRequest_FieldPathValue = (*ListActivityLogsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListActivityLogsRequest' as interface{}
func (fpv *ListActivityLogsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListActivityLogsRequest_FieldTerminalPathValue) AsParentsValue() ([]*activity_log.ParentReference, bool) {
	res, ok := fpv.value.([]*activity_log.ParentReference)
	return res, ok
}
func (fpv *ListActivityLogsRequest_FieldTerminalPathValue) AsFilterValue() (*activity_log.Filter, bool) {
	res, ok := fpv.value.(*activity_log.Filter)
	return res, ok
}
func (fpv *ListActivityLogsRequest_FieldTerminalPathValue) AsIntervalValue() (*audit_common.TimeInterval, bool) {
	res, ok := fpv.value.(*audit_common.TimeInterval)
	return res, ok
}
func (fpv *ListActivityLogsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListActivityLogsRequest_FieldTerminalPathValue) AsPageTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ListActivityLogsRequest
func (fpv *ListActivityLogsRequest_FieldTerminalPathValue) SetTo(target **ListActivityLogsRequest) {
	if *target == nil {
		*target = new(ListActivityLogsRequest)
	}
	switch fpv.selector {
	case ListActivityLogsRequest_FieldPathSelectorParents:
		(*target).Parents = fpv.value.([]*activity_log.ParentReference)
	case ListActivityLogsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*activity_log.Filter)
	case ListActivityLogsRequest_FieldPathSelectorInterval:
		(*target).Interval = fpv.value.(*audit_common.TimeInterval)
	case ListActivityLogsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListActivityLogsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fpv.selector))
	}
}

func (fpv *ListActivityLogsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListActivityLogsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListActivityLogsRequest_FieldTerminalPathValue' with the value under path in 'ListActivityLogsRequest'.
func (fpv *ListActivityLogsRequest_FieldTerminalPathValue) CompareWith(source *ListActivityLogsRequest) (int, bool) {
	switch fpv.selector {
	case ListActivityLogsRequest_FieldPathSelectorParents:
		return 0, false
	case ListActivityLogsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListActivityLogsRequest_FieldPathSelectorInterval:
		return 0, false
	case ListActivityLogsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListActivityLogsRequest_FieldPathSelectorPageToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetPageToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fpv.selector))
	}
}

func (fpv *ListActivityLogsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListActivityLogsRequest))
}

type ListActivityLogsRequest_FieldSubPathValue struct {
	ListActivityLogsRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListActivityLogsRequest_FieldPathValue = (*ListActivityLogsRequest_FieldSubPathValue)(nil)

func (fpvs *ListActivityLogsRequest_FieldSubPathValue) AsIntervalPathValue() (audit_common.TimeInterval_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(audit_common.TimeInterval_FieldPathValue)
	return res, ok
}

func (fpvs *ListActivityLogsRequest_FieldSubPathValue) SetTo(target **ListActivityLogsRequest) {
	if *target == nil {
		*target = new(ListActivityLogsRequest)
	}
	switch fpvs.Selector() {
	case ListActivityLogsRequest_FieldPathSelectorInterval:
		fpvs.subPathValue.(audit_common.TimeInterval_FieldPathValue).SetTo(&(*target).Interval)
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ListActivityLogsRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListActivityLogsRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListActivityLogsRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListActivityLogsRequest_FieldSubPathValue) CompareWith(source *ListActivityLogsRequest) (int, bool) {
	switch fpvs.Selector() {
	case ListActivityLogsRequest_FieldPathSelectorInterval:
		return fpvs.subPathValue.(audit_common.TimeInterval_FieldPathValue).CompareWith(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ListActivityLogsRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListActivityLogsRequest))
}

// ListActivityLogsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListActivityLogsRequest according to their type
// Present only for array (repeated) types.
type ListActivityLogsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListActivityLogsRequest_FieldPath
	ContainsValue(*ListActivityLogsRequest) bool
}

// ParseListActivityLogsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListActivityLogsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListActivityLogsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListActivityLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListActivityLogsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListActivityLogsRequest_FieldPathArrayItemValue), nil
}

func MustParseListActivityLogsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListActivityLogsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListActivityLogsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListActivityLogsRequest_FieldTerminalPathArrayItemValue struct {
	ListActivityLogsRequest_FieldTerminalPath
	value interface{}
}

var _ ListActivityLogsRequest_FieldPathArrayItemValue = (*ListActivityLogsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListActivityLogsRequest as interface{}
func (fpaiv *ListActivityLogsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListActivityLogsRequest_FieldTerminalPathArrayItemValue) AsParentsItemValue() (*activity_log.ParentReference, bool) {
	res, ok := fpaiv.value.(*activity_log.ParentReference)
	return res, ok
}

func (fpaiv *ListActivityLogsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListActivityLogsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListActivityLogsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListActivityLogsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListActivityLogsRequest'
func (fpaiv *ListActivityLogsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListActivityLogsRequest) bool {
	slice := fpaiv.ListActivityLogsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListActivityLogsRequest_FieldSubPathArrayItemValue struct {
	ListActivityLogsRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListActivityLogsRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListActivityLogsRequest_FieldSubPathArrayItemValue) AsIntervalPathItemValue() (audit_common.TimeInterval_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(audit_common.TimeInterval_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListActivityLogsRequest'
func (fpaivs *ListActivityLogsRequest_FieldSubPathArrayItemValue) ContainsValue(source *ListActivityLogsRequest) bool {
	switch fpaivs.Selector() {
	case ListActivityLogsRequest_FieldPathSelectorInterval:
		return fpaivs.subPathItemValue.(audit_common.TimeInterval_FieldPathArrayItemValue).ContainsValue(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsRequest: %d", fpaivs.Selector()))
	}
}

// ListActivityLogsRequest_FieldPathArrayOfValues allows storing slice of values for ListActivityLogsRequest fields according to their type
type ListActivityLogsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListActivityLogsRequest_FieldPath
}

func ParseListActivityLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListActivityLogsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListActivityLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListActivityLogsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListActivityLogsRequest_FieldPathArrayOfValues), nil
}

func MustParseListActivityLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListActivityLogsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListActivityLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListActivityLogsRequest_FieldTerminalPathArrayOfValues struct {
	ListActivityLogsRequest_FieldTerminalPath
	values interface{}
}

var _ ListActivityLogsRequest_FieldPathArrayOfValues = (*ListActivityLogsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListActivityLogsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListActivityLogsRequest_FieldPathSelectorParents:
		for _, v := range fpaov.values.([][]*activity_log.ParentReference) {
			values = append(values, v)
		}
	case ListActivityLogsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*activity_log.Filter) {
			values = append(values, v)
		}
	case ListActivityLogsRequest_FieldPathSelectorInterval:
		for _, v := range fpaov.values.([]*audit_common.TimeInterval) {
			values = append(values, v)
		}
	case ListActivityLogsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListActivityLogsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListActivityLogsRequest_FieldTerminalPathArrayOfValues) AsParentsArrayOfValues() ([][]*activity_log.ParentReference, bool) {
	res, ok := fpaov.values.([][]*activity_log.ParentReference)
	return res, ok
}
func (fpaov *ListActivityLogsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*activity_log.Filter, bool) {
	res, ok := fpaov.values.([]*activity_log.Filter)
	return res, ok
}
func (fpaov *ListActivityLogsRequest_FieldTerminalPathArrayOfValues) AsIntervalArrayOfValues() ([]*audit_common.TimeInterval, bool) {
	res, ok := fpaov.values.([]*audit_common.TimeInterval)
	return res, ok
}
func (fpaov *ListActivityLogsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListActivityLogsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type ListActivityLogsRequest_FieldSubPathArrayOfValues struct {
	ListActivityLogsRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListActivityLogsRequest_FieldPathArrayOfValues = (*ListActivityLogsRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListActivityLogsRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListActivityLogsRequest_FieldSubPathArrayOfValues) AsIntervalPathArrayOfValues() (audit_common.TimeInterval_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(audit_common.TimeInterval_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListActivityLogsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListActivityLogsResponse_FieldPathSelector
	Get(source *ListActivityLogsResponse) []interface{}
	GetSingle(source *ListActivityLogsResponse) (interface{}, bool)
	ClearValue(item *ListActivityLogsResponse)

	// Those methods build corresponding ListActivityLogsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListActivityLogsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListActivityLogsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListActivityLogsResponse_FieldPathArrayItemValue
}

type ListActivityLogsResponse_FieldPathSelector int32

const (
	ListActivityLogsResponse_FieldPathSelectorActivityLogs    ListActivityLogsResponse_FieldPathSelector = 0
	ListActivityLogsResponse_FieldPathSelectorNextPageToken   ListActivityLogsResponse_FieldPathSelector = 1
	ListActivityLogsResponse_FieldPathSelectorExecutionErrors ListActivityLogsResponse_FieldPathSelector = 2
)

func (s ListActivityLogsResponse_FieldPathSelector) String() string {
	switch s {
	case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
		return "activity_logs"
	case ListActivityLogsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
		return "execution_errors"
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", s))
	}
}

func BuildListActivityLogsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListActivityLogsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListActivityLogsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "activity_logs", "activityLogs", "activity-logs":
			return &ListActivityLogsResponse_FieldTerminalPath{selector: ListActivityLogsResponse_FieldPathSelectorActivityLogs}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListActivityLogsResponse_FieldTerminalPath{selector: ListActivityLogsResponse_FieldPathSelectorNextPageToken}, nil
		case "execution_errors", "executionErrors", "execution-errors":
			return &ListActivityLogsResponse_FieldTerminalPath{selector: ListActivityLogsResponse_FieldPathSelectorExecutionErrors}, nil
		}
	} else {
		switch fp[0] {
		case "activity_logs", "activityLogs", "activity-logs":
			if subpath, err := activity_log.BuildActivityLog_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListActivityLogsResponse_FieldSubPath{selector: ListActivityLogsResponse_FieldPathSelectorActivityLogs, subPath: subpath}, nil
			}
		case "execution_errors", "executionErrors", "execution-errors":
			if subpath, err := rpc.BuildStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListActivityLogsResponse_FieldSubPath{selector: ListActivityLogsResponse_FieldPathSelectorExecutionErrors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListActivityLogsResponse", fp)
}

func ParseListActivityLogsResponse_FieldPath(rawField string) (ListActivityLogsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListActivityLogsResponse_FieldPath(fp)
}

func MustParseListActivityLogsResponse_FieldPath(rawField string) ListActivityLogsResponse_FieldPath {
	fp, err := ParseListActivityLogsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListActivityLogsResponse_FieldTerminalPath struct {
	selector ListActivityLogsResponse_FieldPathSelector
}

var _ ListActivityLogsResponse_FieldPath = (*ListActivityLogsResponse_FieldTerminalPath)(nil)

func (fp *ListActivityLogsResponse_FieldTerminalPath) Selector() ListActivityLogsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListActivityLogsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListActivityLogsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListActivityLogsResponse
func (fp *ListActivityLogsResponse_FieldTerminalPath) Get(source *ListActivityLogsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
			for _, value := range source.GetActivityLogs() {
				values = append(values, value)
			}
		case ListActivityLogsResponse_FieldPathSelectorNextPageToken:
			values = append(values, source.NextPageToken)
		case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
			for _, value := range source.GetExecutionErrors() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListActivityLogsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListActivityLogsResponse))
}

// GetSingle returns value pointed by specific field of from source ListActivityLogsResponse
func (fp *ListActivityLogsResponse_FieldTerminalPath) GetSingle(source *ListActivityLogsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
		res := source.GetActivityLogs()
		return res, res != nil
	case ListActivityLogsResponse_FieldPathSelectorNextPageToken:
		return source.GetNextPageToken(), source != nil
	case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
		res := source.GetExecutionErrors()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fp.selector))
	}
}

func (fp *ListActivityLogsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListActivityLogsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListActivityLogsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
		return ([]*activity_log.ActivityLog)(nil)
	case ListActivityLogsResponse_FieldPathSelectorNextPageToken:
		return ""
	case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
		return ([]*rpc.Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fp.selector))
	}
}

func (fp *ListActivityLogsResponse_FieldTerminalPath) ClearValue(item *ListActivityLogsResponse) {
	if item != nil {
		switch fp.selector {
		case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
			item.ActivityLogs = nil
		case ListActivityLogsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = ""
		case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
			item.ExecutionErrors = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListActivityLogsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListActivityLogsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListActivityLogsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListActivityLogsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListActivityLogsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListActivityLogsResponse_FieldTerminalPath) WithIValue(value interface{}) ListActivityLogsResponse_FieldPathValue {
	switch fp.selector {
	case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
		return &ListActivityLogsResponse_FieldTerminalPathValue{ListActivityLogsResponse_FieldTerminalPath: *fp, value: value.([]*activity_log.ActivityLog)}
	case ListActivityLogsResponse_FieldPathSelectorNextPageToken:
		return &ListActivityLogsResponse_FieldTerminalPathValue{ListActivityLogsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
		return &ListActivityLogsResponse_FieldTerminalPathValue{ListActivityLogsResponse_FieldTerminalPath: *fp, value: value.([]*rpc.Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fp.selector))
	}
}

func (fp *ListActivityLogsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListActivityLogsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListActivityLogsResponse_FieldPathArrayOfValues {
	fpaov := &ListActivityLogsResponse_FieldTerminalPathArrayOfValues{ListActivityLogsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
		return &ListActivityLogsResponse_FieldTerminalPathArrayOfValues{ListActivityLogsResponse_FieldTerminalPath: *fp, values: values.([][]*activity_log.ActivityLog)}
	case ListActivityLogsResponse_FieldPathSelectorNextPageToken:
		return &ListActivityLogsResponse_FieldTerminalPathArrayOfValues{ListActivityLogsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
		return &ListActivityLogsResponse_FieldTerminalPathArrayOfValues{ListActivityLogsResponse_FieldTerminalPath: *fp, values: values.([][]*rpc.Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListActivityLogsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListActivityLogsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListActivityLogsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
		return &ListActivityLogsResponse_FieldTerminalPathArrayItemValue{ListActivityLogsResponse_FieldTerminalPath: *fp, value: value.(*activity_log.ActivityLog)}
	case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
		return &ListActivityLogsResponse_FieldTerminalPathArrayItemValue{ListActivityLogsResponse_FieldTerminalPath: *fp, value: value.(*rpc.Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fp.selector))
	}
}

func (fp *ListActivityLogsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListActivityLogsResponse_FieldSubPath struct {
	selector ListActivityLogsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListActivityLogsResponse_FieldPath = (*ListActivityLogsResponse_FieldSubPath)(nil)

func (fps *ListActivityLogsResponse_FieldSubPath) Selector() ListActivityLogsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListActivityLogsResponse_FieldSubPath) AsActivityLogsSubPath() (activity_log.ActivityLog_FieldPath, bool) {
	res, ok := fps.subPath.(activity_log.ActivityLog_FieldPath)
	return res, ok
}
func (fps *ListActivityLogsResponse_FieldSubPath) AsExecutionErrorsSubPath() (rpc.Status_FieldPath, bool) {
	res, ok := fps.subPath.(rpc.Status_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListActivityLogsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListActivityLogsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListActivityLogsResponse
func (fps *ListActivityLogsResponse_FieldSubPath) Get(source *ListActivityLogsResponse) (values []interface{}) {
	if asActivityLogFieldPath, ok := fps.AsActivityLogsSubPath(); ok {
		for _, item := range source.GetActivityLogs() {
			values = append(values, asActivityLogFieldPath.Get(item)...)
		}
	} else if asStatusFieldPath, ok := fps.AsExecutionErrorsSubPath(); ok {
		for _, item := range source.GetExecutionErrors() {
			values = append(values, asStatusFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListActivityLogsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListActivityLogsResponse))
}

// GetSingle returns value of selected field from source ListActivityLogsResponse
func (fps *ListActivityLogsResponse_FieldSubPath) GetSingle(source *ListActivityLogsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
		if len(source.GetActivityLogs()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetActivityLogs()[0])
	case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
		if len(source.GetExecutionErrors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetExecutionErrors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fps.selector))
	}
}

func (fps *ListActivityLogsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListActivityLogsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListActivityLogsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListActivityLogsResponse_FieldSubPath) ClearValue(item *ListActivityLogsResponse) {
	if item != nil {
		switch fps.selector {
		case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
			for _, subItem := range item.ActivityLogs {
				fps.subPath.ClearValueRaw(subItem)
			}
		case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
			for _, subItem := range item.ExecutionErrors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListActivityLogsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListActivityLogsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListActivityLogsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListActivityLogsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListActivityLogsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListActivityLogsResponse_FieldSubPath) WithIValue(value interface{}) ListActivityLogsResponse_FieldPathValue {
	return &ListActivityLogsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListActivityLogsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListActivityLogsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListActivityLogsResponse_FieldPathArrayOfValues {
	return &ListActivityLogsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListActivityLogsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListActivityLogsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListActivityLogsResponse_FieldPathArrayItemValue {
	return &ListActivityLogsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListActivityLogsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListActivityLogsResponse_FieldPathValue allows storing values for ListActivityLogsResponse fields according to their type
type ListActivityLogsResponse_FieldPathValue interface {
	ListActivityLogsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListActivityLogsResponse)
	CompareWith(*ListActivityLogsResponse) (cmp int, comparable bool)
}

func ParseListActivityLogsResponse_FieldPathValue(pathStr, valueStr string) (ListActivityLogsResponse_FieldPathValue, error) {
	fp, err := ParseListActivityLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListActivityLogsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListActivityLogsResponse_FieldPathValue), nil
}

func MustParseListActivityLogsResponse_FieldPathValue(pathStr, valueStr string) ListActivityLogsResponse_FieldPathValue {
	fpv, err := ParseListActivityLogsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListActivityLogsResponse_FieldTerminalPathValue struct {
	ListActivityLogsResponse_FieldTerminalPath
	value interface{}
}

var _ ListActivityLogsResponse_FieldPathValue = (*ListActivityLogsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListActivityLogsResponse' as interface{}
func (fpv *ListActivityLogsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListActivityLogsResponse_FieldTerminalPathValue) AsActivityLogsValue() ([]*activity_log.ActivityLog, bool) {
	res, ok := fpv.value.([]*activity_log.ActivityLog)
	return res, ok
}
func (fpv *ListActivityLogsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ListActivityLogsResponse_FieldTerminalPathValue) AsExecutionErrorsValue() ([]*rpc.Status, bool) {
	res, ok := fpv.value.([]*rpc.Status)
	return res, ok
}

// SetTo stores value for selected field for object ListActivityLogsResponse
func (fpv *ListActivityLogsResponse_FieldTerminalPathValue) SetTo(target **ListActivityLogsResponse) {
	if *target == nil {
		*target = new(ListActivityLogsResponse)
	}
	switch fpv.selector {
	case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
		(*target).ActivityLogs = fpv.value.([]*activity_log.ActivityLog)
	case ListActivityLogsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(string)
	case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
		(*target).ExecutionErrors = fpv.value.([]*rpc.Status)
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fpv.selector))
	}
}

func (fpv *ListActivityLogsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListActivityLogsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListActivityLogsResponse_FieldTerminalPathValue' with the value under path in 'ListActivityLogsResponse'.
func (fpv *ListActivityLogsResponse_FieldTerminalPathValue) CompareWith(source *ListActivityLogsResponse) (int, bool) {
	switch fpv.selector {
	case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
		return 0, false
	case ListActivityLogsResponse_FieldPathSelectorNextPageToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetNextPageToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fpv.selector))
	}
}

func (fpv *ListActivityLogsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListActivityLogsResponse))
}

type ListActivityLogsResponse_FieldSubPathValue struct {
	ListActivityLogsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListActivityLogsResponse_FieldPathValue = (*ListActivityLogsResponse_FieldSubPathValue)(nil)

func (fpvs *ListActivityLogsResponse_FieldSubPathValue) AsActivityLogsPathValue() (activity_log.ActivityLog_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(activity_log.ActivityLog_FieldPathValue)
	return res, ok
}
func (fpvs *ListActivityLogsResponse_FieldSubPathValue) AsExecutionErrorsPathValue() (rpc.Status_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(rpc.Status_FieldPathValue)
	return res, ok
}

func (fpvs *ListActivityLogsResponse_FieldSubPathValue) SetTo(target **ListActivityLogsResponse) {
	if *target == nil {
		*target = new(ListActivityLogsResponse)
	}
	switch fpvs.Selector() {
	case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
		panic("FieldPath setter is unsupported for array subpaths")
	case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListActivityLogsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListActivityLogsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListActivityLogsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListActivityLogsResponse_FieldSubPathValue) CompareWith(source *ListActivityLogsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
		return 0, false // repeated field
	case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListActivityLogsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListActivityLogsResponse))
}

// ListActivityLogsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListActivityLogsResponse according to their type
// Present only for array (repeated) types.
type ListActivityLogsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListActivityLogsResponse_FieldPath
	ContainsValue(*ListActivityLogsResponse) bool
}

// ParseListActivityLogsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListActivityLogsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListActivityLogsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListActivityLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListActivityLogsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListActivityLogsResponse_FieldPathArrayItemValue), nil
}

func MustParseListActivityLogsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListActivityLogsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListActivityLogsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListActivityLogsResponse_FieldTerminalPathArrayItemValue struct {
	ListActivityLogsResponse_FieldTerminalPath
	value interface{}
}

var _ ListActivityLogsResponse_FieldPathArrayItemValue = (*ListActivityLogsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListActivityLogsResponse as interface{}
func (fpaiv *ListActivityLogsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListActivityLogsResponse_FieldTerminalPathArrayItemValue) AsActivityLogsItemValue() (*activity_log.ActivityLog, bool) {
	res, ok := fpaiv.value.(*activity_log.ActivityLog)
	return res, ok
}
func (fpaiv *ListActivityLogsResponse_FieldTerminalPathArrayItemValue) AsExecutionErrorsItemValue() (*rpc.Status, bool) {
	res, ok := fpaiv.value.(*rpc.Status)
	return res, ok
}

func (fpaiv *ListActivityLogsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListActivityLogsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListActivityLogsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListActivityLogsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListActivityLogsResponse'
func (fpaiv *ListActivityLogsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListActivityLogsResponse) bool {
	slice := fpaiv.ListActivityLogsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListActivityLogsResponse_FieldSubPathArrayItemValue struct {
	ListActivityLogsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListActivityLogsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListActivityLogsResponse_FieldSubPathArrayItemValue) AsActivityLogsPathItemValue() (activity_log.ActivityLog_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(activity_log.ActivityLog_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ListActivityLogsResponse_FieldSubPathArrayItemValue) AsExecutionErrorsPathItemValue() (rpc.Status_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(rpc.Status_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListActivityLogsResponse'
func (fpaivs *ListActivityLogsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListActivityLogsResponse) bool {
	switch fpaivs.Selector() {
	case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
		return false // repeated/map field
	case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListActivityLogsResponse: %d", fpaivs.Selector()))
	}
}

// ListActivityLogsResponse_FieldPathArrayOfValues allows storing slice of values for ListActivityLogsResponse fields according to their type
type ListActivityLogsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListActivityLogsResponse_FieldPath
}

func ParseListActivityLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListActivityLogsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListActivityLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListActivityLogsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListActivityLogsResponse_FieldPathArrayOfValues), nil
}

func MustParseListActivityLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListActivityLogsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListActivityLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListActivityLogsResponse_FieldTerminalPathArrayOfValues struct {
	ListActivityLogsResponse_FieldTerminalPath
	values interface{}
}

var _ ListActivityLogsResponse_FieldPathArrayOfValues = (*ListActivityLogsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListActivityLogsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListActivityLogsResponse_FieldPathSelectorActivityLogs:
		for _, v := range fpaov.values.([][]*activity_log.ActivityLog) {
			values = append(values, v)
		}
	case ListActivityLogsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ListActivityLogsResponse_FieldPathSelectorExecutionErrors:
		for _, v := range fpaov.values.([][]*rpc.Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListActivityLogsResponse_FieldTerminalPathArrayOfValues) AsActivityLogsArrayOfValues() ([][]*activity_log.ActivityLog, bool) {
	res, ok := fpaov.values.([][]*activity_log.ActivityLog)
	return res, ok
}
func (fpaov *ListActivityLogsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ListActivityLogsResponse_FieldTerminalPathArrayOfValues) AsExecutionErrorsArrayOfValues() ([][]*rpc.Status, bool) {
	res, ok := fpaov.values.([][]*rpc.Status)
	return res, ok
}

type ListActivityLogsResponse_FieldSubPathArrayOfValues struct {
	ListActivityLogsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListActivityLogsResponse_FieldPathArrayOfValues = (*ListActivityLogsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListActivityLogsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListActivityLogsResponse_FieldSubPathArrayOfValues) AsActivityLogsPathArrayOfValues() (activity_log.ActivityLog_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(activity_log.ActivityLog_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ListActivityLogsResponse_FieldSubPathArrayOfValues) AsExecutionErrorsPathArrayOfValues() (rpc.Status_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(rpc.Status_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateActivityLogsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateActivityLogsRequest_FieldPathSelector
	Get(source *CreateActivityLogsRequest) []interface{}
	GetSingle(source *CreateActivityLogsRequest) (interface{}, bool)
	ClearValue(item *CreateActivityLogsRequest)

	// Those methods build corresponding CreateActivityLogsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateActivityLogsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateActivityLogsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateActivityLogsRequest_FieldPathArrayItemValue
}

type CreateActivityLogsRequest_FieldPathSelector int32

const (
	CreateActivityLogsRequest_FieldPathSelectorActivityLogs CreateActivityLogsRequest_FieldPathSelector = 0
)

func (s CreateActivityLogsRequest_FieldPathSelector) String() string {
	switch s {
	case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
		return "activity_logs"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", s))
	}
}

func BuildCreateActivityLogsRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateActivityLogsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateActivityLogsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "activity_logs", "activityLogs", "activity-logs":
			return &CreateActivityLogsRequest_FieldTerminalPath{selector: CreateActivityLogsRequest_FieldPathSelectorActivityLogs}, nil
		}
	} else {
		switch fp[0] {
		case "activity_logs", "activityLogs", "activity-logs":
			if subpath, err := activity_log.BuildActivityLog_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateActivityLogsRequest_FieldSubPath{selector: CreateActivityLogsRequest_FieldPathSelectorActivityLogs, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateActivityLogsRequest", fp)
}

func ParseCreateActivityLogsRequest_FieldPath(rawField string) (CreateActivityLogsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateActivityLogsRequest_FieldPath(fp)
}

func MustParseCreateActivityLogsRequest_FieldPath(rawField string) CreateActivityLogsRequest_FieldPath {
	fp, err := ParseCreateActivityLogsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateActivityLogsRequest_FieldTerminalPath struct {
	selector CreateActivityLogsRequest_FieldPathSelector
}

var _ CreateActivityLogsRequest_FieldPath = (*CreateActivityLogsRequest_FieldTerminalPath)(nil)

func (fp *CreateActivityLogsRequest_FieldTerminalPath) Selector() CreateActivityLogsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateActivityLogsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateActivityLogsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateActivityLogsRequest
func (fp *CreateActivityLogsRequest_FieldTerminalPath) Get(source *CreateActivityLogsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
			for _, value := range source.GetActivityLogs() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateActivityLogsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateActivityLogsRequest))
}

// GetSingle returns value pointed by specific field of from source CreateActivityLogsRequest
func (fp *CreateActivityLogsRequest_FieldTerminalPath) GetSingle(source *CreateActivityLogsRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
		res := source.GetActivityLogs()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fp.selector))
	}
}

func (fp *CreateActivityLogsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateActivityLogsRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateActivityLogsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
		return ([]*activity_log.ActivityLog)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fp.selector))
	}
}

func (fp *CreateActivityLogsRequest_FieldTerminalPath) ClearValue(item *CreateActivityLogsRequest) {
	if item != nil {
		switch fp.selector {
		case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
			item.ActivityLogs = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateActivityLogsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateActivityLogsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateActivityLogsRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreateActivityLogsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateActivityLogsRequest_FieldTerminalPath) WithIValue(value interface{}) CreateActivityLogsRequest_FieldPathValue {
	switch fp.selector {
	case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
		return &CreateActivityLogsRequest_FieldTerminalPathValue{CreateActivityLogsRequest_FieldTerminalPath: *fp, value: value.([]*activity_log.ActivityLog)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fp.selector))
	}
}

func (fp *CreateActivityLogsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateActivityLogsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateActivityLogsRequest_FieldPathArrayOfValues {
	fpaov := &CreateActivityLogsRequest_FieldTerminalPathArrayOfValues{CreateActivityLogsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
		return &CreateActivityLogsRequest_FieldTerminalPathArrayOfValues{CreateActivityLogsRequest_FieldTerminalPath: *fp, values: values.([][]*activity_log.ActivityLog)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateActivityLogsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateActivityLogsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateActivityLogsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
		return &CreateActivityLogsRequest_FieldTerminalPathArrayItemValue{CreateActivityLogsRequest_FieldTerminalPath: *fp, value: value.(*activity_log.ActivityLog)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fp.selector))
	}
}

func (fp *CreateActivityLogsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateActivityLogsRequest_FieldSubPath struct {
	selector CreateActivityLogsRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateActivityLogsRequest_FieldPath = (*CreateActivityLogsRequest_FieldSubPath)(nil)

func (fps *CreateActivityLogsRequest_FieldSubPath) Selector() CreateActivityLogsRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateActivityLogsRequest_FieldSubPath) AsActivityLogsSubPath() (activity_log.ActivityLog_FieldPath, bool) {
	res, ok := fps.subPath.(activity_log.ActivityLog_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateActivityLogsRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateActivityLogsRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateActivityLogsRequest
func (fps *CreateActivityLogsRequest_FieldSubPath) Get(source *CreateActivityLogsRequest) (values []interface{}) {
	if asActivityLogFieldPath, ok := fps.AsActivityLogsSubPath(); ok {
		for _, item := range source.GetActivityLogs() {
			values = append(values, asActivityLogFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateActivityLogsRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateActivityLogsRequest))
}

// GetSingle returns value of selected field from source CreateActivityLogsRequest
func (fps *CreateActivityLogsRequest_FieldSubPath) GetSingle(source *CreateActivityLogsRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
		if len(source.GetActivityLogs()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetActivityLogs()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fps.selector))
	}
}

func (fps *CreateActivityLogsRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateActivityLogsRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateActivityLogsRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateActivityLogsRequest_FieldSubPath) ClearValue(item *CreateActivityLogsRequest) {
	if item != nil {
		switch fps.selector {
		case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
			for _, subItem := range item.ActivityLogs {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateActivityLogsRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateActivityLogsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateActivityLogsRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateActivityLogsRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateActivityLogsRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateActivityLogsRequest_FieldSubPath) WithIValue(value interface{}) CreateActivityLogsRequest_FieldPathValue {
	return &CreateActivityLogsRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateActivityLogsRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateActivityLogsRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateActivityLogsRequest_FieldPathArrayOfValues {
	return &CreateActivityLogsRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateActivityLogsRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateActivityLogsRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateActivityLogsRequest_FieldPathArrayItemValue {
	return &CreateActivityLogsRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateActivityLogsRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateActivityLogsRequest_FieldPathValue allows storing values for CreateActivityLogsRequest fields according to their type
type CreateActivityLogsRequest_FieldPathValue interface {
	CreateActivityLogsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateActivityLogsRequest)
	CompareWith(*CreateActivityLogsRequest) (cmp int, comparable bool)
}

func ParseCreateActivityLogsRequest_FieldPathValue(pathStr, valueStr string) (CreateActivityLogsRequest_FieldPathValue, error) {
	fp, err := ParseCreateActivityLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateActivityLogsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateActivityLogsRequest_FieldPathValue), nil
}

func MustParseCreateActivityLogsRequest_FieldPathValue(pathStr, valueStr string) CreateActivityLogsRequest_FieldPathValue {
	fpv, err := ParseCreateActivityLogsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateActivityLogsRequest_FieldTerminalPathValue struct {
	CreateActivityLogsRequest_FieldTerminalPath
	value interface{}
}

var _ CreateActivityLogsRequest_FieldPathValue = (*CreateActivityLogsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateActivityLogsRequest' as interface{}
func (fpv *CreateActivityLogsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateActivityLogsRequest_FieldTerminalPathValue) AsActivityLogsValue() ([]*activity_log.ActivityLog, bool) {
	res, ok := fpv.value.([]*activity_log.ActivityLog)
	return res, ok
}

// SetTo stores value for selected field for object CreateActivityLogsRequest
func (fpv *CreateActivityLogsRequest_FieldTerminalPathValue) SetTo(target **CreateActivityLogsRequest) {
	if *target == nil {
		*target = new(CreateActivityLogsRequest)
	}
	switch fpv.selector {
	case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
		(*target).ActivityLogs = fpv.value.([]*activity_log.ActivityLog)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fpv.selector))
	}
}

func (fpv *CreateActivityLogsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateActivityLogsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateActivityLogsRequest_FieldTerminalPathValue' with the value under path in 'CreateActivityLogsRequest'.
func (fpv *CreateActivityLogsRequest_FieldTerminalPathValue) CompareWith(source *CreateActivityLogsRequest) (int, bool) {
	switch fpv.selector {
	case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fpv.selector))
	}
}

func (fpv *CreateActivityLogsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateActivityLogsRequest))
}

type CreateActivityLogsRequest_FieldSubPathValue struct {
	CreateActivityLogsRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateActivityLogsRequest_FieldPathValue = (*CreateActivityLogsRequest_FieldSubPathValue)(nil)

func (fpvs *CreateActivityLogsRequest_FieldSubPathValue) AsActivityLogsPathValue() (activity_log.ActivityLog_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(activity_log.ActivityLog_FieldPathValue)
	return res, ok
}

func (fpvs *CreateActivityLogsRequest_FieldSubPathValue) SetTo(target **CreateActivityLogsRequest) {
	if *target == nil {
		*target = new(CreateActivityLogsRequest)
	}
	switch fpvs.Selector() {
	case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateActivityLogsRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateActivityLogsRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateActivityLogsRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateActivityLogsRequest_FieldSubPathValue) CompareWith(source *CreateActivityLogsRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateActivityLogsRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateActivityLogsRequest))
}

// CreateActivityLogsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateActivityLogsRequest according to their type
// Present only for array (repeated) types.
type CreateActivityLogsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateActivityLogsRequest_FieldPath
	ContainsValue(*CreateActivityLogsRequest) bool
}

// ParseCreateActivityLogsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateActivityLogsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateActivityLogsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateActivityLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateActivityLogsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateActivityLogsRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateActivityLogsRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateActivityLogsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateActivityLogsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateActivityLogsRequest_FieldTerminalPathArrayItemValue struct {
	CreateActivityLogsRequest_FieldTerminalPath
	value interface{}
}

var _ CreateActivityLogsRequest_FieldPathArrayItemValue = (*CreateActivityLogsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateActivityLogsRequest as interface{}
func (fpaiv *CreateActivityLogsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *CreateActivityLogsRequest_FieldTerminalPathArrayItemValue) AsActivityLogsItemValue() (*activity_log.ActivityLog, bool) {
	res, ok := fpaiv.value.(*activity_log.ActivityLog)
	return res, ok
}

func (fpaiv *CreateActivityLogsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateActivityLogsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateActivityLogsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateActivityLogsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateActivityLogsRequest'
func (fpaiv *CreateActivityLogsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateActivityLogsRequest) bool {
	slice := fpaiv.CreateActivityLogsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateActivityLogsRequest_FieldSubPathArrayItemValue struct {
	CreateActivityLogsRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateActivityLogsRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateActivityLogsRequest_FieldSubPathArrayItemValue) AsActivityLogsPathItemValue() (activity_log.ActivityLog_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(activity_log.ActivityLog_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateActivityLogsRequest'
func (fpaivs *CreateActivityLogsRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateActivityLogsRequest) bool {
	switch fpaivs.Selector() {
	case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsRequest: %d", fpaivs.Selector()))
	}
}

// CreateActivityLogsRequest_FieldPathArrayOfValues allows storing slice of values for CreateActivityLogsRequest fields according to their type
type CreateActivityLogsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateActivityLogsRequest_FieldPath
}

func ParseCreateActivityLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateActivityLogsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateActivityLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateActivityLogsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateActivityLogsRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateActivityLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateActivityLogsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateActivityLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateActivityLogsRequest_FieldTerminalPathArrayOfValues struct {
	CreateActivityLogsRequest_FieldTerminalPath
	values interface{}
}

var _ CreateActivityLogsRequest_FieldPathArrayOfValues = (*CreateActivityLogsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateActivityLogsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateActivityLogsRequest_FieldPathSelectorActivityLogs:
		for _, v := range fpaov.values.([][]*activity_log.ActivityLog) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateActivityLogsRequest_FieldTerminalPathArrayOfValues) AsActivityLogsArrayOfValues() ([][]*activity_log.ActivityLog, bool) {
	res, ok := fpaov.values.([][]*activity_log.ActivityLog)
	return res, ok
}

type CreateActivityLogsRequest_FieldSubPathArrayOfValues struct {
	CreateActivityLogsRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateActivityLogsRequest_FieldPathArrayOfValues = (*CreateActivityLogsRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateActivityLogsRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateActivityLogsRequest_FieldSubPathArrayOfValues) AsActivityLogsPathArrayOfValues() (activity_log.ActivityLog_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(activity_log.ActivityLog_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateActivityLogsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateActivityLogsResponse_FieldPathSelector
	Get(source *CreateActivityLogsResponse) []interface{}
	GetSingle(source *CreateActivityLogsResponse) (interface{}, bool)
	ClearValue(item *CreateActivityLogsResponse)

	// Those methods build corresponding CreateActivityLogsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateActivityLogsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateActivityLogsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateActivityLogsResponse_FieldPathArrayItemValue
}

type CreateActivityLogsResponse_FieldPathSelector int32

const (
	CreateActivityLogsResponse_FieldPathSelectorLogNames CreateActivityLogsResponse_FieldPathSelector = 0
)

func (s CreateActivityLogsResponse_FieldPathSelector) String() string {
	switch s {
	case CreateActivityLogsResponse_FieldPathSelectorLogNames:
		return "log_names"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsResponse: %d", s))
	}
}

func BuildCreateActivityLogsResponse_FieldPath(fp gotenobject.RawFieldPath) (CreateActivityLogsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateActivityLogsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "log_names", "logNames", "log-names":
			return &CreateActivityLogsResponse_FieldTerminalPath{selector: CreateActivityLogsResponse_FieldPathSelectorLogNames}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateActivityLogsResponse", fp)
}

func ParseCreateActivityLogsResponse_FieldPath(rawField string) (CreateActivityLogsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateActivityLogsResponse_FieldPath(fp)
}

func MustParseCreateActivityLogsResponse_FieldPath(rawField string) CreateActivityLogsResponse_FieldPath {
	fp, err := ParseCreateActivityLogsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateActivityLogsResponse_FieldTerminalPath struct {
	selector CreateActivityLogsResponse_FieldPathSelector
}

var _ CreateActivityLogsResponse_FieldPath = (*CreateActivityLogsResponse_FieldTerminalPath)(nil)

func (fp *CreateActivityLogsResponse_FieldTerminalPath) Selector() CreateActivityLogsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateActivityLogsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateActivityLogsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateActivityLogsResponse
func (fp *CreateActivityLogsResponse_FieldTerminalPath) Get(source *CreateActivityLogsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateActivityLogsResponse_FieldPathSelectorLogNames:
			for _, value := range source.GetLogNames() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateActivityLogsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateActivityLogsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateActivityLogsResponse))
}

// GetSingle returns value pointed by specific field of from source CreateActivityLogsResponse
func (fp *CreateActivityLogsResponse_FieldTerminalPath) GetSingle(source *CreateActivityLogsResponse) (interface{}, bool) {
	switch fp.selector {
	case CreateActivityLogsResponse_FieldPathSelectorLogNames:
		res := source.GetLogNames()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsResponse: %d", fp.selector))
	}
}

func (fp *CreateActivityLogsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateActivityLogsResponse))
}

// GetDefault returns a default value of the field type
func (fp *CreateActivityLogsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateActivityLogsResponse_FieldPathSelectorLogNames:
		return ([]*activity_log.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsResponse: %d", fp.selector))
	}
}

func (fp *CreateActivityLogsResponse_FieldTerminalPath) ClearValue(item *CreateActivityLogsResponse) {
	if item != nil {
		switch fp.selector {
		case CreateActivityLogsResponse_FieldPathSelectorLogNames:
			item.LogNames = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateActivityLogsResponse: %d", fp.selector))
		}
	}
}

func (fp *CreateActivityLogsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateActivityLogsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateActivityLogsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateActivityLogsResponse_FieldPathSelectorLogNames
}

func (fp *CreateActivityLogsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateActivityLogsResponse_FieldTerminalPath) WithIValue(value interface{}) CreateActivityLogsResponse_FieldPathValue {
	switch fp.selector {
	case CreateActivityLogsResponse_FieldPathSelectorLogNames:
		return &CreateActivityLogsResponse_FieldTerminalPathValue{CreateActivityLogsResponse_FieldTerminalPath: *fp, value: value.([]*activity_log.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsResponse: %d", fp.selector))
	}
}

func (fp *CreateActivityLogsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateActivityLogsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateActivityLogsResponse_FieldPathArrayOfValues {
	fpaov := &CreateActivityLogsResponse_FieldTerminalPathArrayOfValues{CreateActivityLogsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateActivityLogsResponse_FieldPathSelectorLogNames:
		return &CreateActivityLogsResponse_FieldTerminalPathArrayOfValues{CreateActivityLogsResponse_FieldTerminalPath: *fp, values: values.([][]*activity_log.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateActivityLogsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateActivityLogsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateActivityLogsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case CreateActivityLogsResponse_FieldPathSelectorLogNames:
		return &CreateActivityLogsResponse_FieldTerminalPathArrayItemValue{CreateActivityLogsResponse_FieldTerminalPath: *fp, value: value.(*activity_log.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsResponse: %d", fp.selector))
	}
}

func (fp *CreateActivityLogsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// CreateActivityLogsResponse_FieldPathValue allows storing values for CreateActivityLogsResponse fields according to their type
type CreateActivityLogsResponse_FieldPathValue interface {
	CreateActivityLogsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateActivityLogsResponse)
	CompareWith(*CreateActivityLogsResponse) (cmp int, comparable bool)
}

func ParseCreateActivityLogsResponse_FieldPathValue(pathStr, valueStr string) (CreateActivityLogsResponse_FieldPathValue, error) {
	fp, err := ParseCreateActivityLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateActivityLogsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateActivityLogsResponse_FieldPathValue), nil
}

func MustParseCreateActivityLogsResponse_FieldPathValue(pathStr, valueStr string) CreateActivityLogsResponse_FieldPathValue {
	fpv, err := ParseCreateActivityLogsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateActivityLogsResponse_FieldTerminalPathValue struct {
	CreateActivityLogsResponse_FieldTerminalPath
	value interface{}
}

var _ CreateActivityLogsResponse_FieldPathValue = (*CreateActivityLogsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateActivityLogsResponse' as interface{}
func (fpv *CreateActivityLogsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateActivityLogsResponse_FieldTerminalPathValue) AsLogNamesValue() ([]*activity_log.Reference, bool) {
	res, ok := fpv.value.([]*activity_log.Reference)
	return res, ok
}

// SetTo stores value for selected field for object CreateActivityLogsResponse
func (fpv *CreateActivityLogsResponse_FieldTerminalPathValue) SetTo(target **CreateActivityLogsResponse) {
	if *target == nil {
		*target = new(CreateActivityLogsResponse)
	}
	switch fpv.selector {
	case CreateActivityLogsResponse_FieldPathSelectorLogNames:
		(*target).LogNames = fpv.value.([]*activity_log.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsResponse: %d", fpv.selector))
	}
}

func (fpv *CreateActivityLogsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateActivityLogsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateActivityLogsResponse_FieldTerminalPathValue' with the value under path in 'CreateActivityLogsResponse'.
func (fpv *CreateActivityLogsResponse_FieldTerminalPathValue) CompareWith(source *CreateActivityLogsResponse) (int, bool) {
	switch fpv.selector {
	case CreateActivityLogsResponse_FieldPathSelectorLogNames:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateActivityLogsResponse: %d", fpv.selector))
	}
}

func (fpv *CreateActivityLogsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateActivityLogsResponse))
}

// CreateActivityLogsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateActivityLogsResponse according to their type
// Present only for array (repeated) types.
type CreateActivityLogsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateActivityLogsResponse_FieldPath
	ContainsValue(*CreateActivityLogsResponse) bool
}

// ParseCreateActivityLogsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateActivityLogsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (CreateActivityLogsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateActivityLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateActivityLogsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateActivityLogsResponse_FieldPathArrayItemValue), nil
}

func MustParseCreateActivityLogsResponse_FieldPathArrayItemValue(pathStr, valueStr string) CreateActivityLogsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateActivityLogsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateActivityLogsResponse_FieldTerminalPathArrayItemValue struct {
	CreateActivityLogsResponse_FieldTerminalPath
	value interface{}
}

var _ CreateActivityLogsResponse_FieldPathArrayItemValue = (*CreateActivityLogsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateActivityLogsResponse as interface{}
func (fpaiv *CreateActivityLogsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *CreateActivityLogsResponse_FieldTerminalPathArrayItemValue) AsLogNamesItemValue() (*activity_log.Reference, bool) {
	res, ok := fpaiv.value.(*activity_log.Reference)
	return res, ok
}

func (fpaiv *CreateActivityLogsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *CreateActivityLogsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateActivityLogsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateActivityLogsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateActivityLogsResponse'
func (fpaiv *CreateActivityLogsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateActivityLogsResponse) bool {
	slice := fpaiv.CreateActivityLogsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// CreateActivityLogsResponse_FieldPathArrayOfValues allows storing slice of values for CreateActivityLogsResponse fields according to their type
type CreateActivityLogsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateActivityLogsResponse_FieldPath
}

func ParseCreateActivityLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateActivityLogsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateActivityLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateActivityLogsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateActivityLogsResponse_FieldPathArrayOfValues), nil
}

func MustParseCreateActivityLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) CreateActivityLogsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseCreateActivityLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateActivityLogsResponse_FieldTerminalPathArrayOfValues struct {
	CreateActivityLogsResponse_FieldTerminalPath
	values interface{}
}

var _ CreateActivityLogsResponse_FieldPathArrayOfValues = (*CreateActivityLogsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateActivityLogsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateActivityLogsResponse_FieldPathSelectorLogNames:
		for _, v := range fpaov.values.([][]*activity_log.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateActivityLogsResponse_FieldTerminalPathArrayOfValues) AsLogNamesArrayOfValues() ([][]*activity_log.Reference, bool) {
	res, ok := fpaov.values.([][]*activity_log.Reference)
	return res, ok
}
