// Code generated by protoc-gen-goten-object
// File: edgelq/audit/proto/v1alpha/method_descriptor_service.proto
// DO NOT EDIT!!!

package method_descriptor_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	method_descriptor "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha/method_descriptor"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &method_descriptor.MethodDescriptor{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetMethodDescriptorRequest) GotenObjectExt() {}

func (o *GetMethodDescriptorRequest) MakeFullFieldMask() *GetMethodDescriptorRequest_FieldMask {
	return FullGetMethodDescriptorRequest_FieldMask()
}

func (o *GetMethodDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetMethodDescriptorRequest_FieldMask()
}

func (o *GetMethodDescriptorRequest) MakeDiffFieldMask(other *GetMethodDescriptorRequest) *GetMethodDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &GetMethodDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetMethodDescriptorRequest_FieldMask()
	}

	res := &GetMethodDescriptorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetMethodDescriptorRequest_FieldTerminalPath{selector: GetMethodDescriptorRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetMethodDescriptorRequest_FieldTerminalPath{selector: GetMethodDescriptorRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetMethodDescriptorRequest_FieldTerminalPath{selector: GetMethodDescriptorRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetMethodDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetMethodDescriptorRequest))
}

func (o *GetMethodDescriptorRequest) Clone() *GetMethodDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &GetMethodDescriptorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &method_descriptor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*method_descriptor.MethodDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *GetMethodDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetMethodDescriptorRequest) Merge(source *GetMethodDescriptorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &method_descriptor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(method_descriptor.MethodDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetMethodDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetMethodDescriptorRequest))
}

func (o *BatchGetMethodDescriptorsRequest) GotenObjectExt() {}

func (o *BatchGetMethodDescriptorsRequest) MakeFullFieldMask() *BatchGetMethodDescriptorsRequest_FieldMask {
	return FullBatchGetMethodDescriptorsRequest_FieldMask()
}

func (o *BatchGetMethodDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetMethodDescriptorsRequest_FieldMask()
}

func (o *BatchGetMethodDescriptorsRequest) MakeDiffFieldMask(other *BatchGetMethodDescriptorsRequest) *BatchGetMethodDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetMethodDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetMethodDescriptorsRequest_FieldMask()
	}

	res := &BatchGetMethodDescriptorsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetMethodDescriptorsRequest_FieldTerminalPath{selector: BatchGetMethodDescriptorsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetMethodDescriptorsRequest_FieldTerminalPath{selector: BatchGetMethodDescriptorsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetMethodDescriptorsRequest_FieldTerminalPath{selector: BatchGetMethodDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetMethodDescriptorsRequest_FieldTerminalPath{selector: BatchGetMethodDescriptorsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetMethodDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetMethodDescriptorsRequest))
}

func (o *BatchGetMethodDescriptorsRequest) Clone() *BatchGetMethodDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetMethodDescriptorsRequest{}
	result.Names = make([]*method_descriptor.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &method_descriptor.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*method_descriptor.MethodDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetMethodDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetMethodDescriptorsRequest) Merge(source *BatchGetMethodDescriptorsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *method_descriptor.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &method_descriptor.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(method_descriptor.MethodDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetMethodDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetMethodDescriptorsRequest))
}

func (o *BatchGetMethodDescriptorsResponse) GotenObjectExt() {}

func (o *BatchGetMethodDescriptorsResponse) MakeFullFieldMask() *BatchGetMethodDescriptorsResponse_FieldMask {
	return FullBatchGetMethodDescriptorsResponse_FieldMask()
}

func (o *BatchGetMethodDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetMethodDescriptorsResponse_FieldMask()
}

func (o *BatchGetMethodDescriptorsResponse) MakeDiffFieldMask(other *BatchGetMethodDescriptorsResponse) *BatchGetMethodDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetMethodDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetMethodDescriptorsResponse_FieldMask()
	}

	res := &BatchGetMethodDescriptorsResponse_FieldMask{}

	if len(o.GetMethodDescriptors()) == len(other.GetMethodDescriptors()) {
		for i, lValue := range o.GetMethodDescriptors() {
			rValue := other.GetMethodDescriptors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetMethodDescriptorsResponse_FieldTerminalPath{selector: BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetMethodDescriptorsResponse_FieldTerminalPath{selector: BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetMethodDescriptorsResponse_FieldTerminalPath{selector: BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetMethodDescriptorsResponse_FieldTerminalPath{selector: BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetMethodDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetMethodDescriptorsResponse))
}

func (o *BatchGetMethodDescriptorsResponse) Clone() *BatchGetMethodDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetMethodDescriptorsResponse{}
	result.MethodDescriptors = make([]*method_descriptor.MethodDescriptor, len(o.MethodDescriptors))
	for i, sourceValue := range o.MethodDescriptors {
		result.MethodDescriptors[i] = sourceValue.Clone()
	}
	result.Missing = make([]*method_descriptor.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &method_descriptor.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetMethodDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetMethodDescriptorsResponse) Merge(source *BatchGetMethodDescriptorsResponse) {
	for _, sourceValue := range source.GetMethodDescriptors() {
		exists := false
		for _, currentValue := range o.MethodDescriptors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *method_descriptor.MethodDescriptor
			if sourceValue != nil {
				newDstElement = new(method_descriptor.MethodDescriptor)
				newDstElement.Merge(sourceValue)
			}
			o.MethodDescriptors = append(o.MethodDescriptors, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *method_descriptor.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &method_descriptor.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetMethodDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetMethodDescriptorsResponse))
}

func (o *ListMethodDescriptorsRequest) GotenObjectExt() {}

func (o *ListMethodDescriptorsRequest) MakeFullFieldMask() *ListMethodDescriptorsRequest_FieldMask {
	return FullListMethodDescriptorsRequest_FieldMask()
}

func (o *ListMethodDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListMethodDescriptorsRequest_FieldMask()
}

func (o *ListMethodDescriptorsRequest) MakeDiffFieldMask(other *ListMethodDescriptorsRequest) *ListMethodDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListMethodDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListMethodDescriptorsRequest_FieldMask()
	}

	res := &ListMethodDescriptorsRequest_FieldMask{}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListMethodDescriptorsRequest_FieldTerminalPath{selector: ListMethodDescriptorsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListMethodDescriptorsRequest_FieldTerminalPath{selector: ListMethodDescriptorsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListMethodDescriptorsRequest_FieldTerminalPath{selector: ListMethodDescriptorsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListMethodDescriptorsRequest_FieldTerminalPath{selector: ListMethodDescriptorsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListMethodDescriptorsRequest_FieldTerminalPath{selector: ListMethodDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListMethodDescriptorsRequest_FieldTerminalPath{selector: ListMethodDescriptorsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListMethodDescriptorsRequest_FieldTerminalPath{selector: ListMethodDescriptorsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListMethodDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListMethodDescriptorsRequest))
}

func (o *ListMethodDescriptorsRequest) Clone() *ListMethodDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &ListMethodDescriptorsRequest{}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &method_descriptor.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &method_descriptor.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &method_descriptor.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*method_descriptor.MethodDescriptor_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListMethodDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListMethodDescriptorsRequest) Merge(source *ListMethodDescriptorsRequest) {
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &method_descriptor.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &method_descriptor.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &method_descriptor.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(method_descriptor.MethodDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListMethodDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListMethodDescriptorsRequest))
}

func (o *ListMethodDescriptorsResponse) GotenObjectExt() {}

func (o *ListMethodDescriptorsResponse) MakeFullFieldMask() *ListMethodDescriptorsResponse_FieldMask {
	return FullListMethodDescriptorsResponse_FieldMask()
}

func (o *ListMethodDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListMethodDescriptorsResponse_FieldMask()
}

func (o *ListMethodDescriptorsResponse) MakeDiffFieldMask(other *ListMethodDescriptorsResponse) *ListMethodDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListMethodDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListMethodDescriptorsResponse_FieldMask()
	}

	res := &ListMethodDescriptorsResponse_FieldMask{}

	if len(o.GetMethodDescriptors()) == len(other.GetMethodDescriptors()) {
		for i, lValue := range o.GetMethodDescriptors() {
			rValue := other.GetMethodDescriptors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListMethodDescriptorsResponse_FieldTerminalPath{selector: ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListMethodDescriptorsResponse_FieldTerminalPath{selector: ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListMethodDescriptorsResponse_FieldTerminalPath{selector: ListMethodDescriptorsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListMethodDescriptorsResponse_FieldTerminalPath{selector: ListMethodDescriptorsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListMethodDescriptorsResponse_FieldTerminalPath{selector: ListMethodDescriptorsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListMethodDescriptorsResponse_FieldTerminalPath{selector: ListMethodDescriptorsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListMethodDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListMethodDescriptorsResponse))
}

func (o *ListMethodDescriptorsResponse) Clone() *ListMethodDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &ListMethodDescriptorsResponse{}
	result.MethodDescriptors = make([]*method_descriptor.MethodDescriptor, len(o.MethodDescriptors))
	for i, sourceValue := range o.MethodDescriptors {
		result.MethodDescriptors[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &method_descriptor.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &method_descriptor.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListMethodDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListMethodDescriptorsResponse) Merge(source *ListMethodDescriptorsResponse) {
	for _, sourceValue := range source.GetMethodDescriptors() {
		exists := false
		for _, currentValue := range o.MethodDescriptors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *method_descriptor.MethodDescriptor
			if sourceValue != nil {
				newDstElement = new(method_descriptor.MethodDescriptor)
				newDstElement.Merge(sourceValue)
			}
			o.MethodDescriptors = append(o.MethodDescriptors, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &method_descriptor.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &method_descriptor.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListMethodDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListMethodDescriptorsResponse))
}

func (o *WatchMethodDescriptorRequest) GotenObjectExt() {}

func (o *WatchMethodDescriptorRequest) MakeFullFieldMask() *WatchMethodDescriptorRequest_FieldMask {
	return FullWatchMethodDescriptorRequest_FieldMask()
}

func (o *WatchMethodDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMethodDescriptorRequest_FieldMask()
}

func (o *WatchMethodDescriptorRequest) MakeDiffFieldMask(other *WatchMethodDescriptorRequest) *WatchMethodDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchMethodDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMethodDescriptorRequest_FieldMask()
	}

	res := &WatchMethodDescriptorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorRequest_FieldTerminalPath{selector: WatchMethodDescriptorRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchMethodDescriptorRequest_FieldTerminalPath{selector: WatchMethodDescriptorRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorRequest_FieldTerminalPath{selector: WatchMethodDescriptorRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchMethodDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMethodDescriptorRequest))
}

func (o *WatchMethodDescriptorRequest) Clone() *WatchMethodDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &WatchMethodDescriptorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &method_descriptor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*method_descriptor.MethodDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchMethodDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMethodDescriptorRequest) Merge(source *WatchMethodDescriptorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &method_descriptor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(method_descriptor.MethodDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchMethodDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMethodDescriptorRequest))
}

func (o *WatchMethodDescriptorResponse) GotenObjectExt() {}

func (o *WatchMethodDescriptorResponse) MakeFullFieldMask() *WatchMethodDescriptorResponse_FieldMask {
	return FullWatchMethodDescriptorResponse_FieldMask()
}

func (o *WatchMethodDescriptorResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMethodDescriptorResponse_FieldMask()
}

func (o *WatchMethodDescriptorResponse) MakeDiffFieldMask(other *WatchMethodDescriptorResponse) *WatchMethodDescriptorResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchMethodDescriptorResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMethodDescriptorResponse_FieldMask()
	}

	res := &WatchMethodDescriptorResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchMethodDescriptorResponse_FieldTerminalPath{selector: WatchMethodDescriptorResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchMethodDescriptorResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMethodDescriptorResponse))
}

func (o *WatchMethodDescriptorResponse) Clone() *WatchMethodDescriptorResponse {
	if o == nil {
		return nil
	}
	result := &WatchMethodDescriptorResponse{}
	result.Change = proto.Clone(o.Change).(*method_descriptor.MethodDescriptorChange)
	return result
}

func (o *WatchMethodDescriptorResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMethodDescriptorResponse) Merge(source *WatchMethodDescriptorResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(method_descriptor.MethodDescriptorChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchMethodDescriptorResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMethodDescriptorResponse))
}

func (o *WatchMethodDescriptorsRequest) GotenObjectExt() {}

func (o *WatchMethodDescriptorsRequest) MakeFullFieldMask() *WatchMethodDescriptorsRequest_FieldMask {
	return FullWatchMethodDescriptorsRequest_FieldMask()
}

func (o *WatchMethodDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMethodDescriptorsRequest_FieldMask()
}

func (o *WatchMethodDescriptorsRequest) MakeDiffFieldMask(other *WatchMethodDescriptorsRequest) *WatchMethodDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchMethodDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMethodDescriptorsRequest_FieldMask()
	}

	res := &WatchMethodDescriptorsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorType})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchMethodDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMethodDescriptorsRequest))
}

func (o *WatchMethodDescriptorsRequest) Clone() *WatchMethodDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &WatchMethodDescriptorsRequest{}
	result.Type = o.Type
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &method_descriptor.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &method_descriptor.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &method_descriptor.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*method_descriptor.MethodDescriptor_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchMethodDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMethodDescriptorsRequest) Merge(source *WatchMethodDescriptorsRequest) {
	o.Type = source.GetType()
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &method_descriptor.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &method_descriptor.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &method_descriptor.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(method_descriptor.MethodDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchMethodDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMethodDescriptorsRequest))
}

func (o *WatchMethodDescriptorsResponse) GotenObjectExt() {}

func (o *WatchMethodDescriptorsResponse) MakeFullFieldMask() *WatchMethodDescriptorsResponse_FieldMask {
	return FullWatchMethodDescriptorsResponse_FieldMask()
}

func (o *WatchMethodDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMethodDescriptorsResponse_FieldMask()
}

func (o *WatchMethodDescriptorsResponse) MakeDiffFieldMask(other *WatchMethodDescriptorsResponse) *WatchMethodDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchMethodDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMethodDescriptorsResponse_FieldMask()
	}

	res := &WatchMethodDescriptorsResponse_FieldMask{}

	if len(o.GetMethodDescriptorChanges()) == len(other.GetMethodDescriptorChanges()) {
		for i, lValue := range o.GetMethodDescriptorChanges() {
			rValue := other.GetMethodDescriptorChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchMethodDescriptorsResponse_FieldSubPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchMethodDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMethodDescriptorsResponse))
}

func (o *WatchMethodDescriptorsResponse) Clone() *WatchMethodDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &WatchMethodDescriptorsResponse{}
	result.MethodDescriptorChanges = make([]*method_descriptor.MethodDescriptorChange, len(o.MethodDescriptorChanges))
	for i, sourceValue := range o.MethodDescriptorChanges {
		result.MethodDescriptorChanges[i] = proto.Clone(sourceValue).(*method_descriptor.MethodDescriptorChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchMethodDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMethodDescriptorsResponse) Merge(source *WatchMethodDescriptorsResponse) {
	for _, sourceValue := range source.GetMethodDescriptorChanges() {
		exists := false
		for _, currentValue := range o.MethodDescriptorChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *method_descriptor.MethodDescriptorChange
			if sourceValue != nil {
				newDstElement = new(method_descriptor.MethodDescriptorChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.MethodDescriptorChanges = append(o.MethodDescriptorChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchMethodDescriptorsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchMethodDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMethodDescriptorsResponse))
}

func (o *WatchMethodDescriptorsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchMethodDescriptorsResponse_PageTokenChange) MakeFullFieldMask() *WatchMethodDescriptorsResponse_PageTokenChange_FieldMask {
	return FullWatchMethodDescriptorsResponse_PageTokenChange_FieldMask()
}

func (o *WatchMethodDescriptorsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchMethodDescriptorsResponse_PageTokenChange_FieldMask()
}

func (o *WatchMethodDescriptorsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchMethodDescriptorsResponse_PageTokenChange) *WatchMethodDescriptorsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchMethodDescriptorsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchMethodDescriptorsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchMethodDescriptorsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchMethodDescriptorsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchMethodDescriptorsResponse_PageTokenChange))
}

func (o *WatchMethodDescriptorsResponse_PageTokenChange) Clone() *WatchMethodDescriptorsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchMethodDescriptorsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &method_descriptor.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &method_descriptor.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchMethodDescriptorsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchMethodDescriptorsResponse_PageTokenChange) Merge(source *WatchMethodDescriptorsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &method_descriptor.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &method_descriptor.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchMethodDescriptorsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchMethodDescriptorsResponse_PageTokenChange))
}

func (o *CreateMethodDescriptorRequest) GotenObjectExt() {}

func (o *CreateMethodDescriptorRequest) MakeFullFieldMask() *CreateMethodDescriptorRequest_FieldMask {
	return FullCreateMethodDescriptorRequest_FieldMask()
}

func (o *CreateMethodDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateMethodDescriptorRequest_FieldMask()
}

func (o *CreateMethodDescriptorRequest) MakeDiffFieldMask(other *CreateMethodDescriptorRequest) *CreateMethodDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateMethodDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateMethodDescriptorRequest_FieldMask()
	}

	res := &CreateMethodDescriptorRequest_FieldMask{}
	{
		subMask := o.GetMethodDescriptor().MakeDiffFieldMask(other.GetMethodDescriptor())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateMethodDescriptorRequest_FieldTerminalPath{selector: CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateMethodDescriptorRequest_FieldSubPath{selector: CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateMethodDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateMethodDescriptorRequest))
}

func (o *CreateMethodDescriptorRequest) Clone() *CreateMethodDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &CreateMethodDescriptorRequest{}
	result.MethodDescriptor = o.MethodDescriptor.Clone()
	return result
}

func (o *CreateMethodDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateMethodDescriptorRequest) Merge(source *CreateMethodDescriptorRequest) {
	if source.GetMethodDescriptor() != nil {
		if o.MethodDescriptor == nil {
			o.MethodDescriptor = new(method_descriptor.MethodDescriptor)
		}
		o.MethodDescriptor.Merge(source.GetMethodDescriptor())
	}
}

func (o *CreateMethodDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateMethodDescriptorRequest))
}

func (o *UpdateMethodDescriptorRequest) GotenObjectExt() {}

func (o *UpdateMethodDescriptorRequest) MakeFullFieldMask() *UpdateMethodDescriptorRequest_FieldMask {
	return FullUpdateMethodDescriptorRequest_FieldMask()
}

func (o *UpdateMethodDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateMethodDescriptorRequest_FieldMask()
}

func (o *UpdateMethodDescriptorRequest) MakeDiffFieldMask(other *UpdateMethodDescriptorRequest) *UpdateMethodDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateMethodDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateMethodDescriptorRequest_FieldMask()
	}

	res := &UpdateMethodDescriptorRequest_FieldMask{}
	{
		subMask := o.GetMethodDescriptor().MakeDiffFieldMask(other.GetMethodDescriptor())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateMethodDescriptorRequest_FieldTerminalPath{selector: UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateMethodDescriptorRequest_FieldSubPath{selector: UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateMethodDescriptorRequest_FieldTerminalPath{selector: UpdateMethodDescriptorRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateMethodDescriptorRequest_FieldTerminalPath{selector: UpdateMethodDescriptorRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateMethodDescriptorRequest_FieldSubPath{selector: UpdateMethodDescriptorRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateMethodDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateMethodDescriptorRequest))
}

func (o *UpdateMethodDescriptorRequest) Clone() *UpdateMethodDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &UpdateMethodDescriptorRequest{}
	result.MethodDescriptor = o.MethodDescriptor.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*method_descriptor.MethodDescriptor_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateMethodDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateMethodDescriptorRequest) Merge(source *UpdateMethodDescriptorRequest) {
	if source.GetMethodDescriptor() != nil {
		if o.MethodDescriptor == nil {
			o.MethodDescriptor = new(method_descriptor.MethodDescriptor)
		}
		o.MethodDescriptor.Merge(source.GetMethodDescriptor())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(method_descriptor.MethodDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateMethodDescriptorRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateMethodDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateMethodDescriptorRequest))
}

func (o *UpdateMethodDescriptorRequest_CAS) GotenObjectExt() {}

func (o *UpdateMethodDescriptorRequest_CAS) MakeFullFieldMask() *UpdateMethodDescriptorRequest_CAS_FieldMask {
	return FullUpdateMethodDescriptorRequest_CAS_FieldMask()
}

func (o *UpdateMethodDescriptorRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateMethodDescriptorRequest_CAS_FieldMask()
}

func (o *UpdateMethodDescriptorRequest_CAS) MakeDiffFieldMask(other *UpdateMethodDescriptorRequest_CAS) *UpdateMethodDescriptorRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateMethodDescriptorRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateMethodDescriptorRequest_CAS_FieldMask()
	}

	res := &UpdateMethodDescriptorRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateMethodDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateMethodDescriptorRequestCAS_FieldSubPath{selector: UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateMethodDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMethodDescriptorRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateMethodDescriptorRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateMethodDescriptorRequest_CAS))
}

func (o *UpdateMethodDescriptorRequest_CAS) Clone() *UpdateMethodDescriptorRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateMethodDescriptorRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*method_descriptor.MethodDescriptor_FieldMask)
	return result
}

func (o *UpdateMethodDescriptorRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateMethodDescriptorRequest_CAS) Merge(source *UpdateMethodDescriptorRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(method_descriptor.MethodDescriptor)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(method_descriptor.MethodDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateMethodDescriptorRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateMethodDescriptorRequest_CAS))
}
