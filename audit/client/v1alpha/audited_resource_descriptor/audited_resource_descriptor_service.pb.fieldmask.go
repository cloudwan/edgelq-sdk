// Code generated by protoc-gen-goten-object
// File: edgelq/audit/proto/v1alpha/audited_resource_descriptor_service.proto
// DO NOT EDIT!!!

package audited_resource_descriptor_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	audited_resource_descriptor "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha/audited_resource_descriptor"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &audited_resource_descriptor.AuditedResourceDescriptor{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

type GetAuditedResourceDescriptorRequest_FieldMask struct {
	Paths []GetAuditedResourceDescriptorRequest_FieldPath
}

func FullGetAuditedResourceDescriptorRequest_FieldMask() *GetAuditedResourceDescriptorRequest_FieldMask {
	res := &GetAuditedResourceDescriptorRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetAuditedResourceDescriptorRequest_FieldTerminalPath{selector: GetAuditedResourceDescriptorRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetAuditedResourceDescriptorRequest_FieldTerminalPath{selector: GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetAuditedResourceDescriptorRequest_FieldTerminalPath{selector: GetAuditedResourceDescriptorRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetAuditedResourceDescriptorRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetAuditedResourceDescriptorRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetAuditedResourceDescriptorRequest_FieldPath(raw)
	})
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) Subtract(other *GetAuditedResourceDescriptorRequest_FieldMask) *GetAuditedResourceDescriptorRequest_FieldMask {
	result := &GetAuditedResourceDescriptorRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetAuditedResourceDescriptorRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetAuditedResourceDescriptorRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) FilterInputFields() *GetAuditedResourceDescriptorRequest_FieldMask {
	result := &GetAuditedResourceDescriptorRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetAuditedResourceDescriptorRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetAuditedResourceDescriptorRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetAuditedResourceDescriptorRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetAuditedResourceDescriptorRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) AppendPath(path GetAuditedResourceDescriptorRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetAuditedResourceDescriptorRequest_FieldPath))
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) GetPaths() []GetAuditedResourceDescriptorRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetAuditedResourceDescriptorRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) Set(target, source *GetAuditedResourceDescriptorRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetAuditedResourceDescriptorRequest), source.(*GetAuditedResourceDescriptorRequest))
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) Project(source *GetAuditedResourceDescriptorRequest) *GetAuditedResourceDescriptorRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetAuditedResourceDescriptorRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetAuditedResourceDescriptorRequest_FieldTerminalPath:
			switch tp.selector {
			case GetAuditedResourceDescriptorRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetAuditedResourceDescriptorRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetAuditedResourceDescriptorRequest))
}

func (fieldMask *GetAuditedResourceDescriptorRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetAuditedResourceDescriptorsRequest_FieldMask struct {
	Paths []BatchGetAuditedResourceDescriptorsRequest_FieldPath
}

func FullBatchGetAuditedResourceDescriptorsRequest_FieldMask() *BatchGetAuditedResourceDescriptorsRequest_FieldMask {
	res := &BatchGetAuditedResourceDescriptorsRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetAuditedResourceDescriptorsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetAuditedResourceDescriptorsRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) Subtract(other *BatchGetAuditedResourceDescriptorsRequest_FieldMask) *BatchGetAuditedResourceDescriptorsRequest_FieldMask {
	result := &BatchGetAuditedResourceDescriptorsRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetAuditedResourceDescriptorsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) FilterInputFields() *BatchGetAuditedResourceDescriptorsRequest_FieldMask {
	result := &BatchGetAuditedResourceDescriptorsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetAuditedResourceDescriptorsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetAuditedResourceDescriptorsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetAuditedResourceDescriptorsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetAuditedResourceDescriptorsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) AppendPath(path BatchGetAuditedResourceDescriptorsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetAuditedResourceDescriptorsRequest_FieldPath))
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) GetPaths() []BatchGetAuditedResourceDescriptorsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetAuditedResourceDescriptorsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) Set(target, source *BatchGetAuditedResourceDescriptorsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetAuditedResourceDescriptorsRequest), source.(*BatchGetAuditedResourceDescriptorsRequest))
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) Project(source *BatchGetAuditedResourceDescriptorsRequest) *BatchGetAuditedResourceDescriptorsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetAuditedResourceDescriptorsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetAuditedResourceDescriptorsRequest))
}

func (fieldMask *BatchGetAuditedResourceDescriptorsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetAuditedResourceDescriptorsResponse_FieldMask struct {
	Paths []BatchGetAuditedResourceDescriptorsResponse_FieldPath
}

func FullBatchGetAuditedResourceDescriptorsResponse_FieldMask() *BatchGetAuditedResourceDescriptorsResponse_FieldMask {
	res := &BatchGetAuditedResourceDescriptorsResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors})
	res.Paths = append(res.Paths, &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetAuditedResourceDescriptorsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetAuditedResourceDescriptorsResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) Subtract(other *BatchGetAuditedResourceDescriptorsResponse_FieldMask) *BatchGetAuditedResourceDescriptorsResponse_FieldMask {
	result := &BatchGetAuditedResourceDescriptorsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetAuditedResourceDescriptorsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors: &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{},
	}
	mySubMasks := map[BatchGetAuditedResourceDescriptorsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors: &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
						mySubMasks[BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors] = audited_resource_descriptor.FullAuditedResourceDescriptor_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetAuditedResourceDescriptorsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetAuditedResourceDescriptorsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetAuditedResourceDescriptorsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) FilterInputFields() *BatchGetAuditedResourceDescriptorsResponse_FieldMask {
	result := &BatchGetAuditedResourceDescriptorsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
			if _, ok := path.(*BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath); ok {
				for _, subpath := range audited_resource_descriptor.FullAuditedResourceDescriptor_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetAuditedResourceDescriptorsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetAuditedResourceDescriptorsResponse_FieldSubPath); ok {
				selectedMask := &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{
					Paths: []audited_resource_descriptor.AuditedResourceDescriptor_FieldPath{sub.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetAuditedResourceDescriptorsResponse_FieldSubPath{selector: BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetAuditedResourceDescriptorsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetAuditedResourceDescriptorsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetAuditedResourceDescriptorsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetAuditedResourceDescriptorsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) AppendPath(path BatchGetAuditedResourceDescriptorsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetAuditedResourceDescriptorsResponse_FieldPath))
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) GetPaths() []BatchGetAuditedResourceDescriptorsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetAuditedResourceDescriptorsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) Set(target, source *BatchGetAuditedResourceDescriptorsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetAuditedResourceDescriptorsResponse), source.(*BatchGetAuditedResourceDescriptorsResponse))
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) Project(source *BatchGetAuditedResourceDescriptorsResponse) *BatchGetAuditedResourceDescriptorsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetAuditedResourceDescriptorsResponse{}
	auditedResourceDescriptorsMask := &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{}
	wholeAuditedResourceDescriptorsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
				result.AuditedResourceDescriptors = source.AuditedResourceDescriptors
				wholeAuditedResourceDescriptorsAccepted = true
			case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
				auditedResourceDescriptorsMask.AppendPath(tp.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath))
			}
		}
	}
	if wholeAuditedResourceDescriptorsAccepted == false && len(auditedResourceDescriptorsMask.Paths) > 0 {
		for _, sourceItem := range source.GetAuditedResourceDescriptors() {
			result.AuditedResourceDescriptors = append(result.AuditedResourceDescriptors, auditedResourceDescriptorsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetAuditedResourceDescriptorsResponse))
}

func (fieldMask *BatchGetAuditedResourceDescriptorsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListAuditedResourceDescriptorsRequest_FieldMask struct {
	Paths []ListAuditedResourceDescriptorsRequest_FieldPath
}

func FullListAuditedResourceDescriptorsRequest_FieldMask() *ListAuditedResourceDescriptorsRequest_FieldMask {
	res := &ListAuditedResourceDescriptorsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListAuditedResourceDescriptorsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListAuditedResourceDescriptorsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListAuditedResourceDescriptorsRequest_FieldPath(raw)
	})
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) Subtract(other *ListAuditedResourceDescriptorsRequest_FieldMask) *ListAuditedResourceDescriptorsRequest_FieldMask {
	result := &ListAuditedResourceDescriptorsRequest_FieldMask{}
	removedSelectors := make([]bool, 6)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListAuditedResourceDescriptorsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListAuditedResourceDescriptorsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) FilterInputFields() *ListAuditedResourceDescriptorsRequest_FieldMask {
	result := &ListAuditedResourceDescriptorsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListAuditedResourceDescriptorsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListAuditedResourceDescriptorsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListAuditedResourceDescriptorsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListAuditedResourceDescriptorsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) AppendPath(path ListAuditedResourceDescriptorsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListAuditedResourceDescriptorsRequest_FieldPath))
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) GetPaths() []ListAuditedResourceDescriptorsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListAuditedResourceDescriptorsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) Set(target, source *ListAuditedResourceDescriptorsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListAuditedResourceDescriptorsRequest), source.(*ListAuditedResourceDescriptorsRequest))
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) Project(source *ListAuditedResourceDescriptorsRequest) *ListAuditedResourceDescriptorsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListAuditedResourceDescriptorsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListAuditedResourceDescriptorsRequest_FieldTerminalPath:
			switch tp.selector {
			case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListAuditedResourceDescriptorsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListAuditedResourceDescriptorsRequest))
}

func (fieldMask *ListAuditedResourceDescriptorsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListAuditedResourceDescriptorsResponse_FieldMask struct {
	Paths []ListAuditedResourceDescriptorsResponse_FieldPath
}

func FullListAuditedResourceDescriptorsResponse_FieldMask() *ListAuditedResourceDescriptorsResponse_FieldMask {
	res := &ListAuditedResourceDescriptorsResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors})
	res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListAuditedResourceDescriptorsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListAuditedResourceDescriptorsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListAuditedResourceDescriptorsResponse_FieldPath(raw)
	})
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) Subtract(other *ListAuditedResourceDescriptorsResponse_FieldMask) *ListAuditedResourceDescriptorsResponse_FieldMask {
	result := &ListAuditedResourceDescriptorsResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ListAuditedResourceDescriptorsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors: &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{},
	}
	mySubMasks := map[ListAuditedResourceDescriptorsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors: &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListAuditedResourceDescriptorsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListAuditedResourceDescriptorsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListAuditedResourceDescriptorsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
						mySubMasks[ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors] = audited_resource_descriptor.FullAuditedResourceDescriptor_FieldMask()
					}
				} else if tp, ok := path.(*ListAuditedResourceDescriptorsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListAuditedResourceDescriptorsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListAuditedResourceDescriptorsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) FilterInputFields() *ListAuditedResourceDescriptorsResponse_FieldMask {
	result := &ListAuditedResourceDescriptorsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
			if _, ok := path.(*ListAuditedResourceDescriptorsResponse_FieldTerminalPath); ok {
				for _, subpath := range audited_resource_descriptor.FullAuditedResourceDescriptor_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListAuditedResourceDescriptorsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListAuditedResourceDescriptorsResponse_FieldSubPath); ok {
				selectedMask := &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{
					Paths: []audited_resource_descriptor.AuditedResourceDescriptor_FieldPath{sub.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListAuditedResourceDescriptorsResponse_FieldSubPath{selector: ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListAuditedResourceDescriptorsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListAuditedResourceDescriptorsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListAuditedResourceDescriptorsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListAuditedResourceDescriptorsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) AppendPath(path ListAuditedResourceDescriptorsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListAuditedResourceDescriptorsResponse_FieldPath))
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) GetPaths() []ListAuditedResourceDescriptorsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListAuditedResourceDescriptorsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) Set(target, source *ListAuditedResourceDescriptorsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListAuditedResourceDescriptorsResponse), source.(*ListAuditedResourceDescriptorsResponse))
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) Project(source *ListAuditedResourceDescriptorsResponse) *ListAuditedResourceDescriptorsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListAuditedResourceDescriptorsResponse{}
	auditedResourceDescriptorsMask := &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{}
	wholeAuditedResourceDescriptorsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListAuditedResourceDescriptorsResponse_FieldTerminalPath:
			switch tp.selector {
			case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
				result.AuditedResourceDescriptors = source.AuditedResourceDescriptors
				wholeAuditedResourceDescriptorsAccepted = true
			case ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *ListAuditedResourceDescriptorsResponse_FieldSubPath:
			switch tp.selector {
			case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
				auditedResourceDescriptorsMask.AppendPath(tp.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath))
			}
		}
	}
	if wholeAuditedResourceDescriptorsAccepted == false && len(auditedResourceDescriptorsMask.Paths) > 0 {
		for _, sourceItem := range source.GetAuditedResourceDescriptors() {
			result.AuditedResourceDescriptors = append(result.AuditedResourceDescriptors, auditedResourceDescriptorsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListAuditedResourceDescriptorsResponse))
}

func (fieldMask *ListAuditedResourceDescriptorsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAuditedResourceDescriptorRequest_FieldMask struct {
	Paths []WatchAuditedResourceDescriptorRequest_FieldPath
}

func FullWatchAuditedResourceDescriptorRequest_FieldMask() *WatchAuditedResourceDescriptorRequest_FieldMask {
	res := &WatchAuditedResourceDescriptorRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAuditedResourceDescriptorRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAuditedResourceDescriptorRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAuditedResourceDescriptorRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) Subtract(other *WatchAuditedResourceDescriptorRequest_FieldMask) *WatchAuditedResourceDescriptorRequest_FieldMask {
	result := &WatchAuditedResourceDescriptorRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAuditedResourceDescriptorRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAuditedResourceDescriptorRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) FilterInputFields() *WatchAuditedResourceDescriptorRequest_FieldMask {
	result := &WatchAuditedResourceDescriptorRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAuditedResourceDescriptorRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAuditedResourceDescriptorRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAuditedResourceDescriptorRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAuditedResourceDescriptorRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) AppendPath(path WatchAuditedResourceDescriptorRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAuditedResourceDescriptorRequest_FieldPath))
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) GetPaths() []WatchAuditedResourceDescriptorRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAuditedResourceDescriptorRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) Set(target, source *WatchAuditedResourceDescriptorRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAuditedResourceDescriptorRequest), source.(*WatchAuditedResourceDescriptorRequest))
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) Project(source *WatchAuditedResourceDescriptorRequest) *WatchAuditedResourceDescriptorRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAuditedResourceDescriptorRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAuditedResourceDescriptorRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchAuditedResourceDescriptorRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchAuditedResourceDescriptorRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAuditedResourceDescriptorRequest))
}

func (fieldMask *WatchAuditedResourceDescriptorRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAuditedResourceDescriptorResponse_FieldMask struct {
	Paths []WatchAuditedResourceDescriptorResponse_FieldPath
}

func FullWatchAuditedResourceDescriptorResponse_FieldMask() *WatchAuditedResourceDescriptorResponse_FieldMask {
	res := &WatchAuditedResourceDescriptorResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAuditedResourceDescriptorResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAuditedResourceDescriptorResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAuditedResourceDescriptorResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) Subtract(other *WatchAuditedResourceDescriptorResponse_FieldMask) *WatchAuditedResourceDescriptorResponse_FieldMask {
	result := &WatchAuditedResourceDescriptorResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAuditedResourceDescriptorResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAuditedResourceDescriptorResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) FilterInputFields() *WatchAuditedResourceDescriptorResponse_FieldMask {
	result := &WatchAuditedResourceDescriptorResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAuditedResourceDescriptorResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAuditedResourceDescriptorResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAuditedResourceDescriptorResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAuditedResourceDescriptorResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) AppendPath(path WatchAuditedResourceDescriptorResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAuditedResourceDescriptorResponse_FieldPath))
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) GetPaths() []WatchAuditedResourceDescriptorResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAuditedResourceDescriptorResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) Set(target, source *WatchAuditedResourceDescriptorResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAuditedResourceDescriptorResponse), source.(*WatchAuditedResourceDescriptorResponse))
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) Project(source *WatchAuditedResourceDescriptorResponse) *WatchAuditedResourceDescriptorResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAuditedResourceDescriptorResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAuditedResourceDescriptorResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAuditedResourceDescriptorResponse))
}

func (fieldMask *WatchAuditedResourceDescriptorResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAuditedResourceDescriptorsRequest_FieldMask struct {
	Paths []WatchAuditedResourceDescriptorsRequest_FieldPath
}

func FullWatchAuditedResourceDescriptorsRequest_FieldMask() *WatchAuditedResourceDescriptorsRequest_FieldMask {
	res := &WatchAuditedResourceDescriptorsRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAuditedResourceDescriptorsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 10)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAuditedResourceDescriptorsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAuditedResourceDescriptorsRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) Subtract(other *WatchAuditedResourceDescriptorsRequest_FieldMask) *WatchAuditedResourceDescriptorsRequest_FieldMask {
	result := &WatchAuditedResourceDescriptorsRequest_FieldMask{}
	removedSelectors := make([]bool, 10)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAuditedResourceDescriptorsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) FilterInputFields() *WatchAuditedResourceDescriptorsRequest_FieldMask {
	result := &WatchAuditedResourceDescriptorsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAuditedResourceDescriptorsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAuditedResourceDescriptorsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAuditedResourceDescriptorsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAuditedResourceDescriptorsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) AppendPath(path WatchAuditedResourceDescriptorsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAuditedResourceDescriptorsRequest_FieldPath))
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) GetPaths() []WatchAuditedResourceDescriptorsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAuditedResourceDescriptorsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) Set(target, source *WatchAuditedResourceDescriptorsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAuditedResourceDescriptorsRequest), source.(*WatchAuditedResourceDescriptorsRequest))
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) Project(source *WatchAuditedResourceDescriptorsRequest) *WatchAuditedResourceDescriptorsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAuditedResourceDescriptorsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAuditedResourceDescriptorsRequest))
}

func (fieldMask *WatchAuditedResourceDescriptorsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAuditedResourceDescriptorsResponse_FieldMask struct {
	Paths []WatchAuditedResourceDescriptorsResponse_FieldPath
}

func FullWatchAuditedResourceDescriptorsResponse_FieldMask() *WatchAuditedResourceDescriptorsResponse_FieldMask {
	res := &WatchAuditedResourceDescriptorsResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAuditedResourceDescriptorsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAuditedResourceDescriptorsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAuditedResourceDescriptorsResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) Subtract(other *WatchAuditedResourceDescriptorsResponse_FieldMask) *WatchAuditedResourceDescriptorsResponse_FieldMask {
	result := &WatchAuditedResourceDescriptorsResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchAuditedResourceDescriptorsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange: &WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchAuditedResourceDescriptorsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange: &WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchAuditedResourceDescriptorsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchAuditedResourceDescriptorsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange] = FullWatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchAuditedResourceDescriptorsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchAuditedResourceDescriptorsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAuditedResourceDescriptorsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) FilterInputFields() *WatchAuditedResourceDescriptorsResponse_FieldMask {
	result := &WatchAuditedResourceDescriptorsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAuditedResourceDescriptorsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAuditedResourceDescriptorsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAuditedResourceDescriptorsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAuditedResourceDescriptorsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) AppendPath(path WatchAuditedResourceDescriptorsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAuditedResourceDescriptorsResponse_FieldPath))
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) GetPaths() []WatchAuditedResourceDescriptorsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAuditedResourceDescriptorsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) Set(target, source *WatchAuditedResourceDescriptorsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAuditedResourceDescriptorsResponse), source.(*WatchAuditedResourceDescriptorsResponse))
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) Project(source *WatchAuditedResourceDescriptorsResponse) *WatchAuditedResourceDescriptorsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAuditedResourceDescriptorsResponse{}
	pageTokenChangeMask := &WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges:
				result.AuditedResourceDescriptorChanges = source.AuditedResourceDescriptorChanges
			case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchAuditedResourceDescriptorsResponse_FieldSubPath:
			switch tp.selector {
			case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAuditedResourceDescriptorsResponse))
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask struct {
	Paths []WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath
}

func FullWatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask() *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask {
	res := &WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) Subtract(other *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask {
	result := &WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask {
	result := &WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) AppendPath(path WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) GetPaths() []WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) Set(target, source *WatchAuditedResourceDescriptorsResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange), source.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange))
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) Project(source *WatchAuditedResourceDescriptorsResponse_PageTokenChange) *WatchAuditedResourceDescriptorsResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAuditedResourceDescriptorsResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange))
}

func (fieldMask *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateAuditedResourceDescriptorRequest_FieldMask struct {
	Paths []CreateAuditedResourceDescriptorRequest_FieldPath
}

func FullCreateAuditedResourceDescriptorRequest_FieldMask() *CreateAuditedResourceDescriptorRequest_FieldMask {
	res := &CreateAuditedResourceDescriptorRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateAuditedResourceDescriptorRequest_FieldTerminalPath{selector: CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor})
	return res
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateAuditedResourceDescriptorRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateAuditedResourceDescriptorRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateAuditedResourceDescriptorRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) Subtract(other *CreateAuditedResourceDescriptorRequest_FieldMask) *CreateAuditedResourceDescriptorRequest_FieldMask {
	result := &CreateAuditedResourceDescriptorRequest_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[CreateAuditedResourceDescriptorRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor: &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{},
	}
	mySubMasks := map[CreateAuditedResourceDescriptorRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor: &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateAuditedResourceDescriptorRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateAuditedResourceDescriptorRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateAuditedResourceDescriptorRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
						mySubMasks[CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor] = audited_resource_descriptor.FullAuditedResourceDescriptor_FieldMask()
					}
				} else if tp, ok := path.(*CreateAuditedResourceDescriptorRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateAuditedResourceDescriptorRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateAuditedResourceDescriptorRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) FilterInputFields() *CreateAuditedResourceDescriptorRequest_FieldMask {
	result := &CreateAuditedResourceDescriptorRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
			if _, ok := path.(*CreateAuditedResourceDescriptorRequest_FieldTerminalPath); ok {
				for _, subpath := range audited_resource_descriptor.FullAuditedResourceDescriptor_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateAuditedResourceDescriptorRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateAuditedResourceDescriptorRequest_FieldSubPath); ok {
				selectedMask := &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{
					Paths: []audited_resource_descriptor.AuditedResourceDescriptor_FieldPath{sub.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateAuditedResourceDescriptorRequest_FieldSubPath{selector: CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateAuditedResourceDescriptorRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateAuditedResourceDescriptorRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateAuditedResourceDescriptorRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateAuditedResourceDescriptorRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) AppendPath(path CreateAuditedResourceDescriptorRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateAuditedResourceDescriptorRequest_FieldPath))
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) GetPaths() []CreateAuditedResourceDescriptorRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateAuditedResourceDescriptorRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) Set(target, source *CreateAuditedResourceDescriptorRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateAuditedResourceDescriptorRequest), source.(*CreateAuditedResourceDescriptorRequest))
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) Project(source *CreateAuditedResourceDescriptorRequest) *CreateAuditedResourceDescriptorRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateAuditedResourceDescriptorRequest{}
	auditedResourceDescriptorMask := &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{}
	wholeAuditedResourceDescriptorAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateAuditedResourceDescriptorRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
				result.AuditedResourceDescriptor = source.AuditedResourceDescriptor
				wholeAuditedResourceDescriptorAccepted = true
			}
		case *CreateAuditedResourceDescriptorRequest_FieldSubPath:
			switch tp.selector {
			case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
				auditedResourceDescriptorMask.AppendPath(tp.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath))
			}
		}
	}
	if wholeAuditedResourceDescriptorAccepted == false && len(auditedResourceDescriptorMask.Paths) > 0 {
		result.AuditedResourceDescriptor = auditedResourceDescriptorMask.Project(source.GetAuditedResourceDescriptor())
	}
	return result
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateAuditedResourceDescriptorRequest))
}

func (fieldMask *CreateAuditedResourceDescriptorRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateAuditedResourceDescriptorRequest_FieldMask struct {
	Paths []UpdateAuditedResourceDescriptorRequest_FieldPath
}

func FullUpdateAuditedResourceDescriptorRequest_FieldMask() *UpdateAuditedResourceDescriptorRequest_FieldMask {
	res := &UpdateAuditedResourceDescriptorRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateAuditedResourceDescriptorRequest_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor})
	res.Paths = append(res.Paths, &UpdateAuditedResourceDescriptorRequest_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateAuditedResourceDescriptorRequest_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas})
	return res
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateAuditedResourceDescriptorRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateAuditedResourceDescriptorRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateAuditedResourceDescriptorRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) Subtract(other *UpdateAuditedResourceDescriptorRequest_FieldMask) *UpdateAuditedResourceDescriptorRequest_FieldMask {
	result := &UpdateAuditedResourceDescriptorRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[UpdateAuditedResourceDescriptorRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor: &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{},
		UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:                       &UpdateAuditedResourceDescriptorRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateAuditedResourceDescriptorRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor: &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{},
		UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:                       &UpdateAuditedResourceDescriptorRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateAuditedResourceDescriptorRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateAuditedResourceDescriptorRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
						mySubMasks[UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor] = audited_resource_descriptor.FullAuditedResourceDescriptor_FieldMask()
					case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
						mySubMasks[UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas] = FullUpdateAuditedResourceDescriptorRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateAuditedResourceDescriptorRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateAuditedResourceDescriptorRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateAuditedResourceDescriptorRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) FilterInputFields() *UpdateAuditedResourceDescriptorRequest_FieldMask {
	result := &UpdateAuditedResourceDescriptorRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
			if _, ok := path.(*UpdateAuditedResourceDescriptorRequest_FieldTerminalPath); ok {
				for _, subpath := range audited_resource_descriptor.FullAuditedResourceDescriptor_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAuditedResourceDescriptorRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateAuditedResourceDescriptorRequest_FieldSubPath); ok {
				selectedMask := &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{
					Paths: []audited_resource_descriptor.AuditedResourceDescriptor_FieldPath{sub.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAuditedResourceDescriptorRequest_FieldSubPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor, subPath: allowedPath})
				}
			}
		case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateAuditedResourceDescriptorRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateAuditedResourceDescriptorRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAuditedResourceDescriptorRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateAuditedResourceDescriptorRequest_FieldSubPath); ok {
				selectedMask := &UpdateAuditedResourceDescriptorRequest_CAS_FieldMask{
					Paths: []UpdateAuditedResourceDescriptorRequestCAS_FieldPath{sub.subPath.(UpdateAuditedResourceDescriptorRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAuditedResourceDescriptorRequest_FieldSubPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateAuditedResourceDescriptorRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateAuditedResourceDescriptorRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateAuditedResourceDescriptorRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateAuditedResourceDescriptorRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) AppendPath(path UpdateAuditedResourceDescriptorRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateAuditedResourceDescriptorRequest_FieldPath))
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) GetPaths() []UpdateAuditedResourceDescriptorRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateAuditedResourceDescriptorRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) Set(target, source *UpdateAuditedResourceDescriptorRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateAuditedResourceDescriptorRequest), source.(*UpdateAuditedResourceDescriptorRequest))
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) Project(source *UpdateAuditedResourceDescriptorRequest) *UpdateAuditedResourceDescriptorRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateAuditedResourceDescriptorRequest{}
	auditedResourceDescriptorMask := &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{}
	wholeAuditedResourceDescriptorAccepted := false
	casMask := &UpdateAuditedResourceDescriptorRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
				result.AuditedResourceDescriptor = source.AuditedResourceDescriptor
				wholeAuditedResourceDescriptorAccepted = true
			case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			}
		case *UpdateAuditedResourceDescriptorRequest_FieldSubPath:
			switch tp.selector {
			case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
				auditedResourceDescriptorMask.AppendPath(tp.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath))
			case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateAuditedResourceDescriptorRequestCAS_FieldPath))
			}
		}
	}
	if wholeAuditedResourceDescriptorAccepted == false && len(auditedResourceDescriptorMask.Paths) > 0 {
		result.AuditedResourceDescriptor = auditedResourceDescriptorMask.Project(source.GetAuditedResourceDescriptor())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateAuditedResourceDescriptorRequest))
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateAuditedResourceDescriptorRequest_CAS_FieldMask struct {
	Paths []UpdateAuditedResourceDescriptorRequestCAS_FieldPath
}

func FullUpdateAuditedResourceDescriptorRequest_CAS_FieldMask() *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask {
	res := &UpdateAuditedResourceDescriptorRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) Subtract(other *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask {
	result := &UpdateAuditedResourceDescriptorRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState: &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{},
	}
	mySubMasks := map[UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState: &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState] = audited_resource_descriptor.FullAuditedResourceDescriptor_FieldMask()
					}
				} else if tp, ok := path.(*UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateAuditedResourceDescriptorRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) FilterInputFields() *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask {
	result := &UpdateAuditedResourceDescriptorRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range audited_resource_descriptor.FullAuditedResourceDescriptor_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath); ok {
				selectedMask := &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{
					Paths: []audited_resource_descriptor.AuditedResourceDescriptor_FieldPath{sub.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath{selector: UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateAuditedResourceDescriptorRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) AppendPath(path UpdateAuditedResourceDescriptorRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateAuditedResourceDescriptorRequestCAS_FieldPath))
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) GetPaths() []UpdateAuditedResourceDescriptorRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) Set(target, source *UpdateAuditedResourceDescriptorRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateAuditedResourceDescriptorRequest_CAS), source.(*UpdateAuditedResourceDescriptorRequest_CAS))
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) Project(source *UpdateAuditedResourceDescriptorRequest_CAS) *UpdateAuditedResourceDescriptorRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateAuditedResourceDescriptorRequest_CAS{}
	conditionalStateMask := &audited_resource_descriptor.AuditedResourceDescriptor_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateAuditedResourceDescriptorRequest_CAS))
}

func (fieldMask *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
