// Code generated by protoc-gen-goten-object
// File: edgelq/audit/proto/v1alpha2/audited_resource_descriptor_service.proto
// DO NOT EDIT!!!

package audited_resource_descriptor_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	audited_resource_descriptor "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha2/audited_resource_descriptor"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &audited_resource_descriptor.AuditedResourceDescriptor{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetAuditedResourceDescriptorRequest) GotenObjectExt() {}

func (o *GetAuditedResourceDescriptorRequest) MakeFullFieldMask() *GetAuditedResourceDescriptorRequest_FieldMask {
	return FullGetAuditedResourceDescriptorRequest_FieldMask()
}

func (o *GetAuditedResourceDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetAuditedResourceDescriptorRequest_FieldMask()
}

func (o *GetAuditedResourceDescriptorRequest) MakeDiffFieldMask(other *GetAuditedResourceDescriptorRequest) *GetAuditedResourceDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &GetAuditedResourceDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetAuditedResourceDescriptorRequest_FieldMask()
	}

	res := &GetAuditedResourceDescriptorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetAuditedResourceDescriptorRequest_FieldTerminalPath{selector: GetAuditedResourceDescriptorRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetAuditedResourceDescriptorRequest_FieldTerminalPath{selector: GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetAuditedResourceDescriptorRequest_FieldTerminalPath{selector: GetAuditedResourceDescriptorRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetAuditedResourceDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetAuditedResourceDescriptorRequest))
}

func (o *GetAuditedResourceDescriptorRequest) Clone() *GetAuditedResourceDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &GetAuditedResourceDescriptorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &audited_resource_descriptor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *GetAuditedResourceDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetAuditedResourceDescriptorRequest) Merge(source *GetAuditedResourceDescriptorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &audited_resource_descriptor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetAuditedResourceDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetAuditedResourceDescriptorRequest))
}

func (o *BatchGetAuditedResourceDescriptorsRequest) GotenObjectExt() {}

func (o *BatchGetAuditedResourceDescriptorsRequest) MakeFullFieldMask() *BatchGetAuditedResourceDescriptorsRequest_FieldMask {
	return FullBatchGetAuditedResourceDescriptorsRequest_FieldMask()
}

func (o *BatchGetAuditedResourceDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAuditedResourceDescriptorsRequest_FieldMask()
}

func (o *BatchGetAuditedResourceDescriptorsRequest) MakeDiffFieldMask(other *BatchGetAuditedResourceDescriptorsRequest) *BatchGetAuditedResourceDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAuditedResourceDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAuditedResourceDescriptorsRequest_FieldMask()
	}

	res := &BatchGetAuditedResourceDescriptorsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetAuditedResourceDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAuditedResourceDescriptorsRequest))
}

func (o *BatchGetAuditedResourceDescriptorsRequest) Clone() *BatchGetAuditedResourceDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetAuditedResourceDescriptorsRequest{}
	result.Names = make([]*audited_resource_descriptor.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &audited_resource_descriptor.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetAuditedResourceDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAuditedResourceDescriptorsRequest) Merge(source *BatchGetAuditedResourceDescriptorsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *audited_resource_descriptor.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &audited_resource_descriptor.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetAuditedResourceDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAuditedResourceDescriptorsRequest))
}

func (o *BatchGetAuditedResourceDescriptorsResponse) GotenObjectExt() {}

func (o *BatchGetAuditedResourceDescriptorsResponse) MakeFullFieldMask() *BatchGetAuditedResourceDescriptorsResponse_FieldMask {
	return FullBatchGetAuditedResourceDescriptorsResponse_FieldMask()
}

func (o *BatchGetAuditedResourceDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAuditedResourceDescriptorsResponse_FieldMask()
}

func (o *BatchGetAuditedResourceDescriptorsResponse) MakeDiffFieldMask(other *BatchGetAuditedResourceDescriptorsResponse) *BatchGetAuditedResourceDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAuditedResourceDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAuditedResourceDescriptorsResponse_FieldMask()
	}

	res := &BatchGetAuditedResourceDescriptorsResponse_FieldMask{}

	if len(o.GetAuditedResourceDescriptors()) == len(other.GetAuditedResourceDescriptors()) {
		for i, lValue := range o.GetAuditedResourceDescriptors() {
			rValue := other.GetAuditedResourceDescriptors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetAuditedResourceDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAuditedResourceDescriptorsResponse))
}

func (o *BatchGetAuditedResourceDescriptorsResponse) Clone() *BatchGetAuditedResourceDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetAuditedResourceDescriptorsResponse{}
	result.AuditedResourceDescriptors = make([]*audited_resource_descriptor.AuditedResourceDescriptor, len(o.AuditedResourceDescriptors))
	for i, sourceValue := range o.AuditedResourceDescriptors {
		result.AuditedResourceDescriptors[i] = sourceValue.Clone()
	}
	result.Missing = make([]*audited_resource_descriptor.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &audited_resource_descriptor.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetAuditedResourceDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAuditedResourceDescriptorsResponse) Merge(source *BatchGetAuditedResourceDescriptorsResponse) {
	for _, sourceValue := range source.GetAuditedResourceDescriptors() {
		exists := false
		for _, currentValue := range o.AuditedResourceDescriptors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *audited_resource_descriptor.AuditedResourceDescriptor
			if sourceValue != nil {
				newDstElement = new(audited_resource_descriptor.AuditedResourceDescriptor)
				newDstElement.Merge(sourceValue)
			}
			o.AuditedResourceDescriptors = append(o.AuditedResourceDescriptors, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *audited_resource_descriptor.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &audited_resource_descriptor.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetAuditedResourceDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAuditedResourceDescriptorsResponse))
}

func (o *ListAuditedResourceDescriptorsRequest) GotenObjectExt() {}

func (o *ListAuditedResourceDescriptorsRequest) MakeFullFieldMask() *ListAuditedResourceDescriptorsRequest_FieldMask {
	return FullListAuditedResourceDescriptorsRequest_FieldMask()
}

func (o *ListAuditedResourceDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAuditedResourceDescriptorsRequest_FieldMask()
}

func (o *ListAuditedResourceDescriptorsRequest) MakeDiffFieldMask(other *ListAuditedResourceDescriptorsRequest) *ListAuditedResourceDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListAuditedResourceDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAuditedResourceDescriptorsRequest_FieldMask()
	}

	res := &ListAuditedResourceDescriptorsRequest_FieldMask{}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListAuditedResourceDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAuditedResourceDescriptorsRequest))
}

func (o *ListAuditedResourceDescriptorsRequest) Clone() *ListAuditedResourceDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &ListAuditedResourceDescriptorsRequest{}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &audited_resource_descriptor.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &audited_resource_descriptor.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &audited_resource_descriptor.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *ListAuditedResourceDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAuditedResourceDescriptorsRequest) Merge(source *ListAuditedResourceDescriptorsRequest) {
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &audited_resource_descriptor.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &audited_resource_descriptor.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &audited_resource_descriptor.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListAuditedResourceDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAuditedResourceDescriptorsRequest))
}

func (o *ListAuditedResourceDescriptorsResponse) GotenObjectExt() {}

func (o *ListAuditedResourceDescriptorsResponse) MakeFullFieldMask() *ListAuditedResourceDescriptorsResponse_FieldMask {
	return FullListAuditedResourceDescriptorsResponse_FieldMask()
}

func (o *ListAuditedResourceDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAuditedResourceDescriptorsResponse_FieldMask()
}

func (o *ListAuditedResourceDescriptorsResponse) MakeDiffFieldMask(other *ListAuditedResourceDescriptorsResponse) *ListAuditedResourceDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListAuditedResourceDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAuditedResourceDescriptorsResponse_FieldMask()
	}

	res := &ListAuditedResourceDescriptorsResponse_FieldMask{}

	if len(o.GetAuditedResourceDescriptors()) == len(other.GetAuditedResourceDescriptors()) {
		for i, lValue := range o.GetAuditedResourceDescriptors() {
			rValue := other.GetAuditedResourceDescriptors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListAuditedResourceDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAuditedResourceDescriptorsResponse))
}

func (o *ListAuditedResourceDescriptorsResponse) Clone() *ListAuditedResourceDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &ListAuditedResourceDescriptorsResponse{}
	result.AuditedResourceDescriptors = make([]*audited_resource_descriptor.AuditedResourceDescriptor, len(o.AuditedResourceDescriptors))
	for i, sourceValue := range o.AuditedResourceDescriptors {
		result.AuditedResourceDescriptors[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &audited_resource_descriptor.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &audited_resource_descriptor.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListAuditedResourceDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAuditedResourceDescriptorsResponse) Merge(source *ListAuditedResourceDescriptorsResponse) {
	for _, sourceValue := range source.GetAuditedResourceDescriptors() {
		exists := false
		for _, currentValue := range o.AuditedResourceDescriptors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *audited_resource_descriptor.AuditedResourceDescriptor
			if sourceValue != nil {
				newDstElement = new(audited_resource_descriptor.AuditedResourceDescriptor)
				newDstElement.Merge(sourceValue)
			}
			o.AuditedResourceDescriptors = append(o.AuditedResourceDescriptors, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &audited_resource_descriptor.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &audited_resource_descriptor.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListAuditedResourceDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAuditedResourceDescriptorsResponse))
}

func (o *WatchAuditedResourceDescriptorRequest) GotenObjectExt() {}

func (o *WatchAuditedResourceDescriptorRequest) MakeFullFieldMask() *WatchAuditedResourceDescriptorRequest_FieldMask {
	return FullWatchAuditedResourceDescriptorRequest_FieldMask()
}

func (o *WatchAuditedResourceDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAuditedResourceDescriptorRequest_FieldMask()
}

func (o *WatchAuditedResourceDescriptorRequest) MakeDiffFieldMask(other *WatchAuditedResourceDescriptorRequest) *WatchAuditedResourceDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAuditedResourceDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAuditedResourceDescriptorRequest_FieldMask()
	}

	res := &WatchAuditedResourceDescriptorRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchAuditedResourceDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAuditedResourceDescriptorRequest))
}

func (o *WatchAuditedResourceDescriptorRequest) Clone() *WatchAuditedResourceDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &WatchAuditedResourceDescriptorRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &audited_resource_descriptor.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchAuditedResourceDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAuditedResourceDescriptorRequest) Merge(source *WatchAuditedResourceDescriptorRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &audited_resource_descriptor.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchAuditedResourceDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAuditedResourceDescriptorRequest))
}

func (o *WatchAuditedResourceDescriptorResponse) GotenObjectExt() {}

func (o *WatchAuditedResourceDescriptorResponse) MakeFullFieldMask() *WatchAuditedResourceDescriptorResponse_FieldMask {
	return FullWatchAuditedResourceDescriptorResponse_FieldMask()
}

func (o *WatchAuditedResourceDescriptorResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAuditedResourceDescriptorResponse_FieldMask()
}

func (o *WatchAuditedResourceDescriptorResponse) MakeDiffFieldMask(other *WatchAuditedResourceDescriptorResponse) *WatchAuditedResourceDescriptorResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAuditedResourceDescriptorResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAuditedResourceDescriptorResponse_FieldMask()
	}

	res := &WatchAuditedResourceDescriptorResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchAuditedResourceDescriptorResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAuditedResourceDescriptorResponse))
}

func (o *WatchAuditedResourceDescriptorResponse) Clone() *WatchAuditedResourceDescriptorResponse {
	if o == nil {
		return nil
	}
	result := &WatchAuditedResourceDescriptorResponse{}
	result.Change = proto.Clone(o.Change).(*audited_resource_descriptor.AuditedResourceDescriptorChange)
	return result
}

func (o *WatchAuditedResourceDescriptorResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAuditedResourceDescriptorResponse) Merge(source *WatchAuditedResourceDescriptorResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(audited_resource_descriptor.AuditedResourceDescriptorChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchAuditedResourceDescriptorResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAuditedResourceDescriptorResponse))
}

func (o *WatchAuditedResourceDescriptorsRequest) GotenObjectExt() {}

func (o *WatchAuditedResourceDescriptorsRequest) MakeFullFieldMask() *WatchAuditedResourceDescriptorsRequest_FieldMask {
	return FullWatchAuditedResourceDescriptorsRequest_FieldMask()
}

func (o *WatchAuditedResourceDescriptorsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAuditedResourceDescriptorsRequest_FieldMask()
}

func (o *WatchAuditedResourceDescriptorsRequest) MakeDiffFieldMask(other *WatchAuditedResourceDescriptorsRequest) *WatchAuditedResourceDescriptorsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAuditedResourceDescriptorsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAuditedResourceDescriptorsRequest_FieldMask()
	}

	res := &WatchAuditedResourceDescriptorsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchAuditedResourceDescriptorsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAuditedResourceDescriptorsRequest))
}

func (o *WatchAuditedResourceDescriptorsRequest) Clone() *WatchAuditedResourceDescriptorsRequest {
	if o == nil {
		return nil
	}
	result := &WatchAuditedResourceDescriptorsRequest{}
	result.Type = o.Type
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &audited_resource_descriptor.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &audited_resource_descriptor.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &audited_resource_descriptor.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchAuditedResourceDescriptorsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAuditedResourceDescriptorsRequest) Merge(source *WatchAuditedResourceDescriptorsRequest) {
	o.Type = source.GetType()
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &audited_resource_descriptor.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &audited_resource_descriptor.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &audited_resource_descriptor.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchAuditedResourceDescriptorsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAuditedResourceDescriptorsRequest))
}

func (o *WatchAuditedResourceDescriptorsResponse) GotenObjectExt() {}

func (o *WatchAuditedResourceDescriptorsResponse) MakeFullFieldMask() *WatchAuditedResourceDescriptorsResponse_FieldMask {
	return FullWatchAuditedResourceDescriptorsResponse_FieldMask()
}

func (o *WatchAuditedResourceDescriptorsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAuditedResourceDescriptorsResponse_FieldMask()
}

func (o *WatchAuditedResourceDescriptorsResponse) MakeDiffFieldMask(other *WatchAuditedResourceDescriptorsResponse) *WatchAuditedResourceDescriptorsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAuditedResourceDescriptorsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAuditedResourceDescriptorsResponse_FieldMask()
	}

	res := &WatchAuditedResourceDescriptorsResponse_FieldMask{}

	if len(o.GetAuditedResourceDescriptorChanges()) == len(other.GetAuditedResourceDescriptorChanges()) {
		for i, lValue := range o.GetAuditedResourceDescriptorChanges() {
			rValue := other.GetAuditedResourceDescriptorChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldSubPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchAuditedResourceDescriptorsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAuditedResourceDescriptorsResponse))
}

func (o *WatchAuditedResourceDescriptorsResponse) Clone() *WatchAuditedResourceDescriptorsResponse {
	if o == nil {
		return nil
	}
	result := &WatchAuditedResourceDescriptorsResponse{}
	result.AuditedResourceDescriptorChanges = make([]*audited_resource_descriptor.AuditedResourceDescriptorChange, len(o.AuditedResourceDescriptorChanges))
	for i, sourceValue := range o.AuditedResourceDescriptorChanges {
		result.AuditedResourceDescriptorChanges[i] = proto.Clone(sourceValue).(*audited_resource_descriptor.AuditedResourceDescriptorChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchAuditedResourceDescriptorsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAuditedResourceDescriptorsResponse) Merge(source *WatchAuditedResourceDescriptorsResponse) {
	for _, sourceValue := range source.GetAuditedResourceDescriptorChanges() {
		exists := false
		for _, currentValue := range o.AuditedResourceDescriptorChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *audited_resource_descriptor.AuditedResourceDescriptorChange
			if sourceValue != nil {
				newDstElement = new(audited_resource_descriptor.AuditedResourceDescriptorChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.AuditedResourceDescriptorChanges = append(o.AuditedResourceDescriptorChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchAuditedResourceDescriptorsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchAuditedResourceDescriptorsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAuditedResourceDescriptorsResponse))
}

func (o *WatchAuditedResourceDescriptorsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchAuditedResourceDescriptorsResponse_PageTokenChange) MakeFullFieldMask() *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask {
	return FullWatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask()
}

func (o *WatchAuditedResourceDescriptorsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask()
}

func (o *WatchAuditedResourceDescriptorsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchAuditedResourceDescriptorsResponse_PageTokenChange) *WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchAuditedResourceDescriptorsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchAuditedResourceDescriptorsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange))
}

func (o *WatchAuditedResourceDescriptorsResponse_PageTokenChange) Clone() *WatchAuditedResourceDescriptorsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchAuditedResourceDescriptorsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &audited_resource_descriptor.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &audited_resource_descriptor.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchAuditedResourceDescriptorsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAuditedResourceDescriptorsResponse_PageTokenChange) Merge(source *WatchAuditedResourceDescriptorsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &audited_resource_descriptor.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &audited_resource_descriptor.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchAuditedResourceDescriptorsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange))
}

func (o *CreateAuditedResourceDescriptorRequest) GotenObjectExt() {}

func (o *CreateAuditedResourceDescriptorRequest) MakeFullFieldMask() *CreateAuditedResourceDescriptorRequest_FieldMask {
	return FullCreateAuditedResourceDescriptorRequest_FieldMask()
}

func (o *CreateAuditedResourceDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateAuditedResourceDescriptorRequest_FieldMask()
}

func (o *CreateAuditedResourceDescriptorRequest) MakeDiffFieldMask(other *CreateAuditedResourceDescriptorRequest) *CreateAuditedResourceDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateAuditedResourceDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateAuditedResourceDescriptorRequest_FieldMask()
	}

	res := &CreateAuditedResourceDescriptorRequest_FieldMask{}
	{
		subMask := o.GetAuditedResourceDescriptor().MakeDiffFieldMask(other.GetAuditedResourceDescriptor())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateAuditedResourceDescriptorRequest_FieldTerminalPath{selector: CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateAuditedResourceDescriptorRequest_FieldSubPath{selector: CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateAuditedResourceDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateAuditedResourceDescriptorRequest))
}

func (o *CreateAuditedResourceDescriptorRequest) Clone() *CreateAuditedResourceDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &CreateAuditedResourceDescriptorRequest{}
	result.AuditedResourceDescriptor = o.AuditedResourceDescriptor.Clone()
	return result
}

func (o *CreateAuditedResourceDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateAuditedResourceDescriptorRequest) Merge(source *CreateAuditedResourceDescriptorRequest) {
	if source.GetAuditedResourceDescriptor() != nil {
		if o.AuditedResourceDescriptor == nil {
			o.AuditedResourceDescriptor = new(audited_resource_descriptor.AuditedResourceDescriptor)
		}
		o.AuditedResourceDescriptor.Merge(source.GetAuditedResourceDescriptor())
	}
}

func (o *CreateAuditedResourceDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateAuditedResourceDescriptorRequest))
}

func (o *UpdateAuditedResourceDescriptorRequest) GotenObjectExt() {}

func (o *UpdateAuditedResourceDescriptorRequest) MakeFullFieldMask() *UpdateAuditedResourceDescriptorRequest_FieldMask {
	return FullUpdateAuditedResourceDescriptorRequest_FieldMask()
}

func (o *UpdateAuditedResourceDescriptorRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAuditedResourceDescriptorRequest_FieldMask()
}

func (o *UpdateAuditedResourceDescriptorRequest) MakeDiffFieldMask(other *UpdateAuditedResourceDescriptorRequest) *UpdateAuditedResourceDescriptorRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateAuditedResourceDescriptorRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAuditedResourceDescriptorRequest_FieldMask()
	}

	res := &UpdateAuditedResourceDescriptorRequest_FieldMask{}
	{
		subMask := o.GetAuditedResourceDescriptor().MakeDiffFieldMask(other.GetAuditedResourceDescriptor())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAuditedResourceDescriptorRequest_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAuditedResourceDescriptorRequest_FieldSubPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateAuditedResourceDescriptorRequest_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAuditedResourceDescriptorRequest_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAuditedResourceDescriptorRequest_FieldSubPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateAuditedResourceDescriptorRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAuditedResourceDescriptorRequest))
}

func (o *UpdateAuditedResourceDescriptorRequest) Clone() *UpdateAuditedResourceDescriptorRequest {
	if o == nil {
		return nil
	}
	result := &UpdateAuditedResourceDescriptorRequest{}
	result.AuditedResourceDescriptor = o.AuditedResourceDescriptor.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateAuditedResourceDescriptorRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAuditedResourceDescriptorRequest) Merge(source *UpdateAuditedResourceDescriptorRequest) {
	if source.GetAuditedResourceDescriptor() != nil {
		if o.AuditedResourceDescriptor == nil {
			o.AuditedResourceDescriptor = new(audited_resource_descriptor.AuditedResourceDescriptor)
		}
		o.AuditedResourceDescriptor.Merge(source.GetAuditedResourceDescriptor())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateAuditedResourceDescriptorRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateAuditedResourceDescriptorRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAuditedResourceDescriptorRequest))
}

func (o *UpdateAuditedResourceDescriptorRequest_CAS) GotenObjectExt() {}

func (o *UpdateAuditedResourceDescriptorRequest_CAS) MakeFullFieldMask() *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask {
	return FullUpdateAuditedResourceDescriptorRequest_CAS_FieldMask()
}

func (o *UpdateAuditedResourceDescriptorRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAuditedResourceDescriptorRequest_CAS_FieldMask()
}

func (o *UpdateAuditedResourceDescriptorRequest_CAS) MakeDiffFieldMask(other *UpdateAuditedResourceDescriptorRequest_CAS) *UpdateAuditedResourceDescriptorRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateAuditedResourceDescriptorRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAuditedResourceDescriptorRequest_CAS_FieldMask()
	}

	res := &UpdateAuditedResourceDescriptorRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath{selector: UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateAuditedResourceDescriptorRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAuditedResourceDescriptorRequest_CAS))
}

func (o *UpdateAuditedResourceDescriptorRequest_CAS) Clone() *UpdateAuditedResourceDescriptorRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateAuditedResourceDescriptorRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return result
}

func (o *UpdateAuditedResourceDescriptorRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAuditedResourceDescriptorRequest_CAS) Merge(source *UpdateAuditedResourceDescriptorRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(audited_resource_descriptor.AuditedResourceDescriptor)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateAuditedResourceDescriptorRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAuditedResourceDescriptorRequest_CAS))
}
