// Code generated by protoc-gen-goten-client
// API: AuditedResourceDescriptorService
// DO NOT EDIT!!!

package audited_resource_descriptor_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	audited_resource_descriptor "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha2/audited_resource_descriptor"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &audited_resource_descriptor.AuditedResourceDescriptor{}
)

var (
	descriptorsInitialized                       bool
	auditedResourceDescriptorServiceDescriptor   *AuditedResourceDescriptorServiceDescriptor
	getAuditedResourceDescriptorDescriptor       *GetAuditedResourceDescriptorDescriptor
	batchGetAuditedResourceDescriptorsDescriptor *BatchGetAuditedResourceDescriptorsDescriptor
	listAuditedResourceDescriptorsDescriptor     *ListAuditedResourceDescriptorsDescriptor
	watchAuditedResourceDescriptorDescriptor     *WatchAuditedResourceDescriptorDescriptor
	watchAuditedResourceDescriptorsDescriptor    *WatchAuditedResourceDescriptorsDescriptor
	createAuditedResourceDescriptorDescriptor    *CreateAuditedResourceDescriptorDescriptor
	updateAuditedResourceDescriptorDescriptor    *UpdateAuditedResourceDescriptorDescriptor
)

type GetAuditedResourceDescriptorDescriptor struct{}

type GetAuditedResourceDescriptorDescriptorClientMsgHandle struct{}

type GetAuditedResourceDescriptorDescriptorServerMsgHandle struct{}

func (d *GetAuditedResourceDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetAuditedResourceDescriptorRequest{}
}

func (d *GetAuditedResourceDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &audited_resource_descriptor.AuditedResourceDescriptor{}
}

func (d *GetAuditedResourceDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *GetAuditedResourceDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *GetAuditedResourceDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *GetAuditedResourceDescriptorDescriptor) IsCollection() bool {
	return false
}

func (d *GetAuditedResourceDescriptorDescriptor) IsPlural() bool {
	return false
}

func (d *GetAuditedResourceDescriptorDescriptor) HasResource() bool {
	return true
}

func (d *GetAuditedResourceDescriptorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetAuditedResourceDescriptorDescriptor) GetVerb() string {
	return "get"
}

func (d *GetAuditedResourceDescriptorDescriptor) GetMethodName() string {
	return "GetAuditedResourceDescriptor"
}

func (d *GetAuditedResourceDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.audit.v1alpha2.AuditedResourceDescriptorService/GetAuditedResourceDescriptor"
}

func (d *GetAuditedResourceDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.audit.v1alpha2"
}

func (d *GetAuditedResourceDescriptorDescriptor) GetApiName() string {
	return "AuditedResourceDescriptorService"
}

func (d *GetAuditedResourceDescriptorDescriptor) GetServiceDomain() string {
	return "audit.edgelq.com"
}

func (d *GetAuditedResourceDescriptorDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetAuditedResourceDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return auditedResourceDescriptorServiceDescriptor
}

func (d *GetAuditedResourceDescriptorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return audited_resource_descriptor.GetDescriptor()
}

func (d *GetAuditedResourceDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAuditedResourceDescriptorDescriptorClientMsgHandle{}
}

func (d *GetAuditedResourceDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAuditedResourceDescriptorDescriptorServerMsgHandle{}
}

func (h *GetAuditedResourceDescriptorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetAuditedResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetAuditedResourceDescriptorRequest) *audited_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*audited_resource_descriptor.Name)(nil)
}

func (h *GetAuditedResourceDescriptorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetAuditedResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetAuditedResourceDescriptorRequest) []*audited_resource_descriptor.Name
	})
	if ok {
		return audited_resource_descriptor.AuditedResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAuditedResourceDescriptorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetAuditedResourceDescriptorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*audited_resource_descriptor.AuditedResourceDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*audited_resource_descriptor.AuditedResourceDescriptor) *audited_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*audited_resource_descriptor.Name)(nil)
}

func (h *GetAuditedResourceDescriptorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*audited_resource_descriptor.AuditedResourceDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*audited_resource_descriptor.AuditedResourceDescriptor) []*audited_resource_descriptor.Name
	})
	if ok {
		return audited_resource_descriptor.AuditedResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAuditedResourceDescriptorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetGetAuditedResourceDescriptorDescriptor() *GetAuditedResourceDescriptorDescriptor {
	return getAuditedResourceDescriptorDescriptor
}

type BatchGetAuditedResourceDescriptorsDescriptor struct{}

type BatchGetAuditedResourceDescriptorsDescriptorClientMsgHandle struct{}

type BatchGetAuditedResourceDescriptorsDescriptorServerMsgHandle struct{}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetAuditedResourceDescriptorsRequest{}
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetAuditedResourceDescriptorsResponse{}
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) GetMethodName() string {
	return "BatchGetAuditedResourceDescriptors"
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) GetFullMethodName() string {
	return "/ntt.audit.v1alpha2.AuditedResourceDescriptorService/BatchGetAuditedResourceDescriptors"
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) GetProtoPkgName() string {
	return "ntt.audit.v1alpha2"
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) GetApiName() string {
	return "AuditedResourceDescriptorService"
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) GetServiceDomain() string {
	return "audit.edgelq.com"
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return auditedResourceDescriptorServiceDescriptor
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return audited_resource_descriptor.GetDescriptor()
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAuditedResourceDescriptorsDescriptorClientMsgHandle{}
}

func (d *BatchGetAuditedResourceDescriptorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAuditedResourceDescriptorsDescriptorServerMsgHandle{}
}

func (h *BatchGetAuditedResourceDescriptorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAuditedResourceDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetAuditedResourceDescriptorsRequest) *audited_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAuditedResourceDescriptorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAuditedResourceDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetAuditedResourceDescriptorsRequest) []*audited_resource_descriptor.Name
	})
	if ok {
		return audited_resource_descriptor.AuditedResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(audited_resource_descriptor.AuditedResourceDescriptorNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (audited_resource_descriptor.AuditedResourceDescriptorNameList)(nil)
}

func (h *BatchGetAuditedResourceDescriptorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *BatchGetAuditedResourceDescriptorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAuditedResourceDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetAuditedResourceDescriptorsResponse) *audited_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAuditedResourceDescriptorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAuditedResourceDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetAuditedResourceDescriptorsResponse) []*audited_resource_descriptor.Name
	})
	if ok {
		return audited_resource_descriptor.AuditedResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetAuditedResourceDescriptors(); len(resources) > 0 {
			list := make(audited_resource_descriptor.AuditedResourceDescriptorNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (audited_resource_descriptor.AuditedResourceDescriptorNameList)(nil)
}

func (h *BatchGetAuditedResourceDescriptorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetBatchGetAuditedResourceDescriptorsDescriptor() *BatchGetAuditedResourceDescriptorsDescriptor {
	return batchGetAuditedResourceDescriptorsDescriptor
}

type ListAuditedResourceDescriptorsDescriptor struct{}

type ListAuditedResourceDescriptorsDescriptorClientMsgHandle struct{}

type ListAuditedResourceDescriptorsDescriptorServerMsgHandle struct{}

func (d *ListAuditedResourceDescriptorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListAuditedResourceDescriptorsRequest{}
}

func (d *ListAuditedResourceDescriptorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListAuditedResourceDescriptorsResponse{}
}

func (d *ListAuditedResourceDescriptorsDescriptor) IsUnary() bool {
	return true
}

func (d *ListAuditedResourceDescriptorsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListAuditedResourceDescriptorsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListAuditedResourceDescriptorsDescriptor) IsCollection() bool {
	return true
}

func (d *ListAuditedResourceDescriptorsDescriptor) IsPlural() bool {
	return true
}

func (d *ListAuditedResourceDescriptorsDescriptor) HasResource() bool {
	return true
}

func (d *ListAuditedResourceDescriptorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListAuditedResourceDescriptorsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListAuditedResourceDescriptorsDescriptor) GetMethodName() string {
	return "ListAuditedResourceDescriptors"
}

func (d *ListAuditedResourceDescriptorsDescriptor) GetFullMethodName() string {
	return "/ntt.audit.v1alpha2.AuditedResourceDescriptorService/ListAuditedResourceDescriptors"
}

func (d *ListAuditedResourceDescriptorsDescriptor) GetProtoPkgName() string {
	return "ntt.audit.v1alpha2"
}

func (d *ListAuditedResourceDescriptorsDescriptor) GetApiName() string {
	return "AuditedResourceDescriptorService"
}

func (d *ListAuditedResourceDescriptorsDescriptor) GetServiceDomain() string {
	return "audit.edgelq.com"
}

func (d *ListAuditedResourceDescriptorsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListAuditedResourceDescriptorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return auditedResourceDescriptorServiceDescriptor
}

func (d *ListAuditedResourceDescriptorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return audited_resource_descriptor.GetDescriptor()
}

func (d *ListAuditedResourceDescriptorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAuditedResourceDescriptorsDescriptorClientMsgHandle{}
}

func (d *ListAuditedResourceDescriptorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAuditedResourceDescriptorsDescriptorServerMsgHandle{}
}

func (h *ListAuditedResourceDescriptorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAuditedResourceDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListAuditedResourceDescriptorsRequest) *audited_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListAuditedResourceDescriptorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAuditedResourceDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListAuditedResourceDescriptorsRequest) []*audited_resource_descriptor.Name
	})
	if ok {
		return audited_resource_descriptor.AuditedResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListAuditedResourceDescriptorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListAuditedResourceDescriptorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAuditedResourceDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListAuditedResourceDescriptorsResponse) *audited_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListAuditedResourceDescriptorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAuditedResourceDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListAuditedResourceDescriptorsResponse) []*audited_resource_descriptor.Name
	})
	if ok {
		return audited_resource_descriptor.AuditedResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetAuditedResourceDescriptors(); len(resources) > 0 {
			list := make(audited_resource_descriptor.AuditedResourceDescriptorNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (audited_resource_descriptor.AuditedResourceDescriptorNameList)(nil)
}

func (h *ListAuditedResourceDescriptorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetListAuditedResourceDescriptorsDescriptor() *ListAuditedResourceDescriptorsDescriptor {
	return listAuditedResourceDescriptorsDescriptor
}

type WatchAuditedResourceDescriptorDescriptor struct{}

type WatchAuditedResourceDescriptorDescriptorClientMsgHandle struct{}

type WatchAuditedResourceDescriptorDescriptorServerMsgHandle struct{}

func (d *WatchAuditedResourceDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAuditedResourceDescriptorRequest{}
}

func (d *WatchAuditedResourceDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAuditedResourceDescriptorResponse{}
}

func (d *WatchAuditedResourceDescriptorDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAuditedResourceDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAuditedResourceDescriptorDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAuditedResourceDescriptorDescriptor) IsCollection() bool {
	return false
}

func (d *WatchAuditedResourceDescriptorDescriptor) IsPlural() bool {
	return false
}

func (d *WatchAuditedResourceDescriptorDescriptor) HasResource() bool {
	return true
}

func (d *WatchAuditedResourceDescriptorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAuditedResourceDescriptorDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAuditedResourceDescriptorDescriptor) GetMethodName() string {
	return "WatchAuditedResourceDescriptor"
}

func (d *WatchAuditedResourceDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.audit.v1alpha2.AuditedResourceDescriptorService/WatchAuditedResourceDescriptor"
}

func (d *WatchAuditedResourceDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.audit.v1alpha2"
}

func (d *WatchAuditedResourceDescriptorDescriptor) GetApiName() string {
	return "AuditedResourceDescriptorService"
}

func (d *WatchAuditedResourceDescriptorDescriptor) GetServiceDomain() string {
	return "audit.edgelq.com"
}

func (d *WatchAuditedResourceDescriptorDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchAuditedResourceDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return auditedResourceDescriptorServiceDescriptor
}

func (d *WatchAuditedResourceDescriptorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return audited_resource_descriptor.GetDescriptor()
}

func (d *WatchAuditedResourceDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAuditedResourceDescriptorDescriptorClientMsgHandle{}
}

func (d *WatchAuditedResourceDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAuditedResourceDescriptorDescriptorServerMsgHandle{}
}

func (h *WatchAuditedResourceDescriptorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAuditedResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAuditedResourceDescriptorRequest) *audited_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*audited_resource_descriptor.Name)(nil)
}

func (h *WatchAuditedResourceDescriptorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAuditedResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAuditedResourceDescriptorRequest) []*audited_resource_descriptor.Name
	})
	if ok {
		return audited_resource_descriptor.AuditedResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAuditedResourceDescriptorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchAuditedResourceDescriptorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAuditedResourceDescriptorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAuditedResourceDescriptorResponse) *audited_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *audited_resource_descriptor.AuditedResourceDescriptorChange_Added_:
				return tResChange.Added.GetAuditedResourceDescriptor().GetName()
			case *audited_resource_descriptor.AuditedResourceDescriptorChange_Modified_:
				return tResChange.Modified.GetName()
			case *audited_resource_descriptor.AuditedResourceDescriptorChange_Removed_:
				return tResChange.Removed.GetName()
			case *audited_resource_descriptor.AuditedResourceDescriptorChange_Current_:
				return tResChange.Current.GetAuditedResourceDescriptor().GetName()
			}
		}
	}
	return (*audited_resource_descriptor.Name)(nil)
}

func (h *WatchAuditedResourceDescriptorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAuditedResourceDescriptorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAuditedResourceDescriptorResponse) []*audited_resource_descriptor.Name
	})
	if ok {
		return audited_resource_descriptor.AuditedResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAuditedResourceDescriptorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetWatchAuditedResourceDescriptorDescriptor() *WatchAuditedResourceDescriptorDescriptor {
	return watchAuditedResourceDescriptorDescriptor
}

type WatchAuditedResourceDescriptorsDescriptor struct{}

type WatchAuditedResourceDescriptorsDescriptorClientMsgHandle struct{}

type WatchAuditedResourceDescriptorsDescriptorServerMsgHandle struct{}

func (d *WatchAuditedResourceDescriptorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAuditedResourceDescriptorsRequest{}
}

func (d *WatchAuditedResourceDescriptorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAuditedResourceDescriptorsResponse{}
}

func (d *WatchAuditedResourceDescriptorsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAuditedResourceDescriptorsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAuditedResourceDescriptorsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAuditedResourceDescriptorsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchAuditedResourceDescriptorsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchAuditedResourceDescriptorsDescriptor) HasResource() bool {
	return true
}

func (d *WatchAuditedResourceDescriptorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAuditedResourceDescriptorsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAuditedResourceDescriptorsDescriptor) GetMethodName() string {
	return "WatchAuditedResourceDescriptors"
}

func (d *WatchAuditedResourceDescriptorsDescriptor) GetFullMethodName() string {
	return "/ntt.audit.v1alpha2.AuditedResourceDescriptorService/WatchAuditedResourceDescriptors"
}

func (d *WatchAuditedResourceDescriptorsDescriptor) GetProtoPkgName() string {
	return "ntt.audit.v1alpha2"
}

func (d *WatchAuditedResourceDescriptorsDescriptor) GetApiName() string {
	return "AuditedResourceDescriptorService"
}

func (d *WatchAuditedResourceDescriptorsDescriptor) GetServiceDomain() string {
	return "audit.edgelq.com"
}

func (d *WatchAuditedResourceDescriptorsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchAuditedResourceDescriptorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return auditedResourceDescriptorServiceDescriptor
}

func (d *WatchAuditedResourceDescriptorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return audited_resource_descriptor.GetDescriptor()
}

func (d *WatchAuditedResourceDescriptorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAuditedResourceDescriptorsDescriptorClientMsgHandle{}
}

func (d *WatchAuditedResourceDescriptorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAuditedResourceDescriptorsDescriptorServerMsgHandle{}
}

func (h *WatchAuditedResourceDescriptorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAuditedResourceDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAuditedResourceDescriptorsRequest) *audited_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAuditedResourceDescriptorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAuditedResourceDescriptorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAuditedResourceDescriptorsRequest) []*audited_resource_descriptor.Name
	})
	if ok {
		return audited_resource_descriptor.AuditedResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAuditedResourceDescriptorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchAuditedResourceDescriptorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAuditedResourceDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAuditedResourceDescriptorsResponse) *audited_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAuditedResourceDescriptorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAuditedResourceDescriptorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAuditedResourceDescriptorsResponse) []*audited_resource_descriptor.Name
	})
	if ok {
		return audited_resource_descriptor.AuditedResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetAuditedResourceDescriptorChanges(); len(resChanges) > 0 {
			list := make(audited_resource_descriptor.AuditedResourceDescriptorNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *audited_resource_descriptor.AuditedResourceDescriptorChange_Added_:
					list = append(list, tResChange.Added.GetAuditedResourceDescriptor().GetName())
				case *audited_resource_descriptor.AuditedResourceDescriptorChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *audited_resource_descriptor.AuditedResourceDescriptorChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *audited_resource_descriptor.AuditedResourceDescriptorChange_Current_:
					list = append(list, tResChange.Current.GetAuditedResourceDescriptor().GetName())
				}
			}
			return list
		}
	}
	return (audited_resource_descriptor.AuditedResourceDescriptorNameList)(nil)
}

func (h *WatchAuditedResourceDescriptorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetWatchAuditedResourceDescriptorsDescriptor() *WatchAuditedResourceDescriptorsDescriptor {
	return watchAuditedResourceDescriptorsDescriptor
}

type CreateAuditedResourceDescriptorDescriptor struct{}

type CreateAuditedResourceDescriptorDescriptorClientMsgHandle struct{}

type CreateAuditedResourceDescriptorDescriptorServerMsgHandle struct{}

func (d *CreateAuditedResourceDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateAuditedResourceDescriptorRequest{}
}

func (d *CreateAuditedResourceDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &audited_resource_descriptor.AuditedResourceDescriptor{}
}

func (d *CreateAuditedResourceDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *CreateAuditedResourceDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateAuditedResourceDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateAuditedResourceDescriptorDescriptor) IsCollection() bool {
	return true
}

func (d *CreateAuditedResourceDescriptorDescriptor) IsPlural() bool {
	return false
}

func (d *CreateAuditedResourceDescriptorDescriptor) HasResource() bool {
	return true
}

func (d *CreateAuditedResourceDescriptorDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateAuditedResourceDescriptorDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateAuditedResourceDescriptorDescriptor) GetMethodName() string {
	return "CreateAuditedResourceDescriptor"
}

func (d *CreateAuditedResourceDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.audit.v1alpha2.AuditedResourceDescriptorService/CreateAuditedResourceDescriptor"
}

func (d *CreateAuditedResourceDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.audit.v1alpha2"
}

func (d *CreateAuditedResourceDescriptorDescriptor) GetApiName() string {
	return "AuditedResourceDescriptorService"
}

func (d *CreateAuditedResourceDescriptorDescriptor) GetServiceDomain() string {
	return "audit.edgelq.com"
}

func (d *CreateAuditedResourceDescriptorDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateAuditedResourceDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return auditedResourceDescriptorServiceDescriptor
}

func (d *CreateAuditedResourceDescriptorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return audited_resource_descriptor.GetDescriptor()
}

func (d *CreateAuditedResourceDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAuditedResourceDescriptorDescriptorClientMsgHandle{}
}

func (d *CreateAuditedResourceDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAuditedResourceDescriptorDescriptorServerMsgHandle{}
}

func (h *CreateAuditedResourceDescriptorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateAuditedResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateAuditedResourceDescriptorRequest) *audited_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetAuditedResourceDescriptor()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*audited_resource_descriptor.Name)(nil)
}

func (h *CreateAuditedResourceDescriptorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateAuditedResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateAuditedResourceDescriptorRequest) []*audited_resource_descriptor.Name
	})
	if ok {
		return audited_resource_descriptor.AuditedResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAuditedResourceDescriptorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CreateAuditedResourceDescriptorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*audited_resource_descriptor.AuditedResourceDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*audited_resource_descriptor.AuditedResourceDescriptor) *audited_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*audited_resource_descriptor.Name)(nil)
}

func (h *CreateAuditedResourceDescriptorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*audited_resource_descriptor.AuditedResourceDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*audited_resource_descriptor.AuditedResourceDescriptor) []*audited_resource_descriptor.Name
	})
	if ok {
		return audited_resource_descriptor.AuditedResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAuditedResourceDescriptorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetCreateAuditedResourceDescriptorDescriptor() *CreateAuditedResourceDescriptorDescriptor {
	return createAuditedResourceDescriptorDescriptor
}

type UpdateAuditedResourceDescriptorDescriptor struct{}

type UpdateAuditedResourceDescriptorDescriptorClientMsgHandle struct{}

type UpdateAuditedResourceDescriptorDescriptorServerMsgHandle struct{}

func (d *UpdateAuditedResourceDescriptorDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateAuditedResourceDescriptorRequest{}
}

func (d *UpdateAuditedResourceDescriptorDescriptor) NewEmptyServerMsg() proto.Message {
	return &audited_resource_descriptor.AuditedResourceDescriptor{}
}

func (d *UpdateAuditedResourceDescriptorDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateAuditedResourceDescriptorDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateAuditedResourceDescriptorDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateAuditedResourceDescriptorDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateAuditedResourceDescriptorDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateAuditedResourceDescriptorDescriptor) HasResource() bool {
	return true
}

func (d *UpdateAuditedResourceDescriptorDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateAuditedResourceDescriptorDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateAuditedResourceDescriptorDescriptor) GetMethodName() string {
	return "UpdateAuditedResourceDescriptor"
}

func (d *UpdateAuditedResourceDescriptorDescriptor) GetFullMethodName() string {
	return "/ntt.audit.v1alpha2.AuditedResourceDescriptorService/UpdateAuditedResourceDescriptor"
}

func (d *UpdateAuditedResourceDescriptorDescriptor) GetProtoPkgName() string {
	return "ntt.audit.v1alpha2"
}

func (d *UpdateAuditedResourceDescriptorDescriptor) GetApiName() string {
	return "AuditedResourceDescriptorService"
}

func (d *UpdateAuditedResourceDescriptorDescriptor) GetServiceDomain() string {
	return "audit.edgelq.com"
}

func (d *UpdateAuditedResourceDescriptorDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateAuditedResourceDescriptorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return auditedResourceDescriptorServiceDescriptor
}

func (d *UpdateAuditedResourceDescriptorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return audited_resource_descriptor.GetDescriptor()
}

func (d *UpdateAuditedResourceDescriptorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAuditedResourceDescriptorDescriptorClientMsgHandle{}
}

func (d *UpdateAuditedResourceDescriptorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAuditedResourceDescriptorDescriptorServerMsgHandle{}
}

func (h *UpdateAuditedResourceDescriptorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateAuditedResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateAuditedResourceDescriptorRequest) *audited_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetAuditedResourceDescriptor()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*audited_resource_descriptor.Name)(nil)
}

func (h *UpdateAuditedResourceDescriptorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateAuditedResourceDescriptorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateAuditedResourceDescriptorRequest) []*audited_resource_descriptor.Name
	})
	if ok {
		return audited_resource_descriptor.AuditedResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAuditedResourceDescriptorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *UpdateAuditedResourceDescriptorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*audited_resource_descriptor.AuditedResourceDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*audited_resource_descriptor.AuditedResourceDescriptor) *audited_resource_descriptor.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*audited_resource_descriptor.Name)(nil)
}

func (h *UpdateAuditedResourceDescriptorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*audited_resource_descriptor.AuditedResourceDescriptor)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*audited_resource_descriptor.AuditedResourceDescriptor) []*audited_resource_descriptor.Name
	})
	if ok {
		return audited_resource_descriptor.AuditedResourceDescriptorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAuditedResourceDescriptorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetUpdateAuditedResourceDescriptorDescriptor() *UpdateAuditedResourceDescriptorDescriptor {
	return updateAuditedResourceDescriptorDescriptor
}

type AuditedResourceDescriptorServiceDescriptor struct{}

func (d *AuditedResourceDescriptorServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getAuditedResourceDescriptorDescriptor,
		batchGetAuditedResourceDescriptorsDescriptor,
		listAuditedResourceDescriptorsDescriptor,
		watchAuditedResourceDescriptorDescriptor,
		watchAuditedResourceDescriptorsDescriptor,
		createAuditedResourceDescriptorDescriptor,
		updateAuditedResourceDescriptorDescriptor,
	}
}

func (d *AuditedResourceDescriptorServiceDescriptor) GetFullAPIName() string {
	return "/ntt.audit.v1alpha2.AuditedResourceDescriptorService"
}

func (d *AuditedResourceDescriptorServiceDescriptor) GetProtoPkgName() string {
	return "ntt.audit.v1alpha2"
}

func (d *AuditedResourceDescriptorServiceDescriptor) GetApiName() string {
	return "AuditedResourceDescriptorService"
}

func (d *AuditedResourceDescriptorServiceDescriptor) GetServiceDomain() string {
	return "audit.edgelq.com"
}

func (d *AuditedResourceDescriptorServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetAuditedResourceDescriptorServiceDescriptor() *AuditedResourceDescriptorServiceDescriptor {
	return auditedResourceDescriptorServiceDescriptor
}

func initDescriptors() {
	auditedResourceDescriptorServiceDescriptor = &AuditedResourceDescriptorServiceDescriptor{}
	getAuditedResourceDescriptorDescriptor = &GetAuditedResourceDescriptorDescriptor{}
	batchGetAuditedResourceDescriptorsDescriptor = &BatchGetAuditedResourceDescriptorsDescriptor{}
	listAuditedResourceDescriptorsDescriptor = &ListAuditedResourceDescriptorsDescriptor{}
	watchAuditedResourceDescriptorDescriptor = &WatchAuditedResourceDescriptorDescriptor{}
	watchAuditedResourceDescriptorsDescriptor = &WatchAuditedResourceDescriptorsDescriptor{}
	createAuditedResourceDescriptorDescriptor = &CreateAuditedResourceDescriptorDescriptor{}
	updateAuditedResourceDescriptorDescriptor = &UpdateAuditedResourceDescriptorDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(auditedResourceDescriptorServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getAuditedResourceDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetAuditedResourceDescriptorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listAuditedResourceDescriptorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAuditedResourceDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAuditedResourceDescriptorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createAuditedResourceDescriptorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateAuditedResourceDescriptorDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
