// Code generated by protoc-gen-goten-object
// File: edgelq/audit/proto/v1alpha2/audited_resource_descriptor_service.proto
// DO NOT EDIT!!!

package audited_resource_descriptor_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	audited_resource_descriptor "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha2/audited_resource_descriptor"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &audited_resource_descriptor.AuditedResourceDescriptor{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetAuditedResourceDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetAuditedResourceDescriptorRequest_FieldPathSelector
	Get(source *GetAuditedResourceDescriptorRequest) []interface{}
	GetSingle(source *GetAuditedResourceDescriptorRequest) (interface{}, bool)
	ClearValue(item *GetAuditedResourceDescriptorRequest)

	// Those methods build corresponding GetAuditedResourceDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetAuditedResourceDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetAuditedResourceDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetAuditedResourceDescriptorRequest_FieldPathArrayItemValue
}

type GetAuditedResourceDescriptorRequest_FieldPathSelector int32

const (
	GetAuditedResourceDescriptorRequest_FieldPathSelectorName      GetAuditedResourceDescriptorRequest_FieldPathSelector = 0
	GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask GetAuditedResourceDescriptorRequest_FieldPathSelector = 1
	GetAuditedResourceDescriptorRequest_FieldPathSelectorView      GetAuditedResourceDescriptorRequest_FieldPathSelector = 2
)

func (s GetAuditedResourceDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorName:
		return "name"
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetAuditedResourceDescriptorRequest: %d", s))
	}
}

func BuildGetAuditedResourceDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (GetAuditedResourceDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetAuditedResourceDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetAuditedResourceDescriptorRequest_FieldTerminalPath{selector: GetAuditedResourceDescriptorRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetAuditedResourceDescriptorRequest_FieldTerminalPath{selector: GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetAuditedResourceDescriptorRequest_FieldTerminalPath{selector: GetAuditedResourceDescriptorRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetAuditedResourceDescriptorRequest", fp)
}

func ParseGetAuditedResourceDescriptorRequest_FieldPath(rawField string) (GetAuditedResourceDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetAuditedResourceDescriptorRequest_FieldPath(fp)
}

func MustParseGetAuditedResourceDescriptorRequest_FieldPath(rawField string) GetAuditedResourceDescriptorRequest_FieldPath {
	fp, err := ParseGetAuditedResourceDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetAuditedResourceDescriptorRequest_FieldTerminalPath struct {
	selector GetAuditedResourceDescriptorRequest_FieldPathSelector
}

var _ GetAuditedResourceDescriptorRequest_FieldPath = (*GetAuditedResourceDescriptorRequest_FieldTerminalPath)(nil)

func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) Selector() GetAuditedResourceDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetAuditedResourceDescriptorRequest
func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) Get(source *GetAuditedResourceDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetAuditedResourceDescriptorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetAuditedResourceDescriptorRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetAuditedResourceDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetAuditedResourceDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source GetAuditedResourceDescriptorRequest
func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) GetSingle(source *GetAuditedResourceDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetAuditedResourceDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorName:
		return (*audited_resource_descriptor.Reference)(nil)
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return (*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)(nil)
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) ClearValue(item *GetAuditedResourceDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case GetAuditedResourceDescriptorRequest_FieldPathSelectorName:
			item.Name = nil
		case GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetAuditedResourceDescriptorRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetAuditedResourceDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetAuditedResourceDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetAuditedResourceDescriptorRequest_FieldPathSelectorName ||
		fp.selector == GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetAuditedResourceDescriptorRequest_FieldPathSelectorView
}

func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) GetAuditedResourceDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorName:
		return &GetAuditedResourceDescriptorRequest_FieldTerminalPathValue{GetAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.Reference)}
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return &GetAuditedResourceDescriptorRequest_FieldTerminalPathValue{GetAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)}
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorView:
		return &GetAuditedResourceDescriptorRequest_FieldTerminalPathValue{GetAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetAuditedResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues{GetAuditedResourceDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorName:
		return &GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues{GetAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.Reference)}
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return &GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues{GetAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)}
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorView:
		return &GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues{GetAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAuditedResourceDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetAuditedResourceDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetAuditedResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetAuditedResourceDescriptorRequest_FieldPathValue allows storing values for GetAuditedResourceDescriptorRequest fields according to their type
type GetAuditedResourceDescriptorRequest_FieldPathValue interface {
	GetAuditedResourceDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetAuditedResourceDescriptorRequest)
	CompareWith(*GetAuditedResourceDescriptorRequest) (cmp int, comparable bool)
}

func ParseGetAuditedResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) (GetAuditedResourceDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseGetAuditedResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAuditedResourceDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetAuditedResourceDescriptorRequest_FieldPathValue), nil
}

func MustParseGetAuditedResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) GetAuditedResourceDescriptorRequest_FieldPathValue {
	fpv, err := ParseGetAuditedResourceDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetAuditedResourceDescriptorRequest_FieldTerminalPathValue struct {
	GetAuditedResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ GetAuditedResourceDescriptorRequest_FieldPathValue = (*GetAuditedResourceDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetAuditedResourceDescriptorRequest' as interface{}
func (fpv *GetAuditedResourceDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetAuditedResourceDescriptorRequest_FieldTerminalPathValue) AsNameValue() (*audited_resource_descriptor.Reference, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.Reference)
	return res, ok
}
func (fpv *GetAuditedResourceDescriptorRequest_FieldTerminalPathValue) AsFieldMaskValue() (*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return res, ok
}
func (fpv *GetAuditedResourceDescriptorRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetAuditedResourceDescriptorRequest
func (fpv *GetAuditedResourceDescriptorRequest_FieldTerminalPathValue) SetTo(target **GetAuditedResourceDescriptorRequest) {
	if *target == nil {
		*target = new(GetAuditedResourceDescriptorRequest)
	}
	switch fpv.selector {
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*audited_resource_descriptor.Reference)
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAuditedResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *GetAuditedResourceDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAuditedResourceDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetAuditedResourceDescriptorRequest_FieldTerminalPathValue' with the value under path in 'GetAuditedResourceDescriptorRequest'.
func (fpv *GetAuditedResourceDescriptorRequest_FieldTerminalPathValue) CompareWith(source *GetAuditedResourceDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*audited_resource_descriptor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAuditedResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *GetAuditedResourceDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetAuditedResourceDescriptorRequest))
}

// GetAuditedResourceDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetAuditedResourceDescriptorRequest according to their type
// Present only for array (repeated) types.
type GetAuditedResourceDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetAuditedResourceDescriptorRequest_FieldPath
	ContainsValue(*GetAuditedResourceDescriptorRequest) bool
}

// ParseGetAuditedResourceDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetAuditedResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetAuditedResourceDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetAuditedResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAuditedResourceDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetAuditedResourceDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseGetAuditedResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetAuditedResourceDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetAuditedResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	GetAuditedResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ GetAuditedResourceDescriptorRequest_FieldPathArrayItemValue = (*GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetAuditedResourceDescriptorRequest as interface{}
func (fpaiv *GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetAuditedResourceDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetAuditedResourceDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAuditedResourceDescriptorRequest'
func (fpaiv *GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetAuditedResourceDescriptorRequest) bool {
	slice := fpaiv.GetAuditedResourceDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetAuditedResourceDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for GetAuditedResourceDescriptorRequest fields according to their type
type GetAuditedResourceDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetAuditedResourceDescriptorRequest_FieldPath
}

func ParseGetAuditedResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetAuditedResourceDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetAuditedResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAuditedResourceDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetAuditedResourceDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseGetAuditedResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetAuditedResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetAuditedResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	GetAuditedResourceDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ GetAuditedResourceDescriptorRequest_FieldPathArrayOfValues = (*GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.Reference) {
			values = append(values, v)
		}
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
			values = append(values, v)
		}
	case GetAuditedResourceDescriptorRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*audited_resource_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.Reference)
	return res, ok
}
func (fpaov *GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return res, ok
}
func (fpaov *GetAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAuditedResourceDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAuditedResourceDescriptorsRequest_FieldPathSelector
	Get(source *BatchGetAuditedResourceDescriptorsRequest) []interface{}
	GetSingle(source *BatchGetAuditedResourceDescriptorsRequest) (interface{}, bool)
	ClearValue(item *BatchGetAuditedResourceDescriptorsRequest)

	// Those methods build corresponding BatchGetAuditedResourceDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAuditedResourceDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayItemValue
}

type BatchGetAuditedResourceDescriptorsRequest_FieldPathSelector int32

const (
	BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames     BatchGetAuditedResourceDescriptorsRequest_FieldPathSelector = 0
	BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask BatchGetAuditedResourceDescriptorsRequest_FieldPathSelector = 1
	BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView      BatchGetAuditedResourceDescriptorsRequest_FieldPathSelector = 2
)

func (s BatchGetAuditedResourceDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsRequest: %d", s))
	}
}

func BuildBatchGetAuditedResourceDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAuditedResourceDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAuditedResourceDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAuditedResourceDescriptorsRequest", fp)
}

func ParseBatchGetAuditedResourceDescriptorsRequest_FieldPath(rawField string) (BatchGetAuditedResourceDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAuditedResourceDescriptorsRequest_FieldPath(fp)
}

func MustParseBatchGetAuditedResourceDescriptorsRequest_FieldPath(rawField string) BatchGetAuditedResourceDescriptorsRequest_FieldPath {
	fp, err := ParseBatchGetAuditedResourceDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath struct {
	selector BatchGetAuditedResourceDescriptorsRequest_FieldPathSelector
}

var _ BatchGetAuditedResourceDescriptorsRequest_FieldPath = (*BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) Selector() BatchGetAuditedResourceDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAuditedResourceDescriptorsRequest
func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) Get(source *BatchGetAuditedResourceDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAuditedResourceDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetAuditedResourceDescriptorsRequest
func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) GetSingle(source *BatchGetAuditedResourceDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAuditedResourceDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames:
		return ([]*audited_resource_descriptor.Reference)(nil)
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)(nil)
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) ClearValue(item *BatchGetAuditedResourceDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAuditedResourceDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView
}

func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetAuditedResourceDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathValue{BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.([]*audited_resource_descriptor.Reference)}
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathValue{BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)}
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathValue{BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([][]*audited_resource_descriptor.Reference)}
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)}
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue{BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetAuditedResourceDescriptorsRequest_FieldPathValue allows storing values for BatchGetAuditedResourceDescriptorsRequest fields according to their type
type BatchGetAuditedResourceDescriptorsRequest_FieldPathValue interface {
	BatchGetAuditedResourceDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAuditedResourceDescriptorsRequest)
	CompareWith(*BatchGetAuditedResourceDescriptorsRequest) (cmp int, comparable bool)
}

func ParseBatchGetAuditedResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetAuditedResourceDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetAuditedResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAuditedResourceDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAuditedResourceDescriptorsRequest_FieldPathValue), nil
}

func MustParseBatchGetAuditedResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr string) BatchGetAuditedResourceDescriptorsRequest_FieldPathValue {
	fpv, err := ParseBatchGetAuditedResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathValue struct {
	BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAuditedResourceDescriptorsRequest_FieldPathValue = (*BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAuditedResourceDescriptorsRequest' as interface{}
func (fpv *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsNamesValue() ([]*audited_resource_descriptor.Reference, bool) {
	res, ok := fpv.value.([]*audited_resource_descriptor.Reference)
	return res, ok
}
func (fpv *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return res, ok
}
func (fpv *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAuditedResourceDescriptorsRequest
func (fpv *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathValue) SetTo(target **BatchGetAuditedResourceDescriptorsRequest) {
	if *target == nil {
		*target = new(BatchGetAuditedResourceDescriptorsRequest)
	}
	switch fpv.selector {
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*audited_resource_descriptor.Reference)
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAuditedResourceDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetAuditedResourceDescriptorsRequest'.
func (fpv *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetAuditedResourceDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAuditedResourceDescriptorsRequest))
}

// BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAuditedResourceDescriptorsRequest according to their type
// Present only for array (repeated) types.
type BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAuditedResourceDescriptorsRequest_FieldPath
	ContainsValue(*BatchGetAuditedResourceDescriptorsRequest) bool
}

// ParseBatchGetAuditedResourceDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAuditedResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAuditedResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAuditedResourceDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAuditedResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAuditedResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayItemValue = (*BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAuditedResourceDescriptorsRequest as interface{}
func (fpaiv *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*audited_resource_descriptor.Reference, bool) {
	res, ok := fpaiv.value.(*audited_resource_descriptor.Reference)
	return res, ok
}

func (fpaiv *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAuditedResourceDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAuditedResourceDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAuditedResourceDescriptorsRequest'
func (fpaiv *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAuditedResourceDescriptorsRequest) bool {
	slice := fpaiv.BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetAuditedResourceDescriptorsRequest fields according to their type
type BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAuditedResourceDescriptorsRequest_FieldPath
}

func ParseBatchGetAuditedResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAuditedResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAuditedResourceDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAuditedResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAuditedResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetAuditedResourceDescriptorsRequest_FieldPathArrayOfValues = (*BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*audited_resource_descriptor.Reference) {
			values = append(values, v)
		}
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
			values = append(values, v)
		}
	case BatchGetAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*audited_resource_descriptor.Reference, bool) {
	res, ok := fpaov.values.([][]*audited_resource_descriptor.Reference)
	return res, ok
}
func (fpaov *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return res, ok
}
func (fpaov *BatchGetAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAuditedResourceDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAuditedResourceDescriptorsResponse_FieldPathSelector
	Get(source *BatchGetAuditedResourceDescriptorsResponse) []interface{}
	GetSingle(source *BatchGetAuditedResourceDescriptorsResponse) (interface{}, bool)
	ClearValue(item *BatchGetAuditedResourceDescriptorsResponse)

	// Those methods build corresponding BatchGetAuditedResourceDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAuditedResourceDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayItemValue
}

type BatchGetAuditedResourceDescriptorsResponse_FieldPathSelector int32

const (
	BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors BatchGetAuditedResourceDescriptorsResponse_FieldPathSelector = 0
	BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing                    BatchGetAuditedResourceDescriptorsResponse_FieldPathSelector = 1
)

func (s BatchGetAuditedResourceDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return "audited_resource_descriptors"
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", s))
	}
}

func BuildBatchGetAuditedResourceDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAuditedResourceDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAuditedResourceDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "audited_resource_descriptors", "auditedResourceDescriptors", "audited-resource-descriptors":
			return &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors}, nil
		case "missing":
			return &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "audited_resource_descriptors", "auditedResourceDescriptors", "audited-resource-descriptors":
			if subpath, err := audited_resource_descriptor.BuildAuditedResourceDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetAuditedResourceDescriptorsResponse_FieldSubPath{selector: BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAuditedResourceDescriptorsResponse", fp)
}

func ParseBatchGetAuditedResourceDescriptorsResponse_FieldPath(rawField string) (BatchGetAuditedResourceDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAuditedResourceDescriptorsResponse_FieldPath(fp)
}

func MustParseBatchGetAuditedResourceDescriptorsResponse_FieldPath(rawField string) BatchGetAuditedResourceDescriptorsResponse_FieldPath {
	fp, err := ParseBatchGetAuditedResourceDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath struct {
	selector BatchGetAuditedResourceDescriptorsResponse_FieldPathSelector
}

var _ BatchGetAuditedResourceDescriptorsResponse_FieldPath = (*BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) Selector() BatchGetAuditedResourceDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAuditedResourceDescriptorsResponse
func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) Get(source *BatchGetAuditedResourceDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
			for _, value := range source.GetAuditedResourceDescriptors() {
				values = append(values, value)
			}
		case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAuditedResourceDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetAuditedResourceDescriptorsResponse
func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) GetSingle(source *BatchGetAuditedResourceDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		res := source.GetAuditedResourceDescriptors()
		return res, res != nil
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAuditedResourceDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return ([]*audited_resource_descriptor.AuditedResourceDescriptor)(nil)
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing:
		return ([]*audited_resource_descriptor.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) ClearValue(item *BatchGetAuditedResourceDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
			item.AuditedResourceDescriptors = nil
		case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAuditedResourceDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetAuditedResourceDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathValue{BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*audited_resource_descriptor.AuditedResourceDescriptor)}
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathValue{BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*audited_resource_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*audited_resource_descriptor.AuditedResourceDescriptor)}
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*audited_resource_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue{BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.AuditedResourceDescriptor)}
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue{BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetAuditedResourceDescriptorsResponse_FieldSubPath struct {
	selector BatchGetAuditedResourceDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetAuditedResourceDescriptorsResponse_FieldPath = (*BatchGetAuditedResourceDescriptorsResponse_FieldSubPath)(nil)

func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) Selector() BatchGetAuditedResourceDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) AsAuditedResourceDescriptorsSubPath() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetAuditedResourceDescriptorsResponse
func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) Get(source *BatchGetAuditedResourceDescriptorsResponse) (values []interface{}) {
	if asAuditedResourceDescriptorFieldPath, ok := fps.AsAuditedResourceDescriptorsSubPath(); ok {
		for _, item := range source.GetAuditedResourceDescriptors() {
			values = append(values, asAuditedResourceDescriptorFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetAuditedResourceDescriptorsResponse))
}

// GetSingle returns value of selected field from source BatchGetAuditedResourceDescriptorsResponse
func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) GetSingle(source *BatchGetAuditedResourceDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		if len(source.GetAuditedResourceDescriptors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAuditedResourceDescriptors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetAuditedResourceDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) ClearValue(item *BatchGetAuditedResourceDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
			for _, subItem := range item.AuditedResourceDescriptors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetAuditedResourceDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetAuditedResourceDescriptorsResponse_FieldPathValue {
	return &BatchGetAuditedResourceDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayOfValues {
	return &BatchGetAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayItemValue {
	return &BatchGetAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetAuditedResourceDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetAuditedResourceDescriptorsResponse_FieldPathValue allows storing values for BatchGetAuditedResourceDescriptorsResponse fields according to their type
type BatchGetAuditedResourceDescriptorsResponse_FieldPathValue interface {
	BatchGetAuditedResourceDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAuditedResourceDescriptorsResponse)
	CompareWith(*BatchGetAuditedResourceDescriptorsResponse) (cmp int, comparable bool)
}

func ParseBatchGetAuditedResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetAuditedResourceDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetAuditedResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAuditedResourceDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAuditedResourceDescriptorsResponse_FieldPathValue), nil
}

func MustParseBatchGetAuditedResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr string) BatchGetAuditedResourceDescriptorsResponse_FieldPathValue {
	fpv, err := ParseBatchGetAuditedResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathValue struct {
	BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAuditedResourceDescriptorsResponse_FieldPathValue = (*BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAuditedResourceDescriptorsResponse' as interface{}
func (fpv *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathValue) AsAuditedResourceDescriptorsValue() ([]*audited_resource_descriptor.AuditedResourceDescriptor, bool) {
	res, ok := fpv.value.([]*audited_resource_descriptor.AuditedResourceDescriptor)
	return res, ok
}
func (fpv *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathValue) AsMissingValue() ([]*audited_resource_descriptor.Reference, bool) {
	res, ok := fpv.value.([]*audited_resource_descriptor.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAuditedResourceDescriptorsResponse
func (fpv *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathValue) SetTo(target **BatchGetAuditedResourceDescriptorsResponse) {
	if *target == nil {
		*target = new(BatchGetAuditedResourceDescriptorsResponse)
	}
	switch fpv.selector {
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		(*target).AuditedResourceDescriptors = fpv.value.([]*audited_resource_descriptor.AuditedResourceDescriptor)
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*audited_resource_descriptor.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAuditedResourceDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetAuditedResourceDescriptorsResponse'.
func (fpv *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetAuditedResourceDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return 0, false
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAuditedResourceDescriptorsResponse))
}

type BatchGetAuditedResourceDescriptorsResponse_FieldSubPathValue struct {
	BatchGetAuditedResourceDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetAuditedResourceDescriptorsResponse_FieldPathValue = (*BatchGetAuditedResourceDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetAuditedResourceDescriptorsResponse_FieldSubPathValue) AsAuditedResourceDescriptorsPathValue() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetAuditedResourceDescriptorsResponse_FieldSubPathValue) SetTo(target **BatchGetAuditedResourceDescriptorsResponse) {
	if *target == nil {
		*target = new(BatchGetAuditedResourceDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAuditedResourceDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAuditedResourceDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetAuditedResourceDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetAuditedResourceDescriptorsResponse_FieldSubPathValue) CompareWith(source *BatchGetAuditedResourceDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAuditedResourceDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetAuditedResourceDescriptorsResponse))
}

// BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAuditedResourceDescriptorsResponse according to their type
// Present only for array (repeated) types.
type BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAuditedResourceDescriptorsResponse_FieldPath
	ContainsValue(*BatchGetAuditedResourceDescriptorsResponse) bool
}

// ParseBatchGetAuditedResourceDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAuditedResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAuditedResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAuditedResourceDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAuditedResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAuditedResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayItemValue = (*BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAuditedResourceDescriptorsResponse as interface{}
func (fpaiv *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) AsAuditedResourceDescriptorsItemValue() (*audited_resource_descriptor.AuditedResourceDescriptor, bool) {
	res, ok := fpaiv.value.(*audited_resource_descriptor.AuditedResourceDescriptor)
	return res, ok
}
func (fpaiv *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*audited_resource_descriptor.Reference, bool) {
	res, ok := fpaiv.value.(*audited_resource_descriptor.Reference)
	return res, ok
}

func (fpaiv *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAuditedResourceDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAuditedResourceDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAuditedResourceDescriptorsResponse'
func (fpaiv *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAuditedResourceDescriptorsResponse) bool {
	slice := fpaiv.BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue struct {
	BatchGetAuditedResourceDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue) AsAuditedResourceDescriptorsPathItemValue() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAuditedResourceDescriptorsResponse'
func (fpaivs *BatchGetAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetAuditedResourceDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAuditedResourceDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetAuditedResourceDescriptorsResponse fields according to their type
type BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAuditedResourceDescriptorsResponse_FieldPath
}

func ParseBatchGetAuditedResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAuditedResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAuditedResourceDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAuditedResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAuditedResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayOfValues = (*BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		for _, v := range fpaov.values.([][]*audited_resource_descriptor.AuditedResourceDescriptor) {
			values = append(values, v)
		}
	case BatchGetAuditedResourceDescriptorsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*audited_resource_descriptor.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsAuditedResourceDescriptorsArrayOfValues() ([][]*audited_resource_descriptor.AuditedResourceDescriptor, bool) {
	res, ok := fpaov.values.([][]*audited_resource_descriptor.AuditedResourceDescriptor)
	return res, ok
}
func (fpaov *BatchGetAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*audited_resource_descriptor.Reference, bool) {
	res, ok := fpaov.values.([][]*audited_resource_descriptor.Reference)
	return res, ok
}

type BatchGetAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues struct {
	BatchGetAuditedResourceDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetAuditedResourceDescriptorsResponse_FieldPathArrayOfValues = (*BatchGetAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues) AsAuditedResourceDescriptorsPathArrayOfValues() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAuditedResourceDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAuditedResourceDescriptorsRequest_FieldPathSelector
	Get(source *ListAuditedResourceDescriptorsRequest) []interface{}
	GetSingle(source *ListAuditedResourceDescriptorsRequest) (interface{}, bool)
	ClearValue(item *ListAuditedResourceDescriptorsRequest)

	// Those methods build corresponding ListAuditedResourceDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAuditedResourceDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAuditedResourceDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAuditedResourceDescriptorsRequest_FieldPathArrayItemValue
}

type ListAuditedResourceDescriptorsRequest_FieldPathSelector int32

const (
	ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize  ListAuditedResourceDescriptorsRequest_FieldPathSelector = 0
	ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken ListAuditedResourceDescriptorsRequest_FieldPathSelector = 1
	ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy   ListAuditedResourceDescriptorsRequest_FieldPathSelector = 2
	ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter    ListAuditedResourceDescriptorsRequest_FieldPathSelector = 3
	ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask ListAuditedResourceDescriptorsRequest_FieldPathSelector = 4
	ListAuditedResourceDescriptorsRequest_FieldPathSelectorView      ListAuditedResourceDescriptorsRequest_FieldPathSelector = 5
)

func (s ListAuditedResourceDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsRequest: %d", s))
	}
}

func BuildListAuditedResourceDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListAuditedResourceDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAuditedResourceDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "page_size", "pageSize", "page-size":
			return &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: ListAuditedResourceDescriptorsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAuditedResourceDescriptorsRequest", fp)
}

func ParseListAuditedResourceDescriptorsRequest_FieldPath(rawField string) (ListAuditedResourceDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAuditedResourceDescriptorsRequest_FieldPath(fp)
}

func MustParseListAuditedResourceDescriptorsRequest_FieldPath(rawField string) ListAuditedResourceDescriptorsRequest_FieldPath {
	fp, err := ParseListAuditedResourceDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAuditedResourceDescriptorsRequest_FieldTerminalPath struct {
	selector ListAuditedResourceDescriptorsRequest_FieldPathSelector
}

var _ ListAuditedResourceDescriptorsRequest_FieldPath = (*ListAuditedResourceDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) Selector() ListAuditedResourceDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAuditedResourceDescriptorsRequest
func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) Get(source *ListAuditedResourceDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListAuditedResourceDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAuditedResourceDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source ListAuditedResourceDescriptorsRequest
func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) GetSingle(source *ListAuditedResourceDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAuditedResourceDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return (*audited_resource_descriptor.PagerCursor)(nil)
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return (*audited_resource_descriptor.OrderBy)(nil)
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		return (*audited_resource_descriptor.Filter)(nil)
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)(nil)
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) ClearValue(item *ListAuditedResourceDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListAuditedResourceDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAuditedResourceDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter ||
		fp.selector == ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListAuditedResourceDescriptorsRequest_FieldPathSelectorView
}

func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) ListAuditedResourceDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return &ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue{ListAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return &ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue{ListAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.PagerCursor)}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return &ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue{ListAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.OrderBy)}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		return &ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue{ListAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.Filter)}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return &ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue{ListAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return &ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue{ListAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAuditedResourceDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{ListAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return &ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{ListAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return &ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{ListAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.PagerCursor)}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return &ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{ListAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.OrderBy)}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		return &ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{ListAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.Filter)}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return &ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{ListAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return &ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{ListAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAuditedResourceDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListAuditedResourceDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListAuditedResourceDescriptorsRequest_FieldPathValue allows storing values for ListAuditedResourceDescriptorsRequest fields according to their type
type ListAuditedResourceDescriptorsRequest_FieldPathValue interface {
	ListAuditedResourceDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAuditedResourceDescriptorsRequest)
	CompareWith(*ListAuditedResourceDescriptorsRequest) (cmp int, comparable bool)
}

func ParseListAuditedResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (ListAuditedResourceDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseListAuditedResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAuditedResourceDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAuditedResourceDescriptorsRequest_FieldPathValue), nil
}

func MustParseListAuditedResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr string) ListAuditedResourceDescriptorsRequest_FieldPathValue {
	fpv, err := ParseListAuditedResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue struct {
	ListAuditedResourceDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ ListAuditedResourceDescriptorsRequest_FieldPathValue = (*ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAuditedResourceDescriptorsRequest' as interface{}
func (fpv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsPageTokenValue() (*audited_resource_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsOrderByValue() (*audited_resource_descriptor.OrderBy, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.OrderBy)
	return res, ok
}
func (fpv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsFilterValue() (*audited_resource_descriptor.Filter, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.Filter)
	return res, ok
}
func (fpv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return res, ok
}
func (fpv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListAuditedResourceDescriptorsRequest
func (fpv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue) SetTo(target **ListAuditedResourceDescriptorsRequest) {
	if *target == nil {
		*target = new(ListAuditedResourceDescriptorsRequest)
	}
	switch fpv.selector {
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*audited_resource_descriptor.PagerCursor)
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*audited_resource_descriptor.OrderBy)
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*audited_resource_descriptor.Filter)
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAuditedResourceDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'ListAuditedResourceDescriptorsRequest'.
func (fpv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *ListAuditedResourceDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAuditedResourceDescriptorsRequest))
}

// ListAuditedResourceDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAuditedResourceDescriptorsRequest according to their type
// Present only for array (repeated) types.
type ListAuditedResourceDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAuditedResourceDescriptorsRequest_FieldPath
	ContainsValue(*ListAuditedResourceDescriptorsRequest) bool
}

// ParseListAuditedResourceDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAuditedResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListAuditedResourceDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListAuditedResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAuditedResourceDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAuditedResourceDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseListAuditedResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListAuditedResourceDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListAuditedResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	ListAuditedResourceDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ ListAuditedResourceDescriptorsRequest_FieldPathArrayItemValue = (*ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAuditedResourceDescriptorsRequest as interface{}
func (fpaiv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListAuditedResourceDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAuditedResourceDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAuditedResourceDescriptorsRequest'
func (fpaiv *ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAuditedResourceDescriptorsRequest) bool {
	slice := fpaiv.ListAuditedResourceDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListAuditedResourceDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for ListAuditedResourceDescriptorsRequest fields according to their type
type ListAuditedResourceDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAuditedResourceDescriptorsRequest_FieldPath
}

func ParseListAuditedResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAuditedResourceDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListAuditedResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAuditedResourceDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAuditedResourceDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseListAuditedResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListAuditedResourceDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListAuditedResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	ListAuditedResourceDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ ListAuditedResourceDescriptorsRequest_FieldPathArrayOfValues = (*ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.OrderBy) {
			values = append(values, v)
		}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.Filter) {
			values = append(values, v)
		}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
			values = append(values, v)
		}
	case ListAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*audited_resource_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*audited_resource_descriptor.OrderBy, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.OrderBy)
	return res, ok
}
func (fpaov *ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*audited_resource_descriptor.Filter, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.Filter)
	return res, ok
}
func (fpaov *ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return res, ok
}
func (fpaov *ListAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAuditedResourceDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAuditedResourceDescriptorsResponse_FieldPathSelector
	Get(source *ListAuditedResourceDescriptorsResponse) []interface{}
	GetSingle(source *ListAuditedResourceDescriptorsResponse) (interface{}, bool)
	ClearValue(item *ListAuditedResourceDescriptorsResponse)

	// Those methods build corresponding ListAuditedResourceDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAuditedResourceDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAuditedResourceDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAuditedResourceDescriptorsResponse_FieldPathArrayItemValue
}

type ListAuditedResourceDescriptorsResponse_FieldPathSelector int32

const (
	ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors ListAuditedResourceDescriptorsResponse_FieldPathSelector = 0
	ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken              ListAuditedResourceDescriptorsResponse_FieldPathSelector = 1
	ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken              ListAuditedResourceDescriptorsResponse_FieldPathSelector = 2
)

func (s ListAuditedResourceDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return "audited_resource_descriptors"
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", s))
	}
}

func BuildListAuditedResourceDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListAuditedResourceDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAuditedResourceDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "audited_resource_descriptors", "auditedResourceDescriptors", "audited-resource-descriptors":
			return &ListAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "audited_resource_descriptors", "auditedResourceDescriptors", "audited-resource-descriptors":
			if subpath, err := audited_resource_descriptor.BuildAuditedResourceDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListAuditedResourceDescriptorsResponse_FieldSubPath{selector: ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAuditedResourceDescriptorsResponse", fp)
}

func ParseListAuditedResourceDescriptorsResponse_FieldPath(rawField string) (ListAuditedResourceDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAuditedResourceDescriptorsResponse_FieldPath(fp)
}

func MustParseListAuditedResourceDescriptorsResponse_FieldPath(rawField string) ListAuditedResourceDescriptorsResponse_FieldPath {
	fp, err := ParseListAuditedResourceDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAuditedResourceDescriptorsResponse_FieldTerminalPath struct {
	selector ListAuditedResourceDescriptorsResponse_FieldPathSelector
}

var _ ListAuditedResourceDescriptorsResponse_FieldPath = (*ListAuditedResourceDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) Selector() ListAuditedResourceDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAuditedResourceDescriptorsResponse
func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) Get(source *ListAuditedResourceDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
			for _, value := range source.GetAuditedResourceDescriptors() {
				values = append(values, value)
			}
		case ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAuditedResourceDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source ListAuditedResourceDescriptorsResponse
func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) GetSingle(source *ListAuditedResourceDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		res := source.GetAuditedResourceDescriptors()
		return res, res != nil
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAuditedResourceDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return ([]*audited_resource_descriptor.AuditedResourceDescriptor)(nil)
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return (*audited_resource_descriptor.PagerCursor)(nil)
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		return (*audited_resource_descriptor.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) ClearValue(item *ListAuditedResourceDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
			item.AuditedResourceDescriptors = nil
		case ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAuditedResourceDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) ListAuditedResourceDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return &ListAuditedResourceDescriptorsResponse_FieldTerminalPathValue{ListAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*audited_resource_descriptor.AuditedResourceDescriptor)}
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return &ListAuditedResourceDescriptorsResponse_FieldTerminalPathValue{ListAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.PagerCursor)}
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		return &ListAuditedResourceDescriptorsResponse_FieldTerminalPathValue{ListAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAuditedResourceDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{ListAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return &ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{ListAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*audited_resource_descriptor.AuditedResourceDescriptor)}
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return &ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{ListAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.PagerCursor)}
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		return &ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{ListAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAuditedResourceDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return &ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue{ListAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.AuditedResourceDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListAuditedResourceDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListAuditedResourceDescriptorsResponse_FieldSubPath struct {
	selector ListAuditedResourceDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListAuditedResourceDescriptorsResponse_FieldPath = (*ListAuditedResourceDescriptorsResponse_FieldSubPath)(nil)

func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) Selector() ListAuditedResourceDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) AsAuditedResourceDescriptorsSubPath() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListAuditedResourceDescriptorsResponse
func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) Get(source *ListAuditedResourceDescriptorsResponse) (values []interface{}) {
	if asAuditedResourceDescriptorFieldPath, ok := fps.AsAuditedResourceDescriptorsSubPath(); ok {
		for _, item := range source.GetAuditedResourceDescriptors() {
			values = append(values, asAuditedResourceDescriptorFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListAuditedResourceDescriptorsResponse))
}

// GetSingle returns value of selected field from source ListAuditedResourceDescriptorsResponse
func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) GetSingle(source *ListAuditedResourceDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		if len(source.GetAuditedResourceDescriptors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAuditedResourceDescriptors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListAuditedResourceDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) ClearValue(item *ListAuditedResourceDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
			for _, subItem := range item.AuditedResourceDescriptors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListAuditedResourceDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) ListAuditedResourceDescriptorsResponse_FieldPathValue {
	return &ListAuditedResourceDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListAuditedResourceDescriptorsResponse_FieldPathArrayOfValues {
	return &ListAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListAuditedResourceDescriptorsResponse_FieldPathArrayItemValue {
	return &ListAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListAuditedResourceDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListAuditedResourceDescriptorsResponse_FieldPathValue allows storing values for ListAuditedResourceDescriptorsResponse fields according to their type
type ListAuditedResourceDescriptorsResponse_FieldPathValue interface {
	ListAuditedResourceDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAuditedResourceDescriptorsResponse)
	CompareWith(*ListAuditedResourceDescriptorsResponse) (cmp int, comparable bool)
}

func ParseListAuditedResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (ListAuditedResourceDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseListAuditedResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAuditedResourceDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAuditedResourceDescriptorsResponse_FieldPathValue), nil
}

func MustParseListAuditedResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr string) ListAuditedResourceDescriptorsResponse_FieldPathValue {
	fpv, err := ParseListAuditedResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAuditedResourceDescriptorsResponse_FieldTerminalPathValue struct {
	ListAuditedResourceDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ ListAuditedResourceDescriptorsResponse_FieldPathValue = (*ListAuditedResourceDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAuditedResourceDescriptorsResponse' as interface{}
func (fpv *ListAuditedResourceDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAuditedResourceDescriptorsResponse_FieldTerminalPathValue) AsAuditedResourceDescriptorsValue() ([]*audited_resource_descriptor.AuditedResourceDescriptor, bool) {
	res, ok := fpv.value.([]*audited_resource_descriptor.AuditedResourceDescriptor)
	return res, ok
}
func (fpv *ListAuditedResourceDescriptorsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*audited_resource_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpv *ListAuditedResourceDescriptorsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*audited_resource_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListAuditedResourceDescriptorsResponse
func (fpv *ListAuditedResourceDescriptorsResponse_FieldTerminalPathValue) SetTo(target **ListAuditedResourceDescriptorsResponse) {
	if *target == nil {
		*target = new(ListAuditedResourceDescriptorsResponse)
	}
	switch fpv.selector {
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		(*target).AuditedResourceDescriptors = fpv.value.([]*audited_resource_descriptor.AuditedResourceDescriptor)
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*audited_resource_descriptor.PagerCursor)
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*audited_resource_descriptor.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *ListAuditedResourceDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAuditedResourceDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAuditedResourceDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'ListAuditedResourceDescriptorsResponse'.
func (fpv *ListAuditedResourceDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *ListAuditedResourceDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return 0, false
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *ListAuditedResourceDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAuditedResourceDescriptorsResponse))
}

type ListAuditedResourceDescriptorsResponse_FieldSubPathValue struct {
	ListAuditedResourceDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListAuditedResourceDescriptorsResponse_FieldPathValue = (*ListAuditedResourceDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *ListAuditedResourceDescriptorsResponse_FieldSubPathValue) AsAuditedResourceDescriptorsPathValue() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *ListAuditedResourceDescriptorsResponse_FieldSubPathValue) SetTo(target **ListAuditedResourceDescriptorsResponse) {
	if *target == nil {
		*target = new(ListAuditedResourceDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAuditedResourceDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAuditedResourceDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListAuditedResourceDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListAuditedResourceDescriptorsResponse_FieldSubPathValue) CompareWith(source *ListAuditedResourceDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAuditedResourceDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListAuditedResourceDescriptorsResponse))
}

// ListAuditedResourceDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAuditedResourceDescriptorsResponse according to their type
// Present only for array (repeated) types.
type ListAuditedResourceDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAuditedResourceDescriptorsResponse_FieldPath
	ContainsValue(*ListAuditedResourceDescriptorsResponse) bool
}

// ParseListAuditedResourceDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAuditedResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListAuditedResourceDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListAuditedResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAuditedResourceDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAuditedResourceDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseListAuditedResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListAuditedResourceDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListAuditedResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	ListAuditedResourceDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ ListAuditedResourceDescriptorsResponse_FieldPathArrayItemValue = (*ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAuditedResourceDescriptorsResponse as interface{}
func (fpaiv *ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) AsAuditedResourceDescriptorsItemValue() (*audited_resource_descriptor.AuditedResourceDescriptor, bool) {
	res, ok := fpaiv.value.(*audited_resource_descriptor.AuditedResourceDescriptor)
	return res, ok
}

func (fpaiv *ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListAuditedResourceDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAuditedResourceDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAuditedResourceDescriptorsResponse'
func (fpaiv *ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAuditedResourceDescriptorsResponse) bool {
	slice := fpaiv.ListAuditedResourceDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue struct {
	ListAuditedResourceDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue) AsAuditedResourceDescriptorsPathItemValue() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAuditedResourceDescriptorsResponse'
func (fpaivs *ListAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListAuditedResourceDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAuditedResourceDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// ListAuditedResourceDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for ListAuditedResourceDescriptorsResponse fields according to their type
type ListAuditedResourceDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAuditedResourceDescriptorsResponse_FieldPath
}

func ParseListAuditedResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAuditedResourceDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListAuditedResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAuditedResourceDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAuditedResourceDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseListAuditedResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListAuditedResourceDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListAuditedResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	ListAuditedResourceDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ ListAuditedResourceDescriptorsResponse_FieldPathArrayOfValues = (*ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptors:
		for _, v := range fpaov.values.([][]*audited_resource_descriptor.AuditedResourceDescriptor) {
			values = append(values, v)
		}
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case ListAuditedResourceDescriptorsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsAuditedResourceDescriptorsArrayOfValues() ([][]*audited_resource_descriptor.AuditedResourceDescriptor, bool) {
	res, ok := fpaov.values.([][]*audited_resource_descriptor.AuditedResourceDescriptor)
	return res, ok
}
func (fpaov *ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*audited_resource_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *ListAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*audited_resource_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.PagerCursor)
	return res, ok
}

type ListAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues struct {
	ListAuditedResourceDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListAuditedResourceDescriptorsResponse_FieldPathArrayOfValues = (*ListAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues) AsAuditedResourceDescriptorsPathArrayOfValues() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAuditedResourceDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAuditedResourceDescriptorRequest_FieldPathSelector
	Get(source *WatchAuditedResourceDescriptorRequest) []interface{}
	GetSingle(source *WatchAuditedResourceDescriptorRequest) (interface{}, bool)
	ClearValue(item *WatchAuditedResourceDescriptorRequest)

	// Those methods build corresponding WatchAuditedResourceDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAuditedResourceDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAuditedResourceDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAuditedResourceDescriptorRequest_FieldPathArrayItemValue
}

type WatchAuditedResourceDescriptorRequest_FieldPathSelector int32

const (
	WatchAuditedResourceDescriptorRequest_FieldPathSelectorName      WatchAuditedResourceDescriptorRequest_FieldPathSelector = 0
	WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask WatchAuditedResourceDescriptorRequest_FieldPathSelector = 1
	WatchAuditedResourceDescriptorRequest_FieldPathSelectorView      WatchAuditedResourceDescriptorRequest_FieldPathSelector = 2
)

func (s WatchAuditedResourceDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorName:
		return "name"
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorRequest: %d", s))
	}
}

func BuildWatchAuditedResourceDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAuditedResourceDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAuditedResourceDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchAuditedResourceDescriptorRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAuditedResourceDescriptorRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAuditedResourceDescriptorRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAuditedResourceDescriptorRequest", fp)
}

func ParseWatchAuditedResourceDescriptorRequest_FieldPath(rawField string) (WatchAuditedResourceDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAuditedResourceDescriptorRequest_FieldPath(fp)
}

func MustParseWatchAuditedResourceDescriptorRequest_FieldPath(rawField string) WatchAuditedResourceDescriptorRequest_FieldPath {
	fp, err := ParseWatchAuditedResourceDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAuditedResourceDescriptorRequest_FieldTerminalPath struct {
	selector WatchAuditedResourceDescriptorRequest_FieldPathSelector
}

var _ WatchAuditedResourceDescriptorRequest_FieldPath = (*WatchAuditedResourceDescriptorRequest_FieldTerminalPath)(nil)

func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) Selector() WatchAuditedResourceDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAuditedResourceDescriptorRequest
func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) Get(source *WatchAuditedResourceDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAuditedResourceDescriptorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAuditedResourceDescriptorRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAuditedResourceDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAuditedResourceDescriptorRequest
func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) GetSingle(source *WatchAuditedResourceDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAuditedResourceDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorName:
		return (*audited_resource_descriptor.Reference)(nil)
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return (*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)(nil)
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) ClearValue(item *WatchAuditedResourceDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAuditedResourceDescriptorRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAuditedResourceDescriptorRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAuditedResourceDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAuditedResourceDescriptorRequest_FieldPathSelectorName ||
		fp.selector == WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAuditedResourceDescriptorRequest_FieldPathSelectorView
}

func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAuditedResourceDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorName:
		return &WatchAuditedResourceDescriptorRequest_FieldTerminalPathValue{WatchAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.Reference)}
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return &WatchAuditedResourceDescriptorRequest_FieldTerminalPathValue{WatchAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)}
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorView:
		return &WatchAuditedResourceDescriptorRequest_FieldTerminalPathValue{WatchAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAuditedResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorName:
		return &WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.Reference)}
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return &WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)}
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorView:
		return &WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAuditedResourceDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAuditedResourceDescriptorRequest_FieldPathValue allows storing values for WatchAuditedResourceDescriptorRequest fields according to their type
type WatchAuditedResourceDescriptorRequest_FieldPathValue interface {
	WatchAuditedResourceDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAuditedResourceDescriptorRequest)
	CompareWith(*WatchAuditedResourceDescriptorRequest) (cmp int, comparable bool)
}

func ParseWatchAuditedResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) (WatchAuditedResourceDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseWatchAuditedResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAuditedResourceDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAuditedResourceDescriptorRequest_FieldPathValue), nil
}

func MustParseWatchAuditedResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) WatchAuditedResourceDescriptorRequest_FieldPathValue {
	fpv, err := ParseWatchAuditedResourceDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAuditedResourceDescriptorRequest_FieldTerminalPathValue struct {
	WatchAuditedResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAuditedResourceDescriptorRequest_FieldPathValue = (*WatchAuditedResourceDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAuditedResourceDescriptorRequest' as interface{}
func (fpv *WatchAuditedResourceDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAuditedResourceDescriptorRequest_FieldTerminalPathValue) AsNameValue() (*audited_resource_descriptor.Reference, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.Reference)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorRequest_FieldTerminalPathValue) AsFieldMaskValue() (*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchAuditedResourceDescriptorRequest
func (fpv *WatchAuditedResourceDescriptorRequest_FieldTerminalPathValue) SetTo(target **WatchAuditedResourceDescriptorRequest) {
	if *target == nil {
		*target = new(WatchAuditedResourceDescriptorRequest)
	}
	switch fpv.selector {
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*audited_resource_descriptor.Reference)
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAuditedResourceDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAuditedResourceDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAuditedResourceDescriptorRequest_FieldTerminalPathValue' with the value under path in 'WatchAuditedResourceDescriptorRequest'.
func (fpv *WatchAuditedResourceDescriptorRequest_FieldTerminalPathValue) CompareWith(source *WatchAuditedResourceDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*audited_resource_descriptor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAuditedResourceDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAuditedResourceDescriptorRequest))
}

// WatchAuditedResourceDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAuditedResourceDescriptorRequest according to their type
// Present only for array (repeated) types.
type WatchAuditedResourceDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAuditedResourceDescriptorRequest_FieldPath
	ContainsValue(*WatchAuditedResourceDescriptorRequest) bool
}

// ParseWatchAuditedResourceDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAuditedResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAuditedResourceDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAuditedResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAuditedResourceDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAuditedResourceDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAuditedResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAuditedResourceDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAuditedResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	WatchAuditedResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAuditedResourceDescriptorRequest_FieldPathArrayItemValue = (*WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAuditedResourceDescriptorRequest as interface{}
func (fpaiv *WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAuditedResourceDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAuditedResourceDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAuditedResourceDescriptorRequest'
func (fpaiv *WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAuditedResourceDescriptorRequest) bool {
	slice := fpaiv.WatchAuditedResourceDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAuditedResourceDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for WatchAuditedResourceDescriptorRequest fields according to their type
type WatchAuditedResourceDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAuditedResourceDescriptorRequest_FieldPath
}

func ParseWatchAuditedResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAuditedResourceDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAuditedResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAuditedResourceDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAuditedResourceDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAuditedResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAuditedResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAuditedResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	WatchAuditedResourceDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAuditedResourceDescriptorRequest_FieldPathArrayOfValues = (*WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.Reference) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*audited_resource_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.Reference)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAuditedResourceDescriptorResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAuditedResourceDescriptorResponse_FieldPathSelector
	Get(source *WatchAuditedResourceDescriptorResponse) []interface{}
	GetSingle(source *WatchAuditedResourceDescriptorResponse) (interface{}, bool)
	ClearValue(item *WatchAuditedResourceDescriptorResponse)

	// Those methods build corresponding WatchAuditedResourceDescriptorResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAuditedResourceDescriptorResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAuditedResourceDescriptorResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAuditedResourceDescriptorResponse_FieldPathArrayItemValue
}

type WatchAuditedResourceDescriptorResponse_FieldPathSelector int32

const (
	WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange WatchAuditedResourceDescriptorResponse_FieldPathSelector = 0
)

func (s WatchAuditedResourceDescriptorResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorResponse: %d", s))
	}
}

func BuildWatchAuditedResourceDescriptorResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAuditedResourceDescriptorResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAuditedResourceDescriptorResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchAuditedResourceDescriptorResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAuditedResourceDescriptorResponse", fp)
}

func ParseWatchAuditedResourceDescriptorResponse_FieldPath(rawField string) (WatchAuditedResourceDescriptorResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAuditedResourceDescriptorResponse_FieldPath(fp)
}

func MustParseWatchAuditedResourceDescriptorResponse_FieldPath(rawField string) WatchAuditedResourceDescriptorResponse_FieldPath {
	fp, err := ParseWatchAuditedResourceDescriptorResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAuditedResourceDescriptorResponse_FieldTerminalPath struct {
	selector WatchAuditedResourceDescriptorResponse_FieldPathSelector
}

var _ WatchAuditedResourceDescriptorResponse_FieldPath = (*WatchAuditedResourceDescriptorResponse_FieldTerminalPath)(nil)

func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) Selector() WatchAuditedResourceDescriptorResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAuditedResourceDescriptorResponse
func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) Get(source *WatchAuditedResourceDescriptorResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAuditedResourceDescriptorResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAuditedResourceDescriptorResponse
func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) GetSingle(source *WatchAuditedResourceDescriptorResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAuditedResourceDescriptorResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange:
		return (*audited_resource_descriptor.AuditedResourceDescriptorChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) ClearValue(item *WatchAuditedResourceDescriptorResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAuditedResourceDescriptorResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange
}

func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAuditedResourceDescriptorResponse_FieldPathValue {
	switch fp.selector {
	case WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange:
		return &WatchAuditedResourceDescriptorResponse_FieldTerminalPathValue{WatchAuditedResourceDescriptorResponse_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.AuditedResourceDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAuditedResourceDescriptorResponse_FieldPathArrayOfValues {
	fpaov := &WatchAuditedResourceDescriptorResponse_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange:
		return &WatchAuditedResourceDescriptorResponse_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorResponse_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.AuditedResourceDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAuditedResourceDescriptorResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAuditedResourceDescriptorResponse_FieldPathValue allows storing values for WatchAuditedResourceDescriptorResponse fields according to their type
type WatchAuditedResourceDescriptorResponse_FieldPathValue interface {
	WatchAuditedResourceDescriptorResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAuditedResourceDescriptorResponse)
	CompareWith(*WatchAuditedResourceDescriptorResponse) (cmp int, comparable bool)
}

func ParseWatchAuditedResourceDescriptorResponse_FieldPathValue(pathStr, valueStr string) (WatchAuditedResourceDescriptorResponse_FieldPathValue, error) {
	fp, err := ParseWatchAuditedResourceDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAuditedResourceDescriptorResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAuditedResourceDescriptorResponse_FieldPathValue), nil
}

func MustParseWatchAuditedResourceDescriptorResponse_FieldPathValue(pathStr, valueStr string) WatchAuditedResourceDescriptorResponse_FieldPathValue {
	fpv, err := ParseWatchAuditedResourceDescriptorResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAuditedResourceDescriptorResponse_FieldTerminalPathValue struct {
	WatchAuditedResourceDescriptorResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAuditedResourceDescriptorResponse_FieldPathValue = (*WatchAuditedResourceDescriptorResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAuditedResourceDescriptorResponse' as interface{}
func (fpv *WatchAuditedResourceDescriptorResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAuditedResourceDescriptorResponse_FieldTerminalPathValue) AsChangeValue() (*audited_resource_descriptor.AuditedResourceDescriptorChange, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptorChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchAuditedResourceDescriptorResponse
func (fpv *WatchAuditedResourceDescriptorResponse_FieldTerminalPathValue) SetTo(target **WatchAuditedResourceDescriptorResponse) {
	if *target == nil {
		*target = new(WatchAuditedResourceDescriptorResponse)
	}
	switch fpv.selector {
	case WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptorChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAuditedResourceDescriptorResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAuditedResourceDescriptorResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAuditedResourceDescriptorResponse_FieldTerminalPathValue' with the value under path in 'WatchAuditedResourceDescriptorResponse'.
func (fpv *WatchAuditedResourceDescriptorResponse_FieldTerminalPathValue) CompareWith(source *WatchAuditedResourceDescriptorResponse) (int, bool) {
	switch fpv.selector {
	case WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAuditedResourceDescriptorResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAuditedResourceDescriptorResponse))
}

// WatchAuditedResourceDescriptorResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAuditedResourceDescriptorResponse according to their type
// Present only for array (repeated) types.
type WatchAuditedResourceDescriptorResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAuditedResourceDescriptorResponse_FieldPath
	ContainsValue(*WatchAuditedResourceDescriptorResponse) bool
}

// ParseWatchAuditedResourceDescriptorResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAuditedResourceDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAuditedResourceDescriptorResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAuditedResourceDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAuditedResourceDescriptorResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAuditedResourceDescriptorResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAuditedResourceDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAuditedResourceDescriptorResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAuditedResourceDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAuditedResourceDescriptorResponse_FieldTerminalPathArrayItemValue struct {
	WatchAuditedResourceDescriptorResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAuditedResourceDescriptorResponse_FieldPathArrayItemValue = (*WatchAuditedResourceDescriptorResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAuditedResourceDescriptorResponse as interface{}
func (fpaiv *WatchAuditedResourceDescriptorResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAuditedResourceDescriptorResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAuditedResourceDescriptorResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAuditedResourceDescriptorResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAuditedResourceDescriptorResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAuditedResourceDescriptorResponse'
func (fpaiv *WatchAuditedResourceDescriptorResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAuditedResourceDescriptorResponse) bool {
	slice := fpaiv.WatchAuditedResourceDescriptorResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAuditedResourceDescriptorResponse_FieldPathArrayOfValues allows storing slice of values for WatchAuditedResourceDescriptorResponse fields according to their type
type WatchAuditedResourceDescriptorResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAuditedResourceDescriptorResponse_FieldPath
}

func ParseWatchAuditedResourceDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAuditedResourceDescriptorResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAuditedResourceDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAuditedResourceDescriptorResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAuditedResourceDescriptorResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAuditedResourceDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAuditedResourceDescriptorResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAuditedResourceDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAuditedResourceDescriptorResponse_FieldTerminalPathArrayOfValues struct {
	WatchAuditedResourceDescriptorResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAuditedResourceDescriptorResponse_FieldPathArrayOfValues = (*WatchAuditedResourceDescriptorResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAuditedResourceDescriptorResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAuditedResourceDescriptorResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptorChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAuditedResourceDescriptorResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*audited_resource_descriptor.AuditedResourceDescriptorChange, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptorChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAuditedResourceDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAuditedResourceDescriptorsRequest_FieldPathSelector
	Get(source *WatchAuditedResourceDescriptorsRequest) []interface{}
	GetSingle(source *WatchAuditedResourceDescriptorsRequest) (interface{}, bool)
	ClearValue(item *WatchAuditedResourceDescriptorsRequest)

	// Those methods build corresponding WatchAuditedResourceDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAuditedResourceDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAuditedResourceDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAuditedResourceDescriptorsRequest_FieldPathArrayItemValue
}

type WatchAuditedResourceDescriptorsRequest_FieldPathSelector int32

const (
	WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType         WatchAuditedResourceDescriptorsRequest_FieldPathSelector = 0
	WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize     WatchAuditedResourceDescriptorsRequest_FieldPathSelector = 1
	WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken    WatchAuditedResourceDescriptorsRequest_FieldPathSelector = 2
	WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy      WatchAuditedResourceDescriptorsRequest_FieldPathSelector = 3
	WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken  WatchAuditedResourceDescriptorsRequest_FieldPathSelector = 4
	WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter       WatchAuditedResourceDescriptorsRequest_FieldPathSelector = 5
	WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask    WatchAuditedResourceDescriptorsRequest_FieldPathSelector = 6
	WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView         WatchAuditedResourceDescriptorsRequest_FieldPathSelector = 7
	WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize WatchAuditedResourceDescriptorsRequest_FieldPathSelector = 8
)

func (s WatchAuditedResourceDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType:
		return "type"
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return "view"
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsRequest: %d", s))
	}
}

func BuildWatchAuditedResourceDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAuditedResourceDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAuditedResourceDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAuditedResourceDescriptorsRequest", fp)
}

func ParseWatchAuditedResourceDescriptorsRequest_FieldPath(rawField string) (WatchAuditedResourceDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAuditedResourceDescriptorsRequest_FieldPath(fp)
}

func MustParseWatchAuditedResourceDescriptorsRequest_FieldPath(rawField string) WatchAuditedResourceDescriptorsRequest_FieldPath {
	fp, err := ParseWatchAuditedResourceDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAuditedResourceDescriptorsRequest_FieldTerminalPath struct {
	selector WatchAuditedResourceDescriptorsRequest_FieldPathSelector
}

var _ WatchAuditedResourceDescriptorsRequest_FieldPath = (*WatchAuditedResourceDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) Selector() WatchAuditedResourceDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAuditedResourceDescriptorsRequest
func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) Get(source *WatchAuditedResourceDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAuditedResourceDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAuditedResourceDescriptorsRequest
func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) GetSingle(source *WatchAuditedResourceDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAuditedResourceDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return (*audited_resource_descriptor.PagerCursor)(nil)
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return (*audited_resource_descriptor.OrderBy)(nil)
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		return (*audited_resource_descriptor.Filter)(nil)
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)(nil)
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) ClearValue(item *WatchAuditedResourceDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAuditedResourceDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType ||
		fp.selector == WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView ||
		fp.selector == WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAuditedResourceDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.PagerCursor)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.OrderBy)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.Filter)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAuditedResourceDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.PagerCursor)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.OrderBy)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.Filter)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAuditedResourceDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAuditedResourceDescriptorsRequest_FieldPathValue allows storing values for WatchAuditedResourceDescriptorsRequest fields according to their type
type WatchAuditedResourceDescriptorsRequest_FieldPathValue interface {
	WatchAuditedResourceDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAuditedResourceDescriptorsRequest)
	CompareWith(*WatchAuditedResourceDescriptorsRequest) (cmp int, comparable bool)
}

func ParseWatchAuditedResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (WatchAuditedResourceDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseWatchAuditedResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAuditedResourceDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAuditedResourceDescriptorsRequest_FieldPathValue), nil
}

func MustParseWatchAuditedResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr string) WatchAuditedResourceDescriptorsRequest_FieldPathValue {
	fpv, err := ParseWatchAuditedResourceDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue struct {
	WatchAuditedResourceDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAuditedResourceDescriptorsRequest_FieldPathValue = (*WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAuditedResourceDescriptorsRequest' as interface{}
func (fpv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsPageTokenValue() (*audited_resource_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsOrderByValue() (*audited_resource_descriptor.OrderBy, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.OrderBy)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsFilterValue() (*audited_resource_descriptor.Filter, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.Filter)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchAuditedResourceDescriptorsRequest
func (fpv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue) SetTo(target **WatchAuditedResourceDescriptorsRequest) {
	if *target == nil {
		*target = new(WatchAuditedResourceDescriptorsRequest)
	}
	switch fpv.selector {
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*audited_resource_descriptor.PagerCursor)
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*audited_resource_descriptor.OrderBy)
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*audited_resource_descriptor.Filter)
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAuditedResourceDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'WatchAuditedResourceDescriptorsRequest'.
func (fpv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *WatchAuditedResourceDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAuditedResourceDescriptorsRequest))
}

// WatchAuditedResourceDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAuditedResourceDescriptorsRequest according to their type
// Present only for array (repeated) types.
type WatchAuditedResourceDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAuditedResourceDescriptorsRequest_FieldPath
	ContainsValue(*WatchAuditedResourceDescriptorsRequest) bool
}

// ParseWatchAuditedResourceDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAuditedResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAuditedResourceDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAuditedResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAuditedResourceDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAuditedResourceDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAuditedResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAuditedResourceDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAuditedResourceDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	WatchAuditedResourceDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAuditedResourceDescriptorsRequest_FieldPathArrayItemValue = (*WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAuditedResourceDescriptorsRequest as interface{}
func (fpaiv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAuditedResourceDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAuditedResourceDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAuditedResourceDescriptorsRequest'
func (fpaiv *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAuditedResourceDescriptorsRequest) bool {
	slice := fpaiv.WatchAuditedResourceDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAuditedResourceDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for WatchAuditedResourceDescriptorsRequest fields according to their type
type WatchAuditedResourceDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAuditedResourceDescriptorsRequest_FieldPath
}

func ParseWatchAuditedResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAuditedResourceDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAuditedResourceDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAuditedResourceDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAuditedResourceDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAuditedResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAuditedResourceDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAuditedResourceDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	WatchAuditedResourceDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAuditedResourceDescriptorsRequest_FieldPathArrayOfValues = (*WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.OrderBy) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.Filter) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*audited_resource_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*audited_resource_descriptor.OrderBy, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.OrderBy)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*audited_resource_descriptor.Filter, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.Filter)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAuditedResourceDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAuditedResourceDescriptorsResponse_FieldPathSelector
	Get(source *WatchAuditedResourceDescriptorsResponse) []interface{}
	GetSingle(source *WatchAuditedResourceDescriptorsResponse) (interface{}, bool)
	ClearValue(item *WatchAuditedResourceDescriptorsResponse)

	// Those methods build corresponding WatchAuditedResourceDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAuditedResourceDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAuditedResourceDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAuditedResourceDescriptorsResponse_FieldPathArrayItemValue
}

type WatchAuditedResourceDescriptorsResponse_FieldPathSelector int32

const (
	WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges WatchAuditedResourceDescriptorsResponse_FieldPathSelector = 0
	WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent                        WatchAuditedResourceDescriptorsResponse_FieldPathSelector = 1
	WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange                  WatchAuditedResourceDescriptorsResponse_FieldPathSelector = 2
	WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken                      WatchAuditedResourceDescriptorsResponse_FieldPathSelector = 3
	WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize                     WatchAuditedResourceDescriptorsResponse_FieldPathSelector = 4
	WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset                      WatchAuditedResourceDescriptorsResponse_FieldPathSelector = 5
	WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset                      WatchAuditedResourceDescriptorsResponse_FieldPathSelector = 6
)

func (s WatchAuditedResourceDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges:
		return "audited_resource_descriptor_changes"
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", s))
	}
}

func BuildWatchAuditedResourceDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAuditedResourceDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAuditedResourceDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "audited_resource_descriptor_changes", "auditedResourceDescriptorChanges", "audited-resource-descriptor-changes":
			return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchAuditedResourceDescriptorsResponse_FieldSubPath{selector: WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAuditedResourceDescriptorsResponse", fp)
}

func ParseWatchAuditedResourceDescriptorsResponse_FieldPath(rawField string) (WatchAuditedResourceDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAuditedResourceDescriptorsResponse_FieldPath(fp)
}

func MustParseWatchAuditedResourceDescriptorsResponse_FieldPath(rawField string) WatchAuditedResourceDescriptorsResponse_FieldPath {
	fp, err := ParseWatchAuditedResourceDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAuditedResourceDescriptorsResponse_FieldTerminalPath struct {
	selector WatchAuditedResourceDescriptorsResponse_FieldPathSelector
}

var _ WatchAuditedResourceDescriptorsResponse_FieldPath = (*WatchAuditedResourceDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) Selector() WatchAuditedResourceDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAuditedResourceDescriptorsResponse
func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) Get(source *WatchAuditedResourceDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges:
			for _, value := range source.GetAuditedResourceDescriptorChanges() {
				values = append(values, value)
			}
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAuditedResourceDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAuditedResourceDescriptorsResponse
func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) GetSingle(source *WatchAuditedResourceDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges:
		res := source.GetAuditedResourceDescriptorChanges()
		return res, res != nil
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAuditedResourceDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges:
		return ([]*audited_resource_descriptor.AuditedResourceDescriptorChange)(nil)
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchAuditedResourceDescriptorsResponse_PageTokenChange)(nil)
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) ClearValue(item *WatchAuditedResourceDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges:
			item.AuditedResourceDescriptorChanges = nil
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAuditedResourceDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges ||
		fp.selector == WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAuditedResourceDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*audited_resource_descriptor.AuditedResourceDescriptorChange)}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange)}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAuditedResourceDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*audited_resource_descriptor.AuditedResourceDescriptorChange)}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*WatchAuditedResourceDescriptorsResponse_PageTokenChange)}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAuditedResourceDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges:
		return &WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue{WatchAuditedResourceDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.AuditedResourceDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchAuditedResourceDescriptorsResponse_FieldSubPath struct {
	selector WatchAuditedResourceDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchAuditedResourceDescriptorsResponse_FieldPath = (*WatchAuditedResourceDescriptorsResponse_FieldSubPath)(nil)

func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) Selector() WatchAuditedResourceDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchAuditedResourceDescriptorsResponse
func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) Get(source *WatchAuditedResourceDescriptorsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchAuditedResourceDescriptorsResponse))
}

// GetSingle returns value of selected field from source WatchAuditedResourceDescriptorsResponse
func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) GetSingle(source *WatchAuditedResourceDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchAuditedResourceDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) ClearValue(item *WatchAuditedResourceDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchAuditedResourceDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) WatchAuditedResourceDescriptorsResponse_FieldPathValue {
	return &WatchAuditedResourceDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchAuditedResourceDescriptorsResponse_FieldPathArrayOfValues {
	return &WatchAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchAuditedResourceDescriptorsResponse_FieldPathArrayItemValue {
	return &WatchAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchAuditedResourceDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchAuditedResourceDescriptorsResponse_FieldPathValue allows storing values for WatchAuditedResourceDescriptorsResponse fields according to their type
type WatchAuditedResourceDescriptorsResponse_FieldPathValue interface {
	WatchAuditedResourceDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAuditedResourceDescriptorsResponse)
	CompareWith(*WatchAuditedResourceDescriptorsResponse) (cmp int, comparable bool)
}

func ParseWatchAuditedResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (WatchAuditedResourceDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseWatchAuditedResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAuditedResourceDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAuditedResourceDescriptorsResponse_FieldPathValue), nil
}

func MustParseWatchAuditedResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr string) WatchAuditedResourceDescriptorsResponse_FieldPathValue {
	fpv, err := ParseWatchAuditedResourceDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue struct {
	WatchAuditedResourceDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAuditedResourceDescriptorsResponse_FieldPathValue = (*WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAuditedResourceDescriptorsResponse' as interface{}
func (fpv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue) AsAuditedResourceDescriptorChangesValue() ([]*audited_resource_descriptor.AuditedResourceDescriptorChange, bool) {
	res, ok := fpv.value.([]*audited_resource_descriptor.AuditedResourceDescriptorChange)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchAuditedResourceDescriptorsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchAuditedResourceDescriptorsResponse
func (fpv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue) SetTo(target **WatchAuditedResourceDescriptorsResponse) {
	if *target == nil {
		*target = new(WatchAuditedResourceDescriptorsResponse)
	}
	switch fpv.selector {
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges:
		(*target).AuditedResourceDescriptorChanges = fpv.value.([]*audited_resource_descriptor.AuditedResourceDescriptorChange)
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange)
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAuditedResourceDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'WatchAuditedResourceDescriptorsResponse'.
func (fpv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *WatchAuditedResourceDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges:
		return 0, false
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAuditedResourceDescriptorsResponse))
}

type WatchAuditedResourceDescriptorsResponse_FieldSubPathValue struct {
	WatchAuditedResourceDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchAuditedResourceDescriptorsResponse_FieldPathValue = (*WatchAuditedResourceDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchAuditedResourceDescriptorsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchAuditedResourceDescriptorsResponse_FieldSubPathValue) SetTo(target **WatchAuditedResourceDescriptorsResponse) {
	if *target == nil {
		*target = new(WatchAuditedResourceDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAuditedResourceDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAuditedResourceDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchAuditedResourceDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchAuditedResourceDescriptorsResponse_FieldSubPathValue) CompareWith(source *WatchAuditedResourceDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAuditedResourceDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchAuditedResourceDescriptorsResponse))
}

// WatchAuditedResourceDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAuditedResourceDescriptorsResponse according to their type
// Present only for array (repeated) types.
type WatchAuditedResourceDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAuditedResourceDescriptorsResponse_FieldPath
	ContainsValue(*WatchAuditedResourceDescriptorsResponse) bool
}

// ParseWatchAuditedResourceDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAuditedResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAuditedResourceDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAuditedResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAuditedResourceDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAuditedResourceDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAuditedResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAuditedResourceDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAuditedResourceDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	WatchAuditedResourceDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAuditedResourceDescriptorsResponse_FieldPathArrayItemValue = (*WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAuditedResourceDescriptorsResponse as interface{}
func (fpaiv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) AsAuditedResourceDescriptorChangesItemValue() (*audited_resource_descriptor.AuditedResourceDescriptorChange, bool) {
	res, ok := fpaiv.value.(*audited_resource_descriptor.AuditedResourceDescriptorChange)
	return res, ok
}

func (fpaiv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAuditedResourceDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAuditedResourceDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAuditedResourceDescriptorsResponse'
func (fpaiv *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAuditedResourceDescriptorsResponse) bool {
	slice := fpaiv.WatchAuditedResourceDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue struct {
	WatchAuditedResourceDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAuditedResourceDescriptorsResponse'
func (fpaivs *WatchAuditedResourceDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchAuditedResourceDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// WatchAuditedResourceDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for WatchAuditedResourceDescriptorsResponse fields according to their type
type WatchAuditedResourceDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAuditedResourceDescriptorsResponse_FieldPath
}

func ParseWatchAuditedResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAuditedResourceDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAuditedResourceDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAuditedResourceDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAuditedResourceDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAuditedResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAuditedResourceDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAuditedResourceDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	WatchAuditedResourceDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAuditedResourceDescriptorsResponse_FieldPathArrayOfValues = (*WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorAuditedResourceDescriptorChanges:
		for _, v := range fpaov.values.([][]*audited_resource_descriptor.AuditedResourceDescriptorChange) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchAuditedResourceDescriptorsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsAuditedResourceDescriptorChangesArrayOfValues() ([][]*audited_resource_descriptor.AuditedResourceDescriptorChange, bool) {
	res, ok := fpaov.values.([][]*audited_resource_descriptor.AuditedResourceDescriptorChange)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchAuditedResourceDescriptorsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchAuditedResourceDescriptorsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues struct {
	WatchAuditedResourceDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchAuditedResourceDescriptorsResponse_FieldPathArrayOfValues = (*WatchAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchAuditedResourceDescriptorsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchAuditedResourceDescriptorsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchAuditedResourceDescriptorsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchAuditedResourceDescriptorsResponse_PageTokenChange)

	// Those methods build corresponding WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelector = 0
	WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAuditedResourceDescriptorsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAuditedResourceDescriptorsResponse_PageTokenChange", fp)
}

func ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath(rawField string) (WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath(rawField string) WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelector
}

var _ WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath = (*WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) Selector() WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAuditedResourceDescriptorsResponse_PageTokenChange
func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchAuditedResourceDescriptorsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchAuditedResourceDescriptorsResponse_PageTokenChange
func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchAuditedResourceDescriptorsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*audited_resource_descriptor.PagerCursor)(nil)
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*audited_resource_descriptor.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchAuditedResourceDescriptorsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue{WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.PagerCursor)}
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue{WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.PagerCursor)}
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue interface {
	WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAuditedResourceDescriptorsResponse_PageTokenChange)
	CompareWith(*WatchAuditedResourceDescriptorsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathValue = (*WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*audited_resource_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpv *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*audited_resource_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchAuditedResourceDescriptorsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchAuditedResourceDescriptorsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*audited_resource_descriptor.PagerCursor)
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*audited_resource_descriptor.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchAuditedResourceDescriptorsResponse_PageTokenChange'.
func (fpv *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchAuditedResourceDescriptorsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAuditedResourceDescriptorsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange))
}

// WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchAuditedResourceDescriptorsResponse_PageTokenChange) bool
}

// ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAuditedResourceDescriptorsResponse_PageTokenChange as interface{}
func (fpaiv *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAuditedResourceDescriptorsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAuditedResourceDescriptorsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath
}

func ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*audited_resource_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *WatchAuditedResourceDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*audited_resource_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateAuditedResourceDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateAuditedResourceDescriptorRequest_FieldPathSelector
	Get(source *CreateAuditedResourceDescriptorRequest) []interface{}
	GetSingle(source *CreateAuditedResourceDescriptorRequest) (interface{}, bool)
	ClearValue(item *CreateAuditedResourceDescriptorRequest)

	// Those methods build corresponding CreateAuditedResourceDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateAuditedResourceDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateAuditedResourceDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateAuditedResourceDescriptorRequest_FieldPathArrayItemValue
}

type CreateAuditedResourceDescriptorRequest_FieldPathSelector int32

const (
	CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor CreateAuditedResourceDescriptorRequest_FieldPathSelector = 0
)

func (s CreateAuditedResourceDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		return "audited_resource_descriptor"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", s))
	}
}

func BuildCreateAuditedResourceDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateAuditedResourceDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateAuditedResourceDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "audited_resource_descriptor", "auditedResourceDescriptor", "audited-resource-descriptor":
			return &CreateAuditedResourceDescriptorRequest_FieldTerminalPath{selector: CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor}, nil
		}
	} else {
		switch fp[0] {
		case "audited_resource_descriptor", "auditedResourceDescriptor", "audited-resource-descriptor":
			if subpath, err := audited_resource_descriptor.BuildAuditedResourceDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateAuditedResourceDescriptorRequest_FieldSubPath{selector: CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateAuditedResourceDescriptorRequest", fp)
}

func ParseCreateAuditedResourceDescriptorRequest_FieldPath(rawField string) (CreateAuditedResourceDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateAuditedResourceDescriptorRequest_FieldPath(fp)
}

func MustParseCreateAuditedResourceDescriptorRequest_FieldPath(rawField string) CreateAuditedResourceDescriptorRequest_FieldPath {
	fp, err := ParseCreateAuditedResourceDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateAuditedResourceDescriptorRequest_FieldTerminalPath struct {
	selector CreateAuditedResourceDescriptorRequest_FieldPathSelector
}

var _ CreateAuditedResourceDescriptorRequest_FieldPath = (*CreateAuditedResourceDescriptorRequest_FieldTerminalPath)(nil)

func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) Selector() CreateAuditedResourceDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateAuditedResourceDescriptorRequest
func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) Get(source *CreateAuditedResourceDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
			if source.AuditedResourceDescriptor != nil {
				values = append(values, source.AuditedResourceDescriptor)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateAuditedResourceDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source CreateAuditedResourceDescriptorRequest
func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) GetSingle(source *CreateAuditedResourceDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		res := source.GetAuditedResourceDescriptor()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateAuditedResourceDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		return (*audited_resource_descriptor.AuditedResourceDescriptor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) ClearValue(item *CreateAuditedResourceDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
			item.AuditedResourceDescriptor = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateAuditedResourceDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) CreateAuditedResourceDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		return &CreateAuditedResourceDescriptorRequest_FieldTerminalPathValue{CreateAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.AuditedResourceDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateAuditedResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &CreateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues{CreateAuditedResourceDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		return &CreateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues{CreateAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.AuditedResourceDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateAuditedResourceDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateAuditedResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateAuditedResourceDescriptorRequest_FieldSubPath struct {
	selector CreateAuditedResourceDescriptorRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateAuditedResourceDescriptorRequest_FieldPath = (*CreateAuditedResourceDescriptorRequest_FieldSubPath)(nil)

func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) Selector() CreateAuditedResourceDescriptorRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) AsAuditedResourceDescriptorSubPath() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateAuditedResourceDescriptorRequest
func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) Get(source *CreateAuditedResourceDescriptorRequest) (values []interface{}) {
	if asAuditedResourceDescriptorFieldPath, ok := fps.AsAuditedResourceDescriptorSubPath(); ok {
		values = append(values, asAuditedResourceDescriptorFieldPath.Get(source.GetAuditedResourceDescriptor())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateAuditedResourceDescriptorRequest))
}

// GetSingle returns value of selected field from source CreateAuditedResourceDescriptorRequest
func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) GetSingle(source *CreateAuditedResourceDescriptorRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		if source.GetAuditedResourceDescriptor() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAuditedResourceDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fps.selector))
	}
}

func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateAuditedResourceDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) ClearValue(item *CreateAuditedResourceDescriptorRequest) {
	if item != nil {
		switch fps.selector {
		case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
			fps.subPath.ClearValueRaw(item.AuditedResourceDescriptor)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateAuditedResourceDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) WithIValue(value interface{}) CreateAuditedResourceDescriptorRequest_FieldPathValue {
	return &CreateAuditedResourceDescriptorRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateAuditedResourceDescriptorRequest_FieldPathArrayOfValues {
	return &CreateAuditedResourceDescriptorRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateAuditedResourceDescriptorRequest_FieldPathArrayItemValue {
	return &CreateAuditedResourceDescriptorRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateAuditedResourceDescriptorRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateAuditedResourceDescriptorRequest_FieldPathValue allows storing values for CreateAuditedResourceDescriptorRequest fields according to their type
type CreateAuditedResourceDescriptorRequest_FieldPathValue interface {
	CreateAuditedResourceDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateAuditedResourceDescriptorRequest)
	CompareWith(*CreateAuditedResourceDescriptorRequest) (cmp int, comparable bool)
}

func ParseCreateAuditedResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) (CreateAuditedResourceDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseCreateAuditedResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAuditedResourceDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateAuditedResourceDescriptorRequest_FieldPathValue), nil
}

func MustParseCreateAuditedResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) CreateAuditedResourceDescriptorRequest_FieldPathValue {
	fpv, err := ParseCreateAuditedResourceDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateAuditedResourceDescriptorRequest_FieldTerminalPathValue struct {
	CreateAuditedResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAuditedResourceDescriptorRequest_FieldPathValue = (*CreateAuditedResourceDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateAuditedResourceDescriptorRequest' as interface{}
func (fpv *CreateAuditedResourceDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateAuditedResourceDescriptorRequest_FieldTerminalPathValue) AsAuditedResourceDescriptorValue() (*audited_resource_descriptor.AuditedResourceDescriptor, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor)
	return res, ok
}

// SetTo stores value for selected field for object CreateAuditedResourceDescriptorRequest
func (fpv *CreateAuditedResourceDescriptorRequest_FieldTerminalPathValue) SetTo(target **CreateAuditedResourceDescriptorRequest) {
	if *target == nil {
		*target = new(CreateAuditedResourceDescriptorRequest)
	}
	switch fpv.selector {
	case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		(*target).AuditedResourceDescriptor = fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAuditedResourceDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAuditedResourceDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateAuditedResourceDescriptorRequest_FieldTerminalPathValue' with the value under path in 'CreateAuditedResourceDescriptorRequest'.
func (fpv *CreateAuditedResourceDescriptorRequest_FieldTerminalPathValue) CompareWith(source *CreateAuditedResourceDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAuditedResourceDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateAuditedResourceDescriptorRequest))
}

type CreateAuditedResourceDescriptorRequest_FieldSubPathValue struct {
	CreateAuditedResourceDescriptorRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateAuditedResourceDescriptorRequest_FieldPathValue = (*CreateAuditedResourceDescriptorRequest_FieldSubPathValue)(nil)

func (fpvs *CreateAuditedResourceDescriptorRequest_FieldSubPathValue) AsAuditedResourceDescriptorPathValue() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *CreateAuditedResourceDescriptorRequest_FieldSubPathValue) SetTo(target **CreateAuditedResourceDescriptorRequest) {
	if *target == nil {
		*target = new(CreateAuditedResourceDescriptorRequest)
	}
	switch fpvs.Selector() {
	case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		fpvs.subPathValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue).SetTo(&(*target).AuditedResourceDescriptor)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAuditedResourceDescriptorRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAuditedResourceDescriptorRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateAuditedResourceDescriptorRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateAuditedResourceDescriptorRequest_FieldSubPathValue) CompareWith(source *CreateAuditedResourceDescriptorRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		return fpvs.subPathValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue).CompareWith(source.GetAuditedResourceDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAuditedResourceDescriptorRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateAuditedResourceDescriptorRequest))
}

// CreateAuditedResourceDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateAuditedResourceDescriptorRequest according to their type
// Present only for array (repeated) types.
type CreateAuditedResourceDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateAuditedResourceDescriptorRequest_FieldPath
	ContainsValue(*CreateAuditedResourceDescriptorRequest) bool
}

// ParseCreateAuditedResourceDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateAuditedResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateAuditedResourceDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateAuditedResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAuditedResourceDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateAuditedResourceDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateAuditedResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateAuditedResourceDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateAuditedResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	CreateAuditedResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAuditedResourceDescriptorRequest_FieldPathArrayItemValue = (*CreateAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateAuditedResourceDescriptorRequest as interface{}
func (fpaiv *CreateAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateAuditedResourceDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateAuditedResourceDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAuditedResourceDescriptorRequest'
func (fpaiv *CreateAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateAuditedResourceDescriptorRequest) bool {
	slice := fpaiv.CreateAuditedResourceDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateAuditedResourceDescriptorRequest_FieldSubPathArrayItemValue struct {
	CreateAuditedResourceDescriptorRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateAuditedResourceDescriptorRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateAuditedResourceDescriptorRequest_FieldSubPathArrayItemValue) AsAuditedResourceDescriptorPathItemValue() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAuditedResourceDescriptorRequest'
func (fpaivs *CreateAuditedResourceDescriptorRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateAuditedResourceDescriptorRequest) bool {
	switch fpaivs.Selector() {
	case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		return fpaivs.subPathItemValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetAuditedResourceDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAuditedResourceDescriptorRequest: %d", fpaivs.Selector()))
	}
}

// CreateAuditedResourceDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for CreateAuditedResourceDescriptorRequest fields according to their type
type CreateAuditedResourceDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateAuditedResourceDescriptorRequest_FieldPath
}

func ParseCreateAuditedResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateAuditedResourceDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateAuditedResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAuditedResourceDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateAuditedResourceDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateAuditedResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateAuditedResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateAuditedResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	CreateAuditedResourceDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ CreateAuditedResourceDescriptorRequest_FieldPathArrayOfValues = (*CreateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsAuditedResourceDescriptorArrayOfValues() ([]*audited_resource_descriptor.AuditedResourceDescriptor, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor)
	return res, ok
}

type CreateAuditedResourceDescriptorRequest_FieldSubPathArrayOfValues struct {
	CreateAuditedResourceDescriptorRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateAuditedResourceDescriptorRequest_FieldPathArrayOfValues = (*CreateAuditedResourceDescriptorRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateAuditedResourceDescriptorRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateAuditedResourceDescriptorRequest_FieldSubPathArrayOfValues) AsAuditedResourceDescriptorPathArrayOfValues() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAuditedResourceDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAuditedResourceDescriptorRequest_FieldPathSelector
	Get(source *UpdateAuditedResourceDescriptorRequest) []interface{}
	GetSingle(source *UpdateAuditedResourceDescriptorRequest) (interface{}, bool)
	ClearValue(item *UpdateAuditedResourceDescriptorRequest)

	// Those methods build corresponding UpdateAuditedResourceDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAuditedResourceDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAuditedResourceDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAuditedResourceDescriptorRequest_FieldPathArrayItemValue
}

type UpdateAuditedResourceDescriptorRequest_FieldPathSelector int32

const (
	UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor UpdateAuditedResourceDescriptorRequest_FieldPathSelector = 0
	UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask                UpdateAuditedResourceDescriptorRequest_FieldPathSelector = 1
	UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas                       UpdateAuditedResourceDescriptorRequest_FieldPathSelector = 2
)

func (s UpdateAuditedResourceDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		return "audited_resource_descriptor"
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", s))
	}
}

func BuildUpdateAuditedResourceDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateAuditedResourceDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAuditedResourceDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "audited_resource_descriptor", "auditedResourceDescriptor", "audited-resource-descriptor":
			return &UpdateAuditedResourceDescriptorRequest_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateAuditedResourceDescriptorRequest_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateAuditedResourceDescriptorRequest_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "audited_resource_descriptor", "auditedResourceDescriptor", "audited-resource-descriptor":
			if subpath, err := audited_resource_descriptor.BuildAuditedResourceDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAuditedResourceDescriptorRequest_FieldSubPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateAuditedResourceDescriptorRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAuditedResourceDescriptorRequest_FieldSubPath{selector: UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAuditedResourceDescriptorRequest", fp)
}

func ParseUpdateAuditedResourceDescriptorRequest_FieldPath(rawField string) (UpdateAuditedResourceDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAuditedResourceDescriptorRequest_FieldPath(fp)
}

func MustParseUpdateAuditedResourceDescriptorRequest_FieldPath(rawField string) UpdateAuditedResourceDescriptorRequest_FieldPath {
	fp, err := ParseUpdateAuditedResourceDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAuditedResourceDescriptorRequest_FieldTerminalPath struct {
	selector UpdateAuditedResourceDescriptorRequest_FieldPathSelector
}

var _ UpdateAuditedResourceDescriptorRequest_FieldPath = (*UpdateAuditedResourceDescriptorRequest_FieldTerminalPath)(nil)

func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) Selector() UpdateAuditedResourceDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAuditedResourceDescriptorRequest
func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) Get(source *UpdateAuditedResourceDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
			if source.AuditedResourceDescriptor != nil {
				values = append(values, source.AuditedResourceDescriptor)
			}
		case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAuditedResourceDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateAuditedResourceDescriptorRequest
func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) GetSingle(source *UpdateAuditedResourceDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		res := source.GetAuditedResourceDescriptor()
		return res, res != nil
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAuditedResourceDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		return (*audited_resource_descriptor.AuditedResourceDescriptor)(nil)
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		return (*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)(nil)
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
		return (*UpdateAuditedResourceDescriptorRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) ClearValue(item *UpdateAuditedResourceDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
			item.AuditedResourceDescriptor = nil
		case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAuditedResourceDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateAuditedResourceDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		return &UpdateAuditedResourceDescriptorRequest_FieldTerminalPathValue{UpdateAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.AuditedResourceDescriptor)}
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		return &UpdateAuditedResourceDescriptorRequest_FieldTerminalPathValue{UpdateAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)}
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
		return &UpdateAuditedResourceDescriptorRequest_FieldTerminalPathValue{UpdateAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, value: value.(*UpdateAuditedResourceDescriptorRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAuditedResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateAuditedResourceDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		return &UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.AuditedResourceDescriptor)}
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		return &UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)}
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
		return &UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateAuditedResourceDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*UpdateAuditedResourceDescriptorRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAuditedResourceDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateAuditedResourceDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAuditedResourceDescriptorRequest_FieldSubPath struct {
	selector UpdateAuditedResourceDescriptorRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAuditedResourceDescriptorRequest_FieldPath = (*UpdateAuditedResourceDescriptorRequest_FieldSubPath)(nil)

func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) Selector() UpdateAuditedResourceDescriptorRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) AsAuditedResourceDescriptorSubPath() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath)
	return res, ok
}
func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) AsCasSubPath() (UpdateAuditedResourceDescriptorRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateAuditedResourceDescriptorRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAuditedResourceDescriptorRequest
func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) Get(source *UpdateAuditedResourceDescriptorRequest) (values []interface{}) {
	if asAuditedResourceDescriptorFieldPath, ok := fps.AsAuditedResourceDescriptorSubPath(); ok {
		values = append(values, asAuditedResourceDescriptorFieldPath.Get(source.GetAuditedResourceDescriptor())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAuditedResourceDescriptorRequest))
}

// GetSingle returns value of selected field from source UpdateAuditedResourceDescriptorRequest
func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) GetSingle(source *UpdateAuditedResourceDescriptorRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		if source.GetAuditedResourceDescriptor() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAuditedResourceDescriptor())
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fps.selector))
	}
}

func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAuditedResourceDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) ClearValue(item *UpdateAuditedResourceDescriptorRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
			fps.subPath.ClearValueRaw(item.AuditedResourceDescriptor)
		case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAuditedResourceDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) WithIValue(value interface{}) UpdateAuditedResourceDescriptorRequest_FieldPathValue {
	return &UpdateAuditedResourceDescriptorRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAuditedResourceDescriptorRequest_FieldPathArrayOfValues {
	return &UpdateAuditedResourceDescriptorRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAuditedResourceDescriptorRequest_FieldPathArrayItemValue {
	return &UpdateAuditedResourceDescriptorRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAuditedResourceDescriptorRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAuditedResourceDescriptorRequest_FieldPathValue allows storing values for UpdateAuditedResourceDescriptorRequest fields according to their type
type UpdateAuditedResourceDescriptorRequest_FieldPathValue interface {
	UpdateAuditedResourceDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAuditedResourceDescriptorRequest)
	CompareWith(*UpdateAuditedResourceDescriptorRequest) (cmp int, comparable bool)
}

func ParseUpdateAuditedResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) (UpdateAuditedResourceDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseUpdateAuditedResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAuditedResourceDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAuditedResourceDescriptorRequest_FieldPathValue), nil
}

func MustParseUpdateAuditedResourceDescriptorRequest_FieldPathValue(pathStr, valueStr string) UpdateAuditedResourceDescriptorRequest_FieldPathValue {
	fpv, err := ParseUpdateAuditedResourceDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAuditedResourceDescriptorRequest_FieldTerminalPathValue struct {
	UpdateAuditedResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAuditedResourceDescriptorRequest_FieldPathValue = (*UpdateAuditedResourceDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateAuditedResourceDescriptorRequest' as interface{}
func (fpv *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathValue) AsAuditedResourceDescriptorValue() (*audited_resource_descriptor.AuditedResourceDescriptor, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor)
	return res, ok
}
func (fpv *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return res, ok
}
func (fpv *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathValue) AsCasValue() (*UpdateAuditedResourceDescriptorRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateAuditedResourceDescriptorRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateAuditedResourceDescriptorRequest
func (fpv *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathValue) SetTo(target **UpdateAuditedResourceDescriptorRequest) {
	if *target == nil {
		*target = new(UpdateAuditedResourceDescriptorRequest)
	}
	switch fpv.selector {
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		(*target).AuditedResourceDescriptor = fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor)
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateAuditedResourceDescriptorRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAuditedResourceDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAuditedResourceDescriptorRequest_FieldTerminalPathValue' with the value under path in 'UpdateAuditedResourceDescriptorRequest'.
func (fpv *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathValue) CompareWith(source *UpdateAuditedResourceDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		return 0, false
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAuditedResourceDescriptorRequest))
}

type UpdateAuditedResourceDescriptorRequest_FieldSubPathValue struct {
	UpdateAuditedResourceDescriptorRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAuditedResourceDescriptorRequest_FieldPathValue = (*UpdateAuditedResourceDescriptorRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateAuditedResourceDescriptorRequest_FieldSubPathValue) AsAuditedResourceDescriptorPathValue() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateAuditedResourceDescriptorRequest_FieldSubPathValue) AsCasPathValue() (UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAuditedResourceDescriptorRequest_FieldSubPathValue) SetTo(target **UpdateAuditedResourceDescriptorRequest) {
	if *target == nil {
		*target = new(UpdateAuditedResourceDescriptorRequest)
	}
	switch fpvs.Selector() {
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		fpvs.subPathValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue).SetTo(&(*target).AuditedResourceDescriptor)
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAuditedResourceDescriptorRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAuditedResourceDescriptorRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAuditedResourceDescriptorRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAuditedResourceDescriptorRequest_FieldSubPathValue) CompareWith(source *UpdateAuditedResourceDescriptorRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		return fpvs.subPathValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue).CompareWith(source.GetAuditedResourceDescriptor())
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAuditedResourceDescriptorRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAuditedResourceDescriptorRequest))
}

// UpdateAuditedResourceDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateAuditedResourceDescriptorRequest according to their type
// Present only for array (repeated) types.
type UpdateAuditedResourceDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAuditedResourceDescriptorRequest_FieldPath
	ContainsValue(*UpdateAuditedResourceDescriptorRequest) bool
}

// ParseUpdateAuditedResourceDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAuditedResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAuditedResourceDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAuditedResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAuditedResourceDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAuditedResourceDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateAuditedResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAuditedResourceDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAuditedResourceDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	UpdateAuditedResourceDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAuditedResourceDescriptorRequest_FieldPathArrayItemValue = (*UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAuditedResourceDescriptorRequest as interface{}
func (fpaiv *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAuditedResourceDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAuditedResourceDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAuditedResourceDescriptorRequest'
func (fpaiv *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAuditedResourceDescriptorRequest) bool {
	slice := fpaiv.UpdateAuditedResourceDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAuditedResourceDescriptorRequest_FieldSubPathArrayItemValue struct {
	UpdateAuditedResourceDescriptorRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAuditedResourceDescriptorRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAuditedResourceDescriptorRequest_FieldSubPathArrayItemValue) AsAuditedResourceDescriptorPathItemValue() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateAuditedResourceDescriptorRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAuditedResourceDescriptorRequest'
func (fpaivs *UpdateAuditedResourceDescriptorRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAuditedResourceDescriptorRequest) bool {
	switch fpaivs.Selector() {
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		return fpaivs.subPathItemValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetAuditedResourceDescriptor())
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest: %d", fpaivs.Selector()))
	}
}

// UpdateAuditedResourceDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for UpdateAuditedResourceDescriptorRequest fields according to their type
type UpdateAuditedResourceDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAuditedResourceDescriptorRequest_FieldPath
}

func ParseUpdateAuditedResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAuditedResourceDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAuditedResourceDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAuditedResourceDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAuditedResourceDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateAuditedResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAuditedResourceDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAuditedResourceDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	UpdateAuditedResourceDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateAuditedResourceDescriptorRequest_FieldPathArrayOfValues = (*UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorAuditedResourceDescriptor:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor) {
			values = append(values, v)
		}
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
			values = append(values, v)
		}
	case UpdateAuditedResourceDescriptorRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateAuditedResourceDescriptorRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsAuditedResourceDescriptorArrayOfValues() ([]*audited_resource_descriptor.AuditedResourceDescriptor, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor)
	return res, ok
}
func (fpaov *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return res, ok
}
func (fpaov *UpdateAuditedResourceDescriptorRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateAuditedResourceDescriptorRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateAuditedResourceDescriptorRequest_CAS)
	return res, ok
}

type UpdateAuditedResourceDescriptorRequest_FieldSubPathArrayOfValues struct {
	UpdateAuditedResourceDescriptorRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAuditedResourceDescriptorRequest_FieldPathArrayOfValues = (*UpdateAuditedResourceDescriptorRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAuditedResourceDescriptorRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAuditedResourceDescriptorRequest_FieldSubPathArrayOfValues) AsAuditedResourceDescriptorPathArrayOfValues() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateAuditedResourceDescriptorRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAuditedResourceDescriptorRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelector
	Get(source *UpdateAuditedResourceDescriptorRequest_CAS) []interface{}
	GetSingle(source *UpdateAuditedResourceDescriptorRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateAuditedResourceDescriptorRequest_CAS)

	// Those methods build corresponding UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue
}

type UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelector int32

const (
	UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelector = 0
	UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask        UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelector = 1
)

func (s UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", s))
	}
}

func BuildUpdateAuditedResourceDescriptorRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateAuditedResourceDescriptorRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAuditedResourceDescriptorRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath{selector: UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := audited_resource_descriptor.BuildAuditedResourceDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath{selector: UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAuditedResourceDescriptorRequest_CAS", fp)
}

func ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPath(rawField string) (UpdateAuditedResourceDescriptorRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAuditedResourceDescriptorRequestCAS_FieldPath(fp)
}

func MustParseUpdateAuditedResourceDescriptorRequestCAS_FieldPath(rawField string) UpdateAuditedResourceDescriptorRequestCAS_FieldPath {
	fp, err := ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath struct {
	selector UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelector
}

var _ UpdateAuditedResourceDescriptorRequestCAS_FieldPath = (*UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) Selector() UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAuditedResourceDescriptorRequest_CAS
func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) Get(source *UpdateAuditedResourceDescriptorRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAuditedResourceDescriptorRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateAuditedResourceDescriptorRequest_CAS
func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) GetSingle(source *UpdateAuditedResourceDescriptorRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAuditedResourceDescriptorRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return (*audited_resource_descriptor.AuditedResourceDescriptor)(nil)
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return (*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) ClearValue(item *UpdateAuditedResourceDescriptorRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAuditedResourceDescriptorRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathValue{UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.AuditedResourceDescriptor)}
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathValue{UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath: *fp, value: value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.AuditedResourceDescriptor)}
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath: *fp, values: values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath struct {
	selector UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAuditedResourceDescriptorRequestCAS_FieldPath = (*UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath)(nil)

func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) Selector() UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) AsConditionalStateSubPath() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAuditedResourceDescriptorRequest_CAS
func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) Get(source *UpdateAuditedResourceDescriptorRequest_CAS) (values []interface{}) {
	if asAuditedResourceDescriptorFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asAuditedResourceDescriptorFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAuditedResourceDescriptorRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateAuditedResourceDescriptorRequest_CAS
func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) GetSingle(source *UpdateAuditedResourceDescriptorRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAuditedResourceDescriptorRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) ClearValue(item *UpdateAuditedResourceDescriptorRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAuditedResourceDescriptorRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue {
	return &UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues {
	return &UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue {
	return &UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue interface {
	UpdateAuditedResourceDescriptorRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAuditedResourceDescriptorRequest_CAS)
	CompareWith(*UpdateAuditedResourceDescriptorRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue), nil
}

func MustParseUpdateAuditedResourceDescriptorRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathValue struct {
	UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue = (*UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*audited_resource_descriptor.AuditedResourceDescriptor, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor)
	return res, ok
}
func (fpv *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateAuditedResourceDescriptorRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAuditedResourceDescriptorRequest_CAS)
	}
	switch fpv.selector {
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor)
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAuditedResourceDescriptorRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateAuditedResourceDescriptorRequest_CAS'.
func (fpv *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateAuditedResourceDescriptorRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAuditedResourceDescriptorRequest_CAS))
}

type UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathValue struct {
	UpdateAuditedResourceDescriptorRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAuditedResourceDescriptorRequestCAS_FieldPathValue = (*UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathValue) SetTo(target **UpdateAuditedResourceDescriptorRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAuditedResourceDescriptorRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAuditedResourceDescriptorRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathValue) CompareWith(source *UpdateAuditedResourceDescriptorRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAuditedResourceDescriptorRequest_CAS))
}

// UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAuditedResourceDescriptorRequestCAS_FieldPath
	ContainsValue(*UpdateAuditedResourceDescriptorRequest_CAS) bool
}

// ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayItemValue = (*UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAuditedResourceDescriptorRequest_CAS as interface{}
func (fpaiv *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAuditedResourceDescriptorRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAuditedResourceDescriptorRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAuditedResourceDescriptorRequest_CAS) bool {
	slice := fpaiv.UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateAuditedResourceDescriptorRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAuditedResourceDescriptorRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAuditedResourceDescriptorRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAuditedResourceDescriptorRequestCAS_FieldPath
}

func ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues = (*UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor) {
			values = append(values, v)
		}
	case UpdateAuditedResourceDescriptorRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*audited_resource_descriptor.AuditedResourceDescriptor, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor)
	return res, ok
}
func (fpaov *UpdateAuditedResourceDescriptorRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)
	return res, ok
}

type UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateAuditedResourceDescriptorRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAuditedResourceDescriptorRequestCAS_FieldPathArrayOfValues = (*UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAuditedResourceDescriptorRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(audited_resource_descriptor.AuditedResourceDescriptor_FieldPathArrayOfValues)
	return res, ok
}
