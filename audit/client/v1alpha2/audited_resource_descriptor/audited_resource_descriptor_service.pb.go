// Code generated by protoc-gen-goten-go
// File: edgelq/audit/proto/v1alpha2/audited_resource_descriptor_service.proto
// DO NOT EDIT!!!

package audited_resource_descriptor_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	audited_resource_descriptor "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha2/audited_resource_descriptor"
	view "github.com/cloudwan/goten-sdk/types/view"
	watch_type "github.com/cloudwan/goten-sdk/types/watch_type"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &audited_resource_descriptor.AuditedResourceDescriptor{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message of the GetAuditedResourceDescriptor method.
type GetAuditedResourceDescriptorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.audit.v1alpha2.AuditedResourceDescriptor
	Name *audited_resource_descriptor.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask `protobuf:"bytes,3,opt,customtype=AuditedResourceDescriptor_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *GetAuditedResourceDescriptorRequest) Reset() {
	*m = GetAuditedResourceDescriptorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetAuditedResourceDescriptorRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetAuditedResourceDescriptorRequest) ProtoMessage() {}

func (m *GetAuditedResourceDescriptorRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetAuditedResourceDescriptorRequest) GotenMessage() {}

// Deprecated, Use GetAuditedResourceDescriptorRequest.ProtoReflect.Descriptor instead.
func (*GetAuditedResourceDescriptorRequest) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetAuditedResourceDescriptorRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetAuditedResourceDescriptorRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetAuditedResourceDescriptorRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetAuditedResourceDescriptorRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetAuditedResourceDescriptorRequest) GetName() *audited_resource_descriptor.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetAuditedResourceDescriptorRequest) GetFieldMask() *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetAuditedResourceDescriptorRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetAuditedResourceDescriptorRequest) SetName(fv *audited_resource_descriptor.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetAuditedResourceDescriptorRequest"))
	}
	m.Name = fv
}

func (m *GetAuditedResourceDescriptorRequest) SetFieldMask(fv *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetAuditedResourceDescriptorRequest"))
	}
	m.FieldMask = fv
}

func (m *GetAuditedResourceDescriptorRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetAuditedResourceDescriptorRequest"))
	}
	m.View = fv
}

// A request message of the BatchGetAuditedResourceDescriptors method.
type BatchGetAuditedResourceDescriptorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of AuditedResourceDescriptors
	Names []*audited_resource_descriptor.Name `protobuf:"bytes,2,rep,customtype=Name,name=names,proto3" json:"names,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask `protobuf:"bytes,3,opt,customtype=AuditedResourceDescriptor_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *BatchGetAuditedResourceDescriptorsRequest) Reset() {
	*m = BatchGetAuditedResourceDescriptorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetAuditedResourceDescriptorsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetAuditedResourceDescriptorsRequest) ProtoMessage() {}

func (m *BatchGetAuditedResourceDescriptorsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetAuditedResourceDescriptorsRequest) GotenMessage() {}

// Deprecated, Use BatchGetAuditedResourceDescriptorsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetAuditedResourceDescriptorsRequest) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetAuditedResourceDescriptorsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetAuditedResourceDescriptorsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetAuditedResourceDescriptorsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetAuditedResourceDescriptorsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetAuditedResourceDescriptorsRequest) GetNames() []*audited_resource_descriptor.Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetAuditedResourceDescriptorsRequest) GetFieldMask() *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetAuditedResourceDescriptorsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetAuditedResourceDescriptorsRequest) SetNames(fv []*audited_resource_descriptor.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetAuditedResourceDescriptorsRequest"))
	}
	m.Names = fv
}

func (m *BatchGetAuditedResourceDescriptorsRequest) SetFieldMask(fv *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetAuditedResourceDescriptorsRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetAuditedResourceDescriptorsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetAuditedResourceDescriptorsRequest"))
	}
	m.View = fv
}

// A response message of the BatchGetAuditedResourceDescriptors method.
type BatchGetAuditedResourceDescriptorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found AuditedResourceDescriptors
	AuditedResourceDescriptors []*audited_resource_descriptor.AuditedResourceDescriptor `protobuf:"bytes,1,rep,name=audited_resource_descriptors,json=auditedResourceDescriptors,proto3" json:"audited_resource_descriptors,omitempty"`
	// list of not found AuditedResourceDescriptors
	Missing []*audited_resource_descriptor.Name `protobuf:"bytes,2,rep,customtype=Name,name=missing,proto3" json:"missing,omitempty"`
}

func (m *BatchGetAuditedResourceDescriptorsResponse) Reset() {
	*m = BatchGetAuditedResourceDescriptorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetAuditedResourceDescriptorsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetAuditedResourceDescriptorsResponse) ProtoMessage() {}

func (m *BatchGetAuditedResourceDescriptorsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetAuditedResourceDescriptorsResponse) GotenMessage() {}

// Deprecated, Use BatchGetAuditedResourceDescriptorsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetAuditedResourceDescriptorsResponse) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetAuditedResourceDescriptorsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetAuditedResourceDescriptorsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetAuditedResourceDescriptorsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetAuditedResourceDescriptorsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetAuditedResourceDescriptorsResponse) GetAuditedResourceDescriptors() []*audited_resource_descriptor.AuditedResourceDescriptor {
	if m != nil {
		return m.AuditedResourceDescriptors
	}
	return nil
}

func (m *BatchGetAuditedResourceDescriptorsResponse) GetMissing() []*audited_resource_descriptor.Name {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetAuditedResourceDescriptorsResponse) SetAuditedResourceDescriptors(fv []*audited_resource_descriptor.AuditedResourceDescriptor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AuditedResourceDescriptors", "BatchGetAuditedResourceDescriptorsResponse"))
	}
	m.AuditedResourceDescriptors = fv
}

func (m *BatchGetAuditedResourceDescriptorsResponse) SetMissing(fv []*audited_resource_descriptor.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetAuditedResourceDescriptorsResponse"))
	}
	m.Missing = fv
}

// A request message of the ListAuditedResourceDescriptors method.
type ListAuditedResourceDescriptorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Requested page size. Server may return fewer AuditedResourceDescriptors
	// than requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// ListAuditedResourceDescriptorsResponse.next_page_token.
	PageToken *audited_resource_descriptor.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *audited_resource_descriptor.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *audited_resource_descriptor.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask `protobuf:"bytes,6,opt,customtype=AuditedResourceDescriptor_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty"`
}

func (m *ListAuditedResourceDescriptorsRequest) Reset() {
	*m = ListAuditedResourceDescriptorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListAuditedResourceDescriptorsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListAuditedResourceDescriptorsRequest) ProtoMessage() {}

func (m *ListAuditedResourceDescriptorsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListAuditedResourceDescriptorsRequest) GotenMessage() {}

// Deprecated, Use ListAuditedResourceDescriptorsRequest.ProtoReflect.Descriptor instead.
func (*ListAuditedResourceDescriptorsRequest) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListAuditedResourceDescriptorsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListAuditedResourceDescriptorsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListAuditedResourceDescriptorsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListAuditedResourceDescriptorsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListAuditedResourceDescriptorsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListAuditedResourceDescriptorsRequest) GetPageToken() *audited_resource_descriptor.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListAuditedResourceDescriptorsRequest) GetOrderBy() *audited_resource_descriptor.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListAuditedResourceDescriptorsRequest) GetFilter() *audited_resource_descriptor.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListAuditedResourceDescriptorsRequest) GetFieldMask() *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListAuditedResourceDescriptorsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListAuditedResourceDescriptorsRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListAuditedResourceDescriptorsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListAuditedResourceDescriptorsRequest"))
	}
	m.PageSize = fv
}

func (m *ListAuditedResourceDescriptorsRequest) SetPageToken(fv *audited_resource_descriptor.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListAuditedResourceDescriptorsRequest"))
	}
	m.PageToken = fv
}

func (m *ListAuditedResourceDescriptorsRequest) SetOrderBy(fv *audited_resource_descriptor.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListAuditedResourceDescriptorsRequest"))
	}
	m.OrderBy = fv
}

func (m *ListAuditedResourceDescriptorsRequest) SetFilter(fv *audited_resource_descriptor.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListAuditedResourceDescriptorsRequest"))
	}
	m.Filter = fv
}

func (m *ListAuditedResourceDescriptorsRequest) SetFieldMask(fv *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListAuditedResourceDescriptorsRequest"))
	}
	m.FieldMask = fv
}

func (m *ListAuditedResourceDescriptorsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListAuditedResourceDescriptorsRequest"))
	}
	m.View = fv
}

func (m *ListAuditedResourceDescriptorsRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListAuditedResourceDescriptorsRequest"))
	}
	m.IncludePagingInfo = fv
}

// A response message of the ListAuditedResourceDescriptors method.
type ListAuditedResourceDescriptorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of AuditedResourceDescriptors
	AuditedResourceDescriptors []*audited_resource_descriptor.AuditedResourceDescriptor `protobuf:"bytes,1,rep,name=audited_resource_descriptors,json=auditedResourceDescriptors,proto3" json:"audited_resource_descriptors,omitempty"`
	// A token to retrieve previous page of results.
	//
	// Pass this value in the ListAuditedResourceDescriptorsRequest.page_token.
	PrevPageToken *audited_resource_descriptor.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// A token to retrieve next page of results.
	//
	// Pass this value in the ListAuditedResourceDescriptorsRequest.page_token.
	NextPageToken *audited_resource_descriptor.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`
	// Number of total AuditedResourceDescriptors across all pages or 0, if there
	// are no items, paging info was not requested or there was an error while
	// trying to get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty"`
}

func (m *ListAuditedResourceDescriptorsResponse) Reset() {
	*m = ListAuditedResourceDescriptorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListAuditedResourceDescriptorsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListAuditedResourceDescriptorsResponse) ProtoMessage() {}

func (m *ListAuditedResourceDescriptorsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListAuditedResourceDescriptorsResponse) GotenMessage() {}

// Deprecated, Use ListAuditedResourceDescriptorsResponse.ProtoReflect.Descriptor instead.
func (*ListAuditedResourceDescriptorsResponse) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListAuditedResourceDescriptorsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListAuditedResourceDescriptorsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListAuditedResourceDescriptorsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListAuditedResourceDescriptorsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListAuditedResourceDescriptorsResponse) GetAuditedResourceDescriptors() []*audited_resource_descriptor.AuditedResourceDescriptor {
	if m != nil {
		return m.AuditedResourceDescriptors
	}
	return nil
}

func (m *ListAuditedResourceDescriptorsResponse) GetPrevPageToken() *audited_resource_descriptor.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListAuditedResourceDescriptorsResponse) GetNextPageToken() *audited_resource_descriptor.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListAuditedResourceDescriptorsResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListAuditedResourceDescriptorsResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListAuditedResourceDescriptorsResponse) SetAuditedResourceDescriptors(fv []*audited_resource_descriptor.AuditedResourceDescriptor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AuditedResourceDescriptors", "ListAuditedResourceDescriptorsResponse"))
	}
	m.AuditedResourceDescriptors = fv
}

func (m *ListAuditedResourceDescriptorsResponse) SetPrevPageToken(fv *audited_resource_descriptor.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListAuditedResourceDescriptorsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListAuditedResourceDescriptorsResponse) SetNextPageToken(fv *audited_resource_descriptor.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListAuditedResourceDescriptorsResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListAuditedResourceDescriptorsResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListAuditedResourceDescriptorsResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListAuditedResourceDescriptorsResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListAuditedResourceDescriptorsResponse"))
	}
	m.TotalResultsCount = fv
}

// A request message of the WatchAuditedResourceDescriptor method.
type WatchAuditedResourceDescriptorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.audit.v1alpha2.AuditedResourceDescriptor
	Name *audited_resource_descriptor.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask `protobuf:"bytes,2,opt,customtype=AuditedResourceDescriptor_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *WatchAuditedResourceDescriptorRequest) Reset() {
	*m = WatchAuditedResourceDescriptorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAuditedResourceDescriptorRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAuditedResourceDescriptorRequest) ProtoMessage() {}

func (m *WatchAuditedResourceDescriptorRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAuditedResourceDescriptorRequest) GotenMessage() {}

// Deprecated, Use WatchAuditedResourceDescriptorRequest.ProtoReflect.Descriptor instead.
func (*WatchAuditedResourceDescriptorRequest) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchAuditedResourceDescriptorRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAuditedResourceDescriptorRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAuditedResourceDescriptorRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAuditedResourceDescriptorRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAuditedResourceDescriptorRequest) GetName() *audited_resource_descriptor.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchAuditedResourceDescriptorRequest) GetFieldMask() *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchAuditedResourceDescriptorRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchAuditedResourceDescriptorRequest) SetName(fv *audited_resource_descriptor.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchAuditedResourceDescriptorRequest"))
	}
	m.Name = fv
}

func (m *WatchAuditedResourceDescriptorRequest) SetFieldMask(fv *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchAuditedResourceDescriptorRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchAuditedResourceDescriptorRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchAuditedResourceDescriptorRequest"))
	}
	m.View = fv
}

// A response message of the WatchAuditedResourceDescriptor method.
type WatchAuditedResourceDescriptorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *audited_resource_descriptor.AuditedResourceDescriptorChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
}

func (m *WatchAuditedResourceDescriptorResponse) Reset() {
	*m = WatchAuditedResourceDescriptorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAuditedResourceDescriptorResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAuditedResourceDescriptorResponse) ProtoMessage() {}

func (m *WatchAuditedResourceDescriptorResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAuditedResourceDescriptorResponse) GotenMessage() {}

// Deprecated, Use WatchAuditedResourceDescriptorResponse.ProtoReflect.Descriptor instead.
func (*WatchAuditedResourceDescriptorResponse) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchAuditedResourceDescriptorResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAuditedResourceDescriptorResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAuditedResourceDescriptorResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAuditedResourceDescriptorResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAuditedResourceDescriptorResponse) GetChange() *audited_resource_descriptor.AuditedResourceDescriptorChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchAuditedResourceDescriptorResponse) SetChange(fv *audited_resource_descriptor.AuditedResourceDescriptorChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchAuditedResourceDescriptorResponse"))
	}
	m.Change = fv
}

// A request message of the WatchAuditedResourceDescriptors method.
type WatchAuditedResourceDescriptorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.types.WatchType" json:"type,omitempty"`
	// Requested page size. Server may return fewer AuditedResourceDescriptors
	// than requested. If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *audited_resource_descriptor.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *audited_resource_descriptor.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *audited_resource_descriptor.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to AuditedResourceDescriptor
	// that don't affect any of masked fields won't be sent back.
	FieldMask *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask `protobuf:"bytes,6,opt,customtype=AuditedResourceDescriptor_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// AuditedResourceDescriptor that don't affect any of masked fields won't be
	// sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty"`
}

func (m *WatchAuditedResourceDescriptorsRequest) Reset() {
	*m = WatchAuditedResourceDescriptorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAuditedResourceDescriptorsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAuditedResourceDescriptorsRequest) ProtoMessage() {}

func (m *WatchAuditedResourceDescriptorsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAuditedResourceDescriptorsRequest) GotenMessage() {}

// Deprecated, Use WatchAuditedResourceDescriptorsRequest.ProtoReflect.Descriptor instead.
func (*WatchAuditedResourceDescriptorsRequest) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchAuditedResourceDescriptorsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAuditedResourceDescriptorsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAuditedResourceDescriptorsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAuditedResourceDescriptorsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAuditedResourceDescriptorsRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchAuditedResourceDescriptorsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchAuditedResourceDescriptorsRequest) GetPageToken() *audited_resource_descriptor.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchAuditedResourceDescriptorsRequest) GetOrderBy() *audited_resource_descriptor.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchAuditedResourceDescriptorsRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchAuditedResourceDescriptorsRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchAuditedResourceDescriptorsRequest) GetFilter() *audited_resource_descriptor.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchAuditedResourceDescriptorsRequest) GetFieldMask() *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchAuditedResourceDescriptorsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchAuditedResourceDescriptorsRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchAuditedResourceDescriptorsRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchAuditedResourceDescriptorsRequest"))
	}
	m.Type = fv
}

func (m *WatchAuditedResourceDescriptorsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchAuditedResourceDescriptorsRequest"))
	}
	m.PageSize = fv
}

func (m *WatchAuditedResourceDescriptorsRequest) SetPageToken(fv *audited_resource_descriptor.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchAuditedResourceDescriptorsRequest"))
	}
	m.PageToken = fv
}

func (m *WatchAuditedResourceDescriptorsRequest) SetOrderBy(fv *audited_resource_descriptor.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchAuditedResourceDescriptorsRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchAuditedResourceDescriptorsRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchAuditedResourceDescriptorsRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchAuditedResourceDescriptorsRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchAuditedResourceDescriptorsRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchAuditedResourceDescriptorsRequest) SetFilter(fv *audited_resource_descriptor.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchAuditedResourceDescriptorsRequest"))
	}
	m.Filter = fv
}

func (m *WatchAuditedResourceDescriptorsRequest) SetFieldMask(fv *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchAuditedResourceDescriptorsRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchAuditedResourceDescriptorsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchAuditedResourceDescriptorsRequest"))
	}
	m.View = fv
}

func (m *WatchAuditedResourceDescriptorsRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchAuditedResourceDescriptorsRequest"))
	}
	m.MaxChunkSize = fv
}

// A response message of the WatchAuditedResourceDescriptors method.
type WatchAuditedResourceDescriptorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of AuditedResourceDescriptors
	AuditedResourceDescriptorChanges []*audited_resource_descriptor.AuditedResourceDescriptorChange `protobuf:"bytes,2,rep,name=audited_resource_descriptor_changes,json=auditedResourceDescriptorChanges,proto3" json:"audited_resource_descriptor_changes,omitempty"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All AuditedResourceDescriptors will be
	// of type Added/Current (depending on watch_type specified in the request).
	// Further responses will be incremental - however messages may still be
	// chunked and is_current logic still applies. is_current is always true for
	// stateful watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchAuditedResourceDescriptorsResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (AuditedResourceDescriptors will
	// contains changes of type Current only). Any resume tokens should be
	// discarded as well. This field should be checked only for stateless watch.
	// In stateful those kind of errors are handled by the server side. Will never
	// be sent along with is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty"`
}

func (m *WatchAuditedResourceDescriptorsResponse) Reset() {
	*m = WatchAuditedResourceDescriptorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAuditedResourceDescriptorsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAuditedResourceDescriptorsResponse) ProtoMessage() {}

func (m *WatchAuditedResourceDescriptorsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAuditedResourceDescriptorsResponse) GotenMessage() {}

// Deprecated, Use WatchAuditedResourceDescriptorsResponse.ProtoReflect.Descriptor instead.
func (*WatchAuditedResourceDescriptorsResponse) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchAuditedResourceDescriptorsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAuditedResourceDescriptorsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAuditedResourceDescriptorsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAuditedResourceDescriptorsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAuditedResourceDescriptorsResponse) GetAuditedResourceDescriptorChanges() []*audited_resource_descriptor.AuditedResourceDescriptorChange {
	if m != nil {
		return m.AuditedResourceDescriptorChanges
	}
	return nil
}

func (m *WatchAuditedResourceDescriptorsResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchAuditedResourceDescriptorsResponse) GetPageTokenChange() *WatchAuditedResourceDescriptorsResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchAuditedResourceDescriptorsResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchAuditedResourceDescriptorsResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchAuditedResourceDescriptorsResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchAuditedResourceDescriptorsResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchAuditedResourceDescriptorsResponse) SetAuditedResourceDescriptorChanges(fv []*audited_resource_descriptor.AuditedResourceDescriptorChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AuditedResourceDescriptorChanges", "WatchAuditedResourceDescriptorsResponse"))
	}
	m.AuditedResourceDescriptorChanges = fv
}

func (m *WatchAuditedResourceDescriptorsResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchAuditedResourceDescriptorsResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchAuditedResourceDescriptorsResponse) SetPageTokenChange(fv *WatchAuditedResourceDescriptorsResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchAuditedResourceDescriptorsResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchAuditedResourceDescriptorsResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchAuditedResourceDescriptorsResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchAuditedResourceDescriptorsResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchAuditedResourceDescriptorsResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchAuditedResourceDescriptorsResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchAuditedResourceDescriptorsResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchAuditedResourceDescriptorsResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchAuditedResourceDescriptorsResponse"))
	}
	m.IsHardReset = fv
}

// A request message of the CreateAuditedResourceDescriptor method.
type CreateAuditedResourceDescriptorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// AuditedResourceDescriptor resource body
	AuditedResourceDescriptor *audited_resource_descriptor.AuditedResourceDescriptor `protobuf:"bytes,2,opt,name=audited_resource_descriptor,json=auditedResourceDescriptor,proto3" json:"audited_resource_descriptor,omitempty"`
	// Optional masking applied to response object to reduce message response
	// size.
	ResponseMask *CreateAuditedResourceDescriptorRequest_ResponseMask `protobuf:"bytes,3,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
}

func (m *CreateAuditedResourceDescriptorRequest) Reset() {
	*m = CreateAuditedResourceDescriptorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateAuditedResourceDescriptorRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateAuditedResourceDescriptorRequest) ProtoMessage() {}

func (m *CreateAuditedResourceDescriptorRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateAuditedResourceDescriptorRequest) GotenMessage() {}

// Deprecated, Use CreateAuditedResourceDescriptorRequest.ProtoReflect.Descriptor instead.
func (*CreateAuditedResourceDescriptorRequest) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateAuditedResourceDescriptorRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateAuditedResourceDescriptorRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateAuditedResourceDescriptorRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateAuditedResourceDescriptorRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateAuditedResourceDescriptorRequest) GetAuditedResourceDescriptor() *audited_resource_descriptor.AuditedResourceDescriptor {
	if m != nil {
		return m.AuditedResourceDescriptor
	}
	return nil
}

func (m *CreateAuditedResourceDescriptorRequest) GetResponseMask() *CreateAuditedResourceDescriptorRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *CreateAuditedResourceDescriptorRequest) SetAuditedResourceDescriptor(fv *audited_resource_descriptor.AuditedResourceDescriptor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AuditedResourceDescriptor", "CreateAuditedResourceDescriptorRequest"))
	}
	m.AuditedResourceDescriptor = fv
}

func (m *CreateAuditedResourceDescriptorRequest) SetResponseMask(fv *CreateAuditedResourceDescriptorRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "CreateAuditedResourceDescriptorRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the UpdateAuditedResourceDescriptor method.
type UpdateAuditedResourceDescriptorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// AuditedResourceDescriptor resource body
	AuditedResourceDescriptor *audited_resource_descriptor.AuditedResourceDescriptor `protobuf:"bytes,2,opt,name=audited_resource_descriptor,json=auditedResourceDescriptor,proto3" json:"audited_resource_descriptor,omitempty"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask `protobuf:"bytes,3,opt,customtype=AuditedResourceDescriptor_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateAuditedResourceDescriptorRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty"`
	// If set to true, and the resource is not found,
	// a new resource will be created.  In this situation,
	// 'field_mask' is ignored.
	//
	// https://google.aip.dev/134#create-or-update
	AllowMissing bool `protobuf:"varint,5,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	// reduce message response size.
	ResponseMask *UpdateAuditedResourceDescriptorRequest_ResponseMask `protobuf:"bytes,6,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
}

func (m *UpdateAuditedResourceDescriptorRequest) Reset() {
	*m = UpdateAuditedResourceDescriptorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateAuditedResourceDescriptorRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateAuditedResourceDescriptorRequest) ProtoMessage() {}

func (m *UpdateAuditedResourceDescriptorRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateAuditedResourceDescriptorRequest) GotenMessage() {}

// Deprecated, Use UpdateAuditedResourceDescriptorRequest.ProtoReflect.Descriptor instead.
func (*UpdateAuditedResourceDescriptorRequest) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateAuditedResourceDescriptorRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateAuditedResourceDescriptorRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateAuditedResourceDescriptorRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateAuditedResourceDescriptorRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateAuditedResourceDescriptorRequest) GetAuditedResourceDescriptor() *audited_resource_descriptor.AuditedResourceDescriptor {
	if m != nil {
		return m.AuditedResourceDescriptor
	}
	return nil
}

func (m *UpdateAuditedResourceDescriptorRequest) GetUpdateMask() *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateAuditedResourceDescriptorRequest) GetCas() *UpdateAuditedResourceDescriptorRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateAuditedResourceDescriptorRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *UpdateAuditedResourceDescriptorRequest) GetResponseMask() *UpdateAuditedResourceDescriptorRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *UpdateAuditedResourceDescriptorRequest) SetAuditedResourceDescriptor(fv *audited_resource_descriptor.AuditedResourceDescriptor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AuditedResourceDescriptor", "UpdateAuditedResourceDescriptorRequest"))
	}
	m.AuditedResourceDescriptor = fv
}

func (m *UpdateAuditedResourceDescriptorRequest) SetUpdateMask(fv *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateAuditedResourceDescriptorRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateAuditedResourceDescriptorRequest) SetCas(fv *UpdateAuditedResourceDescriptorRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateAuditedResourceDescriptorRequest"))
	}
	m.Cas = fv
}

func (m *UpdateAuditedResourceDescriptorRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "UpdateAuditedResourceDescriptorRequest"))
	}
	m.AllowMissing = fv
}

func (m *UpdateAuditedResourceDescriptorRequest) SetResponseMask(fv *UpdateAuditedResourceDescriptorRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "UpdateAuditedResourceDescriptorRequest"))
	}
	m.ResponseMask = fv
}

type WatchAuditedResourceDescriptorsResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *audited_resource_descriptor.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// New token to retrieve next page of results.
	NextPageToken *audited_resource_descriptor.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *WatchAuditedResourceDescriptorsResponse_PageTokenChange) Reset() {
	*m = WatchAuditedResourceDescriptorsResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchAuditedResourceDescriptorsResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchAuditedResourceDescriptorsResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchAuditedResourceDescriptorsResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchAuditedResourceDescriptorsResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchAuditedResourceDescriptorsResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchAuditedResourceDescriptorsResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchAuditedResourceDescriptorsResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchAuditedResourceDescriptorsResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchAuditedResourceDescriptorsResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchAuditedResourceDescriptorsResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchAuditedResourceDescriptorsResponse_PageTokenChange) GetPrevPageToken() *audited_resource_descriptor.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchAuditedResourceDescriptorsResponse_PageTokenChange) GetNextPageToken() *audited_resource_descriptor.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchAuditedResourceDescriptorsResponse_PageTokenChange) SetPrevPageToken(fv *audited_resource_descriptor.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchAuditedResourceDescriptorsResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchAuditedResourceDescriptorsResponse_PageTokenChange) SetNextPageToken(fv *audited_resource_descriptor.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchAuditedResourceDescriptorsResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// ResponseMask allows client to reduce response message size.
type CreateAuditedResourceDescriptorRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*CreateAuditedResourceDescriptorRequest_ResponseMask_SkipEntireResponseBody
	//	*CreateAuditedResourceDescriptorRequest_ResponseMask_BodyMask
	Masking isCreateAuditedResourceDescriptorRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *CreateAuditedResourceDescriptorRequest_ResponseMask) Reset() {
	*m = CreateAuditedResourceDescriptorRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateAuditedResourceDescriptorRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateAuditedResourceDescriptorRequest_ResponseMask) ProtoMessage() {}

func (m *CreateAuditedResourceDescriptorRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateAuditedResourceDescriptorRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use CreateAuditedResourceDescriptorRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*CreateAuditedResourceDescriptorRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{9, 0}
}

func (m *CreateAuditedResourceDescriptorRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateAuditedResourceDescriptorRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateAuditedResourceDescriptorRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateAuditedResourceDescriptorRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isCreateAuditedResourceDescriptorRequest_ResponseMask_Masking interface {
	isCreateAuditedResourceDescriptorRequest_ResponseMask_Masking()
}

type CreateAuditedResourceDescriptorRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof"`
}
type CreateAuditedResourceDescriptorRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields.
	BodyMask *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask `protobuf:"bytes,2,opt,customtype=AuditedResourceDescriptor_FieldMask,name=body_mask,json=bodyMask,proto3,oneof"`
}

func (*CreateAuditedResourceDescriptorRequest_ResponseMask_SkipEntireResponseBody) isCreateAuditedResourceDescriptorRequest_ResponseMask_Masking() {
}
func (*CreateAuditedResourceDescriptorRequest_ResponseMask_BodyMask) isCreateAuditedResourceDescriptorRequest_ResponseMask_Masking() {
}
func (m *CreateAuditedResourceDescriptorRequest_ResponseMask) GetMasking() isCreateAuditedResourceDescriptorRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *CreateAuditedResourceDescriptorRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*CreateAuditedResourceDescriptorRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *CreateAuditedResourceDescriptorRequest_ResponseMask) GetBodyMask() *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask {
	if x, ok := m.GetMasking().(*CreateAuditedResourceDescriptorRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *CreateAuditedResourceDescriptorRequest_ResponseMask) SetMasking(ofv isCreateAuditedResourceDescriptorRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isCreateAuditedResourceDescriptorRequest_ResponseMask_Masking", "CreateAuditedResourceDescriptorRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *CreateAuditedResourceDescriptorRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&CreateAuditedResourceDescriptorRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *CreateAuditedResourceDescriptorRequest_ResponseMask) SetBodyMask(fv *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
	m.SetMasking(&CreateAuditedResourceDescriptorRequest_ResponseMask_BodyMask{BodyMask: fv})
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateAuditedResourceDescriptorRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *audited_resource_descriptor.AuditedResourceDescriptor `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask `protobuf:"bytes,2,opt,customtype=AuditedResourceDescriptor_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (m *UpdateAuditedResourceDescriptorRequest_CAS) Reset() {
	*m = UpdateAuditedResourceDescriptorRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateAuditedResourceDescriptorRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateAuditedResourceDescriptorRequest_CAS) ProtoMessage() {}

func (m *UpdateAuditedResourceDescriptorRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateAuditedResourceDescriptorRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateAuditedResourceDescriptorRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateAuditedResourceDescriptorRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateAuditedResourceDescriptorRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateAuditedResourceDescriptorRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateAuditedResourceDescriptorRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateAuditedResourceDescriptorRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateAuditedResourceDescriptorRequest_CAS) GetConditionalState() *audited_resource_descriptor.AuditedResourceDescriptor {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateAuditedResourceDescriptorRequest_CAS) GetFieldMask() *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateAuditedResourceDescriptorRequest_CAS) SetConditionalState(fv *audited_resource_descriptor.AuditedResourceDescriptor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateAuditedResourceDescriptorRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateAuditedResourceDescriptorRequest_CAS) SetFieldMask(fv *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateAuditedResourceDescriptorRequest_CAS"))
	}
	m.FieldMask = fv
}

// ResponseMask allows client to reduce response message size.
type UpdateAuditedResourceDescriptorRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*UpdateAuditedResourceDescriptorRequest_ResponseMask_SkipEntireResponseBody
	//	*UpdateAuditedResourceDescriptorRequest_ResponseMask_UpdatedFieldsOnly
	//	*UpdateAuditedResourceDescriptorRequest_ResponseMask_BodyMask
	Masking isUpdateAuditedResourceDescriptorRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) Reset() {
	*m = UpdateAuditedResourceDescriptorRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateAuditedResourceDescriptorRequest_ResponseMask) ProtoMessage() {}

func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateAuditedResourceDescriptorRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use UpdateAuditedResourceDescriptorRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*UpdateAuditedResourceDescriptorRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP(), []int{10, 1}
}

func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isUpdateAuditedResourceDescriptorRequest_ResponseMask_Masking interface {
	isUpdateAuditedResourceDescriptorRequest_ResponseMask_Masking()
}

type UpdateAuditedResourceDescriptorRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated. Field body_mask is ignored if
	// set.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof"`
}
type UpdateAuditedResourceDescriptorRequest_ResponseMask_UpdatedFieldsOnly struct {
	// Include all fields that were actually updated during processing. Note
	// this may be larger than update mask if some fields were computed
	// additionally. Name is added as well.
	UpdatedFieldsOnly bool `protobuf:"varint,2,opt,name=updated_fields_only,json=updatedFieldsOnly,proto3,oneof"`
}
type UpdateAuditedResourceDescriptorRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields. If skip_entire_response_body is true, this field is
	// ignored.
	BodyMask *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask `protobuf:"bytes,3,opt,customtype=AuditedResourceDescriptor_FieldMask,name=body_mask,json=bodyMask,proto3,oneof"`
}

func (*UpdateAuditedResourceDescriptorRequest_ResponseMask_SkipEntireResponseBody) isUpdateAuditedResourceDescriptorRequest_ResponseMask_Masking() {
}
func (*UpdateAuditedResourceDescriptorRequest_ResponseMask_UpdatedFieldsOnly) isUpdateAuditedResourceDescriptorRequest_ResponseMask_Masking() {
}
func (*UpdateAuditedResourceDescriptorRequest_ResponseMask_BodyMask) isUpdateAuditedResourceDescriptorRequest_ResponseMask_Masking() {
}
func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) GetMasking() isUpdateAuditedResourceDescriptorRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*UpdateAuditedResourceDescriptorRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) GetUpdatedFieldsOnly() bool {
	if x, ok := m.GetMasking().(*UpdateAuditedResourceDescriptorRequest_ResponseMask_UpdatedFieldsOnly); ok {
		return x.UpdatedFieldsOnly
	}
	return false
}
func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) GetBodyMask() *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask {
	if x, ok := m.GetMasking().(*UpdateAuditedResourceDescriptorRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) SetMasking(ofv isUpdateAuditedResourceDescriptorRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isUpdateAuditedResourceDescriptorRequest_ResponseMask_Masking", "UpdateAuditedResourceDescriptorRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&UpdateAuditedResourceDescriptorRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) SetUpdatedFieldsOnly(fv bool) {
	m.SetMasking(&UpdateAuditedResourceDescriptorRequest_ResponseMask_UpdatedFieldsOnly{UpdatedFieldsOnly: fv})
}
func (m *UpdateAuditedResourceDescriptorRequest_ResponseMask) SetBodyMask(fv *audited_resource_descriptor.AuditedResourceDescriptor_FieldMask) {
	m.SetMasking(&UpdateAuditedResourceDescriptorRequest_ResponseMask_BodyMask{BodyMask: fv})
}

var edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto preflect.FileDescriptor

var edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDesc = []byte{
	0x0a, 0x45, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x3d, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x44, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2,
	0xda, 0x21, 0x1d, 0x0a, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xef, 0x01, 0x0a, 0x29,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x0a, 0x1b,
	0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xda, 0x01,
	0x0a, 0x2a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x1c,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x1a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3b, 0x0a,
	0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x21,
	0xb2, 0xda, 0x21, 0x1d, 0x0a, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xbe, 0x03, 0x0a, 0x25, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0xb2, 0xda, 0x21, 0x1d, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0xb2, 0xda, 0x21, 0x1d, 0x2a, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21,
	0x1d, 0x1a, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x86, 0x03, 0x0a, 0x26,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x1c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x1a, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x49, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21,
	0x1d, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x25, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda,
	0x21, 0x1d, 0x0a, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x75, 0x0a, 0x26, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0xd3, 0x04, 0x0a, 0x26, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27,
	0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x2a, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x1a, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5c,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21,
	0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xca, 0xc6, 0x27,
	0x08, 0x12, 0x06, 0x1a, 0x02, 0x08, 0x64, 0x2a, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x80, 0x05, 0x0a, 0x27, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x23, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x20, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0f, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73,
	0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x1a, 0xa7, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2,
	0xda, 0x21, 0x1d, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x49, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x22, 0x1b,
	0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xca, 0x03, 0x0a, 0x26, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x1b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca,
	0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x19, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x6c, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x1a, 0xb4, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x3b, 0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x5c,
	0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21, 0xb2,
	0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07,
	0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x9f, 0x07, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x7b, 0x0a, 0x1b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04,
	0x62, 0x02, 0x08, 0x01, 0x52, 0x19, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12,
	0x5e, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x50, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53, 0x52, 0x03, 0x63, 0x61,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x6c, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xc9, 0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x64, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x10, 0x01,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x1a, 0xe6, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x3b, 0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x30,
	0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x5c, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42,
	0x21, 0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09,
	0x0a, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x32, 0x86, 0x11, 0x0a, 0x20, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xfb,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12,
	0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x73, 0x82, 0xdb, 0x21, 0x30, 0x0a, 0x19, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21,
	0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xb9, 0x02, 0x0a,
	0x22, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x3d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x93, 0x01, 0x82, 0xdb, 0x21, 0x50, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01,
	0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x1e, 0x12, 0x1c, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0x9b, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x39, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x81, 0x01, 0x82, 0xdb, 0x21, 0x47, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x00,
	0x32, 0x1e, 0x12, 0x1c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73,
	0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x73, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0x98, 0x02, 0x0a, 0x1e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x7d, 0x82, 0xdb, 0x21, 0x34, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0x08, 0x12, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30,
	0x01, 0x12, 0xae, 0x02, 0x0a, 0x1f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f,
	0x01, 0x82, 0xdb, 0x21, 0x4f, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x00, 0x32, 0x25, 0x12,
	0x23, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c,
	0x22, 0x2a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00,
	0x30, 0x01, 0x12, 0xb4, 0x02, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x22, 0xa5, 0x01, 0x82, 0xdb, 0x21, 0x4c, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x12, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x2a, 0x1d, 0x12,
	0x1b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x32, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43,
	0x3a, 0x1b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x24, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x73, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xd7, 0x02, 0x0a, 0x1f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0xc8, 0x01, 0x82, 0xdb, 0x21, 0x4a, 0x0a,
	0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2a, 0x1d, 0x12, 0x1b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x68, 0x3a, 0x1b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x1a, 0x49, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26,
	0x02, 0x10, 0x01, 0x1a, 0x2d, 0xca, 0x41, 0x10, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63,
	0x6f, 0x6d, 0x42, 0xa7, 0x03, 0xe8, 0xde, 0x21, 0x00, 0x82, 0xff, 0xd0, 0x02, 0x72, 0x0a, 0x22,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x8a, 0xff, 0xd0, 0x02, 0x72, 0x0a, 0x22, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x42, 0x25, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x6f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x3b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescOnce sync.Once
	edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescData = edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDesc
)

func edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescGZIP() []byte {
	edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescOnce.Do(func() {
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescData)
	})
	return edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDescData
}

var edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_goTypes = []interface{}{
	(*GetAuditedResourceDescriptorRequest)(nil),                             // 0: ntt.audit.v1alpha2.GetAuditedResourceDescriptorRequest
	(*BatchGetAuditedResourceDescriptorsRequest)(nil),                       // 1: ntt.audit.v1alpha2.BatchGetAuditedResourceDescriptorsRequest
	(*BatchGetAuditedResourceDescriptorsResponse)(nil),                      // 2: ntt.audit.v1alpha2.BatchGetAuditedResourceDescriptorsResponse
	(*ListAuditedResourceDescriptorsRequest)(nil),                           // 3: ntt.audit.v1alpha2.ListAuditedResourceDescriptorsRequest
	(*ListAuditedResourceDescriptorsResponse)(nil),                          // 4: ntt.audit.v1alpha2.ListAuditedResourceDescriptorsResponse
	(*WatchAuditedResourceDescriptorRequest)(nil),                           // 5: ntt.audit.v1alpha2.WatchAuditedResourceDescriptorRequest
	(*WatchAuditedResourceDescriptorResponse)(nil),                          // 6: ntt.audit.v1alpha2.WatchAuditedResourceDescriptorResponse
	(*WatchAuditedResourceDescriptorsRequest)(nil),                          // 7: ntt.audit.v1alpha2.WatchAuditedResourceDescriptorsRequest
	(*WatchAuditedResourceDescriptorsResponse)(nil),                         // 8: ntt.audit.v1alpha2.WatchAuditedResourceDescriptorsResponse
	(*CreateAuditedResourceDescriptorRequest)(nil),                          // 9: ntt.audit.v1alpha2.CreateAuditedResourceDescriptorRequest
	(*UpdateAuditedResourceDescriptorRequest)(nil),                          // 10: ntt.audit.v1alpha2.UpdateAuditedResourceDescriptorRequest
	(*WatchAuditedResourceDescriptorsResponse_PageTokenChange)(nil),         // 11: ntt.audit.v1alpha2.WatchAuditedResourceDescriptorsResponse.PageTokenChange
	(*CreateAuditedResourceDescriptorRequest_ResponseMask)(nil),             // 12: ntt.audit.v1alpha2.CreateAuditedResourceDescriptorRequest.ResponseMask
	(*UpdateAuditedResourceDescriptorRequest_CAS)(nil),                      // 13: ntt.audit.v1alpha2.UpdateAuditedResourceDescriptorRequest.CAS
	(*UpdateAuditedResourceDescriptorRequest_ResponseMask)(nil),             // 14: ntt.audit.v1alpha2.UpdateAuditedResourceDescriptorRequest.ResponseMask
	(*audited_resource_descriptor.AuditedResourceDescriptor_FieldMask)(nil), // 15: ntt.audit.v1alpha2.AuditedResourceDescriptor_FieldMask
	(view.View)(0), // 16: goten.types.View
	(*audited_resource_descriptor.AuditedResourceDescriptor)(nil),       // 17: ntt.audit.v1alpha2.AuditedResourceDescriptor
	(*audited_resource_descriptor.AuditedResourceDescriptorChange)(nil), // 18: ntt.audit.v1alpha2.AuditedResourceDescriptorChange
	(watch_type.WatchType)(0),     // 19: goten.types.WatchType
	(*timestamppb.Timestamp)(nil), // 20: google.protobuf.Timestamp
}
var edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_depIdxs = []int32{
	15, // 0: ntt.audit.v1alpha2.GetAuditedResourceDescriptorRequest.field_mask:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptor_FieldMask
	16, // 1: ntt.audit.v1alpha2.GetAuditedResourceDescriptorRequest.view:type_name -> goten.types.View
	15, // 2: ntt.audit.v1alpha2.BatchGetAuditedResourceDescriptorsRequest.field_mask:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptor_FieldMask
	16, // 3: ntt.audit.v1alpha2.BatchGetAuditedResourceDescriptorsRequest.view:type_name -> goten.types.View
	17, // 4: ntt.audit.v1alpha2.BatchGetAuditedResourceDescriptorsResponse.audited_resource_descriptors:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptor
	15, // 5: ntt.audit.v1alpha2.ListAuditedResourceDescriptorsRequest.field_mask:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptor_FieldMask
	16, // 6: ntt.audit.v1alpha2.ListAuditedResourceDescriptorsRequest.view:type_name -> goten.types.View
	17, // 7: ntt.audit.v1alpha2.ListAuditedResourceDescriptorsResponse.audited_resource_descriptors:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptor
	15, // 8: ntt.audit.v1alpha2.WatchAuditedResourceDescriptorRequest.field_mask:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptor_FieldMask
	16, // 9: ntt.audit.v1alpha2.WatchAuditedResourceDescriptorRequest.view:type_name -> goten.types.View
	18, // 10: ntt.audit.v1alpha2.WatchAuditedResourceDescriptorResponse.change:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptorChange
	19, // 11: ntt.audit.v1alpha2.WatchAuditedResourceDescriptorsRequest.type:type_name -> goten.types.WatchType
	20, // 12: ntt.audit.v1alpha2.WatchAuditedResourceDescriptorsRequest.starting_time:type_name -> google.protobuf.Timestamp
	15, // 13: ntt.audit.v1alpha2.WatchAuditedResourceDescriptorsRequest.field_mask:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptor_FieldMask
	16, // 14: ntt.audit.v1alpha2.WatchAuditedResourceDescriptorsRequest.view:type_name -> goten.types.View
	18, // 15: ntt.audit.v1alpha2.WatchAuditedResourceDescriptorsResponse.audited_resource_descriptor_changes:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptorChange
	11, // 16: ntt.audit.v1alpha2.WatchAuditedResourceDescriptorsResponse.page_token_change:type_name -> ntt.audit.v1alpha2.WatchAuditedResourceDescriptorsResponse.PageTokenChange
	17, // 17: ntt.audit.v1alpha2.CreateAuditedResourceDescriptorRequest.audited_resource_descriptor:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptor
	12, // 18: ntt.audit.v1alpha2.CreateAuditedResourceDescriptorRequest.response_mask:type_name -> ntt.audit.v1alpha2.CreateAuditedResourceDescriptorRequest.ResponseMask
	17, // 19: ntt.audit.v1alpha2.UpdateAuditedResourceDescriptorRequest.audited_resource_descriptor:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptor
	15, // 20: ntt.audit.v1alpha2.UpdateAuditedResourceDescriptorRequest.update_mask:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptor_FieldMask
	13, // 21: ntt.audit.v1alpha2.UpdateAuditedResourceDescriptorRequest.cas:type_name -> ntt.audit.v1alpha2.UpdateAuditedResourceDescriptorRequest.CAS
	14, // 22: ntt.audit.v1alpha2.UpdateAuditedResourceDescriptorRequest.response_mask:type_name -> ntt.audit.v1alpha2.UpdateAuditedResourceDescriptorRequest.ResponseMask
	15, // 23: ntt.audit.v1alpha2.CreateAuditedResourceDescriptorRequest.ResponseMask.body_mask:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptor_FieldMask
	17, // 24: ntt.audit.v1alpha2.UpdateAuditedResourceDescriptorRequest.CAS.conditional_state:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptor
	15, // 25: ntt.audit.v1alpha2.UpdateAuditedResourceDescriptorRequest.CAS.field_mask:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptor_FieldMask
	15, // 26: ntt.audit.v1alpha2.UpdateAuditedResourceDescriptorRequest.ResponseMask.body_mask:type_name -> ntt.audit.v1alpha2.AuditedResourceDescriptor_FieldMask
	0,  // 27: ntt.audit.v1alpha2.AuditedResourceDescriptorService.GetAuditedResourceDescriptor:input_type -> ntt.audit.v1alpha2.GetAuditedResourceDescriptorRequest
	1,  // 28: ntt.audit.v1alpha2.AuditedResourceDescriptorService.BatchGetAuditedResourceDescriptors:input_type -> ntt.audit.v1alpha2.BatchGetAuditedResourceDescriptorsRequest
	3,  // 29: ntt.audit.v1alpha2.AuditedResourceDescriptorService.ListAuditedResourceDescriptors:input_type -> ntt.audit.v1alpha2.ListAuditedResourceDescriptorsRequest
	5,  // 30: ntt.audit.v1alpha2.AuditedResourceDescriptorService.WatchAuditedResourceDescriptor:input_type -> ntt.audit.v1alpha2.WatchAuditedResourceDescriptorRequest
	7,  // 31: ntt.audit.v1alpha2.AuditedResourceDescriptorService.WatchAuditedResourceDescriptors:input_type -> ntt.audit.v1alpha2.WatchAuditedResourceDescriptorsRequest
	9,  // 32: ntt.audit.v1alpha2.AuditedResourceDescriptorService.CreateAuditedResourceDescriptor:input_type -> ntt.audit.v1alpha2.CreateAuditedResourceDescriptorRequest
	10, // 33: ntt.audit.v1alpha2.AuditedResourceDescriptorService.UpdateAuditedResourceDescriptor:input_type -> ntt.audit.v1alpha2.UpdateAuditedResourceDescriptorRequest
	17, // 34: ntt.audit.v1alpha2.AuditedResourceDescriptorService.GetAuditedResourceDescriptor:output_type -> ntt.audit.v1alpha2.AuditedResourceDescriptor
	2,  // 35: ntt.audit.v1alpha2.AuditedResourceDescriptorService.BatchGetAuditedResourceDescriptors:output_type -> ntt.audit.v1alpha2.BatchGetAuditedResourceDescriptorsResponse
	4,  // 36: ntt.audit.v1alpha2.AuditedResourceDescriptorService.ListAuditedResourceDescriptors:output_type -> ntt.audit.v1alpha2.ListAuditedResourceDescriptorsResponse
	6,  // 37: ntt.audit.v1alpha2.AuditedResourceDescriptorService.WatchAuditedResourceDescriptor:output_type -> ntt.audit.v1alpha2.WatchAuditedResourceDescriptorResponse
	8,  // 38: ntt.audit.v1alpha2.AuditedResourceDescriptorService.WatchAuditedResourceDescriptors:output_type -> ntt.audit.v1alpha2.WatchAuditedResourceDescriptorsResponse
	17, // 39: ntt.audit.v1alpha2.AuditedResourceDescriptorService.CreateAuditedResourceDescriptor:output_type -> ntt.audit.v1alpha2.AuditedResourceDescriptor
	17, // 40: ntt.audit.v1alpha2.AuditedResourceDescriptorService.UpdateAuditedResourceDescriptor:output_type -> ntt.audit.v1alpha2.AuditedResourceDescriptor
	34, // [34:41] is the sub-list for method output_type
	27, // [27:34] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_init() }
func edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_init() {
	if edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuditedResourceDescriptorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetAuditedResourceDescriptorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetAuditedResourceDescriptorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditedResourceDescriptorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditedResourceDescriptorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAuditedResourceDescriptorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAuditedResourceDescriptorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAuditedResourceDescriptorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAuditedResourceDescriptorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAuditedResourceDescriptorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAuditedResourceDescriptorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAuditedResourceDescriptorsResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAuditedResourceDescriptorRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAuditedResourceDescriptorRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAuditedResourceDescriptorRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*CreateAuditedResourceDescriptorRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*CreateAuditedResourceDescriptorRequest_ResponseMask_BodyMask)(nil),
	}
	edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*UpdateAuditedResourceDescriptorRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*UpdateAuditedResourceDescriptorRequest_ResponseMask_UpdatedFieldsOnly)(nil),
		(*UpdateAuditedResourceDescriptorRequest_ResponseMask_BodyMask)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_goTypes,
		DependencyIndexes: edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_depIdxs,
		MessageInfos:      edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_msgTypes,
	}.Build()
	edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto = out.File
	edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_rawDesc = nil
	edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_goTypes = nil
	edgelq_audit_proto_v1alpha2_audited_resource_descriptor_service_proto_depIdxs = nil
}
