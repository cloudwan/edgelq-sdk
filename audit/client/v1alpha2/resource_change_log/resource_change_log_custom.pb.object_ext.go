// Code generated by protoc-gen-goten-object
// File: edgelq/audit/proto/v1alpha2/resource_change_log_custom.proto
// DO NOT EDIT!!!

package resource_change_log_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	audit_common "github.com/cloudwan/edgelq-sdk/audit/common/v1alpha2"
	resource_change_log "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha2/resource_change_log"
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &audit_common.Authentication{}
	_ = &resource_change_log.ResourceChangeLog{}
	_ = &rpc.Status{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &timestamp.Timestamp{}
)

func (o *ListResourceChangeLogsRequest) GotenObjectExt() {}

func (o *ListResourceChangeLogsRequest) MakeFullFieldMask() *ListResourceChangeLogsRequest_FieldMask {
	return FullListResourceChangeLogsRequest_FieldMask()
}

func (o *ListResourceChangeLogsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListResourceChangeLogsRequest_FieldMask()
}

func (o *ListResourceChangeLogsRequest) MakeDiffFieldMask(other *ListResourceChangeLogsRequest) *ListResourceChangeLogsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListResourceChangeLogsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListResourceChangeLogsRequest_FieldMask()
	}

	res := &ListResourceChangeLogsRequest_FieldMask{}

	if len(o.GetParents()) == len(other.GetParents()) {
		for i, lValue := range o.GetParents() {
			rValue := other.GetParents()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &ListResourceChangeLogsRequest_FieldTerminalPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorParents})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListResourceChangeLogsRequest_FieldTerminalPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorParents})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListResourceChangeLogsRequest_FieldTerminalPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorFilter})
	}

	if len(o.GetRegionIds()) == len(other.GetRegionIds()) {
		for i, lValue := range o.GetRegionIds() {
			rValue := other.GetRegionIds()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &ListResourceChangeLogsRequest_FieldTerminalPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorRegionIds})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListResourceChangeLogsRequest_FieldTerminalPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorRegionIds})
	}
	{
		subMask := o.GetInterval().MakeDiffFieldMask(other.GetInterval())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListResourceChangeLogsRequest_FieldTerminalPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorInterval})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListResourceChangeLogsRequest_FieldSubPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorInterval, subPath: subpath})
			}
		}
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListResourceChangeLogsRequest_FieldTerminalPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken() != other.GetPageToken() {
		res.Paths = append(res.Paths, &ListResourceChangeLogsRequest_FieldTerminalPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorPageToken})
	}
	return res
}

func (o *ListResourceChangeLogsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListResourceChangeLogsRequest))
}

func (o *ListResourceChangeLogsRequest) Clone() *ListResourceChangeLogsRequest {
	if o == nil {
		return nil
	}
	result := &ListResourceChangeLogsRequest{}
	result.Parents = make([]*resource_change_log.ParentReference, len(o.Parents))
	for i, sourceValue := range o.Parents {
		if sourceValue == nil {
			result.Parents[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Parents[i] = &resource_change_log.ParentReference{}
			if err := result.Parents[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &resource_change_log.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.RegionIds = make([]string, len(o.RegionIds))
	for i, sourceValue := range o.RegionIds {
		result.RegionIds[i] = sourceValue
	}
	result.Interval = o.Interval.Clone()
	result.PageSize = o.PageSize
	result.PageToken = o.PageToken
	return result
}

func (o *ListResourceChangeLogsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListResourceChangeLogsRequest) Merge(source *ListResourceChangeLogsRequest) {
	for _, sourceValue := range source.GetParents() {
		exists := false
		for _, currentValue := range o.Parents {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *resource_change_log.ParentReference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &resource_change_log.ParentReference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Parents = append(o.Parents, newDstElement)
		}
	}

	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &resource_change_log.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	for _, sourceValue := range source.GetRegionIds() {
		exists := false
		for _, currentValue := range o.RegionIds {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.RegionIds = append(o.RegionIds, newDstElement)
		}
	}

	if source.GetInterval() != nil {
		if o.Interval == nil {
			o.Interval = new(audit_common.TimeInterval)
		}
		o.Interval.Merge(source.GetInterval())
	}
	o.PageSize = source.GetPageSize()
	o.PageToken = source.GetPageToken()
}

func (o *ListResourceChangeLogsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListResourceChangeLogsRequest))
}

func (o *ListResourceChangeLogsResponse) GotenObjectExt() {}

func (o *ListResourceChangeLogsResponse) MakeFullFieldMask() *ListResourceChangeLogsResponse_FieldMask {
	return FullListResourceChangeLogsResponse_FieldMask()
}

func (o *ListResourceChangeLogsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListResourceChangeLogsResponse_FieldMask()
}

func (o *ListResourceChangeLogsResponse) MakeDiffFieldMask(other *ListResourceChangeLogsResponse) *ListResourceChangeLogsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListResourceChangeLogsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListResourceChangeLogsResponse_FieldMask()
	}

	res := &ListResourceChangeLogsResponse_FieldMask{}

	if len(o.GetResourceChangeLogs()) == len(other.GetResourceChangeLogs()) {
		for i, lValue := range o.GetResourceChangeLogs() {
			rValue := other.GetResourceChangeLogs()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListResourceChangeLogsResponse_FieldTerminalPath{selector: ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListResourceChangeLogsResponse_FieldTerminalPath{selector: ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs})
	}
	if o.GetNextPageToken() != other.GetNextPageToken() {
		res.Paths = append(res.Paths, &ListResourceChangeLogsResponse_FieldTerminalPath{selector: ListResourceChangeLogsResponse_FieldPathSelectorNextPageToken})
	}

	if len(o.GetExecutionErrors()) == len(other.GetExecutionErrors()) {
		for i, lValue := range o.GetExecutionErrors() {
			rValue := other.GetExecutionErrors()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListResourceChangeLogsResponse_FieldTerminalPath{selector: ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListResourceChangeLogsResponse_FieldTerminalPath{selector: ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors})
	}
	return res
}

func (o *ListResourceChangeLogsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListResourceChangeLogsResponse))
}

func (o *ListResourceChangeLogsResponse) Clone() *ListResourceChangeLogsResponse {
	if o == nil {
		return nil
	}
	result := &ListResourceChangeLogsResponse{}
	result.ResourceChangeLogs = make([]*resource_change_log.ResourceChangeLog, len(o.ResourceChangeLogs))
	for i, sourceValue := range o.ResourceChangeLogs {
		result.ResourceChangeLogs[i] = sourceValue.Clone()
	}
	result.NextPageToken = o.NextPageToken
	result.ExecutionErrors = make([]*rpc.Status, len(o.ExecutionErrors))
	for i, sourceValue := range o.ExecutionErrors {
		result.ExecutionErrors[i] = sourceValue.Clone()
	}
	return result
}

func (o *ListResourceChangeLogsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListResourceChangeLogsResponse) Merge(source *ListResourceChangeLogsResponse) {
	for _, sourceValue := range source.GetResourceChangeLogs() {
		exists := false
		for _, currentValue := range o.ResourceChangeLogs {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *resource_change_log.ResourceChangeLog
			if sourceValue != nil {
				newDstElement = new(resource_change_log.ResourceChangeLog)
				newDstElement.Merge(sourceValue)
			}
			o.ResourceChangeLogs = append(o.ResourceChangeLogs, newDstElement)
		}
	}

	o.NextPageToken = source.GetNextPageToken()
	for _, sourceValue := range source.GetExecutionErrors() {
		exists := false
		for _, currentValue := range o.ExecutionErrors {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *rpc.Status
			if sourceValue != nil {
				newDstElement = new(rpc.Status)
				newDstElement.Merge(sourceValue)
			}
			o.ExecutionErrors = append(o.ExecutionErrors, newDstElement)
		}
	}

}

func (o *ListResourceChangeLogsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListResourceChangeLogsResponse))
}

func (o *ListResourceChangeLogsResponse_ErrorDetails) GotenObjectExt() {}

func (o *ListResourceChangeLogsResponse_ErrorDetails) MakeFullFieldMask() *ListResourceChangeLogsResponse_ErrorDetails_FieldMask {
	return FullListResourceChangeLogsResponse_ErrorDetails_FieldMask()
}

func (o *ListResourceChangeLogsResponse_ErrorDetails) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListResourceChangeLogsResponse_ErrorDetails_FieldMask()
}

func (o *ListResourceChangeLogsResponse_ErrorDetails) MakeDiffFieldMask(other *ListResourceChangeLogsResponse_ErrorDetails) *ListResourceChangeLogsResponse_ErrorDetails_FieldMask {
	if o == nil && other == nil {
		return &ListResourceChangeLogsResponse_ErrorDetails_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListResourceChangeLogsResponse_ErrorDetails_FieldMask()
	}

	res := &ListResourceChangeLogsResponse_ErrorDetails_FieldMask{}
	if o.GetRegionId() != other.GetRegionId() {
		res.Paths = append(res.Paths, &ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath{selector: ListResourceChangeLogsResponseErrorDetails_FieldPathSelectorRegionId})
	}
	return res
}

func (o *ListResourceChangeLogsResponse_ErrorDetails) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListResourceChangeLogsResponse_ErrorDetails))
}

func (o *ListResourceChangeLogsResponse_ErrorDetails) Clone() *ListResourceChangeLogsResponse_ErrorDetails {
	if o == nil {
		return nil
	}
	result := &ListResourceChangeLogsResponse_ErrorDetails{}
	result.RegionId = o.RegionId
	return result
}

func (o *ListResourceChangeLogsResponse_ErrorDetails) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListResourceChangeLogsResponse_ErrorDetails) Merge(source *ListResourceChangeLogsResponse_ErrorDetails) {
	o.RegionId = source.GetRegionId()
}

func (o *ListResourceChangeLogsResponse_ErrorDetails) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListResourceChangeLogsResponse_ErrorDetails))
}

func (o *CreatePreCommittedResourceChangeLogsRequest) GotenObjectExt() {}

func (o *CreatePreCommittedResourceChangeLogsRequest) MakeFullFieldMask() *CreatePreCommittedResourceChangeLogsRequest_FieldMask {
	return FullCreatePreCommittedResourceChangeLogsRequest_FieldMask()
}

func (o *CreatePreCommittedResourceChangeLogsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreatePreCommittedResourceChangeLogsRequest_FieldMask()
}

func (o *CreatePreCommittedResourceChangeLogsRequest) MakeDiffFieldMask(other *CreatePreCommittedResourceChangeLogsRequest) *CreatePreCommittedResourceChangeLogsRequest_FieldMask {
	if o == nil && other == nil {
		return &CreatePreCommittedResourceChangeLogsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreatePreCommittedResourceChangeLogsRequest_FieldMask()
	}

	res := &CreatePreCommittedResourceChangeLogsRequest_FieldMask{}
	if o.GetRequestId() != other.GetRequestId() {
		res.Paths = append(res.Paths, &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorRequestId})
	}
	if !proto.Equal(o.GetTimestamp(), other.GetTimestamp()) {
		res.Paths = append(res.Paths, &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTimestamp})
	}
	{
		subMask := o.GetAuthentication().MakeDiffFieldMask(other.GetAuthentication())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreatePreCommittedResourceChangeLogsRequest_FieldSubPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetService().MakeDiffFieldMask(other.GetService())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreatePreCommittedResourceChangeLogsRequest_FieldSubPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetTransaction().MakeDiffFieldMask(other.GetTransaction())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreatePreCommittedResourceChangeLogsRequest_FieldSubPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction, subPath: subpath})
			}
		}
	}

	if len(o.GetChanges()) == len(other.GetChanges()) {
		for i, lValue := range o.GetChanges() {
			rValue := other.GetChanges()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges})
	}
	return res
}

func (o *CreatePreCommittedResourceChangeLogsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreatePreCommittedResourceChangeLogsRequest))
}

func (o *CreatePreCommittedResourceChangeLogsRequest) Clone() *CreatePreCommittedResourceChangeLogsRequest {
	if o == nil {
		return nil
	}
	result := &CreatePreCommittedResourceChangeLogsRequest{}
	result.RequestId = o.RequestId
	result.Timestamp = proto.Clone(o.Timestamp).(*timestamp.Timestamp)
	result.Authentication = o.Authentication.Clone()
	result.Service = o.Service.Clone()
	result.Transaction = o.Transaction.Clone()
	result.Changes = make([]*resource_change_log.ResourceChangeLog_ResourceChange, len(o.Changes))
	for i, sourceValue := range o.Changes {
		result.Changes[i] = sourceValue.Clone()
	}
	return result
}

func (o *CreatePreCommittedResourceChangeLogsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreatePreCommittedResourceChangeLogsRequest) Merge(source *CreatePreCommittedResourceChangeLogsRequest) {
	o.RequestId = source.GetRequestId()
	if source.GetTimestamp() != nil {
		if o.Timestamp == nil {
			o.Timestamp = new(timestamp.Timestamp)
		}
		proto.Merge(o.Timestamp, source.GetTimestamp())
	}
	if source.GetAuthentication() != nil {
		if o.Authentication == nil {
			o.Authentication = new(audit_common.Authentication)
		}
		o.Authentication.Merge(source.GetAuthentication())
	}
	if source.GetService() != nil {
		if o.Service == nil {
			o.Service = new(audit_common.ServiceData)
		}
		o.Service.Merge(source.GetService())
	}
	if source.GetTransaction() != nil {
		if o.Transaction == nil {
			o.Transaction = new(resource_change_log.ResourceChangeLog_TransactionInfo)
		}
		o.Transaction.Merge(source.GetTransaction())
	}
	for _, sourceValue := range source.GetChanges() {
		exists := false
		for _, currentValue := range o.Changes {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *resource_change_log.ResourceChangeLog_ResourceChange
			if sourceValue != nil {
				newDstElement = new(resource_change_log.ResourceChangeLog_ResourceChange)
				newDstElement.Merge(sourceValue)
			}
			o.Changes = append(o.Changes, newDstElement)
		}
	}

}

func (o *CreatePreCommittedResourceChangeLogsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreatePreCommittedResourceChangeLogsRequest))
}

func (o *CreatePreCommittedResourceChangeLogsResponse) GotenObjectExt() {}

func (o *CreatePreCommittedResourceChangeLogsResponse) MakeFullFieldMask() *CreatePreCommittedResourceChangeLogsResponse_FieldMask {
	return FullCreatePreCommittedResourceChangeLogsResponse_FieldMask()
}

func (o *CreatePreCommittedResourceChangeLogsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreatePreCommittedResourceChangeLogsResponse_FieldMask()
}

func (o *CreatePreCommittedResourceChangeLogsResponse) MakeDiffFieldMask(other *CreatePreCommittedResourceChangeLogsResponse) *CreatePreCommittedResourceChangeLogsResponse_FieldMask {
	if o == nil && other == nil {
		return &CreatePreCommittedResourceChangeLogsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreatePreCommittedResourceChangeLogsResponse_FieldMask()
	}

	res := &CreatePreCommittedResourceChangeLogsResponse_FieldMask{}

	if len(o.GetLogKeys()) == len(other.GetLogKeys()) {
		for i, lValue := range o.GetLogKeys() {
			rValue := other.GetLogKeys()[i]
			if string(lValue) != string(rValue) {
				res.Paths = append(res.Paths, &CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys})
	}
	return res
}

func (o *CreatePreCommittedResourceChangeLogsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreatePreCommittedResourceChangeLogsResponse))
}

func (o *CreatePreCommittedResourceChangeLogsResponse) Clone() *CreatePreCommittedResourceChangeLogsResponse {
	if o == nil {
		return nil
	}
	result := &CreatePreCommittedResourceChangeLogsResponse{}
	result.LogKeys = make([][]byte, len(o.LogKeys))
	for i, sourceValue := range o.LogKeys {
		result.LogKeys[i] = sourceValue
	}
	return result
}

func (o *CreatePreCommittedResourceChangeLogsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreatePreCommittedResourceChangeLogsResponse) Merge(source *CreatePreCommittedResourceChangeLogsResponse) {
	for _, sourceValue := range source.GetLogKeys() {
		exists := false
		for _, currentValue := range o.LogKeys {
			if string(currentValue) == string(sourceValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement []byte
			newDstElement = sourceValue
			o.LogKeys = append(o.LogKeys, newDstElement)
		}
	}

}

func (o *CreatePreCommittedResourceChangeLogsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreatePreCommittedResourceChangeLogsResponse))
}

func (o *SetResourceChangeLogsCommitStateRequest) GotenObjectExt() {}

func (o *SetResourceChangeLogsCommitStateRequest) MakeFullFieldMask() *SetResourceChangeLogsCommitStateRequest_FieldMask {
	return FullSetResourceChangeLogsCommitStateRequest_FieldMask()
}

func (o *SetResourceChangeLogsCommitStateRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSetResourceChangeLogsCommitStateRequest_FieldMask()
}

func (o *SetResourceChangeLogsCommitStateRequest) MakeDiffFieldMask(other *SetResourceChangeLogsCommitStateRequest) *SetResourceChangeLogsCommitStateRequest_FieldMask {
	if o == nil && other == nil {
		return &SetResourceChangeLogsCommitStateRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSetResourceChangeLogsCommitStateRequest_FieldMask()
	}

	res := &SetResourceChangeLogsCommitStateRequest_FieldMask{}

	if len(o.GetLogKeys()) == len(other.GetLogKeys()) {
		for i, lValue := range o.GetLogKeys() {
			rValue := other.GetLogKeys()[i]
			if string(lValue) != string(rValue) {
				res.Paths = append(res.Paths, &SetResourceChangeLogsCommitStateRequest_FieldTerminalPath{selector: SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &SetResourceChangeLogsCommitStateRequest_FieldTerminalPath{selector: SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys})
	}
	if !proto.Equal(o.GetTimestamp(), other.GetTimestamp()) {
		res.Paths = append(res.Paths, &SetResourceChangeLogsCommitStateRequest_FieldTerminalPath{selector: SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTimestamp})
	}
	if o.GetTxResult() != other.GetTxResult() {
		res.Paths = append(res.Paths, &SetResourceChangeLogsCommitStateRequest_FieldTerminalPath{selector: SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTxResult})
	}
	return res
}

func (o *SetResourceChangeLogsCommitStateRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SetResourceChangeLogsCommitStateRequest))
}

func (o *SetResourceChangeLogsCommitStateRequest) Clone() *SetResourceChangeLogsCommitStateRequest {
	if o == nil {
		return nil
	}
	result := &SetResourceChangeLogsCommitStateRequest{}
	result.LogKeys = make([][]byte, len(o.LogKeys))
	for i, sourceValue := range o.LogKeys {
		result.LogKeys[i] = sourceValue
	}
	result.Timestamp = proto.Clone(o.Timestamp).(*timestamp.Timestamp)
	result.TxResult = o.TxResult
	return result
}

func (o *SetResourceChangeLogsCommitStateRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SetResourceChangeLogsCommitStateRequest) Merge(source *SetResourceChangeLogsCommitStateRequest) {
	for _, sourceValue := range source.GetLogKeys() {
		exists := false
		for _, currentValue := range o.LogKeys {
			if string(currentValue) == string(sourceValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement []byte
			newDstElement = sourceValue
			o.LogKeys = append(o.LogKeys, newDstElement)
		}
	}

	if source.GetTimestamp() != nil {
		if o.Timestamp == nil {
			o.Timestamp = new(timestamp.Timestamp)
		}
		proto.Merge(o.Timestamp, source.GetTimestamp())
	}
	o.TxResult = source.GetTxResult()
}

func (o *SetResourceChangeLogsCommitStateRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SetResourceChangeLogsCommitStateRequest))
}

func (o *SetResourceChangeLogsCommitStateResponse) GotenObjectExt() {}

func (o *SetResourceChangeLogsCommitStateResponse) MakeFullFieldMask() *SetResourceChangeLogsCommitStateResponse_FieldMask {
	return FullSetResourceChangeLogsCommitStateResponse_FieldMask()
}

func (o *SetResourceChangeLogsCommitStateResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSetResourceChangeLogsCommitStateResponse_FieldMask()
}

func (o *SetResourceChangeLogsCommitStateResponse) MakeDiffFieldMask(other *SetResourceChangeLogsCommitStateResponse) *SetResourceChangeLogsCommitStateResponse_FieldMask {
	if o == nil && other == nil {
		return &SetResourceChangeLogsCommitStateResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSetResourceChangeLogsCommitStateResponse_FieldMask()
	}

	res := &SetResourceChangeLogsCommitStateResponse_FieldMask{}
	return res
}

func (o *SetResourceChangeLogsCommitStateResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SetResourceChangeLogsCommitStateResponse))
}

func (o *SetResourceChangeLogsCommitStateResponse) Clone() *SetResourceChangeLogsCommitStateResponse {
	if o == nil {
		return nil
	}
	result := &SetResourceChangeLogsCommitStateResponse{}
	return result
}

func (o *SetResourceChangeLogsCommitStateResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SetResourceChangeLogsCommitStateResponse) Merge(source *SetResourceChangeLogsCommitStateResponse) {
}

func (o *SetResourceChangeLogsCommitStateResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SetResourceChangeLogsCommitStateResponse))
}
