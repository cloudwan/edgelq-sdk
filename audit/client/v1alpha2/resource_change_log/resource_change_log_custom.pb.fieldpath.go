// Code generated by protoc-gen-goten-object
// File: edgelq/audit/proto/v1alpha2/resource_change_log_custom.proto
// DO NOT EDIT!!!

package resource_change_log_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	audit_common "github.com/cloudwan/edgelq-sdk/audit/common/v1alpha2"
	resource_change_log "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha2/resource_change_log"
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &audit_common.Authentication{}
	_ = &resource_change_log.ResourceChangeLog{}
	_ = &rpc.Status{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &timestamp.Timestamp{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListResourceChangeLogsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListResourceChangeLogsRequest_FieldPathSelector
	Get(source *ListResourceChangeLogsRequest) []interface{}
	GetSingle(source *ListResourceChangeLogsRequest) (interface{}, bool)
	ClearValue(item *ListResourceChangeLogsRequest)

	// Those methods build corresponding ListResourceChangeLogsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListResourceChangeLogsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListResourceChangeLogsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListResourceChangeLogsRequest_FieldPathArrayItemValue
}

type ListResourceChangeLogsRequest_FieldPathSelector int32

const (
	ListResourceChangeLogsRequest_FieldPathSelectorParents   ListResourceChangeLogsRequest_FieldPathSelector = 0
	ListResourceChangeLogsRequest_FieldPathSelectorFilter    ListResourceChangeLogsRequest_FieldPathSelector = 1
	ListResourceChangeLogsRequest_FieldPathSelectorRegionIds ListResourceChangeLogsRequest_FieldPathSelector = 2
	ListResourceChangeLogsRequest_FieldPathSelectorInterval  ListResourceChangeLogsRequest_FieldPathSelector = 3
	ListResourceChangeLogsRequest_FieldPathSelectorPageSize  ListResourceChangeLogsRequest_FieldPathSelector = 4
	ListResourceChangeLogsRequest_FieldPathSelectorPageToken ListResourceChangeLogsRequest_FieldPathSelector = 5
)

func (s ListResourceChangeLogsRequest_FieldPathSelector) String() string {
	switch s {
	case ListResourceChangeLogsRequest_FieldPathSelectorParents:
		return "parents"
	case ListResourceChangeLogsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListResourceChangeLogsRequest_FieldPathSelectorRegionIds:
		return "region_ids"
	case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
		return "interval"
	case ListResourceChangeLogsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListResourceChangeLogsRequest_FieldPathSelectorPageToken:
		return "page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", s))
	}
}

func BuildListResourceChangeLogsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListResourceChangeLogsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListResourceChangeLogsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parents":
			return &ListResourceChangeLogsRequest_FieldTerminalPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorParents}, nil
		case "filter":
			return &ListResourceChangeLogsRequest_FieldTerminalPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorFilter}, nil
		case "region_ids", "regionIds", "region-ids":
			return &ListResourceChangeLogsRequest_FieldTerminalPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorRegionIds}, nil
		case "interval":
			return &ListResourceChangeLogsRequest_FieldTerminalPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorInterval}, nil
		case "page_size", "pageSize", "page-size":
			return &ListResourceChangeLogsRequest_FieldTerminalPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListResourceChangeLogsRequest_FieldTerminalPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "interval":
			if subpath, err := audit_common.BuildTimeInterval_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListResourceChangeLogsRequest_FieldSubPath{selector: ListResourceChangeLogsRequest_FieldPathSelectorInterval, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListResourceChangeLogsRequest", fp)
}

func ParseListResourceChangeLogsRequest_FieldPath(rawField string) (ListResourceChangeLogsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListResourceChangeLogsRequest_FieldPath(fp)
}

func MustParseListResourceChangeLogsRequest_FieldPath(rawField string) ListResourceChangeLogsRequest_FieldPath {
	fp, err := ParseListResourceChangeLogsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListResourceChangeLogsRequest_FieldTerminalPath struct {
	selector ListResourceChangeLogsRequest_FieldPathSelector
}

var _ ListResourceChangeLogsRequest_FieldPath = (*ListResourceChangeLogsRequest_FieldTerminalPath)(nil)

func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) Selector() ListResourceChangeLogsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListResourceChangeLogsRequest
func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) Get(source *ListResourceChangeLogsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListResourceChangeLogsRequest_FieldPathSelectorParents:
			for _, value := range source.GetParents() {
				values = append(values, value)
			}
		case ListResourceChangeLogsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListResourceChangeLogsRequest_FieldPathSelectorRegionIds:
			for _, value := range source.GetRegionIds() {
				values = append(values, value)
			}
		case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
			if source.Interval != nil {
				values = append(values, source.Interval)
			}
		case ListResourceChangeLogsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListResourceChangeLogsRequest_FieldPathSelectorPageToken:
			values = append(values, source.PageToken)
		default:
			panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListResourceChangeLogsRequest))
}

// GetSingle returns value pointed by specific field of from source ListResourceChangeLogsRequest
func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) GetSingle(source *ListResourceChangeLogsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListResourceChangeLogsRequest_FieldPathSelectorParents:
		res := source.GetParents()
		return res, res != nil
	case ListResourceChangeLogsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListResourceChangeLogsRequest_FieldPathSelectorRegionIds:
		res := source.GetRegionIds()
		return res, res != nil
	case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
		res := source.GetInterval()
		return res, res != nil
	case ListResourceChangeLogsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListResourceChangeLogsRequest_FieldPathSelectorPageToken:
		return source.GetPageToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fp.selector))
	}
}

func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListResourceChangeLogsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListResourceChangeLogsRequest_FieldPathSelectorParents:
		return ([]*resource_change_log.ParentReference)(nil)
	case ListResourceChangeLogsRequest_FieldPathSelectorFilter:
		return (*resource_change_log.Filter)(nil)
	case ListResourceChangeLogsRequest_FieldPathSelectorRegionIds:
		return ([]string)(nil)
	case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
		return (*audit_common.TimeInterval)(nil)
	case ListResourceChangeLogsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListResourceChangeLogsRequest_FieldPathSelectorPageToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fp.selector))
	}
}

func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) ClearValue(item *ListResourceChangeLogsRequest) {
	if item != nil {
		switch fp.selector {
		case ListResourceChangeLogsRequest_FieldPathSelectorParents:
			item.Parents = nil
		case ListResourceChangeLogsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListResourceChangeLogsRequest_FieldPathSelectorRegionIds:
			item.RegionIds = nil
		case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
			item.Interval = nil
		case ListResourceChangeLogsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListResourceChangeLogsRequest_FieldPathSelectorPageToken:
			item.PageToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListResourceChangeLogsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListResourceChangeLogsRequest_FieldPathSelectorParents ||
		fp.selector == ListResourceChangeLogsRequest_FieldPathSelectorFilter ||
		fp.selector == ListResourceChangeLogsRequest_FieldPathSelectorRegionIds ||
		fp.selector == ListResourceChangeLogsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListResourceChangeLogsRequest_FieldPathSelectorPageToken
}

func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) WithIValue(value interface{}) ListResourceChangeLogsRequest_FieldPathValue {
	switch fp.selector {
	case ListResourceChangeLogsRequest_FieldPathSelectorParents:
		return &ListResourceChangeLogsRequest_FieldTerminalPathValue{ListResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.([]*resource_change_log.ParentReference)}
	case ListResourceChangeLogsRequest_FieldPathSelectorFilter:
		return &ListResourceChangeLogsRequest_FieldTerminalPathValue{ListResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.(*resource_change_log.Filter)}
	case ListResourceChangeLogsRequest_FieldPathSelectorRegionIds:
		return &ListResourceChangeLogsRequest_FieldTerminalPathValue{ListResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.([]string)}
	case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
		return &ListResourceChangeLogsRequest_FieldTerminalPathValue{ListResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.(*audit_common.TimeInterval)}
	case ListResourceChangeLogsRequest_FieldPathSelectorPageSize:
		return &ListResourceChangeLogsRequest_FieldTerminalPathValue{ListResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListResourceChangeLogsRequest_FieldPathSelectorPageToken:
		return &ListResourceChangeLogsRequest_FieldTerminalPathValue{ListResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fp.selector))
	}
}

func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListResourceChangeLogsRequest_FieldPathArrayOfValues {
	fpaov := &ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues{ListResourceChangeLogsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListResourceChangeLogsRequest_FieldPathSelectorParents:
		return &ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues{ListResourceChangeLogsRequest_FieldTerminalPath: *fp, values: values.([][]*resource_change_log.ParentReference)}
	case ListResourceChangeLogsRequest_FieldPathSelectorFilter:
		return &ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues{ListResourceChangeLogsRequest_FieldTerminalPath: *fp, values: values.([]*resource_change_log.Filter)}
	case ListResourceChangeLogsRequest_FieldPathSelectorRegionIds:
		return &ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues{ListResourceChangeLogsRequest_FieldTerminalPath: *fp, values: values.([][]string)}
	case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
		return &ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues{ListResourceChangeLogsRequest_FieldTerminalPath: *fp, values: values.([]*audit_common.TimeInterval)}
	case ListResourceChangeLogsRequest_FieldPathSelectorPageSize:
		return &ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues{ListResourceChangeLogsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListResourceChangeLogsRequest_FieldPathSelectorPageToken:
		return &ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues{ListResourceChangeLogsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListResourceChangeLogsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case ListResourceChangeLogsRequest_FieldPathSelectorParents:
		return &ListResourceChangeLogsRequest_FieldTerminalPathArrayItemValue{ListResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.(*resource_change_log.ParentReference)}
	case ListResourceChangeLogsRequest_FieldPathSelectorRegionIds:
		return &ListResourceChangeLogsRequest_FieldTerminalPathArrayItemValue{ListResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fp.selector))
	}
}

func (fp *ListResourceChangeLogsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListResourceChangeLogsRequest_FieldSubPath struct {
	selector ListResourceChangeLogsRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListResourceChangeLogsRequest_FieldPath = (*ListResourceChangeLogsRequest_FieldSubPath)(nil)

func (fps *ListResourceChangeLogsRequest_FieldSubPath) Selector() ListResourceChangeLogsRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ListResourceChangeLogsRequest_FieldSubPath) AsIntervalSubPath() (audit_common.TimeInterval_FieldPath, bool) {
	res, ok := fps.subPath.(audit_common.TimeInterval_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListResourceChangeLogsRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListResourceChangeLogsRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListResourceChangeLogsRequest
func (fps *ListResourceChangeLogsRequest_FieldSubPath) Get(source *ListResourceChangeLogsRequest) (values []interface{}) {
	if asTimeIntervalFieldPath, ok := fps.AsIntervalSubPath(); ok {
		values = append(values, asTimeIntervalFieldPath.Get(source.GetInterval())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fps.selector))
	}
	return
}

func (fps *ListResourceChangeLogsRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListResourceChangeLogsRequest))
}

// GetSingle returns value of selected field from source ListResourceChangeLogsRequest
func (fps *ListResourceChangeLogsRequest_FieldSubPath) GetSingle(source *ListResourceChangeLogsRequest) (interface{}, bool) {
	switch fps.selector {
	case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
		if source.GetInterval() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fps.selector))
	}
}

func (fps *ListResourceChangeLogsRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListResourceChangeLogsRequest))
}

// GetDefault returns a default value of the field type
func (fps *ListResourceChangeLogsRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListResourceChangeLogsRequest_FieldSubPath) ClearValue(item *ListResourceChangeLogsRequest) {
	if item != nil {
		switch fps.selector {
		case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
			fps.subPath.ClearValueRaw(item.Interval)
		default:
			panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fps.selector))
		}
	}
}

func (fps *ListResourceChangeLogsRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListResourceChangeLogsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListResourceChangeLogsRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListResourceChangeLogsRequest_FieldSubPath) WithIValue(value interface{}) ListResourceChangeLogsRequest_FieldPathValue {
	return &ListResourceChangeLogsRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListResourceChangeLogsRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListResourceChangeLogsRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ListResourceChangeLogsRequest_FieldPathArrayOfValues {
	return &ListResourceChangeLogsRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListResourceChangeLogsRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListResourceChangeLogsRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ListResourceChangeLogsRequest_FieldPathArrayItemValue {
	return &ListResourceChangeLogsRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListResourceChangeLogsRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListResourceChangeLogsRequest_FieldPathValue allows storing values for ListResourceChangeLogsRequest fields according to their type
type ListResourceChangeLogsRequest_FieldPathValue interface {
	ListResourceChangeLogsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListResourceChangeLogsRequest)
	CompareWith(*ListResourceChangeLogsRequest) (cmp int, comparable bool)
}

func ParseListResourceChangeLogsRequest_FieldPathValue(pathStr, valueStr string) (ListResourceChangeLogsRequest_FieldPathValue, error) {
	fp, err := ParseListResourceChangeLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListResourceChangeLogsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListResourceChangeLogsRequest_FieldPathValue), nil
}

func MustParseListResourceChangeLogsRequest_FieldPathValue(pathStr, valueStr string) ListResourceChangeLogsRequest_FieldPathValue {
	fpv, err := ParseListResourceChangeLogsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListResourceChangeLogsRequest_FieldTerminalPathValue struct {
	ListResourceChangeLogsRequest_FieldTerminalPath
	value interface{}
}

var _ ListResourceChangeLogsRequest_FieldPathValue = (*ListResourceChangeLogsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListResourceChangeLogsRequest' as interface{}
func (fpv *ListResourceChangeLogsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListResourceChangeLogsRequest_FieldTerminalPathValue) AsParentsValue() ([]*resource_change_log.ParentReference, bool) {
	res, ok := fpv.value.([]*resource_change_log.ParentReference)
	return res, ok
}
func (fpv *ListResourceChangeLogsRequest_FieldTerminalPathValue) AsFilterValue() (*resource_change_log.Filter, bool) {
	res, ok := fpv.value.(*resource_change_log.Filter)
	return res, ok
}
func (fpv *ListResourceChangeLogsRequest_FieldTerminalPathValue) AsRegionIdsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *ListResourceChangeLogsRequest_FieldTerminalPathValue) AsIntervalValue() (*audit_common.TimeInterval, bool) {
	res, ok := fpv.value.(*audit_common.TimeInterval)
	return res, ok
}
func (fpv *ListResourceChangeLogsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListResourceChangeLogsRequest_FieldTerminalPathValue) AsPageTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ListResourceChangeLogsRequest
func (fpv *ListResourceChangeLogsRequest_FieldTerminalPathValue) SetTo(target **ListResourceChangeLogsRequest) {
	if *target == nil {
		*target = new(ListResourceChangeLogsRequest)
	}
	switch fpv.selector {
	case ListResourceChangeLogsRequest_FieldPathSelectorParents:
		(*target).Parents = fpv.value.([]*resource_change_log.ParentReference)
	case ListResourceChangeLogsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*resource_change_log.Filter)
	case ListResourceChangeLogsRequest_FieldPathSelectorRegionIds:
		(*target).RegionIds = fpv.value.([]string)
	case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
		(*target).Interval = fpv.value.(*audit_common.TimeInterval)
	case ListResourceChangeLogsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListResourceChangeLogsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fpv.selector))
	}
}

func (fpv *ListResourceChangeLogsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListResourceChangeLogsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListResourceChangeLogsRequest_FieldTerminalPathValue' with the value under path in 'ListResourceChangeLogsRequest'.
func (fpv *ListResourceChangeLogsRequest_FieldTerminalPathValue) CompareWith(source *ListResourceChangeLogsRequest) (int, bool) {
	switch fpv.selector {
	case ListResourceChangeLogsRequest_FieldPathSelectorParents:
		return 0, false
	case ListResourceChangeLogsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListResourceChangeLogsRequest_FieldPathSelectorRegionIds:
		return 0, false
	case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
		return 0, false
	case ListResourceChangeLogsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListResourceChangeLogsRequest_FieldPathSelectorPageToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetPageToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fpv.selector))
	}
}

func (fpv *ListResourceChangeLogsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListResourceChangeLogsRequest))
}

type ListResourceChangeLogsRequest_FieldSubPathValue struct {
	ListResourceChangeLogsRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListResourceChangeLogsRequest_FieldPathValue = (*ListResourceChangeLogsRequest_FieldSubPathValue)(nil)

func (fpvs *ListResourceChangeLogsRequest_FieldSubPathValue) AsIntervalPathValue() (audit_common.TimeInterval_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(audit_common.TimeInterval_FieldPathValue)
	return res, ok
}

func (fpvs *ListResourceChangeLogsRequest_FieldSubPathValue) SetTo(target **ListResourceChangeLogsRequest) {
	if *target == nil {
		*target = new(ListResourceChangeLogsRequest)
	}
	switch fpvs.Selector() {
	case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
		fpvs.subPathValue.(audit_common.TimeInterval_FieldPathValue).SetTo(&(*target).Interval)
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ListResourceChangeLogsRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListResourceChangeLogsRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListResourceChangeLogsRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListResourceChangeLogsRequest_FieldSubPathValue) CompareWith(source *ListResourceChangeLogsRequest) (int, bool) {
	switch fpvs.Selector() {
	case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
		return fpvs.subPathValue.(audit_common.TimeInterval_FieldPathValue).CompareWith(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ListResourceChangeLogsRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListResourceChangeLogsRequest))
}

// ListResourceChangeLogsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListResourceChangeLogsRequest according to their type
// Present only for array (repeated) types.
type ListResourceChangeLogsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListResourceChangeLogsRequest_FieldPath
	ContainsValue(*ListResourceChangeLogsRequest) bool
}

// ParseListResourceChangeLogsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListResourceChangeLogsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListResourceChangeLogsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListResourceChangeLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListResourceChangeLogsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListResourceChangeLogsRequest_FieldPathArrayItemValue), nil
}

func MustParseListResourceChangeLogsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListResourceChangeLogsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListResourceChangeLogsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListResourceChangeLogsRequest_FieldTerminalPathArrayItemValue struct {
	ListResourceChangeLogsRequest_FieldTerminalPath
	value interface{}
}

var _ ListResourceChangeLogsRequest_FieldPathArrayItemValue = (*ListResourceChangeLogsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListResourceChangeLogsRequest as interface{}
func (fpaiv *ListResourceChangeLogsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListResourceChangeLogsRequest_FieldTerminalPathArrayItemValue) AsParentsItemValue() (*resource_change_log.ParentReference, bool) {
	res, ok := fpaiv.value.(*resource_change_log.ParentReference)
	return res, ok
}
func (fpaiv *ListResourceChangeLogsRequest_FieldTerminalPathArrayItemValue) AsRegionIdsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *ListResourceChangeLogsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListResourceChangeLogsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListResourceChangeLogsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListResourceChangeLogsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListResourceChangeLogsRequest'
func (fpaiv *ListResourceChangeLogsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListResourceChangeLogsRequest) bool {
	slice := fpaiv.ListResourceChangeLogsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListResourceChangeLogsRequest_FieldSubPathArrayItemValue struct {
	ListResourceChangeLogsRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListResourceChangeLogsRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListResourceChangeLogsRequest_FieldSubPathArrayItemValue) AsIntervalPathItemValue() (audit_common.TimeInterval_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(audit_common.TimeInterval_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListResourceChangeLogsRequest'
func (fpaivs *ListResourceChangeLogsRequest_FieldSubPathArrayItemValue) ContainsValue(source *ListResourceChangeLogsRequest) bool {
	switch fpaivs.Selector() {
	case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
		return fpaivs.subPathItemValue.(audit_common.TimeInterval_FieldPathArrayItemValue).ContainsValue(source.GetInterval())
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsRequest: %d", fpaivs.Selector()))
	}
}

// ListResourceChangeLogsRequest_FieldPathArrayOfValues allows storing slice of values for ListResourceChangeLogsRequest fields according to their type
type ListResourceChangeLogsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListResourceChangeLogsRequest_FieldPath
}

func ParseListResourceChangeLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListResourceChangeLogsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListResourceChangeLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListResourceChangeLogsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListResourceChangeLogsRequest_FieldPathArrayOfValues), nil
}

func MustParseListResourceChangeLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListResourceChangeLogsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListResourceChangeLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues struct {
	ListResourceChangeLogsRequest_FieldTerminalPath
	values interface{}
}

var _ ListResourceChangeLogsRequest_FieldPathArrayOfValues = (*ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListResourceChangeLogsRequest_FieldPathSelectorParents:
		for _, v := range fpaov.values.([][]*resource_change_log.ParentReference) {
			values = append(values, v)
		}
	case ListResourceChangeLogsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*resource_change_log.Filter) {
			values = append(values, v)
		}
	case ListResourceChangeLogsRequest_FieldPathSelectorRegionIds:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case ListResourceChangeLogsRequest_FieldPathSelectorInterval:
		for _, v := range fpaov.values.([]*audit_common.TimeInterval) {
			values = append(values, v)
		}
	case ListResourceChangeLogsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListResourceChangeLogsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues) AsParentsArrayOfValues() ([][]*resource_change_log.ParentReference, bool) {
	res, ok := fpaov.values.([][]*resource_change_log.ParentReference)
	return res, ok
}
func (fpaov *ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*resource_change_log.Filter, bool) {
	res, ok := fpaov.values.([]*resource_change_log.Filter)
	return res, ok
}
func (fpaov *ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues) AsRegionIdsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues) AsIntervalArrayOfValues() ([]*audit_common.TimeInterval, bool) {
	res, ok := fpaov.values.([]*audit_common.TimeInterval)
	return res, ok
}
func (fpaov *ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListResourceChangeLogsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type ListResourceChangeLogsRequest_FieldSubPathArrayOfValues struct {
	ListResourceChangeLogsRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListResourceChangeLogsRequest_FieldPathArrayOfValues = (*ListResourceChangeLogsRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListResourceChangeLogsRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListResourceChangeLogsRequest_FieldSubPathArrayOfValues) AsIntervalPathArrayOfValues() (audit_common.TimeInterval_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(audit_common.TimeInterval_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListResourceChangeLogsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListResourceChangeLogsResponse_FieldPathSelector
	Get(source *ListResourceChangeLogsResponse) []interface{}
	GetSingle(source *ListResourceChangeLogsResponse) (interface{}, bool)
	ClearValue(item *ListResourceChangeLogsResponse)

	// Those methods build corresponding ListResourceChangeLogsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListResourceChangeLogsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListResourceChangeLogsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListResourceChangeLogsResponse_FieldPathArrayItemValue
}

type ListResourceChangeLogsResponse_FieldPathSelector int32

const (
	ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs ListResourceChangeLogsResponse_FieldPathSelector = 0
	ListResourceChangeLogsResponse_FieldPathSelectorNextPageToken      ListResourceChangeLogsResponse_FieldPathSelector = 1
	ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors    ListResourceChangeLogsResponse_FieldPathSelector = 2
)

func (s ListResourceChangeLogsResponse_FieldPathSelector) String() string {
	switch s {
	case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
		return "resource_change_logs"
	case ListResourceChangeLogsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
		return "execution_errors"
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", s))
	}
}

func BuildListResourceChangeLogsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListResourceChangeLogsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListResourceChangeLogsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "resource_change_logs", "resourceChangeLogs", "resource-change-logs":
			return &ListResourceChangeLogsResponse_FieldTerminalPath{selector: ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListResourceChangeLogsResponse_FieldTerminalPath{selector: ListResourceChangeLogsResponse_FieldPathSelectorNextPageToken}, nil
		case "execution_errors", "executionErrors", "execution-errors":
			return &ListResourceChangeLogsResponse_FieldTerminalPath{selector: ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors}, nil
		}
	} else {
		switch fp[0] {
		case "resource_change_logs", "resourceChangeLogs", "resource-change-logs":
			if subpath, err := resource_change_log.BuildResourceChangeLog_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListResourceChangeLogsResponse_FieldSubPath{selector: ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs, subPath: subpath}, nil
			}
		case "execution_errors", "executionErrors", "execution-errors":
			if subpath, err := rpc.BuildStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListResourceChangeLogsResponse_FieldSubPath{selector: ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListResourceChangeLogsResponse", fp)
}

func ParseListResourceChangeLogsResponse_FieldPath(rawField string) (ListResourceChangeLogsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListResourceChangeLogsResponse_FieldPath(fp)
}

func MustParseListResourceChangeLogsResponse_FieldPath(rawField string) ListResourceChangeLogsResponse_FieldPath {
	fp, err := ParseListResourceChangeLogsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListResourceChangeLogsResponse_FieldTerminalPath struct {
	selector ListResourceChangeLogsResponse_FieldPathSelector
}

var _ ListResourceChangeLogsResponse_FieldPath = (*ListResourceChangeLogsResponse_FieldTerminalPath)(nil)

func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) Selector() ListResourceChangeLogsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListResourceChangeLogsResponse
func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) Get(source *ListResourceChangeLogsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
			for _, value := range source.GetResourceChangeLogs() {
				values = append(values, value)
			}
		case ListResourceChangeLogsResponse_FieldPathSelectorNextPageToken:
			values = append(values, source.NextPageToken)
		case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
			for _, value := range source.GetExecutionErrors() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListResourceChangeLogsResponse))
}

// GetSingle returns value pointed by specific field of from source ListResourceChangeLogsResponse
func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) GetSingle(source *ListResourceChangeLogsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
		res := source.GetResourceChangeLogs()
		return res, res != nil
	case ListResourceChangeLogsResponse_FieldPathSelectorNextPageToken:
		return source.GetNextPageToken(), source != nil
	case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
		res := source.GetExecutionErrors()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fp.selector))
	}
}

func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListResourceChangeLogsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
		return ([]*resource_change_log.ResourceChangeLog)(nil)
	case ListResourceChangeLogsResponse_FieldPathSelectorNextPageToken:
		return ""
	case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
		return ([]*rpc.Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fp.selector))
	}
}

func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) ClearValue(item *ListResourceChangeLogsResponse) {
	if item != nil {
		switch fp.selector {
		case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
			item.ResourceChangeLogs = nil
		case ListResourceChangeLogsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = ""
		case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
			item.ExecutionErrors = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListResourceChangeLogsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListResourceChangeLogsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) WithIValue(value interface{}) ListResourceChangeLogsResponse_FieldPathValue {
	switch fp.selector {
	case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
		return &ListResourceChangeLogsResponse_FieldTerminalPathValue{ListResourceChangeLogsResponse_FieldTerminalPath: *fp, value: value.([]*resource_change_log.ResourceChangeLog)}
	case ListResourceChangeLogsResponse_FieldPathSelectorNextPageToken:
		return &ListResourceChangeLogsResponse_FieldTerminalPathValue{ListResourceChangeLogsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
		return &ListResourceChangeLogsResponse_FieldTerminalPathValue{ListResourceChangeLogsResponse_FieldTerminalPath: *fp, value: value.([]*rpc.Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fp.selector))
	}
}

func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListResourceChangeLogsResponse_FieldPathArrayOfValues {
	fpaov := &ListResourceChangeLogsResponse_FieldTerminalPathArrayOfValues{ListResourceChangeLogsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
		return &ListResourceChangeLogsResponse_FieldTerminalPathArrayOfValues{ListResourceChangeLogsResponse_FieldTerminalPath: *fp, values: values.([][]*resource_change_log.ResourceChangeLog)}
	case ListResourceChangeLogsResponse_FieldPathSelectorNextPageToken:
		return &ListResourceChangeLogsResponse_FieldTerminalPathArrayOfValues{ListResourceChangeLogsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
		return &ListResourceChangeLogsResponse_FieldTerminalPathArrayOfValues{ListResourceChangeLogsResponse_FieldTerminalPath: *fp, values: values.([][]*rpc.Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListResourceChangeLogsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
		return &ListResourceChangeLogsResponse_FieldTerminalPathArrayItemValue{ListResourceChangeLogsResponse_FieldTerminalPath: *fp, value: value.(*resource_change_log.ResourceChangeLog)}
	case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
		return &ListResourceChangeLogsResponse_FieldTerminalPathArrayItemValue{ListResourceChangeLogsResponse_FieldTerminalPath: *fp, value: value.(*rpc.Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fp.selector))
	}
}

func (fp *ListResourceChangeLogsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListResourceChangeLogsResponse_FieldSubPath struct {
	selector ListResourceChangeLogsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListResourceChangeLogsResponse_FieldPath = (*ListResourceChangeLogsResponse_FieldSubPath)(nil)

func (fps *ListResourceChangeLogsResponse_FieldSubPath) Selector() ListResourceChangeLogsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListResourceChangeLogsResponse_FieldSubPath) AsResourceChangeLogsSubPath() (resource_change_log.ResourceChangeLog_FieldPath, bool) {
	res, ok := fps.subPath.(resource_change_log.ResourceChangeLog_FieldPath)
	return res, ok
}
func (fps *ListResourceChangeLogsResponse_FieldSubPath) AsExecutionErrorsSubPath() (rpc.Status_FieldPath, bool) {
	res, ok := fps.subPath.(rpc.Status_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListResourceChangeLogsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListResourceChangeLogsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListResourceChangeLogsResponse
func (fps *ListResourceChangeLogsResponse_FieldSubPath) Get(source *ListResourceChangeLogsResponse) (values []interface{}) {
	if asResourceChangeLogFieldPath, ok := fps.AsResourceChangeLogsSubPath(); ok {
		for _, item := range source.GetResourceChangeLogs() {
			values = append(values, asResourceChangeLogFieldPath.Get(item)...)
		}
	} else if asStatusFieldPath, ok := fps.AsExecutionErrorsSubPath(); ok {
		for _, item := range source.GetExecutionErrors() {
			values = append(values, asStatusFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListResourceChangeLogsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListResourceChangeLogsResponse))
}

// GetSingle returns value of selected field from source ListResourceChangeLogsResponse
func (fps *ListResourceChangeLogsResponse_FieldSubPath) GetSingle(source *ListResourceChangeLogsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
		if len(source.GetResourceChangeLogs()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResourceChangeLogs()[0])
	case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
		if len(source.GetExecutionErrors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetExecutionErrors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fps.selector))
	}
}

func (fps *ListResourceChangeLogsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListResourceChangeLogsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListResourceChangeLogsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListResourceChangeLogsResponse_FieldSubPath) ClearValue(item *ListResourceChangeLogsResponse) {
	if item != nil {
		switch fps.selector {
		case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
			for _, subItem := range item.ResourceChangeLogs {
				fps.subPath.ClearValueRaw(subItem)
			}
		case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
			for _, subItem := range item.ExecutionErrors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListResourceChangeLogsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListResourceChangeLogsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListResourceChangeLogsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListResourceChangeLogsResponse_FieldSubPath) WithIValue(value interface{}) ListResourceChangeLogsResponse_FieldPathValue {
	return &ListResourceChangeLogsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListResourceChangeLogsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListResourceChangeLogsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListResourceChangeLogsResponse_FieldPathArrayOfValues {
	return &ListResourceChangeLogsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListResourceChangeLogsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListResourceChangeLogsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListResourceChangeLogsResponse_FieldPathArrayItemValue {
	return &ListResourceChangeLogsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListResourceChangeLogsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListResourceChangeLogsResponse_FieldPathValue allows storing values for ListResourceChangeLogsResponse fields according to their type
type ListResourceChangeLogsResponse_FieldPathValue interface {
	ListResourceChangeLogsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListResourceChangeLogsResponse)
	CompareWith(*ListResourceChangeLogsResponse) (cmp int, comparable bool)
}

func ParseListResourceChangeLogsResponse_FieldPathValue(pathStr, valueStr string) (ListResourceChangeLogsResponse_FieldPathValue, error) {
	fp, err := ParseListResourceChangeLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListResourceChangeLogsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListResourceChangeLogsResponse_FieldPathValue), nil
}

func MustParseListResourceChangeLogsResponse_FieldPathValue(pathStr, valueStr string) ListResourceChangeLogsResponse_FieldPathValue {
	fpv, err := ParseListResourceChangeLogsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListResourceChangeLogsResponse_FieldTerminalPathValue struct {
	ListResourceChangeLogsResponse_FieldTerminalPath
	value interface{}
}

var _ ListResourceChangeLogsResponse_FieldPathValue = (*ListResourceChangeLogsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListResourceChangeLogsResponse' as interface{}
func (fpv *ListResourceChangeLogsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListResourceChangeLogsResponse_FieldTerminalPathValue) AsResourceChangeLogsValue() ([]*resource_change_log.ResourceChangeLog, bool) {
	res, ok := fpv.value.([]*resource_change_log.ResourceChangeLog)
	return res, ok
}
func (fpv *ListResourceChangeLogsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ListResourceChangeLogsResponse_FieldTerminalPathValue) AsExecutionErrorsValue() ([]*rpc.Status, bool) {
	res, ok := fpv.value.([]*rpc.Status)
	return res, ok
}

// SetTo stores value for selected field for object ListResourceChangeLogsResponse
func (fpv *ListResourceChangeLogsResponse_FieldTerminalPathValue) SetTo(target **ListResourceChangeLogsResponse) {
	if *target == nil {
		*target = new(ListResourceChangeLogsResponse)
	}
	switch fpv.selector {
	case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
		(*target).ResourceChangeLogs = fpv.value.([]*resource_change_log.ResourceChangeLog)
	case ListResourceChangeLogsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(string)
	case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
		(*target).ExecutionErrors = fpv.value.([]*rpc.Status)
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fpv.selector))
	}
}

func (fpv *ListResourceChangeLogsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListResourceChangeLogsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListResourceChangeLogsResponse_FieldTerminalPathValue' with the value under path in 'ListResourceChangeLogsResponse'.
func (fpv *ListResourceChangeLogsResponse_FieldTerminalPathValue) CompareWith(source *ListResourceChangeLogsResponse) (int, bool) {
	switch fpv.selector {
	case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
		return 0, false
	case ListResourceChangeLogsResponse_FieldPathSelectorNextPageToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetNextPageToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fpv.selector))
	}
}

func (fpv *ListResourceChangeLogsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListResourceChangeLogsResponse))
}

type ListResourceChangeLogsResponse_FieldSubPathValue struct {
	ListResourceChangeLogsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListResourceChangeLogsResponse_FieldPathValue = (*ListResourceChangeLogsResponse_FieldSubPathValue)(nil)

func (fpvs *ListResourceChangeLogsResponse_FieldSubPathValue) AsResourceChangeLogsPathValue() (resource_change_log.ResourceChangeLog_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(resource_change_log.ResourceChangeLog_FieldPathValue)
	return res, ok
}
func (fpvs *ListResourceChangeLogsResponse_FieldSubPathValue) AsExecutionErrorsPathValue() (rpc.Status_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(rpc.Status_FieldPathValue)
	return res, ok
}

func (fpvs *ListResourceChangeLogsResponse_FieldSubPathValue) SetTo(target **ListResourceChangeLogsResponse) {
	if *target == nil {
		*target = new(ListResourceChangeLogsResponse)
	}
	switch fpvs.Selector() {
	case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
		panic("FieldPath setter is unsupported for array subpaths")
	case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListResourceChangeLogsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListResourceChangeLogsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListResourceChangeLogsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListResourceChangeLogsResponse_FieldSubPathValue) CompareWith(source *ListResourceChangeLogsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
		return 0, false // repeated field
	case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListResourceChangeLogsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListResourceChangeLogsResponse))
}

// ListResourceChangeLogsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListResourceChangeLogsResponse according to their type
// Present only for array (repeated) types.
type ListResourceChangeLogsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListResourceChangeLogsResponse_FieldPath
	ContainsValue(*ListResourceChangeLogsResponse) bool
}

// ParseListResourceChangeLogsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListResourceChangeLogsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListResourceChangeLogsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListResourceChangeLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListResourceChangeLogsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListResourceChangeLogsResponse_FieldPathArrayItemValue), nil
}

func MustParseListResourceChangeLogsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListResourceChangeLogsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListResourceChangeLogsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListResourceChangeLogsResponse_FieldTerminalPathArrayItemValue struct {
	ListResourceChangeLogsResponse_FieldTerminalPath
	value interface{}
}

var _ ListResourceChangeLogsResponse_FieldPathArrayItemValue = (*ListResourceChangeLogsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListResourceChangeLogsResponse as interface{}
func (fpaiv *ListResourceChangeLogsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListResourceChangeLogsResponse_FieldTerminalPathArrayItemValue) AsResourceChangeLogsItemValue() (*resource_change_log.ResourceChangeLog, bool) {
	res, ok := fpaiv.value.(*resource_change_log.ResourceChangeLog)
	return res, ok
}
func (fpaiv *ListResourceChangeLogsResponse_FieldTerminalPathArrayItemValue) AsExecutionErrorsItemValue() (*rpc.Status, bool) {
	res, ok := fpaiv.value.(*rpc.Status)
	return res, ok
}

func (fpaiv *ListResourceChangeLogsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListResourceChangeLogsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListResourceChangeLogsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListResourceChangeLogsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListResourceChangeLogsResponse'
func (fpaiv *ListResourceChangeLogsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListResourceChangeLogsResponse) bool {
	slice := fpaiv.ListResourceChangeLogsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListResourceChangeLogsResponse_FieldSubPathArrayItemValue struct {
	ListResourceChangeLogsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListResourceChangeLogsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListResourceChangeLogsResponse_FieldSubPathArrayItemValue) AsResourceChangeLogsPathItemValue() (resource_change_log.ResourceChangeLog_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(resource_change_log.ResourceChangeLog_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ListResourceChangeLogsResponse_FieldSubPathArrayItemValue) AsExecutionErrorsPathItemValue() (rpc.Status_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(rpc.Status_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListResourceChangeLogsResponse'
func (fpaivs *ListResourceChangeLogsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListResourceChangeLogsResponse) bool {
	switch fpaivs.Selector() {
	case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
		return false // repeated/map field
	case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse: %d", fpaivs.Selector()))
	}
}

// ListResourceChangeLogsResponse_FieldPathArrayOfValues allows storing slice of values for ListResourceChangeLogsResponse fields according to their type
type ListResourceChangeLogsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListResourceChangeLogsResponse_FieldPath
}

func ParseListResourceChangeLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListResourceChangeLogsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListResourceChangeLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListResourceChangeLogsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListResourceChangeLogsResponse_FieldPathArrayOfValues), nil
}

func MustParseListResourceChangeLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListResourceChangeLogsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListResourceChangeLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListResourceChangeLogsResponse_FieldTerminalPathArrayOfValues struct {
	ListResourceChangeLogsResponse_FieldTerminalPath
	values interface{}
}

var _ ListResourceChangeLogsResponse_FieldPathArrayOfValues = (*ListResourceChangeLogsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListResourceChangeLogsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListResourceChangeLogsResponse_FieldPathSelectorResourceChangeLogs:
		for _, v := range fpaov.values.([][]*resource_change_log.ResourceChangeLog) {
			values = append(values, v)
		}
	case ListResourceChangeLogsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ListResourceChangeLogsResponse_FieldPathSelectorExecutionErrors:
		for _, v := range fpaov.values.([][]*rpc.Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListResourceChangeLogsResponse_FieldTerminalPathArrayOfValues) AsResourceChangeLogsArrayOfValues() ([][]*resource_change_log.ResourceChangeLog, bool) {
	res, ok := fpaov.values.([][]*resource_change_log.ResourceChangeLog)
	return res, ok
}
func (fpaov *ListResourceChangeLogsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ListResourceChangeLogsResponse_FieldTerminalPathArrayOfValues) AsExecutionErrorsArrayOfValues() ([][]*rpc.Status, bool) {
	res, ok := fpaov.values.([][]*rpc.Status)
	return res, ok
}

type ListResourceChangeLogsResponse_FieldSubPathArrayOfValues struct {
	ListResourceChangeLogsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListResourceChangeLogsResponse_FieldPathArrayOfValues = (*ListResourceChangeLogsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListResourceChangeLogsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListResourceChangeLogsResponse_FieldSubPathArrayOfValues) AsResourceChangeLogsPathArrayOfValues() (resource_change_log.ResourceChangeLog_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(resource_change_log.ResourceChangeLog_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ListResourceChangeLogsResponse_FieldSubPathArrayOfValues) AsExecutionErrorsPathArrayOfValues() (rpc.Status_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(rpc.Status_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListResourceChangeLogsResponseErrorDetails_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListResourceChangeLogsResponseErrorDetails_FieldPathSelector
	Get(source *ListResourceChangeLogsResponse_ErrorDetails) []interface{}
	GetSingle(source *ListResourceChangeLogsResponse_ErrorDetails) (interface{}, bool)
	ClearValue(item *ListResourceChangeLogsResponse_ErrorDetails)

	// Those methods build corresponding ListResourceChangeLogsResponseErrorDetails_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListResourceChangeLogsResponseErrorDetails_FieldPathValue
	WithIArrayOfValues(values interface{}) ListResourceChangeLogsResponseErrorDetails_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListResourceChangeLogsResponseErrorDetails_FieldPathArrayItemValue
}

type ListResourceChangeLogsResponseErrorDetails_FieldPathSelector int32

const (
	ListResourceChangeLogsResponseErrorDetails_FieldPathSelectorRegionId ListResourceChangeLogsResponseErrorDetails_FieldPathSelector = 0
)

func (s ListResourceChangeLogsResponseErrorDetails_FieldPathSelector) String() string {
	switch s {
	case ListResourceChangeLogsResponseErrorDetails_FieldPathSelectorRegionId:
		return "region_id"
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse_ErrorDetails: %d", s))
	}
}

func BuildListResourceChangeLogsResponseErrorDetails_FieldPath(fp gotenobject.RawFieldPath) (ListResourceChangeLogsResponseErrorDetails_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListResourceChangeLogsResponse_ErrorDetails")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "region_id", "regionId", "region-id":
			return &ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath{selector: ListResourceChangeLogsResponseErrorDetails_FieldPathSelectorRegionId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListResourceChangeLogsResponse_ErrorDetails", fp)
}

func ParseListResourceChangeLogsResponseErrorDetails_FieldPath(rawField string) (ListResourceChangeLogsResponseErrorDetails_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListResourceChangeLogsResponseErrorDetails_FieldPath(fp)
}

func MustParseListResourceChangeLogsResponseErrorDetails_FieldPath(rawField string) ListResourceChangeLogsResponseErrorDetails_FieldPath {
	fp, err := ParseListResourceChangeLogsResponseErrorDetails_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath struct {
	selector ListResourceChangeLogsResponseErrorDetails_FieldPathSelector
}

var _ ListResourceChangeLogsResponseErrorDetails_FieldPath = (*ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath)(nil)

func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) Selector() ListResourceChangeLogsResponseErrorDetails_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListResourceChangeLogsResponse_ErrorDetails
func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) Get(source *ListResourceChangeLogsResponse_ErrorDetails) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListResourceChangeLogsResponseErrorDetails_FieldPathSelectorRegionId:
			values = append(values, source.RegionId)
		default:
			panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse_ErrorDetails: %d", fp.selector))
		}
	}
	return
}

func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListResourceChangeLogsResponse_ErrorDetails))
}

// GetSingle returns value pointed by specific field of from source ListResourceChangeLogsResponse_ErrorDetails
func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) GetSingle(source *ListResourceChangeLogsResponse_ErrorDetails) (interface{}, bool) {
	switch fp.selector {
	case ListResourceChangeLogsResponseErrorDetails_FieldPathSelectorRegionId:
		return source.GetRegionId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse_ErrorDetails: %d", fp.selector))
	}
}

func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListResourceChangeLogsResponse_ErrorDetails))
}

// GetDefault returns a default value of the field type
func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListResourceChangeLogsResponseErrorDetails_FieldPathSelectorRegionId:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse_ErrorDetails: %d", fp.selector))
	}
}

func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) ClearValue(item *ListResourceChangeLogsResponse_ErrorDetails) {
	if item != nil {
		switch fp.selector {
		case ListResourceChangeLogsResponseErrorDetails_FieldPathSelectorRegionId:
			item.RegionId = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse_ErrorDetails: %d", fp.selector))
		}
	}
}

func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListResourceChangeLogsResponse_ErrorDetails))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListResourceChangeLogsResponseErrorDetails_FieldPathSelectorRegionId
}

func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) WithIValue(value interface{}) ListResourceChangeLogsResponseErrorDetails_FieldPathValue {
	switch fp.selector {
	case ListResourceChangeLogsResponseErrorDetails_FieldPathSelectorRegionId:
		return &ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathValue{ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse_ErrorDetails: %d", fp.selector))
	}
}

func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListResourceChangeLogsResponseErrorDetails_FieldPathArrayOfValues {
	fpaov := &ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathArrayOfValues{ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListResourceChangeLogsResponseErrorDetails_FieldPathSelectorRegionId:
		return &ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathArrayOfValues{ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse_ErrorDetails: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListResourceChangeLogsResponseErrorDetails_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse_ErrorDetails: %d", fp.selector))
	}
}

func (fp *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListResourceChangeLogsResponseErrorDetails_FieldPathValue allows storing values for ErrorDetails fields according to their type
type ListResourceChangeLogsResponseErrorDetails_FieldPathValue interface {
	ListResourceChangeLogsResponseErrorDetails_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListResourceChangeLogsResponse_ErrorDetails)
	CompareWith(*ListResourceChangeLogsResponse_ErrorDetails) (cmp int, comparable bool)
}

func ParseListResourceChangeLogsResponseErrorDetails_FieldPathValue(pathStr, valueStr string) (ListResourceChangeLogsResponseErrorDetails_FieldPathValue, error) {
	fp, err := ParseListResourceChangeLogsResponseErrorDetails_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ErrorDetails field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListResourceChangeLogsResponseErrorDetails_FieldPathValue), nil
}

func MustParseListResourceChangeLogsResponseErrorDetails_FieldPathValue(pathStr, valueStr string) ListResourceChangeLogsResponseErrorDetails_FieldPathValue {
	fpv, err := ParseListResourceChangeLogsResponseErrorDetails_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathValue struct {
	ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath
	value interface{}
}

var _ ListResourceChangeLogsResponseErrorDetails_FieldPathValue = (*ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ErrorDetails' as interface{}
func (fpv *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathValue) AsRegionIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ErrorDetails
func (fpv *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathValue) SetTo(target **ListResourceChangeLogsResponse_ErrorDetails) {
	if *target == nil {
		*target = new(ListResourceChangeLogsResponse_ErrorDetails)
	}
	switch fpv.selector {
	case ListResourceChangeLogsResponseErrorDetails_FieldPathSelectorRegionId:
		(*target).RegionId = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse_ErrorDetails: %d", fpv.selector))
	}
}

func (fpv *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListResourceChangeLogsResponse_ErrorDetails)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathValue' with the value under path in 'ListResourceChangeLogsResponse_ErrorDetails'.
func (fpv *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathValue) CompareWith(source *ListResourceChangeLogsResponse_ErrorDetails) (int, bool) {
	switch fpv.selector {
	case ListResourceChangeLogsResponseErrorDetails_FieldPathSelectorRegionId:
		leftValue := fpv.value.(string)
		rightValue := source.GetRegionId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListResourceChangeLogsResponse_ErrorDetails: %d", fpv.selector))
	}
}

func (fpv *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListResourceChangeLogsResponse_ErrorDetails))
}

// ListResourceChangeLogsResponseErrorDetails_FieldPathArrayItemValue allows storing single item in Path-specific values for ErrorDetails according to their type
// Present only for array (repeated) types.
type ListResourceChangeLogsResponseErrorDetails_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListResourceChangeLogsResponseErrorDetails_FieldPath
	ContainsValue(*ListResourceChangeLogsResponse_ErrorDetails) bool
}

// ParseListResourceChangeLogsResponseErrorDetails_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListResourceChangeLogsResponseErrorDetails_FieldPathArrayItemValue(pathStr, valueStr string) (ListResourceChangeLogsResponseErrorDetails_FieldPathArrayItemValue, error) {
	fp, err := ParseListResourceChangeLogsResponseErrorDetails_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ErrorDetails field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListResourceChangeLogsResponseErrorDetails_FieldPathArrayItemValue), nil
}

func MustParseListResourceChangeLogsResponseErrorDetails_FieldPathArrayItemValue(pathStr, valueStr string) ListResourceChangeLogsResponseErrorDetails_FieldPathArrayItemValue {
	fpaiv, err := ParseListResourceChangeLogsResponseErrorDetails_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathArrayItemValue struct {
	ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath
	value interface{}
}

var _ ListResourceChangeLogsResponseErrorDetails_FieldPathArrayItemValue = (*ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListResourceChangeLogsResponse_ErrorDetails as interface{}
func (fpaiv *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathArrayItemValue) GetSingle(source *ListResourceChangeLogsResponse_ErrorDetails) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListResourceChangeLogsResponse_ErrorDetails))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ErrorDetails'
func (fpaiv *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathArrayItemValue) ContainsValue(source *ListResourceChangeLogsResponse_ErrorDetails) bool {
	slice := fpaiv.ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListResourceChangeLogsResponseErrorDetails_FieldPathArrayOfValues allows storing slice of values for ErrorDetails fields according to their type
type ListResourceChangeLogsResponseErrorDetails_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListResourceChangeLogsResponseErrorDetails_FieldPath
}

func ParseListResourceChangeLogsResponseErrorDetails_FieldPathArrayOfValues(pathStr, valuesStr string) (ListResourceChangeLogsResponseErrorDetails_FieldPathArrayOfValues, error) {
	fp, err := ParseListResourceChangeLogsResponseErrorDetails_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ErrorDetails field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListResourceChangeLogsResponseErrorDetails_FieldPathArrayOfValues), nil
}

func MustParseListResourceChangeLogsResponseErrorDetails_FieldPathArrayOfValues(pathStr, valuesStr string) ListResourceChangeLogsResponseErrorDetails_FieldPathArrayOfValues {
	fpaov, err := ParseListResourceChangeLogsResponseErrorDetails_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathArrayOfValues struct {
	ListResourceChangeLogsResponseErrorDetails_FieldTerminalPath
	values interface{}
}

var _ ListResourceChangeLogsResponseErrorDetails_FieldPathArrayOfValues = (*ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListResourceChangeLogsResponseErrorDetails_FieldPathSelectorRegionId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListResourceChangeLogsResponseErrorDetails_FieldTerminalPathArrayOfValues) AsRegionIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreatePreCommittedResourceChangeLogsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreatePreCommittedResourceChangeLogsRequest_FieldPathSelector
	Get(source *CreatePreCommittedResourceChangeLogsRequest) []interface{}
	GetSingle(source *CreatePreCommittedResourceChangeLogsRequest) (interface{}, bool)
	ClearValue(item *CreatePreCommittedResourceChangeLogsRequest)

	// Those methods build corresponding CreatePreCommittedResourceChangeLogsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreatePreCommittedResourceChangeLogsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayItemValue
}

type CreatePreCommittedResourceChangeLogsRequest_FieldPathSelector int32

const (
	CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorRequestId      CreatePreCommittedResourceChangeLogsRequest_FieldPathSelector = 0
	CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTimestamp      CreatePreCommittedResourceChangeLogsRequest_FieldPathSelector = 1
	CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication CreatePreCommittedResourceChangeLogsRequest_FieldPathSelector = 2
	CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService        CreatePreCommittedResourceChangeLogsRequest_FieldPathSelector = 3
	CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction    CreatePreCommittedResourceChangeLogsRequest_FieldPathSelector = 4
	CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges        CreatePreCommittedResourceChangeLogsRequest_FieldPathSelector = 5
)

func (s CreatePreCommittedResourceChangeLogsRequest_FieldPathSelector) String() string {
	switch s {
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorRequestId:
		return "request_id"
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTimestamp:
		return "timestamp"
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
		return "authentication"
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
		return "service"
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
		return "transaction"
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
		return "changes"
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", s))
	}
}

func BuildCreatePreCommittedResourceChangeLogsRequest_FieldPath(fp gotenobject.RawFieldPath) (CreatePreCommittedResourceChangeLogsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreatePreCommittedResourceChangeLogsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "request_id", "requestId", "request-id":
			return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorRequestId}, nil
		case "timestamp":
			return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTimestamp}, nil
		case "authentication":
			return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication}, nil
		case "service":
			return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService}, nil
		case "transaction":
			return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction}, nil
		case "changes":
			return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges}, nil
		}
	} else {
		switch fp[0] {
		case "authentication":
			if subpath, err := audit_common.BuildAuthentication_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreatePreCommittedResourceChangeLogsRequest_FieldSubPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication, subPath: subpath}, nil
			}
		case "service":
			if subpath, err := audit_common.BuildServiceData_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreatePreCommittedResourceChangeLogsRequest_FieldSubPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService, subPath: subpath}, nil
			}
		case "transaction":
			if subpath, err := resource_change_log.BuildResourceChangeLogTransactionInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreatePreCommittedResourceChangeLogsRequest_FieldSubPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction, subPath: subpath}, nil
			}
		case "changes":
			if subpath, err := resource_change_log.BuildResourceChangeLogResourceChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreatePreCommittedResourceChangeLogsRequest_FieldSubPath{selector: CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreatePreCommittedResourceChangeLogsRequest", fp)
}

func ParseCreatePreCommittedResourceChangeLogsRequest_FieldPath(rawField string) (CreatePreCommittedResourceChangeLogsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreatePreCommittedResourceChangeLogsRequest_FieldPath(fp)
}

func MustParseCreatePreCommittedResourceChangeLogsRequest_FieldPath(rawField string) CreatePreCommittedResourceChangeLogsRequest_FieldPath {
	fp, err := ParseCreatePreCommittedResourceChangeLogsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath struct {
	selector CreatePreCommittedResourceChangeLogsRequest_FieldPathSelector
}

var _ CreatePreCommittedResourceChangeLogsRequest_FieldPath = (*CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath)(nil)

func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) Selector() CreatePreCommittedResourceChangeLogsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreatePreCommittedResourceChangeLogsRequest
func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) Get(source *CreatePreCommittedResourceChangeLogsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorRequestId:
			values = append(values, source.RequestId)
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTimestamp:
			if source.Timestamp != nil {
				values = append(values, source.Timestamp)
			}
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
			if source.Authentication != nil {
				values = append(values, source.Authentication)
			}
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
			if source.Service != nil {
				values = append(values, source.Service)
			}
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
			if source.Transaction != nil {
				values = append(values, source.Transaction)
			}
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
			for _, value := range source.GetChanges() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreatePreCommittedResourceChangeLogsRequest))
}

// GetSingle returns value pointed by specific field of from source CreatePreCommittedResourceChangeLogsRequest
func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) GetSingle(source *CreatePreCommittedResourceChangeLogsRequest) (interface{}, bool) {
	switch fp.selector {
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorRequestId:
		return source.GetRequestId(), source != nil
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTimestamp:
		res := source.GetTimestamp()
		return res, res != nil
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
		res := source.GetAuthentication()
		return res, res != nil
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
		res := source.GetService()
		return res, res != nil
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
		res := source.GetTransaction()
		return res, res != nil
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
		res := source.GetChanges()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fp.selector))
	}
}

func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreatePreCommittedResourceChangeLogsRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorRequestId:
		return uint64(0)
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTimestamp:
		return (*timestamp.Timestamp)(nil)
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
		return (*audit_common.Authentication)(nil)
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
		return (*audit_common.ServiceData)(nil)
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
		return (*resource_change_log.ResourceChangeLog_TransactionInfo)(nil)
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
		return ([]*resource_change_log.ResourceChangeLog_ResourceChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fp.selector))
	}
}

func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) ClearValue(item *CreatePreCommittedResourceChangeLogsRequest) {
	if item != nil {
		switch fp.selector {
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorRequestId:
			item.RequestId = uint64(0)
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTimestamp:
			item.Timestamp = nil
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
			item.Authentication = nil
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
			item.Service = nil
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
			item.Transaction = nil
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
			item.Changes = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fp.selector))
		}
	}
}

func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreatePreCommittedResourceChangeLogsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorRequestId ||
		fp.selector == CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTimestamp
}

func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) WithIValue(value interface{}) CreatePreCommittedResourceChangeLogsRequest_FieldPathValue {
	switch fp.selector {
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorRequestId:
		return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue{CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.(uint64)}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTimestamp:
		return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue{CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
		return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue{CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.(*audit_common.Authentication)}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
		return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue{CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.(*audit_common.ServiceData)}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
		return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue{CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.(*resource_change_log.ResourceChangeLog_TransactionInfo)}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
		return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue{CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.([]*resource_change_log.ResourceChangeLog_ResourceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fp.selector))
	}
}

func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayOfValues {
	fpaov := &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues{CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorRequestId:
		return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues{CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath: *fp, values: values.([]uint64)}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTimestamp:
		return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues{CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
		return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues{CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath: *fp, values: values.([]*audit_common.Authentication)}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
		return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues{CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath: *fp, values: values.([]*audit_common.ServiceData)}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
		return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues{CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath: *fp, values: values.([]*resource_change_log.ResourceChangeLog_TransactionInfo)}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
		return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues{CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath: *fp, values: values.([][]*resource_change_log.ResourceChangeLog_ResourceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
		return &CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayItemValue{CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath: *fp, value: value.(*resource_change_log.ResourceChangeLog_ResourceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fp.selector))
	}
}

func (fp *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreatePreCommittedResourceChangeLogsRequest_FieldSubPath struct {
	selector CreatePreCommittedResourceChangeLogsRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreatePreCommittedResourceChangeLogsRequest_FieldPath = (*CreatePreCommittedResourceChangeLogsRequest_FieldSubPath)(nil)

func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) Selector() CreatePreCommittedResourceChangeLogsRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) AsAuthenticationSubPath() (audit_common.Authentication_FieldPath, bool) {
	res, ok := fps.subPath.(audit_common.Authentication_FieldPath)
	return res, ok
}
func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) AsServiceSubPath() (audit_common.ServiceData_FieldPath, bool) {
	res, ok := fps.subPath.(audit_common.ServiceData_FieldPath)
	return res, ok
}
func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) AsTransactionSubPath() (resource_change_log.ResourceChangeLogTransactionInfo_FieldPath, bool) {
	res, ok := fps.subPath.(resource_change_log.ResourceChangeLogTransactionInfo_FieldPath)
	return res, ok
}
func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) AsChangesSubPath() (resource_change_log.ResourceChangeLogResourceChange_FieldPath, bool) {
	res, ok := fps.subPath.(resource_change_log.ResourceChangeLogResourceChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreatePreCommittedResourceChangeLogsRequest
func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) Get(source *CreatePreCommittedResourceChangeLogsRequest) (values []interface{}) {
	if asAuthenticationFieldPath, ok := fps.AsAuthenticationSubPath(); ok {
		values = append(values, asAuthenticationFieldPath.Get(source.GetAuthentication())...)
	} else if asServiceDataFieldPath, ok := fps.AsServiceSubPath(); ok {
		values = append(values, asServiceDataFieldPath.Get(source.GetService())...)
	} else if asTransactionInfoFieldPath, ok := fps.AsTransactionSubPath(); ok {
		values = append(values, asTransactionInfoFieldPath.Get(source.GetTransaction())...)
	} else if asResourceChangeFieldPath, ok := fps.AsChangesSubPath(); ok {
		for _, item := range source.GetChanges() {
			values = append(values, asResourceChangeFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fps.selector))
	}
	return
}

func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreatePreCommittedResourceChangeLogsRequest))
}

// GetSingle returns value of selected field from source CreatePreCommittedResourceChangeLogsRequest
func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) GetSingle(source *CreatePreCommittedResourceChangeLogsRequest) (interface{}, bool) {
	switch fps.selector {
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
		if source.GetAuthentication() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAuthentication())
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
		if source.GetService() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetService())
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
		if source.GetTransaction() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTransaction())
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
		if len(source.GetChanges()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetChanges()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fps.selector))
	}
}

func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreatePreCommittedResourceChangeLogsRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) ClearValue(item *CreatePreCommittedResourceChangeLogsRequest) {
	if item != nil {
		switch fps.selector {
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
			fps.subPath.ClearValueRaw(item.Authentication)
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
			fps.subPath.ClearValueRaw(item.Service)
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
			fps.subPath.ClearValueRaw(item.Transaction)
		case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
			for _, subItem := range item.Changes {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fps.selector))
		}
	}
}

func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreatePreCommittedResourceChangeLogsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) WithIValue(value interface{}) CreatePreCommittedResourceChangeLogsRequest_FieldPathValue {
	return &CreatePreCommittedResourceChangeLogsRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayOfValues {
	return &CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayItemValue {
	return &CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreatePreCommittedResourceChangeLogsRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreatePreCommittedResourceChangeLogsRequest_FieldPathValue allows storing values for CreatePreCommittedResourceChangeLogsRequest fields according to their type
type CreatePreCommittedResourceChangeLogsRequest_FieldPathValue interface {
	CreatePreCommittedResourceChangeLogsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreatePreCommittedResourceChangeLogsRequest)
	CompareWith(*CreatePreCommittedResourceChangeLogsRequest) (cmp int, comparable bool)
}

func ParseCreatePreCommittedResourceChangeLogsRequest_FieldPathValue(pathStr, valueStr string) (CreatePreCommittedResourceChangeLogsRequest_FieldPathValue, error) {
	fp, err := ParseCreatePreCommittedResourceChangeLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePreCommittedResourceChangeLogsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreatePreCommittedResourceChangeLogsRequest_FieldPathValue), nil
}

func MustParseCreatePreCommittedResourceChangeLogsRequest_FieldPathValue(pathStr, valueStr string) CreatePreCommittedResourceChangeLogsRequest_FieldPathValue {
	fpv, err := ParseCreatePreCommittedResourceChangeLogsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue struct {
	CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePreCommittedResourceChangeLogsRequest_FieldPathValue = (*CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreatePreCommittedResourceChangeLogsRequest' as interface{}
func (fpv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue) AsRequestIdValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}
func (fpv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue) AsTimestampValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue) AsAuthenticationValue() (*audit_common.Authentication, bool) {
	res, ok := fpv.value.(*audit_common.Authentication)
	return res, ok
}
func (fpv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue) AsServiceValue() (*audit_common.ServiceData, bool) {
	res, ok := fpv.value.(*audit_common.ServiceData)
	return res, ok
}
func (fpv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue) AsTransactionValue() (*resource_change_log.ResourceChangeLog_TransactionInfo, bool) {
	res, ok := fpv.value.(*resource_change_log.ResourceChangeLog_TransactionInfo)
	return res, ok
}
func (fpv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue) AsChangesValue() ([]*resource_change_log.ResourceChangeLog_ResourceChange, bool) {
	res, ok := fpv.value.([]*resource_change_log.ResourceChangeLog_ResourceChange)
	return res, ok
}

// SetTo stores value for selected field for object CreatePreCommittedResourceChangeLogsRequest
func (fpv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue) SetTo(target **CreatePreCommittedResourceChangeLogsRequest) {
	if *target == nil {
		*target = new(CreatePreCommittedResourceChangeLogsRequest)
	}
	switch fpv.selector {
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorRequestId:
		(*target).RequestId = fpv.value.(uint64)
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTimestamp:
		(*target).Timestamp = fpv.value.(*timestamp.Timestamp)
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
		(*target).Authentication = fpv.value.(*audit_common.Authentication)
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
		(*target).Service = fpv.value.(*audit_common.ServiceData)
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
		(*target).Transaction = fpv.value.(*resource_change_log.ResourceChangeLog_TransactionInfo)
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
		(*target).Changes = fpv.value.([]*resource_change_log.ResourceChangeLog_ResourceChange)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePreCommittedResourceChangeLogsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue' with the value under path in 'CreatePreCommittedResourceChangeLogsRequest'.
func (fpv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue) CompareWith(source *CreatePreCommittedResourceChangeLogsRequest) (int, bool) {
	switch fpv.selector {
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorRequestId:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetRequestId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTimestamp:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetTimestamp()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
		return 0, false
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
		return 0, false
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
		return 0, false
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreatePreCommittedResourceChangeLogsRequest))
}

type CreatePreCommittedResourceChangeLogsRequest_FieldSubPathValue struct {
	CreatePreCommittedResourceChangeLogsRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreatePreCommittedResourceChangeLogsRequest_FieldPathValue = (*CreatePreCommittedResourceChangeLogsRequest_FieldSubPathValue)(nil)

func (fpvs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathValue) AsAuthenticationPathValue() (audit_common.Authentication_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(audit_common.Authentication_FieldPathValue)
	return res, ok
}
func (fpvs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathValue) AsServicePathValue() (audit_common.ServiceData_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(audit_common.ServiceData_FieldPathValue)
	return res, ok
}
func (fpvs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathValue) AsTransactionPathValue() (resource_change_log.ResourceChangeLogTransactionInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(resource_change_log.ResourceChangeLogTransactionInfo_FieldPathValue)
	return res, ok
}
func (fpvs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathValue) AsChangesPathValue() (resource_change_log.ResourceChangeLogResourceChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(resource_change_log.ResourceChangeLogResourceChange_FieldPathValue)
	return res, ok
}

func (fpvs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathValue) SetTo(target **CreatePreCommittedResourceChangeLogsRequest) {
	if *target == nil {
		*target = new(CreatePreCommittedResourceChangeLogsRequest)
	}
	switch fpvs.Selector() {
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
		fpvs.subPathValue.(audit_common.Authentication_FieldPathValue).SetTo(&(*target).Authentication)
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
		fpvs.subPathValue.(audit_common.ServiceData_FieldPathValue).SetTo(&(*target).Service)
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
		fpvs.subPathValue.(resource_change_log.ResourceChangeLogTransactionInfo_FieldPathValue).SetTo(&(*target).Transaction)
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePreCommittedResourceChangeLogsRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathValue) CompareWith(source *CreatePreCommittedResourceChangeLogsRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
		return fpvs.subPathValue.(audit_common.Authentication_FieldPathValue).CompareWith(source.GetAuthentication())
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
		return fpvs.subPathValue.(audit_common.ServiceData_FieldPathValue).CompareWith(source.GetService())
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
		return fpvs.subPathValue.(resource_change_log.ResourceChangeLogTransactionInfo_FieldPathValue).CompareWith(source.GetTransaction())
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreatePreCommittedResourceChangeLogsRequest))
}

// CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreatePreCommittedResourceChangeLogsRequest according to their type
// Present only for array (repeated) types.
type CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreatePreCommittedResourceChangeLogsRequest_FieldPath
	ContainsValue(*CreatePreCommittedResourceChangeLogsRequest) bool
}

// ParseCreatePreCommittedResourceChangeLogsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreatePreCommittedResourceChangeLogsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreatePreCommittedResourceChangeLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePreCommittedResourceChangeLogsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayItemValue), nil
}

func MustParseCreatePreCommittedResourceChangeLogsRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreatePreCommittedResourceChangeLogsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayItemValue struct {
	CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayItemValue = (*CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreatePreCommittedResourceChangeLogsRequest as interface{}
func (fpaiv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayItemValue) AsChangesItemValue() (*resource_change_log.ResourceChangeLog_ResourceChange, bool) {
	res, ok := fpaiv.value.(*resource_change_log.ResourceChangeLog_ResourceChange)
	return res, ok
}

func (fpaiv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreatePreCommittedResourceChangeLogsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreatePreCommittedResourceChangeLogsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePreCommittedResourceChangeLogsRequest'
func (fpaiv *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreatePreCommittedResourceChangeLogsRequest) bool {
	slice := fpaiv.CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayItemValue struct {
	CreatePreCommittedResourceChangeLogsRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayItemValue) AsAuthenticationPathItemValue() (audit_common.Authentication_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(audit_common.Authentication_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayItemValue) AsServicePathItemValue() (audit_common.ServiceData_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(audit_common.ServiceData_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayItemValue) AsTransactionPathItemValue() (resource_change_log.ResourceChangeLogTransactionInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(resource_change_log.ResourceChangeLogTransactionInfo_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayItemValue) AsChangesPathItemValue() (resource_change_log.ResourceChangeLogResourceChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(resource_change_log.ResourceChangeLogResourceChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePreCommittedResourceChangeLogsRequest'
func (fpaivs *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreatePreCommittedResourceChangeLogsRequest) bool {
	switch fpaivs.Selector() {
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
		return fpaivs.subPathItemValue.(audit_common.Authentication_FieldPathArrayItemValue).ContainsValue(source.GetAuthentication())
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
		return fpaivs.subPathItemValue.(audit_common.ServiceData_FieldPathArrayItemValue).ContainsValue(source.GetService())
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
		return fpaivs.subPathItemValue.(resource_change_log.ResourceChangeLogTransactionInfo_FieldPathArrayItemValue).ContainsValue(source.GetTransaction())
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsRequest: %d", fpaivs.Selector()))
	}
}

// CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayOfValues allows storing slice of values for CreatePreCommittedResourceChangeLogsRequest fields according to their type
type CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreatePreCommittedResourceChangeLogsRequest_FieldPath
}

func ParseCreatePreCommittedResourceChangeLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreatePreCommittedResourceChangeLogsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePreCommittedResourceChangeLogsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayOfValues), nil
}

func MustParseCreatePreCommittedResourceChangeLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreatePreCommittedResourceChangeLogsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues struct {
	CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPath
	values interface{}
}

var _ CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayOfValues = (*CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorRequestId:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTimestamp:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorAuthentication:
		for _, v := range fpaov.values.([]*audit_common.Authentication) {
			values = append(values, v)
		}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorService:
		for _, v := range fpaov.values.([]*audit_common.ServiceData) {
			values = append(values, v)
		}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorTransaction:
		for _, v := range fpaov.values.([]*resource_change_log.ResourceChangeLog_TransactionInfo) {
			values = append(values, v)
		}
	case CreatePreCommittedResourceChangeLogsRequest_FieldPathSelectorChanges:
		for _, v := range fpaov.values.([][]*resource_change_log.ResourceChangeLog_ResourceChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues) AsRequestIdArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
func (fpaov *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues) AsTimestampArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues) AsAuthenticationArrayOfValues() ([]*audit_common.Authentication, bool) {
	res, ok := fpaov.values.([]*audit_common.Authentication)
	return res, ok
}
func (fpaov *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues) AsServiceArrayOfValues() ([]*audit_common.ServiceData, bool) {
	res, ok := fpaov.values.([]*audit_common.ServiceData)
	return res, ok
}
func (fpaov *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues) AsTransactionArrayOfValues() ([]*resource_change_log.ResourceChangeLog_TransactionInfo, bool) {
	res, ok := fpaov.values.([]*resource_change_log.ResourceChangeLog_TransactionInfo)
	return res, ok
}
func (fpaov *CreatePreCommittedResourceChangeLogsRequest_FieldTerminalPathArrayOfValues) AsChangesArrayOfValues() ([][]*resource_change_log.ResourceChangeLog_ResourceChange, bool) {
	res, ok := fpaov.values.([][]*resource_change_log.ResourceChangeLog_ResourceChange)
	return res, ok
}

type CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayOfValues struct {
	CreatePreCommittedResourceChangeLogsRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreatePreCommittedResourceChangeLogsRequest_FieldPathArrayOfValues = (*CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayOfValues) AsAuthenticationPathArrayOfValues() (audit_common.Authentication_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(audit_common.Authentication_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayOfValues) AsServicePathArrayOfValues() (audit_common.ServiceData_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(audit_common.ServiceData_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayOfValues) AsTransactionPathArrayOfValues() (resource_change_log.ResourceChangeLogTransactionInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(resource_change_log.ResourceChangeLogTransactionInfo_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *CreatePreCommittedResourceChangeLogsRequest_FieldSubPathArrayOfValues) AsChangesPathArrayOfValues() (resource_change_log.ResourceChangeLogResourceChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(resource_change_log.ResourceChangeLogResourceChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreatePreCommittedResourceChangeLogsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreatePreCommittedResourceChangeLogsResponse_FieldPathSelector
	Get(source *CreatePreCommittedResourceChangeLogsResponse) []interface{}
	GetSingle(source *CreatePreCommittedResourceChangeLogsResponse) (interface{}, bool)
	ClearValue(item *CreatePreCommittedResourceChangeLogsResponse)

	// Those methods build corresponding CreatePreCommittedResourceChangeLogsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreatePreCommittedResourceChangeLogsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayItemValue
}

type CreatePreCommittedResourceChangeLogsResponse_FieldPathSelector int32

const (
	CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys CreatePreCommittedResourceChangeLogsResponse_FieldPathSelector = 0
)

func (s CreatePreCommittedResourceChangeLogsResponse_FieldPathSelector) String() string {
	switch s {
	case CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys:
		return "log_keys"
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsResponse: %d", s))
	}
}

func BuildCreatePreCommittedResourceChangeLogsResponse_FieldPath(fp gotenobject.RawFieldPath) (CreatePreCommittedResourceChangeLogsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreatePreCommittedResourceChangeLogsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "log_keys", "logKeys", "log-keys":
			return &CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath{selector: CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreatePreCommittedResourceChangeLogsResponse", fp)
}

func ParseCreatePreCommittedResourceChangeLogsResponse_FieldPath(rawField string) (CreatePreCommittedResourceChangeLogsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreatePreCommittedResourceChangeLogsResponse_FieldPath(fp)
}

func MustParseCreatePreCommittedResourceChangeLogsResponse_FieldPath(rawField string) CreatePreCommittedResourceChangeLogsResponse_FieldPath {
	fp, err := ParseCreatePreCommittedResourceChangeLogsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath struct {
	selector CreatePreCommittedResourceChangeLogsResponse_FieldPathSelector
}

var _ CreatePreCommittedResourceChangeLogsResponse_FieldPath = (*CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath)(nil)

func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) Selector() CreatePreCommittedResourceChangeLogsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreatePreCommittedResourceChangeLogsResponse
func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) Get(source *CreatePreCommittedResourceChangeLogsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys:
			for _, value := range source.GetLogKeys() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreatePreCommittedResourceChangeLogsResponse))
}

// GetSingle returns value pointed by specific field of from source CreatePreCommittedResourceChangeLogsResponse
func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) GetSingle(source *CreatePreCommittedResourceChangeLogsResponse) (interface{}, bool) {
	switch fp.selector {
	case CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys:
		res := source.GetLogKeys()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsResponse: %d", fp.selector))
	}
}

func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreatePreCommittedResourceChangeLogsResponse))
}

// GetDefault returns a default value of the field type
func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys:
		return ([][]byte)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsResponse: %d", fp.selector))
	}
}

func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) ClearValue(item *CreatePreCommittedResourceChangeLogsResponse) {
	if item != nil {
		switch fp.selector {
		case CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys:
			item.LogKeys = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsResponse: %d", fp.selector))
		}
	}
}

func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreatePreCommittedResourceChangeLogsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys
}

func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) WithIValue(value interface{}) CreatePreCommittedResourceChangeLogsResponse_FieldPathValue {
	switch fp.selector {
	case CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys:
		return &CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathValue{CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath: *fp, value: value.([][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsResponse: %d", fp.selector))
	}
}

func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayOfValues {
	fpaov := &CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathArrayOfValues{CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys:
		return &CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathArrayOfValues{CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath: *fp, values: values.([][][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys:
		return &CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathArrayItemValue{CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsResponse: %d", fp.selector))
	}
}

func (fp *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// CreatePreCommittedResourceChangeLogsResponse_FieldPathValue allows storing values for CreatePreCommittedResourceChangeLogsResponse fields according to their type
type CreatePreCommittedResourceChangeLogsResponse_FieldPathValue interface {
	CreatePreCommittedResourceChangeLogsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreatePreCommittedResourceChangeLogsResponse)
	CompareWith(*CreatePreCommittedResourceChangeLogsResponse) (cmp int, comparable bool)
}

func ParseCreatePreCommittedResourceChangeLogsResponse_FieldPathValue(pathStr, valueStr string) (CreatePreCommittedResourceChangeLogsResponse_FieldPathValue, error) {
	fp, err := ParseCreatePreCommittedResourceChangeLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePreCommittedResourceChangeLogsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreatePreCommittedResourceChangeLogsResponse_FieldPathValue), nil
}

func MustParseCreatePreCommittedResourceChangeLogsResponse_FieldPathValue(pathStr, valueStr string) CreatePreCommittedResourceChangeLogsResponse_FieldPathValue {
	fpv, err := ParseCreatePreCommittedResourceChangeLogsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathValue struct {
	CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath
	value interface{}
}

var _ CreatePreCommittedResourceChangeLogsResponse_FieldPathValue = (*CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreatePreCommittedResourceChangeLogsResponse' as interface{}
func (fpv *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathValue) AsLogKeysValue() ([][]byte, bool) {
	res, ok := fpv.value.([][]byte)
	return res, ok
}

// SetTo stores value for selected field for object CreatePreCommittedResourceChangeLogsResponse
func (fpv *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathValue) SetTo(target **CreatePreCommittedResourceChangeLogsResponse) {
	if *target == nil {
		*target = new(CreatePreCommittedResourceChangeLogsResponse)
	}
	switch fpv.selector {
	case CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys:
		(*target).LogKeys = fpv.value.([][]byte)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsResponse: %d", fpv.selector))
	}
}

func (fpv *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePreCommittedResourceChangeLogsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathValue' with the value under path in 'CreatePreCommittedResourceChangeLogsResponse'.
func (fpv *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathValue) CompareWith(source *CreatePreCommittedResourceChangeLogsResponse) (int, bool) {
	switch fpv.selector {
	case CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePreCommittedResourceChangeLogsResponse: %d", fpv.selector))
	}
}

func (fpv *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreatePreCommittedResourceChangeLogsResponse))
}

// CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for CreatePreCommittedResourceChangeLogsResponse according to their type
// Present only for array (repeated) types.
type CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreatePreCommittedResourceChangeLogsResponse_FieldPath
	ContainsValue(*CreatePreCommittedResourceChangeLogsResponse) bool
}

// ParseCreatePreCommittedResourceChangeLogsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreatePreCommittedResourceChangeLogsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseCreatePreCommittedResourceChangeLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePreCommittedResourceChangeLogsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayItemValue), nil
}

func MustParseCreatePreCommittedResourceChangeLogsResponse_FieldPathArrayItemValue(pathStr, valueStr string) CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseCreatePreCommittedResourceChangeLogsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathArrayItemValue struct {
	CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath
	value interface{}
}

var _ CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayItemValue = (*CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreatePreCommittedResourceChangeLogsResponse as interface{}
func (fpaiv *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathArrayItemValue) AsLogKeysItemValue() ([]byte, bool) {
	res, ok := fpaiv.value.([]byte)
	return res, ok
}

func (fpaiv *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *CreatePreCommittedResourceChangeLogsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreatePreCommittedResourceChangeLogsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePreCommittedResourceChangeLogsResponse'
func (fpaiv *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *CreatePreCommittedResourceChangeLogsResponse) bool {
	slice := fpaiv.CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayOfValues allows storing slice of values for CreatePreCommittedResourceChangeLogsResponse fields according to their type
type CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreatePreCommittedResourceChangeLogsResponse_FieldPath
}

func ParseCreatePreCommittedResourceChangeLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseCreatePreCommittedResourceChangeLogsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePreCommittedResourceChangeLogsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayOfValues), nil
}

func MustParseCreatePreCommittedResourceChangeLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseCreatePreCommittedResourceChangeLogsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathArrayOfValues struct {
	CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPath
	values interface{}
}

var _ CreatePreCommittedResourceChangeLogsResponse_FieldPathArrayOfValues = (*CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreatePreCommittedResourceChangeLogsResponse_FieldPathSelectorLogKeys:
		for _, v := range fpaov.values.([][][]byte) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreatePreCommittedResourceChangeLogsResponse_FieldTerminalPathArrayOfValues) AsLogKeysArrayOfValues() ([][][]byte, bool) {
	res, ok := fpaov.values.([][][]byte)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SetResourceChangeLogsCommitStateRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() SetResourceChangeLogsCommitStateRequest_FieldPathSelector
	Get(source *SetResourceChangeLogsCommitStateRequest) []interface{}
	GetSingle(source *SetResourceChangeLogsCommitStateRequest) (interface{}, bool)
	ClearValue(item *SetResourceChangeLogsCommitStateRequest)

	// Those methods build corresponding SetResourceChangeLogsCommitStateRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SetResourceChangeLogsCommitStateRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) SetResourceChangeLogsCommitStateRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SetResourceChangeLogsCommitStateRequest_FieldPathArrayItemValue
}

type SetResourceChangeLogsCommitStateRequest_FieldPathSelector int32

const (
	SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys   SetResourceChangeLogsCommitStateRequest_FieldPathSelector = 0
	SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTimestamp SetResourceChangeLogsCommitStateRequest_FieldPathSelector = 1
	SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTxResult  SetResourceChangeLogsCommitStateRequest_FieldPathSelector = 2
)

func (s SetResourceChangeLogsCommitStateRequest_FieldPathSelector) String() string {
	switch s {
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys:
		return "log_keys"
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTimestamp:
		return "timestamp"
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTxResult:
		return "tx_result"
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateRequest: %d", s))
	}
}

func BuildSetResourceChangeLogsCommitStateRequest_FieldPath(fp gotenobject.RawFieldPath) (SetResourceChangeLogsCommitStateRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SetResourceChangeLogsCommitStateRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "log_keys", "logKeys", "log-keys":
			return &SetResourceChangeLogsCommitStateRequest_FieldTerminalPath{selector: SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys}, nil
		case "timestamp":
			return &SetResourceChangeLogsCommitStateRequest_FieldTerminalPath{selector: SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTimestamp}, nil
		case "tx_result", "txResult", "tx-result":
			return &SetResourceChangeLogsCommitStateRequest_FieldTerminalPath{selector: SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTxResult}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SetResourceChangeLogsCommitStateRequest", fp)
}

func ParseSetResourceChangeLogsCommitStateRequest_FieldPath(rawField string) (SetResourceChangeLogsCommitStateRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSetResourceChangeLogsCommitStateRequest_FieldPath(fp)
}

func MustParseSetResourceChangeLogsCommitStateRequest_FieldPath(rawField string) SetResourceChangeLogsCommitStateRequest_FieldPath {
	fp, err := ParseSetResourceChangeLogsCommitStateRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SetResourceChangeLogsCommitStateRequest_FieldTerminalPath struct {
	selector SetResourceChangeLogsCommitStateRequest_FieldPathSelector
}

var _ SetResourceChangeLogsCommitStateRequest_FieldPath = (*SetResourceChangeLogsCommitStateRequest_FieldTerminalPath)(nil)

func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) Selector() SetResourceChangeLogsCommitStateRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SetResourceChangeLogsCommitStateRequest
func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) Get(source *SetResourceChangeLogsCommitStateRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys:
			for _, value := range source.GetLogKeys() {
				values = append(values, value)
			}
		case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTimestamp:
			if source.Timestamp != nil {
				values = append(values, source.Timestamp)
			}
		case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTxResult:
			values = append(values, source.TxResult)
		default:
			panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SetResourceChangeLogsCommitStateRequest))
}

// GetSingle returns value pointed by specific field of from source SetResourceChangeLogsCommitStateRequest
func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) GetSingle(source *SetResourceChangeLogsCommitStateRequest) (interface{}, bool) {
	switch fp.selector {
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys:
		res := source.GetLogKeys()
		return res, res != nil
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTimestamp:
		res := source.GetTimestamp()
		return res, res != nil
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTxResult:
		return source.GetTxResult(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateRequest: %d", fp.selector))
	}
}

func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SetResourceChangeLogsCommitStateRequest))
}

// GetDefault returns a default value of the field type
func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys:
		return ([][]byte)(nil)
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTimestamp:
		return (*timestamp.Timestamp)(nil)
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTxResult:
		return resource_change_log.ResourceChangeLog_TransactionInfo_UNDEFINED
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateRequest: %d", fp.selector))
	}
}

func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) ClearValue(item *SetResourceChangeLogsCommitStateRequest) {
	if item != nil {
		switch fp.selector {
		case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys:
			item.LogKeys = nil
		case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTimestamp:
			item.Timestamp = nil
		case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTxResult:
			item.TxResult = resource_change_log.ResourceChangeLog_TransactionInfo_UNDEFINED
		default:
			panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateRequest: %d", fp.selector))
		}
	}
}

func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SetResourceChangeLogsCommitStateRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys ||
		fp.selector == SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTimestamp ||
		fp.selector == SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTxResult
}

func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) WithIValue(value interface{}) SetResourceChangeLogsCommitStateRequest_FieldPathValue {
	switch fp.selector {
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys:
		return &SetResourceChangeLogsCommitStateRequest_FieldTerminalPathValue{SetResourceChangeLogsCommitStateRequest_FieldTerminalPath: *fp, value: value.([][]byte)}
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTimestamp:
		return &SetResourceChangeLogsCommitStateRequest_FieldTerminalPathValue{SetResourceChangeLogsCommitStateRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTxResult:
		return &SetResourceChangeLogsCommitStateRequest_FieldTerminalPathValue{SetResourceChangeLogsCommitStateRequest_FieldTerminalPath: *fp, value: value.(resource_change_log.ResourceChangeLog_TransactionInfo_State)}
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateRequest: %d", fp.selector))
	}
}

func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) SetResourceChangeLogsCommitStateRequest_FieldPathArrayOfValues {
	fpaov := &SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayOfValues{SetResourceChangeLogsCommitStateRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys:
		return &SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayOfValues{SetResourceChangeLogsCommitStateRequest_FieldTerminalPath: *fp, values: values.([][][]byte)}
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTimestamp:
		return &SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayOfValues{SetResourceChangeLogsCommitStateRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTxResult:
		return &SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayOfValues{SetResourceChangeLogsCommitStateRequest_FieldTerminalPath: *fp, values: values.([]resource_change_log.ResourceChangeLog_TransactionInfo_State)}
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) SetResourceChangeLogsCommitStateRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys:
		return &SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayItemValue{SetResourceChangeLogsCommitStateRequest_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateRequest: %d", fp.selector))
	}
}

func (fp *SetResourceChangeLogsCommitStateRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// SetResourceChangeLogsCommitStateRequest_FieldPathValue allows storing values for SetResourceChangeLogsCommitStateRequest fields according to their type
type SetResourceChangeLogsCommitStateRequest_FieldPathValue interface {
	SetResourceChangeLogsCommitStateRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SetResourceChangeLogsCommitStateRequest)
	CompareWith(*SetResourceChangeLogsCommitStateRequest) (cmp int, comparable bool)
}

func ParseSetResourceChangeLogsCommitStateRequest_FieldPathValue(pathStr, valueStr string) (SetResourceChangeLogsCommitStateRequest_FieldPathValue, error) {
	fp, err := ParseSetResourceChangeLogsCommitStateRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SetResourceChangeLogsCommitStateRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(SetResourceChangeLogsCommitStateRequest_FieldPathValue), nil
}

func MustParseSetResourceChangeLogsCommitStateRequest_FieldPathValue(pathStr, valueStr string) SetResourceChangeLogsCommitStateRequest_FieldPathValue {
	fpv, err := ParseSetResourceChangeLogsCommitStateRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SetResourceChangeLogsCommitStateRequest_FieldTerminalPathValue struct {
	SetResourceChangeLogsCommitStateRequest_FieldTerminalPath
	value interface{}
}

var _ SetResourceChangeLogsCommitStateRequest_FieldPathValue = (*SetResourceChangeLogsCommitStateRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SetResourceChangeLogsCommitStateRequest' as interface{}
func (fpv *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathValue) AsLogKeysValue() ([][]byte, bool) {
	res, ok := fpv.value.([][]byte)
	return res, ok
}
func (fpv *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathValue) AsTimestampValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathValue) AsTxResultValue() (resource_change_log.ResourceChangeLog_TransactionInfo_State, bool) {
	res, ok := fpv.value.(resource_change_log.ResourceChangeLog_TransactionInfo_State)
	return res, ok
}

// SetTo stores value for selected field for object SetResourceChangeLogsCommitStateRequest
func (fpv *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathValue) SetTo(target **SetResourceChangeLogsCommitStateRequest) {
	if *target == nil {
		*target = new(SetResourceChangeLogsCommitStateRequest)
	}
	switch fpv.selector {
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys:
		(*target).LogKeys = fpv.value.([][]byte)
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTimestamp:
		(*target).Timestamp = fpv.value.(*timestamp.Timestamp)
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTxResult:
		(*target).TxResult = fpv.value.(resource_change_log.ResourceChangeLog_TransactionInfo_State)
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateRequest: %d", fpv.selector))
	}
}

func (fpv *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SetResourceChangeLogsCommitStateRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SetResourceChangeLogsCommitStateRequest_FieldTerminalPathValue' with the value under path in 'SetResourceChangeLogsCommitStateRequest'.
func (fpv *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathValue) CompareWith(source *SetResourceChangeLogsCommitStateRequest) (int, bool) {
	switch fpv.selector {
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys:
		return 0, false
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTimestamp:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetTimestamp()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTxResult:
		leftValue := fpv.value.(resource_change_log.ResourceChangeLog_TransactionInfo_State)
		rightValue := source.GetTxResult()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateRequest: %d", fpv.selector))
	}
}

func (fpv *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SetResourceChangeLogsCommitStateRequest))
}

// SetResourceChangeLogsCommitStateRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for SetResourceChangeLogsCommitStateRequest according to their type
// Present only for array (repeated) types.
type SetResourceChangeLogsCommitStateRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SetResourceChangeLogsCommitStateRequest_FieldPath
	ContainsValue(*SetResourceChangeLogsCommitStateRequest) bool
}

// ParseSetResourceChangeLogsCommitStateRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSetResourceChangeLogsCommitStateRequest_FieldPathArrayItemValue(pathStr, valueStr string) (SetResourceChangeLogsCommitStateRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseSetResourceChangeLogsCommitStateRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SetResourceChangeLogsCommitStateRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SetResourceChangeLogsCommitStateRequest_FieldPathArrayItemValue), nil
}

func MustParseSetResourceChangeLogsCommitStateRequest_FieldPathArrayItemValue(pathStr, valueStr string) SetResourceChangeLogsCommitStateRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseSetResourceChangeLogsCommitStateRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayItemValue struct {
	SetResourceChangeLogsCommitStateRequest_FieldTerminalPath
	value interface{}
}

var _ SetResourceChangeLogsCommitStateRequest_FieldPathArrayItemValue = (*SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SetResourceChangeLogsCommitStateRequest as interface{}
func (fpaiv *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayItemValue) AsLogKeysItemValue() ([]byte, bool) {
	res, ok := fpaiv.value.([]byte)
	return res, ok
}

func (fpaiv *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayItemValue) GetSingle(source *SetResourceChangeLogsCommitStateRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SetResourceChangeLogsCommitStateRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SetResourceChangeLogsCommitStateRequest'
func (fpaiv *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *SetResourceChangeLogsCommitStateRequest) bool {
	slice := fpaiv.SetResourceChangeLogsCommitStateRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// SetResourceChangeLogsCommitStateRequest_FieldPathArrayOfValues allows storing slice of values for SetResourceChangeLogsCommitStateRequest fields according to their type
type SetResourceChangeLogsCommitStateRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SetResourceChangeLogsCommitStateRequest_FieldPath
}

func ParseSetResourceChangeLogsCommitStateRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (SetResourceChangeLogsCommitStateRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseSetResourceChangeLogsCommitStateRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SetResourceChangeLogsCommitStateRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SetResourceChangeLogsCommitStateRequest_FieldPathArrayOfValues), nil
}

func MustParseSetResourceChangeLogsCommitStateRequest_FieldPathArrayOfValues(pathStr, valuesStr string) SetResourceChangeLogsCommitStateRequest_FieldPathArrayOfValues {
	fpaov, err := ParseSetResourceChangeLogsCommitStateRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayOfValues struct {
	SetResourceChangeLogsCommitStateRequest_FieldTerminalPath
	values interface{}
}

var _ SetResourceChangeLogsCommitStateRequest_FieldPathArrayOfValues = (*SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorLogKeys:
		for _, v := range fpaov.values.([][][]byte) {
			values = append(values, v)
		}
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTimestamp:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case SetResourceChangeLogsCommitStateRequest_FieldPathSelectorTxResult:
		for _, v := range fpaov.values.([]resource_change_log.ResourceChangeLog_TransactionInfo_State) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayOfValues) AsLogKeysArrayOfValues() ([][][]byte, bool) {
	res, ok := fpaov.values.([][][]byte)
	return res, ok
}
func (fpaov *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayOfValues) AsTimestampArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *SetResourceChangeLogsCommitStateRequest_FieldTerminalPathArrayOfValues) AsTxResultArrayOfValues() ([]resource_change_log.ResourceChangeLog_TransactionInfo_State, bool) {
	res, ok := fpaov.values.([]resource_change_log.ResourceChangeLog_TransactionInfo_State)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SetResourceChangeLogsCommitStateResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() SetResourceChangeLogsCommitStateResponse_FieldPathSelector
	Get(source *SetResourceChangeLogsCommitStateResponse) []interface{}
	GetSingle(source *SetResourceChangeLogsCommitStateResponse) (interface{}, bool)
	ClearValue(item *SetResourceChangeLogsCommitStateResponse)

	// Those methods build corresponding SetResourceChangeLogsCommitStateResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SetResourceChangeLogsCommitStateResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) SetResourceChangeLogsCommitStateResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SetResourceChangeLogsCommitStateResponse_FieldPathArrayItemValue
}

type SetResourceChangeLogsCommitStateResponse_FieldPathSelector int32

func (s SetResourceChangeLogsCommitStateResponse_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateResponse: %d", s))
	}
}

func BuildSetResourceChangeLogsCommitStateResponse_FieldPath(fp gotenobject.RawFieldPath) (SetResourceChangeLogsCommitStateResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SetResourceChangeLogsCommitStateResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SetResourceChangeLogsCommitStateResponse", fp)
}

func ParseSetResourceChangeLogsCommitStateResponse_FieldPath(rawField string) (SetResourceChangeLogsCommitStateResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSetResourceChangeLogsCommitStateResponse_FieldPath(fp)
}

func MustParseSetResourceChangeLogsCommitStateResponse_FieldPath(rawField string) SetResourceChangeLogsCommitStateResponse_FieldPath {
	fp, err := ParseSetResourceChangeLogsCommitStateResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SetResourceChangeLogsCommitStateResponse_FieldTerminalPath struct {
	selector SetResourceChangeLogsCommitStateResponse_FieldPathSelector
}

var _ SetResourceChangeLogsCommitStateResponse_FieldPath = (*SetResourceChangeLogsCommitStateResponse_FieldTerminalPath)(nil)

func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) Selector() SetResourceChangeLogsCommitStateResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SetResourceChangeLogsCommitStateResponse
func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) Get(source *SetResourceChangeLogsCommitStateResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SetResourceChangeLogsCommitStateResponse))
}

// GetSingle returns value pointed by specific field of from source SetResourceChangeLogsCommitStateResponse
func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) GetSingle(source *SetResourceChangeLogsCommitStateResponse) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateResponse: %d", fp.selector))
	}
}

func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SetResourceChangeLogsCommitStateResponse))
}

// GetDefault returns a default value of the field type
func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateResponse: %d", fp.selector))
	}
}

func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) ClearValue(item *SetResourceChangeLogsCommitStateResponse) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateResponse: %d", fp.selector))
		}
	}
}

func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SetResourceChangeLogsCommitStateResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) WithIValue(value interface{}) SetResourceChangeLogsCommitStateResponse_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateResponse: %d", fp.selector))
	}
}

func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) SetResourceChangeLogsCommitStateResponse_FieldPathArrayOfValues {
	fpaov := &SetResourceChangeLogsCommitStateResponse_FieldTerminalPathArrayOfValues{SetResourceChangeLogsCommitStateResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) SetResourceChangeLogsCommitStateResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateResponse: %d", fp.selector))
	}
}

func (fp *SetResourceChangeLogsCommitStateResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// SetResourceChangeLogsCommitStateResponse_FieldPathValue allows storing values for SetResourceChangeLogsCommitStateResponse fields according to their type
type SetResourceChangeLogsCommitStateResponse_FieldPathValue interface {
	SetResourceChangeLogsCommitStateResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SetResourceChangeLogsCommitStateResponse)
	CompareWith(*SetResourceChangeLogsCommitStateResponse) (cmp int, comparable bool)
}

func ParseSetResourceChangeLogsCommitStateResponse_FieldPathValue(pathStr, valueStr string) (SetResourceChangeLogsCommitStateResponse_FieldPathValue, error) {
	fp, err := ParseSetResourceChangeLogsCommitStateResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SetResourceChangeLogsCommitStateResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(SetResourceChangeLogsCommitStateResponse_FieldPathValue), nil
}

func MustParseSetResourceChangeLogsCommitStateResponse_FieldPathValue(pathStr, valueStr string) SetResourceChangeLogsCommitStateResponse_FieldPathValue {
	fpv, err := ParseSetResourceChangeLogsCommitStateResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SetResourceChangeLogsCommitStateResponse_FieldTerminalPathValue struct {
	SetResourceChangeLogsCommitStateResponse_FieldTerminalPath
	value interface{}
}

var _ SetResourceChangeLogsCommitStateResponse_FieldPathValue = (*SetResourceChangeLogsCommitStateResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SetResourceChangeLogsCommitStateResponse' as interface{}
func (fpv *SetResourceChangeLogsCommitStateResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object SetResourceChangeLogsCommitStateResponse
func (fpv *SetResourceChangeLogsCommitStateResponse_FieldTerminalPathValue) SetTo(target **SetResourceChangeLogsCommitStateResponse) {
	if *target == nil {
		*target = new(SetResourceChangeLogsCommitStateResponse)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateResponse: %d", fpv.selector))
	}
}

func (fpv *SetResourceChangeLogsCommitStateResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SetResourceChangeLogsCommitStateResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SetResourceChangeLogsCommitStateResponse_FieldTerminalPathValue' with the value under path in 'SetResourceChangeLogsCommitStateResponse'.
func (fpv *SetResourceChangeLogsCommitStateResponse_FieldTerminalPathValue) CompareWith(source *SetResourceChangeLogsCommitStateResponse) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SetResourceChangeLogsCommitStateResponse: %d", fpv.selector))
	}
}

func (fpv *SetResourceChangeLogsCommitStateResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SetResourceChangeLogsCommitStateResponse))
}

// SetResourceChangeLogsCommitStateResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for SetResourceChangeLogsCommitStateResponse according to their type
// Present only for array (repeated) types.
type SetResourceChangeLogsCommitStateResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SetResourceChangeLogsCommitStateResponse_FieldPath
	ContainsValue(*SetResourceChangeLogsCommitStateResponse) bool
}

// ParseSetResourceChangeLogsCommitStateResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSetResourceChangeLogsCommitStateResponse_FieldPathArrayItemValue(pathStr, valueStr string) (SetResourceChangeLogsCommitStateResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseSetResourceChangeLogsCommitStateResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SetResourceChangeLogsCommitStateResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SetResourceChangeLogsCommitStateResponse_FieldPathArrayItemValue), nil
}

func MustParseSetResourceChangeLogsCommitStateResponse_FieldPathArrayItemValue(pathStr, valueStr string) SetResourceChangeLogsCommitStateResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseSetResourceChangeLogsCommitStateResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SetResourceChangeLogsCommitStateResponse_FieldTerminalPathArrayItemValue struct {
	SetResourceChangeLogsCommitStateResponse_FieldTerminalPath
	value interface{}
}

var _ SetResourceChangeLogsCommitStateResponse_FieldPathArrayItemValue = (*SetResourceChangeLogsCommitStateResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SetResourceChangeLogsCommitStateResponse as interface{}
func (fpaiv *SetResourceChangeLogsCommitStateResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SetResourceChangeLogsCommitStateResponse_FieldTerminalPathArrayItemValue) GetSingle(source *SetResourceChangeLogsCommitStateResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SetResourceChangeLogsCommitStateResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SetResourceChangeLogsCommitStateResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SetResourceChangeLogsCommitStateResponse'
func (fpaiv *SetResourceChangeLogsCommitStateResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *SetResourceChangeLogsCommitStateResponse) bool {
	slice := fpaiv.SetResourceChangeLogsCommitStateResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// SetResourceChangeLogsCommitStateResponse_FieldPathArrayOfValues allows storing slice of values for SetResourceChangeLogsCommitStateResponse fields according to their type
type SetResourceChangeLogsCommitStateResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SetResourceChangeLogsCommitStateResponse_FieldPath
}

func ParseSetResourceChangeLogsCommitStateResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (SetResourceChangeLogsCommitStateResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseSetResourceChangeLogsCommitStateResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SetResourceChangeLogsCommitStateResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SetResourceChangeLogsCommitStateResponse_FieldPathArrayOfValues), nil
}

func MustParseSetResourceChangeLogsCommitStateResponse_FieldPathArrayOfValues(pathStr, valuesStr string) SetResourceChangeLogsCommitStateResponse_FieldPathArrayOfValues {
	fpaov, err := ParseSetResourceChangeLogsCommitStateResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SetResourceChangeLogsCommitStateResponse_FieldTerminalPathArrayOfValues struct {
	SetResourceChangeLogsCommitStateResponse_FieldTerminalPath
	values interface{}
}

var _ SetResourceChangeLogsCommitStateResponse_FieldPathArrayOfValues = (*SetResourceChangeLogsCommitStateResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SetResourceChangeLogsCommitStateResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}
