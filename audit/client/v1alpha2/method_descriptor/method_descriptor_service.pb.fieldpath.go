// Code generated by protoc-gen-goten-object
// File: edgelq/audit/proto/v1alpha2/method_descriptor_service.proto
// DO NOT EDIT!!!

package method_descriptor_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	method_descriptor "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha2/method_descriptor"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &method_descriptor.MethodDescriptor{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetMethodDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetMethodDescriptorRequest_FieldPathSelector
	Get(source *GetMethodDescriptorRequest) []interface{}
	GetSingle(source *GetMethodDescriptorRequest) (interface{}, bool)
	ClearValue(item *GetMethodDescriptorRequest)

	// Those methods build corresponding GetMethodDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetMethodDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetMethodDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetMethodDescriptorRequest_FieldPathArrayItemValue
}

type GetMethodDescriptorRequest_FieldPathSelector int32

const (
	GetMethodDescriptorRequest_FieldPathSelectorName      GetMethodDescriptorRequest_FieldPathSelector = 0
	GetMethodDescriptorRequest_FieldPathSelectorFieldMask GetMethodDescriptorRequest_FieldPathSelector = 1
	GetMethodDescriptorRequest_FieldPathSelectorView      GetMethodDescriptorRequest_FieldPathSelector = 2
)

func (s GetMethodDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case GetMethodDescriptorRequest_FieldPathSelectorName:
		return "name"
	case GetMethodDescriptorRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetMethodDescriptorRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetMethodDescriptorRequest: %d", s))
	}
}

func BuildGetMethodDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (GetMethodDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetMethodDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetMethodDescriptorRequest_FieldTerminalPath{selector: GetMethodDescriptorRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetMethodDescriptorRequest_FieldTerminalPath{selector: GetMethodDescriptorRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetMethodDescriptorRequest_FieldTerminalPath{selector: GetMethodDescriptorRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetMethodDescriptorRequest", fp)
}

func ParseGetMethodDescriptorRequest_FieldPath(rawField string) (GetMethodDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetMethodDescriptorRequest_FieldPath(fp)
}

func MustParseGetMethodDescriptorRequest_FieldPath(rawField string) GetMethodDescriptorRequest_FieldPath {
	fp, err := ParseGetMethodDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetMethodDescriptorRequest_FieldTerminalPath struct {
	selector GetMethodDescriptorRequest_FieldPathSelector
}

var _ GetMethodDescriptorRequest_FieldPath = (*GetMethodDescriptorRequest_FieldTerminalPath)(nil)

func (fp *GetMethodDescriptorRequest_FieldTerminalPath) Selector() GetMethodDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetMethodDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetMethodDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetMethodDescriptorRequest
func (fp *GetMethodDescriptorRequest_FieldTerminalPath) Get(source *GetMethodDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetMethodDescriptorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetMethodDescriptorRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetMethodDescriptorRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetMethodDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetMethodDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetMethodDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source GetMethodDescriptorRequest
func (fp *GetMethodDescriptorRequest_FieldTerminalPath) GetSingle(source *GetMethodDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case GetMethodDescriptorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetMethodDescriptorRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetMethodDescriptorRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetMethodDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetMethodDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetMethodDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetMethodDescriptorRequest_FieldPathSelectorName:
		return (*method_descriptor.Reference)(nil)
	case GetMethodDescriptorRequest_FieldPathSelectorFieldMask:
		return (*method_descriptor.MethodDescriptor_FieldMask)(nil)
	case GetMethodDescriptorRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetMethodDescriptorRequest_FieldTerminalPath) ClearValue(item *GetMethodDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case GetMethodDescriptorRequest_FieldPathSelectorName:
			item.Name = nil
		case GetMethodDescriptorRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetMethodDescriptorRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetMethodDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *GetMethodDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetMethodDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetMethodDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetMethodDescriptorRequest_FieldPathSelectorName ||
		fp.selector == GetMethodDescriptorRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetMethodDescriptorRequest_FieldPathSelectorView
}

func (fp *GetMethodDescriptorRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetMethodDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) GetMethodDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case GetMethodDescriptorRequest_FieldPathSelectorName:
		return &GetMethodDescriptorRequest_FieldTerminalPathValue{GetMethodDescriptorRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.Reference)}
	case GetMethodDescriptorRequest_FieldPathSelectorFieldMask:
		return &GetMethodDescriptorRequest_FieldTerminalPathValue{GetMethodDescriptorRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.MethodDescriptor_FieldMask)}
	case GetMethodDescriptorRequest_FieldPathSelectorView:
		return &GetMethodDescriptorRequest_FieldTerminalPathValue{GetMethodDescriptorRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetMethodDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetMethodDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetMethodDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &GetMethodDescriptorRequest_FieldTerminalPathArrayOfValues{GetMethodDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetMethodDescriptorRequest_FieldPathSelectorName:
		return &GetMethodDescriptorRequest_FieldTerminalPathArrayOfValues{GetMethodDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.Reference)}
	case GetMethodDescriptorRequest_FieldPathSelectorFieldMask:
		return &GetMethodDescriptorRequest_FieldTerminalPathArrayOfValues{GetMethodDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.MethodDescriptor_FieldMask)}
	case GetMethodDescriptorRequest_FieldPathSelectorView:
		return &GetMethodDescriptorRequest_FieldTerminalPathArrayOfValues{GetMethodDescriptorRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMethodDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetMethodDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetMethodDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetMethodDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *GetMethodDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetMethodDescriptorRequest_FieldPathValue allows storing values for GetMethodDescriptorRequest fields according to their type
type GetMethodDescriptorRequest_FieldPathValue interface {
	GetMethodDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetMethodDescriptorRequest)
	CompareWith(*GetMethodDescriptorRequest) (cmp int, comparable bool)
}

func ParseGetMethodDescriptorRequest_FieldPathValue(pathStr, valueStr string) (GetMethodDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseGetMethodDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMethodDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetMethodDescriptorRequest_FieldPathValue), nil
}

func MustParseGetMethodDescriptorRequest_FieldPathValue(pathStr, valueStr string) GetMethodDescriptorRequest_FieldPathValue {
	fpv, err := ParseGetMethodDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetMethodDescriptorRequest_FieldTerminalPathValue struct {
	GetMethodDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ GetMethodDescriptorRequest_FieldPathValue = (*GetMethodDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetMethodDescriptorRequest' as interface{}
func (fpv *GetMethodDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetMethodDescriptorRequest_FieldTerminalPathValue) AsNameValue() (*method_descriptor.Reference, bool) {
	res, ok := fpv.value.(*method_descriptor.Reference)
	return res, ok
}
func (fpv *GetMethodDescriptorRequest_FieldTerminalPathValue) AsFieldMaskValue() (*method_descriptor.MethodDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*method_descriptor.MethodDescriptor_FieldMask)
	return res, ok
}
func (fpv *GetMethodDescriptorRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetMethodDescriptorRequest
func (fpv *GetMethodDescriptorRequest_FieldTerminalPathValue) SetTo(target **GetMethodDescriptorRequest) {
	if *target == nil {
		*target = new(GetMethodDescriptorRequest)
	}
	switch fpv.selector {
	case GetMethodDescriptorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*method_descriptor.Reference)
	case GetMethodDescriptorRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*method_descriptor.MethodDescriptor_FieldMask)
	case GetMethodDescriptorRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetMethodDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *GetMethodDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetMethodDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetMethodDescriptorRequest_FieldTerminalPathValue' with the value under path in 'GetMethodDescriptorRequest'.
func (fpv *GetMethodDescriptorRequest_FieldTerminalPathValue) CompareWith(source *GetMethodDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case GetMethodDescriptorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*method_descriptor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetMethodDescriptorRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetMethodDescriptorRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetMethodDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *GetMethodDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetMethodDescriptorRequest))
}

// GetMethodDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetMethodDescriptorRequest according to their type
// Present only for array (repeated) types.
type GetMethodDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetMethodDescriptorRequest_FieldPath
	ContainsValue(*GetMethodDescriptorRequest) bool
}

// ParseGetMethodDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetMethodDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetMethodDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetMethodDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMethodDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetMethodDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseGetMethodDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetMethodDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetMethodDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetMethodDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	GetMethodDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ GetMethodDescriptorRequest_FieldPathArrayItemValue = (*GetMethodDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetMethodDescriptorRequest as interface{}
func (fpaiv *GetMethodDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetMethodDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetMethodDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetMethodDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetMethodDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetMethodDescriptorRequest'
func (fpaiv *GetMethodDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetMethodDescriptorRequest) bool {
	slice := fpaiv.GetMethodDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetMethodDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for GetMethodDescriptorRequest fields according to their type
type GetMethodDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetMethodDescriptorRequest_FieldPath
}

func ParseGetMethodDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetMethodDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetMethodDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetMethodDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetMethodDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseGetMethodDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetMethodDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetMethodDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetMethodDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	GetMethodDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ GetMethodDescriptorRequest_FieldPathArrayOfValues = (*GetMethodDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetMethodDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetMethodDescriptorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*method_descriptor.Reference) {
			values = append(values, v)
		}
	case GetMethodDescriptorRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*method_descriptor.MethodDescriptor_FieldMask) {
			values = append(values, v)
		}
	case GetMethodDescriptorRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetMethodDescriptorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*method_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*method_descriptor.Reference)
	return res, ok
}
func (fpaov *GetMethodDescriptorRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*method_descriptor.MethodDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*method_descriptor.MethodDescriptor_FieldMask)
	return res, ok
}
func (fpaov *GetMethodDescriptorRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetMethodDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetMethodDescriptorsRequest_FieldPathSelector
	Get(source *BatchGetMethodDescriptorsRequest) []interface{}
	GetSingle(source *BatchGetMethodDescriptorsRequest) (interface{}, bool)
	ClearValue(item *BatchGetMethodDescriptorsRequest)

	// Those methods build corresponding BatchGetMethodDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetMethodDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetMethodDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetMethodDescriptorsRequest_FieldPathArrayItemValue
}

type BatchGetMethodDescriptorsRequest_FieldPathSelector int32

const (
	BatchGetMethodDescriptorsRequest_FieldPathSelectorNames     BatchGetMethodDescriptorsRequest_FieldPathSelector = 0
	BatchGetMethodDescriptorsRequest_FieldPathSelectorFieldMask BatchGetMethodDescriptorsRequest_FieldPathSelector = 1
	BatchGetMethodDescriptorsRequest_FieldPathSelectorView      BatchGetMethodDescriptorsRequest_FieldPathSelector = 2
)

func (s BatchGetMethodDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsRequest: %d", s))
	}
}

func BuildBatchGetMethodDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetMethodDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetMethodDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetMethodDescriptorsRequest_FieldTerminalPath{selector: BatchGetMethodDescriptorsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetMethodDescriptorsRequest_FieldTerminalPath{selector: BatchGetMethodDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetMethodDescriptorsRequest_FieldTerminalPath{selector: BatchGetMethodDescriptorsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetMethodDescriptorsRequest", fp)
}

func ParseBatchGetMethodDescriptorsRequest_FieldPath(rawField string) (BatchGetMethodDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetMethodDescriptorsRequest_FieldPath(fp)
}

func MustParseBatchGetMethodDescriptorsRequest_FieldPath(rawField string) BatchGetMethodDescriptorsRequest_FieldPath {
	fp, err := ParseBatchGetMethodDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetMethodDescriptorsRequest_FieldTerminalPath struct {
	selector BatchGetMethodDescriptorsRequest_FieldPathSelector
}

var _ BatchGetMethodDescriptorsRequest_FieldPath = (*BatchGetMethodDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) Selector() BatchGetMethodDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetMethodDescriptorsRequest
func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) Get(source *BatchGetMethodDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetMethodDescriptorsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetMethodDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetMethodDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetMethodDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetMethodDescriptorsRequest
func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) GetSingle(source *BatchGetMethodDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetMethodDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorNames:
		return ([]*method_descriptor.Reference)(nil)
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*method_descriptor.MethodDescriptor_FieldMask)(nil)
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) ClearValue(item *BatchGetMethodDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetMethodDescriptorsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetMethodDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetMethodDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetMethodDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetMethodDescriptorsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetMethodDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetMethodDescriptorsRequest_FieldPathSelectorView
}

func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetMethodDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetMethodDescriptorsRequest_FieldTerminalPathValue{BatchGetMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.([]*method_descriptor.Reference)}
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return &BatchGetMethodDescriptorsRequest_FieldTerminalPathValue{BatchGetMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.MethodDescriptor_FieldMask)}
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorView:
		return &BatchGetMethodDescriptorsRequest_FieldTerminalPathValue{BatchGetMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetMethodDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetMethodDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([][]*method_descriptor.Reference)}
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return &BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.MethodDescriptor_FieldMask)}
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorView:
		return &BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{BatchGetMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetMethodDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorNames:
		return &BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayItemValue{BatchGetMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetMethodDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetMethodDescriptorsRequest_FieldPathValue allows storing values for BatchGetMethodDescriptorsRequest fields according to their type
type BatchGetMethodDescriptorsRequest_FieldPathValue interface {
	BatchGetMethodDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetMethodDescriptorsRequest)
	CompareWith(*BatchGetMethodDescriptorsRequest) (cmp int, comparable bool)
}

func ParseBatchGetMethodDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetMethodDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetMethodDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMethodDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetMethodDescriptorsRequest_FieldPathValue), nil
}

func MustParseBatchGetMethodDescriptorsRequest_FieldPathValue(pathStr, valueStr string) BatchGetMethodDescriptorsRequest_FieldPathValue {
	fpv, err := ParseBatchGetMethodDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetMethodDescriptorsRequest_FieldTerminalPathValue struct {
	BatchGetMethodDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetMethodDescriptorsRequest_FieldPathValue = (*BatchGetMethodDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetMethodDescriptorsRequest' as interface{}
func (fpv *BatchGetMethodDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetMethodDescriptorsRequest_FieldTerminalPathValue) AsNamesValue() ([]*method_descriptor.Reference, bool) {
	res, ok := fpv.value.([]*method_descriptor.Reference)
	return res, ok
}
func (fpv *BatchGetMethodDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*method_descriptor.MethodDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*method_descriptor.MethodDescriptor_FieldMask)
	return res, ok
}
func (fpv *BatchGetMethodDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetMethodDescriptorsRequest
func (fpv *BatchGetMethodDescriptorsRequest_FieldTerminalPathValue) SetTo(target **BatchGetMethodDescriptorsRequest) {
	if *target == nil {
		*target = new(BatchGetMethodDescriptorsRequest)
	}
	switch fpv.selector {
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*method_descriptor.Reference)
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*method_descriptor.MethodDescriptor_FieldMask)
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetMethodDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetMethodDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetMethodDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetMethodDescriptorsRequest'.
func (fpv *BatchGetMethodDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetMethodDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetMethodDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetMethodDescriptorsRequest))
}

// BatchGetMethodDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetMethodDescriptorsRequest according to their type
// Present only for array (repeated) types.
type BatchGetMethodDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetMethodDescriptorsRequest_FieldPath
	ContainsValue(*BatchGetMethodDescriptorsRequest) bool
}

// ParseBatchGetMethodDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetMethodDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetMethodDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetMethodDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMethodDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetMethodDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetMethodDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetMethodDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetMethodDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetMethodDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetMethodDescriptorsRequest_FieldPathArrayItemValue = (*BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetMethodDescriptorsRequest as interface{}
func (fpaiv *BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*method_descriptor.Reference, bool) {
	res, ok := fpaiv.value.(*method_descriptor.Reference)
	return res, ok
}

func (fpaiv *BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetMethodDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetMethodDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetMethodDescriptorsRequest'
func (fpaiv *BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetMethodDescriptorsRequest) bool {
	slice := fpaiv.BatchGetMethodDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetMethodDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetMethodDescriptorsRequest fields according to their type
type BatchGetMethodDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetMethodDescriptorsRequest_FieldPath
}

func ParseBatchGetMethodDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetMethodDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetMethodDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMethodDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetMethodDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetMethodDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetMethodDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetMethodDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetMethodDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetMethodDescriptorsRequest_FieldPathArrayOfValues = (*BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*method_descriptor.Reference) {
			values = append(values, v)
		}
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*method_descriptor.MethodDescriptor_FieldMask) {
			values = append(values, v)
		}
	case BatchGetMethodDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*method_descriptor.Reference, bool) {
	res, ok := fpaov.values.([][]*method_descriptor.Reference)
	return res, ok
}
func (fpaov *BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*method_descriptor.MethodDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*method_descriptor.MethodDescriptor_FieldMask)
	return res, ok
}
func (fpaov *BatchGetMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetMethodDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetMethodDescriptorsResponse_FieldPathSelector
	Get(source *BatchGetMethodDescriptorsResponse) []interface{}
	GetSingle(source *BatchGetMethodDescriptorsResponse) (interface{}, bool)
	ClearValue(item *BatchGetMethodDescriptorsResponse)

	// Those methods build corresponding BatchGetMethodDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetMethodDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetMethodDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetMethodDescriptorsResponse_FieldPathArrayItemValue
}

type BatchGetMethodDescriptorsResponse_FieldPathSelector int32

const (
	BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors BatchGetMethodDescriptorsResponse_FieldPathSelector = 0
	BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing           BatchGetMethodDescriptorsResponse_FieldPathSelector = 1
)

func (s BatchGetMethodDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return "method_descriptors"
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", s))
	}
}

func BuildBatchGetMethodDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetMethodDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetMethodDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "method_descriptors", "methodDescriptors", "method-descriptors":
			return &BatchGetMethodDescriptorsResponse_FieldTerminalPath{selector: BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors}, nil
		case "missing":
			return &BatchGetMethodDescriptorsResponse_FieldTerminalPath{selector: BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "method_descriptors", "methodDescriptors", "method-descriptors":
			if subpath, err := method_descriptor.BuildMethodDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetMethodDescriptorsResponse_FieldSubPath{selector: BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetMethodDescriptorsResponse", fp)
}

func ParseBatchGetMethodDescriptorsResponse_FieldPath(rawField string) (BatchGetMethodDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetMethodDescriptorsResponse_FieldPath(fp)
}

func MustParseBatchGetMethodDescriptorsResponse_FieldPath(rawField string) BatchGetMethodDescriptorsResponse_FieldPath {
	fp, err := ParseBatchGetMethodDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetMethodDescriptorsResponse_FieldTerminalPath struct {
	selector BatchGetMethodDescriptorsResponse_FieldPathSelector
}

var _ BatchGetMethodDescriptorsResponse_FieldPath = (*BatchGetMethodDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) Selector() BatchGetMethodDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetMethodDescriptorsResponse
func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) Get(source *BatchGetMethodDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
			for _, value := range source.GetMethodDescriptors() {
				values = append(values, value)
			}
		case BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetMethodDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetMethodDescriptorsResponse
func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) GetSingle(source *BatchGetMethodDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		res := source.GetMethodDescriptors()
		return res, res != nil
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetMethodDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return ([]*method_descriptor.MethodDescriptor)(nil)
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing:
		return ([]*method_descriptor.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) ClearValue(item *BatchGetMethodDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
			item.MethodDescriptors = nil
		case BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetMethodDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetMethodDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return &BatchGetMethodDescriptorsResponse_FieldTerminalPathValue{BatchGetMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*method_descriptor.MethodDescriptor)}
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetMethodDescriptorsResponse_FieldTerminalPathValue{BatchGetMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*method_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetMethodDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetMethodDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return &BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetMethodDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*method_descriptor.MethodDescriptor)}
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{BatchGetMethodDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*method_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetMethodDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return &BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayItemValue{BatchGetMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*method_descriptor.MethodDescriptor)}
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing:
		return &BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayItemValue{BatchGetMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*method_descriptor.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetMethodDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetMethodDescriptorsResponse_FieldSubPath struct {
	selector BatchGetMethodDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetMethodDescriptorsResponse_FieldPath = (*BatchGetMethodDescriptorsResponse_FieldSubPath)(nil)

func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) Selector() BatchGetMethodDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) AsMethodDescriptorsSubPath() (method_descriptor.MethodDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(method_descriptor.MethodDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetMethodDescriptorsResponse
func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) Get(source *BatchGetMethodDescriptorsResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		for _, item := range source.GetMethodDescriptors() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetMethodDescriptorsResponse))
}

// GetSingle returns value of selected field from source BatchGetMethodDescriptorsResponse
func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) GetSingle(source *BatchGetMethodDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		if len(source.GetMethodDescriptors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMethodDescriptors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetMethodDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) ClearValue(item *BatchGetMethodDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
			for _, subItem := range item.MethodDescriptors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetMethodDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetMethodDescriptorsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetMethodDescriptorsResponse_FieldPathValue {
	return &BatchGetMethodDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetMethodDescriptorsResponse_FieldPathArrayOfValues {
	return &BatchGetMethodDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetMethodDescriptorsResponse_FieldPathArrayItemValue {
	return &BatchGetMethodDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetMethodDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetMethodDescriptorsResponse_FieldPathValue allows storing values for BatchGetMethodDescriptorsResponse fields according to their type
type BatchGetMethodDescriptorsResponse_FieldPathValue interface {
	BatchGetMethodDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetMethodDescriptorsResponse)
	CompareWith(*BatchGetMethodDescriptorsResponse) (cmp int, comparable bool)
}

func ParseBatchGetMethodDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetMethodDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetMethodDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMethodDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetMethodDescriptorsResponse_FieldPathValue), nil
}

func MustParseBatchGetMethodDescriptorsResponse_FieldPathValue(pathStr, valueStr string) BatchGetMethodDescriptorsResponse_FieldPathValue {
	fpv, err := ParseBatchGetMethodDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetMethodDescriptorsResponse_FieldTerminalPathValue struct {
	BatchGetMethodDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetMethodDescriptorsResponse_FieldPathValue = (*BatchGetMethodDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetMethodDescriptorsResponse' as interface{}
func (fpv *BatchGetMethodDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetMethodDescriptorsResponse_FieldTerminalPathValue) AsMethodDescriptorsValue() ([]*method_descriptor.MethodDescriptor, bool) {
	res, ok := fpv.value.([]*method_descriptor.MethodDescriptor)
	return res, ok
}
func (fpv *BatchGetMethodDescriptorsResponse_FieldTerminalPathValue) AsMissingValue() ([]*method_descriptor.Reference, bool) {
	res, ok := fpv.value.([]*method_descriptor.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetMethodDescriptorsResponse
func (fpv *BatchGetMethodDescriptorsResponse_FieldTerminalPathValue) SetTo(target **BatchGetMethodDescriptorsResponse) {
	if *target == nil {
		*target = new(BatchGetMethodDescriptorsResponse)
	}
	switch fpv.selector {
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		(*target).MethodDescriptors = fpv.value.([]*method_descriptor.MethodDescriptor)
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*method_descriptor.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetMethodDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetMethodDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetMethodDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetMethodDescriptorsResponse'.
func (fpv *BatchGetMethodDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetMethodDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return 0, false
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetMethodDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetMethodDescriptorsResponse))
}

type BatchGetMethodDescriptorsResponse_FieldSubPathValue struct {
	BatchGetMethodDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetMethodDescriptorsResponse_FieldPathValue = (*BatchGetMethodDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetMethodDescriptorsResponse_FieldSubPathValue) AsMethodDescriptorsPathValue() (method_descriptor.MethodDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(method_descriptor.MethodDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetMethodDescriptorsResponse_FieldSubPathValue) SetTo(target **BatchGetMethodDescriptorsResponse) {
	if *target == nil {
		*target = new(BatchGetMethodDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetMethodDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetMethodDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetMethodDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetMethodDescriptorsResponse_FieldSubPathValue) CompareWith(source *BatchGetMethodDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetMethodDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetMethodDescriptorsResponse))
}

// BatchGetMethodDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetMethodDescriptorsResponse according to their type
// Present only for array (repeated) types.
type BatchGetMethodDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetMethodDescriptorsResponse_FieldPath
	ContainsValue(*BatchGetMethodDescriptorsResponse) bool
}

// ParseBatchGetMethodDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetMethodDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetMethodDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetMethodDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMethodDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetMethodDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetMethodDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetMethodDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetMethodDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetMethodDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetMethodDescriptorsResponse_FieldPathArrayItemValue = (*BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetMethodDescriptorsResponse as interface{}
func (fpaiv *BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) AsMethodDescriptorsItemValue() (*method_descriptor.MethodDescriptor, bool) {
	res, ok := fpaiv.value.(*method_descriptor.MethodDescriptor)
	return res, ok
}
func (fpaiv *BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*method_descriptor.Reference, bool) {
	res, ok := fpaiv.value.(*method_descriptor.Reference)
	return res, ok
}

func (fpaiv *BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetMethodDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetMethodDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetMethodDescriptorsResponse'
func (fpaiv *BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetMethodDescriptorsResponse) bool {
	slice := fpaiv.BatchGetMethodDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetMethodDescriptorsResponse_FieldSubPathArrayItemValue struct {
	BatchGetMethodDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetMethodDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetMethodDescriptorsResponse_FieldSubPathArrayItemValue) AsMethodDescriptorsPathItemValue() (method_descriptor.MethodDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(method_descriptor.MethodDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetMethodDescriptorsResponse'
func (fpaivs *BatchGetMethodDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetMethodDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetMethodDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetMethodDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetMethodDescriptorsResponse fields according to their type
type BatchGetMethodDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetMethodDescriptorsResponse_FieldPath
}

func ParseBatchGetMethodDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetMethodDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetMethodDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetMethodDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetMethodDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetMethodDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetMethodDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetMethodDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetMethodDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetMethodDescriptorsResponse_FieldPathArrayOfValues = (*BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		for _, v := range fpaov.values.([][]*method_descriptor.MethodDescriptor) {
			values = append(values, v)
		}
	case BatchGetMethodDescriptorsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*method_descriptor.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) AsMethodDescriptorsArrayOfValues() ([][]*method_descriptor.MethodDescriptor, bool) {
	res, ok := fpaov.values.([][]*method_descriptor.MethodDescriptor)
	return res, ok
}
func (fpaov *BatchGetMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*method_descriptor.Reference, bool) {
	res, ok := fpaov.values.([][]*method_descriptor.Reference)
	return res, ok
}

type BatchGetMethodDescriptorsResponse_FieldSubPathArrayOfValues struct {
	BatchGetMethodDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetMethodDescriptorsResponse_FieldPathArrayOfValues = (*BatchGetMethodDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetMethodDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetMethodDescriptorsResponse_FieldSubPathArrayOfValues) AsMethodDescriptorsPathArrayOfValues() (method_descriptor.MethodDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(method_descriptor.MethodDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListMethodDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListMethodDescriptorsRequest_FieldPathSelector
	Get(source *ListMethodDescriptorsRequest) []interface{}
	GetSingle(source *ListMethodDescriptorsRequest) (interface{}, bool)
	ClearValue(item *ListMethodDescriptorsRequest)

	// Those methods build corresponding ListMethodDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListMethodDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListMethodDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListMethodDescriptorsRequest_FieldPathArrayItemValue
}

type ListMethodDescriptorsRequest_FieldPathSelector int32

const (
	ListMethodDescriptorsRequest_FieldPathSelectorPageSize          ListMethodDescriptorsRequest_FieldPathSelector = 0
	ListMethodDescriptorsRequest_FieldPathSelectorPageToken         ListMethodDescriptorsRequest_FieldPathSelector = 1
	ListMethodDescriptorsRequest_FieldPathSelectorOrderBy           ListMethodDescriptorsRequest_FieldPathSelector = 2
	ListMethodDescriptorsRequest_FieldPathSelectorFilter            ListMethodDescriptorsRequest_FieldPathSelector = 3
	ListMethodDescriptorsRequest_FieldPathSelectorFieldMask         ListMethodDescriptorsRequest_FieldPathSelector = 4
	ListMethodDescriptorsRequest_FieldPathSelectorView              ListMethodDescriptorsRequest_FieldPathSelector = 5
	ListMethodDescriptorsRequest_FieldPathSelectorIncludePagingInfo ListMethodDescriptorsRequest_FieldPathSelector = 6
)

func (s ListMethodDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case ListMethodDescriptorsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListMethodDescriptorsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListMethodDescriptorsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListMethodDescriptorsRequest_FieldPathSelectorView:
		return "view"
	case ListMethodDescriptorsRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsRequest: %d", s))
	}
}

func BuildListMethodDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListMethodDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListMethodDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "page_size", "pageSize", "page-size":
			return &ListMethodDescriptorsRequest_FieldTerminalPath{selector: ListMethodDescriptorsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListMethodDescriptorsRequest_FieldTerminalPath{selector: ListMethodDescriptorsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListMethodDescriptorsRequest_FieldTerminalPath{selector: ListMethodDescriptorsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListMethodDescriptorsRequest_FieldTerminalPath{selector: ListMethodDescriptorsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListMethodDescriptorsRequest_FieldTerminalPath{selector: ListMethodDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListMethodDescriptorsRequest_FieldTerminalPath{selector: ListMethodDescriptorsRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListMethodDescriptorsRequest_FieldTerminalPath{selector: ListMethodDescriptorsRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListMethodDescriptorsRequest", fp)
}

func ParseListMethodDescriptorsRequest_FieldPath(rawField string) (ListMethodDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListMethodDescriptorsRequest_FieldPath(fp)
}

func MustParseListMethodDescriptorsRequest_FieldPath(rawField string) ListMethodDescriptorsRequest_FieldPath {
	fp, err := ParseListMethodDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListMethodDescriptorsRequest_FieldTerminalPath struct {
	selector ListMethodDescriptorsRequest_FieldPathSelector
}

var _ ListMethodDescriptorsRequest_FieldPath = (*ListMethodDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) Selector() ListMethodDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListMethodDescriptorsRequest
func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) Get(source *ListMethodDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListMethodDescriptorsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListMethodDescriptorsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListMethodDescriptorsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListMethodDescriptorsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListMethodDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListMethodDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListMethodDescriptorsRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListMethodDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source ListMethodDescriptorsRequest
func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) GetSingle(source *ListMethodDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListMethodDescriptorsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListMethodDescriptorsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListMethodDescriptorsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListMethodDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListMethodDescriptorsRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListMethodDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListMethodDescriptorsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListMethodDescriptorsRequest_FieldPathSelectorPageToken:
		return (*method_descriptor.PagerCursor)(nil)
	case ListMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		return (*method_descriptor.OrderBy)(nil)
	case ListMethodDescriptorsRequest_FieldPathSelectorFilter:
		return (*method_descriptor.Filter)(nil)
	case ListMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*method_descriptor.MethodDescriptor_FieldMask)(nil)
	case ListMethodDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListMethodDescriptorsRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) ClearValue(item *ListMethodDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case ListMethodDescriptorsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListMethodDescriptorsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListMethodDescriptorsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListMethodDescriptorsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListMethodDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListMethodDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListMethodDescriptorsRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListMethodDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListMethodDescriptorsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListMethodDescriptorsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListMethodDescriptorsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListMethodDescriptorsRequest_FieldPathSelectorFilter ||
		fp.selector == ListMethodDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListMethodDescriptorsRequest_FieldPathSelectorView ||
		fp.selector == ListMethodDescriptorsRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) ListMethodDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case ListMethodDescriptorsRequest_FieldPathSelectorPageSize:
		return &ListMethodDescriptorsRequest_FieldTerminalPathValue{ListMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListMethodDescriptorsRequest_FieldPathSelectorPageToken:
		return &ListMethodDescriptorsRequest_FieldTerminalPathValue{ListMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.PagerCursor)}
	case ListMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		return &ListMethodDescriptorsRequest_FieldTerminalPathValue{ListMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.OrderBy)}
	case ListMethodDescriptorsRequest_FieldPathSelectorFilter:
		return &ListMethodDescriptorsRequest_FieldTerminalPathValue{ListMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.Filter)}
	case ListMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return &ListMethodDescriptorsRequest_FieldTerminalPathValue{ListMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.MethodDescriptor_FieldMask)}
	case ListMethodDescriptorsRequest_FieldPathSelectorView:
		return &ListMethodDescriptorsRequest_FieldTerminalPathValue{ListMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListMethodDescriptorsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListMethodDescriptorsRequest_FieldTerminalPathValue{ListMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListMethodDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMethodDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListMethodDescriptorsRequest_FieldPathSelectorPageSize:
		return &ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListMethodDescriptorsRequest_FieldPathSelectorPageToken:
		return &ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.PagerCursor)}
	case ListMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		return &ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.OrderBy)}
	case ListMethodDescriptorsRequest_FieldPathSelectorFilter:
		return &ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.Filter)}
	case ListMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return &ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.MethodDescriptor_FieldMask)}
	case ListMethodDescriptorsRequest_FieldPathSelectorView:
		return &ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListMethodDescriptorsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{ListMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListMethodDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *ListMethodDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListMethodDescriptorsRequest_FieldPathValue allows storing values for ListMethodDescriptorsRequest fields according to their type
type ListMethodDescriptorsRequest_FieldPathValue interface {
	ListMethodDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListMethodDescriptorsRequest)
	CompareWith(*ListMethodDescriptorsRequest) (cmp int, comparable bool)
}

func ParseListMethodDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (ListMethodDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseListMethodDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMethodDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListMethodDescriptorsRequest_FieldPathValue), nil
}

func MustParseListMethodDescriptorsRequest_FieldPathValue(pathStr, valueStr string) ListMethodDescriptorsRequest_FieldPathValue {
	fpv, err := ParseListMethodDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListMethodDescriptorsRequest_FieldTerminalPathValue struct {
	ListMethodDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ ListMethodDescriptorsRequest_FieldPathValue = (*ListMethodDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListMethodDescriptorsRequest' as interface{}
func (fpv *ListMethodDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListMethodDescriptorsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListMethodDescriptorsRequest_FieldTerminalPathValue) AsPageTokenValue() (*method_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*method_descriptor.PagerCursor)
	return res, ok
}
func (fpv *ListMethodDescriptorsRequest_FieldTerminalPathValue) AsOrderByValue() (*method_descriptor.OrderBy, bool) {
	res, ok := fpv.value.(*method_descriptor.OrderBy)
	return res, ok
}
func (fpv *ListMethodDescriptorsRequest_FieldTerminalPathValue) AsFilterValue() (*method_descriptor.Filter, bool) {
	res, ok := fpv.value.(*method_descriptor.Filter)
	return res, ok
}
func (fpv *ListMethodDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*method_descriptor.MethodDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*method_descriptor.MethodDescriptor_FieldMask)
	return res, ok
}
func (fpv *ListMethodDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListMethodDescriptorsRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListMethodDescriptorsRequest
func (fpv *ListMethodDescriptorsRequest_FieldTerminalPathValue) SetTo(target **ListMethodDescriptorsRequest) {
	if *target == nil {
		*target = new(ListMethodDescriptorsRequest)
	}
	switch fpv.selector {
	case ListMethodDescriptorsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListMethodDescriptorsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*method_descriptor.PagerCursor)
	case ListMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*method_descriptor.OrderBy)
	case ListMethodDescriptorsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*method_descriptor.Filter)
	case ListMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*method_descriptor.MethodDescriptor_FieldMask)
	case ListMethodDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListMethodDescriptorsRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *ListMethodDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMethodDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListMethodDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'ListMethodDescriptorsRequest'.
func (fpv *ListMethodDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *ListMethodDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case ListMethodDescriptorsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListMethodDescriptorsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListMethodDescriptorsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListMethodDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListMethodDescriptorsRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *ListMethodDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListMethodDescriptorsRequest))
}

// ListMethodDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListMethodDescriptorsRequest according to their type
// Present only for array (repeated) types.
type ListMethodDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListMethodDescriptorsRequest_FieldPath
	ContainsValue(*ListMethodDescriptorsRequest) bool
}

// ParseListMethodDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListMethodDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListMethodDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListMethodDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMethodDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListMethodDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseListMethodDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListMethodDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListMethodDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListMethodDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	ListMethodDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ ListMethodDescriptorsRequest_FieldPathArrayItemValue = (*ListMethodDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListMethodDescriptorsRequest as interface{}
func (fpaiv *ListMethodDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListMethodDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListMethodDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListMethodDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListMethodDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMethodDescriptorsRequest'
func (fpaiv *ListMethodDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListMethodDescriptorsRequest) bool {
	slice := fpaiv.ListMethodDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListMethodDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for ListMethodDescriptorsRequest fields according to their type
type ListMethodDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListMethodDescriptorsRequest_FieldPath
}

func ParseListMethodDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListMethodDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListMethodDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMethodDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListMethodDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseListMethodDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListMethodDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListMethodDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	ListMethodDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ ListMethodDescriptorsRequest_FieldPathArrayOfValues = (*ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListMethodDescriptorsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListMethodDescriptorsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*method_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case ListMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*method_descriptor.OrderBy) {
			values = append(values, v)
		}
	case ListMethodDescriptorsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*method_descriptor.Filter) {
			values = append(values, v)
		}
	case ListMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*method_descriptor.MethodDescriptor_FieldMask) {
			values = append(values, v)
		}
	case ListMethodDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListMethodDescriptorsRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*method_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*method_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*method_descriptor.OrderBy, bool) {
	res, ok := fpaov.values.([]*method_descriptor.OrderBy)
	return res, ok
}
func (fpaov *ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*method_descriptor.Filter, bool) {
	res, ok := fpaov.values.([]*method_descriptor.Filter)
	return res, ok
}
func (fpaov *ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*method_descriptor.MethodDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*method_descriptor.MethodDescriptor_FieldMask)
	return res, ok
}
func (fpaov *ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListMethodDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListMethodDescriptorsResponse_FieldPathSelector
	Get(source *ListMethodDescriptorsResponse) []interface{}
	GetSingle(source *ListMethodDescriptorsResponse) (interface{}, bool)
	ClearValue(item *ListMethodDescriptorsResponse)

	// Those methods build corresponding ListMethodDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListMethodDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListMethodDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListMethodDescriptorsResponse_FieldPathArrayItemValue
}

type ListMethodDescriptorsResponse_FieldPathSelector int32

const (
	ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors ListMethodDescriptorsResponse_FieldPathSelector = 0
	ListMethodDescriptorsResponse_FieldPathSelectorPrevPageToken     ListMethodDescriptorsResponse_FieldPathSelector = 1
	ListMethodDescriptorsResponse_FieldPathSelectorNextPageToken     ListMethodDescriptorsResponse_FieldPathSelector = 2
	ListMethodDescriptorsResponse_FieldPathSelectorCurrentOffset     ListMethodDescriptorsResponse_FieldPathSelector = 3
	ListMethodDescriptorsResponse_FieldPathSelectorTotalResultsCount ListMethodDescriptorsResponse_FieldPathSelector = 4
)

func (s ListMethodDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return "method_descriptors"
	case ListMethodDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListMethodDescriptorsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListMethodDescriptorsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListMethodDescriptorsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", s))
	}
}

func BuildListMethodDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListMethodDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListMethodDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "method_descriptors", "methodDescriptors", "method-descriptors":
			return &ListMethodDescriptorsResponse_FieldTerminalPath{selector: ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListMethodDescriptorsResponse_FieldTerminalPath{selector: ListMethodDescriptorsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListMethodDescriptorsResponse_FieldTerminalPath{selector: ListMethodDescriptorsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListMethodDescriptorsResponse_FieldTerminalPath{selector: ListMethodDescriptorsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListMethodDescriptorsResponse_FieldTerminalPath{selector: ListMethodDescriptorsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "method_descriptors", "methodDescriptors", "method-descriptors":
			if subpath, err := method_descriptor.BuildMethodDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListMethodDescriptorsResponse_FieldSubPath{selector: ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListMethodDescriptorsResponse", fp)
}

func ParseListMethodDescriptorsResponse_FieldPath(rawField string) (ListMethodDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListMethodDescriptorsResponse_FieldPath(fp)
}

func MustParseListMethodDescriptorsResponse_FieldPath(rawField string) ListMethodDescriptorsResponse_FieldPath {
	fp, err := ParseListMethodDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListMethodDescriptorsResponse_FieldTerminalPath struct {
	selector ListMethodDescriptorsResponse_FieldPathSelector
}

var _ ListMethodDescriptorsResponse_FieldPath = (*ListMethodDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) Selector() ListMethodDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListMethodDescriptorsResponse
func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) Get(source *ListMethodDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
			for _, value := range source.GetMethodDescriptors() {
				values = append(values, value)
			}
		case ListMethodDescriptorsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListMethodDescriptorsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListMethodDescriptorsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListMethodDescriptorsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListMethodDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source ListMethodDescriptorsResponse
func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) GetSingle(source *ListMethodDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		res := source.GetMethodDescriptors()
		return res, res != nil
	case ListMethodDescriptorsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListMethodDescriptorsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListMethodDescriptorsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListMethodDescriptorsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListMethodDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return ([]*method_descriptor.MethodDescriptor)(nil)
	case ListMethodDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return (*method_descriptor.PagerCursor)(nil)
	case ListMethodDescriptorsResponse_FieldPathSelectorNextPageToken:
		return (*method_descriptor.PagerCursor)(nil)
	case ListMethodDescriptorsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListMethodDescriptorsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) ClearValue(item *ListMethodDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
			item.MethodDescriptors = nil
		case ListMethodDescriptorsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListMethodDescriptorsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListMethodDescriptorsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListMethodDescriptorsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListMethodDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListMethodDescriptorsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListMethodDescriptorsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListMethodDescriptorsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListMethodDescriptorsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) ListMethodDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return &ListMethodDescriptorsResponse_FieldTerminalPathValue{ListMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*method_descriptor.MethodDescriptor)}
	case ListMethodDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return &ListMethodDescriptorsResponse_FieldTerminalPathValue{ListMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*method_descriptor.PagerCursor)}
	case ListMethodDescriptorsResponse_FieldPathSelectorNextPageToken:
		return &ListMethodDescriptorsResponse_FieldTerminalPathValue{ListMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*method_descriptor.PagerCursor)}
	case ListMethodDescriptorsResponse_FieldPathSelectorCurrentOffset:
		return &ListMethodDescriptorsResponse_FieldTerminalPathValue{ListMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListMethodDescriptorsResponse_FieldPathSelectorTotalResultsCount:
		return &ListMethodDescriptorsResponse_FieldTerminalPathValue{ListMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListMethodDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &ListMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{ListMethodDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return &ListMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{ListMethodDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*method_descriptor.MethodDescriptor)}
	case ListMethodDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return &ListMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{ListMethodDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*method_descriptor.PagerCursor)}
	case ListMethodDescriptorsResponse_FieldPathSelectorNextPageToken:
		return &ListMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{ListMethodDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*method_descriptor.PagerCursor)}
	case ListMethodDescriptorsResponse_FieldPathSelectorCurrentOffset:
		return &ListMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{ListMethodDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListMethodDescriptorsResponse_FieldPathSelectorTotalResultsCount:
		return &ListMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{ListMethodDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListMethodDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return &ListMethodDescriptorsResponse_FieldTerminalPathArrayItemValue{ListMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*method_descriptor.MethodDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *ListMethodDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListMethodDescriptorsResponse_FieldSubPath struct {
	selector ListMethodDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListMethodDescriptorsResponse_FieldPath = (*ListMethodDescriptorsResponse_FieldSubPath)(nil)

func (fps *ListMethodDescriptorsResponse_FieldSubPath) Selector() ListMethodDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListMethodDescriptorsResponse_FieldSubPath) AsMethodDescriptorsSubPath() (method_descriptor.MethodDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(method_descriptor.MethodDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListMethodDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListMethodDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListMethodDescriptorsResponse
func (fps *ListMethodDescriptorsResponse_FieldSubPath) Get(source *ListMethodDescriptorsResponse) (values []interface{}) {
	switch fps.selector {
	case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		for _, item := range source.GetMethodDescriptors() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListMethodDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListMethodDescriptorsResponse))
}

// GetSingle returns value of selected field from source ListMethodDescriptorsResponse
func (fps *ListMethodDescriptorsResponse_FieldSubPath) GetSingle(source *ListMethodDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		if len(source.GetMethodDescriptors()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMethodDescriptors()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *ListMethodDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListMethodDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListMethodDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListMethodDescriptorsResponse_FieldSubPath) ClearValue(item *ListMethodDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
			for _, subItem := range item.MethodDescriptors {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListMethodDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListMethodDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListMethodDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListMethodDescriptorsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListMethodDescriptorsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListMethodDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) ListMethodDescriptorsResponse_FieldPathValue {
	return &ListMethodDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListMethodDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListMethodDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListMethodDescriptorsResponse_FieldPathArrayOfValues {
	return &ListMethodDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListMethodDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListMethodDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListMethodDescriptorsResponse_FieldPathArrayItemValue {
	return &ListMethodDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListMethodDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListMethodDescriptorsResponse_FieldPathValue allows storing values for ListMethodDescriptorsResponse fields according to their type
type ListMethodDescriptorsResponse_FieldPathValue interface {
	ListMethodDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListMethodDescriptorsResponse)
	CompareWith(*ListMethodDescriptorsResponse) (cmp int, comparable bool)
}

func ParseListMethodDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (ListMethodDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseListMethodDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMethodDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListMethodDescriptorsResponse_FieldPathValue), nil
}

func MustParseListMethodDescriptorsResponse_FieldPathValue(pathStr, valueStr string) ListMethodDescriptorsResponse_FieldPathValue {
	fpv, err := ParseListMethodDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListMethodDescriptorsResponse_FieldTerminalPathValue struct {
	ListMethodDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ ListMethodDescriptorsResponse_FieldPathValue = (*ListMethodDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListMethodDescriptorsResponse' as interface{}
func (fpv *ListMethodDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListMethodDescriptorsResponse_FieldTerminalPathValue) AsMethodDescriptorsValue() ([]*method_descriptor.MethodDescriptor, bool) {
	res, ok := fpv.value.([]*method_descriptor.MethodDescriptor)
	return res, ok
}
func (fpv *ListMethodDescriptorsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*method_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*method_descriptor.PagerCursor)
	return res, ok
}
func (fpv *ListMethodDescriptorsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*method_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*method_descriptor.PagerCursor)
	return res, ok
}
func (fpv *ListMethodDescriptorsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListMethodDescriptorsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListMethodDescriptorsResponse
func (fpv *ListMethodDescriptorsResponse_FieldTerminalPathValue) SetTo(target **ListMethodDescriptorsResponse) {
	if *target == nil {
		*target = new(ListMethodDescriptorsResponse)
	}
	switch fpv.selector {
	case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		(*target).MethodDescriptors = fpv.value.([]*method_descriptor.MethodDescriptor)
	case ListMethodDescriptorsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*method_descriptor.PagerCursor)
	case ListMethodDescriptorsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*method_descriptor.PagerCursor)
	case ListMethodDescriptorsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListMethodDescriptorsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *ListMethodDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMethodDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListMethodDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'ListMethodDescriptorsResponse'.
func (fpv *ListMethodDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *ListMethodDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return 0, false
	case ListMethodDescriptorsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListMethodDescriptorsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListMethodDescriptorsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListMethodDescriptorsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *ListMethodDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListMethodDescriptorsResponse))
}

type ListMethodDescriptorsResponse_FieldSubPathValue struct {
	ListMethodDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListMethodDescriptorsResponse_FieldPathValue = (*ListMethodDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *ListMethodDescriptorsResponse_FieldSubPathValue) AsMethodDescriptorsPathValue() (method_descriptor.MethodDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(method_descriptor.MethodDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *ListMethodDescriptorsResponse_FieldSubPathValue) SetTo(target **ListMethodDescriptorsResponse) {
	if *target == nil {
		*target = new(ListMethodDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListMethodDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListMethodDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListMethodDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListMethodDescriptorsResponse_FieldSubPathValue) CompareWith(source *ListMethodDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListMethodDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListMethodDescriptorsResponse))
}

// ListMethodDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListMethodDescriptorsResponse according to their type
// Present only for array (repeated) types.
type ListMethodDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListMethodDescriptorsResponse_FieldPath
	ContainsValue(*ListMethodDescriptorsResponse) bool
}

// ParseListMethodDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListMethodDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListMethodDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListMethodDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMethodDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListMethodDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseListMethodDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListMethodDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListMethodDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListMethodDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	ListMethodDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ ListMethodDescriptorsResponse_FieldPathArrayItemValue = (*ListMethodDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListMethodDescriptorsResponse as interface{}
func (fpaiv *ListMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) AsMethodDescriptorsItemValue() (*method_descriptor.MethodDescriptor, bool) {
	res, ok := fpaiv.value.(*method_descriptor.MethodDescriptor)
	return res, ok
}

func (fpaiv *ListMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListMethodDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListMethodDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMethodDescriptorsResponse'
func (fpaiv *ListMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListMethodDescriptorsResponse) bool {
	slice := fpaiv.ListMethodDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListMethodDescriptorsResponse_FieldSubPathArrayItemValue struct {
	ListMethodDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListMethodDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListMethodDescriptorsResponse_FieldSubPathArrayItemValue) AsMethodDescriptorsPathItemValue() (method_descriptor.MethodDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(method_descriptor.MethodDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListMethodDescriptorsResponse'
func (fpaivs *ListMethodDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListMethodDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListMethodDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// ListMethodDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for ListMethodDescriptorsResponse fields according to their type
type ListMethodDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListMethodDescriptorsResponse_FieldPath
}

func ParseListMethodDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListMethodDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListMethodDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListMethodDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListMethodDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseListMethodDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListMethodDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListMethodDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListMethodDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	ListMethodDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ ListMethodDescriptorsResponse_FieldPathArrayOfValues = (*ListMethodDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListMethodDescriptorsResponse_FieldPathSelectorMethodDescriptors:
		for _, v := range fpaov.values.([][]*method_descriptor.MethodDescriptor) {
			values = append(values, v)
		}
	case ListMethodDescriptorsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*method_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case ListMethodDescriptorsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*method_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case ListMethodDescriptorsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListMethodDescriptorsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) AsMethodDescriptorsArrayOfValues() ([][]*method_descriptor.MethodDescriptor, bool) {
	res, ok := fpaov.values.([][]*method_descriptor.MethodDescriptor)
	return res, ok
}
func (fpaov *ListMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*method_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*method_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *ListMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*method_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*method_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *ListMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListMethodDescriptorsResponse_FieldSubPathArrayOfValues struct {
	ListMethodDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListMethodDescriptorsResponse_FieldPathArrayOfValues = (*ListMethodDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListMethodDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListMethodDescriptorsResponse_FieldSubPathArrayOfValues) AsMethodDescriptorsPathArrayOfValues() (method_descriptor.MethodDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(method_descriptor.MethodDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMethodDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMethodDescriptorRequest_FieldPathSelector
	Get(source *WatchMethodDescriptorRequest) []interface{}
	GetSingle(source *WatchMethodDescriptorRequest) (interface{}, bool)
	ClearValue(item *WatchMethodDescriptorRequest)

	// Those methods build corresponding WatchMethodDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMethodDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMethodDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMethodDescriptorRequest_FieldPathArrayItemValue
}

type WatchMethodDescriptorRequest_FieldPathSelector int32

const (
	WatchMethodDescriptorRequest_FieldPathSelectorName      WatchMethodDescriptorRequest_FieldPathSelector = 0
	WatchMethodDescriptorRequest_FieldPathSelectorFieldMask WatchMethodDescriptorRequest_FieldPathSelector = 1
	WatchMethodDescriptorRequest_FieldPathSelectorView      WatchMethodDescriptorRequest_FieldPathSelector = 2
)

func (s WatchMethodDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case WatchMethodDescriptorRequest_FieldPathSelectorName:
		return "name"
	case WatchMethodDescriptorRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchMethodDescriptorRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorRequest: %d", s))
	}
}

func BuildWatchMethodDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchMethodDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMethodDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchMethodDescriptorRequest_FieldTerminalPath{selector: WatchMethodDescriptorRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchMethodDescriptorRequest_FieldTerminalPath{selector: WatchMethodDescriptorRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchMethodDescriptorRequest_FieldTerminalPath{selector: WatchMethodDescriptorRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMethodDescriptorRequest", fp)
}

func ParseWatchMethodDescriptorRequest_FieldPath(rawField string) (WatchMethodDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMethodDescriptorRequest_FieldPath(fp)
}

func MustParseWatchMethodDescriptorRequest_FieldPath(rawField string) WatchMethodDescriptorRequest_FieldPath {
	fp, err := ParseWatchMethodDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMethodDescriptorRequest_FieldTerminalPath struct {
	selector WatchMethodDescriptorRequest_FieldPathSelector
}

var _ WatchMethodDescriptorRequest_FieldPath = (*WatchMethodDescriptorRequest_FieldTerminalPath)(nil)

func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) Selector() WatchMethodDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMethodDescriptorRequest
func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) Get(source *WatchMethodDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMethodDescriptorRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchMethodDescriptorRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchMethodDescriptorRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMethodDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source WatchMethodDescriptorRequest
func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) GetSingle(source *WatchMethodDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchMethodDescriptorRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchMethodDescriptorRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchMethodDescriptorRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMethodDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMethodDescriptorRequest_FieldPathSelectorName:
		return (*method_descriptor.Reference)(nil)
	case WatchMethodDescriptorRequest_FieldPathSelectorFieldMask:
		return (*method_descriptor.MethodDescriptor_FieldMask)(nil)
	case WatchMethodDescriptorRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) ClearValue(item *WatchMethodDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case WatchMethodDescriptorRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchMethodDescriptorRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchMethodDescriptorRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMethodDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMethodDescriptorRequest_FieldPathSelectorName ||
		fp.selector == WatchMethodDescriptorRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchMethodDescriptorRequest_FieldPathSelectorView
}

func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) WatchMethodDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case WatchMethodDescriptorRequest_FieldPathSelectorName:
		return &WatchMethodDescriptorRequest_FieldTerminalPathValue{WatchMethodDescriptorRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.Reference)}
	case WatchMethodDescriptorRequest_FieldPathSelectorFieldMask:
		return &WatchMethodDescriptorRequest_FieldTerminalPathValue{WatchMethodDescriptorRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.MethodDescriptor_FieldMask)}
	case WatchMethodDescriptorRequest_FieldPathSelectorView:
		return &WatchMethodDescriptorRequest_FieldTerminalPathValue{WatchMethodDescriptorRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMethodDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &WatchMethodDescriptorRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMethodDescriptorRequest_FieldPathSelectorName:
		return &WatchMethodDescriptorRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.Reference)}
	case WatchMethodDescriptorRequest_FieldPathSelectorFieldMask:
		return &WatchMethodDescriptorRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.MethodDescriptor_FieldMask)}
	case WatchMethodDescriptorRequest_FieldPathSelectorView:
		return &WatchMethodDescriptorRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMethodDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchMethodDescriptorRequest_FieldPathValue allows storing values for WatchMethodDescriptorRequest fields according to their type
type WatchMethodDescriptorRequest_FieldPathValue interface {
	WatchMethodDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMethodDescriptorRequest)
	CompareWith(*WatchMethodDescriptorRequest) (cmp int, comparable bool)
}

func ParseWatchMethodDescriptorRequest_FieldPathValue(pathStr, valueStr string) (WatchMethodDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseWatchMethodDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMethodDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMethodDescriptorRequest_FieldPathValue), nil
}

func MustParseWatchMethodDescriptorRequest_FieldPathValue(pathStr, valueStr string) WatchMethodDescriptorRequest_FieldPathValue {
	fpv, err := ParseWatchMethodDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMethodDescriptorRequest_FieldTerminalPathValue struct {
	WatchMethodDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ WatchMethodDescriptorRequest_FieldPathValue = (*WatchMethodDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchMethodDescriptorRequest' as interface{}
func (fpv *WatchMethodDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMethodDescriptorRequest_FieldTerminalPathValue) AsNameValue() (*method_descriptor.Reference, bool) {
	res, ok := fpv.value.(*method_descriptor.Reference)
	return res, ok
}
func (fpv *WatchMethodDescriptorRequest_FieldTerminalPathValue) AsFieldMaskValue() (*method_descriptor.MethodDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*method_descriptor.MethodDescriptor_FieldMask)
	return res, ok
}
func (fpv *WatchMethodDescriptorRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchMethodDescriptorRequest
func (fpv *WatchMethodDescriptorRequest_FieldTerminalPathValue) SetTo(target **WatchMethodDescriptorRequest) {
	if *target == nil {
		*target = new(WatchMethodDescriptorRequest)
	}
	switch fpv.selector {
	case WatchMethodDescriptorRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*method_descriptor.Reference)
	case WatchMethodDescriptorRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*method_descriptor.MethodDescriptor_FieldMask)
	case WatchMethodDescriptorRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *WatchMethodDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMethodDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMethodDescriptorRequest_FieldTerminalPathValue' with the value under path in 'WatchMethodDescriptorRequest'.
func (fpv *WatchMethodDescriptorRequest_FieldTerminalPathValue) CompareWith(source *WatchMethodDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case WatchMethodDescriptorRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*method_descriptor.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMethodDescriptorRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchMethodDescriptorRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *WatchMethodDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMethodDescriptorRequest))
}

// WatchMethodDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchMethodDescriptorRequest according to their type
// Present only for array (repeated) types.
type WatchMethodDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMethodDescriptorRequest_FieldPath
	ContainsValue(*WatchMethodDescriptorRequest) bool
}

// ParseWatchMethodDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMethodDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMethodDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMethodDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMethodDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMethodDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchMethodDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchMethodDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMethodDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMethodDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	WatchMethodDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ WatchMethodDescriptorRequest_FieldPathArrayItemValue = (*WatchMethodDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMethodDescriptorRequest as interface{}
func (fpaiv *WatchMethodDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchMethodDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMethodDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMethodDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMethodDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMethodDescriptorRequest'
func (fpaiv *WatchMethodDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMethodDescriptorRequest) bool {
	slice := fpaiv.WatchMethodDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchMethodDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for WatchMethodDescriptorRequest fields according to their type
type WatchMethodDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMethodDescriptorRequest_FieldPath
}

func ParseWatchMethodDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMethodDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMethodDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMethodDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMethodDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchMethodDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMethodDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMethodDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMethodDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	WatchMethodDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ WatchMethodDescriptorRequest_FieldPathArrayOfValues = (*WatchMethodDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMethodDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMethodDescriptorRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*method_descriptor.Reference) {
			values = append(values, v)
		}
	case WatchMethodDescriptorRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*method_descriptor.MethodDescriptor_FieldMask) {
			values = append(values, v)
		}
	case WatchMethodDescriptorRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMethodDescriptorRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*method_descriptor.Reference, bool) {
	res, ok := fpaov.values.([]*method_descriptor.Reference)
	return res, ok
}
func (fpaov *WatchMethodDescriptorRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*method_descriptor.MethodDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*method_descriptor.MethodDescriptor_FieldMask)
	return res, ok
}
func (fpaov *WatchMethodDescriptorRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMethodDescriptorResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMethodDescriptorResponse_FieldPathSelector
	Get(source *WatchMethodDescriptorResponse) []interface{}
	GetSingle(source *WatchMethodDescriptorResponse) (interface{}, bool)
	ClearValue(item *WatchMethodDescriptorResponse)

	// Those methods build corresponding WatchMethodDescriptorResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMethodDescriptorResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMethodDescriptorResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMethodDescriptorResponse_FieldPathArrayItemValue
}

type WatchMethodDescriptorResponse_FieldPathSelector int32

const (
	WatchMethodDescriptorResponse_FieldPathSelectorChange WatchMethodDescriptorResponse_FieldPathSelector = 0
)

func (s WatchMethodDescriptorResponse_FieldPathSelector) String() string {
	switch s {
	case WatchMethodDescriptorResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorResponse: %d", s))
	}
}

func BuildWatchMethodDescriptorResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchMethodDescriptorResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMethodDescriptorResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchMethodDescriptorResponse_FieldTerminalPath{selector: WatchMethodDescriptorResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMethodDescriptorResponse", fp)
}

func ParseWatchMethodDescriptorResponse_FieldPath(rawField string) (WatchMethodDescriptorResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMethodDescriptorResponse_FieldPath(fp)
}

func MustParseWatchMethodDescriptorResponse_FieldPath(rawField string) WatchMethodDescriptorResponse_FieldPath {
	fp, err := ParseWatchMethodDescriptorResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMethodDescriptorResponse_FieldTerminalPath struct {
	selector WatchMethodDescriptorResponse_FieldPathSelector
}

var _ WatchMethodDescriptorResponse_FieldPath = (*WatchMethodDescriptorResponse_FieldTerminalPath)(nil)

func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) Selector() WatchMethodDescriptorResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMethodDescriptorResponse
func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) Get(source *WatchMethodDescriptorResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMethodDescriptorResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMethodDescriptorResponse))
}

// GetSingle returns value pointed by specific field of from source WatchMethodDescriptorResponse
func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) GetSingle(source *WatchMethodDescriptorResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchMethodDescriptorResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMethodDescriptorResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMethodDescriptorResponse_FieldPathSelectorChange:
		return (*method_descriptor.MethodDescriptorChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) ClearValue(item *WatchMethodDescriptorResponse) {
	if item != nil {
		switch fp.selector {
		case WatchMethodDescriptorResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMethodDescriptorResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMethodDescriptorResponse_FieldPathSelectorChange
}

func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) WithIValue(value interface{}) WatchMethodDescriptorResponse_FieldPathValue {
	switch fp.selector {
	case WatchMethodDescriptorResponse_FieldPathSelectorChange:
		return &WatchMethodDescriptorResponse_FieldTerminalPathValue{WatchMethodDescriptorResponse_FieldTerminalPath: *fp, value: value.(*method_descriptor.MethodDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMethodDescriptorResponse_FieldPathArrayOfValues {
	fpaov := &WatchMethodDescriptorResponse_FieldTerminalPathArrayOfValues{WatchMethodDescriptorResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMethodDescriptorResponse_FieldPathSelectorChange:
		return &WatchMethodDescriptorResponse_FieldTerminalPathArrayOfValues{WatchMethodDescriptorResponse_FieldTerminalPath: *fp, values: values.([]*method_descriptor.MethodDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMethodDescriptorResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorResponse: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchMethodDescriptorResponse_FieldPathValue allows storing values for WatchMethodDescriptorResponse fields according to their type
type WatchMethodDescriptorResponse_FieldPathValue interface {
	WatchMethodDescriptorResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMethodDescriptorResponse)
	CompareWith(*WatchMethodDescriptorResponse) (cmp int, comparable bool)
}

func ParseWatchMethodDescriptorResponse_FieldPathValue(pathStr, valueStr string) (WatchMethodDescriptorResponse_FieldPathValue, error) {
	fp, err := ParseWatchMethodDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMethodDescriptorResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMethodDescriptorResponse_FieldPathValue), nil
}

func MustParseWatchMethodDescriptorResponse_FieldPathValue(pathStr, valueStr string) WatchMethodDescriptorResponse_FieldPathValue {
	fpv, err := ParseWatchMethodDescriptorResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMethodDescriptorResponse_FieldTerminalPathValue struct {
	WatchMethodDescriptorResponse_FieldTerminalPath
	value interface{}
}

var _ WatchMethodDescriptorResponse_FieldPathValue = (*WatchMethodDescriptorResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchMethodDescriptorResponse' as interface{}
func (fpv *WatchMethodDescriptorResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMethodDescriptorResponse_FieldTerminalPathValue) AsChangeValue() (*method_descriptor.MethodDescriptorChange, bool) {
	res, ok := fpv.value.(*method_descriptor.MethodDescriptorChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchMethodDescriptorResponse
func (fpv *WatchMethodDescriptorResponse_FieldTerminalPathValue) SetTo(target **WatchMethodDescriptorResponse) {
	if *target == nil {
		*target = new(WatchMethodDescriptorResponse)
	}
	switch fpv.selector {
	case WatchMethodDescriptorResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*method_descriptor.MethodDescriptorChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorResponse: %d", fpv.selector))
	}
}

func (fpv *WatchMethodDescriptorResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMethodDescriptorResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMethodDescriptorResponse_FieldTerminalPathValue' with the value under path in 'WatchMethodDescriptorResponse'.
func (fpv *WatchMethodDescriptorResponse_FieldTerminalPathValue) CompareWith(source *WatchMethodDescriptorResponse) (int, bool) {
	switch fpv.selector {
	case WatchMethodDescriptorResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorResponse: %d", fpv.selector))
	}
}

func (fpv *WatchMethodDescriptorResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMethodDescriptorResponse))
}

// WatchMethodDescriptorResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchMethodDescriptorResponse according to their type
// Present only for array (repeated) types.
type WatchMethodDescriptorResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMethodDescriptorResponse_FieldPath
	ContainsValue(*WatchMethodDescriptorResponse) bool
}

// ParseWatchMethodDescriptorResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMethodDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMethodDescriptorResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMethodDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMethodDescriptorResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMethodDescriptorResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchMethodDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchMethodDescriptorResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMethodDescriptorResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMethodDescriptorResponse_FieldTerminalPathArrayItemValue struct {
	WatchMethodDescriptorResponse_FieldTerminalPath
	value interface{}
}

var _ WatchMethodDescriptorResponse_FieldPathArrayItemValue = (*WatchMethodDescriptorResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMethodDescriptorResponse as interface{}
func (fpaiv *WatchMethodDescriptorResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchMethodDescriptorResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMethodDescriptorResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMethodDescriptorResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMethodDescriptorResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMethodDescriptorResponse'
func (fpaiv *WatchMethodDescriptorResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMethodDescriptorResponse) bool {
	slice := fpaiv.WatchMethodDescriptorResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchMethodDescriptorResponse_FieldPathArrayOfValues allows storing slice of values for WatchMethodDescriptorResponse fields according to their type
type WatchMethodDescriptorResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMethodDescriptorResponse_FieldPath
}

func ParseWatchMethodDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMethodDescriptorResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMethodDescriptorResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMethodDescriptorResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMethodDescriptorResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchMethodDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMethodDescriptorResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMethodDescriptorResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMethodDescriptorResponse_FieldTerminalPathArrayOfValues struct {
	WatchMethodDescriptorResponse_FieldTerminalPath
	values interface{}
}

var _ WatchMethodDescriptorResponse_FieldPathArrayOfValues = (*WatchMethodDescriptorResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMethodDescriptorResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMethodDescriptorResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*method_descriptor.MethodDescriptorChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMethodDescriptorResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*method_descriptor.MethodDescriptorChange, bool) {
	res, ok := fpaov.values.([]*method_descriptor.MethodDescriptorChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMethodDescriptorsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMethodDescriptorsRequest_FieldPathSelector
	Get(source *WatchMethodDescriptorsRequest) []interface{}
	GetSingle(source *WatchMethodDescriptorsRequest) (interface{}, bool)
	ClearValue(item *WatchMethodDescriptorsRequest)

	// Those methods build corresponding WatchMethodDescriptorsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMethodDescriptorsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMethodDescriptorsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMethodDescriptorsRequest_FieldPathArrayItemValue
}

type WatchMethodDescriptorsRequest_FieldPathSelector int32

const (
	WatchMethodDescriptorsRequest_FieldPathSelectorType         WatchMethodDescriptorsRequest_FieldPathSelector = 0
	WatchMethodDescriptorsRequest_FieldPathSelectorPageSize     WatchMethodDescriptorsRequest_FieldPathSelector = 1
	WatchMethodDescriptorsRequest_FieldPathSelectorPageToken    WatchMethodDescriptorsRequest_FieldPathSelector = 2
	WatchMethodDescriptorsRequest_FieldPathSelectorOrderBy      WatchMethodDescriptorsRequest_FieldPathSelector = 3
	WatchMethodDescriptorsRequest_FieldPathSelectorResumeToken  WatchMethodDescriptorsRequest_FieldPathSelector = 4
	WatchMethodDescriptorsRequest_FieldPathSelectorStartingTime WatchMethodDescriptorsRequest_FieldPathSelector = 5
	WatchMethodDescriptorsRequest_FieldPathSelectorFilter       WatchMethodDescriptorsRequest_FieldPathSelector = 6
	WatchMethodDescriptorsRequest_FieldPathSelectorFieldMask    WatchMethodDescriptorsRequest_FieldPathSelector = 7
	WatchMethodDescriptorsRequest_FieldPathSelectorView         WatchMethodDescriptorsRequest_FieldPathSelector = 8
	WatchMethodDescriptorsRequest_FieldPathSelectorMaxChunkSize WatchMethodDescriptorsRequest_FieldPathSelector = 9
)

func (s WatchMethodDescriptorsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchMethodDescriptorsRequest_FieldPathSelectorType:
		return "type"
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchMethodDescriptorsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchMethodDescriptorsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchMethodDescriptorsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchMethodDescriptorsRequest_FieldPathSelectorView:
		return "view"
	case WatchMethodDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsRequest: %d", s))
	}
}

func BuildWatchMethodDescriptorsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchMethodDescriptorsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMethodDescriptorsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorType}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchMethodDescriptorsRequest_FieldTerminalPath{selector: WatchMethodDescriptorsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMethodDescriptorsRequest", fp)
}

func ParseWatchMethodDescriptorsRequest_FieldPath(rawField string) (WatchMethodDescriptorsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMethodDescriptorsRequest_FieldPath(fp)
}

func MustParseWatchMethodDescriptorsRequest_FieldPath(rawField string) WatchMethodDescriptorsRequest_FieldPath {
	fp, err := ParseWatchMethodDescriptorsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMethodDescriptorsRequest_FieldTerminalPath struct {
	selector WatchMethodDescriptorsRequest_FieldPathSelector
}

var _ WatchMethodDescriptorsRequest_FieldPath = (*WatchMethodDescriptorsRequest_FieldTerminalPath)(nil)

func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) Selector() WatchMethodDescriptorsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMethodDescriptorsRequest
func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) Get(source *WatchMethodDescriptorsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMethodDescriptorsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchMethodDescriptorsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchMethodDescriptorsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchMethodDescriptorsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchMethodDescriptorsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchMethodDescriptorsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchMethodDescriptorsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchMethodDescriptorsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchMethodDescriptorsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchMethodDescriptorsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMethodDescriptorsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchMethodDescriptorsRequest
func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) GetSingle(source *WatchMethodDescriptorsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchMethodDescriptorsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchMethodDescriptorsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchMethodDescriptorsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchMethodDescriptorsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchMethodDescriptorsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchMethodDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMethodDescriptorsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMethodDescriptorsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageToken:
		return (*method_descriptor.PagerCursor)(nil)
	case WatchMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		return (*method_descriptor.OrderBy)(nil)
	case WatchMethodDescriptorsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchMethodDescriptorsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchMethodDescriptorsRequest_FieldPathSelectorFilter:
		return (*method_descriptor.Filter)(nil)
	case WatchMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return (*method_descriptor.MethodDescriptor_FieldMask)(nil)
	case WatchMethodDescriptorsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchMethodDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) ClearValue(item *WatchMethodDescriptorsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchMethodDescriptorsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchMethodDescriptorsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchMethodDescriptorsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchMethodDescriptorsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchMethodDescriptorsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchMethodDescriptorsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchMethodDescriptorsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchMethodDescriptorsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchMethodDescriptorsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchMethodDescriptorsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMethodDescriptorsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMethodDescriptorsRequest_FieldPathSelectorType ||
		fp.selector == WatchMethodDescriptorsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchMethodDescriptorsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchMethodDescriptorsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchMethodDescriptorsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchMethodDescriptorsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchMethodDescriptorsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchMethodDescriptorsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchMethodDescriptorsRequest_FieldPathSelectorView ||
		fp.selector == WatchMethodDescriptorsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchMethodDescriptorsRequest_FieldPathValue {
	switch fp.selector {
	case WatchMethodDescriptorsRequest_FieldPathSelectorType:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathValue{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageSize:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathValue{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageToken:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathValue{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.PagerCursor)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathValue{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.OrderBy)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorResumeToken:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathValue{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorStartingTime:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathValue{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorFilter:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathValue{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.Filter)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathValue{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.MethodDescriptor_FieldMask)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorView:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathValue{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathValue{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMethodDescriptorsRequest_FieldPathArrayOfValues {
	fpaov := &WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMethodDescriptorsRequest_FieldPathSelectorType:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageSize:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageToken:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.PagerCursor)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.OrderBy)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorResumeToken:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorStartingTime:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorFilter:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.Filter)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.MethodDescriptor_FieldMask)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorView:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchMethodDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMethodDescriptorsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsRequest: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchMethodDescriptorsRequest_FieldPathValue allows storing values for WatchMethodDescriptorsRequest fields according to their type
type WatchMethodDescriptorsRequest_FieldPathValue interface {
	WatchMethodDescriptorsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMethodDescriptorsRequest)
	CompareWith(*WatchMethodDescriptorsRequest) (cmp int, comparable bool)
}

func ParseWatchMethodDescriptorsRequest_FieldPathValue(pathStr, valueStr string) (WatchMethodDescriptorsRequest_FieldPathValue, error) {
	fp, err := ParseWatchMethodDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMethodDescriptorsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMethodDescriptorsRequest_FieldPathValue), nil
}

func MustParseWatchMethodDescriptorsRequest_FieldPathValue(pathStr, valueStr string) WatchMethodDescriptorsRequest_FieldPathValue {
	fpv, err := ParseWatchMethodDescriptorsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMethodDescriptorsRequest_FieldTerminalPathValue struct {
	WatchMethodDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchMethodDescriptorsRequest_FieldPathValue = (*WatchMethodDescriptorsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchMethodDescriptorsRequest' as interface{}
func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) AsPageTokenValue() (*method_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*method_descriptor.PagerCursor)
	return res, ok
}
func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) AsOrderByValue() (*method_descriptor.OrderBy, bool) {
	res, ok := fpv.value.(*method_descriptor.OrderBy)
	return res, ok
}
func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) AsFilterValue() (*method_descriptor.Filter, bool) {
	res, ok := fpv.value.(*method_descriptor.Filter)
	return res, ok
}
func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*method_descriptor.MethodDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*method_descriptor.MethodDescriptor_FieldMask)
	return res, ok
}
func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchMethodDescriptorsRequest
func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) SetTo(target **WatchMethodDescriptorsRequest) {
	if *target == nil {
		*target = new(WatchMethodDescriptorsRequest)
	}
	switch fpv.selector {
	case WatchMethodDescriptorsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*method_descriptor.PagerCursor)
	case WatchMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*method_descriptor.OrderBy)
	case WatchMethodDescriptorsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchMethodDescriptorsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchMethodDescriptorsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*method_descriptor.Filter)
	case WatchMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*method_descriptor.MethodDescriptor_FieldMask)
	case WatchMethodDescriptorsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchMethodDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMethodDescriptorsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMethodDescriptorsRequest_FieldTerminalPathValue' with the value under path in 'WatchMethodDescriptorsRequest'.
func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) CompareWith(source *WatchMethodDescriptorsRequest) (int, bool) {
	switch fpv.selector {
	case WatchMethodDescriptorsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchMethodDescriptorsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMethodDescriptorsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMethodDescriptorsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchMethodDescriptorsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMethodDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchMethodDescriptorsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMethodDescriptorsRequest))
}

// WatchMethodDescriptorsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchMethodDescriptorsRequest according to their type
// Present only for array (repeated) types.
type WatchMethodDescriptorsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMethodDescriptorsRequest_FieldPath
	ContainsValue(*WatchMethodDescriptorsRequest) bool
}

// ParseWatchMethodDescriptorsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMethodDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMethodDescriptorsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMethodDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMethodDescriptorsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMethodDescriptorsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchMethodDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchMethodDescriptorsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMethodDescriptorsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMethodDescriptorsRequest_FieldTerminalPathArrayItemValue struct {
	WatchMethodDescriptorsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchMethodDescriptorsRequest_FieldPathArrayItemValue = (*WatchMethodDescriptorsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMethodDescriptorsRequest as interface{}
func (fpaiv *WatchMethodDescriptorsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchMethodDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMethodDescriptorsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMethodDescriptorsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMethodDescriptorsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMethodDescriptorsRequest'
func (fpaiv *WatchMethodDescriptorsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMethodDescriptorsRequest) bool {
	slice := fpaiv.WatchMethodDescriptorsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchMethodDescriptorsRequest_FieldPathArrayOfValues allows storing slice of values for WatchMethodDescriptorsRequest fields according to their type
type WatchMethodDescriptorsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMethodDescriptorsRequest_FieldPath
}

func ParseWatchMethodDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMethodDescriptorsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMethodDescriptorsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMethodDescriptorsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMethodDescriptorsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchMethodDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMethodDescriptorsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMethodDescriptorsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues struct {
	WatchMethodDescriptorsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchMethodDescriptorsRequest_FieldPathArrayOfValues = (*WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMethodDescriptorsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*method_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*method_descriptor.OrderBy) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*method_descriptor.Filter) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*method_descriptor.MethodDescriptor_FieldMask) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*method_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*method_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*method_descriptor.OrderBy, bool) {
	res, ok := fpaov.values.([]*method_descriptor.OrderBy)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*method_descriptor.Filter, bool) {
	res, ok := fpaov.values.([]*method_descriptor.Filter)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*method_descriptor.MethodDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*method_descriptor.MethodDescriptor_FieldMask)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMethodDescriptorsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMethodDescriptorsResponse_FieldPathSelector
	Get(source *WatchMethodDescriptorsResponse) []interface{}
	GetSingle(source *WatchMethodDescriptorsResponse) (interface{}, bool)
	ClearValue(item *WatchMethodDescriptorsResponse)

	// Those methods build corresponding WatchMethodDescriptorsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMethodDescriptorsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMethodDescriptorsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMethodDescriptorsResponse_FieldPathArrayItemValue
}

type WatchMethodDescriptorsResponse_FieldPathSelector int32

const (
	WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges WatchMethodDescriptorsResponse_FieldPathSelector = 0
	WatchMethodDescriptorsResponse_FieldPathSelectorIsCurrent               WatchMethodDescriptorsResponse_FieldPathSelector = 1
	WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange         WatchMethodDescriptorsResponse_FieldPathSelector = 2
	WatchMethodDescriptorsResponse_FieldPathSelectorResumeToken             WatchMethodDescriptorsResponse_FieldPathSelector = 3
	WatchMethodDescriptorsResponse_FieldPathSelectorSnapshotSize            WatchMethodDescriptorsResponse_FieldPathSelector = 4
	WatchMethodDescriptorsResponse_FieldPathSelectorIsSoftReset             WatchMethodDescriptorsResponse_FieldPathSelector = 5
	WatchMethodDescriptorsResponse_FieldPathSelectorIsHardReset             WatchMethodDescriptorsResponse_FieldPathSelector = 6
)

func (s WatchMethodDescriptorsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges:
		return "method_descriptor_changes"
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchMethodDescriptorsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchMethodDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", s))
	}
}

func BuildWatchMethodDescriptorsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchMethodDescriptorsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMethodDescriptorsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "method_descriptor_changes", "methodDescriptorChanges", "method-descriptor-changes":
			return &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchMethodDescriptorsResponse_FieldTerminalPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchMethodDescriptorsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchMethodDescriptorsResponse_FieldSubPath{selector: WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMethodDescriptorsResponse", fp)
}

func ParseWatchMethodDescriptorsResponse_FieldPath(rawField string) (WatchMethodDescriptorsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMethodDescriptorsResponse_FieldPath(fp)
}

func MustParseWatchMethodDescriptorsResponse_FieldPath(rawField string) WatchMethodDescriptorsResponse_FieldPath {
	fp, err := ParseWatchMethodDescriptorsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMethodDescriptorsResponse_FieldTerminalPath struct {
	selector WatchMethodDescriptorsResponse_FieldPathSelector
}

var _ WatchMethodDescriptorsResponse_FieldPath = (*WatchMethodDescriptorsResponse_FieldTerminalPath)(nil)

func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) Selector() WatchMethodDescriptorsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMethodDescriptorsResponse
func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) Get(source *WatchMethodDescriptorsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges:
			for _, value := range source.GetMethodDescriptorChanges() {
				values = append(values, value)
			}
		case WatchMethodDescriptorsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchMethodDescriptorsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchMethodDescriptorsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchMethodDescriptorsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchMethodDescriptorsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMethodDescriptorsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchMethodDescriptorsResponse
func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) GetSingle(source *WatchMethodDescriptorsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges:
		res := source.GetMethodDescriptorChanges()
		return res, res != nil
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchMethodDescriptorsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchMethodDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMethodDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges:
		return ([]*method_descriptor.MethodDescriptorChange)(nil)
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchMethodDescriptorsResponse_PageTokenChange)(nil)
	case WatchMethodDescriptorsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchMethodDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) ClearValue(item *WatchMethodDescriptorsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges:
			item.MethodDescriptorChanges = nil
		case WatchMethodDescriptorsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchMethodDescriptorsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchMethodDescriptorsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchMethodDescriptorsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchMethodDescriptorsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMethodDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges ||
		fp.selector == WatchMethodDescriptorsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchMethodDescriptorsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchMethodDescriptorsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchMethodDescriptorsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchMethodDescriptorsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchMethodDescriptorsResponse_FieldPathValue {
	switch fp.selector {
	case WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathValue{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.([]*method_descriptor.MethodDescriptorChange)}
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsCurrent:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathValue{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathValue{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*WatchMethodDescriptorsResponse_PageTokenChange)}
	case WatchMethodDescriptorsResponse_FieldPathSelectorResumeToken:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathValue{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchMethodDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathValue{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathValue{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsHardReset:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathValue{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMethodDescriptorsResponse_FieldPathArrayOfValues {
	fpaov := &WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, values: values.([][]*method_descriptor.MethodDescriptorChange)}
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsCurrent:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]*WatchMethodDescriptorsResponse_PageTokenChange)}
	case WatchMethodDescriptorsResponse_FieldPathSelectorResumeToken:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchMethodDescriptorsResponse_FieldPathSelectorSnapshotSize:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsSoftReset:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsHardReset:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMethodDescriptorsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges:
		return &WatchMethodDescriptorsResponse_FieldTerminalPathArrayItemValue{WatchMethodDescriptorsResponse_FieldTerminalPath: *fp, value: value.(*method_descriptor.MethodDescriptorChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchMethodDescriptorsResponse_FieldSubPath struct {
	selector WatchMethodDescriptorsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchMethodDescriptorsResponse_FieldPath = (*WatchMethodDescriptorsResponse_FieldSubPath)(nil)

func (fps *WatchMethodDescriptorsResponse_FieldSubPath) Selector() WatchMethodDescriptorsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchMethodDescriptorsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchMethodDescriptorsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchMethodDescriptorsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchMethodDescriptorsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchMethodDescriptorsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchMethodDescriptorsResponse
func (fps *WatchMethodDescriptorsResponse_FieldSubPath) Get(source *WatchMethodDescriptorsResponse) (values []interface{}) {
	switch fps.selector {
	case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchMethodDescriptorsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchMethodDescriptorsResponse))
}

// GetSingle returns value of selected field from source WatchMethodDescriptorsResponse
func (fps *WatchMethodDescriptorsResponse_FieldSubPath) GetSingle(source *WatchMethodDescriptorsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fps.selector))
	}
}

func (fps *WatchMethodDescriptorsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchMethodDescriptorsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchMethodDescriptorsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchMethodDescriptorsResponse_FieldSubPath) ClearValue(item *WatchMethodDescriptorsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchMethodDescriptorsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchMethodDescriptorsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchMethodDescriptorsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchMethodDescriptorsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchMethodDescriptorsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchMethodDescriptorsResponse_FieldSubPath) WithIValue(value interface{}) WatchMethodDescriptorsResponse_FieldPathValue {
	return &WatchMethodDescriptorsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchMethodDescriptorsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchMethodDescriptorsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchMethodDescriptorsResponse_FieldPathArrayOfValues {
	return &WatchMethodDescriptorsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchMethodDescriptorsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchMethodDescriptorsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchMethodDescriptorsResponse_FieldPathArrayItemValue {
	return &WatchMethodDescriptorsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchMethodDescriptorsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchMethodDescriptorsResponse_FieldPathValue allows storing values for WatchMethodDescriptorsResponse fields according to their type
type WatchMethodDescriptorsResponse_FieldPathValue interface {
	WatchMethodDescriptorsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMethodDescriptorsResponse)
	CompareWith(*WatchMethodDescriptorsResponse) (cmp int, comparable bool)
}

func ParseWatchMethodDescriptorsResponse_FieldPathValue(pathStr, valueStr string) (WatchMethodDescriptorsResponse_FieldPathValue, error) {
	fp, err := ParseWatchMethodDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMethodDescriptorsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMethodDescriptorsResponse_FieldPathValue), nil
}

func MustParseWatchMethodDescriptorsResponse_FieldPathValue(pathStr, valueStr string) WatchMethodDescriptorsResponse_FieldPathValue {
	fpv, err := ParseWatchMethodDescriptorsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMethodDescriptorsResponse_FieldTerminalPathValue struct {
	WatchMethodDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchMethodDescriptorsResponse_FieldPathValue = (*WatchMethodDescriptorsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchMethodDescriptorsResponse' as interface{}
func (fpv *WatchMethodDescriptorsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMethodDescriptorsResponse_FieldTerminalPathValue) AsMethodDescriptorChangesValue() ([]*method_descriptor.MethodDescriptorChange, bool) {
	res, ok := fpv.value.([]*method_descriptor.MethodDescriptorChange)
	return res, ok
}
func (fpv *WatchMethodDescriptorsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchMethodDescriptorsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchMethodDescriptorsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchMethodDescriptorsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchMethodDescriptorsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchMethodDescriptorsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchMethodDescriptorsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchMethodDescriptorsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchMethodDescriptorsResponse
func (fpv *WatchMethodDescriptorsResponse_FieldTerminalPathValue) SetTo(target **WatchMethodDescriptorsResponse) {
	if *target == nil {
		*target = new(WatchMethodDescriptorsResponse)
	}
	switch fpv.selector {
	case WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges:
		(*target).MethodDescriptorChanges = fpv.value.([]*method_descriptor.MethodDescriptorChange)
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchMethodDescriptorsResponse_PageTokenChange)
	case WatchMethodDescriptorsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchMethodDescriptorsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchMethodDescriptorsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMethodDescriptorsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMethodDescriptorsResponse_FieldTerminalPathValue' with the value under path in 'WatchMethodDescriptorsResponse'.
func (fpv *WatchMethodDescriptorsResponse_FieldTerminalPathValue) CompareWith(source *WatchMethodDescriptorsResponse) (int, bool) {
	switch fpv.selector {
	case WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges:
		return 0, false
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchMethodDescriptorsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMethodDescriptorsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchMethodDescriptorsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMethodDescriptorsResponse))
}

type WatchMethodDescriptorsResponse_FieldSubPathValue struct {
	WatchMethodDescriptorsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchMethodDescriptorsResponse_FieldPathValue = (*WatchMethodDescriptorsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchMethodDescriptorsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchMethodDescriptorsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchMethodDescriptorsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchMethodDescriptorsResponse_FieldSubPathValue) SetTo(target **WatchMethodDescriptorsResponse) {
	if *target == nil {
		*target = new(WatchMethodDescriptorsResponse)
	}
	switch fpvs.Selector() {
	case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchMethodDescriptorsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchMethodDescriptorsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMethodDescriptorsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchMethodDescriptorsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchMethodDescriptorsResponse_FieldSubPathValue) CompareWith(source *WatchMethodDescriptorsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchMethodDescriptorsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchMethodDescriptorsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchMethodDescriptorsResponse))
}

// WatchMethodDescriptorsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchMethodDescriptorsResponse according to their type
// Present only for array (repeated) types.
type WatchMethodDescriptorsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMethodDescriptorsResponse_FieldPath
	ContainsValue(*WatchMethodDescriptorsResponse) bool
}

// ParseWatchMethodDescriptorsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMethodDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMethodDescriptorsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMethodDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMethodDescriptorsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMethodDescriptorsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchMethodDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchMethodDescriptorsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMethodDescriptorsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMethodDescriptorsResponse_FieldTerminalPathArrayItemValue struct {
	WatchMethodDescriptorsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchMethodDescriptorsResponse_FieldPathArrayItemValue = (*WatchMethodDescriptorsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMethodDescriptorsResponse as interface{}
func (fpaiv *WatchMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) AsMethodDescriptorChangesItemValue() (*method_descriptor.MethodDescriptorChange, bool) {
	res, ok := fpaiv.value.(*method_descriptor.MethodDescriptorChange)
	return res, ok
}

func (fpaiv *WatchMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMethodDescriptorsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMethodDescriptorsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMethodDescriptorsResponse'
func (fpaiv *WatchMethodDescriptorsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMethodDescriptorsResponse) bool {
	slice := fpaiv.WatchMethodDescriptorsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchMethodDescriptorsResponse_FieldSubPathArrayItemValue struct {
	WatchMethodDescriptorsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchMethodDescriptorsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchMethodDescriptorsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchMethodDescriptorsResponse'
func (fpaivs *WatchMethodDescriptorsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchMethodDescriptorsResponse) bool {
	switch fpaivs.Selector() {
	case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse: %d", fpaivs.Selector()))
	}
}

// WatchMethodDescriptorsResponse_FieldPathArrayOfValues allows storing slice of values for WatchMethodDescriptorsResponse fields according to their type
type WatchMethodDescriptorsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMethodDescriptorsResponse_FieldPath
}

func ParseWatchMethodDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMethodDescriptorsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMethodDescriptorsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchMethodDescriptorsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMethodDescriptorsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchMethodDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMethodDescriptorsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMethodDescriptorsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues struct {
	WatchMethodDescriptorsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchMethodDescriptorsResponse_FieldPathArrayOfValues = (*WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMethodDescriptorsResponse_FieldPathSelectorMethodDescriptorChanges:
		for _, v := range fpaov.values.([][]*method_descriptor.MethodDescriptorChange) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchMethodDescriptorsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) AsMethodDescriptorChangesArrayOfValues() ([][]*method_descriptor.MethodDescriptorChange, bool) {
	res, ok := fpaov.values.([][]*method_descriptor.MethodDescriptorChange)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchMethodDescriptorsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchMethodDescriptorsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchMethodDescriptorsResponse_FieldSubPathArrayOfValues struct {
	WatchMethodDescriptorsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchMethodDescriptorsResponse_FieldPathArrayOfValues = (*WatchMethodDescriptorsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchMethodDescriptorsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchMethodDescriptorsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchMethodDescriptorsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchMethodDescriptorsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchMethodDescriptorsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchMethodDescriptorsResponse_PageTokenChange)

	// Those methods build corresponding WatchMethodDescriptorsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchMethodDescriptorsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelector = 0
	WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchMethodDescriptorsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchMethodDescriptorsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchMethodDescriptorsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath{selector: WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchMethodDescriptorsResponse_PageTokenChange", fp)
}

func ParseWatchMethodDescriptorsResponsePageTokenChange_FieldPath(rawField string) (WatchMethodDescriptorsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchMethodDescriptorsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchMethodDescriptorsResponsePageTokenChange_FieldPath(rawField string) WatchMethodDescriptorsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchMethodDescriptorsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelector
}

var _ WatchMethodDescriptorsResponsePageTokenChange_FieldPath = (*WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) Selector() WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchMethodDescriptorsResponse_PageTokenChange
func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchMethodDescriptorsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchMethodDescriptorsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchMethodDescriptorsResponse_PageTokenChange
func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchMethodDescriptorsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchMethodDescriptorsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*method_descriptor.PagerCursor)(nil)
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*method_descriptor.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchMethodDescriptorsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchMethodDescriptorsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchMethodDescriptorsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathValue{WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*method_descriptor.PagerCursor)}
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathValue{WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*method_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*method_descriptor.PagerCursor)}
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*method_descriptor.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchMethodDescriptorsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchMethodDescriptorsResponsePageTokenChange_FieldPathValue interface {
	WatchMethodDescriptorsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchMethodDescriptorsResponse_PageTokenChange)
	CompareWith(*WatchMethodDescriptorsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchMethodDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchMethodDescriptorsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchMethodDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchMethodDescriptorsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchMethodDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchMethodDescriptorsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchMethodDescriptorsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchMethodDescriptorsResponsePageTokenChange_FieldPathValue = (*WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*method_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*method_descriptor.PagerCursor)
	return res, ok
}
func (fpv *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*method_descriptor.PagerCursor, bool) {
	res, ok := fpv.value.(*method_descriptor.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchMethodDescriptorsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchMethodDescriptorsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*method_descriptor.PagerCursor)
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*method_descriptor.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchMethodDescriptorsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchMethodDescriptorsResponse_PageTokenChange'.
func (fpv *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchMethodDescriptorsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchMethodDescriptorsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchMethodDescriptorsResponse_PageTokenChange))
}

// WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchMethodDescriptorsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchMethodDescriptorsResponse_PageTokenChange) bool
}

// ParseWatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchMethodDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchMethodDescriptorsResponse_PageTokenChange as interface{}
func (fpaiv *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchMethodDescriptorsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchMethodDescriptorsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchMethodDescriptorsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchMethodDescriptorsResponsePageTokenChange_FieldPath
}

func ParseWatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchMethodDescriptorsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchMethodDescriptorsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*method_descriptor.PagerCursor) {
			values = append(values, v)
		}
	case WatchMethodDescriptorsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*method_descriptor.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*method_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*method_descriptor.PagerCursor)
	return res, ok
}
func (fpaov *WatchMethodDescriptorsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*method_descriptor.PagerCursor, bool) {
	res, ok := fpaov.values.([]*method_descriptor.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateMethodDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateMethodDescriptorRequest_FieldPathSelector
	Get(source *CreateMethodDescriptorRequest) []interface{}
	GetSingle(source *CreateMethodDescriptorRequest) (interface{}, bool)
	ClearValue(item *CreateMethodDescriptorRequest)

	// Those methods build corresponding CreateMethodDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateMethodDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateMethodDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateMethodDescriptorRequest_FieldPathArrayItemValue
}

type CreateMethodDescriptorRequest_FieldPathSelector int32

const (
	CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor CreateMethodDescriptorRequest_FieldPathSelector = 0
)

func (s CreateMethodDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		return "method_descriptor"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", s))
	}
}

func BuildCreateMethodDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateMethodDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateMethodDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "method_descriptor", "methodDescriptor", "method-descriptor":
			return &CreateMethodDescriptorRequest_FieldTerminalPath{selector: CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor}, nil
		}
	} else {
		switch fp[0] {
		case "method_descriptor", "methodDescriptor", "method-descriptor":
			if subpath, err := method_descriptor.BuildMethodDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateMethodDescriptorRequest_FieldSubPath{selector: CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateMethodDescriptorRequest", fp)
}

func ParseCreateMethodDescriptorRequest_FieldPath(rawField string) (CreateMethodDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateMethodDescriptorRequest_FieldPath(fp)
}

func MustParseCreateMethodDescriptorRequest_FieldPath(rawField string) CreateMethodDescriptorRequest_FieldPath {
	fp, err := ParseCreateMethodDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateMethodDescriptorRequest_FieldTerminalPath struct {
	selector CreateMethodDescriptorRequest_FieldPathSelector
}

var _ CreateMethodDescriptorRequest_FieldPath = (*CreateMethodDescriptorRequest_FieldTerminalPath)(nil)

func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) Selector() CreateMethodDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateMethodDescriptorRequest
func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) Get(source *CreateMethodDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
			if source.MethodDescriptor != nil {
				values = append(values, source.MethodDescriptor)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateMethodDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source CreateMethodDescriptorRequest
func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) GetSingle(source *CreateMethodDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		res := source.GetMethodDescriptor()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateMethodDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		return (*method_descriptor.MethodDescriptor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) ClearValue(item *CreateMethodDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
			item.MethodDescriptor = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateMethodDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) CreateMethodDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		return &CreateMethodDescriptorRequest_FieldTerminalPathValue{CreateMethodDescriptorRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.MethodDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateMethodDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &CreateMethodDescriptorRequest_FieldTerminalPathArrayOfValues{CreateMethodDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		return &CreateMethodDescriptorRequest_FieldTerminalPathArrayOfValues{CreateMethodDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.MethodDescriptor)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateMethodDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *CreateMethodDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateMethodDescriptorRequest_FieldSubPath struct {
	selector CreateMethodDescriptorRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateMethodDescriptorRequest_FieldPath = (*CreateMethodDescriptorRequest_FieldSubPath)(nil)

func (fps *CreateMethodDescriptorRequest_FieldSubPath) Selector() CreateMethodDescriptorRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateMethodDescriptorRequest_FieldSubPath) AsMethodDescriptorSubPath() (method_descriptor.MethodDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(method_descriptor.MethodDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateMethodDescriptorRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateMethodDescriptorRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateMethodDescriptorRequest
func (fps *CreateMethodDescriptorRequest_FieldSubPath) Get(source *CreateMethodDescriptorRequest) (values []interface{}) {
	switch fps.selector {
	case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		values = append(values, fps.subPath.GetRaw(source.GetMethodDescriptor())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateMethodDescriptorRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateMethodDescriptorRequest))
}

// GetSingle returns value of selected field from source CreateMethodDescriptorRequest
func (fps *CreateMethodDescriptorRequest_FieldSubPath) GetSingle(source *CreateMethodDescriptorRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		if source.GetMethodDescriptor() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMethodDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fps.selector))
	}
}

func (fps *CreateMethodDescriptorRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateMethodDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateMethodDescriptorRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateMethodDescriptorRequest_FieldSubPath) ClearValue(item *CreateMethodDescriptorRequest) {
	if item != nil {
		switch fps.selector {
		case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
			fps.subPath.ClearValueRaw(item.MethodDescriptor)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateMethodDescriptorRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateMethodDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateMethodDescriptorRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateMethodDescriptorRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateMethodDescriptorRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateMethodDescriptorRequest_FieldSubPath) WithIValue(value interface{}) CreateMethodDescriptorRequest_FieldPathValue {
	return &CreateMethodDescriptorRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateMethodDescriptorRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateMethodDescriptorRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateMethodDescriptorRequest_FieldPathArrayOfValues {
	return &CreateMethodDescriptorRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateMethodDescriptorRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateMethodDescriptorRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateMethodDescriptorRequest_FieldPathArrayItemValue {
	return &CreateMethodDescriptorRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateMethodDescriptorRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateMethodDescriptorRequest_FieldPathValue allows storing values for CreateMethodDescriptorRequest fields according to their type
type CreateMethodDescriptorRequest_FieldPathValue interface {
	CreateMethodDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateMethodDescriptorRequest)
	CompareWith(*CreateMethodDescriptorRequest) (cmp int, comparable bool)
}

func ParseCreateMethodDescriptorRequest_FieldPathValue(pathStr, valueStr string) (CreateMethodDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseCreateMethodDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateMethodDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateMethodDescriptorRequest_FieldPathValue), nil
}

func MustParseCreateMethodDescriptorRequest_FieldPathValue(pathStr, valueStr string) CreateMethodDescriptorRequest_FieldPathValue {
	fpv, err := ParseCreateMethodDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateMethodDescriptorRequest_FieldTerminalPathValue struct {
	CreateMethodDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ CreateMethodDescriptorRequest_FieldPathValue = (*CreateMethodDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateMethodDescriptorRequest' as interface{}
func (fpv *CreateMethodDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateMethodDescriptorRequest_FieldTerminalPathValue) AsMethodDescriptorValue() (*method_descriptor.MethodDescriptor, bool) {
	res, ok := fpv.value.(*method_descriptor.MethodDescriptor)
	return res, ok
}

// SetTo stores value for selected field for object CreateMethodDescriptorRequest
func (fpv *CreateMethodDescriptorRequest_FieldTerminalPathValue) SetTo(target **CreateMethodDescriptorRequest) {
	if *target == nil {
		*target = new(CreateMethodDescriptorRequest)
	}
	switch fpv.selector {
	case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		(*target).MethodDescriptor = fpv.value.(*method_descriptor.MethodDescriptor)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *CreateMethodDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateMethodDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateMethodDescriptorRequest_FieldTerminalPathValue' with the value under path in 'CreateMethodDescriptorRequest'.
func (fpv *CreateMethodDescriptorRequest_FieldTerminalPathValue) CompareWith(source *CreateMethodDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *CreateMethodDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateMethodDescriptorRequest))
}

type CreateMethodDescriptorRequest_FieldSubPathValue struct {
	CreateMethodDescriptorRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateMethodDescriptorRequest_FieldPathValue = (*CreateMethodDescriptorRequest_FieldSubPathValue)(nil)

func (fpvs *CreateMethodDescriptorRequest_FieldSubPathValue) AsMethodDescriptorPathValue() (method_descriptor.MethodDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(method_descriptor.MethodDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *CreateMethodDescriptorRequest_FieldSubPathValue) SetTo(target **CreateMethodDescriptorRequest) {
	if *target == nil {
		*target = new(CreateMethodDescriptorRequest)
	}
	switch fpvs.Selector() {
	case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		fpvs.subPathValue.(method_descriptor.MethodDescriptor_FieldPathValue).SetTo(&(*target).MethodDescriptor)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateMethodDescriptorRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateMethodDescriptorRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateMethodDescriptorRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateMethodDescriptorRequest_FieldSubPathValue) CompareWith(source *CreateMethodDescriptorRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		return fpvs.subPathValue.(method_descriptor.MethodDescriptor_FieldPathValue).CompareWith(source.GetMethodDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateMethodDescriptorRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateMethodDescriptorRequest))
}

// CreateMethodDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateMethodDescriptorRequest according to their type
// Present only for array (repeated) types.
type CreateMethodDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateMethodDescriptorRequest_FieldPath
	ContainsValue(*CreateMethodDescriptorRequest) bool
}

// ParseCreateMethodDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateMethodDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateMethodDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateMethodDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateMethodDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateMethodDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateMethodDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateMethodDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateMethodDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateMethodDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	CreateMethodDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ CreateMethodDescriptorRequest_FieldPathArrayItemValue = (*CreateMethodDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateMethodDescriptorRequest as interface{}
func (fpaiv *CreateMethodDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateMethodDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateMethodDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateMethodDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateMethodDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateMethodDescriptorRequest'
func (fpaiv *CreateMethodDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateMethodDescriptorRequest) bool {
	slice := fpaiv.CreateMethodDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateMethodDescriptorRequest_FieldSubPathArrayItemValue struct {
	CreateMethodDescriptorRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateMethodDescriptorRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateMethodDescriptorRequest_FieldSubPathArrayItemValue) AsMethodDescriptorPathItemValue() (method_descriptor.MethodDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(method_descriptor.MethodDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateMethodDescriptorRequest'
func (fpaivs *CreateMethodDescriptorRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateMethodDescriptorRequest) bool {
	switch fpaivs.Selector() {
	case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		return fpaivs.subPathItemValue.(method_descriptor.MethodDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetMethodDescriptor())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateMethodDescriptorRequest: %d", fpaivs.Selector()))
	}
}

// CreateMethodDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for CreateMethodDescriptorRequest fields according to their type
type CreateMethodDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateMethodDescriptorRequest_FieldPath
}

func ParseCreateMethodDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateMethodDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateMethodDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateMethodDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateMethodDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateMethodDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateMethodDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateMethodDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateMethodDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	CreateMethodDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ CreateMethodDescriptorRequest_FieldPathArrayOfValues = (*CreateMethodDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateMethodDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		for _, v := range fpaov.values.([]*method_descriptor.MethodDescriptor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateMethodDescriptorRequest_FieldTerminalPathArrayOfValues) AsMethodDescriptorArrayOfValues() ([]*method_descriptor.MethodDescriptor, bool) {
	res, ok := fpaov.values.([]*method_descriptor.MethodDescriptor)
	return res, ok
}

type CreateMethodDescriptorRequest_FieldSubPathArrayOfValues struct {
	CreateMethodDescriptorRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateMethodDescriptorRequest_FieldPathArrayOfValues = (*CreateMethodDescriptorRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateMethodDescriptorRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateMethodDescriptorRequest_FieldSubPathArrayOfValues) AsMethodDescriptorPathArrayOfValues() (method_descriptor.MethodDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(method_descriptor.MethodDescriptor_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateMethodDescriptorRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateMethodDescriptorRequest_FieldPathSelector
	Get(source *UpdateMethodDescriptorRequest) []interface{}
	GetSingle(source *UpdateMethodDescriptorRequest) (interface{}, bool)
	ClearValue(item *UpdateMethodDescriptorRequest)

	// Those methods build corresponding UpdateMethodDescriptorRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateMethodDescriptorRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateMethodDescriptorRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateMethodDescriptorRequest_FieldPathArrayItemValue
}

type UpdateMethodDescriptorRequest_FieldPathSelector int32

const (
	UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor UpdateMethodDescriptorRequest_FieldPathSelector = 0
	UpdateMethodDescriptorRequest_FieldPathSelectorUpdateMask       UpdateMethodDescriptorRequest_FieldPathSelector = 1
	UpdateMethodDescriptorRequest_FieldPathSelectorCas              UpdateMethodDescriptorRequest_FieldPathSelector = 2
)

func (s UpdateMethodDescriptorRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		return "method_descriptor"
	case UpdateMethodDescriptorRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", s))
	}
}

func BuildUpdateMethodDescriptorRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateMethodDescriptorRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateMethodDescriptorRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "method_descriptor", "methodDescriptor", "method-descriptor":
			return &UpdateMethodDescriptorRequest_FieldTerminalPath{selector: UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateMethodDescriptorRequest_FieldTerminalPath{selector: UpdateMethodDescriptorRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateMethodDescriptorRequest_FieldTerminalPath{selector: UpdateMethodDescriptorRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "method_descriptor", "methodDescriptor", "method-descriptor":
			if subpath, err := method_descriptor.BuildMethodDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateMethodDescriptorRequest_FieldSubPath{selector: UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateMethodDescriptorRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateMethodDescriptorRequest_FieldSubPath{selector: UpdateMethodDescriptorRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateMethodDescriptorRequest", fp)
}

func ParseUpdateMethodDescriptorRequest_FieldPath(rawField string) (UpdateMethodDescriptorRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateMethodDescriptorRequest_FieldPath(fp)
}

func MustParseUpdateMethodDescriptorRequest_FieldPath(rawField string) UpdateMethodDescriptorRequest_FieldPath {
	fp, err := ParseUpdateMethodDescriptorRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateMethodDescriptorRequest_FieldTerminalPath struct {
	selector UpdateMethodDescriptorRequest_FieldPathSelector
}

var _ UpdateMethodDescriptorRequest_FieldPath = (*UpdateMethodDescriptorRequest_FieldTerminalPath)(nil)

func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) Selector() UpdateMethodDescriptorRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateMethodDescriptorRequest
func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) Get(source *UpdateMethodDescriptorRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
			if source.MethodDescriptor != nil {
				values = append(values, source.MethodDescriptor)
			}
		case UpdateMethodDescriptorRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateMethodDescriptorRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateMethodDescriptorRequest
func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) GetSingle(source *UpdateMethodDescriptorRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		res := source.GetMethodDescriptor()
		return res, res != nil
	case UpdateMethodDescriptorRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateMethodDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		return (*method_descriptor.MethodDescriptor)(nil)
	case UpdateMethodDescriptorRequest_FieldPathSelectorUpdateMask:
		return (*method_descriptor.MethodDescriptor_FieldMask)(nil)
	case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
		return (*UpdateMethodDescriptorRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) ClearValue(item *UpdateMethodDescriptorRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
			item.MethodDescriptor = nil
		case UpdateMethodDescriptorRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateMethodDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateMethodDescriptorRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateMethodDescriptorRequest_FieldPathValue {
	switch fp.selector {
	case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		return &UpdateMethodDescriptorRequest_FieldTerminalPathValue{UpdateMethodDescriptorRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.MethodDescriptor)}
	case UpdateMethodDescriptorRequest_FieldPathSelectorUpdateMask:
		return &UpdateMethodDescriptorRequest_FieldTerminalPathValue{UpdateMethodDescriptorRequest_FieldTerminalPath: *fp, value: value.(*method_descriptor.MethodDescriptor_FieldMask)}
	case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
		return &UpdateMethodDescriptorRequest_FieldTerminalPathValue{UpdateMethodDescriptorRequest_FieldTerminalPath: *fp, value: value.(*UpdateMethodDescriptorRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateMethodDescriptorRequest_FieldPathArrayOfValues {
	fpaov := &UpdateMethodDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateMethodDescriptorRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		return &UpdateMethodDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateMethodDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.MethodDescriptor)}
	case UpdateMethodDescriptorRequest_FieldPathSelectorUpdateMask:
		return &UpdateMethodDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateMethodDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*method_descriptor.MethodDescriptor_FieldMask)}
	case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
		return &UpdateMethodDescriptorRequest_FieldTerminalPathArrayOfValues{UpdateMethodDescriptorRequest_FieldTerminalPath: *fp, values: values.([]*UpdateMethodDescriptorRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateMethodDescriptorRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fp.selector))
	}
}

func (fp *UpdateMethodDescriptorRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateMethodDescriptorRequest_FieldSubPath struct {
	selector UpdateMethodDescriptorRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateMethodDescriptorRequest_FieldPath = (*UpdateMethodDescriptorRequest_FieldSubPath)(nil)

func (fps *UpdateMethodDescriptorRequest_FieldSubPath) Selector() UpdateMethodDescriptorRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateMethodDescriptorRequest_FieldSubPath) AsMethodDescriptorSubPath() (method_descriptor.MethodDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(method_descriptor.MethodDescriptor_FieldPath)
	return res, ok
}
func (fps *UpdateMethodDescriptorRequest_FieldSubPath) AsCasSubPath() (UpdateMethodDescriptorRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateMethodDescriptorRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateMethodDescriptorRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateMethodDescriptorRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateMethodDescriptorRequest
func (fps *UpdateMethodDescriptorRequest_FieldSubPath) Get(source *UpdateMethodDescriptorRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		values = append(values, fps.subPath.GetRaw(source.GetMethodDescriptor())...)
	case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateMethodDescriptorRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateMethodDescriptorRequest))
}

// GetSingle returns value of selected field from source UpdateMethodDescriptorRequest
func (fps *UpdateMethodDescriptorRequest_FieldSubPath) GetSingle(source *UpdateMethodDescriptorRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		if source.GetMethodDescriptor() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMethodDescriptor())
	case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fps.selector))
	}
}

func (fps *UpdateMethodDescriptorRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateMethodDescriptorRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateMethodDescriptorRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateMethodDescriptorRequest_FieldSubPath) ClearValue(item *UpdateMethodDescriptorRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
			fps.subPath.ClearValueRaw(item.MethodDescriptor)
		case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateMethodDescriptorRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateMethodDescriptorRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateMethodDescriptorRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateMethodDescriptorRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateMethodDescriptorRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateMethodDescriptorRequest_FieldSubPath) WithIValue(value interface{}) UpdateMethodDescriptorRequest_FieldPathValue {
	return &UpdateMethodDescriptorRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateMethodDescriptorRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateMethodDescriptorRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateMethodDescriptorRequest_FieldPathArrayOfValues {
	return &UpdateMethodDescriptorRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateMethodDescriptorRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateMethodDescriptorRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateMethodDescriptorRequest_FieldPathArrayItemValue {
	return &UpdateMethodDescriptorRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateMethodDescriptorRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateMethodDescriptorRequest_FieldPathValue allows storing values for UpdateMethodDescriptorRequest fields according to their type
type UpdateMethodDescriptorRequest_FieldPathValue interface {
	UpdateMethodDescriptorRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateMethodDescriptorRequest)
	CompareWith(*UpdateMethodDescriptorRequest) (cmp int, comparable bool)
}

func ParseUpdateMethodDescriptorRequest_FieldPathValue(pathStr, valueStr string) (UpdateMethodDescriptorRequest_FieldPathValue, error) {
	fp, err := ParseUpdateMethodDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateMethodDescriptorRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateMethodDescriptorRequest_FieldPathValue), nil
}

func MustParseUpdateMethodDescriptorRequest_FieldPathValue(pathStr, valueStr string) UpdateMethodDescriptorRequest_FieldPathValue {
	fpv, err := ParseUpdateMethodDescriptorRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateMethodDescriptorRequest_FieldTerminalPathValue struct {
	UpdateMethodDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateMethodDescriptorRequest_FieldPathValue = (*UpdateMethodDescriptorRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateMethodDescriptorRequest' as interface{}
func (fpv *UpdateMethodDescriptorRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateMethodDescriptorRequest_FieldTerminalPathValue) AsMethodDescriptorValue() (*method_descriptor.MethodDescriptor, bool) {
	res, ok := fpv.value.(*method_descriptor.MethodDescriptor)
	return res, ok
}
func (fpv *UpdateMethodDescriptorRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*method_descriptor.MethodDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*method_descriptor.MethodDescriptor_FieldMask)
	return res, ok
}
func (fpv *UpdateMethodDescriptorRequest_FieldTerminalPathValue) AsCasValue() (*UpdateMethodDescriptorRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateMethodDescriptorRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateMethodDescriptorRequest
func (fpv *UpdateMethodDescriptorRequest_FieldTerminalPathValue) SetTo(target **UpdateMethodDescriptorRequest) {
	if *target == nil {
		*target = new(UpdateMethodDescriptorRequest)
	}
	switch fpv.selector {
	case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		(*target).MethodDescriptor = fpv.value.(*method_descriptor.MethodDescriptor)
	case UpdateMethodDescriptorRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*method_descriptor.MethodDescriptor_FieldMask)
	case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateMethodDescriptorRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateMethodDescriptorRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateMethodDescriptorRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateMethodDescriptorRequest_FieldTerminalPathValue' with the value under path in 'UpdateMethodDescriptorRequest'.
func (fpv *UpdateMethodDescriptorRequest_FieldTerminalPathValue) CompareWith(source *UpdateMethodDescriptorRequest) (int, bool) {
	switch fpv.selector {
	case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		return 0, false
	case UpdateMethodDescriptorRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateMethodDescriptorRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateMethodDescriptorRequest))
}

type UpdateMethodDescriptorRequest_FieldSubPathValue struct {
	UpdateMethodDescriptorRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateMethodDescriptorRequest_FieldPathValue = (*UpdateMethodDescriptorRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateMethodDescriptorRequest_FieldSubPathValue) AsMethodDescriptorPathValue() (method_descriptor.MethodDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(method_descriptor.MethodDescriptor_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateMethodDescriptorRequest_FieldSubPathValue) AsCasPathValue() (UpdateMethodDescriptorRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateMethodDescriptorRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateMethodDescriptorRequest_FieldSubPathValue) SetTo(target **UpdateMethodDescriptorRequest) {
	if *target == nil {
		*target = new(UpdateMethodDescriptorRequest)
	}
	switch fpvs.Selector() {
	case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		fpvs.subPathValue.(method_descriptor.MethodDescriptor_FieldPathValue).SetTo(&(*target).MethodDescriptor)
	case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateMethodDescriptorRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateMethodDescriptorRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateMethodDescriptorRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateMethodDescriptorRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateMethodDescriptorRequest_FieldSubPathValue) CompareWith(source *UpdateMethodDescriptorRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		return fpvs.subPathValue.(method_descriptor.MethodDescriptor_FieldPathValue).CompareWith(source.GetMethodDescriptor())
	case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateMethodDescriptorRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateMethodDescriptorRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateMethodDescriptorRequest))
}

// UpdateMethodDescriptorRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateMethodDescriptorRequest according to their type
// Present only for array (repeated) types.
type UpdateMethodDescriptorRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateMethodDescriptorRequest_FieldPath
	ContainsValue(*UpdateMethodDescriptorRequest) bool
}

// ParseUpdateMethodDescriptorRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateMethodDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateMethodDescriptorRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateMethodDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateMethodDescriptorRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateMethodDescriptorRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateMethodDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateMethodDescriptorRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateMethodDescriptorRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateMethodDescriptorRequest_FieldTerminalPathArrayItemValue struct {
	UpdateMethodDescriptorRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateMethodDescriptorRequest_FieldPathArrayItemValue = (*UpdateMethodDescriptorRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateMethodDescriptorRequest as interface{}
func (fpaiv *UpdateMethodDescriptorRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateMethodDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateMethodDescriptorRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateMethodDescriptorRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateMethodDescriptorRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateMethodDescriptorRequest'
func (fpaiv *UpdateMethodDescriptorRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateMethodDescriptorRequest) bool {
	slice := fpaiv.UpdateMethodDescriptorRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateMethodDescriptorRequest_FieldSubPathArrayItemValue struct {
	UpdateMethodDescriptorRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateMethodDescriptorRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateMethodDescriptorRequest_FieldSubPathArrayItemValue) AsMethodDescriptorPathItemValue() (method_descriptor.MethodDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(method_descriptor.MethodDescriptor_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateMethodDescriptorRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateMethodDescriptorRequest'
func (fpaivs *UpdateMethodDescriptorRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateMethodDescriptorRequest) bool {
	switch fpaivs.Selector() {
	case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		return fpaivs.subPathItemValue.(method_descriptor.MethodDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetMethodDescriptor())
	case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest: %d", fpaivs.Selector()))
	}
}

// UpdateMethodDescriptorRequest_FieldPathArrayOfValues allows storing slice of values for UpdateMethodDescriptorRequest fields according to their type
type UpdateMethodDescriptorRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateMethodDescriptorRequest_FieldPath
}

func ParseUpdateMethodDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateMethodDescriptorRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateMethodDescriptorRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateMethodDescriptorRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateMethodDescriptorRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateMethodDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateMethodDescriptorRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateMethodDescriptorRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateMethodDescriptorRequest_FieldTerminalPathArrayOfValues struct {
	UpdateMethodDescriptorRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateMethodDescriptorRequest_FieldPathArrayOfValues = (*UpdateMethodDescriptorRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateMethodDescriptorRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateMethodDescriptorRequest_FieldPathSelectorMethodDescriptor:
		for _, v := range fpaov.values.([]*method_descriptor.MethodDescriptor) {
			values = append(values, v)
		}
	case UpdateMethodDescriptorRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*method_descriptor.MethodDescriptor_FieldMask) {
			values = append(values, v)
		}
	case UpdateMethodDescriptorRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateMethodDescriptorRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateMethodDescriptorRequest_FieldTerminalPathArrayOfValues) AsMethodDescriptorArrayOfValues() ([]*method_descriptor.MethodDescriptor, bool) {
	res, ok := fpaov.values.([]*method_descriptor.MethodDescriptor)
	return res, ok
}
func (fpaov *UpdateMethodDescriptorRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*method_descriptor.MethodDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*method_descriptor.MethodDescriptor_FieldMask)
	return res, ok
}
func (fpaov *UpdateMethodDescriptorRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateMethodDescriptorRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateMethodDescriptorRequest_CAS)
	return res, ok
}

type UpdateMethodDescriptorRequest_FieldSubPathArrayOfValues struct {
	UpdateMethodDescriptorRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateMethodDescriptorRequest_FieldPathArrayOfValues = (*UpdateMethodDescriptorRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateMethodDescriptorRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateMethodDescriptorRequest_FieldSubPathArrayOfValues) AsMethodDescriptorPathArrayOfValues() (method_descriptor.MethodDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(method_descriptor.MethodDescriptor_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateMethodDescriptorRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateMethodDescriptorRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateMethodDescriptorRequestCAS_FieldPathSelector
	Get(source *UpdateMethodDescriptorRequest_CAS) []interface{}
	GetSingle(source *UpdateMethodDescriptorRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateMethodDescriptorRequest_CAS)

	// Those methods build corresponding UpdateMethodDescriptorRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateMethodDescriptorRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue
}

type UpdateMethodDescriptorRequestCAS_FieldPathSelector int32

const (
	UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState UpdateMethodDescriptorRequestCAS_FieldPathSelector = 0
	UpdateMethodDescriptorRequestCAS_FieldPathSelectorFieldMask        UpdateMethodDescriptorRequestCAS_FieldPathSelector = 1
)

func (s UpdateMethodDescriptorRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", s))
	}
}

func BuildUpdateMethodDescriptorRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateMethodDescriptorRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateMethodDescriptorRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateMethodDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateMethodDescriptorRequestCAS_FieldTerminalPath{selector: UpdateMethodDescriptorRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := method_descriptor.BuildMethodDescriptor_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateMethodDescriptorRequestCAS_FieldSubPath{selector: UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateMethodDescriptorRequest_CAS", fp)
}

func ParseUpdateMethodDescriptorRequestCAS_FieldPath(rawField string) (UpdateMethodDescriptorRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateMethodDescriptorRequestCAS_FieldPath(fp)
}

func MustParseUpdateMethodDescriptorRequestCAS_FieldPath(rawField string) UpdateMethodDescriptorRequestCAS_FieldPath {
	fp, err := ParseUpdateMethodDescriptorRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateMethodDescriptorRequestCAS_FieldTerminalPath struct {
	selector UpdateMethodDescriptorRequestCAS_FieldPathSelector
}

var _ UpdateMethodDescriptorRequestCAS_FieldPath = (*UpdateMethodDescriptorRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) Selector() UpdateMethodDescriptorRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateMethodDescriptorRequest_CAS
func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) Get(source *UpdateMethodDescriptorRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateMethodDescriptorRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateMethodDescriptorRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateMethodDescriptorRequest_CAS
func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) GetSingle(source *UpdateMethodDescriptorRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateMethodDescriptorRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return (*method_descriptor.MethodDescriptor)(nil)
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return (*method_descriptor.MethodDescriptor_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) ClearValue(item *UpdateMethodDescriptorRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateMethodDescriptorRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateMethodDescriptorRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateMethodDescriptorRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateMethodDescriptorRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateMethodDescriptorRequestCAS_FieldTerminalPathValue{UpdateMethodDescriptorRequestCAS_FieldTerminalPath: *fp, value: value.(*method_descriptor.MethodDescriptor)}
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateMethodDescriptorRequestCAS_FieldTerminalPathValue{UpdateMethodDescriptorRequestCAS_FieldTerminalPath: *fp, value: value.(*method_descriptor.MethodDescriptor_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateMethodDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateMethodDescriptorRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateMethodDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateMethodDescriptorRequestCAS_FieldTerminalPath: *fp, values: values.([]*method_descriptor.MethodDescriptor)}
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateMethodDescriptorRequestCAS_FieldTerminalPathArrayOfValues{UpdateMethodDescriptorRequestCAS_FieldTerminalPath: *fp, values: values.([]*method_descriptor.MethodDescriptor_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateMethodDescriptorRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateMethodDescriptorRequestCAS_FieldSubPath struct {
	selector UpdateMethodDescriptorRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateMethodDescriptorRequestCAS_FieldPath = (*UpdateMethodDescriptorRequestCAS_FieldSubPath)(nil)

func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) Selector() UpdateMethodDescriptorRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) AsConditionalStateSubPath() (method_descriptor.MethodDescriptor_FieldPath, bool) {
	res, ok := fps.subPath.(method_descriptor.MethodDescriptor_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateMethodDescriptorRequest_CAS
func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) Get(source *UpdateMethodDescriptorRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateMethodDescriptorRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateMethodDescriptorRequest_CAS
func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) GetSingle(source *UpdateMethodDescriptorRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateMethodDescriptorRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) ClearValue(item *UpdateMethodDescriptorRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateMethodDescriptorRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateMethodDescriptorRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateMethodDescriptorRequestCAS_FieldPathValue {
	return &UpdateMethodDescriptorRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues {
	return &UpdateMethodDescriptorRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue {
	return &UpdateMethodDescriptorRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateMethodDescriptorRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateMethodDescriptorRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateMethodDescriptorRequestCAS_FieldPathValue interface {
	UpdateMethodDescriptorRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateMethodDescriptorRequest_CAS)
	CompareWith(*UpdateMethodDescriptorRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateMethodDescriptorRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateMethodDescriptorRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateMethodDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateMethodDescriptorRequestCAS_FieldPathValue), nil
}

func MustParseUpdateMethodDescriptorRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateMethodDescriptorRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateMethodDescriptorRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateMethodDescriptorRequestCAS_FieldTerminalPathValue struct {
	UpdateMethodDescriptorRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateMethodDescriptorRequestCAS_FieldPathValue = (*UpdateMethodDescriptorRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateMethodDescriptorRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateMethodDescriptorRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*method_descriptor.MethodDescriptor, bool) {
	res, ok := fpv.value.(*method_descriptor.MethodDescriptor)
	return res, ok
}
func (fpv *UpdateMethodDescriptorRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*method_descriptor.MethodDescriptor_FieldMask, bool) {
	res, ok := fpv.value.(*method_descriptor.MethodDescriptor_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateMethodDescriptorRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateMethodDescriptorRequest_CAS) {
	if *target == nil {
		*target = new(UpdateMethodDescriptorRequest_CAS)
	}
	switch fpv.selector {
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*method_descriptor.MethodDescriptor)
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*method_descriptor.MethodDescriptor_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateMethodDescriptorRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateMethodDescriptorRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateMethodDescriptorRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateMethodDescriptorRequest_CAS'.
func (fpv *UpdateMethodDescriptorRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateMethodDescriptorRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateMethodDescriptorRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateMethodDescriptorRequest_CAS))
}

type UpdateMethodDescriptorRequestCAS_FieldSubPathValue struct {
	UpdateMethodDescriptorRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateMethodDescriptorRequestCAS_FieldPathValue = (*UpdateMethodDescriptorRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateMethodDescriptorRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (method_descriptor.MethodDescriptor_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(method_descriptor.MethodDescriptor_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateMethodDescriptorRequestCAS_FieldSubPathValue) SetTo(target **UpdateMethodDescriptorRequest_CAS) {
	if *target == nil {
		*target = new(UpdateMethodDescriptorRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(method_descriptor.MethodDescriptor_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateMethodDescriptorRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateMethodDescriptorRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateMethodDescriptorRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateMethodDescriptorRequestCAS_FieldSubPathValue) CompareWith(source *UpdateMethodDescriptorRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(method_descriptor.MethodDescriptor_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateMethodDescriptorRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateMethodDescriptorRequest_CAS))
}

// UpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateMethodDescriptorRequestCAS_FieldPath
	ContainsValue(*UpdateMethodDescriptorRequest_CAS) bool
}

// ParseUpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateMethodDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateMethodDescriptorRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateMethodDescriptorRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateMethodDescriptorRequestCAS_FieldPathArrayItemValue = (*UpdateMethodDescriptorRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateMethodDescriptorRequest_CAS as interface{}
func (fpaiv *UpdateMethodDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateMethodDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateMethodDescriptorRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateMethodDescriptorRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateMethodDescriptorRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateMethodDescriptorRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateMethodDescriptorRequest_CAS) bool {
	slice := fpaiv.UpdateMethodDescriptorRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateMethodDescriptorRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateMethodDescriptorRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateMethodDescriptorRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateMethodDescriptorRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (method_descriptor.MethodDescriptor_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(method_descriptor.MethodDescriptor_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateMethodDescriptorRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateMethodDescriptorRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(method_descriptor.MethodDescriptor_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateMethodDescriptorRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateMethodDescriptorRequestCAS_FieldPath
}

func ParseUpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateMethodDescriptorRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateMethodDescriptorRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateMethodDescriptorRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues = (*UpdateMethodDescriptorRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateMethodDescriptorRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*method_descriptor.MethodDescriptor) {
			values = append(values, v)
		}
	case UpdateMethodDescriptorRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*method_descriptor.MethodDescriptor_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateMethodDescriptorRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*method_descriptor.MethodDescriptor, bool) {
	res, ok := fpaov.values.([]*method_descriptor.MethodDescriptor)
	return res, ok
}
func (fpaov *UpdateMethodDescriptorRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*method_descriptor.MethodDescriptor_FieldMask, bool) {
	res, ok := fpaov.values.([]*method_descriptor.MethodDescriptor_FieldMask)
	return res, ok
}

type UpdateMethodDescriptorRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateMethodDescriptorRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateMethodDescriptorRequestCAS_FieldPathArrayOfValues = (*UpdateMethodDescriptorRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateMethodDescriptorRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateMethodDescriptorRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (method_descriptor.MethodDescriptor_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(method_descriptor.MethodDescriptor_FieldPathArrayOfValues)
	return res, ok
}
