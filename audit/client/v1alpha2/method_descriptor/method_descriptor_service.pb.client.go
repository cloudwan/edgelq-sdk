// Code generated by protoc-gen-goten-client
// API: MethodDescriptorService
// DO NOT EDIT!!!

package method_descriptor_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	method_descriptor "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha2/method_descriptor"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &method_descriptor.MethodDescriptor{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MethodDescriptorServiceClient is the client API for MethodDescriptorService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MethodDescriptorServiceClient interface {
	GetMethodDescriptor(ctx context.Context, in *GetMethodDescriptorRequest, opts ...grpc.CallOption) (*method_descriptor.MethodDescriptor, error)
	BatchGetMethodDescriptors(ctx context.Context, in *BatchGetMethodDescriptorsRequest, opts ...grpc.CallOption) (*BatchGetMethodDescriptorsResponse, error)
	ListMethodDescriptors(ctx context.Context, in *ListMethodDescriptorsRequest, opts ...grpc.CallOption) (*ListMethodDescriptorsResponse, error)
	WatchMethodDescriptor(ctx context.Context, in *WatchMethodDescriptorRequest, opts ...grpc.CallOption) (WatchMethodDescriptorClientStream, error)
	WatchMethodDescriptors(ctx context.Context, in *WatchMethodDescriptorsRequest, opts ...grpc.CallOption) (WatchMethodDescriptorsClientStream, error)
	CreateMethodDescriptor(ctx context.Context, in *CreateMethodDescriptorRequest, opts ...grpc.CallOption) (*method_descriptor.MethodDescriptor, error)
	UpdateMethodDescriptor(ctx context.Context, in *UpdateMethodDescriptorRequest, opts ...grpc.CallOption) (*method_descriptor.MethodDescriptor, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewMethodDescriptorServiceClient(cc grpc.ClientConnInterface) MethodDescriptorServiceClient {
	return &client{cc}
}

func (c *client) GetMethodDescriptor(ctx context.Context, in *GetMethodDescriptorRequest, opts ...grpc.CallOption) (*method_descriptor.MethodDescriptor, error) {
	out := new(method_descriptor.MethodDescriptor)
	err := c.cc.Invoke(ctx, "/ntt.audit.v1alpha2.MethodDescriptorService/GetMethodDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetMethodDescriptors(ctx context.Context, in *BatchGetMethodDescriptorsRequest, opts ...grpc.CallOption) (*BatchGetMethodDescriptorsResponse, error) {
	out := new(BatchGetMethodDescriptorsResponse)
	err := c.cc.Invoke(ctx, "/ntt.audit.v1alpha2.MethodDescriptorService/BatchGetMethodDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListMethodDescriptors(ctx context.Context, in *ListMethodDescriptorsRequest, opts ...grpc.CallOption) (*ListMethodDescriptorsResponse, error) {
	out := new(ListMethodDescriptorsResponse)
	err := c.cc.Invoke(ctx, "/ntt.audit.v1alpha2.MethodDescriptorService/ListMethodDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchMethodDescriptor(ctx context.Context, in *WatchMethodDescriptorRequest, opts ...grpc.CallOption) (WatchMethodDescriptorClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchMethodDescriptor",
			ServerStreams: true,
		},
		"/ntt.audit.v1alpha2.MethodDescriptorService/WatchMethodDescriptor", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchMethodDescriptorWatchMethodDescriptorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchMethodDescriptorClientStream interface {
	Recv() (*WatchMethodDescriptorResponse, error)
	grpc.ClientStream
}

type watchMethodDescriptorWatchMethodDescriptorClient struct {
	grpc.ClientStream
}

func (x *watchMethodDescriptorWatchMethodDescriptorClient) Recv() (*WatchMethodDescriptorResponse, error) {
	m := new(WatchMethodDescriptorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchMethodDescriptors(ctx context.Context, in *WatchMethodDescriptorsRequest, opts ...grpc.CallOption) (WatchMethodDescriptorsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchMethodDescriptors",
			ServerStreams: true,
		},
		"/ntt.audit.v1alpha2.MethodDescriptorService/WatchMethodDescriptors", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchMethodDescriptorsWatchMethodDescriptorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchMethodDescriptorsClientStream interface {
	Recv() (*WatchMethodDescriptorsResponse, error)
	grpc.ClientStream
}

type watchMethodDescriptorsWatchMethodDescriptorsClient struct {
	grpc.ClientStream
}

func (x *watchMethodDescriptorsWatchMethodDescriptorsClient) Recv() (*WatchMethodDescriptorsResponse, error) {
	m := new(WatchMethodDescriptorsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateMethodDescriptor(ctx context.Context, in *CreateMethodDescriptorRequest, opts ...grpc.CallOption) (*method_descriptor.MethodDescriptor, error) {
	out := new(method_descriptor.MethodDescriptor)
	err := c.cc.Invoke(ctx, "/ntt.audit.v1alpha2.MethodDescriptorService/CreateMethodDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateMethodDescriptor(ctx context.Context, in *UpdateMethodDescriptorRequest, opts ...grpc.CallOption) (*method_descriptor.MethodDescriptor, error) {
	out := new(method_descriptor.MethodDescriptor)
	err := c.cc.Invoke(ctx, "/ntt.audit.v1alpha2.MethodDescriptorService/UpdateMethodDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
