// Code generated by protoc-gen-goten-go
// File: edgelq/audit/proto/v1/resource_change_log_custom.proto
// DO NOT EDIT!!!

package resource_change_log_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/audit/resources/v1/common"
	resource_change_log "github.com/cloudwan/edgelq-sdk/audit/resources/v1/resource_change_log"
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &common.Authentication{}
	_ = &resource_change_log.ResourceChangeLog{}
	_ = &rpc.Status{}
	_ = &timestamppb.Timestamp{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message of the
// [ListResourceChangeLogs](#listresourcechangelogs-method) method.
//
// It returns resource changes for specified time range, region, scope and
// filter.  Note that resource change logs are Resource oriented, primary
// object is resource here. Audit monitors resources that have non-custom
// store.
//
// Note that filter field is mandatory and minimal filters are:
//
// * --filter 'service.name=[SERVICE_NAME] and resource.type=[RESOURCE_NAME]'
//   (what is happening for this resource type)
// * --filter 'request_id=[REQUEST_ID]' (which resources were changed by this
//   request_id?)
//
// Be aware that server will append scope filter condition (and scope IN ...)
// to an any of the above filters. All scopes are extracted from parents field
// in ListResourceChangeLogsRequest body. This ensures that users can view only
// scopes he/she is allowed to.
//
// For all of the above filters you can replace filter condition compare (=)
// with IN operator. You can therefore query for multiple services, methods or
// users at once. Above filters are also preferred as we have optimization for
// them.
//
// Resource change logs can also be filtered by custom labels (field labels in
// ResourceChangeLog - pre and post versions). Labels are custom per each API
// resource - so you must specify service.name and resource.type conditions to
// enable them. For example, suppose you have a VM resource which contains
// "group" field, which is a reference to some other resource. If you create
// label "group" in VM resource spec (in proto model) you can make a following
// query:
//
// ```
// --filter 'service.name=vms.domain.com and \
//           resource.type=VM and \
//           resource.post.labels.group=projects/P/vmgroups/myGroup'
// ```
//
// Examples of usage (with cuttle, we are interested only in one region and
// scope):
//
// * Checks activities within one hour for role binding resources
//
//   ```bash
//   cuttle audit query activity-log --parents 'projects/demo' \
//     --filter 'service.name="iam.edgelq.com" and \
//               resource.type="RoleBinding"' \
//     --interval '{"startTime":"2020-09-08T12:00:00Z",
//     "endTime":"2020-09-08T13:00:00Z"}' \ -o json
//   ```
//
// * Checks modification of specific RoleBinding
//
//   ```bash
//   cuttle audit query activity-log --parents 'projects/demo' \
//     --filter 'service.name="iam.edgelq.com" and \
//               resource.type="RoleBinding" and \
//               resource.name="projects/x/roleBindings/myRB"' \
//     --interval '{"startTime":"2020-09-08T12:00:00Z"}' \
//     -o json
//   ```
//
// * Checks changes on resource RoleBinding made by specific user
//   (we need their email)
//
//   ```bash
//   cuttle audit query resource-change-log --parents 'projects/demo' \
//     --filter 'service.name="iam.edgelq.com" and \
//               resource.type="RoleBinding" and \
//               authentication.principal="user:we.know.who@domain.com"' \
//     --interval '{"startTime":"2020-09-08T12:00:00Z"}' \
//     -o json
//   ```
type ListResourceChangeLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent names of ntt.audit.v1.ResourceChangeLog
	Parents []*resource_change_log.ParentName `protobuf:"bytes,1,rep,customtype=ParentName,name=parents,proto3" json:"parents,omitempty"`
	// A audit filter that specifies which resource change logs should be returned
	Filter *resource_change_log.Filter `protobuf:"bytes,2,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// The time interval for which results should be returned. Only logs
	// that contain data points in the specified interval are included
	// in the response.
	Interval *common.TimeInterval `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty"`
	// Cap on a number of resource change logs to be included in a response.
	// Number of logs in an actual response can be higher, since logs are
	// read in bulk with second precision - exceed logs above the limit will share
	// same timestamp as the logs below the limit.
	//
	// Results will be adjusted to the "end time" taken from interval field
	// (adjusted also by page_token if provided).
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token which identifies next page with further results. Token should be
	// taken from ListResourceChangeLogsResponse
	// [ListResourceChangeLogsResponse.next_page_token][ntt.audit.v1.ListResourceChangeLogsResponse.next_page_token].
	PageToken string `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListResourceChangeLogsRequest) Reset() {
	*m = ListResourceChangeLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListResourceChangeLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListResourceChangeLogsRequest) ProtoMessage() {}

func (m *ListResourceChangeLogsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListResourceChangeLogsRequest) GotenMessage() {}

// Deprecated, Use ListResourceChangeLogsRequest.ProtoReflect.Descriptor instead.
func (*ListResourceChangeLogsRequest) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDescGZIP(), []int{0}
}

func (m *ListResourceChangeLogsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListResourceChangeLogsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListResourceChangeLogsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListResourceChangeLogsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListResourceChangeLogsRequest) GetParents() []*resource_change_log.ParentName {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *ListResourceChangeLogsRequest) GetFilter() *resource_change_log.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListResourceChangeLogsRequest) GetInterval() *common.TimeInterval {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *ListResourceChangeLogsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListResourceChangeLogsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListResourceChangeLogsRequest) SetParents(fv []*resource_change_log.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parents", "ListResourceChangeLogsRequest"))
	}
	m.Parents = fv
}

func (m *ListResourceChangeLogsRequest) SetFilter(fv *resource_change_log.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListResourceChangeLogsRequest"))
	}
	m.Filter = fv
}

func (m *ListResourceChangeLogsRequest) SetInterval(fv *common.TimeInterval) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interval", "ListResourceChangeLogsRequest"))
	}
	m.Interval = fv
}

func (m *ListResourceChangeLogsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListResourceChangeLogsRequest"))
	}
	m.PageSize = fv
}

func (m *ListResourceChangeLogsRequest) SetPageToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListResourceChangeLogsRequest"))
	}
	m.PageToken = fv
}

// A response message of the
// [ListResourceChangeLogs](#listresourcechangelogs-method) method.
//
// Creates resource change log.
//
// This request should not be used by regular users - only API services should
// be able to submit resource change logs. Developers of services should use
// logs exporter package offered along other Audit service packages instead of
// developing own components.
type ListResourceChangeLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// One or more resource change logs that match the filter included in the
	// request. Contains results from all queried regions. Its possible however
	// that some logs may be missing, for this see execution_errors.
	ResourceChangeLogs []*resource_change_log.ResourceChangeLog `protobuf:"bytes,1,rep,name=resource_change_logs,json=resourceChangeLogs,proto3" json:"resource_change_logs,omitempty"`
	// If there are more results than have been returned, then this field is set
	// to a non-empty value. To see the additional results,
	// use that value as `pageToken` in the next call to this method.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Query execution errors that may have caused the response data returned to
	// be incomplete. Because logs are stored only locally (for each region), all
	// resource change log queries are split and merged by a receiving request
	// server according to the queried regions. Its possible that some regions
	// will fail when request is redirected to them, but others not. For each
	// failed region, one execution error will be appended. In each ntt.rpc.Status
	// message, fields code and message will contain error obtained from failed
	// regional server, while field details will contain always one item and this
	// item will be of type ErrorDetails.
	ExecutionErrors []*rpc.Status `protobuf:"bytes,3,rep,name=execution_errors,json=executionErrors,proto3" json:"execution_errors,omitempty"`
}

func (m *ListResourceChangeLogsResponse) Reset() {
	*m = ListResourceChangeLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListResourceChangeLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListResourceChangeLogsResponse) ProtoMessage() {}

func (m *ListResourceChangeLogsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListResourceChangeLogsResponse) GotenMessage() {}

// Deprecated, Use ListResourceChangeLogsResponse.ProtoReflect.Descriptor instead.
func (*ListResourceChangeLogsResponse) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDescGZIP(), []int{1}
}

func (m *ListResourceChangeLogsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListResourceChangeLogsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListResourceChangeLogsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListResourceChangeLogsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListResourceChangeLogsResponse) GetResourceChangeLogs() []*resource_change_log.ResourceChangeLog {
	if m != nil {
		return m.ResourceChangeLogs
	}
	return nil
}

func (m *ListResourceChangeLogsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListResourceChangeLogsResponse) GetExecutionErrors() []*rpc.Status {
	if m != nil {
		return m.ExecutionErrors
	}
	return nil
}

func (m *ListResourceChangeLogsResponse) SetResourceChangeLogs(fv []*resource_change_log.ResourceChangeLog) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceChangeLogs", "ListResourceChangeLogsResponse"))
	}
	m.ResourceChangeLogs = fv
}

func (m *ListResourceChangeLogsResponse) SetNextPageToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListResourceChangeLogsResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListResourceChangeLogsResponse) SetExecutionErrors(fv []*rpc.Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExecutionErrors", "ListResourceChangeLogsResponse"))
	}
	m.ExecutionErrors = fv
}

// A request message of the
// [CreatePreCommittedResourceChangeLogs](#createprecommittedresourcechangelogs-method)
// method.
type CreatePreCommittedResourceChangeLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// ID of the request - must be same as the one used in activity logs
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Time of the request
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Authentication data - informs who made a change
	Authentication *common.Authentication `protobuf:"bytes,3,opt,name=authentication,proto3" json:"authentication,omitempty"`
	// Information about the service
	Service *common.ServiceData `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	// Information about transaction
	Transaction *resource_change_log.ResourceChangeLog_TransactionInfo `protobuf:"bytes,5,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// List of changes
	Changes []*resource_change_log.ResourceChangeLog_ResourceChange `protobuf:"bytes,6,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (m *CreatePreCommittedResourceChangeLogsRequest) Reset() {
	*m = CreatePreCommittedResourceChangeLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreatePreCommittedResourceChangeLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreatePreCommittedResourceChangeLogsRequest) ProtoMessage() {}

func (m *CreatePreCommittedResourceChangeLogsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreatePreCommittedResourceChangeLogsRequest) GotenMessage() {}

// Deprecated, Use CreatePreCommittedResourceChangeLogsRequest.ProtoReflect.Descriptor instead.
func (*CreatePreCommittedResourceChangeLogsRequest) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDescGZIP(), []int{2}
}

func (m *CreatePreCommittedResourceChangeLogsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreatePreCommittedResourceChangeLogsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreatePreCommittedResourceChangeLogsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreatePreCommittedResourceChangeLogsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreatePreCommittedResourceChangeLogsRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return uint64(0)
}

func (m *CreatePreCommittedResourceChangeLogsRequest) GetTimestamp() *timestamppb.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *CreatePreCommittedResourceChangeLogsRequest) GetAuthentication() *common.Authentication {
	if m != nil {
		return m.Authentication
	}
	return nil
}

func (m *CreatePreCommittedResourceChangeLogsRequest) GetService() *common.ServiceData {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *CreatePreCommittedResourceChangeLogsRequest) GetTransaction() *resource_change_log.ResourceChangeLog_TransactionInfo {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *CreatePreCommittedResourceChangeLogsRequest) GetChanges() []*resource_change_log.ResourceChangeLog_ResourceChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

func (m *CreatePreCommittedResourceChangeLogsRequest) SetRequestId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequestId", "CreatePreCommittedResourceChangeLogsRequest"))
	}
	m.RequestId = fv
}

func (m *CreatePreCommittedResourceChangeLogsRequest) SetTimestamp(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Timestamp", "CreatePreCommittedResourceChangeLogsRequest"))
	}
	m.Timestamp = fv
}

func (m *CreatePreCommittedResourceChangeLogsRequest) SetAuthentication(fv *common.Authentication) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Authentication", "CreatePreCommittedResourceChangeLogsRequest"))
	}
	m.Authentication = fv
}

func (m *CreatePreCommittedResourceChangeLogsRequest) SetService(fv *common.ServiceData) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "CreatePreCommittedResourceChangeLogsRequest"))
	}
	m.Service = fv
}

func (m *CreatePreCommittedResourceChangeLogsRequest) SetTransaction(fv *resource_change_log.ResourceChangeLog_TransactionInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Transaction", "CreatePreCommittedResourceChangeLogsRequest"))
	}
	m.Transaction = fv
}

func (m *CreatePreCommittedResourceChangeLogsRequest) SetChanges(fv []*resource_change_log.ResourceChangeLog_ResourceChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Changes", "CreatePreCommittedResourceChangeLogsRequest"))
	}
	m.Changes = fv
}

// A response message of the
// [CreatePreCommittedResourceChangeLogs](#createprecommittedresourcechangelogs-method)
// method.
type CreatePreCommittedResourceChangeLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Resource change log keys - one key per each resource change, in same order
	LogKeys [][]byte `protobuf:"bytes,1,rep,name=log_keys,json=logKeys,proto3" json:"log_keys,omitempty"`
}

func (m *CreatePreCommittedResourceChangeLogsResponse) Reset() {
	*m = CreatePreCommittedResourceChangeLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreatePreCommittedResourceChangeLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreatePreCommittedResourceChangeLogsResponse) ProtoMessage() {}

func (m *CreatePreCommittedResourceChangeLogsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreatePreCommittedResourceChangeLogsResponse) GotenMessage() {}

// Deprecated, Use CreatePreCommittedResourceChangeLogsResponse.ProtoReflect.Descriptor instead.
func (*CreatePreCommittedResourceChangeLogsResponse) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDescGZIP(), []int{3}
}

func (m *CreatePreCommittedResourceChangeLogsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreatePreCommittedResourceChangeLogsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreatePreCommittedResourceChangeLogsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreatePreCommittedResourceChangeLogsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreatePreCommittedResourceChangeLogsResponse) GetLogKeys() [][]byte {
	if m != nil {
		return m.LogKeys
	}
	return nil
}

func (m *CreatePreCommittedResourceChangeLogsResponse) SetLogKeys(fv [][]byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LogKeys", "CreatePreCommittedResourceChangeLogsResponse"))
	}
	m.LogKeys = fv
}

// A request message of the
// [SetResourceChangeLogsCommitState](#setresourcechangelogscommitstate-method)
// method.
type SetResourceChangeLogsCommitStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// list of resource change log keys.
	LogKeys [][]byte `protobuf:"bytes,1,rep,name=log_keys,json=logKeys,proto3" json:"log_keys,omitempty"`
	// Information about the service - must be same as before, used for
	// authorization purpose
	Service *common.ServiceData `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	// Time of the request - must be same as in
	// CreatePreCommittedResourceChangeLogsRequest
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// final state of the transaction - must be COMMITTED or ROLLED_BACK
	TxResult resource_change_log.ResourceChangeLog_TransactionInfo_State `protobuf:"varint,3,opt,name=tx_result,json=txResult,proto3,enum=ntt.audit.v1.ResourceChangeLog_TransactionInfo_State" json:"tx_result,omitempty"`
}

func (m *SetResourceChangeLogsCommitStateRequest) Reset() {
	*m = SetResourceChangeLogsCommitStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SetResourceChangeLogsCommitStateRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SetResourceChangeLogsCommitStateRequest) ProtoMessage() {}

func (m *SetResourceChangeLogsCommitStateRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SetResourceChangeLogsCommitStateRequest) GotenMessage() {}

// Deprecated, Use SetResourceChangeLogsCommitStateRequest.ProtoReflect.Descriptor instead.
func (*SetResourceChangeLogsCommitStateRequest) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDescGZIP(), []int{4}
}

func (m *SetResourceChangeLogsCommitStateRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SetResourceChangeLogsCommitStateRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SetResourceChangeLogsCommitStateRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SetResourceChangeLogsCommitStateRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SetResourceChangeLogsCommitStateRequest) GetLogKeys() [][]byte {
	if m != nil {
		return m.LogKeys
	}
	return nil
}

func (m *SetResourceChangeLogsCommitStateRequest) GetService() *common.ServiceData {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *SetResourceChangeLogsCommitStateRequest) GetTimestamp() *timestamppb.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *SetResourceChangeLogsCommitStateRequest) GetTxResult() resource_change_log.ResourceChangeLog_TransactionInfo_State {
	if m != nil {
		return m.TxResult
	}
	return resource_change_log.ResourceChangeLog_TransactionInfo_UNDEFINED
}

func (m *SetResourceChangeLogsCommitStateRequest) SetLogKeys(fv [][]byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LogKeys", "SetResourceChangeLogsCommitStateRequest"))
	}
	m.LogKeys = fv
}

func (m *SetResourceChangeLogsCommitStateRequest) SetService(fv *common.ServiceData) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "SetResourceChangeLogsCommitStateRequest"))
	}
	m.Service = fv
}

func (m *SetResourceChangeLogsCommitStateRequest) SetTimestamp(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Timestamp", "SetResourceChangeLogsCommitStateRequest"))
	}
	m.Timestamp = fv
}

func (m *SetResourceChangeLogsCommitStateRequest) SetTxResult(fv resource_change_log.ResourceChangeLog_TransactionInfo_State) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TxResult", "SetResourceChangeLogsCommitStateRequest"))
	}
	m.TxResult = fv
}

// A response message of the
// [SetResourceChangeLogsCommitState](#setresourcechangelogscommitstate-method)
// method.
type SetResourceChangeLogsCommitStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *SetResourceChangeLogsCommitStateResponse) Reset() {
	*m = SetResourceChangeLogsCommitStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SetResourceChangeLogsCommitStateResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SetResourceChangeLogsCommitStateResponse) ProtoMessage() {}

func (m *SetResourceChangeLogsCommitStateResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SetResourceChangeLogsCommitStateResponse) GotenMessage() {}

// Deprecated, Use SetResourceChangeLogsCommitStateResponse.ProtoReflect.Descriptor instead.
func (*SetResourceChangeLogsCommitStateResponse) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDescGZIP(), []int{5}
}

func (m *SetResourceChangeLogsCommitStateResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SetResourceChangeLogsCommitStateResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SetResourceChangeLogsCommitStateResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SetResourceChangeLogsCommitStateResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

// ErrorDetails is used when one of the queried regions fails to produce
// results. It is used in execution_errors field (see subfield
// ntt.rpc.Status.details).
type ListResourceChangeLogsResponse_ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// region id which failed to give results.
	RegionId string `protobuf:"bytes,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (m *ListResourceChangeLogsResponse_ErrorDetails) Reset() {
	*m = ListResourceChangeLogsResponse_ErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListResourceChangeLogsResponse_ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListResourceChangeLogsResponse_ErrorDetails) ProtoMessage() {}

func (m *ListResourceChangeLogsResponse_ErrorDetails) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListResourceChangeLogsResponse_ErrorDetails) GotenMessage() {}

// Deprecated, Use ListResourceChangeLogsResponse_ErrorDetails.ProtoReflect.Descriptor instead.
func (*ListResourceChangeLogsResponse_ErrorDetails) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDescGZIP(), []int{1, 0}
}

func (m *ListResourceChangeLogsResponse_ErrorDetails) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListResourceChangeLogsResponse_ErrorDetails) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListResourceChangeLogsResponse_ErrorDetails) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListResourceChangeLogsResponse_ErrorDetails) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListResourceChangeLogsResponse_ErrorDetails) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *ListResourceChangeLogsResponse_ErrorDetails) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "ListResourceChangeLogsResponse_ErrorDetails"))
	}
	m.RegionId = fv
}

var edgelq_audit_proto_v1_resource_change_log_custom_proto preflect.FileDescriptor

var edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDesc = []byte{
	0x0a, 0x36, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x3a, 0x13, 0x0a,
	0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21,
	0x15, 0x1a, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0xca, 0xc6,
	0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x84, 0x02, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x12,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x10, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x2b, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x9e, 0x03, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x0e,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x22,
	0x87, 0x02, 0x0a, 0x27, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x52, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x08, 0x74, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2a, 0x0a, 0x28, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x94, 0x01, 0xe8, 0xde, 0x21, 0x00, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x76,
	0x31, 0x42, 0x1c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x6f, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x00, 0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x6f,
	0x67, 0x3b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDescOnce sync.Once
	edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDescData = edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDesc
)

func edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDescGZIP() []byte {
	edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDescOnce.Do(func() {
		edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDescData)
	})
	return edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDescData
}

var edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var edgelq_audit_proto_v1_resource_change_log_custom_proto_goTypes = []interface{}{
	(*ListResourceChangeLogsRequest)(nil),                            // 0: ntt.audit.v1.ListResourceChangeLogsRequest
	(*ListResourceChangeLogsResponse)(nil),                           // 1: ntt.audit.v1.ListResourceChangeLogsResponse
	(*CreatePreCommittedResourceChangeLogsRequest)(nil),              // 2: ntt.audit.v1.CreatePreCommittedResourceChangeLogsRequest
	(*CreatePreCommittedResourceChangeLogsResponse)(nil),             // 3: ntt.audit.v1.CreatePreCommittedResourceChangeLogsResponse
	(*SetResourceChangeLogsCommitStateRequest)(nil),                  // 4: ntt.audit.v1.SetResourceChangeLogsCommitStateRequest
	(*SetResourceChangeLogsCommitStateResponse)(nil),                 // 5: ntt.audit.v1.SetResourceChangeLogsCommitStateResponse
	(*ListResourceChangeLogsResponse_ErrorDetails)(nil),              // 6: ntt.audit.v1.ListResourceChangeLogsResponse.ErrorDetails
	(*common.TimeInterval)(nil),                                      // 7: ntt.audit.v1.TimeInterval
	(*resource_change_log.ResourceChangeLog)(nil),                    // 8: ntt.audit.v1.ResourceChangeLog
	(*rpc.Status)(nil),                                               // 9: ntt.rpc.Status
	(*timestamppb.Timestamp)(nil),                                    // 10: google.protobuf.Timestamp
	(*common.Authentication)(nil),                                    // 11: ntt.audit.v1.Authentication
	(*common.ServiceData)(nil),                                       // 12: ntt.audit.v1.ServiceData
	(*resource_change_log.ResourceChangeLog_TransactionInfo)(nil),    // 13: ntt.audit.v1.ResourceChangeLog.TransactionInfo
	(*resource_change_log.ResourceChangeLog_ResourceChange)(nil),     // 14: ntt.audit.v1.ResourceChangeLog.ResourceChange
	(resource_change_log.ResourceChangeLog_TransactionInfo_State)(0), // 15: ntt.audit.v1.ResourceChangeLog_TransactionInfo_State
}
var edgelq_audit_proto_v1_resource_change_log_custom_proto_depIdxs = []int32{
	7,  // 0: ntt.audit.v1.ListResourceChangeLogsRequest.interval:type_name -> ntt.audit.v1.TimeInterval
	8,  // 1: ntt.audit.v1.ListResourceChangeLogsResponse.resource_change_logs:type_name -> ntt.audit.v1.ResourceChangeLog
	9,  // 2: ntt.audit.v1.ListResourceChangeLogsResponse.execution_errors:type_name -> ntt.rpc.Status
	10, // 3: ntt.audit.v1.CreatePreCommittedResourceChangeLogsRequest.timestamp:type_name -> google.protobuf.Timestamp
	11, // 4: ntt.audit.v1.CreatePreCommittedResourceChangeLogsRequest.authentication:type_name -> ntt.audit.v1.Authentication
	12, // 5: ntt.audit.v1.CreatePreCommittedResourceChangeLogsRequest.service:type_name -> ntt.audit.v1.ServiceData
	13, // 6: ntt.audit.v1.CreatePreCommittedResourceChangeLogsRequest.transaction:type_name -> ntt.audit.v1.ResourceChangeLog.TransactionInfo
	14, // 7: ntt.audit.v1.CreatePreCommittedResourceChangeLogsRequest.changes:type_name -> ntt.audit.v1.ResourceChangeLog.ResourceChange
	12, // 8: ntt.audit.v1.SetResourceChangeLogsCommitStateRequest.service:type_name -> ntt.audit.v1.ServiceData
	10, // 9: ntt.audit.v1.SetResourceChangeLogsCommitStateRequest.timestamp:type_name -> google.protobuf.Timestamp
	15, // 10: ntt.audit.v1.SetResourceChangeLogsCommitStateRequest.tx_result:type_name -> ntt.audit.v1.ResourceChangeLog_TransactionInfo_State
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { edgelq_audit_proto_v1_resource_change_log_custom_proto_init() }
func edgelq_audit_proto_v1_resource_change_log_custom_proto_init() {
	if edgelq_audit_proto_v1_resource_change_log_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceChangeLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceChangeLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePreCommittedResourceChangeLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePreCommittedResourceChangeLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetResourceChangeLogsCommitStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetResourceChangeLogsCommitStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceChangeLogsResponse_ErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_audit_proto_v1_resource_change_log_custom_proto_goTypes,
		DependencyIndexes: edgelq_audit_proto_v1_resource_change_log_custom_proto_depIdxs,
		MessageInfos:      edgelq_audit_proto_v1_resource_change_log_custom_proto_msgTypes,
	}.Build()
	edgelq_audit_proto_v1_resource_change_log_custom_proto = out.File
	edgelq_audit_proto_v1_resource_change_log_custom_proto_rawDesc = nil
	edgelq_audit_proto_v1_resource_change_log_custom_proto_goTypes = nil
	edgelq_audit_proto_v1_resource_change_log_custom_proto_depIdxs = nil
}
