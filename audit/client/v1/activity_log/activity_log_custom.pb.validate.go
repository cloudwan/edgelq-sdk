// Code generated by protoc-gen-goten-validate
// File: edgelq/audit/proto/v1/activity_log_custom.proto
// DO NOT EDIT!!!

package activity_log_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	activity_log "github.com/cloudwan/edgelq-sdk/audit/resources/v1/activity_log"
	common "github.com/cloudwan/edgelq-sdk/audit/resources/v1/common"
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &activity_log.ActivityLog{}
	_ = &common.Authentication{}
	_ = &rpc.Status{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &meta_service.Service{}
)

func (obj *ListActivityLogsRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if obj.Interval == nil {
		return gotenvalidate.NewValidationError("ListActivityLogsRequest", "interval", obj.Interval, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.Interval).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ListActivityLogsRequest", "interval", obj.Interval, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListActivityLogsResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.ActivityLogs {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListActivityLogsResponse", "activityLogs", obj.ActivityLogs[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.ExecutionErrors {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ListActivityLogsResponse", "executionErrors", obj.ExecutionErrors[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ListActivityLogsResponse_ErrorDetails) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CreateActivityLogsRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.ActivityLogs {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateActivityLogsRequest", "activityLogs", obj.ActivityLogs[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CreateActivityLogsResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
