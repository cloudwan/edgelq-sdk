// Code generated by protoc-gen-goten-resource
// Resource: ResourceChangeLog
// DO NOT EDIT!!!

package resource_change_log

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	audit_common "github.com/cloudwan/edgelq-sdk/audit/common/v1alpha"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &audit_common.Authentication{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &timestamp.Timestamp{}
)

type ResourceChangeLogList []*ResourceChangeLog

func (l ResourceChangeLogList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*ResourceChangeLog))
}

func (l ResourceChangeLogList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ResourceChangeLogList)...)
}

func (l ResourceChangeLogList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ResourceChangeLogList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ResourceChangeLogList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*ResourceChangeLog)
}

func (l ResourceChangeLogList) Length() int {
	return len(l)
}

type ResourceChangeLogNameList []*Name

func (l ResourceChangeLogNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ResourceChangeLogNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ResourceChangeLogNameList)...)
}

func (l ResourceChangeLogNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ResourceChangeLogNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ResourceChangeLogNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ResourceChangeLogNameList) Length() int {
	return len(l)
}

type ResourceChangeLogReferenceList []*Reference

func (l ResourceChangeLogReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ResourceChangeLogReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ResourceChangeLogReferenceList)...)
}

func (l ResourceChangeLogReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ResourceChangeLogReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ResourceChangeLogReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ResourceChangeLogReferenceList) Length() int {
	return len(l)
}

type ResourceChangeLogParentNameList []*ParentName

func (l ResourceChangeLogParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ResourceChangeLogParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ResourceChangeLogParentNameList)...)
}

func (l ResourceChangeLogParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ResourceChangeLogParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ResourceChangeLogParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ResourceChangeLogParentNameList) Length() int {
	return len(l)
}

type ResourceChangeLogParentReferenceList []*ParentReference

func (l ResourceChangeLogParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ResourceChangeLogParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ResourceChangeLogParentReferenceList)...)
}

func (l ResourceChangeLogParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ResourceChangeLogParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ResourceChangeLogParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ResourceChangeLogParentReferenceList) Length() int {
	return len(l)
}

type ResourceChangeLogMap map[Name]*ResourceChangeLog

func (m ResourceChangeLogMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ResourceChangeLogMap) Set(res gotenresource.Resource) {
	tRes := res.(*ResourceChangeLog)
	m[*tRes.Name] = tRes
}

func (m ResourceChangeLogMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ResourceChangeLogMap) Length() int {
	return len(m)
}

func (m ResourceChangeLogMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
