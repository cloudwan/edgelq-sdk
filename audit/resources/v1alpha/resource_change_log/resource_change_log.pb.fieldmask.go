// Code generated by protoc-gen-goten-object
// File: edgelq/audit/proto/v1alpha/resource_change_log.proto
// DO NOT EDIT!!!

package resource_change_log

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	audit_common "github.com/cloudwan/edgelq-sdk/audit/common/v1alpha"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &audit_common.Authentication{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &timestamp.Timestamp{}
)

type ResourceChangeLog_FieldMask struct {
	Paths []ResourceChangeLog_FieldPath
}

func FullResourceChangeLog_FieldMask() *ResourceChangeLog_FieldMask {
	res := &ResourceChangeLog_FieldMask{}
	res.Paths = append(res.Paths, &ResourceChangeLog_FieldTerminalPath{selector: ResourceChangeLog_FieldPathSelectorName})
	res.Paths = append(res.Paths, &ResourceChangeLog_FieldTerminalPath{selector: ResourceChangeLog_FieldPathSelectorScope})
	res.Paths = append(res.Paths, &ResourceChangeLog_FieldTerminalPath{selector: ResourceChangeLog_FieldPathSelectorRequestId})
	res.Paths = append(res.Paths, &ResourceChangeLog_FieldTerminalPath{selector: ResourceChangeLog_FieldPathSelectorTimestamp})
	res.Paths = append(res.Paths, &ResourceChangeLog_FieldTerminalPath{selector: ResourceChangeLog_FieldPathSelectorAuthentication})
	res.Paths = append(res.Paths, &ResourceChangeLog_FieldTerminalPath{selector: ResourceChangeLog_FieldPathSelectorService})
	res.Paths = append(res.Paths, &ResourceChangeLog_FieldTerminalPath{selector: ResourceChangeLog_FieldPathSelectorResource})
	res.Paths = append(res.Paths, &ResourceChangeLog_FieldTerminalPath{selector: ResourceChangeLog_FieldPathSelectorTransaction})
	return res
}

func (fieldMask *ResourceChangeLog_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ResourceChangeLog_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ResourceChangeLog_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseResourceChangeLog_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ResourceChangeLog_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ResourceChangeLog_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ResourceChangeLog_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseResourceChangeLog_FieldPath(raw)
	})
}

func (fieldMask *ResourceChangeLog_FieldMask) ProtoMessage() {}

func (fieldMask *ResourceChangeLog_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ResourceChangeLog_FieldMask) Subtract(other *ResourceChangeLog_FieldMask) *ResourceChangeLog_FieldMask {
	result := &ResourceChangeLog_FieldMask{}
	removedSelectors := make([]bool, 8)
	otherSubMasks := map[ResourceChangeLog_FieldPathSelector]gotenobject.FieldMask{
		ResourceChangeLog_FieldPathSelectorAuthentication: &audit_common.Authentication_FieldMask{},
		ResourceChangeLog_FieldPathSelectorService:        &audit_common.ServiceData_FieldMask{},
		ResourceChangeLog_FieldPathSelectorResource:       &ResourceChangeLog_ResourceChange_FieldMask{},
		ResourceChangeLog_FieldPathSelectorTransaction:    &ResourceChangeLog_TransactionInfo_FieldMask{},
	}
	mySubMasks := map[ResourceChangeLog_FieldPathSelector]gotenobject.FieldMask{
		ResourceChangeLog_FieldPathSelectorAuthentication: &audit_common.Authentication_FieldMask{},
		ResourceChangeLog_FieldPathSelectorService:        &audit_common.ServiceData_FieldMask{},
		ResourceChangeLog_FieldPathSelectorResource:       &ResourceChangeLog_ResourceChange_FieldMask{},
		ResourceChangeLog_FieldPathSelectorTransaction:    &ResourceChangeLog_TransactionInfo_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ResourceChangeLog_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ResourceChangeLog_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ResourceChangeLog_FieldTerminalPath); ok {
					switch tp.selector {
					case ResourceChangeLog_FieldPathSelectorAuthentication:
						mySubMasks[ResourceChangeLog_FieldPathSelectorAuthentication] = audit_common.FullAuthentication_FieldMask()
					case ResourceChangeLog_FieldPathSelectorService:
						mySubMasks[ResourceChangeLog_FieldPathSelectorService] = audit_common.FullServiceData_FieldMask()
					case ResourceChangeLog_FieldPathSelectorResource:
						mySubMasks[ResourceChangeLog_FieldPathSelectorResource] = FullResourceChangeLog_ResourceChange_FieldMask()
					case ResourceChangeLog_FieldPathSelectorTransaction:
						mySubMasks[ResourceChangeLog_FieldPathSelectorTransaction] = FullResourceChangeLog_TransactionInfo_FieldMask()
					}
				} else if tp, ok := path.(*ResourceChangeLog_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ResourceChangeLog_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ResourceChangeLog_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ResourceChangeLog_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ResourceChangeLog_FieldMask) FilterInputFields() *ResourceChangeLog_FieldMask {
	result := &ResourceChangeLog_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ResourceChangeLog_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ResourceChangeLog_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ResourceChangeLog_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseResourceChangeLog_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ResourceChangeLog_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ResourceChangeLog_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ResourceChangeLog_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ResourceChangeLog_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ResourceChangeLog_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ResourceChangeLog_FieldMask) AppendPath(path ResourceChangeLog_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ResourceChangeLog_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ResourceChangeLog_FieldPath))
}

func (fieldMask *ResourceChangeLog_FieldMask) GetPaths() []ResourceChangeLog_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ResourceChangeLog_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ResourceChangeLog_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseResourceChangeLog_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ResourceChangeLog_FieldMask) Set(target, source *ResourceChangeLog) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ResourceChangeLog_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ResourceChangeLog), source.(*ResourceChangeLog))
}

func (fieldMask *ResourceChangeLog_FieldMask) Project(source *ResourceChangeLog) *ResourceChangeLog {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ResourceChangeLog{}
	authenticationMask := &audit_common.Authentication_FieldMask{}
	wholeAuthenticationAccepted := false
	serviceMask := &audit_common.ServiceData_FieldMask{}
	wholeServiceAccepted := false
	resourceMask := &ResourceChangeLog_ResourceChange_FieldMask{}
	wholeResourceAccepted := false
	transactionMask := &ResourceChangeLog_TransactionInfo_FieldMask{}
	wholeTransactionAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ResourceChangeLog_FieldTerminalPath:
			switch tp.selector {
			case ResourceChangeLog_FieldPathSelectorName:
				result.Name = source.Name
			case ResourceChangeLog_FieldPathSelectorScope:
				result.Scope = source.Scope
			case ResourceChangeLog_FieldPathSelectorRequestId:
				result.RequestId = source.RequestId
			case ResourceChangeLog_FieldPathSelectorTimestamp:
				result.Timestamp = source.Timestamp
			case ResourceChangeLog_FieldPathSelectorAuthentication:
				result.Authentication = source.Authentication
				wholeAuthenticationAccepted = true
			case ResourceChangeLog_FieldPathSelectorService:
				result.Service = source.Service
				wholeServiceAccepted = true
			case ResourceChangeLog_FieldPathSelectorResource:
				result.Resource = source.Resource
				wholeResourceAccepted = true
			case ResourceChangeLog_FieldPathSelectorTransaction:
				result.Transaction = source.Transaction
				wholeTransactionAccepted = true
			}
		case *ResourceChangeLog_FieldSubPath:
			switch tp.selector {
			case ResourceChangeLog_FieldPathSelectorAuthentication:
				authenticationMask.AppendPath(tp.subPath.(audit_common.Authentication_FieldPath))
			case ResourceChangeLog_FieldPathSelectorService:
				serviceMask.AppendPath(tp.subPath.(audit_common.ServiceData_FieldPath))
			case ResourceChangeLog_FieldPathSelectorResource:
				resourceMask.AppendPath(tp.subPath.(ResourceChangeLogResourceChange_FieldPath))
			case ResourceChangeLog_FieldPathSelectorTransaction:
				transactionMask.AppendPath(tp.subPath.(ResourceChangeLogTransactionInfo_FieldPath))
			}
		}
	}
	if wholeAuthenticationAccepted == false && len(authenticationMask.Paths) > 0 {
		result.Authentication = authenticationMask.Project(source.GetAuthentication())
	}
	if wholeServiceAccepted == false && len(serviceMask.Paths) > 0 {
		result.Service = serviceMask.Project(source.GetService())
	}
	if wholeResourceAccepted == false && len(resourceMask.Paths) > 0 {
		result.Resource = resourceMask.Project(source.GetResource())
	}
	if wholeTransactionAccepted == false && len(transactionMask.Paths) > 0 {
		result.Transaction = transactionMask.Project(source.GetTransaction())
	}
	return result
}

func (fieldMask *ResourceChangeLog_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ResourceChangeLog))
}

func (fieldMask *ResourceChangeLog_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ResourceChangeLog_ResourceChange_FieldMask struct {
	Paths []ResourceChangeLogResourceChange_FieldPath
}

func FullResourceChangeLog_ResourceChange_FieldMask() *ResourceChangeLog_ResourceChange_FieldMask {
	res := &ResourceChangeLog_ResourceChange_FieldMask{}
	res.Paths = append(res.Paths, &ResourceChangeLogResourceChange_FieldTerminalPath{selector: ResourceChangeLogResourceChange_FieldPathSelectorName})
	res.Paths = append(res.Paths, &ResourceChangeLogResourceChange_FieldTerminalPath{selector: ResourceChangeLogResourceChange_FieldPathSelectorType})
	res.Paths = append(res.Paths, &ResourceChangeLogResourceChange_FieldTerminalPath{selector: ResourceChangeLogResourceChange_FieldPathSelectorAction})
	res.Paths = append(res.Paths, &ResourceChangeLogResourceChange_FieldTerminalPath{selector: ResourceChangeLogResourceChange_FieldPathSelectorPre})
	res.Paths = append(res.Paths, &ResourceChangeLogResourceChange_FieldTerminalPath{selector: ResourceChangeLogResourceChange_FieldPathSelectorPost})
	return res
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseResourceChangeLogResourceChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ResourceChangeLogResourceChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseResourceChangeLogResourceChange_FieldPath(raw)
	})
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) ProtoMessage() {}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) Subtract(other *ResourceChangeLog_ResourceChange_FieldMask) *ResourceChangeLog_ResourceChange_FieldMask {
	result := &ResourceChangeLog_ResourceChange_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[ResourceChangeLogResourceChange_FieldPathSelector]gotenobject.FieldMask{
		ResourceChangeLogResourceChange_FieldPathSelectorPre:  &audit_common.ObjectState_FieldMask{},
		ResourceChangeLogResourceChange_FieldPathSelectorPost: &audit_common.ObjectState_FieldMask{},
	}
	mySubMasks := map[ResourceChangeLogResourceChange_FieldPathSelector]gotenobject.FieldMask{
		ResourceChangeLogResourceChange_FieldPathSelectorPre:  &audit_common.ObjectState_FieldMask{},
		ResourceChangeLogResourceChange_FieldPathSelectorPost: &audit_common.ObjectState_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ResourceChangeLogResourceChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ResourceChangeLogResourceChange_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ResourceChangeLogResourceChange_FieldTerminalPath); ok {
					switch tp.selector {
					case ResourceChangeLogResourceChange_FieldPathSelectorPre:
						mySubMasks[ResourceChangeLogResourceChange_FieldPathSelectorPre] = audit_common.FullObjectState_FieldMask()
					case ResourceChangeLogResourceChange_FieldPathSelectorPost:
						mySubMasks[ResourceChangeLogResourceChange_FieldPathSelectorPost] = audit_common.FullObjectState_FieldMask()
					}
				} else if tp, ok := path.(*ResourceChangeLogResourceChange_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ResourceChangeLogResourceChange_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ResourceChangeLog_ResourceChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) FilterInputFields() *ResourceChangeLog_ResourceChange_FieldMask {
	result := &ResourceChangeLog_ResourceChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ResourceChangeLogResourceChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseResourceChangeLogResourceChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ResourceChangeLog_ResourceChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ResourceChangeLog_ResourceChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) AppendPath(path ResourceChangeLogResourceChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ResourceChangeLogResourceChange_FieldPath))
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) GetPaths() []ResourceChangeLogResourceChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseResourceChangeLogResourceChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) Set(target, source *ResourceChangeLog_ResourceChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ResourceChangeLog_ResourceChange), source.(*ResourceChangeLog_ResourceChange))
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) Project(source *ResourceChangeLog_ResourceChange) *ResourceChangeLog_ResourceChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ResourceChangeLog_ResourceChange{}
	preMask := &audit_common.ObjectState_FieldMask{}
	wholePreAccepted := false
	postMask := &audit_common.ObjectState_FieldMask{}
	wholePostAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ResourceChangeLogResourceChange_FieldTerminalPath:
			switch tp.selector {
			case ResourceChangeLogResourceChange_FieldPathSelectorName:
				result.Name = source.Name
			case ResourceChangeLogResourceChange_FieldPathSelectorType:
				result.Type = source.Type
			case ResourceChangeLogResourceChange_FieldPathSelectorAction:
				result.Action = source.Action
			case ResourceChangeLogResourceChange_FieldPathSelectorPre:
				result.Pre = source.Pre
				wholePreAccepted = true
			case ResourceChangeLogResourceChange_FieldPathSelectorPost:
				result.Post = source.Post
				wholePostAccepted = true
			}
		case *ResourceChangeLogResourceChange_FieldSubPath:
			switch tp.selector {
			case ResourceChangeLogResourceChange_FieldPathSelectorPre:
				preMask.AppendPath(tp.subPath.(audit_common.ObjectState_FieldPath))
			case ResourceChangeLogResourceChange_FieldPathSelectorPost:
				postMask.AppendPath(tp.subPath.(audit_common.ObjectState_FieldPath))
			}
		}
	}
	if wholePreAccepted == false && len(preMask.Paths) > 0 {
		result.Pre = preMask.Project(source.GetPre())
	}
	if wholePostAccepted == false && len(postMask.Paths) > 0 {
		result.Post = postMask.Project(source.GetPost())
	}
	return result
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ResourceChangeLog_ResourceChange))
}

func (fieldMask *ResourceChangeLog_ResourceChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ResourceChangeLog_TransactionInfo_FieldMask struct {
	Paths []ResourceChangeLogTransactionInfo_FieldPath
}

func FullResourceChangeLog_TransactionInfo_FieldMask() *ResourceChangeLog_TransactionInfo_FieldMask {
	res := &ResourceChangeLog_TransactionInfo_FieldMask{}
	res.Paths = append(res.Paths, &ResourceChangeLogTransactionInfo_FieldTerminalPath{selector: ResourceChangeLogTransactionInfo_FieldPathSelectorIdentifier})
	res.Paths = append(res.Paths, &ResourceChangeLogTransactionInfo_FieldTerminalPath{selector: ResourceChangeLogTransactionInfo_FieldPathSelectorTryCounter})
	res.Paths = append(res.Paths, &ResourceChangeLogTransactionInfo_FieldTerminalPath{selector: ResourceChangeLogTransactionInfo_FieldPathSelectorState})
	return res
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseResourceChangeLogTransactionInfo_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ResourceChangeLogTransactionInfo_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseResourceChangeLogTransactionInfo_FieldPath(raw)
	})
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) ProtoMessage() {}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) Subtract(other *ResourceChangeLog_TransactionInfo_FieldMask) *ResourceChangeLog_TransactionInfo_FieldMask {
	result := &ResourceChangeLog_TransactionInfo_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ResourceChangeLogTransactionInfo_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ResourceChangeLog_TransactionInfo_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) FilterInputFields() *ResourceChangeLog_TransactionInfo_FieldMask {
	result := &ResourceChangeLog_TransactionInfo_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ResourceChangeLogTransactionInfo_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseResourceChangeLogTransactionInfo_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ResourceChangeLog_TransactionInfo_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ResourceChangeLog_TransactionInfo_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) AppendPath(path ResourceChangeLogTransactionInfo_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ResourceChangeLogTransactionInfo_FieldPath))
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) GetPaths() []ResourceChangeLogTransactionInfo_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseResourceChangeLogTransactionInfo_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) Set(target, source *ResourceChangeLog_TransactionInfo) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ResourceChangeLog_TransactionInfo), source.(*ResourceChangeLog_TransactionInfo))
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) Project(source *ResourceChangeLog_TransactionInfo) *ResourceChangeLog_TransactionInfo {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ResourceChangeLog_TransactionInfo{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ResourceChangeLogTransactionInfo_FieldTerminalPath:
			switch tp.selector {
			case ResourceChangeLogTransactionInfo_FieldPathSelectorIdentifier:
				result.Identifier = source.Identifier
			case ResourceChangeLogTransactionInfo_FieldPathSelectorTryCounter:
				result.TryCounter = source.TryCounter
			case ResourceChangeLogTransactionInfo_FieldPathSelectorState:
				result.State = source.State
			}
		}
	}
	return result
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ResourceChangeLog_TransactionInfo))
}

func (fieldMask *ResourceChangeLog_TransactionInfo_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
