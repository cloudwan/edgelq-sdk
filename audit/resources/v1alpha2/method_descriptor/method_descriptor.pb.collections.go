// Code generated by protoc-gen-goten-resource
// Resource: MethodDescriptor
// DO NOT EDIT!!!

package method_descriptor

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/audit/resources/v1alpha2/common"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &common.Authentication{}
	_ = &meta.Meta{}
)

type MethodDescriptorList []*MethodDescriptor

func (l MethodDescriptorList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*MethodDescriptor))
}

func (l MethodDescriptorList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(MethodDescriptorList)...)
}

func (l MethodDescriptorList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l MethodDescriptorList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l MethodDescriptorList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*MethodDescriptor)
}

func (l MethodDescriptorList) Length() int {
	return len(l)
}

type MethodDescriptorChangeList []*MethodDescriptorChange

func (l MethodDescriptorChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*MethodDescriptorChange))
}

func (l MethodDescriptorChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(MethodDescriptorChangeList)...)
}

func (l MethodDescriptorChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l MethodDescriptorChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l MethodDescriptorChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*MethodDescriptorChange)
}

func (l MethodDescriptorChangeList) Length() int {
	return len(l)
}

type MethodDescriptorNameList []*Name

func (l MethodDescriptorNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l MethodDescriptorNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(MethodDescriptorNameList)...)
}

func (l MethodDescriptorNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l MethodDescriptorNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l MethodDescriptorNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l MethodDescriptorNameList) Length() int {
	return len(l)
}

type MethodDescriptorReferenceList []*Reference

func (l MethodDescriptorReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l MethodDescriptorReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(MethodDescriptorReferenceList)...)
}

func (l MethodDescriptorReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l MethodDescriptorReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l MethodDescriptorReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l MethodDescriptorReferenceList) Length() int {
	return len(l)
}

type MethodDescriptorMap map[Name]*MethodDescriptor

func (m MethodDescriptorMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m MethodDescriptorMap) Set(res gotenresource.Resource) {
	tRes := res.(*MethodDescriptor)
	m[*tRes.Name] = tRes
}

func (m MethodDescriptorMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m MethodDescriptorMap) Length() int {
	return len(m)
}

func (m MethodDescriptorMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type MethodDescriptorChangeMap map[Name]*MethodDescriptorChange

func (m MethodDescriptorChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m MethodDescriptorChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*MethodDescriptorChange)
	m[*tChange.GetMethodDescriptorName()] = tChange
}

func (m MethodDescriptorChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m MethodDescriptorChangeMap) Length() int {
	return len(m)
}

func (m MethodDescriptorChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
