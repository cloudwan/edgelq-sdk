// Code generated by protoc-gen-goten-object
// File: edgelq/audit/proto/v1alpha2/method_descriptor.proto
// DO NOT EDIT!!!

package method_descriptor

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	audit_common "github.com/cloudwan/edgelq-sdk/audit/common/v1alpha2"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &audit_common.Authentication{}
	_ = &ntt_meta.Meta{}
)

func (o *MethodDescriptor) GotenObjectExt() {}

func (o *MethodDescriptor) MakeFullFieldMask() *MethodDescriptor_FieldMask {
	return FullMethodDescriptor_FieldMask()
}

func (o *MethodDescriptor) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullMethodDescriptor_FieldMask()
}

func (o *MethodDescriptor) MakeDiffFieldMask(other *MethodDescriptor) *MethodDescriptor_FieldMask {
	if o == nil && other == nil {
		return &MethodDescriptor_FieldMask{}
	}
	if o == nil || other == nil {
		return FullMethodDescriptor_FieldMask()
	}

	res := &MethodDescriptor_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &MethodDescriptor_FieldTerminalPath{selector: MethodDescriptor_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &MethodDescriptor_FieldTerminalPath{selector: MethodDescriptor_FieldPathSelectorDisplayName})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &MethodDescriptor_FieldTerminalPath{selector: MethodDescriptor_FieldPathSelectorDescription})
	}

	if len(o.GetLabels()) == len(other.GetLabels()) {
		for i, lValue := range o.GetLabels() {
			rValue := other.GetLabels()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &MethodDescriptor_FieldTerminalPath{selector: MethodDescriptor_FieldPathSelectorLabels})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &MethodDescriptor_FieldTerminalPath{selector: MethodDescriptor_FieldPathSelectorLabels})
	}

	if len(o.GetPromotedLabelKeySets()) == len(other.GetPromotedLabelKeySets()) {
		for i, lValue := range o.GetPromotedLabelKeySets() {
			rValue := other.GetPromotedLabelKeySets()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &MethodDescriptor_FieldTerminalPath{selector: MethodDescriptor_FieldPathSelectorPromotedLabelKeySets})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &MethodDescriptor_FieldTerminalPath{selector: MethodDescriptor_FieldPathSelectorPromotedLabelKeySets})
	}

	if len(o.GetVersions()) == len(other.GetVersions()) {
		for i, lValue := range o.GetVersions() {
			rValue := other.GetVersions()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &MethodDescriptor_FieldTerminalPath{selector: MethodDescriptor_FieldPathSelectorVersions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &MethodDescriptor_FieldTerminalPath{selector: MethodDescriptor_FieldPathSelectorVersions})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &MethodDescriptor_FieldTerminalPath{selector: MethodDescriptor_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &MethodDescriptor_FieldSubPath{selector: MethodDescriptor_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	return res
}

func (o *MethodDescriptor) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*MethodDescriptor))
}

func (o *MethodDescriptor) Clone() *MethodDescriptor {
	if o == nil {
		return nil
	}
	result := &MethodDescriptor{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.Description = o.Description
	result.Labels = make([]*audit_common.LabelDescriptor, len(o.Labels))
	for i, sourceValue := range o.Labels {
		result.Labels[i] = sourceValue.Clone()
	}
	result.PromotedLabelKeySets = make([]*audit_common.LabelKeySet, len(o.PromotedLabelKeySets))
	for i, sourceValue := range o.PromotedLabelKeySets {
		result.PromotedLabelKeySets[i] = sourceValue.Clone()
	}
	result.Versions = make([]string, len(o.Versions))
	for i, sourceValue := range o.Versions {
		result.Versions[i] = sourceValue
	}
	result.Metadata = o.Metadata.Clone()
	return result
}

func (o *MethodDescriptor) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *MethodDescriptor) Merge(source *MethodDescriptor) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	o.Description = source.GetDescription()
	for _, sourceValue := range source.GetLabels() {
		exists := false
		for _, currentValue := range o.Labels {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *audit_common.LabelDescriptor
			if sourceValue != nil {
				newDstElement = new(audit_common.LabelDescriptor)
				newDstElement.Merge(sourceValue)
			}
			o.Labels = append(o.Labels, newDstElement)
		}
	}

	for _, sourceValue := range source.GetPromotedLabelKeySets() {
		exists := false
		for _, currentValue := range o.PromotedLabelKeySets {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *audit_common.LabelKeySet
			if sourceValue != nil {
				newDstElement = new(audit_common.LabelKeySet)
				newDstElement.Merge(sourceValue)
			}
			o.PromotedLabelKeySets = append(o.PromotedLabelKeySets, newDstElement)
		}
	}

	for _, sourceValue := range source.GetVersions() {
		exists := false
		for _, currentValue := range o.Versions {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Versions = append(o.Versions, newDstElement)
		}
	}

	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
}

func (o *MethodDescriptor) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*MethodDescriptor))
}
