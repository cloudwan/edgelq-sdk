// Code generated by protoc-gen-goten-object
// File: edgelq/audit/proto/v1alpha2/common.proto
// DO NOT EDIT!!!

package common

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &anypb.Any{}
	_ = &timestamppb.Timestamp{}
)

func (o *Authentication) GotenObjectExt() {}

func (o *Authentication) MakeFullFieldMask() *Authentication_FieldMask {
	return FullAuthentication_FieldMask()
}

func (o *Authentication) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAuthentication_FieldMask()
}

func (o *Authentication) MakeDiffFieldMask(other *Authentication) *Authentication_FieldMask {
	if o == nil && other == nil {
		return &Authentication_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAuthentication_FieldMask()
	}

	res := &Authentication_FieldMask{}
	if o.GetPrincipal() != other.GetPrincipal() {
		res.Paths = append(res.Paths, &Authentication_FieldTerminalPath{selector: Authentication_FieldPathSelectorPrincipal})
	}
	if o.GetPrincipalType() != other.GetPrincipalType() {
		res.Paths = append(res.Paths, &Authentication_FieldTerminalPath{selector: Authentication_FieldPathSelectorPrincipalType})
	}
	return res
}

func (o *Authentication) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Authentication))
}

func (o *Authentication) Clone() *Authentication {
	if o == nil {
		return nil
	}
	result := &Authentication{}
	result.Principal = o.Principal
	result.PrincipalType = o.PrincipalType
	return result
}

func (o *Authentication) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Authentication) Merge(source *Authentication) {
	o.Principal = source.GetPrincipal()
	o.PrincipalType = source.GetPrincipalType()
}

func (o *Authentication) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Authentication))
}

func (o *Authorization) GotenObjectExt() {}

func (o *Authorization) MakeFullFieldMask() *Authorization_FieldMask {
	return FullAuthorization_FieldMask()
}

func (o *Authorization) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAuthorization_FieldMask()
}

func (o *Authorization) MakeDiffFieldMask(other *Authorization) *Authorization_FieldMask {
	if o == nil && other == nil {
		return &Authorization_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAuthorization_FieldMask()
	}

	res := &Authorization_FieldMask{}

	if len(o.GetGrantedPermissions()) == len(other.GetGrantedPermissions()) {
		for i, lValue := range o.GetGrantedPermissions() {
			rValue := other.GetGrantedPermissions()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &Authorization_FieldTerminalPath{selector: Authorization_FieldPathSelectorGrantedPermissions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Authorization_FieldTerminalPath{selector: Authorization_FieldPathSelectorGrantedPermissions})
	}

	if len(o.GetDeniedPermissions()) == len(other.GetDeniedPermissions()) {
		for i, lValue := range o.GetDeniedPermissions() {
			rValue := other.GetDeniedPermissions()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &Authorization_FieldTerminalPath{selector: Authorization_FieldPathSelectorDeniedPermissions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Authorization_FieldTerminalPath{selector: Authorization_FieldPathSelectorDeniedPermissions})
	}
	return res
}

func (o *Authorization) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Authorization))
}

func (o *Authorization) Clone() *Authorization {
	if o == nil {
		return nil
	}
	result := &Authorization{}
	result.GrantedPermissions = make([]string, len(o.GrantedPermissions))
	for i, sourceValue := range o.GrantedPermissions {
		result.GrantedPermissions[i] = sourceValue
	}
	result.DeniedPermissions = make([]string, len(o.DeniedPermissions))
	for i, sourceValue := range o.DeniedPermissions {
		result.DeniedPermissions[i] = sourceValue
	}
	return result
}

func (o *Authorization) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Authorization) Merge(source *Authorization) {
	for _, sourceValue := range source.GetGrantedPermissions() {
		exists := false
		for _, currentValue := range o.GrantedPermissions {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.GrantedPermissions = append(o.GrantedPermissions, newDstElement)
		}
	}

	for _, sourceValue := range source.GetDeniedPermissions() {
		exists := false
		for _, currentValue := range o.DeniedPermissions {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.DeniedPermissions = append(o.DeniedPermissions, newDstElement)
		}
	}

}

func (o *Authorization) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Authorization))
}

func (o *ServiceData) GotenObjectExt() {}

func (o *ServiceData) MakeFullFieldMask() *ServiceData_FieldMask {
	return FullServiceData_FieldMask()
}

func (o *ServiceData) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullServiceData_FieldMask()
}

func (o *ServiceData) MakeDiffFieldMask(other *ServiceData) *ServiceData_FieldMask {
	if o == nil && other == nil {
		return &ServiceData_FieldMask{}
	}
	if o == nil || other == nil {
		return FullServiceData_FieldMask()
	}

	res := &ServiceData_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &ServiceData_FieldTerminalPath{selector: ServiceData_FieldPathSelectorName})
	}
	if o.GetRegionId() != other.GetRegionId() {
		res.Paths = append(res.Paths, &ServiceData_FieldTerminalPath{selector: ServiceData_FieldPathSelectorRegionId})
	}
	return res
}

func (o *ServiceData) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ServiceData))
}

func (o *ServiceData) Clone() *ServiceData {
	if o == nil {
		return nil
	}
	result := &ServiceData{}
	result.Name = o.Name
	result.RegionId = o.RegionId
	return result
}

func (o *ServiceData) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ServiceData) Merge(source *ServiceData) {
	o.Name = source.GetName()
	o.RegionId = source.GetRegionId()
}

func (o *ServiceData) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ServiceData))
}

func (o *ObjectState) GotenObjectExt() {}

func (o *ObjectState) MakeFullFieldMask() *ObjectState_FieldMask {
	return FullObjectState_FieldMask()
}

func (o *ObjectState) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullObjectState_FieldMask()
}

func (o *ObjectState) MakeDiffFieldMask(other *ObjectState) *ObjectState_FieldMask {
	if o == nil && other == nil {
		return &ObjectState_FieldMask{}
	}
	if o == nil || other == nil {
		return FullObjectState_FieldMask()
	}

	res := &ObjectState_FieldMask{}
	if !proto.Equal(o.GetData(), other.GetData()) {
		res.Paths = append(res.Paths, &ObjectState_FieldTerminalPath{selector: ObjectState_FieldPathSelectorData})
	}

	if len(o.GetLabels()) == len(other.GetLabels()) {
		for i, lValue := range o.GetLabels() {
			rValue := other.GetLabels()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &ObjectState_FieldTerminalPath{selector: ObjectState_FieldPathSelectorLabels})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ObjectState_FieldTerminalPath{selector: ObjectState_FieldPathSelectorLabels})
	}
	return res
}

func (o *ObjectState) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ObjectState))
}

func (o *ObjectState) Clone() *ObjectState {
	if o == nil {
		return nil
	}
	result := &ObjectState{}
	result.Data = proto.Clone(o.Data).(*anypb.Any)
	result.Labels = map[string]string{}
	for key, sourceValue := range o.Labels {
		result.Labels[key] = sourceValue
	}
	return result
}

func (o *ObjectState) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ObjectState) Merge(source *ObjectState) {
	if source.GetData() != nil {
		if o.Data == nil {
			o.Data = new(anypb.Any)
		}
		proto.Merge(o.Data, source.GetData())
	}
	if source.GetLabels() != nil {
		if o.Labels == nil {
			o.Labels = make(map[string]string, len(source.GetLabels()))
		}
		for key, sourceValue := range source.GetLabels() {
			o.Labels[key] = sourceValue
		}
	}
}

func (o *ObjectState) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ObjectState))
}

func (o *LabelDescriptor) GotenObjectExt() {}

func (o *LabelDescriptor) MakeFullFieldMask() *LabelDescriptor_FieldMask {
	return FullLabelDescriptor_FieldMask()
}

func (o *LabelDescriptor) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLabelDescriptor_FieldMask()
}

func (o *LabelDescriptor) MakeDiffFieldMask(other *LabelDescriptor) *LabelDescriptor_FieldMask {
	if o == nil && other == nil {
		return &LabelDescriptor_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLabelDescriptor_FieldMask()
	}

	res := &LabelDescriptor_FieldMask{}
	if o.GetKey() != other.GetKey() {
		res.Paths = append(res.Paths, &LabelDescriptor_FieldTerminalPath{selector: LabelDescriptor_FieldPathSelectorKey})
	}

	if len(o.GetVersions()) == len(other.GetVersions()) {
		for i, lValue := range o.GetVersions() {
			rValue := other.GetVersions()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &LabelDescriptor_FieldTerminalPath{selector: LabelDescriptor_FieldPathSelectorVersions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &LabelDescriptor_FieldTerminalPath{selector: LabelDescriptor_FieldPathSelectorVersions})
	}
	return res
}

func (o *LabelDescriptor) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*LabelDescriptor))
}

func (o *LabelDescriptor) Clone() *LabelDescriptor {
	if o == nil {
		return nil
	}
	result := &LabelDescriptor{}
	result.Key = o.Key
	result.Versions = make([]string, len(o.Versions))
	for i, sourceValue := range o.Versions {
		result.Versions[i] = sourceValue
	}
	return result
}

func (o *LabelDescriptor) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *LabelDescriptor) Merge(source *LabelDescriptor) {
	o.Key = source.GetKey()
	for _, sourceValue := range source.GetVersions() {
		exists := false
		for _, currentValue := range o.Versions {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Versions = append(o.Versions, newDstElement)
		}
	}

}

func (o *LabelDescriptor) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*LabelDescriptor))
}

func (o *LabelKeySet) GotenObjectExt() {}

func (o *LabelKeySet) MakeFullFieldMask() *LabelKeySet_FieldMask {
	return FullLabelKeySet_FieldMask()
}

func (o *LabelKeySet) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLabelKeySet_FieldMask()
}

func (o *LabelKeySet) MakeDiffFieldMask(other *LabelKeySet) *LabelKeySet_FieldMask {
	if o == nil && other == nil {
		return &LabelKeySet_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLabelKeySet_FieldMask()
	}

	res := &LabelKeySet_FieldMask{}

	if len(o.GetLabelKeys()) == len(other.GetLabelKeys()) {
		for i, lValue := range o.GetLabelKeys() {
			rValue := other.GetLabelKeys()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &LabelKeySet_FieldTerminalPath{selector: LabelKeySet_FieldPathSelectorLabelKeys})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &LabelKeySet_FieldTerminalPath{selector: LabelKeySet_FieldPathSelectorLabelKeys})
	}

	if len(o.GetVersions()) == len(other.GetVersions()) {
		for i, lValue := range o.GetVersions() {
			rValue := other.GetVersions()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &LabelKeySet_FieldTerminalPath{selector: LabelKeySet_FieldPathSelectorVersions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &LabelKeySet_FieldTerminalPath{selector: LabelKeySet_FieldPathSelectorVersions})
	}
	return res
}

func (o *LabelKeySet) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*LabelKeySet))
}

func (o *LabelKeySet) Clone() *LabelKeySet {
	if o == nil {
		return nil
	}
	result := &LabelKeySet{}
	result.LabelKeys = make([]string, len(o.LabelKeys))
	for i, sourceValue := range o.LabelKeys {
		result.LabelKeys[i] = sourceValue
	}
	result.Versions = make([]string, len(o.Versions))
	for i, sourceValue := range o.Versions {
		result.Versions[i] = sourceValue
	}
	return result
}

func (o *LabelKeySet) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *LabelKeySet) Merge(source *LabelKeySet) {
	for _, sourceValue := range source.GetLabelKeys() {
		exists := false
		for _, currentValue := range o.LabelKeys {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.LabelKeys = append(o.LabelKeys, newDstElement)
		}
	}

	for _, sourceValue := range source.GetVersions() {
		exists := false
		for _, currentValue := range o.Versions {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Versions = append(o.Versions, newDstElement)
		}
	}

}

func (o *LabelKeySet) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*LabelKeySet))
}

func (o *TimeInterval) GotenObjectExt() {}

func (o *TimeInterval) MakeFullFieldMask() *TimeInterval_FieldMask {
	return FullTimeInterval_FieldMask()
}

func (o *TimeInterval) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTimeInterval_FieldMask()
}

func (o *TimeInterval) MakeDiffFieldMask(other *TimeInterval) *TimeInterval_FieldMask {
	if o == nil && other == nil {
		return &TimeInterval_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTimeInterval_FieldMask()
	}

	res := &TimeInterval_FieldMask{}
	if !proto.Equal(o.GetEndTime(), other.GetEndTime()) {
		res.Paths = append(res.Paths, &TimeInterval_FieldTerminalPath{selector: TimeInterval_FieldPathSelectorEndTime})
	}
	if !proto.Equal(o.GetStartTime(), other.GetStartTime()) {
		res.Paths = append(res.Paths, &TimeInterval_FieldTerminalPath{selector: TimeInterval_FieldPathSelectorStartTime})
	}
	return res
}

func (o *TimeInterval) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TimeInterval))
}

func (o *TimeInterval) Clone() *TimeInterval {
	if o == nil {
		return nil
	}
	result := &TimeInterval{}
	result.EndTime = proto.Clone(o.EndTime).(*timestamppb.Timestamp)
	result.StartTime = proto.Clone(o.StartTime).(*timestamppb.Timestamp)
	return result
}

func (o *TimeInterval) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TimeInterval) Merge(source *TimeInterval) {
	if source.GetEndTime() != nil {
		if o.EndTime == nil {
			o.EndTime = new(timestamppb.Timestamp)
		}
		proto.Merge(o.EndTime, source.GetEndTime())
	}
	if source.GetStartTime() != nil {
		if o.StartTime == nil {
			o.StartTime = new(timestamppb.Timestamp)
		}
		proto.Merge(o.StartTime, source.GetStartTime())
	}
}

func (o *TimeInterval) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TimeInterval))
}
