// Code generated by protoc-gen-goten-go
// File: edgelq/audit/proto/v1/audited_resource_descriptor.proto
// DO NOT EDIT!!!

package audited_resource_descriptor

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/audit/resources/v1/common"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &common.Authentication{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AuditedResourceDescriptor Resource
type AuditedResourceDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of AuditedResourceDescriptor
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Optional. A concise name for the audited object type that might be
	// displayed in user interfaces. It should be a Title Cased Noun Phrase,
	// without any article or other determiners.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	// Optional. A detailed description of the audited object type that might
	// be used in documentation.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	// Required. A set of labels used to describe instances of this audited
	// resource type. For example, for "RoleBinding" we can define name+member.
	// This can allow us to make query like "who allowed user X to do those
	// things?"
	Labels []*common.LabelDescriptor `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" firestore:"labels"`
	// Promoted Label Key Sets allow defining multiple indexing rules for
	// underlying backend enabling query optimizations.
	PromotedLabelKeySets []*common.LabelKeySet `protobuf:"bytes,5,rep,name=promoted_label_key_sets,json=promotedLabelKeySets,proto3" json:"promoted_label_key_sets,omitempty" firestore:"promotedLabelKeySets"`
	// List of API versions which define this resource
	Versions []string `protobuf:"bytes,6,rep,name=versions,proto3" json:"versions,omitempty" firestore:"versions"`
	// List of spec fields
	SpecFields []string `protobuf:"bytes,7,rep,name=spec_fields,json=specFields,proto3" json:"spec_fields,omitempty" firestore:"specFields"`
	// List of state fields
	StateFields []string `protobuf:"bytes,8,rep,name=state_fields,json=stateFields,proto3" json:"state_fields,omitempty" firestore:"stateFields"`
	// List of meta fields
	MetaFields []string `protobuf:"bytes,9,rep,name=meta_fields,json=metaFields,proto3" json:"meta_fields,omitempty" firestore:"metaFields"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
}

func (m *AuditedResourceDescriptor) Reset() {
	*m = AuditedResourceDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_audited_resource_descriptor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AuditedResourceDescriptor) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AuditedResourceDescriptor) ProtoMessage() {}

func (m *AuditedResourceDescriptor) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_audited_resource_descriptor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AuditedResourceDescriptor) GotenMessage() {}

// Deprecated, Use AuditedResourceDescriptor.ProtoReflect.Descriptor instead.
func (*AuditedResourceDescriptor) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_audited_resource_descriptor_proto_rawDescGZIP(), []int{0}
}

func (m *AuditedResourceDescriptor) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AuditedResourceDescriptor) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AuditedResourceDescriptor) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AuditedResourceDescriptor) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AuditedResourceDescriptor) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *AuditedResourceDescriptor) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *AuditedResourceDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AuditedResourceDescriptor) GetLabels() []*common.LabelDescriptor {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *AuditedResourceDescriptor) GetPromotedLabelKeySets() []*common.LabelKeySet {
	if m != nil {
		return m.PromotedLabelKeySets
	}
	return nil
}

func (m *AuditedResourceDescriptor) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *AuditedResourceDescriptor) GetSpecFields() []string {
	if m != nil {
		return m.SpecFields
	}
	return nil
}

func (m *AuditedResourceDescriptor) GetStateFields() []string {
	if m != nil {
		return m.StateFields
	}
	return nil
}

func (m *AuditedResourceDescriptor) GetMetaFields() []string {
	if m != nil {
		return m.MetaFields
	}
	return nil
}

func (m *AuditedResourceDescriptor) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *AuditedResourceDescriptor) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "AuditedResourceDescriptor"))
	}
	m.Name = fv
}

func (m *AuditedResourceDescriptor) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "AuditedResourceDescriptor"))
	}
	m.DisplayName = fv
}

func (m *AuditedResourceDescriptor) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "AuditedResourceDescriptor"))
	}
	m.Description = fv
}

func (m *AuditedResourceDescriptor) SetLabels(fv []*common.LabelDescriptor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Labels", "AuditedResourceDescriptor"))
	}
	m.Labels = fv
}

func (m *AuditedResourceDescriptor) SetPromotedLabelKeySets(fv []*common.LabelKeySet) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PromotedLabelKeySets", "AuditedResourceDescriptor"))
	}
	m.PromotedLabelKeySets = fv
}

func (m *AuditedResourceDescriptor) SetVersions(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Versions", "AuditedResourceDescriptor"))
	}
	m.Versions = fv
}

func (m *AuditedResourceDescriptor) SetSpecFields(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SpecFields", "AuditedResourceDescriptor"))
	}
	m.SpecFields = fv
}

func (m *AuditedResourceDescriptor) SetStateFields(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StateFields", "AuditedResourceDescriptor"))
	}
	m.StateFields = fv
}

func (m *AuditedResourceDescriptor) SetMetaFields(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetaFields", "AuditedResourceDescriptor"))
	}
	m.MetaFields = fv
}

func (m *AuditedResourceDescriptor) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "AuditedResourceDescriptor"))
	}
	m.Metadata = fv
}

var edgelq_audit_proto_v1_audited_resource_descriptor_proto preflect.FileDescriptor

var edgelq_audit_proto_v1_audited_resource_descriptor_proto_rawDesc = []byte{
	0x0a, 0x37, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x06,
	0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x0a,
	0x1b, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x50,
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0xf0, 0x02, 0xea, 0x41, 0x79, 0x0a, 0x2a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x4b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x7d, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x7b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x7d, 0x92,
	0xd9, 0x21, 0x62, 0x0a, 0x1a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x1a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x16, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2a, 0x0e, 0x5b, 0x5c, 0x77, 0x2e, 0x2f, 0x2d, 0x5d, 0x7b, 0x31, 0x2c, 0x31,
	0x32, 0x38, 0x7d, 0x38, 0x05, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xc2, 0x85, 0x2c, 0x7e, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x17,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x22, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x0b, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x82, 0x03, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x6a, 0x0a,
	0x21, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0xa2, 0x80, 0xd1, 0x02, 0x6c, 0x0a, 0x22,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42,
	0x1e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x65, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x3b, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_audit_proto_v1_audited_resource_descriptor_proto_rawDescOnce sync.Once
	edgelq_audit_proto_v1_audited_resource_descriptor_proto_rawDescData = edgelq_audit_proto_v1_audited_resource_descriptor_proto_rawDesc
)

func edgelq_audit_proto_v1_audited_resource_descriptor_proto_rawDescGZIP() []byte {
	edgelq_audit_proto_v1_audited_resource_descriptor_proto_rawDescOnce.Do(func() {
		edgelq_audit_proto_v1_audited_resource_descriptor_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_audit_proto_v1_audited_resource_descriptor_proto_rawDescData)
	})
	return edgelq_audit_proto_v1_audited_resource_descriptor_proto_rawDescData
}

var edgelq_audit_proto_v1_audited_resource_descriptor_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var edgelq_audit_proto_v1_audited_resource_descriptor_proto_goTypes = []interface{}{
	(*AuditedResourceDescriptor)(nil), // 0: ntt.audit.v1.AuditedResourceDescriptor
	(*common.LabelDescriptor)(nil),    // 1: ntt.audit.v1.LabelDescriptor
	(*common.LabelKeySet)(nil),        // 2: ntt.audit.v1.LabelKeySet
	(*meta.Meta)(nil),                 // 3: goten.types.Meta
}
var edgelq_audit_proto_v1_audited_resource_descriptor_proto_depIdxs = []int32{
	1, // 0: ntt.audit.v1.AuditedResourceDescriptor.labels:type_name -> ntt.audit.v1.LabelDescriptor
	2, // 1: ntt.audit.v1.AuditedResourceDescriptor.promoted_label_key_sets:type_name -> ntt.audit.v1.LabelKeySet
	3, // 2: ntt.audit.v1.AuditedResourceDescriptor.metadata:type_name -> goten.types.Meta
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { edgelq_audit_proto_v1_audited_resource_descriptor_proto_init() }
func edgelq_audit_proto_v1_audited_resource_descriptor_proto_init() {
	if edgelq_audit_proto_v1_audited_resource_descriptor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_audit_proto_v1_audited_resource_descriptor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditedResourceDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_audit_proto_v1_audited_resource_descriptor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_audit_proto_v1_audited_resource_descriptor_proto_goTypes,
		DependencyIndexes: edgelq_audit_proto_v1_audited_resource_descriptor_proto_depIdxs,
		MessageInfos:      edgelq_audit_proto_v1_audited_resource_descriptor_proto_msgTypes,
	}.Build()
	edgelq_audit_proto_v1_audited_resource_descriptor_proto = out.File
	edgelq_audit_proto_v1_audited_resource_descriptor_proto_rawDesc = nil
	edgelq_audit_proto_v1_audited_resource_descriptor_proto_goTypes = nil
	edgelq_audit_proto_v1_audited_resource_descriptor_proto_depIdxs = nil
}
