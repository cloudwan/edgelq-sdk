// Code generated by protoc-gen-goten-go
// File: edgelq/audit/proto/v1/activity_log.proto
// DO NOT EDIT!!!

package activity_log

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/audit/resources/v1/common"
	rpc "github.com/cloudwan/edgelq-sdk/common/rpc"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	anypb "google.golang.org/protobuf/types/known/anypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &common.Authentication{}
	_ = &rpc.Status{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &anypb.Any{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = &meta_service.Service{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Activity log category.
// Each activity log basically describes read or write action,
// optionally describes other "operation" type.
type ActivityLog_Category int32

const (
	// Undefined, should never be used
	ActivityLog_Undefined ActivityLog_Category = 0
	// Describes all requests that involved execution of some special operation,
	// for example, SSH connection could be put in this category.
	// It's for requests that cannot be classified clearly as a read or write.
	ActivityLog_Operation ActivityLog_Category = 2
	// Describes all requests that involved creation of a new resource.
	ActivityLog_Creation ActivityLog_Category = 1
	// Describes all requests which involved deletion of an existing resource.
	ActivityLog_Deletion ActivityLog_Category = 11
	// Describes all update requests that changed specification fields in
	// an existing resource(s).
	ActivityLog_SpecUpdate ActivityLog_Category = 3
	// Describes all update requests that changed state fields in an existing
	// resource(s) (but not specification).
	ActivityLog_StateUpdate ActivityLog_Category = 4
	// Describes all update requests that are neither of SpecUpdate or
	// StateUpdate type. It is for non-significant updates like modification of
	// metadata annotations.
	ActivityLog_MetaUpdate ActivityLog_Category = 6
	// Describes an internal update of the system (like controller creating role
	// binding for each group member for each role assigned to group).
	// It includes all CUD requests as long as they are result of an internal
	// system balancing.
	ActivityLog_Internal ActivityLog_Category = 5
	// Describes request that has been rejected and therefore no action
	// has happened. This is result of lack of permission/authentication.
	ActivityLog_Rejected ActivityLog_Category = 7
	// Describes request that has failed due to client error (like validation
	// error)
	ActivityLog_ClientError ActivityLog_Category = 8
	// Describes request that has failed due to server issue.
	ActivityLog_ServerError ActivityLog_Category = 9
	// Describes any read request (like BatchGet, Get, List, Watch).
	ActivityLog_Read ActivityLog_Category = 10
)

var (
	ActivityLog_Category_name = map[int32]string{
		0:  "Undefined",
		2:  "Operation",
		1:  "Creation",
		11: "Deletion",
		3:  "SpecUpdate",
		4:  "StateUpdate",
		6:  "MetaUpdate",
		5:  "Internal",
		7:  "Rejected",
		8:  "ClientError",
		9:  "ServerError",
		10: "Read",
	}

	ActivityLog_Category_value = map[string]int32{
		"Undefined":   0,
		"Operation":   2,
		"Creation":    1,
		"Deletion":    11,
		"SpecUpdate":  3,
		"StateUpdate": 4,
		"MetaUpdate":  6,
		"Internal":    5,
		"Rejected":    7,
		"ClientError": 8,
		"ServerError": 9,
		"Read":        10,
	}
)

func (x ActivityLog_Category) Enum() *ActivityLog_Category {
	p := new(ActivityLog_Category)
	*p = x
	return p
}

func (x ActivityLog_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (ActivityLog_Category) Descriptor() preflect.EnumDescriptor {
	return edgelq_audit_proto_v1_activity_log_proto_enumTypes[0].Descriptor()
}

func (ActivityLog_Category) Type() preflect.EnumType {
	return &edgelq_audit_proto_v1_activity_log_proto_enumTypes[0]
}

func (x ActivityLog_Category) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use ActivityLog_Category.ProtoReflect.Descriptor instead.
func (ActivityLog_Category) EnumDescriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_activity_log_proto_rawDescGZIP(), []int{0, 0}
}

// ActivityLog Resource - describes notification of
// activity triggered by a request sent to an API service.
// ActivityLog creation is triggered by an API service
// when it receives either unary or stream request.
//
// ActivityLog contains messages exchanged between client
// and server within single API call and finally exit status.
// ActivityLog is method oriented - service name + method name
// (for example IAM/CreateRoleBinding) is a leading information.
//
// ActivityLog can have N associated ResourceChangeLog objects,
// if API call it describes made some changes in a data store.
// You can combine ActivityLog and ResourceChangeLog by making
// queries with request_id specified in a filter.
type ActivityLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ActivityLog. It contains scope + ID of the log.
	// ID is a base64 encoded unique key that identifies tuple:
	//   scope
	//   request_id
	//   authentication.principal
	//   request_metadata.ip_address
	//   request_metadata.user_agent
	//   request_routing.via_region
	//   request_routing.dest_regions
	//   authorization.granted_permissions
	//   authorization.denied_permissions
	//   service.name
	//   service.region_id
	//   method.type
	//   method.version
	//   resource.name
	//   resource.difference.fields
	//   category
	//   labels
	//
	// Key is not to be decoded outside of service, but treated as opaque string
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Contains scope from name field without resource ID.
	// Used for internal purpose for filtering (logs are using custom store).
	// Example formats are:
	// - organization/umbrella
	// - projects/mars_exploration
	// - services/devices.edgelq.com
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty" firestore:"scope"`
	// Generated ID of the request. Same ID must be used in ResourceChangeLog
	// objects associated with this request.
	RequestId uint64 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty" firestore:"requestId"`
	// Authentication data - informs who made a request
	Authentication *common.Authentication `protobuf:"bytes,5,opt,name=authentication,proto3" json:"authentication,omitempty" firestore:"authentication"`
	// Authorization data - informs what permissions were
	// granted or denied for associated request
	Authorization *common.Authorization `protobuf:"bytes,6,opt,name=authorization,proto3" json:"authorization,omitempty" firestore:"authorization"`
	// Information about the service
	Service *common.ServiceData `protobuf:"bytes,7,opt,name=service,proto3" json:"service,omitempty" firestore:"service"`
	// Information about the method
	Method *ActivityLog_Method `protobuf:"bytes,8,opt,name=method,proto3" json:"method,omitempty" firestore:"method"`
	// Request metadata
	RequestMetadata *ActivityLog_RequestMetadata `protobuf:"bytes,13,opt,name=request_metadata,json=requestMetadata,proto3" json:"request_metadata,omitempty" firestore:"requestMetadata"`
	// Request routing
	RequestRouting *ActivityLog_RequestRouting `protobuf:"bytes,14,opt,name=request_routing,json=requestRouting,proto3" json:"request_routing,omitempty" firestore:"requestRouting"`
	// Primary resource for this activity.
	Resource *ActivityLog_Resource `protobuf:"bytes,11,opt,name=resource,proto3" json:"resource,omitempty" firestore:"resource"`
	// Category of the activity log.
	Category ActivityLog_Category `protobuf:"varint,12,opt,name=category,proto3,enum=ntt.audit.v1.ActivityLog_Category" json:"category,omitempty" firestore:"category"`
	// List of query-able labels
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"labels"`
	// List of events attached to this log
	Events []*ActivityLog_Event `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty" firestore:"events"`
}

func (m *ActivityLog) Reset() {
	*m = ActivityLog{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ActivityLog) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ActivityLog) ProtoMessage() {}

func (m *ActivityLog) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ActivityLog) GotenMessage() {}

// Deprecated, Use ActivityLog.ProtoReflect.Descriptor instead.
func (*ActivityLog) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_activity_log_proto_rawDescGZIP(), []int{0}
}

func (m *ActivityLog) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ActivityLog) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ActivityLog) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ActivityLog) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ActivityLog) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ActivityLog) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *ActivityLog) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return uint64(0)
}

func (m *ActivityLog) GetAuthentication() *common.Authentication {
	if m != nil {
		return m.Authentication
	}
	return nil
}

func (m *ActivityLog) GetAuthorization() *common.Authorization {
	if m != nil {
		return m.Authorization
	}
	return nil
}

func (m *ActivityLog) GetService() *common.ServiceData {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *ActivityLog) GetMethod() *ActivityLog_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *ActivityLog) GetRequestMetadata() *ActivityLog_RequestMetadata {
	if m != nil {
		return m.RequestMetadata
	}
	return nil
}

func (m *ActivityLog) GetRequestRouting() *ActivityLog_RequestRouting {
	if m != nil {
		return m.RequestRouting
	}
	return nil
}

func (m *ActivityLog) GetResource() *ActivityLog_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ActivityLog) GetCategory() ActivityLog_Category {
	if m != nil {
		return m.Category
	}
	return ActivityLog_Undefined
}

func (m *ActivityLog) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ActivityLog) GetEvents() []*ActivityLog_Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *ActivityLog) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ActivityLog"))
	}
	m.Name = fv
}

func (m *ActivityLog) SetScope(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Scope", "ActivityLog"))
	}
	m.Scope = fv
}

func (m *ActivityLog) SetRequestId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequestId", "ActivityLog"))
	}
	m.RequestId = fv
}

func (m *ActivityLog) SetAuthentication(fv *common.Authentication) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Authentication", "ActivityLog"))
	}
	m.Authentication = fv
}

func (m *ActivityLog) SetAuthorization(fv *common.Authorization) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Authorization", "ActivityLog"))
	}
	m.Authorization = fv
}

func (m *ActivityLog) SetService(fv *common.ServiceData) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "ActivityLog"))
	}
	m.Service = fv
}

func (m *ActivityLog) SetMethod(fv *ActivityLog_Method) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Method", "ActivityLog"))
	}
	m.Method = fv
}

func (m *ActivityLog) SetRequestMetadata(fv *ActivityLog_RequestMetadata) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequestMetadata", "ActivityLog"))
	}
	m.RequestMetadata = fv
}

func (m *ActivityLog) SetRequestRouting(fv *ActivityLog_RequestRouting) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequestRouting", "ActivityLog"))
	}
	m.RequestRouting = fv
}

func (m *ActivityLog) SetResource(fv *ActivityLog_Resource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Resource", "ActivityLog"))
	}
	m.Resource = fv
}

func (m *ActivityLog) SetCategory(fv ActivityLog_Category) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Category", "ActivityLog"))
	}
	m.Category = fv
}

func (m *ActivityLog) SetLabels(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Labels", "ActivityLog"))
	}
	m.Labels = fv
}

func (m *ActivityLog) SetEvents(fv []*ActivityLog_Event) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Events", "ActivityLog"))
	}
	m.Events = fv
}

// Event associated with activity.
type ActivityLog_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Evt:
	//	*ActivityLog_Event_ClientMessage
	//	*ActivityLog_Event_ServerMessage
	//	*ActivityLog_Event_Exit
	//	*ActivityLog_Event_RegionalServerMessage
	//	*ActivityLog_Event_RegionalExit
	Evt isActivityLog_Event_Evt `protobuf_oneof:"evt"`
}

func (m *ActivityLog_Event) Reset() {
	*m = ActivityLog_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ActivityLog_Event) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ActivityLog_Event) ProtoMessage() {}

func (m *ActivityLog_Event) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ActivityLog_Event) GotenMessage() {}

// Deprecated, Use ActivityLog_Event.ProtoReflect.Descriptor instead.
func (*ActivityLog_Event) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_activity_log_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ActivityLog_Event) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ActivityLog_Event) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ActivityLog_Event) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ActivityLog_Event) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isActivityLog_Event_Evt interface {
	isActivityLog_Event_Evt()
}

type ActivityLog_Event_ClientMessage struct {
	// Client message received event
	ClientMessage *ActivityLog_Event_ClientMsgEvent `protobuf:"bytes,1,opt,name=client_message,json=clientMessage,proto3,oneof" firestore:"clientMessage"`
}
type ActivityLog_Event_ServerMessage struct {
	// Server message sent event
	ServerMessage *ActivityLog_Event_ServerMsgEvent `protobuf:"bytes,2,opt,name=server_message,json=serverMessage,proto3,oneof" firestore:"serverMessage"`
}
type ActivityLog_Event_Exit struct {
	// Request finished event
	Exit *ActivityLog_Event_ExitEvent `protobuf:"bytes,3,opt,name=exit,proto3,oneof" firestore:"exit"`
}
type ActivityLog_Event_RegionalServerMessage struct {
	// Server received response from another server (used for split & merge)
	// which describes PARTIAL result to be sent to the client.
	RegionalServerMessage *ActivityLog_Event_RegionalServerMsgEvent `protobuf:"bytes,4,opt,name=regional_server_message,json=regionalServerMessage,proto3,oneof" firestore:"regionalServerMessage"`
}
type ActivityLog_Event_RegionalExit struct {
	// Server received exit code from another server (used for split & merge).
	// In case it contains error, its likely final exit will contain this too.
	RegionalExit *ActivityLog_Event_RegionalServerMsgEvent `protobuf:"bytes,5,opt,name=regional_exit,json=regionalExit,proto3,oneof" firestore:"regionalExit"`
}

func (*ActivityLog_Event_ClientMessage) isActivityLog_Event_Evt()         {}
func (*ActivityLog_Event_ServerMessage) isActivityLog_Event_Evt()         {}
func (*ActivityLog_Event_Exit) isActivityLog_Event_Evt()                  {}
func (*ActivityLog_Event_RegionalServerMessage) isActivityLog_Event_Evt() {}
func (*ActivityLog_Event_RegionalExit) isActivityLog_Event_Evt()          {}
func (m *ActivityLog_Event) GetEvt() isActivityLog_Event_Evt {
	if m != nil {
		return m.Evt
	}
	return nil
}
func (m *ActivityLog_Event) GetClientMessage() *ActivityLog_Event_ClientMsgEvent {
	if x, ok := m.GetEvt().(*ActivityLog_Event_ClientMessage); ok {
		return x.ClientMessage
	}
	return nil
}
func (m *ActivityLog_Event) GetServerMessage() *ActivityLog_Event_ServerMsgEvent {
	if x, ok := m.GetEvt().(*ActivityLog_Event_ServerMessage); ok {
		return x.ServerMessage
	}
	return nil
}
func (m *ActivityLog_Event) GetExit() *ActivityLog_Event_ExitEvent {
	if x, ok := m.GetEvt().(*ActivityLog_Event_Exit); ok {
		return x.Exit
	}
	return nil
}
func (m *ActivityLog_Event) GetRegionalServerMessage() *ActivityLog_Event_RegionalServerMsgEvent {
	if x, ok := m.GetEvt().(*ActivityLog_Event_RegionalServerMessage); ok {
		return x.RegionalServerMessage
	}
	return nil
}
func (m *ActivityLog_Event) GetRegionalExit() *ActivityLog_Event_RegionalServerMsgEvent {
	if x, ok := m.GetEvt().(*ActivityLog_Event_RegionalExit); ok {
		return x.RegionalExit
	}
	return nil
}
func (m *ActivityLog_Event) SetEvt(ofv isActivityLog_Event_Evt) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isActivityLog_Event_Evt", "ActivityLog_Event"))
	}
	m.Evt = ofv
}
func (m *ActivityLog_Event) SetClientMessage(fv *ActivityLog_Event_ClientMsgEvent) {
	m.SetEvt(&ActivityLog_Event_ClientMessage{ClientMessage: fv})
}
func (m *ActivityLog_Event) SetServerMessage(fv *ActivityLog_Event_ServerMsgEvent) {
	m.SetEvt(&ActivityLog_Event_ServerMessage{ServerMessage: fv})
}
func (m *ActivityLog_Event) SetExit(fv *ActivityLog_Event_ExitEvent) {
	m.SetEvt(&ActivityLog_Event_Exit{Exit: fv})
}
func (m *ActivityLog_Event) SetRegionalServerMessage(fv *ActivityLog_Event_RegionalServerMsgEvent) {
	m.SetEvt(&ActivityLog_Event_RegionalServerMessage{RegionalServerMessage: fv})
}
func (m *ActivityLog_Event) SetRegionalExit(fv *ActivityLog_Event_RegionalServerMsgEvent) {
	m.SetEvt(&ActivityLog_Event_RegionalExit{RegionalExit: fv})
}

// Description of the executed method
type ActivityLog_Method struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type name of a method, for example "UpdateRoleBinding".
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
	// Version in which method was executed.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" firestore:"version"`
}

func (m *ActivityLog_Method) Reset() {
	*m = ActivityLog_Method{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ActivityLog_Method) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ActivityLog_Method) ProtoMessage() {}

func (m *ActivityLog_Method) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ActivityLog_Method) GotenMessage() {}

// Deprecated, Use ActivityLog_Method.ProtoReflect.Descriptor instead.
func (*ActivityLog_Method) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_activity_log_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ActivityLog_Method) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ActivityLog_Method) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ActivityLog_Method) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ActivityLog_Method) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ActivityLog_Method) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ActivityLog_Method) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ActivityLog_Method) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "ActivityLog_Method"))
	}
	m.Type = fv
}

func (m *ActivityLog_Method) SetVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Version", "ActivityLog_Method"))
	}
	m.Version = fv
}

// Additional information about request caller
type ActivityLog_RequestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Source IP from where request came
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty" firestore:"ipAddress"`
	// Agent used by the request caller
	UserAgent string `protobuf:"bytes,2,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty" firestore:"userAgent"`
}

func (m *ActivityLog_RequestMetadata) Reset() {
	*m = ActivityLog_RequestMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ActivityLog_RequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ActivityLog_RequestMetadata) ProtoMessage() {}

func (m *ActivityLog_RequestMetadata) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ActivityLog_RequestMetadata) GotenMessage() {}

// Deprecated, Use ActivityLog_RequestMetadata.ProtoReflect.Descriptor instead.
func (*ActivityLog_RequestMetadata) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_activity_log_proto_rawDescGZIP(), []int{0, 2}
}

func (m *ActivityLog_RequestMetadata) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ActivityLog_RequestMetadata) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ActivityLog_RequestMetadata) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ActivityLog_RequestMetadata) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ActivityLog_RequestMetadata) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *ActivityLog_RequestMetadata) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *ActivityLog_RequestMetadata) SetIpAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpAddress", "ActivityLog_RequestMetadata"))
	}
	m.IpAddress = fv
}

func (m *ActivityLog_RequestMetadata) SetUserAgent(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UserAgent", "ActivityLog_RequestMetadata"))
	}
	m.UserAgent = fv
}

// Additional information regarding request routing. Request can be:
// * Received and executed locally
// * Received and redirected to another region
// * Received, then split across multiple-regions. Responses are merged before
// sending back to client
type ActivityLog_RequestRouting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// ID of a region which originally received request, if redirection or split
	// & merge was required
	ViaRegion string `protobuf:"bytes,1,opt,name=via_region,json=viaRegion,proto3" json:"via_region,omitempty" firestore:"viaRegion"`
	// IDs of regions to which request was actually addressed.
	DestRegions []string `protobuf:"bytes,2,rep,name=dest_regions,json=destRegions,proto3" json:"dest_regions,omitempty" firestore:"destRegions"`
}

func (m *ActivityLog_RequestRouting) Reset() {
	*m = ActivityLog_RequestRouting{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ActivityLog_RequestRouting) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ActivityLog_RequestRouting) ProtoMessage() {}

func (m *ActivityLog_RequestRouting) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ActivityLog_RequestRouting) GotenMessage() {}

// Deprecated, Use ActivityLog_RequestRouting.ProtoReflect.Descriptor instead.
func (*ActivityLog_RequestRouting) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_activity_log_proto_rawDescGZIP(), []int{0, 3}
}

func (m *ActivityLog_RequestRouting) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ActivityLog_RequestRouting) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ActivityLog_RequestRouting) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ActivityLog_RequestRouting) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ActivityLog_RequestRouting) GetViaRegion() string {
	if m != nil {
		return m.ViaRegion
	}
	return ""
}

func (m *ActivityLog_RequestRouting) GetDestRegions() []string {
	if m != nil {
		return m.DestRegions
	}
	return nil
}

func (m *ActivityLog_RequestRouting) SetViaRegion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ViaRegion", "ActivityLog_RequestRouting"))
	}
	m.ViaRegion = fv
}

func (m *ActivityLog_RequestRouting) SetDestRegions(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DestRegions", "ActivityLog_RequestRouting"))
	}
	m.DestRegions = fv
}

// Description of the main resource activity refers to.
// For standard, goten-generated actions it's same as resource
// assigned to the the method. For custom actions, in some cases, developer
// may pick however different resource (it is customizable in proto audit
// spec).
type ActivityLog_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// full name of the resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// difference contains update information of the resource.
	// Left empty if the request described by this activity log did not
	// update the resource.
	Difference *ActivityLog_Resource_Difference `protobuf:"bytes,2,opt,name=difference,proto3" json:"difference,omitempty" firestore:"difference"`
}

func (m *ActivityLog_Resource) Reset() {
	*m = ActivityLog_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ActivityLog_Resource) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ActivityLog_Resource) ProtoMessage() {}

func (m *ActivityLog_Resource) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ActivityLog_Resource) GotenMessage() {}

// Deprecated, Use ActivityLog_Resource.ProtoReflect.Descriptor instead.
func (*ActivityLog_Resource) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_activity_log_proto_rawDescGZIP(), []int{0, 4}
}

func (m *ActivityLog_Resource) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ActivityLog_Resource) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ActivityLog_Resource) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ActivityLog_Resource) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ActivityLog_Resource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ActivityLog_Resource) GetDifference() *ActivityLog_Resource_Difference {
	if m != nil {
		return m.Difference
	}
	return nil
}

func (m *ActivityLog_Resource) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ActivityLog_Resource"))
	}
	m.Name = fv
}

func (m *ActivityLog_Resource) SetDifference(fv *ActivityLog_Resource_Difference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Difference", "ActivityLog_Resource"))
	}
	m.Difference = fv
}

// Describes client message event
type ActivityLog_Event_ClientMsgEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Message contents
	Data *anypb.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" firestore:"data"`
	// Time of a message
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty" firestore:"time"`
}

func (m *ActivityLog_Event_ClientMsgEvent) Reset() {
	*m = ActivityLog_Event_ClientMsgEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ActivityLog_Event_ClientMsgEvent) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ActivityLog_Event_ClientMsgEvent) ProtoMessage() {}

func (m *ActivityLog_Event_ClientMsgEvent) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ActivityLog_Event_ClientMsgEvent) GotenMessage() {}

// Deprecated, Use ActivityLog_Event_ClientMsgEvent.ProtoReflect.Descriptor instead.
func (*ActivityLog_Event_ClientMsgEvent) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_activity_log_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *ActivityLog_Event_ClientMsgEvent) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ActivityLog_Event_ClientMsgEvent) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ActivityLog_Event_ClientMsgEvent) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ActivityLog_Event_ClientMsgEvent) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ActivityLog_Event_ClientMsgEvent) GetData() *anypb.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ActivityLog_Event_ClientMsgEvent) GetTime() *timestamppb.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ActivityLog_Event_ClientMsgEvent) SetData(fv *anypb.Any) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Data", "ActivityLog_Event_ClientMsgEvent"))
	}
	m.Data = fv
}

func (m *ActivityLog_Event_ClientMsgEvent) SetTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Time", "ActivityLog_Event_ClientMsgEvent"))
	}
	m.Time = fv
}

// Describes message received from server in specific region.
// This type is used only for requests, which receiving server decided to
// split across many regions. Each regional server sends own response and
// executing server is responsible for merging all partial results into one.
// This type does not show what was sent to the client.
// TODO: No use case for now, just placeholder, no server implementation
type ActivityLog_Event_RegionalServerMsgEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Message contents
	Data *anypb.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" firestore:"data"`
	// Time of a message
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty" firestore:"time"`
	// Region ID where message comes from.
	RegionId string `protobuf:"bytes,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
}

func (m *ActivityLog_Event_RegionalServerMsgEvent) Reset() {
	*m = ActivityLog_Event_RegionalServerMsgEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ActivityLog_Event_RegionalServerMsgEvent) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ActivityLog_Event_RegionalServerMsgEvent) ProtoMessage() {}

func (m *ActivityLog_Event_RegionalServerMsgEvent) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ActivityLog_Event_RegionalServerMsgEvent) GotenMessage() {}

// Deprecated, Use ActivityLog_Event_RegionalServerMsgEvent.ProtoReflect.Descriptor instead.
func (*ActivityLog_Event_RegionalServerMsgEvent) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_activity_log_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *ActivityLog_Event_RegionalServerMsgEvent) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ActivityLog_Event_RegionalServerMsgEvent) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ActivityLog_Event_RegionalServerMsgEvent) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ActivityLog_Event_RegionalServerMsgEvent) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ActivityLog_Event_RegionalServerMsgEvent) GetData() *anypb.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ActivityLog_Event_RegionalServerMsgEvent) GetTime() *timestamppb.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ActivityLog_Event_RegionalServerMsgEvent) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *ActivityLog_Event_RegionalServerMsgEvent) SetData(fv *anypb.Any) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Data", "ActivityLog_Event_RegionalServerMsgEvent"))
	}
	m.Data = fv
}

func (m *ActivityLog_Event_RegionalServerMsgEvent) SetTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Time", "ActivityLog_Event_RegionalServerMsgEvent"))
	}
	m.Time = fv
}

func (m *ActivityLog_Event_RegionalServerMsgEvent) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "ActivityLog_Event_RegionalServerMsgEvent"))
	}
	m.RegionId = fv
}

// Describes server message event
type ActivityLog_Event_ServerMsgEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Message contents
	Data *anypb.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" firestore:"data"`
	// Time of a message
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty" firestore:"time"`
}

func (m *ActivityLog_Event_ServerMsgEvent) Reset() {
	*m = ActivityLog_Event_ServerMsgEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ActivityLog_Event_ServerMsgEvent) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ActivityLog_Event_ServerMsgEvent) ProtoMessage() {}

func (m *ActivityLog_Event_ServerMsgEvent) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ActivityLog_Event_ServerMsgEvent) GotenMessage() {}

// Deprecated, Use ActivityLog_Event_ServerMsgEvent.ProtoReflect.Descriptor instead.
func (*ActivityLog_Event_ServerMsgEvent) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_activity_log_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (m *ActivityLog_Event_ServerMsgEvent) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ActivityLog_Event_ServerMsgEvent) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ActivityLog_Event_ServerMsgEvent) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ActivityLog_Event_ServerMsgEvent) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ActivityLog_Event_ServerMsgEvent) GetData() *anypb.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ActivityLog_Event_ServerMsgEvent) GetTime() *timestamppb.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ActivityLog_Event_ServerMsgEvent) SetData(fv *anypb.Any) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Data", "ActivityLog_Event_ServerMsgEvent"))
	}
	m.Data = fv
}

func (m *ActivityLog_Event_ServerMsgEvent) SetTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Time", "ActivityLog_Event_ServerMsgEvent"))
	}
	m.Time = fv
}

// Describes exit code received from server in specific region.
// This type is used only for requests, which receiving server decided to
// split across many regions. Each regional server sends own response and
// executing server is responsible for merging all partial results into one.
// IT does not contain status actually sent to the client.
// TODO: No use case for now, just placeholder, no server implementation
type ActivityLog_Event_RegionalExitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Final status of a request for given region
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
	// Time when request finished
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty" firestore:"time"`
	// Region ID where status comes from
	RegionId string `protobuf:"bytes,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
}

func (m *ActivityLog_Event_RegionalExitEvent) Reset() {
	*m = ActivityLog_Event_RegionalExitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ActivityLog_Event_RegionalExitEvent) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ActivityLog_Event_RegionalExitEvent) ProtoMessage() {}

func (m *ActivityLog_Event_RegionalExitEvent) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ActivityLog_Event_RegionalExitEvent) GotenMessage() {}

// Deprecated, Use ActivityLog_Event_RegionalExitEvent.ProtoReflect.Descriptor instead.
func (*ActivityLog_Event_RegionalExitEvent) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_activity_log_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (m *ActivityLog_Event_RegionalExitEvent) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ActivityLog_Event_RegionalExitEvent) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ActivityLog_Event_RegionalExitEvent) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ActivityLog_Event_RegionalExitEvent) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ActivityLog_Event_RegionalExitEvent) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ActivityLog_Event_RegionalExitEvent) GetTime() *timestamppb.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ActivityLog_Event_RegionalExitEvent) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *ActivityLog_Event_RegionalExitEvent) SetStatus(fv *rpc.Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "ActivityLog_Event_RegionalExitEvent"))
	}
	m.Status = fv
}

func (m *ActivityLog_Event_RegionalExitEvent) SetTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Time", "ActivityLog_Event_RegionalExitEvent"))
	}
	m.Time = fv
}

func (m *ActivityLog_Event_RegionalExitEvent) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "ActivityLog_Event_RegionalExitEvent"))
	}
	m.RegionId = fv
}

// Describes exit event (request finished)
type ActivityLog_Event_ExitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Final status of a request
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
	// Time when request finished
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty" firestore:"time"`
}

func (m *ActivityLog_Event_ExitEvent) Reset() {
	*m = ActivityLog_Event_ExitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ActivityLog_Event_ExitEvent) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ActivityLog_Event_ExitEvent) ProtoMessage() {}

func (m *ActivityLog_Event_ExitEvent) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ActivityLog_Event_ExitEvent) GotenMessage() {}

// Deprecated, Use ActivityLog_Event_ExitEvent.ProtoReflect.Descriptor instead.
func (*ActivityLog_Event_ExitEvent) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_activity_log_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (m *ActivityLog_Event_ExitEvent) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ActivityLog_Event_ExitEvent) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ActivityLog_Event_ExitEvent) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ActivityLog_Event_ExitEvent) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ActivityLog_Event_ExitEvent) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ActivityLog_Event_ExitEvent) GetTime() *timestamppb.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ActivityLog_Event_ExitEvent) SetStatus(fv *rpc.Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "ActivityLog_Event_ExitEvent"))
	}
	m.Status = fv
}

func (m *ActivityLog_Event_ExitEvent) SetTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Time", "ActivityLog_Event_ExitEvent"))
	}
	m.Time = fv
}

// Describes changes (in database) executed on the resource.
type ActivityLog_Resource_Difference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// List of updated field paths (which are either marked as a state or
	// spec fields). Proper, actual values are stored in "before" and "after"
	// fields. Populated only for updating requests.
	Fields *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty" firestore:"fields"`
	// State of the resource before update.
	// Note that "before" object contains only values of fields present
	// in "fields". It does not contain whole resource as it was before
	// the update.
	Before *anypb.Any `protobuf:"bytes,2,opt,name=before,proto3" json:"before,omitempty" firestore:"before"`
	// State of the resource after update.
	// Note that "after" object contains only values of fields present
	// in "fields". It does not contain whole resource as it is after
	// the update.
	After *anypb.Any `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty" firestore:"after"`
}

func (m *ActivityLog_Resource_Difference) Reset() {
	*m = ActivityLog_Resource_Difference{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ActivityLog_Resource_Difference) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ActivityLog_Resource_Difference) ProtoMessage() {}

func (m *ActivityLog_Resource_Difference) ProtoReflect() preflect.Message {
	mi := &edgelq_audit_proto_v1_activity_log_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ActivityLog_Resource_Difference) GotenMessage() {}

// Deprecated, Use ActivityLog_Resource_Difference.ProtoReflect.Descriptor instead.
func (*ActivityLog_Resource_Difference) Descriptor() ([]byte, []int) {
	return edgelq_audit_proto_v1_activity_log_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (m *ActivityLog_Resource_Difference) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ActivityLog_Resource_Difference) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ActivityLog_Resource_Difference) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ActivityLog_Resource_Difference) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ActivityLog_Resource_Difference) GetFields() *fieldmaskpb.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ActivityLog_Resource_Difference) GetBefore() *anypb.Any {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *ActivityLog_Resource_Difference) GetAfter() *anypb.Any {
	if m != nil {
		return m.After
	}
	return nil
}

func (m *ActivityLog_Resource_Difference) SetFields(fv *fieldmaskpb.FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Fields", "ActivityLog_Resource_Difference"))
	}
	m.Fields = fv
}

func (m *ActivityLog_Resource_Difference) SetBefore(fv *anypb.Any) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Before", "ActivityLog_Resource_Difference"))
	}
	m.Before = fv
}

func (m *ActivityLog_Resource_Difference) SetAfter(fv *anypb.Any) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "After", "ActivityLog_Resource_Difference"))
	}
	m.After = fv
}

var edgelq_audit_proto_v1_activity_log_proto preflect.FileDescriptor

var edgelq_audit_proto_v1_activity_log_proto_rawDesc = []byte{
	0x0a, 0x28, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61,
	0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x16, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4c, 0x6f, 0x67, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xb2, 0xda, 0x21, 0x0f, 0x0a, 0x0d, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x54, 0x0a, 0x10, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x51, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xae, 0x08, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57,
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f,
	0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x65, 0x78, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x69, 0x74, 0x12, 0x70, 0x0a, 0x17, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x0d, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x1a, 0x6a, 0x0a, 0x0e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x8f, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x6a, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x1a, 0x89, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x45, 0x78, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a,
	0x64, 0x0a, 0x09, 0x45, 0x78, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x65, 0x76, 0x74, 0x1a, 0x36, 0x0a, 0x06,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x4f, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x52, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x61, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x8a, 0x02, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x64,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x9a, 0x01, 0x0a, 0x0a, 0x44, 0x69,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x06,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xbd, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x63,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x65, 0x74,
	0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x10,
	0x0a, 0x3a, 0xc4, 0x02, 0xea, 0x41, 0xb8, 0x01, 0x0a, 0x1c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x7d, 0x12, 0x38, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67,
	0x73, 0x2f, 0x7b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x7d,
	0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67,
	0x73, 0x2f, 0x7b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x7d,
	0x92, 0xd9, 0x21, 0x83, 0x01, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67,
	0x73, 0x1a, 0x16, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x1b, 0x69, 0x61, 0x6d, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2a, 0x10,
	0x5b, 0x5c, 0x77, 0x2e, 0x2f, 0x2d, 0x3d, 0x2b, 0x5d, 0x7b, 0x31, 0x2c, 0x31, 0x32, 0x38, 0x7d,
	0x38, 0x05, 0x48, 0x01, 0x52, 0x02, 0x08, 0x01, 0x42, 0x76, 0xe8, 0xde, 0x21, 0x01, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62,
	0x2e, 0x76, 0x31, 0x42, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6c, 0x6f, 0x67, 0x3b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_audit_proto_v1_activity_log_proto_rawDescOnce sync.Once
	edgelq_audit_proto_v1_activity_log_proto_rawDescData = edgelq_audit_proto_v1_activity_log_proto_rawDesc
)

func edgelq_audit_proto_v1_activity_log_proto_rawDescGZIP() []byte {
	edgelq_audit_proto_v1_activity_log_proto_rawDescOnce.Do(func() {
		edgelq_audit_proto_v1_activity_log_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_audit_proto_v1_activity_log_proto_rawDescData)
	})
	return edgelq_audit_proto_v1_activity_log_proto_rawDescData
}

var edgelq_audit_proto_v1_activity_log_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_audit_proto_v1_activity_log_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var edgelq_audit_proto_v1_activity_log_proto_goTypes = []interface{}{
	(ActivityLog_Category)(0),                        // 0: ntt.audit.v1.ActivityLog_Category
	(*ActivityLog)(nil),                              // 1: ntt.audit.v1.ActivityLog
	(*ActivityLog_Event)(nil),                        // 2: ntt.audit.v1.ActivityLog.Event
	(*ActivityLog_Method)(nil),                       // 3: ntt.audit.v1.ActivityLog.Method
	(*ActivityLog_RequestMetadata)(nil),              // 4: ntt.audit.v1.ActivityLog.RequestMetadata
	(*ActivityLog_RequestRouting)(nil),               // 5: ntt.audit.v1.ActivityLog.RequestRouting
	(*ActivityLog_Resource)(nil),                     // 6: ntt.audit.v1.ActivityLog.Resource
	nil,                                              // 7: ntt.audit.v1.ActivityLog.LabelsEntry
	(*ActivityLog_Event_ClientMsgEvent)(nil),         // 8: ntt.audit.v1.ActivityLog.Event.ClientMsgEvent
	(*ActivityLog_Event_RegionalServerMsgEvent)(nil), // 9: ntt.audit.v1.ActivityLog.Event.RegionalServerMsgEvent
	(*ActivityLog_Event_ServerMsgEvent)(nil),         // 10: ntt.audit.v1.ActivityLog.Event.ServerMsgEvent
	(*ActivityLog_Event_RegionalExitEvent)(nil),      // 11: ntt.audit.v1.ActivityLog.Event.RegionalExitEvent
	(*ActivityLog_Event_ExitEvent)(nil),              // 12: ntt.audit.v1.ActivityLog.Event.ExitEvent
	(*ActivityLog_Resource_Difference)(nil),          // 13: ntt.audit.v1.ActivityLog.Resource.Difference
	(*common.Authentication)(nil),                    // 14: ntt.audit.v1.Authentication
	(*common.Authorization)(nil),                     // 15: ntt.audit.v1.Authorization
	(*common.ServiceData)(nil),                       // 16: ntt.audit.v1.ServiceData
	(*anypb.Any)(nil),                                // 17: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),                    // 18: google.protobuf.Timestamp
	(*rpc.Status)(nil),                               // 19: ntt.rpc.Status
	(*fieldmaskpb.FieldMask)(nil),                    // 20: google.protobuf.FieldMask
}
var edgelq_audit_proto_v1_activity_log_proto_depIdxs = []int32{
	14, // 0: ntt.audit.v1.ActivityLog.authentication:type_name -> ntt.audit.v1.Authentication
	15, // 1: ntt.audit.v1.ActivityLog.authorization:type_name -> ntt.audit.v1.Authorization
	16, // 2: ntt.audit.v1.ActivityLog.service:type_name -> ntt.audit.v1.ServiceData
	3,  // 3: ntt.audit.v1.ActivityLog.method:type_name -> ntt.audit.v1.ActivityLog.Method
	4,  // 4: ntt.audit.v1.ActivityLog.request_metadata:type_name -> ntt.audit.v1.ActivityLog.RequestMetadata
	5,  // 5: ntt.audit.v1.ActivityLog.request_routing:type_name -> ntt.audit.v1.ActivityLog.RequestRouting
	6,  // 6: ntt.audit.v1.ActivityLog.resource:type_name -> ntt.audit.v1.ActivityLog.Resource
	0,  // 7: ntt.audit.v1.ActivityLog.category:type_name -> ntt.audit.v1.ActivityLog_Category
	7,  // 8: ntt.audit.v1.ActivityLog.labels:type_name -> ntt.audit.v1.ActivityLog.LabelsEntry
	2,  // 9: ntt.audit.v1.ActivityLog.events:type_name -> ntt.audit.v1.ActivityLog.Event
	8,  // 10: ntt.audit.v1.ActivityLog.Event.client_message:type_name -> ntt.audit.v1.ActivityLog.Event.ClientMsgEvent
	10, // 11: ntt.audit.v1.ActivityLog.Event.server_message:type_name -> ntt.audit.v1.ActivityLog.Event.ServerMsgEvent
	12, // 12: ntt.audit.v1.ActivityLog.Event.exit:type_name -> ntt.audit.v1.ActivityLog.Event.ExitEvent
	9,  // 13: ntt.audit.v1.ActivityLog.Event.regional_server_message:type_name -> ntt.audit.v1.ActivityLog.Event.RegionalServerMsgEvent
	9,  // 14: ntt.audit.v1.ActivityLog.Event.regional_exit:type_name -> ntt.audit.v1.ActivityLog.Event.RegionalServerMsgEvent
	13, // 15: ntt.audit.v1.ActivityLog.Resource.difference:type_name -> ntt.audit.v1.ActivityLog.Resource.Difference
	17, // 16: ntt.audit.v1.ActivityLog.Event.ClientMsgEvent.data:type_name -> google.protobuf.Any
	18, // 17: ntt.audit.v1.ActivityLog.Event.ClientMsgEvent.time:type_name -> google.protobuf.Timestamp
	17, // 18: ntt.audit.v1.ActivityLog.Event.RegionalServerMsgEvent.data:type_name -> google.protobuf.Any
	18, // 19: ntt.audit.v1.ActivityLog.Event.RegionalServerMsgEvent.time:type_name -> google.protobuf.Timestamp
	17, // 20: ntt.audit.v1.ActivityLog.Event.ServerMsgEvent.data:type_name -> google.protobuf.Any
	18, // 21: ntt.audit.v1.ActivityLog.Event.ServerMsgEvent.time:type_name -> google.protobuf.Timestamp
	19, // 22: ntt.audit.v1.ActivityLog.Event.RegionalExitEvent.status:type_name -> ntt.rpc.Status
	18, // 23: ntt.audit.v1.ActivityLog.Event.RegionalExitEvent.time:type_name -> google.protobuf.Timestamp
	19, // 24: ntt.audit.v1.ActivityLog.Event.ExitEvent.status:type_name -> ntt.rpc.Status
	18, // 25: ntt.audit.v1.ActivityLog.Event.ExitEvent.time:type_name -> google.protobuf.Timestamp
	20, // 26: ntt.audit.v1.ActivityLog.Resource.Difference.fields:type_name -> google.protobuf.FieldMask
	17, // 27: ntt.audit.v1.ActivityLog.Resource.Difference.before:type_name -> google.protobuf.Any
	17, // 28: ntt.audit.v1.ActivityLog.Resource.Difference.after:type_name -> google.protobuf.Any
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { edgelq_audit_proto_v1_activity_log_proto_init() }
func edgelq_audit_proto_v1_activity_log_proto_init() {
	if edgelq_audit_proto_v1_activity_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_audit_proto_v1_activity_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_activity_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityLog_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_activity_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityLog_Method); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_activity_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityLog_RequestMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_activity_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityLog_RequestRouting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_activity_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityLog_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_activity_log_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityLog_Event_ClientMsgEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_activity_log_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityLog_Event_RegionalServerMsgEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_activity_log_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityLog_Event_ServerMsgEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_activity_log_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityLog_Event_RegionalExitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_activity_log_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityLog_Event_ExitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_audit_proto_v1_activity_log_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityLog_Resource_Difference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_audit_proto_v1_activity_log_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ActivityLog_Event_ClientMessage)(nil),
		(*ActivityLog_Event_ServerMessage)(nil),
		(*ActivityLog_Event_Exit)(nil),
		(*ActivityLog_Event_RegionalServerMessage)(nil),
		(*ActivityLog_Event_RegionalExit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_audit_proto_v1_activity_log_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_audit_proto_v1_activity_log_proto_goTypes,
		DependencyIndexes: edgelq_audit_proto_v1_activity_log_proto_depIdxs,
		EnumInfos:         edgelq_audit_proto_v1_activity_log_proto_enumTypes,
		MessageInfos:      edgelq_audit_proto_v1_activity_log_proto_msgTypes,
	}.Build()
	edgelq_audit_proto_v1_activity_log_proto = out.File
	edgelq_audit_proto_v1_activity_log_proto_rawDesc = nil
	edgelq_audit_proto_v1_activity_log_proto_goTypes = nil
	edgelq_audit_proto_v1_activity_log_proto_depIdxs = nil
}
