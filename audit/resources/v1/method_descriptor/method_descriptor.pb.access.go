// Code generated by protoc-gen-goten-resource
// Resource: MethodDescriptor
// DO NOT EDIT!!!

package method_descriptor

import (
	"context"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	"github.com/cloudwan/goten-sdk/types/watch_type"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/audit/resources/v1/common"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(context.Context)

	_ = codes.Internal
	_ = status.Status{}

	_ = watch_type.WatchType_STATEFUL
	_ = new(gotenobject.FieldPath)
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &common.Authentication{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

type MethodDescriptorAccess interface {
	GetMethodDescriptor(context.Context, *GetQuery) (*MethodDescriptor, error)
	BatchGetMethodDescriptors(context.Context, []*Reference, ...gotenresource.BatchGetOption) error
	QueryMethodDescriptors(context.Context, *ListQuery) (*QueryResultSnapshot, error)
	WatchMethodDescriptor(context.Context, *GetQuery, func(*MethodDescriptorChange) error) error
	WatchMethodDescriptors(context.Context, *WatchQuery, func(*QueryResultChange) error) error
	SaveMethodDescriptor(context.Context, *MethodDescriptor, ...gotenresource.SaveOption) error
	DeleteMethodDescriptor(context.Context, *Reference, ...gotenresource.DeleteOption) error
}

type anyCastAccess struct {
	MethodDescriptorAccess
}

func AsAnyCastAccess(access MethodDescriptorAccess) gotenresource.Access {
	return &anyCastAccess{MethodDescriptorAccess: access}
}

func (a *anyCastAccess) Get(ctx context.Context, q gotenresource.GetQuery) (gotenresource.Resource, error) {
	if asMethodDescriptorQuery, ok := q.(*GetQuery); ok {
		return a.GetMethodDescriptor(ctx, asMethodDescriptorQuery)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected MethodDescriptor, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Query(ctx context.Context, q gotenresource.ListQuery) (gotenresource.QueryResultSnapshot, error) {
	if asMethodDescriptorQuery, ok := q.(*ListQuery); ok {
		return a.QueryMethodDescriptors(ctx, asMethodDescriptorQuery)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected MethodDescriptor, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Search(ctx context.Context, q gotenresource.SearchQuery) (gotenresource.QueryResultSnapshot, error) {
	return nil, status.Errorf(codes.Internal, "Search is not available for MethodDescriptor")
}

func (a *anyCastAccess) Watch(ctx context.Context, q gotenresource.GetQuery, cb func(ch gotenresource.ResourceChange) error) error {
	if asMethodDescriptorQuery, ok := q.(*GetQuery); ok {
		return a.WatchMethodDescriptor(ctx, asMethodDescriptorQuery, func(change *MethodDescriptorChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected MethodDescriptor, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) WatchQuery(ctx context.Context, q gotenresource.WatchQuery, cb func(ch gotenresource.QueryResultChange) error) error {
	if asMethodDescriptorQuery, ok := q.(*WatchQuery); ok {
		return a.WatchMethodDescriptors(ctx, asMethodDescriptorQuery, func(change *QueryResultChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected MethodDescriptor, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Save(ctx context.Context, res gotenresource.Resource, opts ...gotenresource.SaveOption) error {
	if asMethodDescriptorRes, ok := res.(*MethodDescriptor); ok {
		return a.SaveMethodDescriptor(ctx, asMethodDescriptorRes, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected MethodDescriptor, got: %s",
		res.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Delete(ctx context.Context, ref gotenresource.Reference, opts ...gotenresource.DeleteOption) error {
	if asMethodDescriptorRef, ok := ref.(*Reference); ok {
		return a.DeleteMethodDescriptor(ctx, asMethodDescriptorRef, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected MethodDescriptor, got: %s",
		ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) BatchGet(ctx context.Context, toGet []gotenresource.Reference, opts ...gotenresource.BatchGetOption) error {
	methodDescriptorRefs := make([]*Reference, 0, len(toGet))
	for _, ref := range toGet {
		if asMethodDescriptorRef, ok := ref.(*Reference); !ok {
			return status.Errorf(codes.Internal,
				"Unrecognized descriptor, expected MethodDescriptor, got: %s",
				ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
		} else {
			methodDescriptorRefs = append(methodDescriptorRefs, asMethodDescriptorRef)
		}
	}
	return a.BatchGetMethodDescriptors(ctx, methodDescriptorRefs, opts...)
}

func (a *anyCastAccess) GetResourceDescriptors() []gotenresource.Descriptor {
	return []gotenresource.Descriptor{
		GetDescriptor(),
	}
}
