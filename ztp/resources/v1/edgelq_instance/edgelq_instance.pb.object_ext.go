// Code generated by protoc-gen-goten-object
// File: edgelq/ztp/proto/v1/edgelq_instance.proto
// DO NOT EDIT!!!

package edgelq_instance

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/ztp/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &meta.Meta{}
)

func (o *EdgelqInstance) GotenObjectExt() {}

func (o *EdgelqInstance) MakeFullFieldMask() *EdgelqInstance_FieldMask {
	return FullEdgelqInstance_FieldMask()
}

func (o *EdgelqInstance) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullEdgelqInstance_FieldMask()
}

func (o *EdgelqInstance) MakeDiffFieldMask(other *EdgelqInstance) *EdgelqInstance_FieldMask {
	if o == nil && other == nil {
		return &EdgelqInstance_FieldMask{}
	}
	if o == nil || other == nil {
		return FullEdgelqInstance_FieldMask()
	}

	res := &EdgelqInstance_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &EdgelqInstance_FieldTerminalPath{selector: EdgelqInstance_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &EdgelqInstance_FieldTerminalPath{selector: EdgelqInstance_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &EdgelqInstance_FieldSubPath{selector: EdgelqInstance_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &EdgelqInstance_FieldTerminalPath{selector: EdgelqInstance_FieldPathSelectorDisplayName})
	}
	if o.GetControllerDomain() != other.GetControllerDomain() {
		res.Paths = append(res.Paths, &EdgelqInstance_FieldTerminalPath{selector: EdgelqInstance_FieldPathSelectorControllerDomain})
	}

	if len(o.GetEndpoints()) == len(other.GetEndpoints()) {
		for i, lValue := range o.GetEndpoints() {
			rValue := other.GetEndpoints()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &EdgelqInstance_FieldTerminalPath{selector: EdgelqInstance_FieldPathSelectorEndpoints})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &EdgelqInstance_FieldTerminalPath{selector: EdgelqInstance_FieldPathSelectorEndpoints})
	}
	return res
}

func (o *EdgelqInstance) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*EdgelqInstance))
}

func (o *EdgelqInstance) Clone() *EdgelqInstance {
	if o == nil {
		return nil
	}
	result := &EdgelqInstance{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.DisplayName = o.DisplayName
	result.ControllerDomain = o.ControllerDomain
	result.Endpoints = map[string]string{}
	for key, sourceValue := range o.Endpoints {
		result.Endpoints[key] = sourceValue
	}
	return result
}

func (o *EdgelqInstance) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *EdgelqInstance) Merge(source *EdgelqInstance) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.DisplayName = source.GetDisplayName()
	o.ControllerDomain = source.GetControllerDomain()
	if source.GetEndpoints() != nil {
		if o.Endpoints == nil {
			o.Endpoints = make(map[string]string, len(source.GetEndpoints()))
		}
		for key, sourceValue := range source.GetEndpoints() {
			o.Endpoints[key] = sourceValue
		}
	}
}

func (o *EdgelqInstance) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*EdgelqInstance))
}
