// Code generated by protoc-gen-goten-resource
// Resource: EdgelqInstance
// DO NOT EDIT!!!

package edgelq_instance

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/ztp/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &meta.Meta{}
)

type EdgelqInstanceList []*EdgelqInstance

func (l EdgelqInstanceList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*EdgelqInstance))
}

func (l EdgelqInstanceList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(EdgelqInstanceList)...)
}

func (l EdgelqInstanceList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l EdgelqInstanceList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l EdgelqInstanceList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*EdgelqInstance)
}

func (l EdgelqInstanceList) Length() int {
	return len(l)
}

type EdgelqInstanceChangeList []*EdgelqInstanceChange

func (l EdgelqInstanceChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*EdgelqInstanceChange))
}

func (l EdgelqInstanceChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(EdgelqInstanceChangeList)...)
}

func (l EdgelqInstanceChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l EdgelqInstanceChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l EdgelqInstanceChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*EdgelqInstanceChange)
}

func (l EdgelqInstanceChangeList) Length() int {
	return len(l)
}

type EdgelqInstanceNameList []*Name

func (l EdgelqInstanceNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l EdgelqInstanceNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(EdgelqInstanceNameList)...)
}

func (l EdgelqInstanceNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l EdgelqInstanceNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l EdgelqInstanceNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l EdgelqInstanceNameList) Length() int {
	return len(l)
}

type EdgelqInstanceReferenceList []*Reference

func (l EdgelqInstanceReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l EdgelqInstanceReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(EdgelqInstanceReferenceList)...)
}

func (l EdgelqInstanceReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l EdgelqInstanceReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l EdgelqInstanceReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l EdgelqInstanceReferenceList) Length() int {
	return len(l)
}

type EdgelqInstanceParentNameList []*ParentName

func (l EdgelqInstanceParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l EdgelqInstanceParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(EdgelqInstanceParentNameList)...)
}

func (l EdgelqInstanceParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l EdgelqInstanceParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l EdgelqInstanceParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l EdgelqInstanceParentNameList) Length() int {
	return len(l)
}

type EdgelqInstanceParentReferenceList []*ParentReference

func (l EdgelqInstanceParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l EdgelqInstanceParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(EdgelqInstanceParentReferenceList)...)
}

func (l EdgelqInstanceParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l EdgelqInstanceParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l EdgelqInstanceParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l EdgelqInstanceParentReferenceList) Length() int {
	return len(l)
}

type EdgelqInstanceMap map[Name]*EdgelqInstance

func (m EdgelqInstanceMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m EdgelqInstanceMap) Set(res gotenresource.Resource) {
	tRes := res.(*EdgelqInstance)
	m[*tRes.Name] = tRes
}

func (m EdgelqInstanceMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m EdgelqInstanceMap) Length() int {
	return len(m)
}

func (m EdgelqInstanceMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type EdgelqInstanceChangeMap map[Name]*EdgelqInstanceChange

func (m EdgelqInstanceChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m EdgelqInstanceChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*EdgelqInstanceChange)
	m[*tChange.GetEdgelqInstanceName()] = tChange
}

func (m EdgelqInstanceChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m EdgelqInstanceChangeMap) Length() int {
	return len(m)
}

func (m EdgelqInstanceChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
