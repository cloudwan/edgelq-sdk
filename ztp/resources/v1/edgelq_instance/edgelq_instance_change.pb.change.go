// Code generated by protoc-gen-goten-resource
// Resource change: EdgelqInstanceChange
// DO NOT EDIT!!!

package edgelq_instance

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/ztp/resources/v1/project"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &fieldmaskpb.FieldMask{}
)

func (c *EdgelqInstanceChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*EdgelqInstanceChange_Added_)
	return ok
}

func (c *EdgelqInstanceChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*EdgelqInstanceChange_Modified_)
	return ok
}

func (c *EdgelqInstanceChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*EdgelqInstanceChange_Current_)
	return ok
}

func (c *EdgelqInstanceChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*EdgelqInstanceChange_Removed_)
	return ok
}

func (c *EdgelqInstanceChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *EdgelqInstanceChange_Added_:
		return cType.Added.ViewIndex
	case *EdgelqInstanceChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *EdgelqInstanceChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *EdgelqInstanceChange_Removed_:
		return cType.Removed.ViewIndex
	case *EdgelqInstanceChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *EdgelqInstanceChange) GetEdgelqInstance() *EdgelqInstance {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *EdgelqInstanceChange_Added_:
		return cType.Added.EdgelqInstance
	case *EdgelqInstanceChange_Modified_:
		return cType.Modified.EdgelqInstance
	case *EdgelqInstanceChange_Current_:
		return cType.Current.EdgelqInstance
	case *EdgelqInstanceChange_Removed_:
		return nil
	}
	return nil
}

func (c *EdgelqInstanceChange) GetRawResource() gotenresource.Resource {
	return c.GetEdgelqInstance()
}

func (c *EdgelqInstanceChange) GetEdgelqInstanceName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *EdgelqInstanceChange_Added_:
		return cType.Added.EdgelqInstance.GetName()
	case *EdgelqInstanceChange_Modified_:
		return cType.Modified.Name
	case *EdgelqInstanceChange_Current_:
		return cType.Current.EdgelqInstance.GetName()
	case *EdgelqInstanceChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *EdgelqInstanceChange) GetRawName() gotenresource.Name {
	return c.GetEdgelqInstanceName()
}

func (c *EdgelqInstanceChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &EdgelqInstanceChange_Added_{
		Added: &EdgelqInstanceChange_Added{
			EdgelqInstance: snapshot.(*EdgelqInstance),
			ViewIndex:      int32(idx),
		},
	}
}

func (c *EdgelqInstanceChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &EdgelqInstanceChange_Modified_{
		Modified: &EdgelqInstanceChange_Modified{
			Name:              name.(*Name),
			EdgelqInstance:    snapshot.(*EdgelqInstance),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *EdgelqInstanceChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &EdgelqInstanceChange_Current_{
		Current: &EdgelqInstanceChange_Current{
			EdgelqInstance: snapshot.(*EdgelqInstance),
		},
	}
}

func (c *EdgelqInstanceChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &EdgelqInstanceChange_Removed_{
		Removed: &EdgelqInstanceChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
