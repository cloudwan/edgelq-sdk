// Code generated by protoc-gen-goten-object
// File: edgelq/ztp/proto/v1/hardware.proto
// DO NOT EDIT!!!

package hardware

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	edgelq_instance "github.com/cloudwan/edgelq-sdk/ztp/resources/v1/edgelq_instance"
	project "github.com/cloudwan/edgelq-sdk/ztp/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &edgelq_instance.EdgelqInstance{}
	_ = &project.Project{}
	_ = &meta.Meta{}
)

func (o *Hardware) GotenObjectExt() {}

func (o *Hardware) MakeFullFieldMask() *Hardware_FieldMask {
	return FullHardware_FieldMask()
}

func (o *Hardware) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullHardware_FieldMask()
}

func (o *Hardware) MakeDiffFieldMask(other *Hardware) *Hardware_FieldMask {
	if o == nil && other == nil {
		return &Hardware_FieldMask{}
	}
	if o == nil || other == nil {
		return FullHardware_FieldMask()
	}

	res := &Hardware_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Hardware_FieldTerminalPath{selector: Hardware_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Hardware_FieldTerminalPath{selector: Hardware_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Hardware_FieldSubPath{selector: Hardware_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetSerialNumber() != other.GetSerialNumber() {
		res.Paths = append(res.Paths, &Hardware_FieldTerminalPath{selector: Hardware_FieldPathSelectorSerialNumber})
	}
	if o.GetManufacturer() != other.GetManufacturer() {
		res.Paths = append(res.Paths, &Hardware_FieldTerminalPath{selector: Hardware_FieldPathSelectorManufacturer})
	}
	if o.GetProductName() != other.GetProductName() {
		res.Paths = append(res.Paths, &Hardware_FieldTerminalPath{selector: Hardware_FieldPathSelectorProductName})
	}
	if o.GetAssociatedEdgelqInstance().String() != other.GetAssociatedEdgelqInstance().String() {
		res.Paths = append(res.Paths, &Hardware_FieldTerminalPath{selector: Hardware_FieldPathSelectorAssociatedEdgelqInstance})
	}
	if o.GetAssociatedProject() != other.GetAssociatedProject() {
		res.Paths = append(res.Paths, &Hardware_FieldTerminalPath{selector: Hardware_FieldPathSelectorAssociatedProject})
	}
	if o.GetAssociatedProvisioningPolicyName() != other.GetAssociatedProvisioningPolicyName() {
		res.Paths = append(res.Paths, &Hardware_FieldTerminalPath{selector: Hardware_FieldPathSelectorAssociatedProvisioningPolicyName})
	}
	if o.GetAssociatedDeviceName() != other.GetAssociatedDeviceName() {
		res.Paths = append(res.Paths, &Hardware_FieldTerminalPath{selector: Hardware_FieldPathSelectorAssociatedDeviceName})
	}
	if o.GetSimIccid() != other.GetSimIccid() {
		res.Paths = append(res.Paths, &Hardware_FieldTerminalPath{selector: Hardware_FieldPathSelectorSimIccid})
	}
	if o.GetImei() != other.GetImei() {
		res.Paths = append(res.Paths, &Hardware_FieldTerminalPath{selector: Hardware_FieldPathSelectorImei})
	}
	return res
}

func (o *Hardware) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Hardware))
}

func (o *Hardware) Clone() *Hardware {
	if o == nil {
		return nil
	}
	result := &Hardware{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.SerialNumber = o.SerialNumber
	result.Manufacturer = o.Manufacturer
	result.ProductName = o.ProductName
	if o.AssociatedEdgelqInstance == nil {
		result.AssociatedEdgelqInstance = nil
	} else if data, err := o.AssociatedEdgelqInstance.ProtoString(); err != nil {
		panic(err)
	} else {
		result.AssociatedEdgelqInstance = &edgelq_instance.Reference{}
		if err := result.AssociatedEdgelqInstance.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.AssociatedProject = o.AssociatedProject
	result.AssociatedProvisioningPolicyName = o.AssociatedProvisioningPolicyName
	result.AssociatedDeviceName = o.AssociatedDeviceName
	result.SimIccid = o.SimIccid
	result.Imei = o.Imei
	return result
}

func (o *Hardware) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Hardware) Merge(source *Hardware) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.SerialNumber = source.GetSerialNumber()
	o.Manufacturer = source.GetManufacturer()
	o.ProductName = source.GetProductName()
	if source.GetAssociatedEdgelqInstance() != nil {
		if data, err := source.GetAssociatedEdgelqInstance().ProtoString(); err != nil {
			panic(err)
		} else {
			o.AssociatedEdgelqInstance = &edgelq_instance.Reference{}
			if err := o.AssociatedEdgelqInstance.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.AssociatedEdgelqInstance = nil
	}
	o.AssociatedProject = source.GetAssociatedProject()
	o.AssociatedProvisioningPolicyName = source.GetAssociatedProvisioningPolicyName()
	o.AssociatedDeviceName = source.GetAssociatedDeviceName()
	o.SimIccid = source.GetSimIccid()
	o.Imei = source.GetImei()
}

func (o *Hardware) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Hardware))
}
