// Code generated by protoc-gen-goten-access
// Resource: EdgelqInstance
// DO NOT EDIT!!!

package edgelq_instance_access

import (
	"context"
	"fmt"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	gotenaccess "github.com/cloudwan/goten-sdk/runtime/access"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
	"github.com/cloudwan/goten-sdk/types/watch_type"

	edgelq_instance_client "github.com/cloudwan/edgelq-sdk/ztp/client/v1/edgelq_instance"
	edgelq_instance "github.com/cloudwan/edgelq-sdk/ztp/resources/v1/edgelq_instance"
)

var (
	_ = new(context.Context)
	_ = new(fmt.GoStringer)

	_ = new(grpc.ClientConnInterface)
	_ = codes.NotFound
	_ = status.Status{}

	_ = new(gotenaccess.Watcher)
	_ = watch_type.WatchType_STATEFUL
	_ = new(gotenresource.ListQuery)
	_ = gotenfilter.Eq
)

type apiEdgelqInstanceAccess struct {
	client edgelq_instance_client.EdgelqInstanceServiceClient
}

func NewApiEdgelqInstanceAccess(client edgelq_instance_client.EdgelqInstanceServiceClient) edgelq_instance.EdgelqInstanceAccess {
	return &apiEdgelqInstanceAccess{client: client}
}

func (a *apiEdgelqInstanceAccess) GetEdgelqInstance(ctx context.Context, query *edgelq_instance.GetQuery) (*edgelq_instance.EdgelqInstance, error) {
	if !query.Reference.IsFullyQualified() {
		return nil, status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", query.Reference)
	}
	request := &edgelq_instance_client.GetEdgelqInstanceRequest{
		Name:      &query.Reference.Name,
		FieldMask: query.Mask,
	}
	res, err := a.client.GetEdgelqInstance(ctx, request)
	if err != nil {
		return nil, err
	}
	query.Reference.Resolve(res)
	return res, nil
}

func (a *apiEdgelqInstanceAccess) BatchGetEdgelqInstances(ctx context.Context, refs []*edgelq_instance.Reference, opts ...gotenresource.BatchGetOption) error {
	batchGetOpts := gotenresource.MakeBatchGetOptions(opts)
	asNames := make([]*edgelq_instance.Name, 0, len(refs))
	for _, ref := range refs {
		if !ref.IsFullyQualified() {
			return status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", ref)
		}
		asNames = append(asNames, &ref.Name)
	}
	request := &edgelq_instance_client.BatchGetEdgelqInstancesRequest{
		Names: asNames,
	}
	fieldMask := batchGetOpts.GetFieldMask(edgelq_instance.GetDescriptor())
	if fieldMask != nil {
		request.FieldMask = fieldMask.(*edgelq_instance.EdgelqInstance_FieldMask)
	}
	resp, err := a.client.BatchGetEdgelqInstances(ctx, request)
	if err != nil {
		return err
	}
	resultMap := make(map[edgelq_instance.Name]*edgelq_instance.EdgelqInstance, len(refs))
	for _, resolvedRes := range resp.GetEdgelqInstances() {
		resultMap[*resolvedRes.GetName()] = resolvedRes
	}
	for _, ref := range refs {
		resolvedRes := resultMap[ref.Name]
		if resolvedRes != nil {
			ref.Resolve(resolvedRes)
		}
	}
	if batchGetOpts.MustResolveAll() && len(resp.GetMissing()) > 0 {
		return status.Errorf(codes.NotFound, "Number of references not found: %d", len(resp.GetMissing()))
	}
	return nil
}

func (a *apiEdgelqInstanceAccess) QueryEdgelqInstances(ctx context.Context, query *edgelq_instance.ListQuery) (*edgelq_instance.QueryResultSnapshot, error) {
	request := &edgelq_instance_client.ListEdgelqInstancesRequest{
		Filter:            query.Filter,
		FieldMask:         query.Mask,
		IncludePagingInfo: query.WithPagingInfo,
	}
	if query.Pager != nil {
		request.PageSize = int32(query.Pager.Limit)
		request.OrderBy = query.Pager.OrderBy
		request.PageToken = query.Pager.Cursor
	}
	if query.Filter != nil && query.Filter.GetCondition() != nil {
		request.Filter, request.Parent = getParentAndFilter(query.Filter)
	}
	resp, err := a.client.ListEdgelqInstances(ctx, request)
	if err != nil {
		return nil, err
	}
	return &edgelq_instance.QueryResultSnapshot{
		EdgelqInstances:   resp.EdgelqInstances,
		NextPageCursor:    resp.NextPageToken,
		PrevPageCursor:    resp.PrevPageToken,
		TotalResultsCount: resp.TotalResultsCount,
		CurrentOffset:     resp.CurrentOffset,
	}, nil
}

func (a *apiEdgelqInstanceAccess) WatchEdgelqInstance(ctx context.Context, query *edgelq_instance.GetQuery, observerCb func(*edgelq_instance.EdgelqInstanceChange) error) error {
	if !query.Reference.IsFullyQualified() {
		return status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", query.Reference)
	}
	request := &edgelq_instance_client.WatchEdgelqInstanceRequest{
		Name:      &query.Reference.Name,
		FieldMask: query.Mask,
	}
	changesStream, initErr := a.client.WatchEdgelqInstance(ctx, request)
	if initErr != nil {
		return initErr
	}
	for {
		resp, err := changesStream.Recv()
		if err != nil {
			return fmt.Errorf("watch recv error: %w", err)
		}
		change := resp.GetChange()
		if err := observerCb(change); err != nil {
			return err
		}
	}
}

func (a *apiEdgelqInstanceAccess) WatchEdgelqInstances(ctx context.Context, query *edgelq_instance.WatchQuery, observerCb func(*edgelq_instance.QueryResultChange) error) error {
	request := &edgelq_instance_client.WatchEdgelqInstancesRequest{
		Filter:       query.Filter,
		FieldMask:    query.Mask,
		MaxChunkSize: int32(query.ChunkSize),
		Type:         query.WatchType,
		ResumeToken:  query.ResumeToken,
	}
	if query.Pager != nil {
		request.OrderBy = query.Pager.OrderBy
		request.PageSize = int32(query.Pager.Limit)
		request.PageToken = query.Pager.Cursor
	}
	if query.Filter != nil && query.Filter.GetCondition() != nil {
		request.Filter, request.Parent = getParentAndFilter(query.Filter)
	}
	changesStream, initErr := a.client.WatchEdgelqInstances(ctx, request)
	if initErr != nil {
		return initErr
	}
	for {
		respChange, err := changesStream.Recv()
		if err != nil {
			return fmt.Errorf("watch recv error: %w", err)
		}
		changesWithPaging := &edgelq_instance.QueryResultChange{
			Changes:      respChange.EdgelqInstanceChanges,
			IsCurrent:    respChange.IsCurrent,
			IsHardReset:  respChange.IsHardReset,
			IsSoftReset:  respChange.IsSoftReset,
			ResumeToken:  respChange.ResumeToken,
			SnapshotSize: respChange.SnapshotSize,
		}
		if respChange.PageTokenChange != nil {
			changesWithPaging.PrevPageCursor = respChange.PageTokenChange.PrevPageToken
			changesWithPaging.NextPageCursor = respChange.PageTokenChange.NextPageToken
		}
		if err := observerCb(changesWithPaging); err != nil {
			return err
		}
	}
}

func (a *apiEdgelqInstanceAccess) SaveEdgelqInstance(ctx context.Context, res *edgelq_instance.EdgelqInstance, opts ...gotenresource.SaveOption) error {
	saveOpts := gotenresource.MakeSaveOptions(opts)
	previousRes := saveOpts.GetPreviousResource()

	if previousRes == nil && !saveOpts.OnlyUpdate() && !saveOpts.OnlyCreate() {
		var err error
		previousRes, err = a.GetEdgelqInstance(ctx, &edgelq_instance.GetQuery{Reference: res.Name.AsReference()})
		if err != nil {
			if statusErr, ok := status.FromError(err); !ok || statusErr.Code() != codes.NotFound {
				return err
			}
		}
	}
	var resp *edgelq_instance.EdgelqInstance
	var err error
	if saveOpts.OnlyUpdate() || previousRes != nil {
		updateRequest := &edgelq_instance_client.UpdateEdgelqInstanceRequest{
			EdgelqInstance: res,
		}
		if updateMask := saveOpts.GetUpdateMask(); updateMask != nil {
			updateRequest.UpdateMask = updateMask.(*edgelq_instance.EdgelqInstance_FieldMask)
		}
		if mask, conditionalState := saveOpts.GetCAS(); mask != nil && conditionalState != nil {
			updateRequest.Cas = &edgelq_instance_client.UpdateEdgelqInstanceRequest_CAS{
				ConditionalState: conditionalState.(*edgelq_instance.EdgelqInstance),
				FieldMask:        mask.(*edgelq_instance.EdgelqInstance_FieldMask),
			}
		}
		resp, err = a.client.UpdateEdgelqInstance(ctx, updateRequest)
		if err != nil {
			return err
		}
	} else {
		createRequest := &edgelq_instance_client.CreateEdgelqInstanceRequest{
			EdgelqInstance: res,
		}
		resp, err = a.client.CreateEdgelqInstance(ctx, createRequest)
		if err != nil {
			return err
		}
	}
	// Ensure object is updated - but in most shallow way possible
	res.MakeDiffFieldMask(resp).Set(res, resp)
	return nil
}

func (a *apiEdgelqInstanceAccess) DeleteEdgelqInstance(ctx context.Context, ref *edgelq_instance.Reference, opts ...gotenresource.DeleteOption) error {
	if !ref.IsFullyQualified() {
		return status.Errorf(codes.InvalidArgument, "Reference %s is not fully specified", ref)
	}
	request := &edgelq_instance_client.DeleteEdgelqInstanceRequest{
		Name: &ref.Name,
	}
	_, err := a.client.DeleteEdgelqInstance(ctx, request)
	return err
}
func getParentAndFilter(fullFilter *edgelq_instance.Filter) (*edgelq_instance.Filter, *edgelq_instance.ParentName) {
	var withParentExtraction func(cnd edgelq_instance.FilterCondition) edgelq_instance.FilterCondition
	var resultParent *edgelq_instance.ParentName
	var resultFilter *edgelq_instance.Filter
	withParentExtraction = func(cnd edgelq_instance.FilterCondition) edgelq_instance.FilterCondition {
		switch tCnd := cnd.(type) {
		case *edgelq_instance.FilterConditionComposite:
			if tCnd.GetOperator() == gotenfilter.AND {
				withoutParentCnds := make([]edgelq_instance.FilterCondition, 0)
				for _, subCnd := range tCnd.Conditions {
					if subCndNoParent := withParentExtraction(subCnd); subCndNoParent != nil {
						withoutParentCnds = append(withoutParentCnds, subCndNoParent)
					}
				}
				if len(withoutParentCnds) == 0 {
					return nil
				}
				return edgelq_instance.AndFilterConditions(withoutParentCnds...)
			} else {
				return tCnd
			}
		case *edgelq_instance.FilterConditionCompare:
			if tCnd.GetOperator() == gotenfilter.Eq && tCnd.GetRawFieldPath().String() == "name" {
				nameValue := tCnd.GetRawValue().(*edgelq_instance.Name)
				if nameValue != nil && nameValue.ParentName.IsSpecified() {
					resultParent = &nameValue.ParentName
					if nameValue.IsFullyQualified() {
						return tCnd
					}
					return nil
				}
			}
			return tCnd
		default:
			return tCnd
		}
	}
	cndWithoutParent := withParentExtraction(fullFilter.GetCondition())
	if cndWithoutParent != nil {
		resultFilter = &edgelq_instance.Filter{FilterCondition: cndWithoutParent}
	}
	return resultFilter, resultParent
}

func init() {
	gotenaccess.GetRegistry().RegisterApiAccessConstructor(edgelq_instance.GetDescriptor(), func(cc grpc.ClientConnInterface) gotenresource.Access {
		return edgelq_instance.AsAnyCastAccess(NewApiEdgelqInstanceAccess(edgelq_instance_client.NewEdgelqInstanceServiceClient(cc)))
	})
}
