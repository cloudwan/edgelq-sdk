// Code generated by protoc-gen-goten-go
// File: edgelq/ztp/proto/v1/tpm_attestation_cert_service.proto
// DO NOT EDIT!!!

package tpm_attestation_cert_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/ztp/resources/v1/project"
	tpm_attestation_cert "github.com/cloudwan/edgelq-sdk/ztp/resources/v1/tpm_attestation_cert"
	view "github.com/cloudwan/goten-sdk/types/view"
	watch_type "github.com/cloudwan/goten-sdk/types/watch_type"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &tpm_attestation_cert.TpmAttestationCert{}
	_ = &emptypb.Empty{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method
// [GetTpmAttestationCert][ntt.ztp.v1.GetTpmAttestationCert]
type GetTpmAttestationCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.ztp.v1.TpmAttestationCert
	Name *tpm_attestation_cert.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *tpm_attestation_cert.TpmAttestationCert_FieldMask `protobuf:"bytes,3,opt,customtype=TpmAttestationCert_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetTpmAttestationCertRequest) Reset() {
	*m = GetTpmAttestationCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetTpmAttestationCertRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetTpmAttestationCertRequest) ProtoMessage() {}

func (m *GetTpmAttestationCertRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetTpmAttestationCertRequest) GotenMessage() {}

// Deprecated, Use GetTpmAttestationCertRequest.ProtoReflect.Descriptor instead.
func (*GetTpmAttestationCertRequest) Descriptor() ([]byte, []int) {
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetTpmAttestationCertRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetTpmAttestationCertRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetTpmAttestationCertRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetTpmAttestationCertRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetTpmAttestationCertRequest) GetName() *tpm_attestation_cert.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetTpmAttestationCertRequest) GetFieldMask() *tpm_attestation_cert.TpmAttestationCert_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetTpmAttestationCertRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetTpmAttestationCertRequest) SetName(fv *tpm_attestation_cert.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetTpmAttestationCertRequest"))
	}
	m.Name = fv
}

func (m *GetTpmAttestationCertRequest) SetFieldMask(fv *tpm_attestation_cert.TpmAttestationCert_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetTpmAttestationCertRequest"))
	}
	m.FieldMask = fv
}

func (m *GetTpmAttestationCertRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetTpmAttestationCertRequest"))
	}
	m.View = fv
}

// Request message for method
// [BatchGetTpmAttestationCerts][ntt.ztp.v1.BatchGetTpmAttestationCerts]
type BatchGetTpmAttestationCertsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of TpmAttestationCerts
	Names []*tpm_attestation_cert.Name `protobuf:"bytes,2,rep,customtype=Name,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *tpm_attestation_cert.TpmAttestationCert_FieldMask `protobuf:"bytes,3,opt,customtype=TpmAttestationCert_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetTpmAttestationCertsRequest) Reset() {
	*m = BatchGetTpmAttestationCertsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetTpmAttestationCertsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetTpmAttestationCertsRequest) ProtoMessage() {}

func (m *BatchGetTpmAttestationCertsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetTpmAttestationCertsRequest) GotenMessage() {}

// Deprecated, Use BatchGetTpmAttestationCertsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetTpmAttestationCertsRequest) Descriptor() ([]byte, []int) {
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetTpmAttestationCertsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetTpmAttestationCertsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetTpmAttestationCertsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetTpmAttestationCertsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetTpmAttestationCertsRequest) GetNames() []*tpm_attestation_cert.Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetTpmAttestationCertsRequest) GetFieldMask() *tpm_attestation_cert.TpmAttestationCert_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetTpmAttestationCertsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetTpmAttestationCertsRequest) SetNames(fv []*tpm_attestation_cert.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetTpmAttestationCertsRequest"))
	}
	m.Names = fv
}

func (m *BatchGetTpmAttestationCertsRequest) SetFieldMask(fv *tpm_attestation_cert.TpmAttestationCert_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetTpmAttestationCertsRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetTpmAttestationCertsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetTpmAttestationCertsRequest"))
	}
	m.View = fv
}

// BatchGetTpmAttestationCertsResponse
type BatchGetTpmAttestationCertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found TpmAttestationCerts
	TpmAttestationCerts []*tpm_attestation_cert.TpmAttestationCert `protobuf:"bytes,1,rep,name=tpm_attestation_certs,json=tpmAttestationCerts,proto3" json:"tpm_attestation_certs,omitempty" firestore:"tpmAttestationCerts"`
	// list of not found TpmAttestationCerts
	Missing []*tpm_attestation_cert.Name `protobuf:"bytes,2,rep,customtype=Name,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetTpmAttestationCertsResponse) Reset() {
	*m = BatchGetTpmAttestationCertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetTpmAttestationCertsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetTpmAttestationCertsResponse) ProtoMessage() {}

func (m *BatchGetTpmAttestationCertsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetTpmAttestationCertsResponse) GotenMessage() {}

// Deprecated, Use BatchGetTpmAttestationCertsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetTpmAttestationCertsResponse) Descriptor() ([]byte, []int) {
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetTpmAttestationCertsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetTpmAttestationCertsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetTpmAttestationCertsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetTpmAttestationCertsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetTpmAttestationCertsResponse) GetTpmAttestationCerts() []*tpm_attestation_cert.TpmAttestationCert {
	if m != nil {
		return m.TpmAttestationCerts
	}
	return nil
}

func (m *BatchGetTpmAttestationCertsResponse) GetMissing() []*tpm_attestation_cert.Name {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetTpmAttestationCertsResponse) SetTpmAttestationCerts(fv []*tpm_attestation_cert.TpmAttestationCert) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TpmAttestationCerts", "BatchGetTpmAttestationCertsResponse"))
	}
	m.TpmAttestationCerts = fv
}

func (m *BatchGetTpmAttestationCertsResponse) SetMissing(fv []*tpm_attestation_cert.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetTpmAttestationCertsResponse"))
	}
	m.Missing = fv
}

// Request message for method
// [ListTpmAttestationCerts][ntt.ztp.v1.ListTpmAttestationCerts]
type ListTpmAttestationCertsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.ztp.v1.TpmAttestationCert
	Parent *tpm_attestation_cert.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer TpmAttestationCerts than
	// requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListTpmAttestationCertsResponse.next_page_token][ntt.ztp.v1.ListTpmAttestationCertsResponse.next_page_token]
	PageToken *tpm_attestation_cert.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *tpm_attestation_cert.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *tpm_attestation_cert.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *tpm_attestation_cert.TpmAttestationCert_FieldMask `protobuf:"bytes,6,opt,customtype=TpmAttestationCert_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty" firestore:"includePagingInfo"`
}

func (m *ListTpmAttestationCertsRequest) Reset() {
	*m = ListTpmAttestationCertsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListTpmAttestationCertsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListTpmAttestationCertsRequest) ProtoMessage() {}

func (m *ListTpmAttestationCertsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListTpmAttestationCertsRequest) GotenMessage() {}

// Deprecated, Use ListTpmAttestationCertsRequest.ProtoReflect.Descriptor instead.
func (*ListTpmAttestationCertsRequest) Descriptor() ([]byte, []int) {
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListTpmAttestationCertsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListTpmAttestationCertsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListTpmAttestationCertsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListTpmAttestationCertsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListTpmAttestationCertsRequest) GetParent() *tpm_attestation_cert.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListTpmAttestationCertsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListTpmAttestationCertsRequest) GetPageToken() *tpm_attestation_cert.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListTpmAttestationCertsRequest) GetOrderBy() *tpm_attestation_cert.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListTpmAttestationCertsRequest) GetFilter() *tpm_attestation_cert.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListTpmAttestationCertsRequest) GetFieldMask() *tpm_attestation_cert.TpmAttestationCert_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListTpmAttestationCertsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListTpmAttestationCertsRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListTpmAttestationCertsRequest) SetParent(fv *tpm_attestation_cert.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListTpmAttestationCertsRequest"))
	}
	m.Parent = fv
}

func (m *ListTpmAttestationCertsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListTpmAttestationCertsRequest"))
	}
	m.PageSize = fv
}

func (m *ListTpmAttestationCertsRequest) SetPageToken(fv *tpm_attestation_cert.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListTpmAttestationCertsRequest"))
	}
	m.PageToken = fv
}

func (m *ListTpmAttestationCertsRequest) SetOrderBy(fv *tpm_attestation_cert.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListTpmAttestationCertsRequest"))
	}
	m.OrderBy = fv
}

func (m *ListTpmAttestationCertsRequest) SetFilter(fv *tpm_attestation_cert.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListTpmAttestationCertsRequest"))
	}
	m.Filter = fv
}

func (m *ListTpmAttestationCertsRequest) SetFieldMask(fv *tpm_attestation_cert.TpmAttestationCert_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListTpmAttestationCertsRequest"))
	}
	m.FieldMask = fv
}

func (m *ListTpmAttestationCertsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListTpmAttestationCertsRequest"))
	}
	m.View = fv
}

func (m *ListTpmAttestationCertsRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListTpmAttestationCertsRequest"))
	}
	m.IncludePagingInfo = fv
}

// Request message for method
// [ListTpmAttestationCerts][ntt.ztp.v1.ListTpmAttestationCerts]
type ListTpmAttestationCertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of TpmAttestationCerts
	TpmAttestationCerts []*tpm_attestation_cert.TpmAttestationCert `protobuf:"bytes,1,rep,name=tpm_attestation_certs,json=tpmAttestationCerts,proto3" json:"tpm_attestation_certs,omitempty" firestore:"tpmAttestationCerts"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListTpmAttestationCertsRequest.page_token][ntt.ztp.v1.ListTpmAttestationCertsRequest.page_token]
	PrevPageToken *tpm_attestation_cert.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListTpmAttestationCertsRequest.page_token][ntt.ztp.v1.ListTpmAttestationCertsRequest.page_token]
	NextPageToken *tpm_attestation_cert.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty" firestore:"currentOffset"`
	// Number of total TpmAttestationCerts across all pages or 0, if there are no
	// items, paging info was not requested or there was an error while trying to
	// get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty" firestore:"totalResultsCount"`
}

func (m *ListTpmAttestationCertsResponse) Reset() {
	*m = ListTpmAttestationCertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListTpmAttestationCertsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListTpmAttestationCertsResponse) ProtoMessage() {}

func (m *ListTpmAttestationCertsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListTpmAttestationCertsResponse) GotenMessage() {}

// Deprecated, Use ListTpmAttestationCertsResponse.ProtoReflect.Descriptor instead.
func (*ListTpmAttestationCertsResponse) Descriptor() ([]byte, []int) {
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListTpmAttestationCertsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListTpmAttestationCertsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListTpmAttestationCertsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListTpmAttestationCertsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListTpmAttestationCertsResponse) GetTpmAttestationCerts() []*tpm_attestation_cert.TpmAttestationCert {
	if m != nil {
		return m.TpmAttestationCerts
	}
	return nil
}

func (m *ListTpmAttestationCertsResponse) GetPrevPageToken() *tpm_attestation_cert.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListTpmAttestationCertsResponse) GetNextPageToken() *tpm_attestation_cert.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListTpmAttestationCertsResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListTpmAttestationCertsResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListTpmAttestationCertsResponse) SetTpmAttestationCerts(fv []*tpm_attestation_cert.TpmAttestationCert) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TpmAttestationCerts", "ListTpmAttestationCertsResponse"))
	}
	m.TpmAttestationCerts = fv
}

func (m *ListTpmAttestationCertsResponse) SetPrevPageToken(fv *tpm_attestation_cert.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListTpmAttestationCertsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListTpmAttestationCertsResponse) SetNextPageToken(fv *tpm_attestation_cert.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListTpmAttestationCertsResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListTpmAttestationCertsResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListTpmAttestationCertsResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListTpmAttestationCertsResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListTpmAttestationCertsResponse"))
	}
	m.TotalResultsCount = fv
}

// Request message for method
// [WatchTpmAttestationCert][ntt.ztp.v1.WatchTpmAttestationCert]
type WatchTpmAttestationCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.ztp.v1.TpmAttestationCert
	Name *tpm_attestation_cert.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *tpm_attestation_cert.TpmAttestationCert_FieldMask `protobuf:"bytes,2,opt,customtype=TpmAttestationCert_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchTpmAttestationCertRequest) Reset() {
	*m = WatchTpmAttestationCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTpmAttestationCertRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTpmAttestationCertRequest) ProtoMessage() {}

func (m *WatchTpmAttestationCertRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTpmAttestationCertRequest) GotenMessage() {}

// Deprecated, Use WatchTpmAttestationCertRequest.ProtoReflect.Descriptor instead.
func (*WatchTpmAttestationCertRequest) Descriptor() ([]byte, []int) {
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchTpmAttestationCertRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTpmAttestationCertRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTpmAttestationCertRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTpmAttestationCertRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTpmAttestationCertRequest) GetName() *tpm_attestation_cert.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchTpmAttestationCertRequest) GetFieldMask() *tpm_attestation_cert.TpmAttestationCert_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchTpmAttestationCertRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchTpmAttestationCertRequest) SetName(fv *tpm_attestation_cert.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchTpmAttestationCertRequest"))
	}
	m.Name = fv
}

func (m *WatchTpmAttestationCertRequest) SetFieldMask(fv *tpm_attestation_cert.TpmAttestationCert_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchTpmAttestationCertRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchTpmAttestationCertRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchTpmAttestationCertRequest"))
	}
	m.View = fv
}

// WatchTpmAttestationCertResponse
type WatchTpmAttestationCertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *tpm_attestation_cert.TpmAttestationCertChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchTpmAttestationCertResponse) Reset() {
	*m = WatchTpmAttestationCertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTpmAttestationCertResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTpmAttestationCertResponse) ProtoMessage() {}

func (m *WatchTpmAttestationCertResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTpmAttestationCertResponse) GotenMessage() {}

// Deprecated, Use WatchTpmAttestationCertResponse.ProtoReflect.Descriptor instead.
func (*WatchTpmAttestationCertResponse) Descriptor() ([]byte, []int) {
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchTpmAttestationCertResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTpmAttestationCertResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTpmAttestationCertResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTpmAttestationCertResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTpmAttestationCertResponse) GetChange() *tpm_attestation_cert.TpmAttestationCertChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchTpmAttestationCertResponse) SetChange(fv *tpm_attestation_cert.TpmAttestationCertChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchTpmAttestationCertResponse"))
	}
	m.Change = fv
}

// Request message for method
// [WatchTpmAttestationCerts][ntt.ztp.v1.WatchTpmAttestationCerts]
type WatchTpmAttestationCertsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.types.WatchType" json:"type,omitempty" firestore:"type"`
	// Parent name of ntt.ztp.v1.TpmAttestationCert
	Parent *tpm_attestation_cert.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer TpmAttestationCerts than
	// requested. If unspecified, server will pick an appropriate default. Can be
	// populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *tpm_attestation_cert.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *tpm_attestation_cert.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty" firestore:"startingTime"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *tpm_attestation_cert.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to TpmAttestationCert that
	// don't affect any of masked fields won't be sent back.
	FieldMask *tpm_attestation_cert.TpmAttestationCert_FieldMask `protobuf:"bytes,6,opt,customtype=TpmAttestationCert_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// TpmAttestationCert that don't affect any of masked fields won't be sent
	// back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchTpmAttestationCertsRequest) Reset() {
	*m = WatchTpmAttestationCertsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTpmAttestationCertsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTpmAttestationCertsRequest) ProtoMessage() {}

func (m *WatchTpmAttestationCertsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTpmAttestationCertsRequest) GotenMessage() {}

// Deprecated, Use WatchTpmAttestationCertsRequest.ProtoReflect.Descriptor instead.
func (*WatchTpmAttestationCertsRequest) Descriptor() ([]byte, []int) {
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchTpmAttestationCertsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTpmAttestationCertsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTpmAttestationCertsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTpmAttestationCertsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTpmAttestationCertsRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchTpmAttestationCertsRequest) GetParent() *tpm_attestation_cert.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchTpmAttestationCertsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchTpmAttestationCertsRequest) GetPageToken() *tpm_attestation_cert.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchTpmAttestationCertsRequest) GetOrderBy() *tpm_attestation_cert.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchTpmAttestationCertsRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchTpmAttestationCertsRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchTpmAttestationCertsRequest) GetFilter() *tpm_attestation_cert.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchTpmAttestationCertsRequest) GetFieldMask() *tpm_attestation_cert.TpmAttestationCert_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchTpmAttestationCertsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchTpmAttestationCertsRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchTpmAttestationCertsRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchTpmAttestationCertsRequest"))
	}
	m.Type = fv
}

func (m *WatchTpmAttestationCertsRequest) SetParent(fv *tpm_attestation_cert.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchTpmAttestationCertsRequest"))
	}
	m.Parent = fv
}

func (m *WatchTpmAttestationCertsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchTpmAttestationCertsRequest"))
	}
	m.PageSize = fv
}

func (m *WatchTpmAttestationCertsRequest) SetPageToken(fv *tpm_attestation_cert.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchTpmAttestationCertsRequest"))
	}
	m.PageToken = fv
}

func (m *WatchTpmAttestationCertsRequest) SetOrderBy(fv *tpm_attestation_cert.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchTpmAttestationCertsRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchTpmAttestationCertsRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchTpmAttestationCertsRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchTpmAttestationCertsRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchTpmAttestationCertsRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchTpmAttestationCertsRequest) SetFilter(fv *tpm_attestation_cert.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchTpmAttestationCertsRequest"))
	}
	m.Filter = fv
}

func (m *WatchTpmAttestationCertsRequest) SetFieldMask(fv *tpm_attestation_cert.TpmAttestationCert_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchTpmAttestationCertsRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchTpmAttestationCertsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchTpmAttestationCertsRequest"))
	}
	m.View = fv
}

func (m *WatchTpmAttestationCertsRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchTpmAttestationCertsRequest"))
	}
	m.MaxChunkSize = fv
}

// WatchTpmAttestationCertsResponse
type WatchTpmAttestationCertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of TpmAttestationCerts
	TpmAttestationCertChanges []*tpm_attestation_cert.TpmAttestationCertChange `protobuf:"bytes,2,rep,name=tpm_attestation_cert_changes,json=tpmAttestationCertChanges,proto3" json:"tpm_attestation_cert_changes,omitempty" firestore:"tpmAttestationCertChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All TpmAttestationCerts will be of
	// type Added/Current (depending on watch_type specified in the request).
	// Further responses will be incremental - however messages may still be
	// chunked and is_current logic still applies. is_current is always true for
	// stateful watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchTpmAttestationCertsResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (TpmAttestationCerts will contains
	// changes of type Current only). Any resume tokens should be discarded as
	// well. This field should be checked only for stateless watch. In stateful
	// those kind of errors are handled by the server side. Will never be sent
	// along with is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchTpmAttestationCertsResponse) Reset() {
	*m = WatchTpmAttestationCertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTpmAttestationCertsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTpmAttestationCertsResponse) ProtoMessage() {}

func (m *WatchTpmAttestationCertsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTpmAttestationCertsResponse) GotenMessage() {}

// Deprecated, Use WatchTpmAttestationCertsResponse.ProtoReflect.Descriptor instead.
func (*WatchTpmAttestationCertsResponse) Descriptor() ([]byte, []int) {
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchTpmAttestationCertsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTpmAttestationCertsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTpmAttestationCertsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTpmAttestationCertsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTpmAttestationCertsResponse) GetTpmAttestationCertChanges() []*tpm_attestation_cert.TpmAttestationCertChange {
	if m != nil {
		return m.TpmAttestationCertChanges
	}
	return nil
}

func (m *WatchTpmAttestationCertsResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchTpmAttestationCertsResponse) GetPageTokenChange() *WatchTpmAttestationCertsResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchTpmAttestationCertsResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchTpmAttestationCertsResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchTpmAttestationCertsResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchTpmAttestationCertsResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchTpmAttestationCertsResponse) SetTpmAttestationCertChanges(fv []*tpm_attestation_cert.TpmAttestationCertChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TpmAttestationCertChanges", "WatchTpmAttestationCertsResponse"))
	}
	m.TpmAttestationCertChanges = fv
}

func (m *WatchTpmAttestationCertsResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchTpmAttestationCertsResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchTpmAttestationCertsResponse) SetPageTokenChange(fv *WatchTpmAttestationCertsResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchTpmAttestationCertsResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchTpmAttestationCertsResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchTpmAttestationCertsResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchTpmAttestationCertsResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchTpmAttestationCertsResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchTpmAttestationCertsResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchTpmAttestationCertsResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchTpmAttestationCertsResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchTpmAttestationCertsResponse"))
	}
	m.IsHardReset = fv
}

// Request message for method
// [CreateTpmAttestationCert][ntt.ztp.v1.CreateTpmAttestationCert]
type CreateTpmAttestationCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.ztp.v1.TpmAttestationCert
	Parent *tpm_attestation_cert.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// TpmAttestationCert resource body
	TpmAttestationCert *tpm_attestation_cert.TpmAttestationCert `protobuf:"bytes,2,opt,name=tpm_attestation_cert,json=tpmAttestationCert,proto3" json:"tpm_attestation_cert,omitempty" firestore:"tpmAttestationCert"`
}

func (m *CreateTpmAttestationCertRequest) Reset() {
	*m = CreateTpmAttestationCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateTpmAttestationCertRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateTpmAttestationCertRequest) ProtoMessage() {}

func (m *CreateTpmAttestationCertRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateTpmAttestationCertRequest) GotenMessage() {}

// Deprecated, Use CreateTpmAttestationCertRequest.ProtoReflect.Descriptor instead.
func (*CreateTpmAttestationCertRequest) Descriptor() ([]byte, []int) {
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateTpmAttestationCertRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateTpmAttestationCertRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateTpmAttestationCertRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateTpmAttestationCertRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateTpmAttestationCertRequest) GetParent() *tpm_attestation_cert.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateTpmAttestationCertRequest) GetTpmAttestationCert() *tpm_attestation_cert.TpmAttestationCert {
	if m != nil {
		return m.TpmAttestationCert
	}
	return nil
}

func (m *CreateTpmAttestationCertRequest) SetParent(fv *tpm_attestation_cert.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateTpmAttestationCertRequest"))
	}
	m.Parent = fv
}

func (m *CreateTpmAttestationCertRequest) SetTpmAttestationCert(fv *tpm_attestation_cert.TpmAttestationCert) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TpmAttestationCert", "CreateTpmAttestationCertRequest"))
	}
	m.TpmAttestationCert = fv
}

// Request message for method
// [UpdateTpmAttestationCert][ntt.ztp.v1.UpdateTpmAttestationCert]
type UpdateTpmAttestationCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// TpmAttestationCert resource body
	TpmAttestationCert *tpm_attestation_cert.TpmAttestationCert `protobuf:"bytes,2,opt,name=tpm_attestation_cert,json=tpmAttestationCert,proto3" json:"tpm_attestation_cert,omitempty" firestore:"tpmAttestationCert"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *tpm_attestation_cert.TpmAttestationCert_FieldMask `protobuf:"bytes,3,opt,customtype=TpmAttestationCert_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateTpmAttestationCertRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
	// If set to true, and the resource is not found,
	// a new resource will be created.  In this situation,
	// 'field_mask' is ignored.
	//
	// https://google.aip.dev/134#create-or-update
	AllowMissing bool `protobuf:"varint,5,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty" firestore:"allowMissing"`
}

func (m *UpdateTpmAttestationCertRequest) Reset() {
	*m = UpdateTpmAttestationCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateTpmAttestationCertRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateTpmAttestationCertRequest) ProtoMessage() {}

func (m *UpdateTpmAttestationCertRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateTpmAttestationCertRequest) GotenMessage() {}

// Deprecated, Use UpdateTpmAttestationCertRequest.ProtoReflect.Descriptor instead.
func (*UpdateTpmAttestationCertRequest) Descriptor() ([]byte, []int) {
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateTpmAttestationCertRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateTpmAttestationCertRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateTpmAttestationCertRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateTpmAttestationCertRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateTpmAttestationCertRequest) GetTpmAttestationCert() *tpm_attestation_cert.TpmAttestationCert {
	if m != nil {
		return m.TpmAttestationCert
	}
	return nil
}

func (m *UpdateTpmAttestationCertRequest) GetUpdateMask() *tpm_attestation_cert.TpmAttestationCert_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateTpmAttestationCertRequest) GetCas() *UpdateTpmAttestationCertRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateTpmAttestationCertRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *UpdateTpmAttestationCertRequest) SetTpmAttestationCert(fv *tpm_attestation_cert.TpmAttestationCert) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TpmAttestationCert", "UpdateTpmAttestationCertRequest"))
	}
	m.TpmAttestationCert = fv
}

func (m *UpdateTpmAttestationCertRequest) SetUpdateMask(fv *tpm_attestation_cert.TpmAttestationCert_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateTpmAttestationCertRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateTpmAttestationCertRequest) SetCas(fv *UpdateTpmAttestationCertRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateTpmAttestationCertRequest"))
	}
	m.Cas = fv
}

func (m *UpdateTpmAttestationCertRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "UpdateTpmAttestationCertRequest"))
	}
	m.AllowMissing = fv
}

// Request message for method
// [DeleteTpmAttestationCert][ntt.ztp.v1.DeleteTpmAttestationCert]
type DeleteTpmAttestationCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.ztp.v1.TpmAttestationCert
	Name *tpm_attestation_cert.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeleteTpmAttestationCertRequest) Reset() {
	*m = DeleteTpmAttestationCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteTpmAttestationCertRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteTpmAttestationCertRequest) ProtoMessage() {}

func (m *DeleteTpmAttestationCertRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteTpmAttestationCertRequest) GotenMessage() {}

// Deprecated, Use DeleteTpmAttestationCertRequest.ProtoReflect.Descriptor instead.
func (*DeleteTpmAttestationCertRequest) Descriptor() ([]byte, []int) {
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteTpmAttestationCertRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteTpmAttestationCertRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteTpmAttestationCertRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteTpmAttestationCertRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteTpmAttestationCertRequest) GetName() *tpm_attestation_cert.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteTpmAttestationCertRequest) SetName(fv *tpm_attestation_cert.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteTpmAttestationCertRequest"))
	}
	m.Name = fv
}

type WatchTpmAttestationCertsResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *tpm_attestation_cert.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *tpm_attestation_cert.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchTpmAttestationCertsResponse_PageTokenChange) Reset() {
	*m = WatchTpmAttestationCertsResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchTpmAttestationCertsResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchTpmAttestationCertsResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchTpmAttestationCertsResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchTpmAttestationCertsResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchTpmAttestationCertsResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchTpmAttestationCertsResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchTpmAttestationCertsResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchTpmAttestationCertsResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchTpmAttestationCertsResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchTpmAttestationCertsResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchTpmAttestationCertsResponse_PageTokenChange) GetPrevPageToken() *tpm_attestation_cert.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchTpmAttestationCertsResponse_PageTokenChange) GetNextPageToken() *tpm_attestation_cert.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchTpmAttestationCertsResponse_PageTokenChange) SetPrevPageToken(fv *tpm_attestation_cert.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchTpmAttestationCertsResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchTpmAttestationCertsResponse_PageTokenChange) SetNextPageToken(fv *tpm_attestation_cert.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchTpmAttestationCertsResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateTpmAttestationCertRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *tpm_attestation_cert.TpmAttestationCert `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *tpm_attestation_cert.TpmAttestationCert_FieldMask `protobuf:"bytes,2,opt,customtype=TpmAttestationCert_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdateTpmAttestationCertRequest_CAS) Reset() {
	*m = UpdateTpmAttestationCertRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateTpmAttestationCertRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateTpmAttestationCertRequest_CAS) ProtoMessage() {}

func (m *UpdateTpmAttestationCertRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateTpmAttestationCertRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateTpmAttestationCertRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateTpmAttestationCertRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateTpmAttestationCertRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateTpmAttestationCertRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateTpmAttestationCertRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateTpmAttestationCertRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateTpmAttestationCertRequest_CAS) GetConditionalState() *tpm_attestation_cert.TpmAttestationCert {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateTpmAttestationCertRequest_CAS) GetFieldMask() *tpm_attestation_cert.TpmAttestationCert_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateTpmAttestationCertRequest_CAS) SetConditionalState(fv *tpm_attestation_cert.TpmAttestationCert) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateTpmAttestationCertRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateTpmAttestationCertRequest_CAS) SetFieldMask(fv *tpm_attestation_cert.TpmAttestationCert_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateTpmAttestationCertRequest_CAS"))
	}
	m.FieldMask = fv
}

var edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto preflect.FileDescriptor

var edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDesc = []byte{
	0x0a, 0x36, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x7a, 0x74, 0x70, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x70, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74,
	0x70, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x7a, 0x74, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x70, 0x6d,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x7a, 0x74, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x70, 0x6d,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2,
	0xda, 0x21, 0x16, 0x0a, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x55, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42,
	0x1a, 0xb2, 0xda, 0x21, 0x16, 0x32, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xda, 0x01,
	0x0a, 0x22, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x0a, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x32, 0x14, 0x0a, 0x12,
	0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x72, 0x74, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xaf, 0x01, 0x0a, 0x23, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x74, 0x70, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x13, 0x74, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x0a, 0x14, 0x0a,
	0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xcf, 0x03, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xb2, 0xda, 0x21, 0x16, 0x3a, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0xb2, 0xda, 0x21, 0x16, 0x22, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x2a, 0x14, 0x0a,
	0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x32, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda,
	0x21, 0x16, 0x1a, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x55, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x32, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd4,
	0x02, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x74, 0x70, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x13, 0x74, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xb2, 0xda, 0x21, 0x16, 0x22, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x22, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x1e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x0a, 0x14, 0x0a, 0x12,
	0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x72, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x32, 0x14,
	0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x72, 0x74, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x5f, 0x0a, 0x1f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xe4, 0x04, 0x0a, 0x1f, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x3a, 0x14, 0x0a,
	0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08,
	0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x22, 0x14, 0x0a, 0x12,
	0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x72, 0x74, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xb2, 0xda, 0x21, 0x16, 0x2a, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x1a, 0x14,
	0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x72, 0x74, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x1a, 0xb2, 0xda,
	0x21, 0x16, 0x32, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x12, 0x06, 0x1a, 0x02, 0x08, 0x64, 0x2a, 0x00,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xbe,
	0x04, 0x0a, 0x20, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x1c, 0x74, 0x70, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x19, 0x74, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x11, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x1a, 0x99, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x22, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x22, 0x14, 0x0a, 0x12, 0x54, 0x70,
	0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xb5, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x3a, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x74, 0x70, 0x6d, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x72, 0x74, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62,
	0x02, 0x08, 0x01, 0x52, 0x12, 0x74, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x22, 0xee, 0x03, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x74,
	0x70, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca,
	0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x12, 0x74, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x57, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x1a, 0xb2, 0xda,
	0x21, 0x16, 0x32, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x41, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x41, 0x53, 0x52, 0x03, 0x63, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x1a, 0xa9, 0x01, 0x0a,
	0x03, 0x43, 0x41, 0x53, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x70, 0x6d,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x55, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x32, 0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x51, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x0a,
	0x14, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xf5, 0x0f, 0x0a, 0x19,
	0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x12, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x70, 0x6d, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x22, 0x6a, 0x82,
	0xdb, 0x21, 0x29, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02,
	0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74,
	0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xf8, 0x01, 0x0a, 0x1b, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54,
	0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54,
	0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x82, 0xdb, 0x21, 0x42,
	0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01,
	0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x17, 0x12, 0x15, 0x74, 0x70, 0x6d,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x8a, 0xcc, 0x26, 0x00, 0x12, 0xf7, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x6d,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70,
	0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x82, 0xdb, 0x21, 0x41,
	0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08,
	0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x17, 0x12, 0x15, 0x74, 0x70, 0x6d, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x74, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xea,
	0x01, 0x0a, 0x17, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x2a, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x70, 0x6d,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xdb, 0x21, 0x2d, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x05, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x22, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0x8a, 0x02, 0x0a, 0x18,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a,
	0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x70, 0x6d, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x82, 0xdb, 0x21, 0x49, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x05,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x32, 0x1e, 0x12, 0x1c, 0x74, 0x70, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22,
	0x31, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x74, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x3a, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0x89, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x72, 0x74, 0x22, 0x9f, 0x01, 0x82, 0xdb, 0x21, 0x46, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x06, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x2a, 0x1e, 0x12, 0x14, 0x74, 0x70, 0x6d, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x1a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2,
	0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x3a, 0x14, 0x74, 0x70, 0x6d,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x74, 0x70, 0x6d, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x8a, 0xcc,
	0x26, 0x02, 0x10, 0x01, 0x12, 0x94, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72,
	0x74, 0x12, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x70, 0x6d, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x22, 0xaa,
	0x01, 0x82, 0xdb, 0x21, 0x3c, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2a, 0x16, 0x12, 0x14, 0x74, 0x70, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x58, 0x3a, 0x14, 0x74,
	0x70, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x1a, 0x40, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x74, 0x70, 0x6d, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74,
	0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xc8, 0x01, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a,
	0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x70, 0x6d, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x67, 0x82,
	0xdb, 0x21, 0x24, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2a,
	0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x70, 0x6d, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x7d,
	0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x1a, 0x2b, 0xca, 0x41, 0x0e, 0x7a, 0x74, 0x70, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e,
	0x63, 0x6f, 0x6d, 0x42, 0xd6, 0x02, 0xe8, 0xde, 0x21, 0x00, 0x82, 0xff, 0xd0, 0x02, 0x5c, 0x0a,
	0x1b, 0x74, 0x70, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x7a, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x70, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x8a, 0xff, 0xd0, 0x02, 0x5c,
	0x0a, 0x1b, 0x74, 0x70, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x7a, 0x74, 0x70, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x70, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42,
	0x1e, 0x54, 0x70, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x00, 0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x7a, 0x74,
	0x70, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x70, 0x6d, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x3b, 0x74, 0x70, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescOnce sync.Once
	edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescData = edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDesc
)

func edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescGZIP() []byte {
	edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescOnce.Do(func() {
		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescData)
	})
	return edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDescData
}

var edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_goTypes = []interface{}{
	(*GetTpmAttestationCertRequest)(nil),                      // 0: ntt.ztp.v1.GetTpmAttestationCertRequest
	(*BatchGetTpmAttestationCertsRequest)(nil),                // 1: ntt.ztp.v1.BatchGetTpmAttestationCertsRequest
	(*BatchGetTpmAttestationCertsResponse)(nil),               // 2: ntt.ztp.v1.BatchGetTpmAttestationCertsResponse
	(*ListTpmAttestationCertsRequest)(nil),                    // 3: ntt.ztp.v1.ListTpmAttestationCertsRequest
	(*ListTpmAttestationCertsResponse)(nil),                   // 4: ntt.ztp.v1.ListTpmAttestationCertsResponse
	(*WatchTpmAttestationCertRequest)(nil),                    // 5: ntt.ztp.v1.WatchTpmAttestationCertRequest
	(*WatchTpmAttestationCertResponse)(nil),                   // 6: ntt.ztp.v1.WatchTpmAttestationCertResponse
	(*WatchTpmAttestationCertsRequest)(nil),                   // 7: ntt.ztp.v1.WatchTpmAttestationCertsRequest
	(*WatchTpmAttestationCertsResponse)(nil),                  // 8: ntt.ztp.v1.WatchTpmAttestationCertsResponse
	(*CreateTpmAttestationCertRequest)(nil),                   // 9: ntt.ztp.v1.CreateTpmAttestationCertRequest
	(*UpdateTpmAttestationCertRequest)(nil),                   // 10: ntt.ztp.v1.UpdateTpmAttestationCertRequest
	(*DeleteTpmAttestationCertRequest)(nil),                   // 11: ntt.ztp.v1.DeleteTpmAttestationCertRequest
	(*WatchTpmAttestationCertsResponse_PageTokenChange)(nil),  // 12: ntt.ztp.v1.WatchTpmAttestationCertsResponse.PageTokenChange
	(*UpdateTpmAttestationCertRequest_CAS)(nil),               // 13: ntt.ztp.v1.UpdateTpmAttestationCertRequest.CAS
	(*tpm_attestation_cert.TpmAttestationCert_FieldMask)(nil), // 14: ntt.ztp.v1.TpmAttestationCert_FieldMask
	(view.View)(0), // 15: goten.types.View
	(*tpm_attestation_cert.TpmAttestationCert)(nil),       // 16: ntt.ztp.v1.TpmAttestationCert
	(*tpm_attestation_cert.TpmAttestationCertChange)(nil), // 17: ntt.ztp.v1.TpmAttestationCertChange
	(watch_type.WatchType)(0),                             // 18: goten.types.WatchType
	(*timestamppb.Timestamp)(nil),                         // 19: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                                 // 20: google.protobuf.Empty
}
var edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_depIdxs = []int32{
	14, // 0: ntt.ztp.v1.GetTpmAttestationCertRequest.field_mask:type_name -> ntt.ztp.v1.TpmAttestationCert_FieldMask
	15, // 1: ntt.ztp.v1.GetTpmAttestationCertRequest.view:type_name -> goten.types.View
	14, // 2: ntt.ztp.v1.BatchGetTpmAttestationCertsRequest.field_mask:type_name -> ntt.ztp.v1.TpmAttestationCert_FieldMask
	15, // 3: ntt.ztp.v1.BatchGetTpmAttestationCertsRequest.view:type_name -> goten.types.View
	16, // 4: ntt.ztp.v1.BatchGetTpmAttestationCertsResponse.tpm_attestation_certs:type_name -> ntt.ztp.v1.TpmAttestationCert
	14, // 5: ntt.ztp.v1.ListTpmAttestationCertsRequest.field_mask:type_name -> ntt.ztp.v1.TpmAttestationCert_FieldMask
	15, // 6: ntt.ztp.v1.ListTpmAttestationCertsRequest.view:type_name -> goten.types.View
	16, // 7: ntt.ztp.v1.ListTpmAttestationCertsResponse.tpm_attestation_certs:type_name -> ntt.ztp.v1.TpmAttestationCert
	14, // 8: ntt.ztp.v1.WatchTpmAttestationCertRequest.field_mask:type_name -> ntt.ztp.v1.TpmAttestationCert_FieldMask
	15, // 9: ntt.ztp.v1.WatchTpmAttestationCertRequest.view:type_name -> goten.types.View
	17, // 10: ntt.ztp.v1.WatchTpmAttestationCertResponse.change:type_name -> ntt.ztp.v1.TpmAttestationCertChange
	18, // 11: ntt.ztp.v1.WatchTpmAttestationCertsRequest.type:type_name -> goten.types.WatchType
	19, // 12: ntt.ztp.v1.WatchTpmAttestationCertsRequest.starting_time:type_name -> google.protobuf.Timestamp
	14, // 13: ntt.ztp.v1.WatchTpmAttestationCertsRequest.field_mask:type_name -> ntt.ztp.v1.TpmAttestationCert_FieldMask
	15, // 14: ntt.ztp.v1.WatchTpmAttestationCertsRequest.view:type_name -> goten.types.View
	17, // 15: ntt.ztp.v1.WatchTpmAttestationCertsResponse.tpm_attestation_cert_changes:type_name -> ntt.ztp.v1.TpmAttestationCertChange
	12, // 16: ntt.ztp.v1.WatchTpmAttestationCertsResponse.page_token_change:type_name -> ntt.ztp.v1.WatchTpmAttestationCertsResponse.PageTokenChange
	16, // 17: ntt.ztp.v1.CreateTpmAttestationCertRequest.tpm_attestation_cert:type_name -> ntt.ztp.v1.TpmAttestationCert
	16, // 18: ntt.ztp.v1.UpdateTpmAttestationCertRequest.tpm_attestation_cert:type_name -> ntt.ztp.v1.TpmAttestationCert
	14, // 19: ntt.ztp.v1.UpdateTpmAttestationCertRequest.update_mask:type_name -> ntt.ztp.v1.TpmAttestationCert_FieldMask
	13, // 20: ntt.ztp.v1.UpdateTpmAttestationCertRequest.cas:type_name -> ntt.ztp.v1.UpdateTpmAttestationCertRequest.CAS
	16, // 21: ntt.ztp.v1.UpdateTpmAttestationCertRequest.CAS.conditional_state:type_name -> ntt.ztp.v1.TpmAttestationCert
	14, // 22: ntt.ztp.v1.UpdateTpmAttestationCertRequest.CAS.field_mask:type_name -> ntt.ztp.v1.TpmAttestationCert_FieldMask
	0,  // 23: ntt.ztp.v1.TpmAttestationCertService.GetTpmAttestationCert:input_type -> ntt.ztp.v1.GetTpmAttestationCertRequest
	1,  // 24: ntt.ztp.v1.TpmAttestationCertService.BatchGetTpmAttestationCerts:input_type -> ntt.ztp.v1.BatchGetTpmAttestationCertsRequest
	3,  // 25: ntt.ztp.v1.TpmAttestationCertService.ListTpmAttestationCerts:input_type -> ntt.ztp.v1.ListTpmAttestationCertsRequest
	5,  // 26: ntt.ztp.v1.TpmAttestationCertService.WatchTpmAttestationCert:input_type -> ntt.ztp.v1.WatchTpmAttestationCertRequest
	7,  // 27: ntt.ztp.v1.TpmAttestationCertService.WatchTpmAttestationCerts:input_type -> ntt.ztp.v1.WatchTpmAttestationCertsRequest
	9,  // 28: ntt.ztp.v1.TpmAttestationCertService.CreateTpmAttestationCert:input_type -> ntt.ztp.v1.CreateTpmAttestationCertRequest
	10, // 29: ntt.ztp.v1.TpmAttestationCertService.UpdateTpmAttestationCert:input_type -> ntt.ztp.v1.UpdateTpmAttestationCertRequest
	11, // 30: ntt.ztp.v1.TpmAttestationCertService.DeleteTpmAttestationCert:input_type -> ntt.ztp.v1.DeleteTpmAttestationCertRequest
	16, // 31: ntt.ztp.v1.TpmAttestationCertService.GetTpmAttestationCert:output_type -> ntt.ztp.v1.TpmAttestationCert
	2,  // 32: ntt.ztp.v1.TpmAttestationCertService.BatchGetTpmAttestationCerts:output_type -> ntt.ztp.v1.BatchGetTpmAttestationCertsResponse
	4,  // 33: ntt.ztp.v1.TpmAttestationCertService.ListTpmAttestationCerts:output_type -> ntt.ztp.v1.ListTpmAttestationCertsResponse
	6,  // 34: ntt.ztp.v1.TpmAttestationCertService.WatchTpmAttestationCert:output_type -> ntt.ztp.v1.WatchTpmAttestationCertResponse
	8,  // 35: ntt.ztp.v1.TpmAttestationCertService.WatchTpmAttestationCerts:output_type -> ntt.ztp.v1.WatchTpmAttestationCertsResponse
	16, // 36: ntt.ztp.v1.TpmAttestationCertService.CreateTpmAttestationCert:output_type -> ntt.ztp.v1.TpmAttestationCert
	16, // 37: ntt.ztp.v1.TpmAttestationCertService.UpdateTpmAttestationCert:output_type -> ntt.ztp.v1.TpmAttestationCert
	20, // 38: ntt.ztp.v1.TpmAttestationCertService.DeleteTpmAttestationCert:output_type -> google.protobuf.Empty
	31, // [31:39] is the sub-list for method output_type
	23, // [23:31] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_init() }
func edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_init() {
	if edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTpmAttestationCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTpmAttestationCertsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTpmAttestationCertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTpmAttestationCertsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTpmAttestationCertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTpmAttestationCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTpmAttestationCertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTpmAttestationCertsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTpmAttestationCertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTpmAttestationCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTpmAttestationCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTpmAttestationCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTpmAttestationCertsResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTpmAttestationCertRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_goTypes,
		DependencyIndexes: edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_depIdxs,
		MessageInfos:      edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_msgTypes,
	}.Build()
	edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto = out.File
	edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_rawDesc = nil
	edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_goTypes = nil
	edgelq_ztp_proto_v1_tpm_attestation_cert_service_proto_depIdxs = nil
}
