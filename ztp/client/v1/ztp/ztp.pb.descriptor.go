// Code generated by protoc-gen-goten-client
// Service: Ztp
// DO NOT EDIT!!!

package ztp_client

import (
	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	deviceztp_client "github.com/cloudwan/edgelq-sdk/ztp/client/v1/deviceztp"
	edgelq_instance_client "github.com/cloudwan/edgelq-sdk/ztp/client/v1/edgelq_instance"
	hardware_client "github.com/cloudwan/edgelq-sdk/ztp/client/v1/hardware"
	project_client "github.com/cloudwan/edgelq-sdk/ztp/client/v1/project"
	tpm_attestation_cert_client "github.com/cloudwan/edgelq-sdk/ztp/client/v1/tpm_attestation_cert"
	edgelq_instance "github.com/cloudwan/edgelq-sdk/ztp/resources/v1/edgelq_instance"
	hardware "github.com/cloudwan/edgelq-sdk/ztp/resources/v1/hardware"
	project "github.com/cloudwan/edgelq-sdk/ztp/resources/v1/project"
	tpm_attestation_cert "github.com/cloudwan/edgelq-sdk/ztp/resources/v1/tpm_attestation_cert"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &edgelq_instance.EdgelqInstance{}
	_ = &edgelq_instance_client.GetEdgelqInstanceRequest{}
	_ = &hardware.Hardware{}
	_ = &hardware_client.GetHardwareRequest{}
	_ = &project.Project{}
	_ = &project_client.GetProjectRequest{}
	_ = &tpm_attestation_cert.TpmAttestationCert{}
	_ = &tpm_attestation_cert_client.GetTpmAttestationCertRequest{}
)

var (
	descriptorInitialized bool
	ztpDescriptor         *ZtpDescriptor
)

type ZtpDescriptor struct{}

func (d *ZtpDescriptor) GetServiceName() string {
	return "ztp"
}

func (d *ZtpDescriptor) GetServiceDomain() string {
	return "ztp.edgelq.com"
}

func (d *ZtpDescriptor) GetVersion() string {
	return "v1"
}

func (d *ZtpDescriptor) GetNextVersion() string {

	return ""
}

func (d *ZtpDescriptor) AllResourceDescriptors() []gotenresource.Descriptor {
	return []gotenresource.Descriptor{
		edgelq_instance.GetDescriptor(),
		hardware.GetDescriptor(),
		project.GetDescriptor(),
		tpm_attestation_cert.GetDescriptor(),
	}
}

func (d *ZtpDescriptor) AllApiDescriptors() []gotenclient.ApiDescriptor {
	return []gotenclient.ApiDescriptor{
		deviceztp_client.GetDeviceztpServiceDescriptor(),
		edgelq_instance_client.GetEdgelqInstanceServiceDescriptor(),
		hardware_client.GetHardwareServiceDescriptor(),
		project_client.GetProjectServiceDescriptor(),
		tpm_attestation_cert_client.GetTpmAttestationCertServiceDescriptor(),
	}
}

func (d *ZtpDescriptor) AllImportedServiceInfos() []gotenclient.ServiceImportInfo {
	return []gotenclient.ServiceImportInfo{
		{
			Domain:  "iam.edgelq.com",
			Version: "v1",
		},
	}
}

func GetZtpDescriptor() *ZtpDescriptor {
	return ztpDescriptor
}

func initDescriptor() {
	ztpDescriptor = &ZtpDescriptor{}
	gotenclient.GetRegistry().RegisterSvcDescriptor(ztpDescriptor)
}

func init() {
	if !descriptorInitialized {
		initDescriptor()
		descriptorInitialized = true
	}
}
