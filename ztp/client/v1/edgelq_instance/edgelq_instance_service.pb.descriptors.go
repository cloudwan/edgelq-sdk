// Code generated by protoc-gen-goten-client
// API: EdgelqInstanceService
// DO NOT EDIT!!!

package edgelq_instance_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	edgelq_instance "github.com/cloudwan/edgelq-sdk/ztp/resources/v1/edgelq_instance"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &edgelq_instance.EdgelqInstance{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized            bool
	edgelqInstanceServiceDescriptor   *EdgelqInstanceServiceDescriptor
	getEdgelqInstanceDescriptor       *GetEdgelqInstanceDescriptor
	batchGetEdgelqInstancesDescriptor *BatchGetEdgelqInstancesDescriptor
	listEdgelqInstancesDescriptor     *ListEdgelqInstancesDescriptor
	watchEdgelqInstanceDescriptor     *WatchEdgelqInstanceDescriptor
	watchEdgelqInstancesDescriptor    *WatchEdgelqInstancesDescriptor
	createEdgelqInstanceDescriptor    *CreateEdgelqInstanceDescriptor
	updateEdgelqInstanceDescriptor    *UpdateEdgelqInstanceDescriptor
	deleteEdgelqInstanceDescriptor    *DeleteEdgelqInstanceDescriptor
	associateHardwareDescriptor       *AssociateHardwareDescriptor
	dissociateHardwareDescriptor      *DissociateHardwareDescriptor
)

type GetEdgelqInstanceDescriptor struct{}

type GetEdgelqInstanceDescriptorClientMsgHandle struct{}

type GetEdgelqInstanceDescriptorServerMsgHandle struct{}

func (d *GetEdgelqInstanceDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetEdgelqInstanceRequest{}
}

func (d *GetEdgelqInstanceDescriptor) NewEmptyServerMsg() proto.Message {
	return &edgelq_instance.EdgelqInstance{}
}

func (d *GetEdgelqInstanceDescriptor) IsUnary() bool {
	return true
}

func (d *GetEdgelqInstanceDescriptor) IsClientStream() bool {
	return false
}

func (d *GetEdgelqInstanceDescriptor) IsServerStream() bool {
	return false
}

func (d *GetEdgelqInstanceDescriptor) IsCollection() bool {
	return false
}

func (d *GetEdgelqInstanceDescriptor) IsPlural() bool {
	return false
}

func (d *GetEdgelqInstanceDescriptor) HasResource() bool {
	return true
}

func (d *GetEdgelqInstanceDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetEdgelqInstanceDescriptor) GetVerb() string {
	return "get"
}

func (d *GetEdgelqInstanceDescriptor) GetMethodName() string {
	return "GetEdgelqInstance"
}

func (d *GetEdgelqInstanceDescriptor) GetFullMethodName() string {
	return "/ntt.ztp.v1.EdgelqInstanceService/GetEdgelqInstance"
}

func (d *GetEdgelqInstanceDescriptor) GetProtoPkgName() string {
	return "ntt.ztp.v1"
}

func (d *GetEdgelqInstanceDescriptor) GetApiName() string {
	return "EdgelqInstanceService"
}

func (d *GetEdgelqInstanceDescriptor) GetServiceDomain() string {
	return "ztp.edgelq.com"
}

func (d *GetEdgelqInstanceDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetEdgelqInstanceDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return edgelqInstanceServiceDescriptor
}

func (d *GetEdgelqInstanceDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return edgelq_instance.GetDescriptor()
}

func (d *GetEdgelqInstanceDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetEdgelqInstanceDescriptorClientMsgHandle{}
}

func (d *GetEdgelqInstanceDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetEdgelqInstanceDescriptorServerMsgHandle{}
}

func (h *GetEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetEdgelqInstanceRequest) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*edgelq_instance.Name)(nil)
}

func (h *GetEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetEdgelqInstanceRequest) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetEdgelqInstanceDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetEdgelqInstanceRequest) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetEdgelqInstanceRequest) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetEdgelqInstanceRequest) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*edgelq_instance.EdgelqInstance)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*edgelq_instance.EdgelqInstance) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*edgelq_instance.Name)(nil)
}

func (h *GetEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*edgelq_instance.EdgelqInstance)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*edgelq_instance.EdgelqInstance) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetEdgelqInstanceDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*edgelq_instance.EdgelqInstance)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*edgelq_instance.EdgelqInstance) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*edgelq_instance.EdgelqInstance)
}

func (h *GetEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*edgelq_instance.EdgelqInstance)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*edgelq_instance.EdgelqInstance) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetEdgelqInstanceDescriptor() *GetEdgelqInstanceDescriptor {
	return getEdgelqInstanceDescriptor
}

type BatchGetEdgelqInstancesDescriptor struct{}

type BatchGetEdgelqInstancesDescriptorClientMsgHandle struct{}

type BatchGetEdgelqInstancesDescriptorServerMsgHandle struct{}

func (d *BatchGetEdgelqInstancesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetEdgelqInstancesRequest{}
}

func (d *BatchGetEdgelqInstancesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetEdgelqInstancesResponse{}
}

func (d *BatchGetEdgelqInstancesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetEdgelqInstancesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetEdgelqInstancesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetEdgelqInstancesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetEdgelqInstancesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetEdgelqInstancesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetEdgelqInstancesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetEdgelqInstancesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetEdgelqInstancesDescriptor) GetMethodName() string {
	return "BatchGetEdgelqInstances"
}

func (d *BatchGetEdgelqInstancesDescriptor) GetFullMethodName() string {
	return "/ntt.ztp.v1.EdgelqInstanceService/BatchGetEdgelqInstances"
}

func (d *BatchGetEdgelqInstancesDescriptor) GetProtoPkgName() string {
	return "ntt.ztp.v1"
}

func (d *BatchGetEdgelqInstancesDescriptor) GetApiName() string {
	return "EdgelqInstanceService"
}

func (d *BatchGetEdgelqInstancesDescriptor) GetServiceDomain() string {
	return "ztp.edgelq.com"
}

func (d *BatchGetEdgelqInstancesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetEdgelqInstancesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return edgelqInstanceServiceDescriptor
}

func (d *BatchGetEdgelqInstancesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return edgelq_instance.GetDescriptor()
}

func (d *BatchGetEdgelqInstancesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetEdgelqInstancesDescriptorClientMsgHandle{}
}

func (d *BatchGetEdgelqInstancesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetEdgelqInstancesDescriptorServerMsgHandle{}
}

func (h *BatchGetEdgelqInstancesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetEdgelqInstancesRequest) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetEdgelqInstancesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetEdgelqInstancesRequest) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return edgelq_instance.EdgelqInstanceNameList(names)
		}
	}
	return (edgelq_instance.EdgelqInstanceNameList)(nil)
}

func (h *BatchGetEdgelqInstancesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetEdgelqInstancesRequest) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetEdgelqInstancesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetEdgelqInstancesRequest) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetEdgelqInstancesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetEdgelqInstancesRequest) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetEdgelqInstancesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetEdgelqInstancesResponse) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetEdgelqInstancesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetEdgelqInstancesResponse) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetEdgelqInstances(); len(resources) > 0 {
			list := make(edgelq_instance.EdgelqInstanceNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (edgelq_instance.EdgelqInstanceNameList)(nil)
}

func (h *BatchGetEdgelqInstancesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetEdgelqInstancesResponse) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetEdgelqInstancesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetEdgelqInstancesResponse) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetEdgelqInstancesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetEdgelqInstancesResponse) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetEdgelqInstances(); len(resources) > 0 {
			return edgelq_instance.EdgelqInstanceList(resources)
		}
	}
	return (edgelq_instance.EdgelqInstanceList)(nil)
}

func GetBatchGetEdgelqInstancesDescriptor() *BatchGetEdgelqInstancesDescriptor {
	return batchGetEdgelqInstancesDescriptor
}

type ListEdgelqInstancesDescriptor struct{}

type ListEdgelqInstancesDescriptorClientMsgHandle struct{}

type ListEdgelqInstancesDescriptorServerMsgHandle struct{}

func (d *ListEdgelqInstancesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListEdgelqInstancesRequest{}
}

func (d *ListEdgelqInstancesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListEdgelqInstancesResponse{}
}

func (d *ListEdgelqInstancesDescriptor) IsUnary() bool {
	return true
}

func (d *ListEdgelqInstancesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListEdgelqInstancesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListEdgelqInstancesDescriptor) IsCollection() bool {
	return true
}

func (d *ListEdgelqInstancesDescriptor) IsPlural() bool {
	return true
}

func (d *ListEdgelqInstancesDescriptor) HasResource() bool {
	return true
}

func (d *ListEdgelqInstancesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListEdgelqInstancesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListEdgelqInstancesDescriptor) GetMethodName() string {
	return "ListEdgelqInstances"
}

func (d *ListEdgelqInstancesDescriptor) GetFullMethodName() string {
	return "/ntt.ztp.v1.EdgelqInstanceService/ListEdgelqInstances"
}

func (d *ListEdgelqInstancesDescriptor) GetProtoPkgName() string {
	return "ntt.ztp.v1"
}

func (d *ListEdgelqInstancesDescriptor) GetApiName() string {
	return "EdgelqInstanceService"
}

func (d *ListEdgelqInstancesDescriptor) GetServiceDomain() string {
	return "ztp.edgelq.com"
}

func (d *ListEdgelqInstancesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListEdgelqInstancesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return edgelqInstanceServiceDescriptor
}

func (d *ListEdgelqInstancesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return edgelq_instance.GetDescriptor()
}

func (d *ListEdgelqInstancesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListEdgelqInstancesDescriptorClientMsgHandle{}
}

func (d *ListEdgelqInstancesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListEdgelqInstancesDescriptorServerMsgHandle{}
}

func (h *ListEdgelqInstancesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListEdgelqInstancesRequest) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListEdgelqInstancesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListEdgelqInstancesRequest) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListEdgelqInstancesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListEdgelqInstancesRequest) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*edgelq_instance.ParentName)(nil)
}

func (h *ListEdgelqInstancesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListEdgelqInstancesRequest) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListEdgelqInstancesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListEdgelqInstancesRequest) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListEdgelqInstancesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListEdgelqInstancesResponse) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListEdgelqInstancesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListEdgelqInstancesResponse) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetEdgelqInstances(); len(resources) > 0 {
			list := make(edgelq_instance.EdgelqInstanceNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (edgelq_instance.EdgelqInstanceNameList)(nil)
}

func (h *ListEdgelqInstancesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListEdgelqInstancesResponse) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListEdgelqInstancesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListEdgelqInstancesResponse) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListEdgelqInstancesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListEdgelqInstancesResponse) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetEdgelqInstances(); len(resources) > 0 {
			return edgelq_instance.EdgelqInstanceList(resources)
		}
	}
	return (edgelq_instance.EdgelqInstanceList)(nil)
}

func GetListEdgelqInstancesDescriptor() *ListEdgelqInstancesDescriptor {
	return listEdgelqInstancesDescriptor
}

type WatchEdgelqInstanceDescriptor struct{}

type WatchEdgelqInstanceDescriptorClientMsgHandle struct{}

type WatchEdgelqInstanceDescriptorServerMsgHandle struct{}

func (d *WatchEdgelqInstanceDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchEdgelqInstanceRequest{}
}

func (d *WatchEdgelqInstanceDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchEdgelqInstanceResponse{}
}

func (d *WatchEdgelqInstanceDescriptor) IsUnary() bool {
	return false
}

func (d *WatchEdgelqInstanceDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchEdgelqInstanceDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchEdgelqInstanceDescriptor) IsCollection() bool {
	return false
}

func (d *WatchEdgelqInstanceDescriptor) IsPlural() bool {
	return false
}

func (d *WatchEdgelqInstanceDescriptor) HasResource() bool {
	return true
}

func (d *WatchEdgelqInstanceDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchEdgelqInstanceDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchEdgelqInstanceDescriptor) GetMethodName() string {
	return "WatchEdgelqInstance"
}

func (d *WatchEdgelqInstanceDescriptor) GetFullMethodName() string {
	return "/ntt.ztp.v1.EdgelqInstanceService/WatchEdgelqInstance"
}

func (d *WatchEdgelqInstanceDescriptor) GetProtoPkgName() string {
	return "ntt.ztp.v1"
}

func (d *WatchEdgelqInstanceDescriptor) GetApiName() string {
	return "EdgelqInstanceService"
}

func (d *WatchEdgelqInstanceDescriptor) GetServiceDomain() string {
	return "ztp.edgelq.com"
}

func (d *WatchEdgelqInstanceDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchEdgelqInstanceDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return edgelqInstanceServiceDescriptor
}

func (d *WatchEdgelqInstanceDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return edgelq_instance.GetDescriptor()
}

func (d *WatchEdgelqInstanceDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchEdgelqInstanceDescriptorClientMsgHandle{}
}

func (d *WatchEdgelqInstanceDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchEdgelqInstanceDescriptorServerMsgHandle{}
}

func (h *WatchEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchEdgelqInstanceRequest) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*edgelq_instance.Name)(nil)
}

func (h *WatchEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchEdgelqInstanceRequest) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchEdgelqInstanceDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchEdgelqInstanceRequest) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchEdgelqInstanceRequest) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchEdgelqInstanceRequest) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchEdgelqInstanceResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchEdgelqInstanceResponse) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *edgelq_instance.EdgelqInstanceChange_Added_:
				return tResChange.Added.GetEdgelqInstance().GetName()
			case *edgelq_instance.EdgelqInstanceChange_Modified_:
				return tResChange.Modified.GetName()
			case *edgelq_instance.EdgelqInstanceChange_Removed_:
				return tResChange.Removed.GetName()
			case *edgelq_instance.EdgelqInstanceChange_Current_:
				return tResChange.Current.GetEdgelqInstance().GetName()
			}
		}
	}
	return (*edgelq_instance.Name)(nil)
}

func (h *WatchEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchEdgelqInstanceResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchEdgelqInstanceResponse) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchEdgelqInstanceDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchEdgelqInstanceResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchEdgelqInstanceResponse) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchEdgelqInstanceResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchEdgelqInstanceResponse) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *edgelq_instance.EdgelqInstanceChange_Added_:
				return tResChange.Added.GetEdgelqInstance()
			case *edgelq_instance.EdgelqInstanceChange_Modified_:
				return tResChange.Modified.GetEdgelqInstance()
			case *edgelq_instance.EdgelqInstanceChange_Current_:
				return tResChange.Current.GetEdgelqInstance()
			}
		}
	}
	return (*edgelq_instance.EdgelqInstance)(nil)
}

func (h *WatchEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchEdgelqInstanceResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchEdgelqInstanceResponse) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchEdgelqInstanceDescriptor() *WatchEdgelqInstanceDescriptor {
	return watchEdgelqInstanceDescriptor
}

type WatchEdgelqInstancesDescriptor struct{}

type WatchEdgelqInstancesDescriptorClientMsgHandle struct{}

type WatchEdgelqInstancesDescriptorServerMsgHandle struct{}

func (d *WatchEdgelqInstancesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchEdgelqInstancesRequest{}
}

func (d *WatchEdgelqInstancesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchEdgelqInstancesResponse{}
}

func (d *WatchEdgelqInstancesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchEdgelqInstancesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchEdgelqInstancesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchEdgelqInstancesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchEdgelqInstancesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchEdgelqInstancesDescriptor) HasResource() bool {
	return true
}

func (d *WatchEdgelqInstancesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchEdgelqInstancesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchEdgelqInstancesDescriptor) GetMethodName() string {
	return "WatchEdgelqInstances"
}

func (d *WatchEdgelqInstancesDescriptor) GetFullMethodName() string {
	return "/ntt.ztp.v1.EdgelqInstanceService/WatchEdgelqInstances"
}

func (d *WatchEdgelqInstancesDescriptor) GetProtoPkgName() string {
	return "ntt.ztp.v1"
}

func (d *WatchEdgelqInstancesDescriptor) GetApiName() string {
	return "EdgelqInstanceService"
}

func (d *WatchEdgelqInstancesDescriptor) GetServiceDomain() string {
	return "ztp.edgelq.com"
}

func (d *WatchEdgelqInstancesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchEdgelqInstancesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return edgelqInstanceServiceDescriptor
}

func (d *WatchEdgelqInstancesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return edgelq_instance.GetDescriptor()
}

func (d *WatchEdgelqInstancesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchEdgelqInstancesDescriptorClientMsgHandle{}
}

func (d *WatchEdgelqInstancesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchEdgelqInstancesDescriptorServerMsgHandle{}
}

func (h *WatchEdgelqInstancesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchEdgelqInstancesRequest) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchEdgelqInstancesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchEdgelqInstancesRequest) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchEdgelqInstancesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchEdgelqInstancesRequest) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*edgelq_instance.ParentName)(nil)
}

func (h *WatchEdgelqInstancesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchEdgelqInstancesRequest) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchEdgelqInstancesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchEdgelqInstancesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchEdgelqInstancesRequest) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchEdgelqInstancesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchEdgelqInstancesResponse) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchEdgelqInstancesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchEdgelqInstancesResponse) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetEdgelqInstanceChanges(); len(resChanges) > 0 {
			list := make(edgelq_instance.EdgelqInstanceNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *edgelq_instance.EdgelqInstanceChange_Added_:
					list = append(list, tResChange.Added.GetEdgelqInstance().GetName())
				case *edgelq_instance.EdgelqInstanceChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *edgelq_instance.EdgelqInstanceChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *edgelq_instance.EdgelqInstanceChange_Current_:
					list = append(list, tResChange.Current.GetEdgelqInstance().GetName())
				}
			}
			return list
		}
	}
	return (edgelq_instance.EdgelqInstanceNameList)(nil)
}

func (h *WatchEdgelqInstancesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchEdgelqInstancesResponse) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchEdgelqInstancesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchEdgelqInstancesResponse) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchEdgelqInstancesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchEdgelqInstancesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchEdgelqInstancesResponse) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetEdgelqInstanceChanges(); len(resChanges) > 0 {
			list := make(edgelq_instance.EdgelqInstanceList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *edgelq_instance.EdgelqInstanceChange_Added_:
					list = append(list, tResChange.Added.GetEdgelqInstance())
				case *edgelq_instance.EdgelqInstanceChange_Modified_:
					list = append(list, tResChange.Modified.GetEdgelqInstance())
				case *edgelq_instance.EdgelqInstanceChange_Current_:
					list = append(list, tResChange.Current.GetEdgelqInstance())
				}
			}
			return list
		}
	}
	return (edgelq_instance.EdgelqInstanceList)(nil)
}

func GetWatchEdgelqInstancesDescriptor() *WatchEdgelqInstancesDescriptor {
	return watchEdgelqInstancesDescriptor
}

type CreateEdgelqInstanceDescriptor struct{}

type CreateEdgelqInstanceDescriptorClientMsgHandle struct{}

type CreateEdgelqInstanceDescriptorServerMsgHandle struct{}

func (d *CreateEdgelqInstanceDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateEdgelqInstanceRequest{}
}

func (d *CreateEdgelqInstanceDescriptor) NewEmptyServerMsg() proto.Message {
	return &edgelq_instance.EdgelqInstance{}
}

func (d *CreateEdgelqInstanceDescriptor) IsUnary() bool {
	return true
}

func (d *CreateEdgelqInstanceDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateEdgelqInstanceDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateEdgelqInstanceDescriptor) IsCollection() bool {
	return true
}

func (d *CreateEdgelqInstanceDescriptor) IsPlural() bool {
	return false
}

func (d *CreateEdgelqInstanceDescriptor) HasResource() bool {
	return true
}

func (d *CreateEdgelqInstanceDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateEdgelqInstanceDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateEdgelqInstanceDescriptor) GetMethodName() string {
	return "CreateEdgelqInstance"
}

func (d *CreateEdgelqInstanceDescriptor) GetFullMethodName() string {
	return "/ntt.ztp.v1.EdgelqInstanceService/CreateEdgelqInstance"
}

func (d *CreateEdgelqInstanceDescriptor) GetProtoPkgName() string {
	return "ntt.ztp.v1"
}

func (d *CreateEdgelqInstanceDescriptor) GetApiName() string {
	return "EdgelqInstanceService"
}

func (d *CreateEdgelqInstanceDescriptor) GetServiceDomain() string {
	return "ztp.edgelq.com"
}

func (d *CreateEdgelqInstanceDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateEdgelqInstanceDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return edgelqInstanceServiceDescriptor
}

func (d *CreateEdgelqInstanceDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return edgelq_instance.GetDescriptor()
}

func (d *CreateEdgelqInstanceDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateEdgelqInstanceDescriptorClientMsgHandle{}
}

func (d *CreateEdgelqInstanceDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateEdgelqInstanceDescriptorServerMsgHandle{}
}

func (h *CreateEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateEdgelqInstanceRequest) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetEdgelqInstance()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*edgelq_instance.Name)(nil)
}

func (h *CreateEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateEdgelqInstanceRequest) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateEdgelqInstanceDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateEdgelqInstanceRequest) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*edgelq_instance.ParentName)(nil)
}

func (h *CreateEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateEdgelqInstanceRequest) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetEdgelqInstance()
	}
	return (*edgelq_instance.EdgelqInstance)(nil)
}

func (h *CreateEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateEdgelqInstanceRequest) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*edgelq_instance.EdgelqInstance)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*edgelq_instance.EdgelqInstance) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*edgelq_instance.Name)(nil)
}

func (h *CreateEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*edgelq_instance.EdgelqInstance)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*edgelq_instance.EdgelqInstance) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateEdgelqInstanceDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*edgelq_instance.EdgelqInstance)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*edgelq_instance.EdgelqInstance) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*edgelq_instance.EdgelqInstance)
}

func (h *CreateEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*edgelq_instance.EdgelqInstance)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*edgelq_instance.EdgelqInstance) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateEdgelqInstanceDescriptor() *CreateEdgelqInstanceDescriptor {
	return createEdgelqInstanceDescriptor
}

type UpdateEdgelqInstanceDescriptor struct{}

type UpdateEdgelqInstanceDescriptorClientMsgHandle struct{}

type UpdateEdgelqInstanceDescriptorServerMsgHandle struct{}

func (d *UpdateEdgelqInstanceDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateEdgelqInstanceRequest{}
}

func (d *UpdateEdgelqInstanceDescriptor) NewEmptyServerMsg() proto.Message {
	return &edgelq_instance.EdgelqInstance{}
}

func (d *UpdateEdgelqInstanceDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateEdgelqInstanceDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateEdgelqInstanceDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateEdgelqInstanceDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateEdgelqInstanceDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateEdgelqInstanceDescriptor) HasResource() bool {
	return true
}

func (d *UpdateEdgelqInstanceDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateEdgelqInstanceDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateEdgelqInstanceDescriptor) GetMethodName() string {
	return "UpdateEdgelqInstance"
}

func (d *UpdateEdgelqInstanceDescriptor) GetFullMethodName() string {
	return "/ntt.ztp.v1.EdgelqInstanceService/UpdateEdgelqInstance"
}

func (d *UpdateEdgelqInstanceDescriptor) GetProtoPkgName() string {
	return "ntt.ztp.v1"
}

func (d *UpdateEdgelqInstanceDescriptor) GetApiName() string {
	return "EdgelqInstanceService"
}

func (d *UpdateEdgelqInstanceDescriptor) GetServiceDomain() string {
	return "ztp.edgelq.com"
}

func (d *UpdateEdgelqInstanceDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateEdgelqInstanceDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return edgelqInstanceServiceDescriptor
}

func (d *UpdateEdgelqInstanceDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return edgelq_instance.GetDescriptor()
}

func (d *UpdateEdgelqInstanceDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateEdgelqInstanceDescriptorClientMsgHandle{}
}

func (d *UpdateEdgelqInstanceDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateEdgelqInstanceDescriptorServerMsgHandle{}
}

func (h *UpdateEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateEdgelqInstanceRequest) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetEdgelqInstance()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*edgelq_instance.Name)(nil)
}

func (h *UpdateEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateEdgelqInstanceRequest) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateEdgelqInstanceDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateEdgelqInstanceRequest) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateEdgelqInstanceRequest) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetEdgelqInstance()
	}
	return (*edgelq_instance.EdgelqInstance)(nil)
}

func (h *UpdateEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateEdgelqInstanceRequest) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*edgelq_instance.EdgelqInstance)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*edgelq_instance.EdgelqInstance) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*edgelq_instance.Name)(nil)
}

func (h *UpdateEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*edgelq_instance.EdgelqInstance)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*edgelq_instance.EdgelqInstance) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateEdgelqInstanceDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*edgelq_instance.EdgelqInstance)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*edgelq_instance.EdgelqInstance) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*edgelq_instance.EdgelqInstance)
}

func (h *UpdateEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*edgelq_instance.EdgelqInstance)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*edgelq_instance.EdgelqInstance) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateEdgelqInstanceDescriptor() *UpdateEdgelqInstanceDescriptor {
	return updateEdgelqInstanceDescriptor
}

type DeleteEdgelqInstanceDescriptor struct{}

type DeleteEdgelqInstanceDescriptorClientMsgHandle struct{}

type DeleteEdgelqInstanceDescriptorServerMsgHandle struct{}

func (d *DeleteEdgelqInstanceDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteEdgelqInstanceRequest{}
}

func (d *DeleteEdgelqInstanceDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteEdgelqInstanceDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteEdgelqInstanceDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteEdgelqInstanceDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteEdgelqInstanceDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteEdgelqInstanceDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteEdgelqInstanceDescriptor) HasResource() bool {
	return true
}

func (d *DeleteEdgelqInstanceDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteEdgelqInstanceDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteEdgelqInstanceDescriptor) GetMethodName() string {
	return "DeleteEdgelqInstance"
}

func (d *DeleteEdgelqInstanceDescriptor) GetFullMethodName() string {
	return "/ntt.ztp.v1.EdgelqInstanceService/DeleteEdgelqInstance"
}

func (d *DeleteEdgelqInstanceDescriptor) GetProtoPkgName() string {
	return "ntt.ztp.v1"
}

func (d *DeleteEdgelqInstanceDescriptor) GetApiName() string {
	return "EdgelqInstanceService"
}

func (d *DeleteEdgelqInstanceDescriptor) GetServiceDomain() string {
	return "ztp.edgelq.com"
}

func (d *DeleteEdgelqInstanceDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteEdgelqInstanceDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return edgelqInstanceServiceDescriptor
}

func (d *DeleteEdgelqInstanceDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return edgelq_instance.GetDescriptor()
}

func (d *DeleteEdgelqInstanceDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteEdgelqInstanceDescriptorClientMsgHandle{}
}

func (d *DeleteEdgelqInstanceDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteEdgelqInstanceDescriptorServerMsgHandle{}
}

func (h *DeleteEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteEdgelqInstanceRequest) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*edgelq_instance.Name)(nil)
}

func (h *DeleteEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteEdgelqInstanceRequest) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteEdgelqInstanceDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteEdgelqInstanceRequest) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteEdgelqInstanceRequest) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteEdgelqInstanceDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteEdgelqInstanceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteEdgelqInstanceRequest) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteEdgelqInstanceDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteEdgelqInstanceDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteEdgelqInstanceDescriptor() *DeleteEdgelqInstanceDescriptor {
	return deleteEdgelqInstanceDescriptor
}

type AssociateHardwareDescriptor struct{}

type AssociateHardwareDescriptorClientMsgHandle struct{}

type AssociateHardwareDescriptorServerMsgHandle struct{}

func (d *AssociateHardwareDescriptor) NewEmptyClientMsg() proto.Message {
	return &AssociateHardwareRequest{}
}

func (d *AssociateHardwareDescriptor) NewEmptyServerMsg() proto.Message {
	return &AssociateHardwareResponse{}
}

func (d *AssociateHardwareDescriptor) IsUnary() bool {
	return true
}

func (d *AssociateHardwareDescriptor) IsClientStream() bool {
	return false
}

func (d *AssociateHardwareDescriptor) IsServerStream() bool {
	return false
}

func (d *AssociateHardwareDescriptor) IsCollection() bool {
	return false
}

func (d *AssociateHardwareDescriptor) IsPlural() bool {
	return false
}

func (d *AssociateHardwareDescriptor) HasResource() bool {
	return true
}

func (d *AssociateHardwareDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *AssociateHardwareDescriptor) GetVerb() string {
	return "associateHardware"
}

func (d *AssociateHardwareDescriptor) GetMethodName() string {
	return "AssociateHardware"
}

func (d *AssociateHardwareDescriptor) GetFullMethodName() string {
	return "/ntt.ztp.v1.EdgelqInstanceService/AssociateHardware"
}

func (d *AssociateHardwareDescriptor) GetProtoPkgName() string {
	return "ntt.ztp.v1"
}

func (d *AssociateHardwareDescriptor) GetApiName() string {
	return "EdgelqInstanceService"
}

func (d *AssociateHardwareDescriptor) GetServiceDomain() string {
	return "ztp.edgelq.com"
}

func (d *AssociateHardwareDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *AssociateHardwareDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return edgelqInstanceServiceDescriptor
}

func (d *AssociateHardwareDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return edgelq_instance.GetDescriptor()
}

func (d *AssociateHardwareDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &AssociateHardwareDescriptorClientMsgHandle{}
}

func (d *AssociateHardwareDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &AssociateHardwareDescriptorServerMsgHandle{}
}

func (h *AssociateHardwareDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AssociateHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*AssociateHardwareRequest) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*edgelq_instance.Name)(nil)
}

func (h *AssociateHardwareDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*AssociateHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*AssociateHardwareRequest) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *AssociateHardwareDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AssociateHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*AssociateHardwareRequest) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *AssociateHardwareDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*AssociateHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*AssociateHardwareRequest) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *AssociateHardwareDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*AssociateHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*AssociateHardwareRequest) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *AssociateHardwareDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AssociateHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*AssociateHardwareResponse) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *AssociateHardwareDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*AssociateHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*AssociateHardwareResponse) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *AssociateHardwareDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AssociateHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*AssociateHardwareResponse) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *AssociateHardwareDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*AssociateHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*AssociateHardwareResponse) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *AssociateHardwareDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*AssociateHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*AssociateHardwareResponse) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetAssociateHardwareDescriptor() *AssociateHardwareDescriptor {
	return associateHardwareDescriptor
}

type DissociateHardwareDescriptor struct{}

type DissociateHardwareDescriptorClientMsgHandle struct{}

type DissociateHardwareDescriptorServerMsgHandle struct{}

func (d *DissociateHardwareDescriptor) NewEmptyClientMsg() proto.Message {
	return &DissociateHardwareRequest{}
}

func (d *DissociateHardwareDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DissociateHardwareDescriptor) IsUnary() bool {
	return true
}

func (d *DissociateHardwareDescriptor) IsClientStream() bool {
	return false
}

func (d *DissociateHardwareDescriptor) IsServerStream() bool {
	return false
}

func (d *DissociateHardwareDescriptor) IsCollection() bool {
	return false
}

func (d *DissociateHardwareDescriptor) IsPlural() bool {
	return false
}

func (d *DissociateHardwareDescriptor) HasResource() bool {
	return true
}

func (d *DissociateHardwareDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DissociateHardwareDescriptor) GetVerb() string {
	return "dissociateHardware"
}

func (d *DissociateHardwareDescriptor) GetMethodName() string {
	return "DissociateHardware"
}

func (d *DissociateHardwareDescriptor) GetFullMethodName() string {
	return "/ntt.ztp.v1.EdgelqInstanceService/DissociateHardware"
}

func (d *DissociateHardwareDescriptor) GetProtoPkgName() string {
	return "ntt.ztp.v1"
}

func (d *DissociateHardwareDescriptor) GetApiName() string {
	return "EdgelqInstanceService"
}

func (d *DissociateHardwareDescriptor) GetServiceDomain() string {
	return "ztp.edgelq.com"
}

func (d *DissociateHardwareDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DissociateHardwareDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return edgelqInstanceServiceDescriptor
}

func (d *DissociateHardwareDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return edgelq_instance.GetDescriptor()
}

func (d *DissociateHardwareDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DissociateHardwareDescriptorClientMsgHandle{}
}

func (d *DissociateHardwareDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DissociateHardwareDescriptorServerMsgHandle{}
}

func (h *DissociateHardwareDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DissociateHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DissociateHardwareRequest) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*edgelq_instance.Name)(nil)
}

func (h *DissociateHardwareDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DissociateHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DissociateHardwareRequest) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DissociateHardwareDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DissociateHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DissociateHardwareRequest) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DissociateHardwareDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DissociateHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DissociateHardwareRequest) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DissociateHardwareDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DissociateHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DissociateHardwareRequest) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DissociateHardwareDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *edgelq_instance.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DissociateHardwareDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*edgelq_instance.Name
	})
	if ok {
		return edgelq_instance.EdgelqInstanceNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DissociateHardwareDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *edgelq_instance.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DissociateHardwareDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *edgelq_instance.EdgelqInstance
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DissociateHardwareDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*edgelq_instance.EdgelqInstance
	})
	if ok {
		return edgelq_instance.EdgelqInstanceList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDissociateHardwareDescriptor() *DissociateHardwareDescriptor {
	return dissociateHardwareDescriptor
}

type EdgelqInstanceServiceDescriptor struct{}

func (d *EdgelqInstanceServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getEdgelqInstanceDescriptor,
		batchGetEdgelqInstancesDescriptor,
		listEdgelqInstancesDescriptor,
		watchEdgelqInstanceDescriptor,
		watchEdgelqInstancesDescriptor,
		createEdgelqInstanceDescriptor,
		updateEdgelqInstanceDescriptor,
		deleteEdgelqInstanceDescriptor,
		associateHardwareDescriptor,
		dissociateHardwareDescriptor,
	}
}

func (d *EdgelqInstanceServiceDescriptor) GetFullAPIName() string {
	return "/ntt.ztp.v1.EdgelqInstanceService"
}

func (d *EdgelqInstanceServiceDescriptor) GetProtoPkgName() string {
	return "ntt.ztp.v1"
}

func (d *EdgelqInstanceServiceDescriptor) GetApiName() string {
	return "EdgelqInstanceService"
}

func (d *EdgelqInstanceServiceDescriptor) GetServiceDomain() string {
	return "ztp.edgelq.com"
}

func (d *EdgelqInstanceServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetEdgelqInstanceServiceDescriptor() *EdgelqInstanceServiceDescriptor {
	return edgelqInstanceServiceDescriptor
}

func initDescriptors() {
	edgelqInstanceServiceDescriptor = &EdgelqInstanceServiceDescriptor{}
	getEdgelqInstanceDescriptor = &GetEdgelqInstanceDescriptor{}
	batchGetEdgelqInstancesDescriptor = &BatchGetEdgelqInstancesDescriptor{}
	listEdgelqInstancesDescriptor = &ListEdgelqInstancesDescriptor{}
	watchEdgelqInstanceDescriptor = &WatchEdgelqInstanceDescriptor{}
	watchEdgelqInstancesDescriptor = &WatchEdgelqInstancesDescriptor{}
	createEdgelqInstanceDescriptor = &CreateEdgelqInstanceDescriptor{}
	updateEdgelqInstanceDescriptor = &UpdateEdgelqInstanceDescriptor{}
	deleteEdgelqInstanceDescriptor = &DeleteEdgelqInstanceDescriptor{}
	associateHardwareDescriptor = &AssociateHardwareDescriptor{}
	dissociateHardwareDescriptor = &DissociateHardwareDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(edgelqInstanceServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getEdgelqInstanceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetEdgelqInstancesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listEdgelqInstancesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchEdgelqInstanceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchEdgelqInstancesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createEdgelqInstanceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateEdgelqInstanceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteEdgelqInstanceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(associateHardwareDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(dissociateHardwareDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
