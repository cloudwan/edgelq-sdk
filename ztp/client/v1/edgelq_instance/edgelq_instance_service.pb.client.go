// Code generated by protoc-gen-goten-client
// API: EdgelqInstanceService
// DO NOT EDIT!!!

package edgelq_instance_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	edgelq_instance "github.com/cloudwan/edgelq-sdk/ztp/resources/v1/edgelq_instance"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &edgelq_instance.EdgelqInstance{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EdgelqInstanceServiceClient is the client API for EdgelqInstanceService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EdgelqInstanceServiceClient interface {
	GetEdgelqInstance(ctx context.Context, in *GetEdgelqInstanceRequest, opts ...grpc.CallOption) (*edgelq_instance.EdgelqInstance, error)
	BatchGetEdgelqInstances(ctx context.Context, in *BatchGetEdgelqInstancesRequest, opts ...grpc.CallOption) (*BatchGetEdgelqInstancesResponse, error)
	ListEdgelqInstances(ctx context.Context, in *ListEdgelqInstancesRequest, opts ...grpc.CallOption) (*ListEdgelqInstancesResponse, error)
	WatchEdgelqInstance(ctx context.Context, in *WatchEdgelqInstanceRequest, opts ...grpc.CallOption) (WatchEdgelqInstanceClientStream, error)
	WatchEdgelqInstances(ctx context.Context, in *WatchEdgelqInstancesRequest, opts ...grpc.CallOption) (WatchEdgelqInstancesClientStream, error)
	CreateEdgelqInstance(ctx context.Context, in *CreateEdgelqInstanceRequest, opts ...grpc.CallOption) (*edgelq_instance.EdgelqInstance, error)
	UpdateEdgelqInstance(ctx context.Context, in *UpdateEdgelqInstanceRequest, opts ...grpc.CallOption) (*edgelq_instance.EdgelqInstance, error)
	DeleteEdgelqInstance(ctx context.Context, in *DeleteEdgelqInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AssociateHardware(ctx context.Context, in *AssociateHardwareRequest, opts ...grpc.CallOption) (*AssociateHardwareResponse, error)
	DissociateHardware(ctx context.Context, in *DissociateHardwareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewEdgelqInstanceServiceClient(cc grpc.ClientConnInterface) EdgelqInstanceServiceClient {
	return &client{cc}
}

func (c *client) GetEdgelqInstance(ctx context.Context, in *GetEdgelqInstanceRequest, opts ...grpc.CallOption) (*edgelq_instance.EdgelqInstance, error) {
	out := new(edgelq_instance.EdgelqInstance)
	err := c.cc.Invoke(ctx, "/ntt.ztp.v1.EdgelqInstanceService/GetEdgelqInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetEdgelqInstances(ctx context.Context, in *BatchGetEdgelqInstancesRequest, opts ...grpc.CallOption) (*BatchGetEdgelqInstancesResponse, error) {
	out := new(BatchGetEdgelqInstancesResponse)
	err := c.cc.Invoke(ctx, "/ntt.ztp.v1.EdgelqInstanceService/BatchGetEdgelqInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListEdgelqInstances(ctx context.Context, in *ListEdgelqInstancesRequest, opts ...grpc.CallOption) (*ListEdgelqInstancesResponse, error) {
	out := new(ListEdgelqInstancesResponse)
	err := c.cc.Invoke(ctx, "/ntt.ztp.v1.EdgelqInstanceService/ListEdgelqInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchEdgelqInstance(ctx context.Context, in *WatchEdgelqInstanceRequest, opts ...grpc.CallOption) (WatchEdgelqInstanceClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchEdgelqInstance",
			ServerStreams: true,
		},
		"/ntt.ztp.v1.EdgelqInstanceService/WatchEdgelqInstance", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchEdgelqInstanceWatchEdgelqInstanceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchEdgelqInstanceClientStream interface {
	Recv() (*WatchEdgelqInstanceResponse, error)
	grpc.ClientStream
}

type watchEdgelqInstanceWatchEdgelqInstanceClient struct {
	grpc.ClientStream
}

func (x *watchEdgelqInstanceWatchEdgelqInstanceClient) Recv() (*WatchEdgelqInstanceResponse, error) {
	m := new(WatchEdgelqInstanceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchEdgelqInstances(ctx context.Context, in *WatchEdgelqInstancesRequest, opts ...grpc.CallOption) (WatchEdgelqInstancesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchEdgelqInstances",
			ServerStreams: true,
		},
		"/ntt.ztp.v1.EdgelqInstanceService/WatchEdgelqInstances", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchEdgelqInstancesWatchEdgelqInstancesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchEdgelqInstancesClientStream interface {
	Recv() (*WatchEdgelqInstancesResponse, error)
	grpc.ClientStream
}

type watchEdgelqInstancesWatchEdgelqInstancesClient struct {
	grpc.ClientStream
}

func (x *watchEdgelqInstancesWatchEdgelqInstancesClient) Recv() (*WatchEdgelqInstancesResponse, error) {
	m := new(WatchEdgelqInstancesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateEdgelqInstance(ctx context.Context, in *CreateEdgelqInstanceRequest, opts ...grpc.CallOption) (*edgelq_instance.EdgelqInstance, error) {
	out := new(edgelq_instance.EdgelqInstance)
	err := c.cc.Invoke(ctx, "/ntt.ztp.v1.EdgelqInstanceService/CreateEdgelqInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateEdgelqInstance(ctx context.Context, in *UpdateEdgelqInstanceRequest, opts ...grpc.CallOption) (*edgelq_instance.EdgelqInstance, error) {
	out := new(edgelq_instance.EdgelqInstance)
	err := c.cc.Invoke(ctx, "/ntt.ztp.v1.EdgelqInstanceService/UpdateEdgelqInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteEdgelqInstance(ctx context.Context, in *DeleteEdgelqInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.ztp.v1.EdgelqInstanceService/DeleteEdgelqInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) AssociateHardware(ctx context.Context, in *AssociateHardwareRequest, opts ...grpc.CallOption) (*AssociateHardwareResponse, error) {
	out := new(AssociateHardwareResponse)
	err := c.cc.Invoke(ctx, "/ntt.ztp.v1.EdgelqInstanceService/AssociateHardware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DissociateHardware(ctx context.Context, in *DissociateHardwareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.ztp.v1.EdgelqInstanceService/DissociateHardware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
