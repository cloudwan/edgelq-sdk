// Code generated by protoc-gen-goten-resource
// Resource: SimCardStock
// DO NOT EDIT!!!

package sim_card_stock

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	contract "github.com/cloudwan/edgelq-sdk/cellular-api/resources/v1/contract"
	sim_card "github.com/cloudwan/edgelq-sdk/cellular-api/resources/v1/sim_card"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &contract.Contract{}
	_ = &sim_card.SimCard{}
	_ = &meta.Meta{}
)

type SimCardStockList []*SimCardStock

func (l SimCardStockList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*SimCardStock))
}

func (l SimCardStockList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(SimCardStockList)...)
}

func (l SimCardStockList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SimCardStockList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l SimCardStockList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*SimCardStock)
}

func (l SimCardStockList) Length() int {
	return len(l)
}

type SimCardStockChangeList []*SimCardStockChange

func (l SimCardStockChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*SimCardStockChange))
}

func (l SimCardStockChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(SimCardStockChangeList)...)
}

func (l SimCardStockChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SimCardStockChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l SimCardStockChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*SimCardStockChange)
}

func (l SimCardStockChangeList) Length() int {
	return len(l)
}

type SimCardStockNameList []*Name

func (l SimCardStockNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l SimCardStockNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(SimCardStockNameList)...)
}

func (l SimCardStockNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SimCardStockNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l SimCardStockNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l SimCardStockNameList) Length() int {
	return len(l)
}

type SimCardStockReferenceList []*Reference

func (l SimCardStockReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l SimCardStockReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(SimCardStockReferenceList)...)
}

func (l SimCardStockReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SimCardStockReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l SimCardStockReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l SimCardStockReferenceList) Length() int {
	return len(l)
}

type SimCardStockMap map[Name]*SimCardStock

func (m SimCardStockMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m SimCardStockMap) Set(res gotenresource.Resource) {
	tRes := res.(*SimCardStock)
	m[*tRes.Name] = tRes
}

func (m SimCardStockMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m SimCardStockMap) Length() int {
	return len(m)
}

func (m SimCardStockMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type SimCardStockChangeMap map[Name]*SimCardStockChange

func (m SimCardStockChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m SimCardStockChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*SimCardStockChange)
	m[*tChange.GetSimCardStockName()] = tChange
}

func (m SimCardStockChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m SimCardStockChangeMap) Length() int {
	return len(m)
}

func (m SimCardStockChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
