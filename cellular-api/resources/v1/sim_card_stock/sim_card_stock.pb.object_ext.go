// Code generated by protoc-gen-goten-object
// File: edgelq/cellular-api/proto/v1/sim_card_stock.proto
// DO NOT EDIT!!!

package sim_card_stock

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	contract "github.com/cloudwan/edgelq-sdk/cellular-api/resources/v1/contract"
	sim_card "github.com/cloudwan/edgelq-sdk/cellular-api/resources/v1/sim_card"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &contract.Contract{}
	_ = &sim_card.SimCard{}
	_ = &meta.Meta{}
)

func (o *SimCardStock) GotenObjectExt() {}

func (o *SimCardStock) MakeFullFieldMask() *SimCardStock_FieldMask {
	return FullSimCardStock_FieldMask()
}

func (o *SimCardStock) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSimCardStock_FieldMask()
}

func (o *SimCardStock) MakeDiffFieldMask(other *SimCardStock) *SimCardStock_FieldMask {
	if o == nil && other == nil {
		return &SimCardStock_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSimCardStock_FieldMask()
	}

	res := &SimCardStock_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &SimCardStock_FieldTerminalPath{selector: SimCardStock_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SimCardStock_FieldTerminalPath{selector: SimCardStock_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SimCardStock_FieldSubPath{selector: SimCardStock_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetContract().String() != other.GetContract().String() {
		res.Paths = append(res.Paths, &SimCardStock_FieldTerminalPath{selector: SimCardStock_FieldPathSelectorContract})
	}
	if o.GetState() != other.GetState() {
		res.Paths = append(res.Paths, &SimCardStock_FieldTerminalPath{selector: SimCardStock_FieldPathSelectorState})
	}
	if o.GetSimCard().String() != other.GetSimCard().String() {
		res.Paths = append(res.Paths, &SimCardStock_FieldTerminalPath{selector: SimCardStock_FieldPathSelectorSimCard})
	}
	return res
}

func (o *SimCardStock) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SimCardStock))
}

func (o *SimCardStock) Clone() *SimCardStock {
	if o == nil {
		return nil
	}
	result := &SimCardStock{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	if o.Contract == nil {
		result.Contract = nil
	} else if data, err := o.Contract.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Contract = &contract.Reference{}
		if err := result.Contract.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.State = o.State
	if o.SimCard == nil {
		result.SimCard = nil
	} else if data, err := o.SimCard.ProtoString(); err != nil {
		panic(err)
	} else {
		result.SimCard = &sim_card.Reference{}
		if err := result.SimCard.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *SimCardStock) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SimCardStock) Merge(source *SimCardStock) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source.GetContract() != nil {
		if data, err := source.GetContract().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Contract = &contract.Reference{}
			if err := o.Contract.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Contract = nil
	}
	o.State = source.GetState()
	if source.GetSimCard() != nil {
		if data, err := source.GetSimCard().ProtoString(); err != nil {
			panic(err)
		} else {
			o.SimCard = &sim_card.Reference{}
			if err := o.SimCard.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.SimCard = nil
	}
}

func (o *SimCardStock) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SimCardStock))
}
