// Code generated by protoc-gen-goten-go
// File: edgelq/cellular-api/proto/v1/contract.proto
// DO NOT EDIT!!!

package contract

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &secrets_secret.Secret{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Contract Resource
type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Contract
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	RatePlan string     `protobuf:"bytes,3,opt,name=rate_plan,json=ratePlan,proto3" json:"rate_plan,omitempty"`
	// CarrierAccount contains api credential for backend to call each carrier
	// APIs, therefore it is packed as a Secret resource. Secret resource itself
	// must contain following data field in each carrier:
	//
	// - Transatel
	// {
	//  "data": {
	//    "client_id": "<CLIENTID>",
	//    "client_secret": "<CLIENTSECRET>"
	//   }
	// }
	//
	// - Cisco
	// ..
	// - Celona
	// ..
	//
	// Types that are valid to be assigned to CarrierAccount:
	//	*Contract_Transatel
	//	*Contract_Cisco
	//	*Contract_Celona
	CarrierAccount isContract_CarrierAccount `protobuf_oneof:"carrier_account"`
}

func (m *Contract) Reset() {
	*m = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_contract_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Contract) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Contract) ProtoMessage() {}

func (m *Contract) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_contract_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Contract) GotenMessage() {}

// Deprecated, Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_contract_proto_rawDescGZIP(), []int{0}
}

func (m *Contract) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Contract) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Contract) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Contract) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isContract_CarrierAccount interface {
	isContract_CarrierAccount()
}

type Contract_Transatel struct {
	Transatel *secrets_secret.Reference `protobuf:"bytes,5,opt,customtype=Reference,name=transatel,proto3,oneof"`
}
type Contract_Cisco struct {
	Cisco *secrets_secret.Reference `protobuf:"bytes,6,opt,customtype=Reference,name=cisco,proto3,oneof"`
}
type Contract_Celona struct {
	Celona *secrets_secret.Reference `protobuf:"bytes,7,opt,customtype=Reference,name=celona,proto3,oneof"`
}

func (*Contract_Transatel) isContract_CarrierAccount() {}
func (*Contract_Cisco) isContract_CarrierAccount()     {}
func (*Contract_Celona) isContract_CarrierAccount()    {}
func (m *Contract) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Contract) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Contract) GetRatePlan() string {
	if m != nil {
		return m.RatePlan
	}
	return ""
}

func (m *Contract) GetCarrierAccount() isContract_CarrierAccount {
	if m != nil {
		return m.CarrierAccount
	}
	return nil
}
func (m *Contract) GetTransatel() *secrets_secret.Reference {
	if x, ok := m.GetCarrierAccount().(*Contract_Transatel); ok {
		return x.Transatel
	}
	return nil
}
func (m *Contract) GetCisco() *secrets_secret.Reference {
	if x, ok := m.GetCarrierAccount().(*Contract_Cisco); ok {
		return x.Cisco
	}
	return nil
}
func (m *Contract) GetCelona() *secrets_secret.Reference {
	if x, ok := m.GetCarrierAccount().(*Contract_Celona); ok {
		return x.Celona
	}
	return nil
}
func (m *Contract) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Contract"))
	}
	m.Name = fv
}

func (m *Contract) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Contract"))
	}
	m.Metadata = fv
}

func (m *Contract) SetRatePlan(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RatePlan", "Contract"))
	}
	m.RatePlan = fv
}

func (m *Contract) SetCarrierAccount(ofv isContract_CarrierAccount) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isContract_CarrierAccount", "Contract"))
	}
	m.CarrierAccount = ofv
}
func (m *Contract) SetTransatel(fv *secrets_secret.Reference) {
	m.SetCarrierAccount(&Contract_Transatel{Transatel: fv})
}
func (m *Contract) SetCisco(fv *secrets_secret.Reference) {
	m.SetCarrierAccount(&Contract_Cisco{Cisco: fv})
}
func (m *Contract) SetCelona(fv *secrets_secret.Reference) {
	m.SetCarrierAccount(&Contract_Celona{Celona: fv})
}

var edgelq_cellular_api_proto_v1_contract_proto preflect.FileDescriptor

var edgelq_cellular_api_proto_v1_contract_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61,
	0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6e,
	0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9,
	0x03, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xda, 0x21, 0x0c, 0x0a,
	0x0a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x43, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0xb2, 0xda, 0x21, 0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x10, 0x01, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x74,
	0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0xb2, 0xda, 0x21, 0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x10, 0x01, 0x48, 0x00, 0x52, 0x05, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x12,
	0x3d, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6f, 0x6e, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0xb2, 0xda, 0x21, 0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x10, 0x01, 0x48, 0x00, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6f, 0x6e, 0x61, 0x3a, 0x67,
	0xea, 0x41, 0x38, 0x0a, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2d, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x7d, 0x92, 0xd9, 0x21, 0x16, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x03, 0x42, 0x11, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x9b, 0x02, 0xe8, 0xde, 0x21,
	0x01, 0xd2, 0xff, 0xd0, 0x02, 0x4b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0xa2, 0x80, 0xd1, 0x02, 0x4d, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c,
	0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42,
	0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x65, 0x6c,
	0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x3b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_cellular_api_proto_v1_contract_proto_rawDescOnce sync.Once
	edgelq_cellular_api_proto_v1_contract_proto_rawDescData = edgelq_cellular_api_proto_v1_contract_proto_rawDesc
)

func edgelq_cellular_api_proto_v1_contract_proto_rawDescGZIP() []byte {
	edgelq_cellular_api_proto_v1_contract_proto_rawDescOnce.Do(func() {
		edgelq_cellular_api_proto_v1_contract_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_cellular_api_proto_v1_contract_proto_rawDescData)
	})
	return edgelq_cellular_api_proto_v1_contract_proto_rawDescData
}

var edgelq_cellular_api_proto_v1_contract_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var edgelq_cellular_api_proto_v1_contract_proto_goTypes = []interface{}{
	(*Contract)(nil),  // 0: ntt.cellular_api.v1.Contract
	(*meta.Meta)(nil), // 1: goten.types.Meta
}
var edgelq_cellular_api_proto_v1_contract_proto_depIdxs = []int32{
	1, // 0: ntt.cellular_api.v1.Contract.metadata:type_name -> goten.types.Meta
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { edgelq_cellular_api_proto_v1_contract_proto_init() }
func edgelq_cellular_api_proto_v1_contract_proto_init() {
	if edgelq_cellular_api_proto_v1_contract_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_cellular_api_proto_v1_contract_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_cellular_api_proto_v1_contract_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Contract_Transatel)(nil),
		(*Contract_Cisco)(nil),
		(*Contract_Celona)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_cellular_api_proto_v1_contract_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_cellular_api_proto_v1_contract_proto_goTypes,
		DependencyIndexes: edgelq_cellular_api_proto_v1_contract_proto_depIdxs,
		MessageInfos:      edgelq_cellular_api_proto_v1_contract_proto_msgTypes,
	}.Build()
	edgelq_cellular_api_proto_v1_contract_proto = out.File
	edgelq_cellular_api_proto_v1_contract_proto_rawDesc = nil
	edgelq_cellular_api_proto_v1_contract_proto_goTypes = nil
	edgelq_cellular_api_proto_v1_contract_proto_depIdxs = nil
}
