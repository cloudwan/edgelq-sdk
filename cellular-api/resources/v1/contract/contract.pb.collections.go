// Code generated by protoc-gen-goten-resource
// Resource: Contract
// DO NOT EDIT!!!

package contract

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &secrets_secret.Secret{}
	_ = &meta.Meta{}
)

type ContractList []*Contract

func (l ContractList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Contract))
}

func (l ContractList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ContractList)...)
}

func (l ContractList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ContractList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ContractList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Contract)
}

func (l ContractList) Length() int {
	return len(l)
}

type ContractChangeList []*ContractChange

func (l ContractChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ContractChange))
}

func (l ContractChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ContractChangeList)...)
}

func (l ContractChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ContractChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ContractChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ContractChange)
}

func (l ContractChangeList) Length() int {
	return len(l)
}

type ContractNameList []*Name

func (l ContractNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ContractNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ContractNameList)...)
}

func (l ContractNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ContractNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ContractNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ContractNameList) Length() int {
	return len(l)
}

type ContractReferenceList []*Reference

func (l ContractReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ContractReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ContractReferenceList)...)
}

func (l ContractReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ContractReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ContractReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ContractReferenceList) Length() int {
	return len(l)
}

type ContractMap map[Name]*Contract

func (m ContractMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ContractMap) Set(res gotenresource.Resource) {
	tRes := res.(*Contract)
	m[*tRes.Name] = tRes
}

func (m ContractMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ContractMap) Length() int {
	return len(m)
}

func (m ContractMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ContractChangeMap map[Name]*ContractChange

func (m ContractChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ContractChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ContractChange)
	m[*tChange.GetContractName()] = tChange
}

func (m ContractChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ContractChangeMap) Length() int {
	return len(m)
}

func (m ContractChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
