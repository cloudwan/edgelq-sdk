// Code generated by protoc-gen-goten-resource
// Resource change: ContractChange
// DO NOT EDIT!!!

package contract

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &fieldmaskpb.FieldMask{}
)

func (c *ContractChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ContractChange_Added_)
	return ok
}

func (c *ContractChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ContractChange_Modified_)
	return ok
}

func (c *ContractChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ContractChange_Current_)
	return ok
}

func (c *ContractChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ContractChange_Removed_)
	return ok
}

func (c *ContractChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *ContractChange_Added_:
		return cType.Added.ViewIndex
	case *ContractChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *ContractChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *ContractChange_Removed_:
		return cType.Removed.ViewIndex
	case *ContractChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *ContractChange) GetContract() *Contract {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *ContractChange_Added_:
		return cType.Added.Contract
	case *ContractChange_Modified_:
		return cType.Modified.Contract
	case *ContractChange_Current_:
		return cType.Current.Contract
	case *ContractChange_Removed_:
		return nil
	}
	return nil
}

func (c *ContractChange) GetRawResource() gotenresource.Resource {
	return c.GetContract()
}

func (c *ContractChange) GetContractName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *ContractChange_Added_:
		return cType.Added.Contract.GetName()
	case *ContractChange_Modified_:
		return cType.Modified.Name
	case *ContractChange_Current_:
		return cType.Current.Contract.GetName()
	case *ContractChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *ContractChange) GetRawName() gotenresource.Name {
	return c.GetContractName()
}

func (c *ContractChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &ContractChange_Added_{
		Added: &ContractChange_Added{
			Contract:  snapshot.(*Contract),
			ViewIndex: int32(idx),
		},
	}
}

func (c *ContractChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &ContractChange_Modified_{
		Modified: &ContractChange_Modified{
			Name:              name.(*Name),
			Contract:          snapshot.(*Contract),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *ContractChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &ContractChange_Current_{
		Current: &ContractChange_Current{
			Contract: snapshot.(*Contract),
		},
	}
}

func (c *ContractChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &ContractChange_Removed_{
		Removed: &ContractChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
