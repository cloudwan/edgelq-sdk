// Code generated by protoc-gen-goten-object
// File: edgelq/cellular-api/proto/v1/sim_card.proto
// DO NOT EDIT!!!

package sim_card

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	carrier "github.com/cloudwan/edgelq-sdk/cellular-api/carrier"
	contract "github.com/cloudwan/edgelq-sdk/cellular-api/resources/v1/contract"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &carrier.TransatelAccount{}
	_ = &contract.Contract{}
	_ = &iam_project.Project{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SimCard_FieldPath interface {
	gotenobject.FieldPath
	Selector() SimCard_FieldPathSelector
	Get(source *SimCard) []interface{}
	GetSingle(source *SimCard) (interface{}, bool)
	ClearValue(item *SimCard)

	// Those methods build corresponding SimCard_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SimCard_FieldPathValue
	WithIArrayOfValues(values interface{}) SimCard_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SimCard_FieldPathArrayItemValue
}

type SimCard_FieldPathSelector int32

const (
	SimCard_FieldPathSelectorName     SimCard_FieldPathSelector = 0
	SimCard_FieldPathSelectorMetadata SimCard_FieldPathSelector = 1
	SimCard_FieldPathSelectorContract SimCard_FieldPathSelector = 2
	SimCard_FieldPathSelectorImsi     SimCard_FieldPathSelector = 3
	SimCard_FieldPathSelectorRatePlan SimCard_FieldPathSelector = 4
	SimCard_FieldPathSelectorStatus   SimCard_FieldPathSelector = 5
)

func (s SimCard_FieldPathSelector) String() string {
	switch s {
	case SimCard_FieldPathSelectorName:
		return "name"
	case SimCard_FieldPathSelectorMetadata:
		return "metadata"
	case SimCard_FieldPathSelectorContract:
		return "contract"
	case SimCard_FieldPathSelectorImsi:
		return "imsi"
	case SimCard_FieldPathSelectorRatePlan:
		return "rate_plan"
	case SimCard_FieldPathSelectorStatus:
		return "status"
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard: %d", s))
	}
}

func BuildSimCard_FieldPath(fp gotenobject.RawFieldPath) (SimCard_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SimCard")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &SimCard_FieldTerminalPath{selector: SimCard_FieldPathSelectorName}, nil
		case "metadata":
			return &SimCard_FieldTerminalPath{selector: SimCard_FieldPathSelectorMetadata}, nil
		case "contract":
			return &SimCard_FieldTerminalPath{selector: SimCard_FieldPathSelectorContract}, nil
		case "imsi":
			return &SimCard_FieldTerminalPath{selector: SimCard_FieldPathSelectorImsi}, nil
		case "rate_plan", "ratePlan", "rate-plan":
			return &SimCard_FieldTerminalPath{selector: SimCard_FieldPathSelectorRatePlan}, nil
		case "status":
			return &SimCard_FieldTerminalPath{selector: SimCard_FieldPathSelectorStatus}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SimCard_FieldSubPath{selector: SimCard_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildSimCardStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SimCard_FieldSubPath{selector: SimCard_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SimCard", fp)
}

func ParseSimCard_FieldPath(rawField string) (SimCard_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSimCard_FieldPath(fp)
}

func MustParseSimCard_FieldPath(rawField string) SimCard_FieldPath {
	fp, err := ParseSimCard_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SimCard_FieldTerminalPath struct {
	selector SimCard_FieldPathSelector
}

var _ SimCard_FieldPath = (*SimCard_FieldTerminalPath)(nil)

func (fp *SimCard_FieldTerminalPath) Selector() SimCard_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SimCard_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SimCard_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SimCard
func (fp *SimCard_FieldTerminalPath) Get(source *SimCard) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SimCard_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case SimCard_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case SimCard_FieldPathSelectorContract:
			if source.Contract != nil {
				values = append(values, source.Contract)
			}
		case SimCard_FieldPathSelectorImsi:
			values = append(values, source.Imsi)
		case SimCard_FieldPathSelectorRatePlan:
			values = append(values, source.RatePlan)
		case SimCard_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SimCard: %d", fp.selector))
		}
	}
	return
}

func (fp *SimCard_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SimCard))
}

// GetSingle returns value pointed by specific field of from source SimCard
func (fp *SimCard_FieldTerminalPath) GetSingle(source *SimCard) (interface{}, bool) {
	switch fp.selector {
	case SimCard_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case SimCard_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case SimCard_FieldPathSelectorContract:
		res := source.GetContract()
		return res, res != nil
	case SimCard_FieldPathSelectorImsi:
		return source.GetImsi(), source != nil
	case SimCard_FieldPathSelectorRatePlan:
		return source.GetRatePlan(), source != nil
	case SimCard_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard: %d", fp.selector))
	}
}

func (fp *SimCard_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SimCard))
}

// GetDefault returns a default value of the field type
func (fp *SimCard_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SimCard_FieldPathSelectorName:
		return (*Name)(nil)
	case SimCard_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case SimCard_FieldPathSelectorContract:
		return (*contract.Reference)(nil)
	case SimCard_FieldPathSelectorImsi:
		return ""
	case SimCard_FieldPathSelectorRatePlan:
		return ""
	case SimCard_FieldPathSelectorStatus:
		return (*SimCard_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard: %d", fp.selector))
	}
}

func (fp *SimCard_FieldTerminalPath) ClearValue(item *SimCard) {
	if item != nil {
		switch fp.selector {
		case SimCard_FieldPathSelectorName:
			item.Name = nil
		case SimCard_FieldPathSelectorMetadata:
			item.Metadata = nil
		case SimCard_FieldPathSelectorContract:
			item.Contract = nil
		case SimCard_FieldPathSelectorImsi:
			item.Imsi = ""
		case SimCard_FieldPathSelectorRatePlan:
			item.RatePlan = ""
		case SimCard_FieldPathSelectorStatus:
			item.Status = nil
		default:
			panic(fmt.Sprintf("Invalid selector for SimCard: %d", fp.selector))
		}
	}
}

func (fp *SimCard_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SimCard))
}

// IsLeaf - whether field path is holds simple value
func (fp *SimCard_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SimCard_FieldPathSelectorName ||
		fp.selector == SimCard_FieldPathSelectorContract ||
		fp.selector == SimCard_FieldPathSelectorImsi ||
		fp.selector == SimCard_FieldPathSelectorRatePlan
}

func (fp *SimCard_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SimCard_FieldTerminalPath) WithIValue(value interface{}) SimCard_FieldPathValue {
	switch fp.selector {
	case SimCard_FieldPathSelectorName:
		return &SimCard_FieldTerminalPathValue{SimCard_FieldTerminalPath: *fp, value: value.(*Name)}
	case SimCard_FieldPathSelectorMetadata:
		return &SimCard_FieldTerminalPathValue{SimCard_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case SimCard_FieldPathSelectorContract:
		return &SimCard_FieldTerminalPathValue{SimCard_FieldTerminalPath: *fp, value: value.(*contract.Reference)}
	case SimCard_FieldPathSelectorImsi:
		return &SimCard_FieldTerminalPathValue{SimCard_FieldTerminalPath: *fp, value: value.(string)}
	case SimCard_FieldPathSelectorRatePlan:
		return &SimCard_FieldTerminalPathValue{SimCard_FieldTerminalPath: *fp, value: value.(string)}
	case SimCard_FieldPathSelectorStatus:
		return &SimCard_FieldTerminalPathValue{SimCard_FieldTerminalPath: *fp, value: value.(*SimCard_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard: %d", fp.selector))
	}
}

func (fp *SimCard_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SimCard_FieldTerminalPath) WithIArrayOfValues(values interface{}) SimCard_FieldPathArrayOfValues {
	fpaov := &SimCard_FieldTerminalPathArrayOfValues{SimCard_FieldTerminalPath: *fp}
	switch fp.selector {
	case SimCard_FieldPathSelectorName:
		return &SimCard_FieldTerminalPathArrayOfValues{SimCard_FieldTerminalPath: *fp, values: values.([]*Name)}
	case SimCard_FieldPathSelectorMetadata:
		return &SimCard_FieldTerminalPathArrayOfValues{SimCard_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case SimCard_FieldPathSelectorContract:
		return &SimCard_FieldTerminalPathArrayOfValues{SimCard_FieldTerminalPath: *fp, values: values.([]*contract.Reference)}
	case SimCard_FieldPathSelectorImsi:
		return &SimCard_FieldTerminalPathArrayOfValues{SimCard_FieldTerminalPath: *fp, values: values.([]string)}
	case SimCard_FieldPathSelectorRatePlan:
		return &SimCard_FieldTerminalPathArrayOfValues{SimCard_FieldTerminalPath: *fp, values: values.([]string)}
	case SimCard_FieldPathSelectorStatus:
		return &SimCard_FieldTerminalPathArrayOfValues{SimCard_FieldTerminalPath: *fp, values: values.([]*SimCard_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard: %d", fp.selector))
	}
	return fpaov
}

func (fp *SimCard_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SimCard_FieldTerminalPath) WithIArrayItemValue(value interface{}) SimCard_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard: %d", fp.selector))
	}
}

func (fp *SimCard_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type SimCard_FieldSubPath struct {
	selector SimCard_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ SimCard_FieldPath = (*SimCard_FieldSubPath)(nil)

func (fps *SimCard_FieldSubPath) Selector() SimCard_FieldPathSelector {
	return fps.selector
}
func (fps *SimCard_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *SimCard_FieldSubPath) AsStatusSubPath() (SimCardStatus_FieldPath, bool) {
	res, ok := fps.subPath.(SimCardStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *SimCard_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *SimCard_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source SimCard
func (fps *SimCard_FieldSubPath) Get(source *SimCard) (values []interface{}) {
	switch fps.selector {
	case SimCard_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case SimCard_FieldPathSelectorStatus:
		values = append(values, fps.subPath.GetRaw(source.GetStatus())...)
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard: %d", fps.selector))
	}
	return
}

func (fps *SimCard_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*SimCard))
}

// GetSingle returns value of selected field from source SimCard
func (fps *SimCard_FieldSubPath) GetSingle(source *SimCard) (interface{}, bool) {
	switch fps.selector {
	case SimCard_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case SimCard_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard: %d", fps.selector))
	}
}

func (fps *SimCard_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*SimCard))
}

// GetDefault returns a default value of the field type
func (fps *SimCard_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *SimCard_FieldSubPath) ClearValue(item *SimCard) {
	if item != nil {
		switch fps.selector {
		case SimCard_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case SimCard_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		default:
			panic(fmt.Sprintf("Invalid selector for SimCard: %d", fps.selector))
		}
	}
}

func (fps *SimCard_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*SimCard))
}

// IsLeaf - whether field path is holds simple value
func (fps *SimCard_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *SimCard_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&SimCard_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *SimCard_FieldSubPath) WithIValue(value interface{}) SimCard_FieldPathValue {
	return &SimCard_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *SimCard_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *SimCard_FieldSubPath) WithIArrayOfValues(values interface{}) SimCard_FieldPathArrayOfValues {
	return &SimCard_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *SimCard_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *SimCard_FieldSubPath) WithIArrayItemValue(value interface{}) SimCard_FieldPathArrayItemValue {
	return &SimCard_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *SimCard_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// SimCard_FieldPathValue allows storing values for SimCard fields according to their type
type SimCard_FieldPathValue interface {
	SimCard_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SimCard)
	CompareWith(*SimCard) (cmp int, comparable bool)
}

func ParseSimCard_FieldPathValue(pathStr, valueStr string) (SimCard_FieldPathValue, error) {
	fp, err := ParseSimCard_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SimCard field path value from %s: %v", valueStr, err)
	}
	return fpv.(SimCard_FieldPathValue), nil
}

func MustParseSimCard_FieldPathValue(pathStr, valueStr string) SimCard_FieldPathValue {
	fpv, err := ParseSimCard_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SimCard_FieldTerminalPathValue struct {
	SimCard_FieldTerminalPath
	value interface{}
}

var _ SimCard_FieldPathValue = (*SimCard_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SimCard' as interface{}
func (fpv *SimCard_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SimCard_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *SimCard_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *SimCard_FieldTerminalPathValue) AsContractValue() (*contract.Reference, bool) {
	res, ok := fpv.value.(*contract.Reference)
	return res, ok
}
func (fpv *SimCard_FieldTerminalPathValue) AsImsiValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *SimCard_FieldTerminalPathValue) AsRatePlanValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *SimCard_FieldTerminalPathValue) AsStatusValue() (*SimCard_Status, bool) {
	res, ok := fpv.value.(*SimCard_Status)
	return res, ok
}

// SetTo stores value for selected field for object SimCard
func (fpv *SimCard_FieldTerminalPathValue) SetTo(target **SimCard) {
	if *target == nil {
		*target = new(SimCard)
	}
	switch fpv.selector {
	case SimCard_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case SimCard_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case SimCard_FieldPathSelectorContract:
		(*target).Contract = fpv.value.(*contract.Reference)
	case SimCard_FieldPathSelectorImsi:
		(*target).Imsi = fpv.value.(string)
	case SimCard_FieldPathSelectorRatePlan:
		(*target).RatePlan = fpv.value.(string)
	case SimCard_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*SimCard_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard: %d", fpv.selector))
	}
}

func (fpv *SimCard_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SimCard)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SimCard_FieldTerminalPathValue' with the value under path in 'SimCard'.
func (fpv *SimCard_FieldTerminalPathValue) CompareWith(source *SimCard) (int, bool) {
	switch fpv.selector {
	case SimCard_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case SimCard_FieldPathSelectorMetadata:
		return 0, false
	case SimCard_FieldPathSelectorContract:
		leftValue := fpv.value.(*contract.Reference)
		rightValue := source.GetContract()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case SimCard_FieldPathSelectorImsi:
		leftValue := fpv.value.(string)
		rightValue := source.GetImsi()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SimCard_FieldPathSelectorRatePlan:
		leftValue := fpv.value.(string)
		rightValue := source.GetRatePlan()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SimCard_FieldPathSelectorStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard: %d", fpv.selector))
	}
}

func (fpv *SimCard_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SimCard))
}

type SimCard_FieldSubPathValue struct {
	SimCard_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ SimCard_FieldPathValue = (*SimCard_FieldSubPathValue)(nil)

func (fpvs *SimCard_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *SimCard_FieldSubPathValue) AsStatusPathValue() (SimCardStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(SimCardStatus_FieldPathValue)
	return res, ok
}

func (fpvs *SimCard_FieldSubPathValue) SetTo(target **SimCard) {
	if *target == nil {
		*target = new(SimCard)
	}
	switch fpvs.Selector() {
	case SimCard_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case SimCard_FieldPathSelectorStatus:
		fpvs.subPathValue.(SimCardStatus_FieldPathValue).SetTo(&(*target).Status)
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard: %d", fpvs.Selector()))
	}
}

func (fpvs *SimCard_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SimCard)
	fpvs.SetTo(&typedObject)
}

func (fpvs *SimCard_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *SimCard_FieldSubPathValue) CompareWith(source *SimCard) (int, bool) {
	switch fpvs.Selector() {
	case SimCard_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case SimCard_FieldPathSelectorStatus:
		return fpvs.subPathValue.(SimCardStatus_FieldPathValue).CompareWith(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard: %d", fpvs.Selector()))
	}
}

func (fpvs *SimCard_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*SimCard))
}

// SimCard_FieldPathArrayItemValue allows storing single item in Path-specific values for SimCard according to their type
// Present only for array (repeated) types.
type SimCard_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SimCard_FieldPath
	ContainsValue(*SimCard) bool
}

// ParseSimCard_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSimCard_FieldPathArrayItemValue(pathStr, valueStr string) (SimCard_FieldPathArrayItemValue, error) {
	fp, err := ParseSimCard_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SimCard field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SimCard_FieldPathArrayItemValue), nil
}

func MustParseSimCard_FieldPathArrayItemValue(pathStr, valueStr string) SimCard_FieldPathArrayItemValue {
	fpaiv, err := ParseSimCard_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SimCard_FieldTerminalPathArrayItemValue struct {
	SimCard_FieldTerminalPath
	value interface{}
}

var _ SimCard_FieldPathArrayItemValue = (*SimCard_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SimCard as interface{}
func (fpaiv *SimCard_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SimCard_FieldTerminalPathArrayItemValue) GetSingle(source *SimCard) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SimCard_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SimCard))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SimCard'
func (fpaiv *SimCard_FieldTerminalPathArrayItemValue) ContainsValue(source *SimCard) bool {
	slice := fpaiv.SimCard_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type SimCard_FieldSubPathArrayItemValue struct {
	SimCard_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *SimCard_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *SimCard_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *SimCard_FieldSubPathArrayItemValue) AsStatusPathItemValue() (SimCardStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(SimCardStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'SimCard'
func (fpaivs *SimCard_FieldSubPathArrayItemValue) ContainsValue(source *SimCard) bool {
	switch fpaivs.Selector() {
	case SimCard_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case SimCard_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(SimCardStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard: %d", fpaivs.Selector()))
	}
}

// SimCard_FieldPathArrayOfValues allows storing slice of values for SimCard fields according to their type
type SimCard_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SimCard_FieldPath
}

func ParseSimCard_FieldPathArrayOfValues(pathStr, valuesStr string) (SimCard_FieldPathArrayOfValues, error) {
	fp, err := ParseSimCard_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SimCard field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SimCard_FieldPathArrayOfValues), nil
}

func MustParseSimCard_FieldPathArrayOfValues(pathStr, valuesStr string) SimCard_FieldPathArrayOfValues {
	fpaov, err := ParseSimCard_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SimCard_FieldTerminalPathArrayOfValues struct {
	SimCard_FieldTerminalPath
	values interface{}
}

var _ SimCard_FieldPathArrayOfValues = (*SimCard_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SimCard_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SimCard_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case SimCard_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case SimCard_FieldPathSelectorContract:
		for _, v := range fpaov.values.([]*contract.Reference) {
			values = append(values, v)
		}
	case SimCard_FieldPathSelectorImsi:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case SimCard_FieldPathSelectorRatePlan:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case SimCard_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*SimCard_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SimCard_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *SimCard_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *SimCard_FieldTerminalPathArrayOfValues) AsContractArrayOfValues() ([]*contract.Reference, bool) {
	res, ok := fpaov.values.([]*contract.Reference)
	return res, ok
}
func (fpaov *SimCard_FieldTerminalPathArrayOfValues) AsImsiArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *SimCard_FieldTerminalPathArrayOfValues) AsRatePlanArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *SimCard_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*SimCard_Status, bool) {
	res, ok := fpaov.values.([]*SimCard_Status)
	return res, ok
}

type SimCard_FieldSubPathArrayOfValues struct {
	SimCard_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ SimCard_FieldPathArrayOfValues = (*SimCard_FieldSubPathArrayOfValues)(nil)

func (fpsaov *SimCard_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *SimCard_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *SimCard_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (SimCardStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(SimCardStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SimCardStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() SimCardStatus_FieldPathSelector
	Get(source *SimCard_Status) []interface{}
	GetSingle(source *SimCard_Status) (interface{}, bool)
	ClearValue(item *SimCard_Status)

	// Those methods build corresponding SimCardStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SimCardStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) SimCardStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SimCardStatus_FieldPathArrayItemValue
}

type SimCardStatus_FieldPathSelector int32

const (
	SimCardStatus_FieldPathSelectorState SimCardStatus_FieldPathSelector = 0
	SimCardStatus_FieldPathSelectorError SimCardStatus_FieldPathSelector = 1
)

func (s SimCardStatus_FieldPathSelector) String() string {
	switch s {
	case SimCardStatus_FieldPathSelectorState:
		return "state"
	case SimCardStatus_FieldPathSelectorError:
		return "error"
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard_Status: %d", s))
	}
}

func BuildSimCardStatus_FieldPath(fp gotenobject.RawFieldPath) (SimCardStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SimCard_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "state":
			return &SimCardStatus_FieldTerminalPath{selector: SimCardStatus_FieldPathSelectorState}, nil
		case "error":
			return &SimCardStatus_FieldTerminalPath{selector: SimCardStatus_FieldPathSelectorError}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SimCard_Status", fp)
}

func ParseSimCardStatus_FieldPath(rawField string) (SimCardStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSimCardStatus_FieldPath(fp)
}

func MustParseSimCardStatus_FieldPath(rawField string) SimCardStatus_FieldPath {
	fp, err := ParseSimCardStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SimCardStatus_FieldTerminalPath struct {
	selector SimCardStatus_FieldPathSelector
}

var _ SimCardStatus_FieldPath = (*SimCardStatus_FieldTerminalPath)(nil)

func (fp *SimCardStatus_FieldTerminalPath) Selector() SimCardStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SimCardStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SimCardStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SimCard_Status
func (fp *SimCardStatus_FieldTerminalPath) Get(source *SimCard_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SimCardStatus_FieldPathSelectorState:
			values = append(values, source.State)
		case SimCardStatus_FieldPathSelectorError:
			values = append(values, source.Error)
		default:
			panic(fmt.Sprintf("Invalid selector for SimCard_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *SimCardStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SimCard_Status))
}

// GetSingle returns value pointed by specific field of from source SimCard_Status
func (fp *SimCardStatus_FieldTerminalPath) GetSingle(source *SimCard_Status) (interface{}, bool) {
	switch fp.selector {
	case SimCardStatus_FieldPathSelectorState:
		return source.GetState(), source != nil
	case SimCardStatus_FieldPathSelectorError:
		return source.GetError(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard_Status: %d", fp.selector))
	}
}

func (fp *SimCardStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SimCard_Status))
}

// GetDefault returns a default value of the field type
func (fp *SimCardStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SimCardStatus_FieldPathSelectorState:
		return carrier.SimState_SIM_STATE_UNSPECIFIED
	case SimCardStatus_FieldPathSelectorError:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard_Status: %d", fp.selector))
	}
}

func (fp *SimCardStatus_FieldTerminalPath) ClearValue(item *SimCard_Status) {
	if item != nil {
		switch fp.selector {
		case SimCardStatus_FieldPathSelectorState:
			item.State = carrier.SimState_SIM_STATE_UNSPECIFIED
		case SimCardStatus_FieldPathSelectorError:
			item.Error = ""
		default:
			panic(fmt.Sprintf("Invalid selector for SimCard_Status: %d", fp.selector))
		}
	}
}

func (fp *SimCardStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SimCard_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *SimCardStatus_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SimCardStatus_FieldPathSelectorState ||
		fp.selector == SimCardStatus_FieldPathSelectorError
}

func (fp *SimCardStatus_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SimCardStatus_FieldTerminalPath) WithIValue(value interface{}) SimCardStatus_FieldPathValue {
	switch fp.selector {
	case SimCardStatus_FieldPathSelectorState:
		return &SimCardStatus_FieldTerminalPathValue{SimCardStatus_FieldTerminalPath: *fp, value: value.(carrier.SimState)}
	case SimCardStatus_FieldPathSelectorError:
		return &SimCardStatus_FieldTerminalPathValue{SimCardStatus_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard_Status: %d", fp.selector))
	}
}

func (fp *SimCardStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SimCardStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) SimCardStatus_FieldPathArrayOfValues {
	fpaov := &SimCardStatus_FieldTerminalPathArrayOfValues{SimCardStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	case SimCardStatus_FieldPathSelectorState:
		return &SimCardStatus_FieldTerminalPathArrayOfValues{SimCardStatus_FieldTerminalPath: *fp, values: values.([]carrier.SimState)}
	case SimCardStatus_FieldPathSelectorError:
		return &SimCardStatus_FieldTerminalPathArrayOfValues{SimCardStatus_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *SimCardStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SimCardStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) SimCardStatus_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard_Status: %d", fp.selector))
	}
}

func (fp *SimCardStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// SimCardStatus_FieldPathValue allows storing values for Status fields according to their type
type SimCardStatus_FieldPathValue interface {
	SimCardStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SimCard_Status)
	CompareWith(*SimCard_Status) (cmp int, comparable bool)
}

func ParseSimCardStatus_FieldPathValue(pathStr, valueStr string) (SimCardStatus_FieldPathValue, error) {
	fp, err := ParseSimCardStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(SimCardStatus_FieldPathValue), nil
}

func MustParseSimCardStatus_FieldPathValue(pathStr, valueStr string) SimCardStatus_FieldPathValue {
	fpv, err := ParseSimCardStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SimCardStatus_FieldTerminalPathValue struct {
	SimCardStatus_FieldTerminalPath
	value interface{}
}

var _ SimCardStatus_FieldPathValue = (*SimCardStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *SimCardStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SimCardStatus_FieldTerminalPathValue) AsStateValue() (carrier.SimState, bool) {
	res, ok := fpv.value.(carrier.SimState)
	return res, ok
}
func (fpv *SimCardStatus_FieldTerminalPathValue) AsErrorValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Status
func (fpv *SimCardStatus_FieldTerminalPathValue) SetTo(target **SimCard_Status) {
	if *target == nil {
		*target = new(SimCard_Status)
	}
	switch fpv.selector {
	case SimCardStatus_FieldPathSelectorState:
		(*target).State = fpv.value.(carrier.SimState)
	case SimCardStatus_FieldPathSelectorError:
		(*target).Error = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard_Status: %d", fpv.selector))
	}
}

func (fpv *SimCardStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SimCard_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SimCardStatus_FieldTerminalPathValue' with the value under path in 'SimCard_Status'.
func (fpv *SimCardStatus_FieldTerminalPathValue) CompareWith(source *SimCard_Status) (int, bool) {
	switch fpv.selector {
	case SimCardStatus_FieldPathSelectorState:
		leftValue := fpv.value.(carrier.SimState)
		rightValue := source.GetState()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SimCardStatus_FieldPathSelectorError:
		leftValue := fpv.value.(string)
		rightValue := source.GetError()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SimCard_Status: %d", fpv.selector))
	}
}

func (fpv *SimCardStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SimCard_Status))
}

// SimCardStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type SimCardStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SimCardStatus_FieldPath
	ContainsValue(*SimCard_Status) bool
}

// ParseSimCardStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSimCardStatus_FieldPathArrayItemValue(pathStr, valueStr string) (SimCardStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseSimCardStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SimCardStatus_FieldPathArrayItemValue), nil
}

func MustParseSimCardStatus_FieldPathArrayItemValue(pathStr, valueStr string) SimCardStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseSimCardStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SimCardStatus_FieldTerminalPathArrayItemValue struct {
	SimCardStatus_FieldTerminalPath
	value interface{}
}

var _ SimCardStatus_FieldPathArrayItemValue = (*SimCardStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SimCard_Status as interface{}
func (fpaiv *SimCardStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SimCardStatus_FieldTerminalPathArrayItemValue) GetSingle(source *SimCard_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SimCardStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SimCard_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *SimCardStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *SimCard_Status) bool {
	slice := fpaiv.SimCardStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// SimCardStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type SimCardStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SimCardStatus_FieldPath
}

func ParseSimCardStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (SimCardStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseSimCardStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SimCardStatus_FieldPathArrayOfValues), nil
}

func MustParseSimCardStatus_FieldPathArrayOfValues(pathStr, valuesStr string) SimCardStatus_FieldPathArrayOfValues {
	fpaov, err := ParseSimCardStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SimCardStatus_FieldTerminalPathArrayOfValues struct {
	SimCardStatus_FieldTerminalPath
	values interface{}
}

var _ SimCardStatus_FieldPathArrayOfValues = (*SimCardStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SimCardStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SimCardStatus_FieldPathSelectorState:
		for _, v := range fpaov.values.([]carrier.SimState) {
			values = append(values, v)
		}
	case SimCardStatus_FieldPathSelectorError:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SimCardStatus_FieldTerminalPathArrayOfValues) AsStateArrayOfValues() ([]carrier.SimState, bool) {
	res, ok := fpaov.values.([]carrier.SimState)
	return res, ok
}
func (fpaov *SimCardStatus_FieldTerminalPathArrayOfValues) AsErrorArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
