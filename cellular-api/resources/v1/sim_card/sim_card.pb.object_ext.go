// Code generated by protoc-gen-goten-object
// File: edgelq/cellular-api/proto/v1/sim_card.proto
// DO NOT EDIT!!!

package sim_card

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	carrier "github.com/cloudwan/edgelq-sdk/cellular-api/carrier"
	contract "github.com/cloudwan/edgelq-sdk/cellular-api/resources/v1/contract"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &carrier.TransatelAccount{}
	_ = &contract.Contract{}
	_ = &iam_project.Project{}
	_ = &meta.Meta{}
)

func (o *SimCard) GotenObjectExt() {}

func (o *SimCard) MakeFullFieldMask() *SimCard_FieldMask {
	return FullSimCard_FieldMask()
}

func (o *SimCard) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSimCard_FieldMask()
}

func (o *SimCard) MakeDiffFieldMask(other *SimCard) *SimCard_FieldMask {
	if o == nil && other == nil {
		return &SimCard_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSimCard_FieldMask()
	}

	res := &SimCard_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &SimCard_FieldTerminalPath{selector: SimCard_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SimCard_FieldTerminalPath{selector: SimCard_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SimCard_FieldSubPath{selector: SimCard_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetContract().String() != other.GetContract().String() {
		res.Paths = append(res.Paths, &SimCard_FieldTerminalPath{selector: SimCard_FieldPathSelectorContract})
	}
	if o.GetImsi() != other.GetImsi() {
		res.Paths = append(res.Paths, &SimCard_FieldTerminalPath{selector: SimCard_FieldPathSelectorImsi})
	}
	if o.GetRatePlan() != other.GetRatePlan() {
		res.Paths = append(res.Paths, &SimCard_FieldTerminalPath{selector: SimCard_FieldPathSelectorRatePlan})
	}
	{
		subMask := o.GetStatus().MakeDiffFieldMask(other.GetStatus())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SimCard_FieldTerminalPath{selector: SimCard_FieldPathSelectorStatus})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SimCard_FieldSubPath{selector: SimCard_FieldPathSelectorStatus, subPath: subpath})
			}
		}
	}
	return res
}

func (o *SimCard) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SimCard))
}

func (o *SimCard) Clone() *SimCard {
	if o == nil {
		return nil
	}
	result := &SimCard{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	if o.Contract == nil {
		result.Contract = nil
	} else if data, err := o.Contract.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Contract = &contract.Reference{}
		if err := result.Contract.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Imsi = o.Imsi
	result.RatePlan = o.RatePlan
	result.Status = o.Status.Clone()
	return result
}

func (o *SimCard) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SimCard) Merge(source *SimCard) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source.GetContract() != nil {
		if data, err := source.GetContract().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Contract = &contract.Reference{}
			if err := o.Contract.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Contract = nil
	}
	o.Imsi = source.GetImsi()
	o.RatePlan = source.GetRatePlan()
	if source.GetStatus() != nil {
		if o.Status == nil {
			o.Status = new(SimCard_Status)
		}
		o.Status.Merge(source.GetStatus())
	}
}

func (o *SimCard) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SimCard))
}

func (o *SimCard_Status) GotenObjectExt() {}

func (o *SimCard_Status) MakeFullFieldMask() *SimCard_Status_FieldMask {
	return FullSimCard_Status_FieldMask()
}

func (o *SimCard_Status) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSimCard_Status_FieldMask()
}

func (o *SimCard_Status) MakeDiffFieldMask(other *SimCard_Status) *SimCard_Status_FieldMask {
	if o == nil && other == nil {
		return &SimCard_Status_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSimCard_Status_FieldMask()
	}

	res := &SimCard_Status_FieldMask{}
	if o.GetState() != other.GetState() {
		res.Paths = append(res.Paths, &SimCardStatus_FieldTerminalPath{selector: SimCardStatus_FieldPathSelectorState})
	}
	if o.GetError() != other.GetError() {
		res.Paths = append(res.Paths, &SimCardStatus_FieldTerminalPath{selector: SimCardStatus_FieldPathSelectorError})
	}
	return res
}

func (o *SimCard_Status) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SimCard_Status))
}

func (o *SimCard_Status) Clone() *SimCard_Status {
	if o == nil {
		return nil
	}
	result := &SimCard_Status{}
	result.State = o.State
	result.Error = o.Error
	return result
}

func (o *SimCard_Status) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SimCard_Status) Merge(source *SimCard_Status) {
	o.State = source.GetState()
	o.Error = source.GetError()
}

func (o *SimCard_Status) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SimCard_Status))
}
