// Code generated by protoc-gen-goten-resource
// Resource: SimCard
// DO NOT EDIT!!!

package sim_card

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	carrier "github.com/cloudwan/edgelq-sdk/cellular-api/carrier"
	contract "github.com/cloudwan/edgelq-sdk/cellular-api/resources/v1/contract"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &carrier.TransatelAccount{}
	_ = &contract.Contract{}
	_ = &iam_project.Project{}
	_ = &meta.Meta{}
)

type SimCardList []*SimCard

func (l SimCardList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*SimCard))
}

func (l SimCardList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(SimCardList)...)
}

func (l SimCardList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SimCardList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l SimCardList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*SimCard)
}

func (l SimCardList) Length() int {
	return len(l)
}

type SimCardChangeList []*SimCardChange

func (l SimCardChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*SimCardChange))
}

func (l SimCardChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(SimCardChangeList)...)
}

func (l SimCardChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SimCardChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l SimCardChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*SimCardChange)
}

func (l SimCardChangeList) Length() int {
	return len(l)
}

type SimCardNameList []*Name

func (l SimCardNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l SimCardNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(SimCardNameList)...)
}

func (l SimCardNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SimCardNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l SimCardNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l SimCardNameList) Length() int {
	return len(l)
}

type SimCardReferenceList []*Reference

func (l SimCardReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l SimCardReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(SimCardReferenceList)...)
}

func (l SimCardReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SimCardReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l SimCardReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l SimCardReferenceList) Length() int {
	return len(l)
}

type SimCardParentNameList []*ParentName

func (l SimCardParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l SimCardParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(SimCardParentNameList)...)
}

func (l SimCardParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SimCardParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l SimCardParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l SimCardParentNameList) Length() int {
	return len(l)
}

type SimCardParentReferenceList []*ParentReference

func (l SimCardParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l SimCardParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(SimCardParentReferenceList)...)
}

func (l SimCardParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SimCardParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l SimCardParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l SimCardParentReferenceList) Length() int {
	return len(l)
}

type SimCardMap map[Name]*SimCard

func (m SimCardMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m SimCardMap) Set(res gotenresource.Resource) {
	tRes := res.(*SimCard)
	m[*tRes.Name] = tRes
}

func (m SimCardMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m SimCardMap) Length() int {
	return len(m)
}

func (m SimCardMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type SimCardChangeMap map[Name]*SimCardChange

func (m SimCardChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m SimCardChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*SimCardChange)
	m[*tChange.GetSimCardName()] = tChange
}

func (m SimCardChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m SimCardChangeMap) Length() int {
	return len(m)
}

func (m SimCardChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
