// Code generated by protoc-gen-goten-client
// API: SimCardStockService
// DO NOT EDIT!!!

package sim_card_stock_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	sim_card_stock "github.com/cloudwan/edgelq-sdk/cellular-api/resources/v1/sim_card_stock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &sim_card_stock.SimCardStock{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SimCardStockServiceClient is the client API for SimCardStockService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimCardStockServiceClient interface {
	GetSimCardStock(ctx context.Context, in *GetSimCardStockRequest, opts ...grpc.CallOption) (*sim_card_stock.SimCardStock, error)
	BatchGetSimCardStocks(ctx context.Context, in *BatchGetSimCardStocksRequest, opts ...grpc.CallOption) (*BatchGetSimCardStocksResponse, error)
	ListSimCardStocks(ctx context.Context, in *ListSimCardStocksRequest, opts ...grpc.CallOption) (*ListSimCardStocksResponse, error)
	WatchSimCardStock(ctx context.Context, in *WatchSimCardStockRequest, opts ...grpc.CallOption) (WatchSimCardStockClientStream, error)
	WatchSimCardStocks(ctx context.Context, in *WatchSimCardStocksRequest, opts ...grpc.CallOption) (WatchSimCardStocksClientStream, error)
	CreateSimCardStock(ctx context.Context, in *CreateSimCardStockRequest, opts ...grpc.CallOption) (*sim_card_stock.SimCardStock, error)
	UpdateSimCardStock(ctx context.Context, in *UpdateSimCardStockRequest, opts ...grpc.CallOption) (*sim_card_stock.SimCardStock, error)
	DeleteSimCardStock(ctx context.Context, in *DeleteSimCardStockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Deallocate(ctx context.Context, in *DeallocateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewSimCardStockServiceClient(cc grpc.ClientConnInterface) SimCardStockServiceClient {
	return &client{cc}
}

func (c *client) GetSimCardStock(ctx context.Context, in *GetSimCardStockRequest, opts ...grpc.CallOption) (*sim_card_stock.SimCardStock, error) {
	out := new(sim_card_stock.SimCardStock)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardStockService/GetSimCardStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetSimCardStocks(ctx context.Context, in *BatchGetSimCardStocksRequest, opts ...grpc.CallOption) (*BatchGetSimCardStocksResponse, error) {
	out := new(BatchGetSimCardStocksResponse)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardStockService/BatchGetSimCardStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListSimCardStocks(ctx context.Context, in *ListSimCardStocksRequest, opts ...grpc.CallOption) (*ListSimCardStocksResponse, error) {
	out := new(ListSimCardStocksResponse)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardStockService/ListSimCardStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchSimCardStock(ctx context.Context, in *WatchSimCardStockRequest, opts ...grpc.CallOption) (WatchSimCardStockClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchSimCardStock",
			ServerStreams: true,
		},
		"/ntt.cellular_api.v1.SimCardStockService/WatchSimCardStock", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchSimCardStockWatchSimCardStockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchSimCardStockClientStream interface {
	Recv() (*WatchSimCardStockResponse, error)
	grpc.ClientStream
}

type watchSimCardStockWatchSimCardStockClient struct {
	grpc.ClientStream
}

func (x *watchSimCardStockWatchSimCardStockClient) Recv() (*WatchSimCardStockResponse, error) {
	m := new(WatchSimCardStockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchSimCardStocks(ctx context.Context, in *WatchSimCardStocksRequest, opts ...grpc.CallOption) (WatchSimCardStocksClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchSimCardStocks",
			ServerStreams: true,
		},
		"/ntt.cellular_api.v1.SimCardStockService/WatchSimCardStocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchSimCardStocksWatchSimCardStocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchSimCardStocksClientStream interface {
	Recv() (*WatchSimCardStocksResponse, error)
	grpc.ClientStream
}

type watchSimCardStocksWatchSimCardStocksClient struct {
	grpc.ClientStream
}

func (x *watchSimCardStocksWatchSimCardStocksClient) Recv() (*WatchSimCardStocksResponse, error) {
	m := new(WatchSimCardStocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateSimCardStock(ctx context.Context, in *CreateSimCardStockRequest, opts ...grpc.CallOption) (*sim_card_stock.SimCardStock, error) {
	out := new(sim_card_stock.SimCardStock)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardStockService/CreateSimCardStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateSimCardStock(ctx context.Context, in *UpdateSimCardStockRequest, opts ...grpc.CallOption) (*sim_card_stock.SimCardStock, error) {
	out := new(sim_card_stock.SimCardStock)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardStockService/UpdateSimCardStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteSimCardStock(ctx context.Context, in *DeleteSimCardStockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardStockService/DeleteSimCardStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardStockService/Allocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Deallocate(ctx context.Context, in *DeallocateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardStockService/Deallocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
