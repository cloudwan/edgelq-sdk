// Code generated by protoc-gen-goten-go
// File: edgelq/cellular-api/proto/v1/sim_card_stock_service.proto
// DO NOT EDIT!!!

package sim_card_stock_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	sim_card_stock "github.com/cloudwan/edgelq-sdk/cellular-api/resources/v1/sim_card_stock"
	view "github.com/cloudwan/goten-sdk/types/view"
	watch_type "github.com/cloudwan/goten-sdk/types/watch_type"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &sim_card_stock.SimCardStock{}
	_ = &emptypb.Empty{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message of the GetSimCardStock method.
type GetSimCardStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.cellular_api.v1.SimCardStock
	Name *sim_card_stock.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *sim_card_stock.SimCardStock_FieldMask `protobuf:"bytes,3,opt,customtype=SimCardStock_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *GetSimCardStockRequest) Reset() {
	*m = GetSimCardStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetSimCardStockRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetSimCardStockRequest) ProtoMessage() {}

func (m *GetSimCardStockRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetSimCardStockRequest) GotenMessage() {}

// Deprecated, Use GetSimCardStockRequest.ProtoReflect.Descriptor instead.
func (*GetSimCardStockRequest) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetSimCardStockRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetSimCardStockRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetSimCardStockRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetSimCardStockRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetSimCardStockRequest) GetName() *sim_card_stock.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetSimCardStockRequest) GetFieldMask() *sim_card_stock.SimCardStock_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetSimCardStockRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetSimCardStockRequest) SetName(fv *sim_card_stock.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetSimCardStockRequest"))
	}
	m.Name = fv
}

func (m *GetSimCardStockRequest) SetFieldMask(fv *sim_card_stock.SimCardStock_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetSimCardStockRequest"))
	}
	m.FieldMask = fv
}

func (m *GetSimCardStockRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetSimCardStockRequest"))
	}
	m.View = fv
}

// A request message of the BatchGetSimCardStocks method.
type BatchGetSimCardStocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of SimCardStocks
	Names []*sim_card_stock.Name `protobuf:"bytes,2,rep,customtype=Name,name=names,proto3" json:"names,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *sim_card_stock.SimCardStock_FieldMask `protobuf:"bytes,3,opt,customtype=SimCardStock_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *BatchGetSimCardStocksRequest) Reset() {
	*m = BatchGetSimCardStocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetSimCardStocksRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetSimCardStocksRequest) ProtoMessage() {}

func (m *BatchGetSimCardStocksRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetSimCardStocksRequest) GotenMessage() {}

// Deprecated, Use BatchGetSimCardStocksRequest.ProtoReflect.Descriptor instead.
func (*BatchGetSimCardStocksRequest) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetSimCardStocksRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetSimCardStocksRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetSimCardStocksRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetSimCardStocksRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetSimCardStocksRequest) GetNames() []*sim_card_stock.Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetSimCardStocksRequest) GetFieldMask() *sim_card_stock.SimCardStock_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetSimCardStocksRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetSimCardStocksRequest) SetNames(fv []*sim_card_stock.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetSimCardStocksRequest"))
	}
	m.Names = fv
}

func (m *BatchGetSimCardStocksRequest) SetFieldMask(fv *sim_card_stock.SimCardStock_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetSimCardStocksRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetSimCardStocksRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetSimCardStocksRequest"))
	}
	m.View = fv
}

// A response message of the BatchGetSimCardStocks method.
type BatchGetSimCardStocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found SimCardStocks
	SimCardStocks []*sim_card_stock.SimCardStock `protobuf:"bytes,1,rep,name=sim_card_stocks,json=simCardStocks,proto3" json:"sim_card_stocks,omitempty"`
	// list of not found SimCardStocks
	Missing []*sim_card_stock.Name `protobuf:"bytes,2,rep,customtype=Name,name=missing,proto3" json:"missing,omitempty"`
}

func (m *BatchGetSimCardStocksResponse) Reset() {
	*m = BatchGetSimCardStocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetSimCardStocksResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetSimCardStocksResponse) ProtoMessage() {}

func (m *BatchGetSimCardStocksResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetSimCardStocksResponse) GotenMessage() {}

// Deprecated, Use BatchGetSimCardStocksResponse.ProtoReflect.Descriptor instead.
func (*BatchGetSimCardStocksResponse) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetSimCardStocksResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetSimCardStocksResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetSimCardStocksResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetSimCardStocksResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetSimCardStocksResponse) GetSimCardStocks() []*sim_card_stock.SimCardStock {
	if m != nil {
		return m.SimCardStocks
	}
	return nil
}

func (m *BatchGetSimCardStocksResponse) GetMissing() []*sim_card_stock.Name {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetSimCardStocksResponse) SetSimCardStocks(fv []*sim_card_stock.SimCardStock) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SimCardStocks", "BatchGetSimCardStocksResponse"))
	}
	m.SimCardStocks = fv
}

func (m *BatchGetSimCardStocksResponse) SetMissing(fv []*sim_card_stock.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetSimCardStocksResponse"))
	}
	m.Missing = fv
}

// A request message of the ListSimCardStocks method.
type ListSimCardStocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Requested page size. Server may return fewer SimCardStocks than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// ListSimCardStocksResponse.next_page_token.
	PageToken *sim_card_stock.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *sim_card_stock.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *sim_card_stock.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *sim_card_stock.SimCardStock_FieldMask `protobuf:"bytes,6,opt,customtype=SimCardStock_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty"`
}

func (m *ListSimCardStocksRequest) Reset() {
	*m = ListSimCardStocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListSimCardStocksRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListSimCardStocksRequest) ProtoMessage() {}

func (m *ListSimCardStocksRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListSimCardStocksRequest) GotenMessage() {}

// Deprecated, Use ListSimCardStocksRequest.ProtoReflect.Descriptor instead.
func (*ListSimCardStocksRequest) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListSimCardStocksRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListSimCardStocksRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListSimCardStocksRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListSimCardStocksRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListSimCardStocksRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListSimCardStocksRequest) GetPageToken() *sim_card_stock.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListSimCardStocksRequest) GetOrderBy() *sim_card_stock.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListSimCardStocksRequest) GetFilter() *sim_card_stock.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListSimCardStocksRequest) GetFieldMask() *sim_card_stock.SimCardStock_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListSimCardStocksRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListSimCardStocksRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListSimCardStocksRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListSimCardStocksRequest"))
	}
	m.PageSize = fv
}

func (m *ListSimCardStocksRequest) SetPageToken(fv *sim_card_stock.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListSimCardStocksRequest"))
	}
	m.PageToken = fv
}

func (m *ListSimCardStocksRequest) SetOrderBy(fv *sim_card_stock.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListSimCardStocksRequest"))
	}
	m.OrderBy = fv
}

func (m *ListSimCardStocksRequest) SetFilter(fv *sim_card_stock.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListSimCardStocksRequest"))
	}
	m.Filter = fv
}

func (m *ListSimCardStocksRequest) SetFieldMask(fv *sim_card_stock.SimCardStock_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListSimCardStocksRequest"))
	}
	m.FieldMask = fv
}

func (m *ListSimCardStocksRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListSimCardStocksRequest"))
	}
	m.View = fv
}

func (m *ListSimCardStocksRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListSimCardStocksRequest"))
	}
	m.IncludePagingInfo = fv
}

// A response message of the ListSimCardStocks method.
type ListSimCardStocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of SimCardStocks
	SimCardStocks []*sim_card_stock.SimCardStock `protobuf:"bytes,1,rep,name=sim_card_stocks,json=simCardStocks,proto3" json:"sim_card_stocks,omitempty"`
	// A token to retrieve previous page of results.
	//
	// Pass this value in the ListSimCardStocksRequest.page_token.
	PrevPageToken *sim_card_stock.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// A token to retrieve next page of results.
	//
	// Pass this value in the ListSimCardStocksRequest.page_token.
	NextPageToken *sim_card_stock.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`
	// Number of total SimCardStocks across all pages or 0, if there are no items,
	// paging info was not requested or there was an error while trying to get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty"`
}

func (m *ListSimCardStocksResponse) Reset() {
	*m = ListSimCardStocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListSimCardStocksResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListSimCardStocksResponse) ProtoMessage() {}

func (m *ListSimCardStocksResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListSimCardStocksResponse) GotenMessage() {}

// Deprecated, Use ListSimCardStocksResponse.ProtoReflect.Descriptor instead.
func (*ListSimCardStocksResponse) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListSimCardStocksResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListSimCardStocksResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListSimCardStocksResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListSimCardStocksResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListSimCardStocksResponse) GetSimCardStocks() []*sim_card_stock.SimCardStock {
	if m != nil {
		return m.SimCardStocks
	}
	return nil
}

func (m *ListSimCardStocksResponse) GetPrevPageToken() *sim_card_stock.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListSimCardStocksResponse) GetNextPageToken() *sim_card_stock.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListSimCardStocksResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListSimCardStocksResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListSimCardStocksResponse) SetSimCardStocks(fv []*sim_card_stock.SimCardStock) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SimCardStocks", "ListSimCardStocksResponse"))
	}
	m.SimCardStocks = fv
}

func (m *ListSimCardStocksResponse) SetPrevPageToken(fv *sim_card_stock.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListSimCardStocksResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListSimCardStocksResponse) SetNextPageToken(fv *sim_card_stock.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListSimCardStocksResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListSimCardStocksResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListSimCardStocksResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListSimCardStocksResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListSimCardStocksResponse"))
	}
	m.TotalResultsCount = fv
}

// A request message of the WatchSimCardStock method.
type WatchSimCardStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.cellular_api.v1.SimCardStock
	Name *sim_card_stock.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *sim_card_stock.SimCardStock_FieldMask `protobuf:"bytes,2,opt,customtype=SimCardStock_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *WatchSimCardStockRequest) Reset() {
	*m = WatchSimCardStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchSimCardStockRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchSimCardStockRequest) ProtoMessage() {}

func (m *WatchSimCardStockRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchSimCardStockRequest) GotenMessage() {}

// Deprecated, Use WatchSimCardStockRequest.ProtoReflect.Descriptor instead.
func (*WatchSimCardStockRequest) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchSimCardStockRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchSimCardStockRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchSimCardStockRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchSimCardStockRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchSimCardStockRequest) GetName() *sim_card_stock.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchSimCardStockRequest) GetFieldMask() *sim_card_stock.SimCardStock_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchSimCardStockRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchSimCardStockRequest) SetName(fv *sim_card_stock.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchSimCardStockRequest"))
	}
	m.Name = fv
}

func (m *WatchSimCardStockRequest) SetFieldMask(fv *sim_card_stock.SimCardStock_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchSimCardStockRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchSimCardStockRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchSimCardStockRequest"))
	}
	m.View = fv
}

// A response message of the WatchSimCardStock method.
type WatchSimCardStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *sim_card_stock.SimCardStockChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
}

func (m *WatchSimCardStockResponse) Reset() {
	*m = WatchSimCardStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchSimCardStockResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchSimCardStockResponse) ProtoMessage() {}

func (m *WatchSimCardStockResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchSimCardStockResponse) GotenMessage() {}

// Deprecated, Use WatchSimCardStockResponse.ProtoReflect.Descriptor instead.
func (*WatchSimCardStockResponse) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchSimCardStockResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchSimCardStockResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchSimCardStockResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchSimCardStockResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchSimCardStockResponse) GetChange() *sim_card_stock.SimCardStockChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchSimCardStockResponse) SetChange(fv *sim_card_stock.SimCardStockChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchSimCardStockResponse"))
	}
	m.Change = fv
}

// A request message of the WatchSimCardStocks method.
type WatchSimCardStocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.types.WatchType" json:"type,omitempty"`
	// Requested page size. Server may return fewer SimCardStocks than requested.
	// If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *sim_card_stock.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *sim_card_stock.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *sim_card_stock.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to SimCardStock that don't
	// affect any of masked fields won't be sent back.
	FieldMask *sim_card_stock.SimCardStock_FieldMask `protobuf:"bytes,6,opt,customtype=SimCardStock_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// SimCardStock that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty"`
}

func (m *WatchSimCardStocksRequest) Reset() {
	*m = WatchSimCardStocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchSimCardStocksRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchSimCardStocksRequest) ProtoMessage() {}

func (m *WatchSimCardStocksRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchSimCardStocksRequest) GotenMessage() {}

// Deprecated, Use WatchSimCardStocksRequest.ProtoReflect.Descriptor instead.
func (*WatchSimCardStocksRequest) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchSimCardStocksRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchSimCardStocksRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchSimCardStocksRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchSimCardStocksRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchSimCardStocksRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchSimCardStocksRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchSimCardStocksRequest) GetPageToken() *sim_card_stock.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchSimCardStocksRequest) GetOrderBy() *sim_card_stock.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchSimCardStocksRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchSimCardStocksRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchSimCardStocksRequest) GetFilter() *sim_card_stock.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchSimCardStocksRequest) GetFieldMask() *sim_card_stock.SimCardStock_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchSimCardStocksRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchSimCardStocksRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchSimCardStocksRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchSimCardStocksRequest"))
	}
	m.Type = fv
}

func (m *WatchSimCardStocksRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchSimCardStocksRequest"))
	}
	m.PageSize = fv
}

func (m *WatchSimCardStocksRequest) SetPageToken(fv *sim_card_stock.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchSimCardStocksRequest"))
	}
	m.PageToken = fv
}

func (m *WatchSimCardStocksRequest) SetOrderBy(fv *sim_card_stock.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchSimCardStocksRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchSimCardStocksRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchSimCardStocksRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchSimCardStocksRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchSimCardStocksRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchSimCardStocksRequest) SetFilter(fv *sim_card_stock.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchSimCardStocksRequest"))
	}
	m.Filter = fv
}

func (m *WatchSimCardStocksRequest) SetFieldMask(fv *sim_card_stock.SimCardStock_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchSimCardStocksRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchSimCardStocksRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchSimCardStocksRequest"))
	}
	m.View = fv
}

func (m *WatchSimCardStocksRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchSimCardStocksRequest"))
	}
	m.MaxChunkSize = fv
}

// A response message of the WatchSimCardStocks method.
type WatchSimCardStocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of SimCardStocks
	SimCardStockChanges []*sim_card_stock.SimCardStockChange `protobuf:"bytes,2,rep,name=sim_card_stock_changes,json=simCardStockChanges,proto3" json:"sim_card_stock_changes,omitempty"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All SimCardStocks will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchSimCardStocksResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (SimCardStocks will contains
	// changes of type Current only). Any resume tokens should be discarded as
	// well. This field should be checked only for stateless watch. In stateful
	// those kind of errors are handled by the server side. Will never be sent
	// along with is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty"`
}

func (m *WatchSimCardStocksResponse) Reset() {
	*m = WatchSimCardStocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchSimCardStocksResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchSimCardStocksResponse) ProtoMessage() {}

func (m *WatchSimCardStocksResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchSimCardStocksResponse) GotenMessage() {}

// Deprecated, Use WatchSimCardStocksResponse.ProtoReflect.Descriptor instead.
func (*WatchSimCardStocksResponse) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchSimCardStocksResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchSimCardStocksResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchSimCardStocksResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchSimCardStocksResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchSimCardStocksResponse) GetSimCardStockChanges() []*sim_card_stock.SimCardStockChange {
	if m != nil {
		return m.SimCardStockChanges
	}
	return nil
}

func (m *WatchSimCardStocksResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchSimCardStocksResponse) GetPageTokenChange() *WatchSimCardStocksResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchSimCardStocksResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchSimCardStocksResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchSimCardStocksResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchSimCardStocksResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchSimCardStocksResponse) SetSimCardStockChanges(fv []*sim_card_stock.SimCardStockChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SimCardStockChanges", "WatchSimCardStocksResponse"))
	}
	m.SimCardStockChanges = fv
}

func (m *WatchSimCardStocksResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchSimCardStocksResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchSimCardStocksResponse) SetPageTokenChange(fv *WatchSimCardStocksResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchSimCardStocksResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchSimCardStocksResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchSimCardStocksResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchSimCardStocksResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchSimCardStocksResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchSimCardStocksResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchSimCardStocksResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchSimCardStocksResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchSimCardStocksResponse"))
	}
	m.IsHardReset = fv
}

// A request message of the CreateSimCardStock method.
type CreateSimCardStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// SimCardStock resource body
	SimCardStock *sim_card_stock.SimCardStock `protobuf:"bytes,2,opt,name=sim_card_stock,json=simCardStock,proto3" json:"sim_card_stock,omitempty"`
	// Optional masking applied to response object to reduce message response
	// size.
	ResponseMask *CreateSimCardStockRequest_ResponseMask `protobuf:"bytes,3,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
}

func (m *CreateSimCardStockRequest) Reset() {
	*m = CreateSimCardStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateSimCardStockRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateSimCardStockRequest) ProtoMessage() {}

func (m *CreateSimCardStockRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateSimCardStockRequest) GotenMessage() {}

// Deprecated, Use CreateSimCardStockRequest.ProtoReflect.Descriptor instead.
func (*CreateSimCardStockRequest) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateSimCardStockRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateSimCardStockRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateSimCardStockRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateSimCardStockRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateSimCardStockRequest) GetSimCardStock() *sim_card_stock.SimCardStock {
	if m != nil {
		return m.SimCardStock
	}
	return nil
}

func (m *CreateSimCardStockRequest) GetResponseMask() *CreateSimCardStockRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *CreateSimCardStockRequest) SetSimCardStock(fv *sim_card_stock.SimCardStock) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SimCardStock", "CreateSimCardStockRequest"))
	}
	m.SimCardStock = fv
}

func (m *CreateSimCardStockRequest) SetResponseMask(fv *CreateSimCardStockRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "CreateSimCardStockRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the UpdateSimCardStock method.
type UpdateSimCardStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// SimCardStock resource body
	SimCardStock *sim_card_stock.SimCardStock `protobuf:"bytes,2,opt,name=sim_card_stock,json=simCardStock,proto3" json:"sim_card_stock,omitempty"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *sim_card_stock.SimCardStock_FieldMask `protobuf:"bytes,3,opt,customtype=SimCardStock_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateSimCardStockRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty"`
	// If set to true, and the resource is not found,
	// a new resource will be created.  In this situation,
	// 'field_mask' is ignored.
	//
	// https://google.aip.dev/134#create-or-update
	AllowMissing bool `protobuf:"varint,5,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	// reduce message response size.
	ResponseMask *UpdateSimCardStockRequest_ResponseMask `protobuf:"bytes,6,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty"`
}

func (m *UpdateSimCardStockRequest) Reset() {
	*m = UpdateSimCardStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateSimCardStockRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateSimCardStockRequest) ProtoMessage() {}

func (m *UpdateSimCardStockRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateSimCardStockRequest) GotenMessage() {}

// Deprecated, Use UpdateSimCardStockRequest.ProtoReflect.Descriptor instead.
func (*UpdateSimCardStockRequest) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateSimCardStockRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateSimCardStockRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateSimCardStockRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateSimCardStockRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateSimCardStockRequest) GetSimCardStock() *sim_card_stock.SimCardStock {
	if m != nil {
		return m.SimCardStock
	}
	return nil
}

func (m *UpdateSimCardStockRequest) GetUpdateMask() *sim_card_stock.SimCardStock_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateSimCardStockRequest) GetCas() *UpdateSimCardStockRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateSimCardStockRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *UpdateSimCardStockRequest) GetResponseMask() *UpdateSimCardStockRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *UpdateSimCardStockRequest) SetSimCardStock(fv *sim_card_stock.SimCardStock) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SimCardStock", "UpdateSimCardStockRequest"))
	}
	m.SimCardStock = fv
}

func (m *UpdateSimCardStockRequest) SetUpdateMask(fv *sim_card_stock.SimCardStock_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateSimCardStockRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateSimCardStockRequest) SetCas(fv *UpdateSimCardStockRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateSimCardStockRequest"))
	}
	m.Cas = fv
}

func (m *UpdateSimCardStockRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "UpdateSimCardStockRequest"))
	}
	m.AllowMissing = fv
}

func (m *UpdateSimCardStockRequest) SetResponseMask(fv *UpdateSimCardStockRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "UpdateSimCardStockRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the DeleteSimCardStock method.
type DeleteSimCardStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.cellular_api.v1.SimCardStock
	Name *sim_card_stock.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// If set to true, and the resource is not found, method will be successful
	// and will not return NotFound error.
	AllowMissing bool `protobuf:"varint,2,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (m *DeleteSimCardStockRequest) Reset() {
	*m = DeleteSimCardStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteSimCardStockRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteSimCardStockRequest) ProtoMessage() {}

func (m *DeleteSimCardStockRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteSimCardStockRequest) GotenMessage() {}

// Deprecated, Use DeleteSimCardStockRequest.ProtoReflect.Descriptor instead.
func (*DeleteSimCardStockRequest) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteSimCardStockRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteSimCardStockRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteSimCardStockRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteSimCardStockRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteSimCardStockRequest) GetName() *sim_card_stock.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteSimCardStockRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *DeleteSimCardStockRequest) SetName(fv *sim_card_stock.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteSimCardStockRequest"))
	}
	m.Name = fv
}

func (m *DeleteSimCardStockRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "DeleteSimCardStockRequest"))
	}
	m.AllowMissing = fv
}

type WatchSimCardStocksResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *sim_card_stock.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// New token to retrieve next page of results.
	NextPageToken *sim_card_stock.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *WatchSimCardStocksResponse_PageTokenChange) Reset() {
	*m = WatchSimCardStocksResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchSimCardStocksResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchSimCardStocksResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchSimCardStocksResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchSimCardStocksResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchSimCardStocksResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchSimCardStocksResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchSimCardStocksResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchSimCardStocksResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchSimCardStocksResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchSimCardStocksResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchSimCardStocksResponse_PageTokenChange) GetPrevPageToken() *sim_card_stock.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchSimCardStocksResponse_PageTokenChange) GetNextPageToken() *sim_card_stock.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchSimCardStocksResponse_PageTokenChange) SetPrevPageToken(fv *sim_card_stock.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchSimCardStocksResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchSimCardStocksResponse_PageTokenChange) SetNextPageToken(fv *sim_card_stock.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchSimCardStocksResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// ResponseMask allows client to reduce response message size.
type CreateSimCardStockRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*CreateSimCardStockRequest_ResponseMask_SkipEntireResponseBody
	//	*CreateSimCardStockRequest_ResponseMask_BodyMask
	Masking isCreateSimCardStockRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *CreateSimCardStockRequest_ResponseMask) Reset() {
	*m = CreateSimCardStockRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateSimCardStockRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateSimCardStockRequest_ResponseMask) ProtoMessage() {}

func (m *CreateSimCardStockRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateSimCardStockRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use CreateSimCardStockRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*CreateSimCardStockRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{9, 0}
}

func (m *CreateSimCardStockRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateSimCardStockRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateSimCardStockRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateSimCardStockRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isCreateSimCardStockRequest_ResponseMask_Masking interface {
	isCreateSimCardStockRequest_ResponseMask_Masking()
}

type CreateSimCardStockRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof"`
}
type CreateSimCardStockRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields.
	BodyMask *sim_card_stock.SimCardStock_FieldMask `protobuf:"bytes,2,opt,customtype=SimCardStock_FieldMask,name=body_mask,json=bodyMask,proto3,oneof"`
}

func (*CreateSimCardStockRequest_ResponseMask_SkipEntireResponseBody) isCreateSimCardStockRequest_ResponseMask_Masking() {
}
func (*CreateSimCardStockRequest_ResponseMask_BodyMask) isCreateSimCardStockRequest_ResponseMask_Masking() {
}
func (m *CreateSimCardStockRequest_ResponseMask) GetMasking() isCreateSimCardStockRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *CreateSimCardStockRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*CreateSimCardStockRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *CreateSimCardStockRequest_ResponseMask) GetBodyMask() *sim_card_stock.SimCardStock_FieldMask {
	if x, ok := m.GetMasking().(*CreateSimCardStockRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *CreateSimCardStockRequest_ResponseMask) SetMasking(ofv isCreateSimCardStockRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isCreateSimCardStockRequest_ResponseMask_Masking", "CreateSimCardStockRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *CreateSimCardStockRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&CreateSimCardStockRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *CreateSimCardStockRequest_ResponseMask) SetBodyMask(fv *sim_card_stock.SimCardStock_FieldMask) {
	m.SetMasking(&CreateSimCardStockRequest_ResponseMask_BodyMask{BodyMask: fv})
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateSimCardStockRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *sim_card_stock.SimCardStock `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *sim_card_stock.SimCardStock_FieldMask `protobuf:"bytes,2,opt,customtype=SimCardStock_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (m *UpdateSimCardStockRequest_CAS) Reset() {
	*m = UpdateSimCardStockRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateSimCardStockRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateSimCardStockRequest_CAS) ProtoMessage() {}

func (m *UpdateSimCardStockRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateSimCardStockRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateSimCardStockRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateSimCardStockRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateSimCardStockRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateSimCardStockRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateSimCardStockRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateSimCardStockRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateSimCardStockRequest_CAS) GetConditionalState() *sim_card_stock.SimCardStock {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateSimCardStockRequest_CAS) GetFieldMask() *sim_card_stock.SimCardStock_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateSimCardStockRequest_CAS) SetConditionalState(fv *sim_card_stock.SimCardStock) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateSimCardStockRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateSimCardStockRequest_CAS) SetFieldMask(fv *sim_card_stock.SimCardStock_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateSimCardStockRequest_CAS"))
	}
	m.FieldMask = fv
}

// ResponseMask allows client to reduce response message size.
type UpdateSimCardStockRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*UpdateSimCardStockRequest_ResponseMask_SkipEntireResponseBody
	//	*UpdateSimCardStockRequest_ResponseMask_UpdatedFieldsOnly
	//	*UpdateSimCardStockRequest_ResponseMask_BodyMask
	Masking isUpdateSimCardStockRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *UpdateSimCardStockRequest_ResponseMask) Reset() {
	*m = UpdateSimCardStockRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateSimCardStockRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateSimCardStockRequest_ResponseMask) ProtoMessage() {}

func (m *UpdateSimCardStockRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateSimCardStockRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use UpdateSimCardStockRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*UpdateSimCardStockRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP(), []int{10, 1}
}

func (m *UpdateSimCardStockRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateSimCardStockRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateSimCardStockRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateSimCardStockRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isUpdateSimCardStockRequest_ResponseMask_Masking interface {
	isUpdateSimCardStockRequest_ResponseMask_Masking()
}

type UpdateSimCardStockRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated. Field body_mask is ignored if
	// set.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof"`
}
type UpdateSimCardStockRequest_ResponseMask_UpdatedFieldsOnly struct {
	// Include all fields that were actually updated during processing. Note
	// this may be larger than update mask if some fields were computed
	// additionally. Name is added as well.
	UpdatedFieldsOnly bool `protobuf:"varint,2,opt,name=updated_fields_only,json=updatedFieldsOnly,proto3,oneof"`
}
type UpdateSimCardStockRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields. If skip_entire_response_body is true, this field is
	// ignored.
	BodyMask *sim_card_stock.SimCardStock_FieldMask `protobuf:"bytes,3,opt,customtype=SimCardStock_FieldMask,name=body_mask,json=bodyMask,proto3,oneof"`
}

func (*UpdateSimCardStockRequest_ResponseMask_SkipEntireResponseBody) isUpdateSimCardStockRequest_ResponseMask_Masking() {
}
func (*UpdateSimCardStockRequest_ResponseMask_UpdatedFieldsOnly) isUpdateSimCardStockRequest_ResponseMask_Masking() {
}
func (*UpdateSimCardStockRequest_ResponseMask_BodyMask) isUpdateSimCardStockRequest_ResponseMask_Masking() {
}
func (m *UpdateSimCardStockRequest_ResponseMask) GetMasking() isUpdateSimCardStockRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *UpdateSimCardStockRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*UpdateSimCardStockRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *UpdateSimCardStockRequest_ResponseMask) GetUpdatedFieldsOnly() bool {
	if x, ok := m.GetMasking().(*UpdateSimCardStockRequest_ResponseMask_UpdatedFieldsOnly); ok {
		return x.UpdatedFieldsOnly
	}
	return false
}
func (m *UpdateSimCardStockRequest_ResponseMask) GetBodyMask() *sim_card_stock.SimCardStock_FieldMask {
	if x, ok := m.GetMasking().(*UpdateSimCardStockRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *UpdateSimCardStockRequest_ResponseMask) SetMasking(ofv isUpdateSimCardStockRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isUpdateSimCardStockRequest_ResponseMask_Masking", "UpdateSimCardStockRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *UpdateSimCardStockRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&UpdateSimCardStockRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *UpdateSimCardStockRequest_ResponseMask) SetUpdatedFieldsOnly(fv bool) {
	m.SetMasking(&UpdateSimCardStockRequest_ResponseMask_UpdatedFieldsOnly{UpdatedFieldsOnly: fv})
}
func (m *UpdateSimCardStockRequest_ResponseMask) SetBodyMask(fv *sim_card_stock.SimCardStock_FieldMask) {
	m.SetMasking(&UpdateSimCardStockRequest_ResponseMask_BodyMask{BodyMask: fv})
}

var edgelq_cellular_api_proto_v1_sim_card_stock_service_proto preflect.FileDescriptor

var edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDesc = []byte{
	0x0a, 0x39, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61,
	0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6e, 0x74, 0x74,
	0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x65, 0x6c, 0x6c,
	0x75, 0x6c, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x6d, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x38, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61,
	0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42,
	0x14, 0xb2, 0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xc8, 0x01, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a,
	0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a, 0x0c, 0x53, 0x69,
	0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x22, 0x9a, 0x01, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x0d, 0x73, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x2e, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22,
	0xfd, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x22, 0x0e, 0x0a,
	0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10,
	0x2a, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x1a,
	0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a,
	0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xb9, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x0f, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c,
	0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x73, 0x69, 0x6d, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xb2, 0xda, 0x21, 0x10, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x18,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a, 0x0c,
	0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x5c, 0x0a, 0x19, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65,
	0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x92, 0x04, 0x0a, 0x19, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2,
	0xda, 0x21, 0x10, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x2a, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x1a, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x12, 0x06, 0x1a, 0x02, 0x08, 0x64, 0x2a, 0x00, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa6, 0x04,
	0x0a, 0x1a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x16,
	0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x13, 0x73, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x11, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75,
	0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x8d, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xfe, 0x02, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42,
	0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x73,
	0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x60, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xa7, 0x01,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3b,
	0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4f, 0x0a, 0x09, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10,
	0x32, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07,
	0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xa1, 0x06, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x0c,
	0x73, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x51, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x14, 0xb2,
	0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x44, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53,
	0x52, 0x03, 0x63, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x60, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xb0, 0x01, 0x0a,
	0x03, 0x43, 0x41, 0x53, 0x12, 0x58, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x10, 0x01, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x14,
	0xb2, 0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a,
	0xd9, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x3b, 0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x30, 0x0a,
	0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x4f, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x14,
	0xb2, 0xda, 0x21, 0x10, 0x32, 0x0e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x6a, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a, 0x0c,
	0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x32, 0xba, 0x10, 0x0a, 0x13, 0x53, 0x69, 0x6d, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xb6, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x22, 0x53, 0x82, 0xdb, 0x21, 0x23, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02,
	0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x73, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xe6, 0x01, 0x0a, 0x15, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x82, 0xdb, 0x21, 0x36, 0x0a,
	0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x08, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01, 0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x32, 0x11, 0x12, 0x0f, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x8a, 0xcc, 0x26,
	0x00, 0x12, 0xc8, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65,
	0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c,
	0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xdb, 0x21, 0x2d, 0x0a, 0x0c, 0x53, 0x69,
	0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x2a, 0x00, 0x32, 0x11, 0x12, 0x0f, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x6d, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xd3, 0x01, 0x0a,
	0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x12, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x6d,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5d, 0x82, 0xdb, 0x21, 0x27, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc,
	0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00,
	0x30, 0x01, 0x12, 0xdb, 0x01, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x6d, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xdb, 0x21, 0x35,
	0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x05,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x00, 0x32, 0x18, 0x12, 0x16, 0x73,
	0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01,
	0x12, 0xd4, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65,
	0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65,
	0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x6b, 0x82, 0xdb, 0x21, 0x32,
	0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x06,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x2a, 0x10, 0x12, 0x0e, 0x73, 0x69, 0x6d, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x0e,
	0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x11,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x73, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xeb, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x2e,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x22, 0x81, 0x01, 0x82, 0xdb, 0x21, 0x30, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x10,
	0x12, 0x0e, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x0e, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x1a, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73, 0x69, 0x6d, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73,
	0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x8a,
	0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xae, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x50, 0x82, 0xdb, 0x21, 0x1e, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x73, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x2a, 0x7d,
	0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xa5, 0x01, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x5b, 0x82, 0xdb, 0x21, 0x20, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x2a,
	0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x02, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73,
	0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xad,
	0x01, 0x0a, 0x0a, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5f, 0x82,
	0xdb, 0x21, 0x22, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x2a, 0x06, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x69, 0x6d,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x64, 0x65,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x1a, 0x34,
	0xca, 0x41, 0x17, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2e, 0x63, 0x6f, 0x6d, 0x42, 0xd0, 0x02, 0xe8, 0xde, 0x21, 0x00, 0x82, 0xff, 0xd0, 0x02, 0x59,
	0x0a, 0x15, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x6d, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x8a, 0xff, 0xd0, 0x02, 0x59, 0x0a, 0x15,
	0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62,
	0x2e, 0x76, 0x31, 0x42, 0x18, 0x53, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a,
	0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x65, 0x6c, 0x6c,
	0x75, 0x6c, 0x61, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x3b, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescOnce sync.Once
	edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescData = edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDesc
)

func edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescGZIP() []byte {
	edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescOnce.Do(func() {
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescData)
	})
	return edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDescData
}

var edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_goTypes = []interface{}{
	(*GetSimCardStockRequest)(nil),                     // 0: ntt.cellular_api.v1.GetSimCardStockRequest
	(*BatchGetSimCardStocksRequest)(nil),               // 1: ntt.cellular_api.v1.BatchGetSimCardStocksRequest
	(*BatchGetSimCardStocksResponse)(nil),              // 2: ntt.cellular_api.v1.BatchGetSimCardStocksResponse
	(*ListSimCardStocksRequest)(nil),                   // 3: ntt.cellular_api.v1.ListSimCardStocksRequest
	(*ListSimCardStocksResponse)(nil),                  // 4: ntt.cellular_api.v1.ListSimCardStocksResponse
	(*WatchSimCardStockRequest)(nil),                   // 5: ntt.cellular_api.v1.WatchSimCardStockRequest
	(*WatchSimCardStockResponse)(nil),                  // 6: ntt.cellular_api.v1.WatchSimCardStockResponse
	(*WatchSimCardStocksRequest)(nil),                  // 7: ntt.cellular_api.v1.WatchSimCardStocksRequest
	(*WatchSimCardStocksResponse)(nil),                 // 8: ntt.cellular_api.v1.WatchSimCardStocksResponse
	(*CreateSimCardStockRequest)(nil),                  // 9: ntt.cellular_api.v1.CreateSimCardStockRequest
	(*UpdateSimCardStockRequest)(nil),                  // 10: ntt.cellular_api.v1.UpdateSimCardStockRequest
	(*DeleteSimCardStockRequest)(nil),                  // 11: ntt.cellular_api.v1.DeleteSimCardStockRequest
	(*WatchSimCardStocksResponse_PageTokenChange)(nil), // 12: ntt.cellular_api.v1.WatchSimCardStocksResponse.PageTokenChange
	(*CreateSimCardStockRequest_ResponseMask)(nil),     // 13: ntt.cellular_api.v1.CreateSimCardStockRequest.ResponseMask
	(*UpdateSimCardStockRequest_CAS)(nil),              // 14: ntt.cellular_api.v1.UpdateSimCardStockRequest.CAS
	(*UpdateSimCardStockRequest_ResponseMask)(nil),     // 15: ntt.cellular_api.v1.UpdateSimCardStockRequest.ResponseMask
	(*sim_card_stock.SimCardStock_FieldMask)(nil),      // 16: ntt.cellular_api.v1.SimCardStock_FieldMask
	(view.View)(0),                            // 17: goten.types.View
	(*sim_card_stock.SimCardStock)(nil),       // 18: ntt.cellular_api.v1.SimCardStock
	(*sim_card_stock.SimCardStockChange)(nil), // 19: ntt.cellular_api.v1.SimCardStockChange
	(watch_type.WatchType)(0),                 // 20: goten.types.WatchType
	(*timestamppb.Timestamp)(nil),             // 21: google.protobuf.Timestamp
	(*AllocateRequest)(nil),                   // 22: ntt.cellular_api.v1.AllocateRequest
	(*DeallocateRequest)(nil),                 // 23: ntt.cellular_api.v1.DeallocateRequest
	(*emptypb.Empty)(nil),                     // 24: google.protobuf.Empty
}
var edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_depIdxs = []int32{
	16, // 0: ntt.cellular_api.v1.GetSimCardStockRequest.field_mask:type_name -> ntt.cellular_api.v1.SimCardStock_FieldMask
	17, // 1: ntt.cellular_api.v1.GetSimCardStockRequest.view:type_name -> goten.types.View
	16, // 2: ntt.cellular_api.v1.BatchGetSimCardStocksRequest.field_mask:type_name -> ntt.cellular_api.v1.SimCardStock_FieldMask
	17, // 3: ntt.cellular_api.v1.BatchGetSimCardStocksRequest.view:type_name -> goten.types.View
	18, // 4: ntt.cellular_api.v1.BatchGetSimCardStocksResponse.sim_card_stocks:type_name -> ntt.cellular_api.v1.SimCardStock
	16, // 5: ntt.cellular_api.v1.ListSimCardStocksRequest.field_mask:type_name -> ntt.cellular_api.v1.SimCardStock_FieldMask
	17, // 6: ntt.cellular_api.v1.ListSimCardStocksRequest.view:type_name -> goten.types.View
	18, // 7: ntt.cellular_api.v1.ListSimCardStocksResponse.sim_card_stocks:type_name -> ntt.cellular_api.v1.SimCardStock
	16, // 8: ntt.cellular_api.v1.WatchSimCardStockRequest.field_mask:type_name -> ntt.cellular_api.v1.SimCardStock_FieldMask
	17, // 9: ntt.cellular_api.v1.WatchSimCardStockRequest.view:type_name -> goten.types.View
	19, // 10: ntt.cellular_api.v1.WatchSimCardStockResponse.change:type_name -> ntt.cellular_api.v1.SimCardStockChange
	20, // 11: ntt.cellular_api.v1.WatchSimCardStocksRequest.type:type_name -> goten.types.WatchType
	21, // 12: ntt.cellular_api.v1.WatchSimCardStocksRequest.starting_time:type_name -> google.protobuf.Timestamp
	16, // 13: ntt.cellular_api.v1.WatchSimCardStocksRequest.field_mask:type_name -> ntt.cellular_api.v1.SimCardStock_FieldMask
	17, // 14: ntt.cellular_api.v1.WatchSimCardStocksRequest.view:type_name -> goten.types.View
	19, // 15: ntt.cellular_api.v1.WatchSimCardStocksResponse.sim_card_stock_changes:type_name -> ntt.cellular_api.v1.SimCardStockChange
	12, // 16: ntt.cellular_api.v1.WatchSimCardStocksResponse.page_token_change:type_name -> ntt.cellular_api.v1.WatchSimCardStocksResponse.PageTokenChange
	18, // 17: ntt.cellular_api.v1.CreateSimCardStockRequest.sim_card_stock:type_name -> ntt.cellular_api.v1.SimCardStock
	13, // 18: ntt.cellular_api.v1.CreateSimCardStockRequest.response_mask:type_name -> ntt.cellular_api.v1.CreateSimCardStockRequest.ResponseMask
	18, // 19: ntt.cellular_api.v1.UpdateSimCardStockRequest.sim_card_stock:type_name -> ntt.cellular_api.v1.SimCardStock
	16, // 20: ntt.cellular_api.v1.UpdateSimCardStockRequest.update_mask:type_name -> ntt.cellular_api.v1.SimCardStock_FieldMask
	14, // 21: ntt.cellular_api.v1.UpdateSimCardStockRequest.cas:type_name -> ntt.cellular_api.v1.UpdateSimCardStockRequest.CAS
	15, // 22: ntt.cellular_api.v1.UpdateSimCardStockRequest.response_mask:type_name -> ntt.cellular_api.v1.UpdateSimCardStockRequest.ResponseMask
	16, // 23: ntt.cellular_api.v1.CreateSimCardStockRequest.ResponseMask.body_mask:type_name -> ntt.cellular_api.v1.SimCardStock_FieldMask
	18, // 24: ntt.cellular_api.v1.UpdateSimCardStockRequest.CAS.conditional_state:type_name -> ntt.cellular_api.v1.SimCardStock
	16, // 25: ntt.cellular_api.v1.UpdateSimCardStockRequest.CAS.field_mask:type_name -> ntt.cellular_api.v1.SimCardStock_FieldMask
	16, // 26: ntt.cellular_api.v1.UpdateSimCardStockRequest.ResponseMask.body_mask:type_name -> ntt.cellular_api.v1.SimCardStock_FieldMask
	0,  // 27: ntt.cellular_api.v1.SimCardStockService.GetSimCardStock:input_type -> ntt.cellular_api.v1.GetSimCardStockRequest
	1,  // 28: ntt.cellular_api.v1.SimCardStockService.BatchGetSimCardStocks:input_type -> ntt.cellular_api.v1.BatchGetSimCardStocksRequest
	3,  // 29: ntt.cellular_api.v1.SimCardStockService.ListSimCardStocks:input_type -> ntt.cellular_api.v1.ListSimCardStocksRequest
	5,  // 30: ntt.cellular_api.v1.SimCardStockService.WatchSimCardStock:input_type -> ntt.cellular_api.v1.WatchSimCardStockRequest
	7,  // 31: ntt.cellular_api.v1.SimCardStockService.WatchSimCardStocks:input_type -> ntt.cellular_api.v1.WatchSimCardStocksRequest
	9,  // 32: ntt.cellular_api.v1.SimCardStockService.CreateSimCardStock:input_type -> ntt.cellular_api.v1.CreateSimCardStockRequest
	10, // 33: ntt.cellular_api.v1.SimCardStockService.UpdateSimCardStock:input_type -> ntt.cellular_api.v1.UpdateSimCardStockRequest
	11, // 34: ntt.cellular_api.v1.SimCardStockService.DeleteSimCardStock:input_type -> ntt.cellular_api.v1.DeleteSimCardStockRequest
	22, // 35: ntt.cellular_api.v1.SimCardStockService.Allocate:input_type -> ntt.cellular_api.v1.AllocateRequest
	23, // 36: ntt.cellular_api.v1.SimCardStockService.Deallocate:input_type -> ntt.cellular_api.v1.DeallocateRequest
	18, // 37: ntt.cellular_api.v1.SimCardStockService.GetSimCardStock:output_type -> ntt.cellular_api.v1.SimCardStock
	2,  // 38: ntt.cellular_api.v1.SimCardStockService.BatchGetSimCardStocks:output_type -> ntt.cellular_api.v1.BatchGetSimCardStocksResponse
	4,  // 39: ntt.cellular_api.v1.SimCardStockService.ListSimCardStocks:output_type -> ntt.cellular_api.v1.ListSimCardStocksResponse
	6,  // 40: ntt.cellular_api.v1.SimCardStockService.WatchSimCardStock:output_type -> ntt.cellular_api.v1.WatchSimCardStockResponse
	8,  // 41: ntt.cellular_api.v1.SimCardStockService.WatchSimCardStocks:output_type -> ntt.cellular_api.v1.WatchSimCardStocksResponse
	18, // 42: ntt.cellular_api.v1.SimCardStockService.CreateSimCardStock:output_type -> ntt.cellular_api.v1.SimCardStock
	18, // 43: ntt.cellular_api.v1.SimCardStockService.UpdateSimCardStock:output_type -> ntt.cellular_api.v1.SimCardStock
	24, // 44: ntt.cellular_api.v1.SimCardStockService.DeleteSimCardStock:output_type -> google.protobuf.Empty
	24, // 45: ntt.cellular_api.v1.SimCardStockService.Allocate:output_type -> google.protobuf.Empty
	24, // 46: ntt.cellular_api.v1.SimCardStockService.Deallocate:output_type -> google.protobuf.Empty
	37, // [37:47] is the sub-list for method output_type
	27, // [27:37] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_init() }
func edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_init() {
	if edgelq_cellular_api_proto_v1_sim_card_stock_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSimCardStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetSimCardStocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetSimCardStocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSimCardStocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSimCardStocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchSimCardStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchSimCardStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchSimCardStocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchSimCardStocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSimCardStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSimCardStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSimCardStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchSimCardStocksResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSimCardStockRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSimCardStockRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSimCardStockRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*CreateSimCardStockRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*CreateSimCardStockRequest_ResponseMask_BodyMask)(nil),
	}
	edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*UpdateSimCardStockRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*UpdateSimCardStockRequest_ResponseMask_UpdatedFieldsOnly)(nil),
		(*UpdateSimCardStockRequest_ResponseMask_BodyMask)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_goTypes,
		DependencyIndexes: edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_depIdxs,
		MessageInfos:      edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_msgTypes,
	}.Build()
	edgelq_cellular_api_proto_v1_sim_card_stock_service_proto = out.File
	edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_rawDesc = nil
	edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_goTypes = nil
	edgelq_cellular_api_proto_v1_sim_card_stock_service_proto_depIdxs = nil
}
