// Code generated by protoc-gen-goten-client
// API: SimCardService
// DO NOT EDIT!!!

package sim_card_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	sim_card "github.com/cloudwan/edgelq-sdk/cellular-api/resources/v1/sim_card"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &sim_card.SimCard{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SimCardServiceClient is the client API for SimCardService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimCardServiceClient interface {
	GetSimCard(ctx context.Context, in *GetSimCardRequest, opts ...grpc.CallOption) (*sim_card.SimCard, error)
	BatchGetSimCards(ctx context.Context, in *BatchGetSimCardsRequest, opts ...grpc.CallOption) (*BatchGetSimCardsResponse, error)
	ListSimCards(ctx context.Context, in *ListSimCardsRequest, opts ...grpc.CallOption) (*ListSimCardsResponse, error)
	WatchSimCard(ctx context.Context, in *WatchSimCardRequest, opts ...grpc.CallOption) (WatchSimCardClientStream, error)
	WatchSimCards(ctx context.Context, in *WatchSimCardsRequest, opts ...grpc.CallOption) (WatchSimCardsClientStream, error)
	CreateSimCard(ctx context.Context, in *CreateSimCardRequest, opts ...grpc.CallOption) (*sim_card.SimCard, error)
	UpdateSimCard(ctx context.Context, in *UpdateSimCardRequest, opts ...grpc.CallOption) (*sim_card.SimCard, error)
	DeleteSimCard(ctx context.Context, in *DeleteSimCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Activate(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Suspend(ctx context.Context, in *SuspendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Reactivate(ctx context.Context, in *ReactivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewSimCardServiceClient(cc grpc.ClientConnInterface) SimCardServiceClient {
	return &client{cc}
}

func (c *client) GetSimCard(ctx context.Context, in *GetSimCardRequest, opts ...grpc.CallOption) (*sim_card.SimCard, error) {
	out := new(sim_card.SimCard)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardService/GetSimCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetSimCards(ctx context.Context, in *BatchGetSimCardsRequest, opts ...grpc.CallOption) (*BatchGetSimCardsResponse, error) {
	out := new(BatchGetSimCardsResponse)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardService/BatchGetSimCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListSimCards(ctx context.Context, in *ListSimCardsRequest, opts ...grpc.CallOption) (*ListSimCardsResponse, error) {
	out := new(ListSimCardsResponse)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardService/ListSimCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchSimCard(ctx context.Context, in *WatchSimCardRequest, opts ...grpc.CallOption) (WatchSimCardClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchSimCard",
			ServerStreams: true,
		},
		"/ntt.cellular_api.v1.SimCardService/WatchSimCard", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchSimCardWatchSimCardClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchSimCardClientStream interface {
	Recv() (*WatchSimCardResponse, error)
	grpc.ClientStream
}

type watchSimCardWatchSimCardClient struct {
	grpc.ClientStream
}

func (x *watchSimCardWatchSimCardClient) Recv() (*WatchSimCardResponse, error) {
	m := new(WatchSimCardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchSimCards(ctx context.Context, in *WatchSimCardsRequest, opts ...grpc.CallOption) (WatchSimCardsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchSimCards",
			ServerStreams: true,
		},
		"/ntt.cellular_api.v1.SimCardService/WatchSimCards", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchSimCardsWatchSimCardsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchSimCardsClientStream interface {
	Recv() (*WatchSimCardsResponse, error)
	grpc.ClientStream
}

type watchSimCardsWatchSimCardsClient struct {
	grpc.ClientStream
}

func (x *watchSimCardsWatchSimCardsClient) Recv() (*WatchSimCardsResponse, error) {
	m := new(WatchSimCardsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateSimCard(ctx context.Context, in *CreateSimCardRequest, opts ...grpc.CallOption) (*sim_card.SimCard, error) {
	out := new(sim_card.SimCard)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardService/CreateSimCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateSimCard(ctx context.Context, in *UpdateSimCardRequest, opts ...grpc.CallOption) (*sim_card.SimCard, error) {
	out := new(sim_card.SimCard)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardService/UpdateSimCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteSimCard(ctx context.Context, in *DeleteSimCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardService/DeleteSimCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Activate(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardService/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Suspend(ctx context.Context, in *SuspendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardService/Suspend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardService/Terminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Reactivate(ctx context.Context, in *ReactivateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.SimCardService/Reactivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
