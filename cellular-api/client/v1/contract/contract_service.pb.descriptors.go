// Code generated by protoc-gen-goten-client
// API: ContractService
// DO NOT EDIT!!!

package contract_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	contract "github.com/cloudwan/edgelq-sdk/cellular-api/resources/v1/contract"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &contract.Contract{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized      bool
	contractServiceDescriptor   *ContractServiceDescriptor
	getContractDescriptor       *GetContractDescriptor
	batchGetContractsDescriptor *BatchGetContractsDescriptor
	listContractsDescriptor     *ListContractsDescriptor
	watchContractDescriptor     *WatchContractDescriptor
	watchContractsDescriptor    *WatchContractsDescriptor
	createContractDescriptor    *CreateContractDescriptor
	updateContractDescriptor    *UpdateContractDescriptor
	deleteContractDescriptor    *DeleteContractDescriptor
)

type GetContractDescriptor struct{}

type GetContractDescriptorClientMsgHandle struct{}

type GetContractDescriptorServerMsgHandle struct{}

func (d *GetContractDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetContractRequest{}
}

func (d *GetContractDescriptor) NewEmptyServerMsg() proto.Message {
	return &contract.Contract{}
}

func (d *GetContractDescriptor) IsUnary() bool {
	return true
}

func (d *GetContractDescriptor) IsClientStream() bool {
	return false
}

func (d *GetContractDescriptor) IsServerStream() bool {
	return false
}

func (d *GetContractDescriptor) IsCollection() bool {
	return false
}

func (d *GetContractDescriptor) IsPlural() bool {
	return false
}

func (d *GetContractDescriptor) HasResource() bool {
	return true
}

func (d *GetContractDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetContractDescriptor) GetVerb() string {
	return "get"
}

func (d *GetContractDescriptor) GetMethodName() string {
	return "GetContract"
}

func (d *GetContractDescriptor) GetFullMethodName() string {
	return "/ntt.cellular_api.v1.ContractService/GetContract"
}

func (d *GetContractDescriptor) GetProtoPkgName() string {
	return "ntt.cellular_api.v1"
}

func (d *GetContractDescriptor) GetApiName() string {
	return "ContractService"
}

func (d *GetContractDescriptor) GetServiceDomain() string {
	return "cellular-api.edgelq.com"
}

func (d *GetContractDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetContractDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return contractServiceDescriptor
}

func (d *GetContractDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return contract.GetDescriptor()
}

func (d *GetContractDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetContractDescriptorClientMsgHandle{}
}

func (d *GetContractDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetContractDescriptorServerMsgHandle{}
}

func (h *GetContractDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetContractRequest) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*contract.Name)(nil)
}

func (h *GetContractDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetContractRequest) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetContractDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetContractDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetContractRequest) *contract.Contract
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetContractDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetContractRequest) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetContractDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*contract.Contract)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*contract.Contract) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*contract.Name)(nil)
}

func (h *GetContractDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*contract.Contract)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*contract.Contract) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetContractDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetContractDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*contract.Contract)
}

func (h *GetContractDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*contract.Contract)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*contract.Contract) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetContractDescriptor() *GetContractDescriptor {
	return getContractDescriptor
}

type BatchGetContractsDescriptor struct{}

type BatchGetContractsDescriptorClientMsgHandle struct{}

type BatchGetContractsDescriptorServerMsgHandle struct{}

func (d *BatchGetContractsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetContractsRequest{}
}

func (d *BatchGetContractsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetContractsResponse{}
}

func (d *BatchGetContractsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetContractsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetContractsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetContractsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetContractsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetContractsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetContractsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetContractsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetContractsDescriptor) GetMethodName() string {
	return "BatchGetContracts"
}

func (d *BatchGetContractsDescriptor) GetFullMethodName() string {
	return "/ntt.cellular_api.v1.ContractService/BatchGetContracts"
}

func (d *BatchGetContractsDescriptor) GetProtoPkgName() string {
	return "ntt.cellular_api.v1"
}

func (d *BatchGetContractsDescriptor) GetApiName() string {
	return "ContractService"
}

func (d *BatchGetContractsDescriptor) GetServiceDomain() string {
	return "cellular-api.edgelq.com"
}

func (d *BatchGetContractsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetContractsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return contractServiceDescriptor
}

func (d *BatchGetContractsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return contract.GetDescriptor()
}

func (d *BatchGetContractsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetContractsDescriptorClientMsgHandle{}
}

func (d *BatchGetContractsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetContractsDescriptorServerMsgHandle{}
}

func (h *BatchGetContractsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetContractsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetContractsRequest) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetContractsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetContractsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetContractsRequest) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return contract.ContractNameList(names)
		}
	}
	return (contract.ContractNameList)(nil)
}

func (h *BatchGetContractsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *BatchGetContractsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetContractsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetContractsRequest) *contract.Contract
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetContractsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetContractsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetContractsRequest) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetContractsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetContractsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetContractsResponse) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetContractsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetContractsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetContractsResponse) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetContracts(); len(resources) > 0 {
			list := make(contract.ContractNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (contract.ContractNameList)(nil)
}

func (h *BatchGetContractsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *BatchGetContractsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetContractsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetContractsResponse) *contract.Contract
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetContractsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetContractsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetContractsResponse) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetContracts(); len(resources) > 0 {
			return contract.ContractList(resources)
		}
	}
	return (contract.ContractList)(nil)
}

func GetBatchGetContractsDescriptor() *BatchGetContractsDescriptor {
	return batchGetContractsDescriptor
}

type ListContractsDescriptor struct{}

type ListContractsDescriptorClientMsgHandle struct{}

type ListContractsDescriptorServerMsgHandle struct{}

func (d *ListContractsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListContractsRequest{}
}

func (d *ListContractsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListContractsResponse{}
}

func (d *ListContractsDescriptor) IsUnary() bool {
	return true
}

func (d *ListContractsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListContractsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListContractsDescriptor) IsCollection() bool {
	return true
}

func (d *ListContractsDescriptor) IsPlural() bool {
	return true
}

func (d *ListContractsDescriptor) HasResource() bool {
	return true
}

func (d *ListContractsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListContractsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListContractsDescriptor) GetMethodName() string {
	return "ListContracts"
}

func (d *ListContractsDescriptor) GetFullMethodName() string {
	return "/ntt.cellular_api.v1.ContractService/ListContracts"
}

func (d *ListContractsDescriptor) GetProtoPkgName() string {
	return "ntt.cellular_api.v1"
}

func (d *ListContractsDescriptor) GetApiName() string {
	return "ContractService"
}

func (d *ListContractsDescriptor) GetServiceDomain() string {
	return "cellular-api.edgelq.com"
}

func (d *ListContractsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListContractsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return contractServiceDescriptor
}

func (d *ListContractsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return contract.GetDescriptor()
}

func (d *ListContractsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListContractsDescriptorClientMsgHandle{}
}

func (d *ListContractsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListContractsDescriptorServerMsgHandle{}
}

func (h *ListContractsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListContractsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListContractsRequest) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListContractsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListContractsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListContractsRequest) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListContractsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListContractsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListContractsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListContractsRequest) *contract.Contract
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListContractsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListContractsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListContractsRequest) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListContractsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListContractsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListContractsResponse) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListContractsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListContractsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListContractsResponse) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetContracts(); len(resources) > 0 {
			list := make(contract.ContractNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (contract.ContractNameList)(nil)
}

func (h *ListContractsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListContractsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListContractsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListContractsResponse) *contract.Contract
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListContractsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListContractsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListContractsResponse) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetContracts(); len(resources) > 0 {
			return contract.ContractList(resources)
		}
	}
	return (contract.ContractList)(nil)
}

func GetListContractsDescriptor() *ListContractsDescriptor {
	return listContractsDescriptor
}

type WatchContractDescriptor struct{}

type WatchContractDescriptorClientMsgHandle struct{}

type WatchContractDescriptorServerMsgHandle struct{}

func (d *WatchContractDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchContractRequest{}
}

func (d *WatchContractDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchContractResponse{}
}

func (d *WatchContractDescriptor) IsUnary() bool {
	return false
}

func (d *WatchContractDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchContractDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchContractDescriptor) IsCollection() bool {
	return false
}

func (d *WatchContractDescriptor) IsPlural() bool {
	return false
}

func (d *WatchContractDescriptor) HasResource() bool {
	return true
}

func (d *WatchContractDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchContractDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchContractDescriptor) GetMethodName() string {
	return "WatchContract"
}

func (d *WatchContractDescriptor) GetFullMethodName() string {
	return "/ntt.cellular_api.v1.ContractService/WatchContract"
}

func (d *WatchContractDescriptor) GetProtoPkgName() string {
	return "ntt.cellular_api.v1"
}

func (d *WatchContractDescriptor) GetApiName() string {
	return "ContractService"
}

func (d *WatchContractDescriptor) GetServiceDomain() string {
	return "cellular-api.edgelq.com"
}

func (d *WatchContractDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchContractDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return contractServiceDescriptor
}

func (d *WatchContractDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return contract.GetDescriptor()
}

func (d *WatchContractDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchContractDescriptorClientMsgHandle{}
}

func (d *WatchContractDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchContractDescriptorServerMsgHandle{}
}

func (h *WatchContractDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchContractRequest) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*contract.Name)(nil)
}

func (h *WatchContractDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchContractRequest) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchContractDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchContractDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchContractRequest) *contract.Contract
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchContractDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchContractRequest) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchContractDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchContractResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchContractResponse) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *contract.ContractChange_Added_:
				return tResChange.Added.GetContract().GetName()
			case *contract.ContractChange_Modified_:
				return tResChange.Modified.GetName()
			case *contract.ContractChange_Removed_:
				return tResChange.Removed.GetName()
			case *contract.ContractChange_Current_:
				return tResChange.Current.GetContract().GetName()
			}
		}
	}
	return (*contract.Name)(nil)
}

func (h *WatchContractDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchContractResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchContractResponse) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchContractDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchContractDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchContractResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchContractResponse) *contract.Contract
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *contract.ContractChange_Added_:
				return tResChange.Added.GetContract()
			case *contract.ContractChange_Modified_:
				return tResChange.Modified.GetContract()
			case *contract.ContractChange_Current_:
				return tResChange.Current.GetContract()
			}
		}
	}
	return (*contract.Contract)(nil)
}

func (h *WatchContractDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchContractResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchContractResponse) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchContractDescriptor() *WatchContractDescriptor {
	return watchContractDescriptor
}

type WatchContractsDescriptor struct{}

type WatchContractsDescriptorClientMsgHandle struct{}

type WatchContractsDescriptorServerMsgHandle struct{}

func (d *WatchContractsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchContractsRequest{}
}

func (d *WatchContractsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchContractsResponse{}
}

func (d *WatchContractsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchContractsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchContractsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchContractsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchContractsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchContractsDescriptor) HasResource() bool {
	return true
}

func (d *WatchContractsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchContractsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchContractsDescriptor) GetMethodName() string {
	return "WatchContracts"
}

func (d *WatchContractsDescriptor) GetFullMethodName() string {
	return "/ntt.cellular_api.v1.ContractService/WatchContracts"
}

func (d *WatchContractsDescriptor) GetProtoPkgName() string {
	return "ntt.cellular_api.v1"
}

func (d *WatchContractsDescriptor) GetApiName() string {
	return "ContractService"
}

func (d *WatchContractsDescriptor) GetServiceDomain() string {
	return "cellular-api.edgelq.com"
}

func (d *WatchContractsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchContractsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return contractServiceDescriptor
}

func (d *WatchContractsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return contract.GetDescriptor()
}

func (d *WatchContractsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchContractsDescriptorClientMsgHandle{}
}

func (d *WatchContractsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchContractsDescriptorServerMsgHandle{}
}

func (h *WatchContractsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchContractsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchContractsRequest) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchContractsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchContractsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchContractsRequest) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchContractsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchContractsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchContractsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchContractsRequest) *contract.Contract
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchContractsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchContractsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchContractsRequest) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchContractsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchContractsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchContractsResponse) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchContractsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchContractsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchContractsResponse) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetContractChanges(); len(resChanges) > 0 {
			list := make(contract.ContractNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *contract.ContractChange_Added_:
					list = append(list, tResChange.Added.GetContract().GetName())
				case *contract.ContractChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *contract.ContractChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *contract.ContractChange_Current_:
					list = append(list, tResChange.Current.GetContract().GetName())
				}
			}
			return list
		}
	}
	return (contract.ContractNameList)(nil)
}

func (h *WatchContractsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchContractsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchContractsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchContractsResponse) *contract.Contract
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchContractsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchContractsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchContractsResponse) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetContractChanges(); len(resChanges) > 0 {
			list := make(contract.ContractList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *contract.ContractChange_Added_:
					list = append(list, tResChange.Added.GetContract())
				case *contract.ContractChange_Modified_:
					list = append(list, tResChange.Modified.GetContract())
				case *contract.ContractChange_Current_:
					list = append(list, tResChange.Current.GetContract())
				}
			}
			return list
		}
	}
	return (contract.ContractList)(nil)
}

func GetWatchContractsDescriptor() *WatchContractsDescriptor {
	return watchContractsDescriptor
}

type CreateContractDescriptor struct{}

type CreateContractDescriptorClientMsgHandle struct{}

type CreateContractDescriptorServerMsgHandle struct{}

func (d *CreateContractDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateContractRequest{}
}

func (d *CreateContractDescriptor) NewEmptyServerMsg() proto.Message {
	return &contract.Contract{}
}

func (d *CreateContractDescriptor) IsUnary() bool {
	return true
}

func (d *CreateContractDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateContractDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateContractDescriptor) IsCollection() bool {
	return true
}

func (d *CreateContractDescriptor) IsPlural() bool {
	return false
}

func (d *CreateContractDescriptor) HasResource() bool {
	return true
}

func (d *CreateContractDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateContractDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateContractDescriptor) GetMethodName() string {
	return "CreateContract"
}

func (d *CreateContractDescriptor) GetFullMethodName() string {
	return "/ntt.cellular_api.v1.ContractService/CreateContract"
}

func (d *CreateContractDescriptor) GetProtoPkgName() string {
	return "ntt.cellular_api.v1"
}

func (d *CreateContractDescriptor) GetApiName() string {
	return "ContractService"
}

func (d *CreateContractDescriptor) GetServiceDomain() string {
	return "cellular-api.edgelq.com"
}

func (d *CreateContractDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateContractDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return contractServiceDescriptor
}

func (d *CreateContractDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return contract.GetDescriptor()
}

func (d *CreateContractDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateContractDescriptorClientMsgHandle{}
}

func (d *CreateContractDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateContractDescriptorServerMsgHandle{}
}

func (h *CreateContractDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateContractRequest) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetContract()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*contract.Name)(nil)
}

func (h *CreateContractDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateContractRequest) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateContractDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CreateContractDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateContractRequest) *contract.Contract
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetContract()
	}
	return (*contract.Contract)(nil)
}

func (h *CreateContractDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateContractRequest) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateContractDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*contract.Contract)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*contract.Contract) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*contract.Name)(nil)
}

func (h *CreateContractDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*contract.Contract)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*contract.Contract) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateContractDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CreateContractDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*contract.Contract)
}

func (h *CreateContractDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*contract.Contract)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*contract.Contract) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateContractDescriptor() *CreateContractDescriptor {
	return createContractDescriptor
}

type UpdateContractDescriptor struct{}

type UpdateContractDescriptorClientMsgHandle struct{}

type UpdateContractDescriptorServerMsgHandle struct{}

func (d *UpdateContractDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateContractRequest{}
}

func (d *UpdateContractDescriptor) NewEmptyServerMsg() proto.Message {
	return &contract.Contract{}
}

func (d *UpdateContractDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateContractDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateContractDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateContractDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateContractDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateContractDescriptor) HasResource() bool {
	return true
}

func (d *UpdateContractDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateContractDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateContractDescriptor) GetMethodName() string {
	return "UpdateContract"
}

func (d *UpdateContractDescriptor) GetFullMethodName() string {
	return "/ntt.cellular_api.v1.ContractService/UpdateContract"
}

func (d *UpdateContractDescriptor) GetProtoPkgName() string {
	return "ntt.cellular_api.v1"
}

func (d *UpdateContractDescriptor) GetApiName() string {
	return "ContractService"
}

func (d *UpdateContractDescriptor) GetServiceDomain() string {
	return "cellular-api.edgelq.com"
}

func (d *UpdateContractDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateContractDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return contractServiceDescriptor
}

func (d *UpdateContractDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return contract.GetDescriptor()
}

func (d *UpdateContractDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateContractDescriptorClientMsgHandle{}
}

func (d *UpdateContractDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateContractDescriptorServerMsgHandle{}
}

func (h *UpdateContractDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateContractRequest) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetContract()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*contract.Name)(nil)
}

func (h *UpdateContractDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateContractRequest) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateContractDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *UpdateContractDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateContractRequest) *contract.Contract
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetContract()
	}
	return (*contract.Contract)(nil)
}

func (h *UpdateContractDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateContractRequest) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateContractDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*contract.Contract)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*contract.Contract) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*contract.Name)(nil)
}

func (h *UpdateContractDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*contract.Contract)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*contract.Contract) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateContractDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *UpdateContractDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*contract.Contract)
}

func (h *UpdateContractDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*contract.Contract)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*contract.Contract) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateContractDescriptor() *UpdateContractDescriptor {
	return updateContractDescriptor
}

type DeleteContractDescriptor struct{}

type DeleteContractDescriptorClientMsgHandle struct{}

type DeleteContractDescriptorServerMsgHandle struct{}

func (d *DeleteContractDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteContractRequest{}
}

func (d *DeleteContractDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteContractDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteContractDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteContractDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteContractDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteContractDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteContractDescriptor) HasResource() bool {
	return true
}

func (d *DeleteContractDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteContractDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteContractDescriptor) GetMethodName() string {
	return "DeleteContract"
}

func (d *DeleteContractDescriptor) GetFullMethodName() string {
	return "/ntt.cellular_api.v1.ContractService/DeleteContract"
}

func (d *DeleteContractDescriptor) GetProtoPkgName() string {
	return "ntt.cellular_api.v1"
}

func (d *DeleteContractDescriptor) GetApiName() string {
	return "ContractService"
}

func (d *DeleteContractDescriptor) GetServiceDomain() string {
	return "cellular-api.edgelq.com"
}

func (d *DeleteContractDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteContractDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return contractServiceDescriptor
}

func (d *DeleteContractDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return contract.GetDescriptor()
}

func (d *DeleteContractDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteContractDescriptorClientMsgHandle{}
}

func (d *DeleteContractDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteContractDescriptorServerMsgHandle{}
}

func (h *DeleteContractDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteContractRequest) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*contract.Name)(nil)
}

func (h *DeleteContractDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteContractRequest) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteContractDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *DeleteContractDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteContractRequest) *contract.Contract
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteContractDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteContractRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteContractRequest) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteContractDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *contract.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteContractDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*contract.Name
	})
	if ok {
		return contract.ContractNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteContractDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *DeleteContractDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *contract.Contract
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteContractDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*contract.Contract
	})
	if ok {
		return contract.ContractList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteContractDescriptor() *DeleteContractDescriptor {
	return deleteContractDescriptor
}

type ContractServiceDescriptor struct{}

func (d *ContractServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getContractDescriptor,
		batchGetContractsDescriptor,
		listContractsDescriptor,
		watchContractDescriptor,
		watchContractsDescriptor,
		createContractDescriptor,
		updateContractDescriptor,
		deleteContractDescriptor,
	}
}

func (d *ContractServiceDescriptor) GetFullAPIName() string {
	return "/ntt.cellular_api.v1.ContractService"
}

func (d *ContractServiceDescriptor) GetProtoPkgName() string {
	return "ntt.cellular_api.v1"
}

func (d *ContractServiceDescriptor) GetApiName() string {
	return "ContractService"
}

func (d *ContractServiceDescriptor) GetServiceDomain() string {
	return "cellular-api.edgelq.com"
}

func (d *ContractServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetContractServiceDescriptor() *ContractServiceDescriptor {
	return contractServiceDescriptor
}

func initDescriptors() {
	contractServiceDescriptor = &ContractServiceDescriptor{}
	getContractDescriptor = &GetContractDescriptor{}
	batchGetContractsDescriptor = &BatchGetContractsDescriptor{}
	listContractsDescriptor = &ListContractsDescriptor{}
	watchContractDescriptor = &WatchContractDescriptor{}
	watchContractsDescriptor = &WatchContractsDescriptor{}
	createContractDescriptor = &CreateContractDescriptor{}
	updateContractDescriptor = &UpdateContractDescriptor{}
	deleteContractDescriptor = &DeleteContractDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(contractServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getContractDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetContractsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listContractsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchContractDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchContractsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createContractDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateContractDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteContractDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
