// Code generated by protoc-gen-goten-client
// API: ContractService
// DO NOT EDIT!!!

package contract_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	contract "github.com/cloudwan/edgelq-sdk/cellular-api/resources/v1/contract"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &contract.Contract{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ContractServiceClient is the client API for ContractService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContractServiceClient interface {
	GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*contract.Contract, error)
	BatchGetContracts(ctx context.Context, in *BatchGetContractsRequest, opts ...grpc.CallOption) (*BatchGetContractsResponse, error)
	ListContracts(ctx context.Context, in *ListContractsRequest, opts ...grpc.CallOption) (*ListContractsResponse, error)
	WatchContract(ctx context.Context, in *WatchContractRequest, opts ...grpc.CallOption) (WatchContractClientStream, error)
	WatchContracts(ctx context.Context, in *WatchContractsRequest, opts ...grpc.CallOption) (WatchContractsClientStream, error)
	CreateContract(ctx context.Context, in *CreateContractRequest, opts ...grpc.CallOption) (*contract.Contract, error)
	UpdateContract(ctx context.Context, in *UpdateContractRequest, opts ...grpc.CallOption) (*contract.Contract, error)
	DeleteContract(ctx context.Context, in *DeleteContractRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewContractServiceClient(cc grpc.ClientConnInterface) ContractServiceClient {
	return &client{cc}
}

func (c *client) GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*contract.Contract, error) {
	out := new(contract.Contract)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.ContractService/GetContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetContracts(ctx context.Context, in *BatchGetContractsRequest, opts ...grpc.CallOption) (*BatchGetContractsResponse, error) {
	out := new(BatchGetContractsResponse)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.ContractService/BatchGetContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListContracts(ctx context.Context, in *ListContractsRequest, opts ...grpc.CallOption) (*ListContractsResponse, error) {
	out := new(ListContractsResponse)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.ContractService/ListContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchContract(ctx context.Context, in *WatchContractRequest, opts ...grpc.CallOption) (WatchContractClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchContract",
			ServerStreams: true,
		},
		"/ntt.cellular_api.v1.ContractService/WatchContract", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchContractWatchContractClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchContractClientStream interface {
	Recv() (*WatchContractResponse, error)
	grpc.ClientStream
}

type watchContractWatchContractClient struct {
	grpc.ClientStream
}

func (x *watchContractWatchContractClient) Recv() (*WatchContractResponse, error) {
	m := new(WatchContractResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchContracts(ctx context.Context, in *WatchContractsRequest, opts ...grpc.CallOption) (WatchContractsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchContracts",
			ServerStreams: true,
		},
		"/ntt.cellular_api.v1.ContractService/WatchContracts", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchContractsWatchContractsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchContractsClientStream interface {
	Recv() (*WatchContractsResponse, error)
	grpc.ClientStream
}

type watchContractsWatchContractsClient struct {
	grpc.ClientStream
}

func (x *watchContractsWatchContractsClient) Recv() (*WatchContractsResponse, error) {
	m := new(WatchContractsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateContract(ctx context.Context, in *CreateContractRequest, opts ...grpc.CallOption) (*contract.Contract, error) {
	out := new(contract.Contract)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.ContractService/CreateContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateContract(ctx context.Context, in *UpdateContractRequest, opts ...grpc.CallOption) (*contract.Contract, error) {
	out := new(contract.Contract)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.ContractService/UpdateContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteContract(ctx context.Context, in *DeleteContractRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.cellular_api.v1.ContractService/DeleteContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
