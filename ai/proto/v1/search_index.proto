syntax = "proto3";

package ntt.ai.v1;

import "google/api/resource.proto";
import "goten-sdk/types/meta.proto";

option go_package = "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_index;search_index";
option java_multiple_files = true;
option java_outer_classname = "SearchIndexProto";
option java_package = "com.ntt.ai.pb.v1";

// SearchIndex Resource represents set of related documents focused on
// concrete topic. Such an index can be used with Chat service (RAG).
// Index fields in search database are:
// * ID (contains chunk index with document file name, or url/title)
// * DocumentChecksum (string, maps one to 1 with Document resource).
// * Parent ID (applicable for some documents, like markdown file split by
// titles).
// * Content (text content after chunking)
// * Title (string, if applicable, depending on a file)
// * URL (string, if applicable, depending on document type)
// * Filepath (string, if applicable, depending on document type)
message SearchIndex {
  option (google.api.resource) = {
    type : "ai.edgelq.com/SearchIndex"
    pattern : "searchDbs/{search_db}/searchIndices/{search_index}"
    pattern : "projects/{project}/searchDbs/{search_db}/searchIndices/"
              "{search_index}"
  };

  // Name of SearchIndex
  // When creating a new instance, this field is optional and if not provided,
  // it will be generated automatically. Last ID segment must conform to the
  // following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
  string name = 1;

  // Metadata is an object with information like create, update and delete time
  // (for async deleted resources), has user labels/annotations, sharding
  // information, multi-region syncing information and may have non-schema
  // owners (useful for taking ownership of resources belonging to lower level
  // services by higher ones).
  goten.types.Meta metadata = 2;

  string index_name = 3;

  // Human-readable display name for this search index
  string display_name = 4;

  // Description of what content this index contains
  string description = 5;

  int32 tokens_per_chunk = 6;

  int32 overlap_tokens = 7;
}
