syntax = "proto3";

package ntt.ai.v1;

import "edgelq-sdk/ai/proto/v1/common.proto";
import "edgelq-sdk/ai/proto/v1/connector.proto";
import "google/api/resource.proto";
import "goten-sdk/types/meta.proto";

option go_package = "github.com/cloudwan/edgelq-sdk/ai/resources/v1/capability_template;capability_template";
option java_multiple_files = true;
option java_outer_classname = "CapabilityTemplateProto";
option java_package = "com.ntt.ai.pb.v1";

// CapabilityTemplate Resource
message CapabilityTemplate {
  option (google.api.resource) = {
    type : "ai.edgelq.com/CapabilityTemplate"
    pattern : "capabilityTemplates/{capability_template}"
    pattern : "projects/{project}/capabilityTemplates/{capability_template}"
  };

  // Name of CapabilityTemplate
  // When creating a new instance, this field is optional and if not provided,
  // it will be generated automatically. Last ID segment must conform to the
  // following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
  string name = 1;

  // Metadata is an object with information like create, update and delete time
  // (for async deleted resources), has user labels/annotations, sharding
  // information, multi-region syncing information and may have non-schema
  // owners (useful for taking ownership of resources belonging to lower level
  // services by higher ones).
  goten.types.Meta metadata = 2;

  // Human-readable description
  string description = 3;

  // Connectors to include
  repeated string connectors = 4;

  // RAG configuration (optional)
  RAGConfig rag_config = 5;

  // Human-readable display name
  string display_name = 8;

  // Reasoning/thinking configuration and limits
  ReasoningConfig reasoning = 9;

  // Maximum output tokens (overrides ChatModel's default if set)
  int32 max_output_tokens = 10;

  // When set, this prompt will be used instead of a default system prompt.
  string system_prompt = 11;

  // When true, disables Anthropic prompt caching (default: caching enabled)
  bool disable_input_token_cache = 12;

  // Allowed chat models for this template (optional)
  // If empty, any model can be used with this template
  // If specified, only models in this list can be used with this template
  // This allows organizations to control which models are used for specific
  // use cases, capabilities, or compliance requirements
  repeated string allowed_models = 13;

  // Tool safety configuration for loop detection (optional)
  ToolSafetyConfig tool_safety = 14;

  // Default model for this template (optional)
  string default_model = 15;

  reserved 6, 7;
}

// RAG (Retrieval-Augmented Generation) configuration
message RAGConfig {
  // Search indices available for RAG tool to search
  repeated string search_indices = 1;

  // Indexing configuration
  IndexingPolicy indexing_policy = 2;

  // Retrieval limits
  RetrievalLimits retrieval_limits = 3;

  // When true and using Azure OpenAI models, use Azure's native
  // "On Your Data" extensions instead of tool-based RAG.
  // When false, RAG is exposed as "internal.rag.search" tool.
  bool use_azure_native_rag = 4;
}

message IndexingPolicy {
  uint32 chunk_size_tokens = 1; // default: 512

  uint32 chunk_overlap_tokens = 2; // default: 128

  string embedding_model = 3; // default: "text-embedding-ada-002"

  string chunking_strategy = 4; // "sliding", "semantic", "hybrid"
}

message RetrievalLimits {
  uint32 max_documents = 1; // default: 10

  uint32 max_context_tokens = 2; // default: 8192

  float min_relevance_score = 3; // default: 0.7

  bool require_citations = 4; // default: true
}

// Reasoning configuration for AI models
message ReasoningConfig {
  // Maximum allowed reasoning level for requests using this template
  ReasoningLevel max_level = 1;

  // Default level if not specified in request
  ReasoningLevel default_level = 2;
}

// Tool safety configuration for loop detection
message ToolSafetyConfig {
  // Maximum consecutive tool-calling assistant messages (default: 20)
  // This detects infinite tool loops, NOT total tool usage.
  // Counter resets when assistant message doesn't contain tool calls.
  // Example: 20 consecutive turns with tools → blocked
  //          19 turns with tools + 1 text-only turn + 19 more → allowed
  uint32 max_consecutive_tool_calls = 1;

  // Maximum consecutive identical tool+args calls (default: 3)
  // This detects stuck loops where same tool+args is called repeatedly.
  // Example: search_docs("query") called 3 times in a row → blocked
  //          search_docs("query1"), search_docs("query2"), ... → allowed
  uint32 max_consecutive_identical_tool_calls = 2;

  // Maximum consecutive calls to the same tool name (default: 6)
  // Similar to the identical check but ignores arguments, only tool names.
  // Example: search_docs("q1"), search_docs("q2"), ... (same tool name) →
  // blocked
  //          weather_lookup(...), search_docs(...), weather_lookup(...) →
  //          allowed
  uint32 max_consecutive_same_tool_calls = 3;
}
