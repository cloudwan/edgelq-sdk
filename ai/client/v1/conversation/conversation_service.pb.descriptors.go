// Code generated by protoc-gen-goten-client
// API: ConversationService
// DO NOT EDIT!!!

package conversation_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	conversation "github.com/cloudwan/edgelq-sdk/ai/resources/v1/conversation"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &conversation.Conversation{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized          bool
	conversationServiceDescriptor   *ConversationServiceDescriptor
	getConversationDescriptor       *GetConversationDescriptor
	batchGetConversationsDescriptor *BatchGetConversationsDescriptor
	listConversationsDescriptor     *ListConversationsDescriptor
	watchConversationDescriptor     *WatchConversationDescriptor
	watchConversationsDescriptor    *WatchConversationsDescriptor
	createConversationDescriptor    *CreateConversationDescriptor
	updateConversationDescriptor    *UpdateConversationDescriptor
	deleteConversationDescriptor    *DeleteConversationDescriptor
)

type GetConversationDescriptor struct{}

type GetConversationDescriptorClientMsgHandle struct{}

type GetConversationDescriptorServerMsgHandle struct{}

func (d *GetConversationDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetConversationRequest{}
}

func (d *GetConversationDescriptor) NewEmptyServerMsg() proto.Message {
	return &conversation.Conversation{}
}

func (d *GetConversationDescriptor) IsUnary() bool {
	return true
}

func (d *GetConversationDescriptor) IsClientStream() bool {
	return false
}

func (d *GetConversationDescriptor) IsServerStream() bool {
	return false
}

func (d *GetConversationDescriptor) IsCollection() bool {
	return false
}

func (d *GetConversationDescriptor) IsPlural() bool {
	return false
}

func (d *GetConversationDescriptor) HasResource() bool {
	return true
}

func (d *GetConversationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetConversationDescriptor) GetVerb() string {
	return "get"
}

func (d *GetConversationDescriptor) GetMethodName() string {
	return "GetConversation"
}

func (d *GetConversationDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConversationService/GetConversation"
}

func (d *GetConversationDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *GetConversationDescriptor) GetApiName() string {
	return "ConversationService"
}

func (d *GetConversationDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *GetConversationDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetConversationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conversationServiceDescriptor
}

func (d *GetConversationDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return conversation.GetDescriptor()
}

func (d *GetConversationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetConversationDescriptorClientMsgHandle{}
}

func (d *GetConversationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetConversationDescriptorServerMsgHandle{}
}

func (h *GetConversationDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetConversationRequest) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*conversation.Name)(nil)
}

func (h *GetConversationDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetConversationRequest) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetConversationDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetConversationRequest) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetConversationDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetConversationRequest) *conversation.Conversation
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetConversationDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetConversationRequest) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetConversationDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*conversation.Conversation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*conversation.Conversation) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*conversation.Name)(nil)
}

func (h *GetConversationDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*conversation.Conversation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*conversation.Conversation) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetConversationDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*conversation.Conversation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*conversation.Conversation) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetConversationDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*conversation.Conversation)
}

func (h *GetConversationDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*conversation.Conversation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*conversation.Conversation) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetConversationDescriptor() *GetConversationDescriptor {
	return getConversationDescriptor
}

type BatchGetConversationsDescriptor struct{}

type BatchGetConversationsDescriptorClientMsgHandle struct{}

type BatchGetConversationsDescriptorServerMsgHandle struct{}

func (d *BatchGetConversationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetConversationsRequest{}
}

func (d *BatchGetConversationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetConversationsResponse{}
}

func (d *BatchGetConversationsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetConversationsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetConversationsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetConversationsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetConversationsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetConversationsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetConversationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetConversationsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetConversationsDescriptor) GetMethodName() string {
	return "BatchGetConversations"
}

func (d *BatchGetConversationsDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConversationService/BatchGetConversations"
}

func (d *BatchGetConversationsDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *BatchGetConversationsDescriptor) GetApiName() string {
	return "ConversationService"
}

func (d *BatchGetConversationsDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *BatchGetConversationsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetConversationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conversationServiceDescriptor
}

func (d *BatchGetConversationsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return conversation.GetDescriptor()
}

func (d *BatchGetConversationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetConversationsDescriptorClientMsgHandle{}
}

func (d *BatchGetConversationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetConversationsDescriptorServerMsgHandle{}
}

func (h *BatchGetConversationsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetConversationsRequest) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetConversationsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetConversationsRequest) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return conversation.ConversationNameList(names)
		}
	}
	return (conversation.ConversationNameList)(nil)
}

func (h *BatchGetConversationsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetConversationsRequest) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetConversationsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetConversationsRequest) *conversation.Conversation
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetConversationsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetConversationsRequest) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetConversationsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetConversationsResponse) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetConversationsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetConversationsResponse) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetConversations(); len(resources) > 0 {
			list := make(conversation.ConversationNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (conversation.ConversationNameList)(nil)
}

func (h *BatchGetConversationsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetConversationsResponse) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetConversationsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetConversationsResponse) *conversation.Conversation
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetConversationsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetConversationsResponse) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetConversations(); len(resources) > 0 {
			return conversation.ConversationList(resources)
		}
	}
	return (conversation.ConversationList)(nil)
}

func GetBatchGetConversationsDescriptor() *BatchGetConversationsDescriptor {
	return batchGetConversationsDescriptor
}

type ListConversationsDescriptor struct{}

type ListConversationsDescriptorClientMsgHandle struct{}

type ListConversationsDescriptorServerMsgHandle struct{}

func (d *ListConversationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListConversationsRequest{}
}

func (d *ListConversationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListConversationsResponse{}
}

func (d *ListConversationsDescriptor) IsUnary() bool {
	return true
}

func (d *ListConversationsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListConversationsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListConversationsDescriptor) IsCollection() bool {
	return true
}

func (d *ListConversationsDescriptor) IsPlural() bool {
	return true
}

func (d *ListConversationsDescriptor) HasResource() bool {
	return true
}

func (d *ListConversationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListConversationsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListConversationsDescriptor) GetMethodName() string {
	return "ListConversations"
}

func (d *ListConversationsDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConversationService/ListConversations"
}

func (d *ListConversationsDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *ListConversationsDescriptor) GetApiName() string {
	return "ConversationService"
}

func (d *ListConversationsDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *ListConversationsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListConversationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conversationServiceDescriptor
}

func (d *ListConversationsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return conversation.GetDescriptor()
}

func (d *ListConversationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListConversationsDescriptorClientMsgHandle{}
}

func (d *ListConversationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListConversationsDescriptorServerMsgHandle{}
}

func (h *ListConversationsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListConversationsRequest) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListConversationsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListConversationsRequest) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListConversationsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListConversationsRequest) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*conversation.ParentName)(nil)
}

func (h *ListConversationsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListConversationsRequest) *conversation.Conversation
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListConversationsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListConversationsRequest) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListConversationsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListConversationsResponse) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListConversationsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListConversationsResponse) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetConversations(); len(resources) > 0 {
			list := make(conversation.ConversationNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (conversation.ConversationNameList)(nil)
}

func (h *ListConversationsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListConversationsResponse) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListConversationsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListConversationsResponse) *conversation.Conversation
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListConversationsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListConversationsResponse) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetConversations(); len(resources) > 0 {
			return conversation.ConversationList(resources)
		}
	}
	return (conversation.ConversationList)(nil)
}

func GetListConversationsDescriptor() *ListConversationsDescriptor {
	return listConversationsDescriptor
}

type WatchConversationDescriptor struct{}

type WatchConversationDescriptorClientMsgHandle struct{}

type WatchConversationDescriptorServerMsgHandle struct{}

func (d *WatchConversationDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchConversationRequest{}
}

func (d *WatchConversationDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchConversationResponse{}
}

func (d *WatchConversationDescriptor) IsUnary() bool {
	return false
}

func (d *WatchConversationDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchConversationDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchConversationDescriptor) IsCollection() bool {
	return false
}

func (d *WatchConversationDescriptor) IsPlural() bool {
	return false
}

func (d *WatchConversationDescriptor) HasResource() bool {
	return true
}

func (d *WatchConversationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchConversationDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchConversationDescriptor) GetMethodName() string {
	return "WatchConversation"
}

func (d *WatchConversationDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConversationService/WatchConversation"
}

func (d *WatchConversationDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *WatchConversationDescriptor) GetApiName() string {
	return "ConversationService"
}

func (d *WatchConversationDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *WatchConversationDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchConversationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conversationServiceDescriptor
}

func (d *WatchConversationDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return conversation.GetDescriptor()
}

func (d *WatchConversationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConversationDescriptorClientMsgHandle{}
}

func (d *WatchConversationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConversationDescriptorServerMsgHandle{}
}

func (h *WatchConversationDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchConversationRequest) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*conversation.Name)(nil)
}

func (h *WatchConversationDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchConversationRequest) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchConversationDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchConversationRequest) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchConversationDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchConversationRequest) *conversation.Conversation
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchConversationDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchConversationRequest) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchConversationDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConversationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchConversationResponse) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *conversation.ConversationChange_Added_:
				return tResChange.Added.GetConversation().GetName()
			case *conversation.ConversationChange_Modified_:
				return tResChange.Modified.GetName()
			case *conversation.ConversationChange_Removed_:
				return tResChange.Removed.GetName()
			case *conversation.ConversationChange_Current_:
				return tResChange.Current.GetConversation().GetName()
			}
		}
	}
	return (*conversation.Name)(nil)
}

func (h *WatchConversationDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConversationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchConversationResponse) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchConversationDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConversationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchConversationResponse) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchConversationDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchConversationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchConversationResponse) *conversation.Conversation
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *conversation.ConversationChange_Added_:
				return tResChange.Added.GetConversation()
			case *conversation.ConversationChange_Modified_:
				return tResChange.Modified.GetConversation()
			case *conversation.ConversationChange_Current_:
				return tResChange.Current.GetConversation()
			}
		}
	}
	return (*conversation.Conversation)(nil)
}

func (h *WatchConversationDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchConversationResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchConversationResponse) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchConversationDescriptor() *WatchConversationDescriptor {
	return watchConversationDescriptor
}

type WatchConversationsDescriptor struct{}

type WatchConversationsDescriptorClientMsgHandle struct{}

type WatchConversationsDescriptorServerMsgHandle struct{}

func (d *WatchConversationsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchConversationsRequest{}
}

func (d *WatchConversationsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchConversationsResponse{}
}

func (d *WatchConversationsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchConversationsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchConversationsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchConversationsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchConversationsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchConversationsDescriptor) HasResource() bool {
	return true
}

func (d *WatchConversationsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchConversationsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchConversationsDescriptor) GetMethodName() string {
	return "WatchConversations"
}

func (d *WatchConversationsDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConversationService/WatchConversations"
}

func (d *WatchConversationsDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *WatchConversationsDescriptor) GetApiName() string {
	return "ConversationService"
}

func (d *WatchConversationsDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *WatchConversationsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchConversationsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conversationServiceDescriptor
}

func (d *WatchConversationsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return conversation.GetDescriptor()
}

func (d *WatchConversationsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConversationsDescriptorClientMsgHandle{}
}

func (d *WatchConversationsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConversationsDescriptorServerMsgHandle{}
}

func (h *WatchConversationsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchConversationsRequest) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchConversationsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchConversationsRequest) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchConversationsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchConversationsRequest) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*conversation.ParentName)(nil)
}

func (h *WatchConversationsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchConversationsRequest) *conversation.Conversation
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchConversationsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchConversationsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchConversationsRequest) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchConversationsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchConversationsResponse) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchConversationsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchConversationsResponse) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetConversationChanges(); len(resChanges) > 0 {
			list := make(conversation.ConversationNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *conversation.ConversationChange_Added_:
					list = append(list, tResChange.Added.GetConversation().GetName())
				case *conversation.ConversationChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *conversation.ConversationChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *conversation.ConversationChange_Current_:
					list = append(list, tResChange.Current.GetConversation().GetName())
				}
			}
			return list
		}
	}
	return (conversation.ConversationNameList)(nil)
}

func (h *WatchConversationsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchConversationsResponse) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchConversationsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchConversationsResponse) *conversation.Conversation
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchConversationsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchConversationsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchConversationsResponse) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetConversationChanges(); len(resChanges) > 0 {
			list := make(conversation.ConversationList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *conversation.ConversationChange_Added_:
					list = append(list, tResChange.Added.GetConversation())
				case *conversation.ConversationChange_Modified_:
					list = append(list, tResChange.Modified.GetConversation())
				case *conversation.ConversationChange_Current_:
					list = append(list, tResChange.Current.GetConversation())
				}
			}
			return list
		}
	}
	return (conversation.ConversationList)(nil)
}

func GetWatchConversationsDescriptor() *WatchConversationsDescriptor {
	return watchConversationsDescriptor
}

type CreateConversationDescriptor struct{}

type CreateConversationDescriptorClientMsgHandle struct{}

type CreateConversationDescriptorServerMsgHandle struct{}

func (d *CreateConversationDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateConversationRequest{}
}

func (d *CreateConversationDescriptor) NewEmptyServerMsg() proto.Message {
	return &conversation.Conversation{}
}

func (d *CreateConversationDescriptor) IsUnary() bool {
	return true
}

func (d *CreateConversationDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateConversationDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateConversationDescriptor) IsCollection() bool {
	return true
}

func (d *CreateConversationDescriptor) IsPlural() bool {
	return false
}

func (d *CreateConversationDescriptor) HasResource() bool {
	return true
}

func (d *CreateConversationDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateConversationDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateConversationDescriptor) GetMethodName() string {
	return "CreateConversation"
}

func (d *CreateConversationDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConversationService/CreateConversation"
}

func (d *CreateConversationDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *CreateConversationDescriptor) GetApiName() string {
	return "ConversationService"
}

func (d *CreateConversationDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *CreateConversationDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateConversationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conversationServiceDescriptor
}

func (d *CreateConversationDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return conversation.GetDescriptor()
}

func (d *CreateConversationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateConversationDescriptorClientMsgHandle{}
}

func (d *CreateConversationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateConversationDescriptorServerMsgHandle{}
}

func (h *CreateConversationDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateConversationRequest) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetConversation()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*conversation.Name)(nil)
}

func (h *CreateConversationDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateConversationRequest) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateConversationDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateConversationRequest) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*conversation.ParentName)(nil)
}

func (h *CreateConversationDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateConversationRequest) *conversation.Conversation
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetConversation()
	}
	return (*conversation.Conversation)(nil)
}

func (h *CreateConversationDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateConversationRequest) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateConversationDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*conversation.Conversation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*conversation.Conversation) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*conversation.Name)(nil)
}

func (h *CreateConversationDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*conversation.Conversation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*conversation.Conversation) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateConversationDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*conversation.Conversation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*conversation.Conversation) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateConversationDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*conversation.Conversation)
}

func (h *CreateConversationDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*conversation.Conversation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*conversation.Conversation) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateConversationDescriptor() *CreateConversationDescriptor {
	return createConversationDescriptor
}

type UpdateConversationDescriptor struct{}

type UpdateConversationDescriptorClientMsgHandle struct{}

type UpdateConversationDescriptorServerMsgHandle struct{}

func (d *UpdateConversationDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateConversationRequest{}
}

func (d *UpdateConversationDescriptor) NewEmptyServerMsg() proto.Message {
	return &conversation.Conversation{}
}

func (d *UpdateConversationDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateConversationDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateConversationDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateConversationDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateConversationDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateConversationDescriptor) HasResource() bool {
	return true
}

func (d *UpdateConversationDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateConversationDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateConversationDescriptor) GetMethodName() string {
	return "UpdateConversation"
}

func (d *UpdateConversationDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConversationService/UpdateConversation"
}

func (d *UpdateConversationDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *UpdateConversationDescriptor) GetApiName() string {
	return "ConversationService"
}

func (d *UpdateConversationDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *UpdateConversationDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateConversationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conversationServiceDescriptor
}

func (d *UpdateConversationDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return conversation.GetDescriptor()
}

func (d *UpdateConversationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateConversationDescriptorClientMsgHandle{}
}

func (d *UpdateConversationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateConversationDescriptorServerMsgHandle{}
}

func (h *UpdateConversationDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateConversationRequest) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetConversation()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*conversation.Name)(nil)
}

func (h *UpdateConversationDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateConversationRequest) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateConversationDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateConversationRequest) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateConversationDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateConversationRequest) *conversation.Conversation
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetConversation()
	}
	return (*conversation.Conversation)(nil)
}

func (h *UpdateConversationDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateConversationRequest) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateConversationDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*conversation.Conversation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*conversation.Conversation) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*conversation.Name)(nil)
}

func (h *UpdateConversationDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*conversation.Conversation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*conversation.Conversation) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateConversationDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*conversation.Conversation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*conversation.Conversation) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateConversationDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*conversation.Conversation)
}

func (h *UpdateConversationDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*conversation.Conversation)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*conversation.Conversation) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateConversationDescriptor() *UpdateConversationDescriptor {
	return updateConversationDescriptor
}

type DeleteConversationDescriptor struct{}

type DeleteConversationDescriptorClientMsgHandle struct{}

type DeleteConversationDescriptorServerMsgHandle struct{}

func (d *DeleteConversationDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteConversationRequest{}
}

func (d *DeleteConversationDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteConversationDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteConversationDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteConversationDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteConversationDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteConversationDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteConversationDescriptor) HasResource() bool {
	return true
}

func (d *DeleteConversationDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteConversationDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteConversationDescriptor) GetMethodName() string {
	return "DeleteConversation"
}

func (d *DeleteConversationDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConversationService/DeleteConversation"
}

func (d *DeleteConversationDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *DeleteConversationDescriptor) GetApiName() string {
	return "ConversationService"
}

func (d *DeleteConversationDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *DeleteConversationDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteConversationDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return conversationServiceDescriptor
}

func (d *DeleteConversationDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return conversation.GetDescriptor()
}

func (d *DeleteConversationDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteConversationDescriptorClientMsgHandle{}
}

func (d *DeleteConversationDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteConversationDescriptorServerMsgHandle{}
}

func (h *DeleteConversationDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteConversationRequest) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*conversation.Name)(nil)
}

func (h *DeleteConversationDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteConversationRequest) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteConversationDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteConversationRequest) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteConversationDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteConversationRequest) *conversation.Conversation
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteConversationDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteConversationRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteConversationRequest) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteConversationDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *conversation.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteConversationDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*conversation.Name
	})
	if ok {
		return conversation.ConversationNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteConversationDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *conversation.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteConversationDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *conversation.Conversation
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteConversationDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*conversation.Conversation
	})
	if ok {
		return conversation.ConversationList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteConversationDescriptor() *DeleteConversationDescriptor {
	return deleteConversationDescriptor
}

type ConversationServiceDescriptor struct{}

func (d *ConversationServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getConversationDescriptor,
		batchGetConversationsDescriptor,
		listConversationsDescriptor,
		watchConversationDescriptor,
		watchConversationsDescriptor,
		createConversationDescriptor,
		updateConversationDescriptor,
		deleteConversationDescriptor,
	}
}

func (d *ConversationServiceDescriptor) GetFullAPIName() string {
	return "/ntt.ai.v1.ConversationService"
}

func (d *ConversationServiceDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *ConversationServiceDescriptor) GetApiName() string {
	return "ConversationService"
}

func (d *ConversationServiceDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *ConversationServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetConversationServiceDescriptor() *ConversationServiceDescriptor {
	return conversationServiceDescriptor
}

func initDescriptors() {
	conversationServiceDescriptor = &ConversationServiceDescriptor{}
	getConversationDescriptor = &GetConversationDescriptor{}
	batchGetConversationsDescriptor = &BatchGetConversationsDescriptor{}
	listConversationsDescriptor = &ListConversationsDescriptor{}
	watchConversationDescriptor = &WatchConversationDescriptor{}
	watchConversationsDescriptor = &WatchConversationsDescriptor{}
	createConversationDescriptor = &CreateConversationDescriptor{}
	updateConversationDescriptor = &UpdateConversationDescriptor{}
	deleteConversationDescriptor = &DeleteConversationDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(conversationServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getConversationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetConversationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listConversationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchConversationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchConversationsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createConversationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateConversationDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteConversationDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
