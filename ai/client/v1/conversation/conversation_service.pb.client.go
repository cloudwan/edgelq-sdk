// Code generated by protoc-gen-goten-client
// API: ConversationService
// DO NOT EDIT!!!

package conversation_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	conversation "github.com/cloudwan/edgelq-sdk/ai/resources/v1/conversation"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &conversation.Conversation{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConversationServiceClient is the client API for ConversationService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConversationServiceClient interface {
	GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*conversation.Conversation, error)
	BatchGetConversations(ctx context.Context, in *BatchGetConversationsRequest, opts ...grpc.CallOption) (*BatchGetConversationsResponse, error)
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error)
	WatchConversation(ctx context.Context, in *WatchConversationRequest, opts ...grpc.CallOption) (WatchConversationClientStream, error)
	WatchConversations(ctx context.Context, in *WatchConversationsRequest, opts ...grpc.CallOption) (WatchConversationsClientStream, error)
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*conversation.Conversation, error)
	UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*conversation.Conversation, error)
	DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewConversationServiceClient(cc grpc.ClientConnInterface) ConversationServiceClient {
	return &client{cc}
}

func (c *client) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*conversation.Conversation, error) {
	out := new(conversation.Conversation)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ConversationService/GetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetConversations(ctx context.Context, in *BatchGetConversationsRequest, opts ...grpc.CallOption) (*BatchGetConversationsResponse, error) {
	out := new(BatchGetConversationsResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ConversationService/BatchGetConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error) {
	out := new(ListConversationsResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ConversationService/ListConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchConversation(ctx context.Context, in *WatchConversationRequest, opts ...grpc.CallOption) (WatchConversationClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchConversation",
			ServerStreams: true,
		},
		"/ntt.ai.v1.ConversationService/WatchConversation", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchConversationWatchConversationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchConversationClientStream interface {
	Recv() (*WatchConversationResponse, error)
	grpc.ClientStream
}

type watchConversationWatchConversationClient struct {
	grpc.ClientStream
}

func (x *watchConversationWatchConversationClient) Recv() (*WatchConversationResponse, error) {
	m := new(WatchConversationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchConversations(ctx context.Context, in *WatchConversationsRequest, opts ...grpc.CallOption) (WatchConversationsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchConversations",
			ServerStreams: true,
		},
		"/ntt.ai.v1.ConversationService/WatchConversations", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchConversationsWatchConversationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchConversationsClientStream interface {
	Recv() (*WatchConversationsResponse, error)
	grpc.ClientStream
}

type watchConversationsWatchConversationsClient struct {
	grpc.ClientStream
}

func (x *watchConversationsWatchConversationsClient) Recv() (*WatchConversationsResponse, error) {
	m := new(WatchConversationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*conversation.Conversation, error) {
	out := new(conversation.Conversation)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ConversationService/CreateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*conversation.Conversation, error) {
	out := new(conversation.Conversation)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ConversationService/UpdateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ConversationService/DeleteConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
