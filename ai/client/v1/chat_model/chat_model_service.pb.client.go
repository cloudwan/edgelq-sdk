// Code generated by protoc-gen-goten-client
// API: ChatModelService
// DO NOT EDIT!!!

package chat_model_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	chat_model "github.com/cloudwan/edgelq-sdk/ai/resources/v1/chat_model"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &chat_model.ChatModel{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatModelServiceClient is the client API for ChatModelService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatModelServiceClient interface {
	GetChatModel(ctx context.Context, in *GetChatModelRequest, opts ...grpc.CallOption) (*chat_model.ChatModel, error)
	BatchGetChatModels(ctx context.Context, in *BatchGetChatModelsRequest, opts ...grpc.CallOption) (*BatchGetChatModelsResponse, error)
	ListChatModels(ctx context.Context, in *ListChatModelsRequest, opts ...grpc.CallOption) (*ListChatModelsResponse, error)
	WatchChatModel(ctx context.Context, in *WatchChatModelRequest, opts ...grpc.CallOption) (WatchChatModelClientStream, error)
	WatchChatModels(ctx context.Context, in *WatchChatModelsRequest, opts ...grpc.CallOption) (WatchChatModelsClientStream, error)
	CreateChatModel(ctx context.Context, in *CreateChatModelRequest, opts ...grpc.CallOption) (*chat_model.ChatModel, error)
	UpdateChatModel(ctx context.Context, in *UpdateChatModelRequest, opts ...grpc.CallOption) (*chat_model.ChatModel, error)
	DeleteChatModel(ctx context.Context, in *DeleteChatModelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewChatModelServiceClient(cc grpc.ClientConnInterface) ChatModelServiceClient {
	return &client{cc}
}

func (c *client) GetChatModel(ctx context.Context, in *GetChatModelRequest, opts ...grpc.CallOption) (*chat_model.ChatModel, error) {
	out := new(chat_model.ChatModel)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ChatModelService/GetChatModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetChatModels(ctx context.Context, in *BatchGetChatModelsRequest, opts ...grpc.CallOption) (*BatchGetChatModelsResponse, error) {
	out := new(BatchGetChatModelsResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ChatModelService/BatchGetChatModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListChatModels(ctx context.Context, in *ListChatModelsRequest, opts ...grpc.CallOption) (*ListChatModelsResponse, error) {
	out := new(ListChatModelsResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ChatModelService/ListChatModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchChatModel(ctx context.Context, in *WatchChatModelRequest, opts ...grpc.CallOption) (WatchChatModelClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchChatModel",
			ServerStreams: true,
		},
		"/ntt.ai.v1.ChatModelService/WatchChatModel", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchChatModelWatchChatModelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchChatModelClientStream interface {
	Recv() (*WatchChatModelResponse, error)
	grpc.ClientStream
}

type watchChatModelWatchChatModelClient struct {
	grpc.ClientStream
}

func (x *watchChatModelWatchChatModelClient) Recv() (*WatchChatModelResponse, error) {
	m := new(WatchChatModelResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchChatModels(ctx context.Context, in *WatchChatModelsRequest, opts ...grpc.CallOption) (WatchChatModelsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchChatModels",
			ServerStreams: true,
		},
		"/ntt.ai.v1.ChatModelService/WatchChatModels", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchChatModelsWatchChatModelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchChatModelsClientStream interface {
	Recv() (*WatchChatModelsResponse, error)
	grpc.ClientStream
}

type watchChatModelsWatchChatModelsClient struct {
	grpc.ClientStream
}

func (x *watchChatModelsWatchChatModelsClient) Recv() (*WatchChatModelsResponse, error) {
	m := new(WatchChatModelsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateChatModel(ctx context.Context, in *CreateChatModelRequest, opts ...grpc.CallOption) (*chat_model.ChatModel, error) {
	out := new(chat_model.ChatModel)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ChatModelService/CreateChatModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateChatModel(ctx context.Context, in *UpdateChatModelRequest, opts ...grpc.CallOption) (*chat_model.ChatModel, error) {
	out := new(chat_model.ChatModel)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ChatModelService/UpdateChatModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteChatModel(ctx context.Context, in *DeleteChatModelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ChatModelService/DeleteChatModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
