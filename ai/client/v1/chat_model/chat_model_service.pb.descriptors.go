// Code generated by protoc-gen-goten-client
// API: ChatModelService
// DO NOT EDIT!!!

package chat_model_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	chat_model "github.com/cloudwan/edgelq-sdk/ai/resources/v1/chat_model"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &chat_model.ChatModel{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized       bool
	chatModelServiceDescriptor   *ChatModelServiceDescriptor
	getChatModelDescriptor       *GetChatModelDescriptor
	batchGetChatModelsDescriptor *BatchGetChatModelsDescriptor
	listChatModelsDescriptor     *ListChatModelsDescriptor
	watchChatModelDescriptor     *WatchChatModelDescriptor
	watchChatModelsDescriptor    *WatchChatModelsDescriptor
	createChatModelDescriptor    *CreateChatModelDescriptor
	updateChatModelDescriptor    *UpdateChatModelDescriptor
	deleteChatModelDescriptor    *DeleteChatModelDescriptor
)

type GetChatModelDescriptor struct{}

type GetChatModelDescriptorClientMsgHandle struct{}

type GetChatModelDescriptorServerMsgHandle struct{}

func (d *GetChatModelDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetChatModelRequest{}
}

func (d *GetChatModelDescriptor) NewEmptyServerMsg() proto.Message {
	return &chat_model.ChatModel{}
}

func (d *GetChatModelDescriptor) IsUnary() bool {
	return true
}

func (d *GetChatModelDescriptor) IsClientStream() bool {
	return false
}

func (d *GetChatModelDescriptor) IsServerStream() bool {
	return false
}

func (d *GetChatModelDescriptor) IsCollection() bool {
	return false
}

func (d *GetChatModelDescriptor) IsPlural() bool {
	return false
}

func (d *GetChatModelDescriptor) HasResource() bool {
	return true
}

func (d *GetChatModelDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetChatModelDescriptor) GetVerb() string {
	return "get"
}

func (d *GetChatModelDescriptor) GetMethodName() string {
	return "GetChatModel"
}

func (d *GetChatModelDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ChatModelService/GetChatModel"
}

func (d *GetChatModelDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *GetChatModelDescriptor) GetApiName() string {
	return "ChatModelService"
}

func (d *GetChatModelDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *GetChatModelDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetChatModelDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return chatModelServiceDescriptor
}

func (d *GetChatModelDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return chat_model.GetDescriptor()
}

func (d *GetChatModelDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetChatModelDescriptorClientMsgHandle{}
}

func (d *GetChatModelDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetChatModelDescriptorServerMsgHandle{}
}

func (h *GetChatModelDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetChatModelRequest) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*chat_model.Name)(nil)
}

func (h *GetChatModelDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetChatModelRequest) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetChatModelDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetChatModelRequest) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetChatModelDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetChatModelRequest) *chat_model.ChatModel
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetChatModelDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetChatModelRequest) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetChatModelDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*chat_model.ChatModel)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*chat_model.ChatModel) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*chat_model.Name)(nil)
}

func (h *GetChatModelDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*chat_model.ChatModel)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*chat_model.ChatModel) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetChatModelDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*chat_model.ChatModel)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*chat_model.ChatModel) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetChatModelDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*chat_model.ChatModel)
}

func (h *GetChatModelDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*chat_model.ChatModel)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*chat_model.ChatModel) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetChatModelDescriptor() *GetChatModelDescriptor {
	return getChatModelDescriptor
}

type BatchGetChatModelsDescriptor struct{}

type BatchGetChatModelsDescriptorClientMsgHandle struct{}

type BatchGetChatModelsDescriptorServerMsgHandle struct{}

func (d *BatchGetChatModelsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetChatModelsRequest{}
}

func (d *BatchGetChatModelsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetChatModelsResponse{}
}

func (d *BatchGetChatModelsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetChatModelsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetChatModelsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetChatModelsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetChatModelsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetChatModelsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetChatModelsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetChatModelsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetChatModelsDescriptor) GetMethodName() string {
	return "BatchGetChatModels"
}

func (d *BatchGetChatModelsDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ChatModelService/BatchGetChatModels"
}

func (d *BatchGetChatModelsDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *BatchGetChatModelsDescriptor) GetApiName() string {
	return "ChatModelService"
}

func (d *BatchGetChatModelsDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *BatchGetChatModelsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetChatModelsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return chatModelServiceDescriptor
}

func (d *BatchGetChatModelsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return chat_model.GetDescriptor()
}

func (d *BatchGetChatModelsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetChatModelsDescriptorClientMsgHandle{}
}

func (d *BatchGetChatModelsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetChatModelsDescriptorServerMsgHandle{}
}

func (h *BatchGetChatModelsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetChatModelsRequest) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetChatModelsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetChatModelsRequest) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return chat_model.ChatModelNameList(names)
		}
	}
	return (chat_model.ChatModelNameList)(nil)
}

func (h *BatchGetChatModelsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetChatModelsRequest) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetChatModelsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetChatModelsRequest) *chat_model.ChatModel
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetChatModelsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetChatModelsRequest) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetChatModelsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetChatModelsResponse) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetChatModelsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetChatModelsResponse) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetChatModels(); len(resources) > 0 {
			list := make(chat_model.ChatModelNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (chat_model.ChatModelNameList)(nil)
}

func (h *BatchGetChatModelsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetChatModelsResponse) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetChatModelsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetChatModelsResponse) *chat_model.ChatModel
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetChatModelsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetChatModelsResponse) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetChatModels(); len(resources) > 0 {
			return chat_model.ChatModelList(resources)
		}
	}
	return (chat_model.ChatModelList)(nil)
}

func GetBatchGetChatModelsDescriptor() *BatchGetChatModelsDescriptor {
	return batchGetChatModelsDescriptor
}

type ListChatModelsDescriptor struct{}

type ListChatModelsDescriptorClientMsgHandle struct{}

type ListChatModelsDescriptorServerMsgHandle struct{}

func (d *ListChatModelsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListChatModelsRequest{}
}

func (d *ListChatModelsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListChatModelsResponse{}
}

func (d *ListChatModelsDescriptor) IsUnary() bool {
	return true
}

func (d *ListChatModelsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListChatModelsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListChatModelsDescriptor) IsCollection() bool {
	return true
}

func (d *ListChatModelsDescriptor) IsPlural() bool {
	return true
}

func (d *ListChatModelsDescriptor) HasResource() bool {
	return true
}

func (d *ListChatModelsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListChatModelsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListChatModelsDescriptor) GetMethodName() string {
	return "ListChatModels"
}

func (d *ListChatModelsDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ChatModelService/ListChatModels"
}

func (d *ListChatModelsDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *ListChatModelsDescriptor) GetApiName() string {
	return "ChatModelService"
}

func (d *ListChatModelsDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *ListChatModelsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListChatModelsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return chatModelServiceDescriptor
}

func (d *ListChatModelsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return chat_model.GetDescriptor()
}

func (d *ListChatModelsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListChatModelsDescriptorClientMsgHandle{}
}

func (d *ListChatModelsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListChatModelsDescriptorServerMsgHandle{}
}

func (h *ListChatModelsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListChatModelsRequest) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListChatModelsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListChatModelsRequest) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListChatModelsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListChatModelsRequest) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*chat_model.ParentName)(nil)
}

func (h *ListChatModelsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListChatModelsRequest) *chat_model.ChatModel
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListChatModelsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListChatModelsRequest) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListChatModelsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListChatModelsResponse) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListChatModelsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListChatModelsResponse) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetChatModels(); len(resources) > 0 {
			list := make(chat_model.ChatModelNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (chat_model.ChatModelNameList)(nil)
}

func (h *ListChatModelsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListChatModelsResponse) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListChatModelsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListChatModelsResponse) *chat_model.ChatModel
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListChatModelsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListChatModelsResponse) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetChatModels(); len(resources) > 0 {
			return chat_model.ChatModelList(resources)
		}
	}
	return (chat_model.ChatModelList)(nil)
}

func GetListChatModelsDescriptor() *ListChatModelsDescriptor {
	return listChatModelsDescriptor
}

type WatchChatModelDescriptor struct{}

type WatchChatModelDescriptorClientMsgHandle struct{}

type WatchChatModelDescriptorServerMsgHandle struct{}

func (d *WatchChatModelDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchChatModelRequest{}
}

func (d *WatchChatModelDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchChatModelResponse{}
}

func (d *WatchChatModelDescriptor) IsUnary() bool {
	return false
}

func (d *WatchChatModelDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchChatModelDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchChatModelDescriptor) IsCollection() bool {
	return false
}

func (d *WatchChatModelDescriptor) IsPlural() bool {
	return false
}

func (d *WatchChatModelDescriptor) HasResource() bool {
	return true
}

func (d *WatchChatModelDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchChatModelDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchChatModelDescriptor) GetMethodName() string {
	return "WatchChatModel"
}

func (d *WatchChatModelDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ChatModelService/WatchChatModel"
}

func (d *WatchChatModelDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *WatchChatModelDescriptor) GetApiName() string {
	return "ChatModelService"
}

func (d *WatchChatModelDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *WatchChatModelDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchChatModelDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return chatModelServiceDescriptor
}

func (d *WatchChatModelDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return chat_model.GetDescriptor()
}

func (d *WatchChatModelDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchChatModelDescriptorClientMsgHandle{}
}

func (d *WatchChatModelDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchChatModelDescriptorServerMsgHandle{}
}

func (h *WatchChatModelDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchChatModelRequest) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*chat_model.Name)(nil)
}

func (h *WatchChatModelDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchChatModelRequest) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchChatModelDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchChatModelRequest) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchChatModelDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchChatModelRequest) *chat_model.ChatModel
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchChatModelDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchChatModelRequest) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchChatModelDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchChatModelResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchChatModelResponse) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *chat_model.ChatModelChange_Added_:
				return tResChange.Added.GetChatModel().GetName()
			case *chat_model.ChatModelChange_Modified_:
				return tResChange.Modified.GetName()
			case *chat_model.ChatModelChange_Removed_:
				return tResChange.Removed.GetName()
			case *chat_model.ChatModelChange_Current_:
				return tResChange.Current.GetChatModel().GetName()
			}
		}
	}
	return (*chat_model.Name)(nil)
}

func (h *WatchChatModelDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchChatModelResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchChatModelResponse) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchChatModelDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchChatModelResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchChatModelResponse) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchChatModelDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchChatModelResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchChatModelResponse) *chat_model.ChatModel
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *chat_model.ChatModelChange_Added_:
				return tResChange.Added.GetChatModel()
			case *chat_model.ChatModelChange_Modified_:
				return tResChange.Modified.GetChatModel()
			case *chat_model.ChatModelChange_Current_:
				return tResChange.Current.GetChatModel()
			}
		}
	}
	return (*chat_model.ChatModel)(nil)
}

func (h *WatchChatModelDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchChatModelResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchChatModelResponse) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchChatModelDescriptor() *WatchChatModelDescriptor {
	return watchChatModelDescriptor
}

type WatchChatModelsDescriptor struct{}

type WatchChatModelsDescriptorClientMsgHandle struct{}

type WatchChatModelsDescriptorServerMsgHandle struct{}

func (d *WatchChatModelsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchChatModelsRequest{}
}

func (d *WatchChatModelsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchChatModelsResponse{}
}

func (d *WatchChatModelsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchChatModelsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchChatModelsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchChatModelsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchChatModelsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchChatModelsDescriptor) HasResource() bool {
	return true
}

func (d *WatchChatModelsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchChatModelsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchChatModelsDescriptor) GetMethodName() string {
	return "WatchChatModels"
}

func (d *WatchChatModelsDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ChatModelService/WatchChatModels"
}

func (d *WatchChatModelsDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *WatchChatModelsDescriptor) GetApiName() string {
	return "ChatModelService"
}

func (d *WatchChatModelsDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *WatchChatModelsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchChatModelsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return chatModelServiceDescriptor
}

func (d *WatchChatModelsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return chat_model.GetDescriptor()
}

func (d *WatchChatModelsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchChatModelsDescriptorClientMsgHandle{}
}

func (d *WatchChatModelsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchChatModelsDescriptorServerMsgHandle{}
}

func (h *WatchChatModelsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchChatModelsRequest) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchChatModelsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchChatModelsRequest) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchChatModelsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchChatModelsRequest) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*chat_model.ParentName)(nil)
}

func (h *WatchChatModelsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchChatModelsRequest) *chat_model.ChatModel
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchChatModelsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchChatModelsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchChatModelsRequest) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchChatModelsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchChatModelsResponse) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchChatModelsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchChatModelsResponse) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetChatModelChanges(); len(resChanges) > 0 {
			list := make(chat_model.ChatModelNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *chat_model.ChatModelChange_Added_:
					list = append(list, tResChange.Added.GetChatModel().GetName())
				case *chat_model.ChatModelChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *chat_model.ChatModelChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *chat_model.ChatModelChange_Current_:
					list = append(list, tResChange.Current.GetChatModel().GetName())
				}
			}
			return list
		}
	}
	return (chat_model.ChatModelNameList)(nil)
}

func (h *WatchChatModelsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchChatModelsResponse) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchChatModelsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchChatModelsResponse) *chat_model.ChatModel
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchChatModelsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchChatModelsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchChatModelsResponse) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetChatModelChanges(); len(resChanges) > 0 {
			list := make(chat_model.ChatModelList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *chat_model.ChatModelChange_Added_:
					list = append(list, tResChange.Added.GetChatModel())
				case *chat_model.ChatModelChange_Modified_:
					list = append(list, tResChange.Modified.GetChatModel())
				case *chat_model.ChatModelChange_Current_:
					list = append(list, tResChange.Current.GetChatModel())
				}
			}
			return list
		}
	}
	return (chat_model.ChatModelList)(nil)
}

func GetWatchChatModelsDescriptor() *WatchChatModelsDescriptor {
	return watchChatModelsDescriptor
}

type CreateChatModelDescriptor struct{}

type CreateChatModelDescriptorClientMsgHandle struct{}

type CreateChatModelDescriptorServerMsgHandle struct{}

func (d *CreateChatModelDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateChatModelRequest{}
}

func (d *CreateChatModelDescriptor) NewEmptyServerMsg() proto.Message {
	return &chat_model.ChatModel{}
}

func (d *CreateChatModelDescriptor) IsUnary() bool {
	return true
}

func (d *CreateChatModelDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateChatModelDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateChatModelDescriptor) IsCollection() bool {
	return true
}

func (d *CreateChatModelDescriptor) IsPlural() bool {
	return false
}

func (d *CreateChatModelDescriptor) HasResource() bool {
	return true
}

func (d *CreateChatModelDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateChatModelDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateChatModelDescriptor) GetMethodName() string {
	return "CreateChatModel"
}

func (d *CreateChatModelDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ChatModelService/CreateChatModel"
}

func (d *CreateChatModelDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *CreateChatModelDescriptor) GetApiName() string {
	return "ChatModelService"
}

func (d *CreateChatModelDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *CreateChatModelDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateChatModelDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return chatModelServiceDescriptor
}

func (d *CreateChatModelDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return chat_model.GetDescriptor()
}

func (d *CreateChatModelDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateChatModelDescriptorClientMsgHandle{}
}

func (d *CreateChatModelDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateChatModelDescriptorServerMsgHandle{}
}

func (h *CreateChatModelDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateChatModelRequest) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetChatModel()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*chat_model.Name)(nil)
}

func (h *CreateChatModelDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateChatModelRequest) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateChatModelDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateChatModelRequest) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*chat_model.ParentName)(nil)
}

func (h *CreateChatModelDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateChatModelRequest) *chat_model.ChatModel
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetChatModel()
	}
	return (*chat_model.ChatModel)(nil)
}

func (h *CreateChatModelDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateChatModelRequest) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateChatModelDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*chat_model.ChatModel)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*chat_model.ChatModel) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*chat_model.Name)(nil)
}

func (h *CreateChatModelDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*chat_model.ChatModel)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*chat_model.ChatModel) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateChatModelDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*chat_model.ChatModel)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*chat_model.ChatModel) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateChatModelDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*chat_model.ChatModel)
}

func (h *CreateChatModelDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*chat_model.ChatModel)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*chat_model.ChatModel) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateChatModelDescriptor() *CreateChatModelDescriptor {
	return createChatModelDescriptor
}

type UpdateChatModelDescriptor struct{}

type UpdateChatModelDescriptorClientMsgHandle struct{}

type UpdateChatModelDescriptorServerMsgHandle struct{}

func (d *UpdateChatModelDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateChatModelRequest{}
}

func (d *UpdateChatModelDescriptor) NewEmptyServerMsg() proto.Message {
	return &chat_model.ChatModel{}
}

func (d *UpdateChatModelDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateChatModelDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateChatModelDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateChatModelDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateChatModelDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateChatModelDescriptor) HasResource() bool {
	return true
}

func (d *UpdateChatModelDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateChatModelDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateChatModelDescriptor) GetMethodName() string {
	return "UpdateChatModel"
}

func (d *UpdateChatModelDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ChatModelService/UpdateChatModel"
}

func (d *UpdateChatModelDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *UpdateChatModelDescriptor) GetApiName() string {
	return "ChatModelService"
}

func (d *UpdateChatModelDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *UpdateChatModelDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateChatModelDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return chatModelServiceDescriptor
}

func (d *UpdateChatModelDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return chat_model.GetDescriptor()
}

func (d *UpdateChatModelDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateChatModelDescriptorClientMsgHandle{}
}

func (d *UpdateChatModelDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateChatModelDescriptorServerMsgHandle{}
}

func (h *UpdateChatModelDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateChatModelRequest) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetChatModel()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*chat_model.Name)(nil)
}

func (h *UpdateChatModelDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateChatModelRequest) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateChatModelDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateChatModelRequest) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateChatModelDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateChatModelRequest) *chat_model.ChatModel
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetChatModel()
	}
	return (*chat_model.ChatModel)(nil)
}

func (h *UpdateChatModelDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateChatModelRequest) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateChatModelDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*chat_model.ChatModel)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*chat_model.ChatModel) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*chat_model.Name)(nil)
}

func (h *UpdateChatModelDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*chat_model.ChatModel)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*chat_model.ChatModel) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateChatModelDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*chat_model.ChatModel)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*chat_model.ChatModel) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateChatModelDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*chat_model.ChatModel)
}

func (h *UpdateChatModelDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*chat_model.ChatModel)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*chat_model.ChatModel) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateChatModelDescriptor() *UpdateChatModelDescriptor {
	return updateChatModelDescriptor
}

type DeleteChatModelDescriptor struct{}

type DeleteChatModelDescriptorClientMsgHandle struct{}

type DeleteChatModelDescriptorServerMsgHandle struct{}

func (d *DeleteChatModelDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteChatModelRequest{}
}

func (d *DeleteChatModelDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteChatModelDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteChatModelDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteChatModelDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteChatModelDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteChatModelDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteChatModelDescriptor) HasResource() bool {
	return true
}

func (d *DeleteChatModelDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteChatModelDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteChatModelDescriptor) GetMethodName() string {
	return "DeleteChatModel"
}

func (d *DeleteChatModelDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ChatModelService/DeleteChatModel"
}

func (d *DeleteChatModelDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *DeleteChatModelDescriptor) GetApiName() string {
	return "ChatModelService"
}

func (d *DeleteChatModelDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *DeleteChatModelDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteChatModelDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return chatModelServiceDescriptor
}

func (d *DeleteChatModelDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return chat_model.GetDescriptor()
}

func (d *DeleteChatModelDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteChatModelDescriptorClientMsgHandle{}
}

func (d *DeleteChatModelDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteChatModelDescriptorServerMsgHandle{}
}

func (h *DeleteChatModelDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteChatModelRequest) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*chat_model.Name)(nil)
}

func (h *DeleteChatModelDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteChatModelRequest) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteChatModelDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteChatModelRequest) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteChatModelDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteChatModelRequest) *chat_model.ChatModel
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteChatModelDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteChatModelRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteChatModelRequest) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteChatModelDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *chat_model.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteChatModelDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*chat_model.Name
	})
	if ok {
		return chat_model.ChatModelNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteChatModelDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *chat_model.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteChatModelDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *chat_model.ChatModel
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteChatModelDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*chat_model.ChatModel
	})
	if ok {
		return chat_model.ChatModelList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteChatModelDescriptor() *DeleteChatModelDescriptor {
	return deleteChatModelDescriptor
}

type ChatModelServiceDescriptor struct{}

func (d *ChatModelServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getChatModelDescriptor,
		batchGetChatModelsDescriptor,
		listChatModelsDescriptor,
		watchChatModelDescriptor,
		watchChatModelsDescriptor,
		createChatModelDescriptor,
		updateChatModelDescriptor,
		deleteChatModelDescriptor,
	}
}

func (d *ChatModelServiceDescriptor) GetFullAPIName() string {
	return "/ntt.ai.v1.ChatModelService"
}

func (d *ChatModelServiceDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *ChatModelServiceDescriptor) GetApiName() string {
	return "ChatModelService"
}

func (d *ChatModelServiceDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *ChatModelServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetChatModelServiceDescriptor() *ChatModelServiceDescriptor {
	return chatModelServiceDescriptor
}

func initDescriptors() {
	chatModelServiceDescriptor = &ChatModelServiceDescriptor{}
	getChatModelDescriptor = &GetChatModelDescriptor{}
	batchGetChatModelsDescriptor = &BatchGetChatModelsDescriptor{}
	listChatModelsDescriptor = &ListChatModelsDescriptor{}
	watchChatModelDescriptor = &WatchChatModelDescriptor{}
	watchChatModelsDescriptor = &WatchChatModelsDescriptor{}
	createChatModelDescriptor = &CreateChatModelDescriptor{}
	updateChatModelDescriptor = &UpdateChatModelDescriptor{}
	deleteChatModelDescriptor = &DeleteChatModelDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(chatModelServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getChatModelDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetChatModelsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listChatModelsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchChatModelDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchChatModelsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createChatModelDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateChatModelDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteChatModelDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
