// Code generated by protoc-gen-goten-client
// API: SearchDbService
// DO NOT EDIT!!!

package search_db_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	search_db "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_db"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &search_db.SearchDb{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized      bool
	searchDbServiceDescriptor   *SearchDbServiceDescriptor
	getSearchDbDescriptor       *GetSearchDbDescriptor
	batchGetSearchDbsDescriptor *BatchGetSearchDbsDescriptor
	listSearchDbsDescriptor     *ListSearchDbsDescriptor
	watchSearchDbDescriptor     *WatchSearchDbDescriptor
	watchSearchDbsDescriptor    *WatchSearchDbsDescriptor
	createSearchDbDescriptor    *CreateSearchDbDescriptor
	updateSearchDbDescriptor    *UpdateSearchDbDescriptor
	deleteSearchDbDescriptor    *DeleteSearchDbDescriptor
)

type GetSearchDbDescriptor struct{}

type GetSearchDbDescriptorClientMsgHandle struct{}

type GetSearchDbDescriptorServerMsgHandle struct{}

func (d *GetSearchDbDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetSearchDbRequest{}
}

func (d *GetSearchDbDescriptor) NewEmptyServerMsg() proto.Message {
	return &search_db.SearchDb{}
}

func (d *GetSearchDbDescriptor) IsUnary() bool {
	return true
}

func (d *GetSearchDbDescriptor) IsClientStream() bool {
	return false
}

func (d *GetSearchDbDescriptor) IsServerStream() bool {
	return false
}

func (d *GetSearchDbDescriptor) IsCollection() bool {
	return false
}

func (d *GetSearchDbDescriptor) IsPlural() bool {
	return false
}

func (d *GetSearchDbDescriptor) HasResource() bool {
	return true
}

func (d *GetSearchDbDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetSearchDbDescriptor) GetVerb() string {
	return "get"
}

func (d *GetSearchDbDescriptor) GetMethodName() string {
	return "GetSearchDb"
}

func (d *GetSearchDbDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchDbService/GetSearchDb"
}

func (d *GetSearchDbDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *GetSearchDbDescriptor) GetApiName() string {
	return "SearchDbService"
}

func (d *GetSearchDbDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *GetSearchDbDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetSearchDbDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchDbServiceDescriptor
}

func (d *GetSearchDbDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_db.GetDescriptor()
}

func (d *GetSearchDbDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetSearchDbDescriptorClientMsgHandle{}
}

func (d *GetSearchDbDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetSearchDbDescriptorServerMsgHandle{}
}

func (h *GetSearchDbDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetSearchDbRequest) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*search_db.Name)(nil)
}

func (h *GetSearchDbDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetSearchDbRequest) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetSearchDbDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetSearchDbRequest) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetSearchDbDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetSearchDbRequest) *search_db.SearchDb
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetSearchDbDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetSearchDbRequest) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetSearchDbDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*search_db.SearchDb)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*search_db.SearchDb) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*search_db.Name)(nil)
}

func (h *GetSearchDbDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*search_db.SearchDb)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*search_db.SearchDb) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetSearchDbDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*search_db.SearchDb)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*search_db.SearchDb) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetSearchDbDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*search_db.SearchDb)
}

func (h *GetSearchDbDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*search_db.SearchDb)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*search_db.SearchDb) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetSearchDbDescriptor() *GetSearchDbDescriptor {
	return getSearchDbDescriptor
}

type BatchGetSearchDbsDescriptor struct{}

type BatchGetSearchDbsDescriptorClientMsgHandle struct{}

type BatchGetSearchDbsDescriptorServerMsgHandle struct{}

func (d *BatchGetSearchDbsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetSearchDbsRequest{}
}

func (d *BatchGetSearchDbsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetSearchDbsResponse{}
}

func (d *BatchGetSearchDbsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetSearchDbsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetSearchDbsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetSearchDbsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetSearchDbsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetSearchDbsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetSearchDbsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetSearchDbsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetSearchDbsDescriptor) GetMethodName() string {
	return "BatchGetSearchDbs"
}

func (d *BatchGetSearchDbsDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchDbService/BatchGetSearchDbs"
}

func (d *BatchGetSearchDbsDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *BatchGetSearchDbsDescriptor) GetApiName() string {
	return "SearchDbService"
}

func (d *BatchGetSearchDbsDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *BatchGetSearchDbsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetSearchDbsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchDbServiceDescriptor
}

func (d *BatchGetSearchDbsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_db.GetDescriptor()
}

func (d *BatchGetSearchDbsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetSearchDbsDescriptorClientMsgHandle{}
}

func (d *BatchGetSearchDbsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetSearchDbsDescriptorServerMsgHandle{}
}

func (h *BatchGetSearchDbsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetSearchDbsRequest) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetSearchDbsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetSearchDbsRequest) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return search_db.SearchDbNameList(names)
		}
	}
	return (search_db.SearchDbNameList)(nil)
}

func (h *BatchGetSearchDbsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetSearchDbsRequest) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetSearchDbsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetSearchDbsRequest) *search_db.SearchDb
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetSearchDbsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetSearchDbsRequest) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetSearchDbsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetSearchDbsResponse) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetSearchDbsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetSearchDbsResponse) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetSearchDbs(); len(resources) > 0 {
			list := make(search_db.SearchDbNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (search_db.SearchDbNameList)(nil)
}

func (h *BatchGetSearchDbsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetSearchDbsResponse) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetSearchDbsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetSearchDbsResponse) *search_db.SearchDb
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetSearchDbsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetSearchDbsResponse) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetSearchDbs(); len(resources) > 0 {
			return search_db.SearchDbList(resources)
		}
	}
	return (search_db.SearchDbList)(nil)
}

func GetBatchGetSearchDbsDescriptor() *BatchGetSearchDbsDescriptor {
	return batchGetSearchDbsDescriptor
}

type ListSearchDbsDescriptor struct{}

type ListSearchDbsDescriptorClientMsgHandle struct{}

type ListSearchDbsDescriptorServerMsgHandle struct{}

func (d *ListSearchDbsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListSearchDbsRequest{}
}

func (d *ListSearchDbsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListSearchDbsResponse{}
}

func (d *ListSearchDbsDescriptor) IsUnary() bool {
	return true
}

func (d *ListSearchDbsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListSearchDbsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListSearchDbsDescriptor) IsCollection() bool {
	return true
}

func (d *ListSearchDbsDescriptor) IsPlural() bool {
	return true
}

func (d *ListSearchDbsDescriptor) HasResource() bool {
	return true
}

func (d *ListSearchDbsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListSearchDbsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListSearchDbsDescriptor) GetMethodName() string {
	return "ListSearchDbs"
}

func (d *ListSearchDbsDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchDbService/ListSearchDbs"
}

func (d *ListSearchDbsDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *ListSearchDbsDescriptor) GetApiName() string {
	return "SearchDbService"
}

func (d *ListSearchDbsDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *ListSearchDbsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListSearchDbsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchDbServiceDescriptor
}

func (d *ListSearchDbsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_db.GetDescriptor()
}

func (d *ListSearchDbsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListSearchDbsDescriptorClientMsgHandle{}
}

func (d *ListSearchDbsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListSearchDbsDescriptorServerMsgHandle{}
}

func (h *ListSearchDbsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListSearchDbsRequest) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListSearchDbsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListSearchDbsRequest) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListSearchDbsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListSearchDbsRequest) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*search_db.ParentName)(nil)
}

func (h *ListSearchDbsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListSearchDbsRequest) *search_db.SearchDb
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListSearchDbsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListSearchDbsRequest) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListSearchDbsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListSearchDbsResponse) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListSearchDbsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListSearchDbsResponse) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetSearchDbs(); len(resources) > 0 {
			list := make(search_db.SearchDbNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (search_db.SearchDbNameList)(nil)
}

func (h *ListSearchDbsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListSearchDbsResponse) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListSearchDbsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListSearchDbsResponse) *search_db.SearchDb
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListSearchDbsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListSearchDbsResponse) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetSearchDbs(); len(resources) > 0 {
			return search_db.SearchDbList(resources)
		}
	}
	return (search_db.SearchDbList)(nil)
}

func GetListSearchDbsDescriptor() *ListSearchDbsDescriptor {
	return listSearchDbsDescriptor
}

type WatchSearchDbDescriptor struct{}

type WatchSearchDbDescriptorClientMsgHandle struct{}

type WatchSearchDbDescriptorServerMsgHandle struct{}

func (d *WatchSearchDbDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchSearchDbRequest{}
}

func (d *WatchSearchDbDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchSearchDbResponse{}
}

func (d *WatchSearchDbDescriptor) IsUnary() bool {
	return false
}

func (d *WatchSearchDbDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchSearchDbDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchSearchDbDescriptor) IsCollection() bool {
	return false
}

func (d *WatchSearchDbDescriptor) IsPlural() bool {
	return false
}

func (d *WatchSearchDbDescriptor) HasResource() bool {
	return true
}

func (d *WatchSearchDbDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchSearchDbDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchSearchDbDescriptor) GetMethodName() string {
	return "WatchSearchDb"
}

func (d *WatchSearchDbDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchDbService/WatchSearchDb"
}

func (d *WatchSearchDbDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *WatchSearchDbDescriptor) GetApiName() string {
	return "SearchDbService"
}

func (d *WatchSearchDbDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *WatchSearchDbDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchSearchDbDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchDbServiceDescriptor
}

func (d *WatchSearchDbDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_db.GetDescriptor()
}

func (d *WatchSearchDbDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSearchDbDescriptorClientMsgHandle{}
}

func (d *WatchSearchDbDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSearchDbDescriptorServerMsgHandle{}
}

func (h *WatchSearchDbDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSearchDbRequest) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*search_db.Name)(nil)
}

func (h *WatchSearchDbDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSearchDbRequest) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSearchDbDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSearchDbRequest) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchSearchDbDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchSearchDbRequest) *search_db.SearchDb
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchSearchDbDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchSearchDbRequest) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchSearchDbDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchDbResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSearchDbResponse) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *search_db.SearchDbChange_Added_:
				return tResChange.Added.GetSearchDb().GetName()
			case *search_db.SearchDbChange_Modified_:
				return tResChange.Modified.GetName()
			case *search_db.SearchDbChange_Removed_:
				return tResChange.Removed.GetName()
			case *search_db.SearchDbChange_Current_:
				return tResChange.Current.GetSearchDb().GetName()
			}
		}
	}
	return (*search_db.Name)(nil)
}

func (h *WatchSearchDbDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSearchDbResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSearchDbResponse) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSearchDbDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchDbResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSearchDbResponse) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchSearchDbDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchSearchDbResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchSearchDbResponse) *search_db.SearchDb
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *search_db.SearchDbChange_Added_:
				return tResChange.Added.GetSearchDb()
			case *search_db.SearchDbChange_Modified_:
				return tResChange.Modified.GetSearchDb()
			case *search_db.SearchDbChange_Current_:
				return tResChange.Current.GetSearchDb()
			}
		}
	}
	return (*search_db.SearchDb)(nil)
}

func (h *WatchSearchDbDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchSearchDbResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchSearchDbResponse) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchSearchDbDescriptor() *WatchSearchDbDescriptor {
	return watchSearchDbDescriptor
}

type WatchSearchDbsDescriptor struct{}

type WatchSearchDbsDescriptorClientMsgHandle struct{}

type WatchSearchDbsDescriptorServerMsgHandle struct{}

func (d *WatchSearchDbsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchSearchDbsRequest{}
}

func (d *WatchSearchDbsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchSearchDbsResponse{}
}

func (d *WatchSearchDbsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchSearchDbsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchSearchDbsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchSearchDbsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchSearchDbsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchSearchDbsDescriptor) HasResource() bool {
	return true
}

func (d *WatchSearchDbsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchSearchDbsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchSearchDbsDescriptor) GetMethodName() string {
	return "WatchSearchDbs"
}

func (d *WatchSearchDbsDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchDbService/WatchSearchDbs"
}

func (d *WatchSearchDbsDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *WatchSearchDbsDescriptor) GetApiName() string {
	return "SearchDbService"
}

func (d *WatchSearchDbsDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *WatchSearchDbsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchSearchDbsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchDbServiceDescriptor
}

func (d *WatchSearchDbsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_db.GetDescriptor()
}

func (d *WatchSearchDbsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSearchDbsDescriptorClientMsgHandle{}
}

func (d *WatchSearchDbsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSearchDbsDescriptorServerMsgHandle{}
}

func (h *WatchSearchDbsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSearchDbsRequest) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchSearchDbsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSearchDbsRequest) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSearchDbsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSearchDbsRequest) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*search_db.ParentName)(nil)
}

func (h *WatchSearchDbsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchSearchDbsRequest) *search_db.SearchDb
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchSearchDbsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchSearchDbsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchSearchDbsRequest) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchSearchDbsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSearchDbsResponse) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchSearchDbsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSearchDbsResponse) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetSearchDbChanges(); len(resChanges) > 0 {
			list := make(search_db.SearchDbNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *search_db.SearchDbChange_Added_:
					list = append(list, tResChange.Added.GetSearchDb().GetName())
				case *search_db.SearchDbChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *search_db.SearchDbChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *search_db.SearchDbChange_Current_:
					list = append(list, tResChange.Current.GetSearchDb().GetName())
				}
			}
			return list
		}
	}
	return (search_db.SearchDbNameList)(nil)
}

func (h *WatchSearchDbsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSearchDbsResponse) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchSearchDbsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchSearchDbsResponse) *search_db.SearchDb
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchSearchDbsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchSearchDbsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchSearchDbsResponse) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetSearchDbChanges(); len(resChanges) > 0 {
			list := make(search_db.SearchDbList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *search_db.SearchDbChange_Added_:
					list = append(list, tResChange.Added.GetSearchDb())
				case *search_db.SearchDbChange_Modified_:
					list = append(list, tResChange.Modified.GetSearchDb())
				case *search_db.SearchDbChange_Current_:
					list = append(list, tResChange.Current.GetSearchDb())
				}
			}
			return list
		}
	}
	return (search_db.SearchDbList)(nil)
}

func GetWatchSearchDbsDescriptor() *WatchSearchDbsDescriptor {
	return watchSearchDbsDescriptor
}

type CreateSearchDbDescriptor struct{}

type CreateSearchDbDescriptorClientMsgHandle struct{}

type CreateSearchDbDescriptorServerMsgHandle struct{}

func (d *CreateSearchDbDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateSearchDbRequest{}
}

func (d *CreateSearchDbDescriptor) NewEmptyServerMsg() proto.Message {
	return &search_db.SearchDb{}
}

func (d *CreateSearchDbDescriptor) IsUnary() bool {
	return true
}

func (d *CreateSearchDbDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateSearchDbDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateSearchDbDescriptor) IsCollection() bool {
	return true
}

func (d *CreateSearchDbDescriptor) IsPlural() bool {
	return false
}

func (d *CreateSearchDbDescriptor) HasResource() bool {
	return true
}

func (d *CreateSearchDbDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateSearchDbDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateSearchDbDescriptor) GetMethodName() string {
	return "CreateSearchDb"
}

func (d *CreateSearchDbDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchDbService/CreateSearchDb"
}

func (d *CreateSearchDbDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *CreateSearchDbDescriptor) GetApiName() string {
	return "SearchDbService"
}

func (d *CreateSearchDbDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *CreateSearchDbDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateSearchDbDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchDbServiceDescriptor
}

func (d *CreateSearchDbDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_db.GetDescriptor()
}

func (d *CreateSearchDbDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateSearchDbDescriptorClientMsgHandle{}
}

func (d *CreateSearchDbDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateSearchDbDescriptorServerMsgHandle{}
}

func (h *CreateSearchDbDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateSearchDbRequest) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetSearchDb()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*search_db.Name)(nil)
}

func (h *CreateSearchDbDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateSearchDbRequest) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateSearchDbDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateSearchDbRequest) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*search_db.ParentName)(nil)
}

func (h *CreateSearchDbDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateSearchDbRequest) *search_db.SearchDb
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetSearchDb()
	}
	return (*search_db.SearchDb)(nil)
}

func (h *CreateSearchDbDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateSearchDbRequest) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateSearchDbDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*search_db.SearchDb)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*search_db.SearchDb) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*search_db.Name)(nil)
}

func (h *CreateSearchDbDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*search_db.SearchDb)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*search_db.SearchDb) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateSearchDbDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*search_db.SearchDb)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*search_db.SearchDb) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateSearchDbDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*search_db.SearchDb)
}

func (h *CreateSearchDbDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*search_db.SearchDb)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*search_db.SearchDb) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateSearchDbDescriptor() *CreateSearchDbDescriptor {
	return createSearchDbDescriptor
}

type UpdateSearchDbDescriptor struct{}

type UpdateSearchDbDescriptorClientMsgHandle struct{}

type UpdateSearchDbDescriptorServerMsgHandle struct{}

func (d *UpdateSearchDbDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateSearchDbRequest{}
}

func (d *UpdateSearchDbDescriptor) NewEmptyServerMsg() proto.Message {
	return &search_db.SearchDb{}
}

func (d *UpdateSearchDbDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateSearchDbDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateSearchDbDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateSearchDbDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateSearchDbDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateSearchDbDescriptor) HasResource() bool {
	return true
}

func (d *UpdateSearchDbDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateSearchDbDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateSearchDbDescriptor) GetMethodName() string {
	return "UpdateSearchDb"
}

func (d *UpdateSearchDbDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchDbService/UpdateSearchDb"
}

func (d *UpdateSearchDbDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *UpdateSearchDbDescriptor) GetApiName() string {
	return "SearchDbService"
}

func (d *UpdateSearchDbDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *UpdateSearchDbDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateSearchDbDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchDbServiceDescriptor
}

func (d *UpdateSearchDbDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_db.GetDescriptor()
}

func (d *UpdateSearchDbDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateSearchDbDescriptorClientMsgHandle{}
}

func (d *UpdateSearchDbDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateSearchDbDescriptorServerMsgHandle{}
}

func (h *UpdateSearchDbDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateSearchDbRequest) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetSearchDb()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*search_db.Name)(nil)
}

func (h *UpdateSearchDbDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateSearchDbRequest) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateSearchDbDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateSearchDbRequest) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateSearchDbDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateSearchDbRequest) *search_db.SearchDb
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetSearchDb()
	}
	return (*search_db.SearchDb)(nil)
}

func (h *UpdateSearchDbDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateSearchDbRequest) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateSearchDbDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*search_db.SearchDb)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*search_db.SearchDb) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*search_db.Name)(nil)
}

func (h *UpdateSearchDbDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*search_db.SearchDb)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*search_db.SearchDb) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateSearchDbDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*search_db.SearchDb)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*search_db.SearchDb) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateSearchDbDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*search_db.SearchDb)
}

func (h *UpdateSearchDbDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*search_db.SearchDb)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*search_db.SearchDb) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateSearchDbDescriptor() *UpdateSearchDbDescriptor {
	return updateSearchDbDescriptor
}

type DeleteSearchDbDescriptor struct{}

type DeleteSearchDbDescriptorClientMsgHandle struct{}

type DeleteSearchDbDescriptorServerMsgHandle struct{}

func (d *DeleteSearchDbDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteSearchDbRequest{}
}

func (d *DeleteSearchDbDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteSearchDbDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteSearchDbDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteSearchDbDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteSearchDbDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteSearchDbDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteSearchDbDescriptor) HasResource() bool {
	return true
}

func (d *DeleteSearchDbDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteSearchDbDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteSearchDbDescriptor) GetMethodName() string {
	return "DeleteSearchDb"
}

func (d *DeleteSearchDbDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchDbService/DeleteSearchDb"
}

func (d *DeleteSearchDbDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *DeleteSearchDbDescriptor) GetApiName() string {
	return "SearchDbService"
}

func (d *DeleteSearchDbDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *DeleteSearchDbDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteSearchDbDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchDbServiceDescriptor
}

func (d *DeleteSearchDbDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_db.GetDescriptor()
}

func (d *DeleteSearchDbDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteSearchDbDescriptorClientMsgHandle{}
}

func (d *DeleteSearchDbDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteSearchDbDescriptorServerMsgHandle{}
}

func (h *DeleteSearchDbDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteSearchDbRequest) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*search_db.Name)(nil)
}

func (h *DeleteSearchDbDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteSearchDbRequest) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteSearchDbDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteSearchDbRequest) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteSearchDbDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteSearchDbRequest) *search_db.SearchDb
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteSearchDbDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteSearchDbRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteSearchDbRequest) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteSearchDbDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *search_db.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteSearchDbDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*search_db.Name
	})
	if ok {
		return search_db.SearchDbNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteSearchDbDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *search_db.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteSearchDbDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *search_db.SearchDb
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteSearchDbDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*search_db.SearchDb
	})
	if ok {
		return search_db.SearchDbList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteSearchDbDescriptor() *DeleteSearchDbDescriptor {
	return deleteSearchDbDescriptor
}

type SearchDbServiceDescriptor struct{}

func (d *SearchDbServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getSearchDbDescriptor,
		batchGetSearchDbsDescriptor,
		listSearchDbsDescriptor,
		watchSearchDbDescriptor,
		watchSearchDbsDescriptor,
		createSearchDbDescriptor,
		updateSearchDbDescriptor,
		deleteSearchDbDescriptor,
	}
}

func (d *SearchDbServiceDescriptor) GetFullAPIName() string {
	return "/ntt.ai.v1.SearchDbService"
}

func (d *SearchDbServiceDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *SearchDbServiceDescriptor) GetApiName() string {
	return "SearchDbService"
}

func (d *SearchDbServiceDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *SearchDbServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetSearchDbServiceDescriptor() *SearchDbServiceDescriptor {
	return searchDbServiceDescriptor
}

func initDescriptors() {
	searchDbServiceDescriptor = &SearchDbServiceDescriptor{}
	getSearchDbDescriptor = &GetSearchDbDescriptor{}
	batchGetSearchDbsDescriptor = &BatchGetSearchDbsDescriptor{}
	listSearchDbsDescriptor = &ListSearchDbsDescriptor{}
	watchSearchDbDescriptor = &WatchSearchDbDescriptor{}
	watchSearchDbsDescriptor = &WatchSearchDbsDescriptor{}
	createSearchDbDescriptor = &CreateSearchDbDescriptor{}
	updateSearchDbDescriptor = &UpdateSearchDbDescriptor{}
	deleteSearchDbDescriptor = &DeleteSearchDbDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(searchDbServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getSearchDbDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetSearchDbsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listSearchDbsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchSearchDbDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchSearchDbsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createSearchDbDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateSearchDbDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteSearchDbDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
