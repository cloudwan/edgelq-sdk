// Code generated by protoc-gen-goten-client
// API: SearchDbService
// DO NOT EDIT!!!

package search_db_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	search_db "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_db"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &search_db.SearchDb{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SearchDbServiceClient is the client API for SearchDbService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchDbServiceClient interface {
	GetSearchDb(ctx context.Context, in *GetSearchDbRequest, opts ...grpc.CallOption) (*search_db.SearchDb, error)
	BatchGetSearchDbs(ctx context.Context, in *BatchGetSearchDbsRequest, opts ...grpc.CallOption) (*BatchGetSearchDbsResponse, error)
	ListSearchDbs(ctx context.Context, in *ListSearchDbsRequest, opts ...grpc.CallOption) (*ListSearchDbsResponse, error)
	WatchSearchDb(ctx context.Context, in *WatchSearchDbRequest, opts ...grpc.CallOption) (WatchSearchDbClientStream, error)
	WatchSearchDbs(ctx context.Context, in *WatchSearchDbsRequest, opts ...grpc.CallOption) (WatchSearchDbsClientStream, error)
	CreateSearchDb(ctx context.Context, in *CreateSearchDbRequest, opts ...grpc.CallOption) (*search_db.SearchDb, error)
	UpdateSearchDb(ctx context.Context, in *UpdateSearchDbRequest, opts ...grpc.CallOption) (*search_db.SearchDb, error)
	DeleteSearchDb(ctx context.Context, in *DeleteSearchDbRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewSearchDbServiceClient(cc grpc.ClientConnInterface) SearchDbServiceClient {
	return &client{cc}
}

func (c *client) GetSearchDb(ctx context.Context, in *GetSearchDbRequest, opts ...grpc.CallOption) (*search_db.SearchDb, error) {
	out := new(search_db.SearchDb)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.SearchDbService/GetSearchDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetSearchDbs(ctx context.Context, in *BatchGetSearchDbsRequest, opts ...grpc.CallOption) (*BatchGetSearchDbsResponse, error) {
	out := new(BatchGetSearchDbsResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.SearchDbService/BatchGetSearchDbs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListSearchDbs(ctx context.Context, in *ListSearchDbsRequest, opts ...grpc.CallOption) (*ListSearchDbsResponse, error) {
	out := new(ListSearchDbsResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.SearchDbService/ListSearchDbs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchSearchDb(ctx context.Context, in *WatchSearchDbRequest, opts ...grpc.CallOption) (WatchSearchDbClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchSearchDb",
			ServerStreams: true,
		},
		"/ntt.ai.v1.SearchDbService/WatchSearchDb", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchSearchDbWatchSearchDbClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchSearchDbClientStream interface {
	Recv() (*WatchSearchDbResponse, error)
	grpc.ClientStream
}

type watchSearchDbWatchSearchDbClient struct {
	grpc.ClientStream
}

func (x *watchSearchDbWatchSearchDbClient) Recv() (*WatchSearchDbResponse, error) {
	m := new(WatchSearchDbResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchSearchDbs(ctx context.Context, in *WatchSearchDbsRequest, opts ...grpc.CallOption) (WatchSearchDbsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchSearchDbs",
			ServerStreams: true,
		},
		"/ntt.ai.v1.SearchDbService/WatchSearchDbs", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchSearchDbsWatchSearchDbsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchSearchDbsClientStream interface {
	Recv() (*WatchSearchDbsResponse, error)
	grpc.ClientStream
}

type watchSearchDbsWatchSearchDbsClient struct {
	grpc.ClientStream
}

func (x *watchSearchDbsWatchSearchDbsClient) Recv() (*WatchSearchDbsResponse, error) {
	m := new(WatchSearchDbsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateSearchDb(ctx context.Context, in *CreateSearchDbRequest, opts ...grpc.CallOption) (*search_db.SearchDb, error) {
	out := new(search_db.SearchDb)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.SearchDbService/CreateSearchDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateSearchDb(ctx context.Context, in *UpdateSearchDbRequest, opts ...grpc.CallOption) (*search_db.SearchDb, error) {
	out := new(search_db.SearchDb)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.SearchDbService/UpdateSearchDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteSearchDb(ctx context.Context, in *DeleteSearchDbRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.SearchDbService/DeleteSearchDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
