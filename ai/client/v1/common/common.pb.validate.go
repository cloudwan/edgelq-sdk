// Code generated by protoc-gen-goten-validate
// File: edgelq/ai/proto/v1/common.proto
// DO NOT EDIT!!!

package common_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import ()

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var ()

func (obj *Message) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Parts {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Message", "parts", obj.Parts[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ContentPart) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Content.(type) {
	case *ContentPart_Text:
		if subobj, ok := interface{}(opt.Text).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ContentPart", "text", opt.Text, "nested object validation failed", err)
			}
		}
	case *ContentPart_Image:
		if subobj, ok := interface{}(opt.Image).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ContentPart", "image", opt.Image, "nested object validation failed", err)
			}
		}
	case *ContentPart_Audio:
		if subobj, ok := interface{}(opt.Audio).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ContentPart", "audio", opt.Audio, "nested object validation failed", err)
			}
		}
	case *ContentPart_File:
		if subobj, ok := interface{}(opt.File).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ContentPart", "file", opt.File, "nested object validation failed", err)
			}
		}
	case *ContentPart_ToolCall:
		if subobj, ok := interface{}(opt.ToolCall).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ContentPart", "toolCall", opt.ToolCall, "nested object validation failed", err)
			}
		}
	case *ContentPart_ToolResult:
		if subobj, ok := interface{}(opt.ToolResult).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ContentPart", "toolResult", opt.ToolResult, "nested object validation failed", err)
			}
		}
	case *ContentPart_Thinking:
		if subobj, ok := interface{}(opt.Thinking).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ContentPart", "thinking", opt.Thinking, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *TextContent) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ImageContent) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Source.(type) {
	case *ImageContent_Url:
	case *ImageContent_Data:
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *AudioContent) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Source.(type) {
	case *AudioContent_Url:
	case *AudioContent_Data:
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *FileContent) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Source.(type) {
	case *FileContent_Url:
	case *FileContent_Data:
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ToolCallContent) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ToolResultContent) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Result.(type) {
	case *ToolResultContent_Content:
	case *ToolResultContent_Error:
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ThinkingContent) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *TokenUsage) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Details).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("TokenUsage", "details", obj.Details, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *TokenUsageDetails) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Payload) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Body.(type) {
	case *Payload_Json:
	case *Payload_Data:
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ToolDefinition) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ToolCall) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ToolResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Result.(type) {
	case *ToolResponse_Output:
		if subobj, ok := interface{}(opt.Output).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ToolResponse", "output", opt.Output, "nested object validation failed", err)
			}
		}
	case *ToolResponse_Error:
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ToolCalls) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Calls {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ToolCalls", "calls", obj.Calls[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Citation) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Source).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Citation", "source", obj.Source, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CitationSource) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Location.(type) {
	case *CitationSource_CharRange:
		if subobj, ok := interface{}(opt.CharRange).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CitationSource", "charRange", opt.CharRange, "nested object validation failed", err)
			}
		}
	case *CitationSource_Page:
		if subobj, ok := interface{}(opt.Page).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CitationSource", "page", opt.Page, "nested object validation failed", err)
			}
		}
	case *CitationSource_Url:
		if subobj, ok := interface{}(opt.Url).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CitationSource", "url", opt.Url, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CharacterRange) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *PageReference) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *URLReference) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
