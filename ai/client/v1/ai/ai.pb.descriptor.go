// Code generated by protoc-gen-goten-client
// Service: AI
// DO NOT EDIT!!!

package ai_client

import (
	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	capability_template_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/capability_template"
	chat_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/chat"
	chat_model_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/chat_model"
	connector_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/connector"
	conversation_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/conversation"
	document_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/document"
	responses_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/responses"
	search_db_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/search_db"
	search_index_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/search_index"
	tools_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/tools"
	capability_template "github.com/cloudwan/edgelq-sdk/ai/resources/v1/capability_template"
	chat_model "github.com/cloudwan/edgelq-sdk/ai/resources/v1/chat_model"
	connector "github.com/cloudwan/edgelq-sdk/ai/resources/v1/connector"
	conversation "github.com/cloudwan/edgelq-sdk/ai/resources/v1/conversation"
	document "github.com/cloudwan/edgelq-sdk/ai/resources/v1/document"
	search_db "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_db"
	search_index "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_index"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &capability_template.CapabilityTemplate{}
	_ = &capability_template_client.GetCapabilityTemplateRequest{}
	_ = &chat_model.ChatModel{}
	_ = &chat_model_client.GetChatModelRequest{}
	_ = &connector.Connector{}
	_ = &connector_client.GetConnectorRequest{}
	_ = &conversation.Conversation{}
	_ = &conversation_client.GetConversationRequest{}
	_ = &document.Document{}
	_ = &document_client.GetDocumentRequest{}
	_ = &search_db.SearchDb{}
	_ = &search_db_client.GetSearchDbRequest{}
	_ = &search_index.SearchIndex{}
	_ = &search_index_client.GetSearchIndexRequest{}
)

var (
	descriptorInitialized bool
	aiDescriptor          *AIDescriptor
)

type AIDescriptor struct{}

func (d *AIDescriptor) GetServiceName() string {
	return "ai"
}

func (d *AIDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *AIDescriptor) GetVersion() string {
	return "v1"
}

func (d *AIDescriptor) GetNextVersion() string {

	return ""
}

func (d *AIDescriptor) AllResourceDescriptors() []gotenresource.Descriptor {
	return []gotenresource.Descriptor{
		capability_template.GetDescriptor(),
		chat_model.GetDescriptor(),
		connector.GetDescriptor(),
		conversation.GetDescriptor(),
		document.GetDescriptor(),
		search_db.GetDescriptor(),
		search_index.GetDescriptor(),
	}
}

func (d *AIDescriptor) AllApiDescriptors() []gotenclient.ApiDescriptor {
	return []gotenclient.ApiDescriptor{
		capability_template_client.GetCapabilityTemplateServiceDescriptor(),
		chat_model_client.GetChatModelServiceDescriptor(),
		chat_client.GetChatServiceDescriptor(),
		connector_client.GetConnectorServiceDescriptor(),
		conversation_client.GetConversationServiceDescriptor(),
		document_client.GetDocumentServiceDescriptor(),
		responses_client.GetResponsesServiceDescriptor(),
		search_db_client.GetSearchDbServiceDescriptor(),
		search_index_client.GetSearchIndexServiceDescriptor(),
		tools_client.GetToolsServiceDescriptor(),
	}
}

func (d *AIDescriptor) AllImportedServiceInfos() []gotenclient.ServiceImportInfo {
	return []gotenclient.ServiceImportInfo{
		{
			Domain:  "iam.edgelq.com",
			Version: "v1",
		},
		{
			Domain:  "secrets.edgelq.com",
			Version: "v1",
		},
	}
}

func GetAIDescriptor() *AIDescriptor {
	return aiDescriptor
}

func initDescriptor() {
	aiDescriptor = &AIDescriptor{}
	gotenclient.GetRegistry().RegisterSvcDescriptor(aiDescriptor)
}

func init() {
	if !descriptorInitialized {
		initDescriptor()
		descriptorInitialized = true
	}
}
