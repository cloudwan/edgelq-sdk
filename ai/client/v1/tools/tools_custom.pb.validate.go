// Code generated by protoc-gen-goten-validate
// File: edgelq/ai/proto/v1/tools_custom.proto
// DO NOT EDIT!!!

package tools_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	capability_template "github.com/cloudwan/edgelq-sdk/ai/resources/v1/capability_template"
	connector "github.com/cloudwan/edgelq-sdk/ai/resources/v1/connector"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &capability_template.CapabilityTemplate{}
	_ = &connector.Connector{}
	_ = &iam_project.Project{}
)

func (obj *ExecuteToolsRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.ToolExecutions {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ExecuteToolsRequest", "toolExecutions", obj.ToolExecutions[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ToolExecution) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Config.(type) {
	case *ToolExecution_ConnectorName:
	case *ToolExecution_TemplateName:
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ExecuteToolsResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Results {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ExecuteToolsResponse", "results", obj.Results[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ToolExecutionResult) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Result.(type) {
	case *ToolExecutionResult_Output:
	case *ToolExecutionResult_Error:
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
