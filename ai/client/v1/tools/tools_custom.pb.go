// Code generated by protoc-gen-goten-go
// File: edgelq/ai/proto/v1/tools_custom.proto
// DO NOT EDIT!!!

package tools_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	capability_template "github.com/cloudwan/edgelq-sdk/ai/resources/v1/capability_template"
	connector "github.com/cloudwan/edgelq-sdk/ai/resources/v1/connector"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &capability_template.CapabilityTemplate{}
	_ = &connector.Connector{}
	_ = &iam_project.Project{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message of the ExecuteTools method.
type ExecuteToolsRequest struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	ToolExecutions []*ToolExecution `protobuf:"bytes,1,rep,name=tool_executions,json=toolExecutions,proto3" json:"tool_executions,omitempty"`
	// Client-provided request ID for idempotency and log correlation
	ClientRequestId string `protobuf:"bytes,2,opt,name=client_request_id,json=clientRequestId,proto3" json:"client_request_id,omitempty"`
	// Scope for authorization and tracking. Can be project, organization, or
	// empty. Format: "projects/{project}", "organizations/{org}", or ""
	Parent string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (m *ExecuteToolsRequest) Reset() {
	*m = ExecuteToolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_tools_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ExecuteToolsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ExecuteToolsRequest) ProtoMessage() {}

func (m *ExecuteToolsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_tools_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ExecuteToolsRequest) GotenMessage() {}

// Deprecated, Use ExecuteToolsRequest.ProtoReflect.Descriptor instead.
func (*ExecuteToolsRequest) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_tools_custom_proto_rawDescGZIP(), []int{0}
}

func (m *ExecuteToolsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ExecuteToolsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ExecuteToolsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ExecuteToolsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ExecuteToolsRequest) GetToolExecutions() []*ToolExecution {
	if m != nil {
		return m.ToolExecutions
	}
	return nil
}

func (m *ExecuteToolsRequest) GetClientRequestId() string {
	if m != nil {
		return m.ClientRequestId
	}
	return ""
}

func (m *ExecuteToolsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ExecuteToolsRequest) SetToolExecutions(fv []*ToolExecution) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ToolExecutions", "ExecuteToolsRequest"))
	}
	m.ToolExecutions = fv
}

func (m *ExecuteToolsRequest) SetClientRequestId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientRequestId", "ExecuteToolsRequest"))
	}
	m.ClientRequestId = fv
}

func (m *ExecuteToolsRequest) SetParent(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ExecuteToolsRequest"))
	}
	m.Parent = fv
}

type ToolExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ToolCallId    string `protobuf:"bytes,1,opt,name=tool_call_id,json=toolCallId,proto3" json:"tool_call_id,omitempty"`
	ToolName      string `protobuf:"bytes,2,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"`
	// "github.createIssue", "internal.rag.search")
	Arguments string `protobuf:"bytes,3,opt,name=arguments,proto3" json:"arguments,omitempty"`
	// Tool configuration - client provides this from ToolInfo it received
	//
	// Types that are valid to be assigned to Config:
	//	*ToolExecution_ConnectorName
	//	*ToolExecution_CapabilityTemplateName
	Config isToolExecution_Config `protobuf_oneof:"config"`
}

func (m *ToolExecution) Reset() {
	*m = ToolExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_tools_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ToolExecution) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ToolExecution) ProtoMessage() {}

func (m *ToolExecution) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_tools_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ToolExecution) GotenMessage() {}

// Deprecated, Use ToolExecution.ProtoReflect.Descriptor instead.
func (*ToolExecution) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_tools_custom_proto_rawDescGZIP(), []int{1}
}

func (m *ToolExecution) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ToolExecution) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ToolExecution) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ToolExecution) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isToolExecution_Config interface {
	isToolExecution_Config()
}

type ToolExecution_ConnectorName struct {
	ConnectorName *connector.Name `protobuf:"bytes,4,opt,customtype=Name,name=connector_name,json=connectorName,proto3,oneof"`
}
type ToolExecution_CapabilityTemplateName struct {
	// For internal tools: just the template name
	// Server will load the template and extract RAG config
	CapabilityTemplateName *capability_template.Name `protobuf:"bytes,5,opt,customtype=Name,name=capability_template_name,json=capabilityTemplateName,proto3,oneof"`
}

func (*ToolExecution_ConnectorName) isToolExecution_Config()          {}
func (*ToolExecution_CapabilityTemplateName) isToolExecution_Config() {}
func (m *ToolExecution) GetToolCallId() string {
	if m != nil {
		return m.ToolCallId
	}
	return ""
}

func (m *ToolExecution) GetToolName() string {
	if m != nil {
		return m.ToolName
	}
	return ""
}

func (m *ToolExecution) GetArguments() string {
	if m != nil {
		return m.Arguments
	}
	return ""
}

func (m *ToolExecution) GetConfig() isToolExecution_Config {
	if m != nil {
		return m.Config
	}
	return nil
}
func (m *ToolExecution) GetConnectorName() *connector.Name {
	if x, ok := m.GetConfig().(*ToolExecution_ConnectorName); ok {
		return x.ConnectorName
	}
	return nil
}
func (m *ToolExecution) GetCapabilityTemplateName() *capability_template.Name {
	if x, ok := m.GetConfig().(*ToolExecution_CapabilityTemplateName); ok {
		return x.CapabilityTemplateName
	}
	return nil
}
func (m *ToolExecution) SetToolCallId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ToolCallId", "ToolExecution"))
	}
	m.ToolCallId = fv
}

func (m *ToolExecution) SetToolName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ToolName", "ToolExecution"))
	}
	m.ToolName = fv
}

func (m *ToolExecution) SetArguments(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Arguments", "ToolExecution"))
	}
	m.Arguments = fv
}

func (m *ToolExecution) SetConfig(ofv isToolExecution_Config) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isToolExecution_Config", "ToolExecution"))
	}
	m.Config = ofv
}
func (m *ToolExecution) SetConnectorName(fv *connector.Name) {
	m.SetConfig(&ToolExecution_ConnectorName{ConnectorName: fv})
}
func (m *ToolExecution) SetCapabilityTemplateName(fv *capability_template.Name) {
	m.SetConfig(&ToolExecution_CapabilityTemplateName{CapabilityTemplateName: fv})
}

// A response message of the ExecuteTools method.
type ExecuteToolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Results       []*ToolExecutionResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (m *ExecuteToolsResponse) Reset() {
	*m = ExecuteToolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_tools_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ExecuteToolsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ExecuteToolsResponse) ProtoMessage() {}

func (m *ExecuteToolsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_tools_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ExecuteToolsResponse) GotenMessage() {}

// Deprecated, Use ExecuteToolsResponse.ProtoReflect.Descriptor instead.
func (*ExecuteToolsResponse) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_tools_custom_proto_rawDescGZIP(), []int{2}
}

func (m *ExecuteToolsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ExecuteToolsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ExecuteToolsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ExecuteToolsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ExecuteToolsResponse) GetResults() []*ToolExecutionResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ExecuteToolsResponse) SetResults(fv []*ToolExecutionResult) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Results", "ExecuteToolsResponse"))
	}
	m.Results = fv
}

type ToolExecutionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ToolCallId    string `protobuf:"bytes,1,opt,name=tool_call_id,json=toolCallId,proto3" json:"tool_call_id,omitempty"`
	ToolName      string `protobuf:"bytes,2,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"`
	MimeType      string `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// Types that are valid to be assigned to Result:
	//	*ToolExecutionResult_Output
	//	*ToolExecutionResult_Error
	Result isToolExecutionResult_Result `protobuf_oneof:"result"`
}

func (m *ToolExecutionResult) Reset() {
	*m = ToolExecutionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_tools_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ToolExecutionResult) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ToolExecutionResult) ProtoMessage() {}

func (m *ToolExecutionResult) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_tools_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ToolExecutionResult) GotenMessage() {}

// Deprecated, Use ToolExecutionResult.ProtoReflect.Descriptor instead.
func (*ToolExecutionResult) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_tools_custom_proto_rawDescGZIP(), []int{3}
}

func (m *ToolExecutionResult) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ToolExecutionResult) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ToolExecutionResult) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ToolExecutionResult) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isToolExecutionResult_Result interface {
	isToolExecutionResult_Result()
}

type ToolExecutionResult_Output struct {
	Output string `protobuf:"bytes,3,opt,name=output,proto3,oneof"`
}
type ToolExecutionResult_Error struct {
	Error string `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

func (*ToolExecutionResult_Output) isToolExecutionResult_Result() {}
func (*ToolExecutionResult_Error) isToolExecutionResult_Result()  {}
func (m *ToolExecutionResult) GetToolCallId() string {
	if m != nil {
		return m.ToolCallId
	}
	return ""
}

func (m *ToolExecutionResult) GetToolName() string {
	if m != nil {
		return m.ToolName
	}
	return ""
}

func (m *ToolExecutionResult) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *ToolExecutionResult) GetResult() isToolExecutionResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}
func (m *ToolExecutionResult) GetOutput() string {
	if x, ok := m.GetResult().(*ToolExecutionResult_Output); ok {
		return x.Output
	}
	return ""
}
func (m *ToolExecutionResult) GetError() string {
	if x, ok := m.GetResult().(*ToolExecutionResult_Error); ok {
		return x.Error
	}
	return ""
}
func (m *ToolExecutionResult) SetToolCallId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ToolCallId", "ToolExecutionResult"))
	}
	m.ToolCallId = fv
}

func (m *ToolExecutionResult) SetToolName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ToolName", "ToolExecutionResult"))
	}
	m.ToolName = fv
}

func (m *ToolExecutionResult) SetMimeType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MimeType", "ToolExecutionResult"))
	}
	m.MimeType = fv
}

func (m *ToolExecutionResult) SetResult(ofv isToolExecutionResult_Result) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isToolExecutionResult_Result", "ToolExecutionResult"))
	}
	m.Result = ofv
}
func (m *ToolExecutionResult) SetOutput(fv string) {
	m.SetResult(&ToolExecutionResult_Output{Output: fv})
}
func (m *ToolExecutionResult) SetError(fv string) {
	m.SetResult(&ToolExecutionResult_Error{Error: fv})
}

var edgelq_ai_proto_v1_tools_custom_proto preflect.FileDescriptor

var edgelq_ai_proto_v1_tools_custom_proto_rawDesc = []byte{
	0x0a, 0x25, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x02, 0x0a, 0x0d, 0x54, 0x6f,
	0x6f, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x74,
	0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x18, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x0a, 0x14, 0x0a, 0x12,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x16, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x50, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x6c,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x54, 0x6f, 0x6f,
	0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x66, 0xe8, 0xde, 0x21, 0x00, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31,
	0x42, 0x10, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x00, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x61, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f,
	0x6f, 0x6c, 0x73, 0x3b, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_ai_proto_v1_tools_custom_proto_rawDescOnce sync.Once
	edgelq_ai_proto_v1_tools_custom_proto_rawDescData = edgelq_ai_proto_v1_tools_custom_proto_rawDesc
)

func edgelq_ai_proto_v1_tools_custom_proto_rawDescGZIP() []byte {
	edgelq_ai_proto_v1_tools_custom_proto_rawDescOnce.Do(func() {
		edgelq_ai_proto_v1_tools_custom_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_ai_proto_v1_tools_custom_proto_rawDescData)
	})
	return edgelq_ai_proto_v1_tools_custom_proto_rawDescData
}

var edgelq_ai_proto_v1_tools_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var edgelq_ai_proto_v1_tools_custom_proto_goTypes = []interface{}{
	(*ExecuteToolsRequest)(nil),  // 0: ntt.ai.v1.ExecuteToolsRequest
	(*ToolExecution)(nil),        // 1: ntt.ai.v1.ToolExecution
	(*ExecuteToolsResponse)(nil), // 2: ntt.ai.v1.ExecuteToolsResponse
	(*ToolExecutionResult)(nil),  // 3: ntt.ai.v1.ToolExecutionResult
}
var edgelq_ai_proto_v1_tools_custom_proto_depIdxs = []int32{
	1, // 0: ntt.ai.v1.ExecuteToolsRequest.tool_executions:type_name -> ntt.ai.v1.ToolExecution
	3, // 1: ntt.ai.v1.ExecuteToolsResponse.results:type_name -> ntt.ai.v1.ToolExecutionResult
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { edgelq_ai_proto_v1_tools_custom_proto_init() }
func edgelq_ai_proto_v1_tools_custom_proto_init() {
	if edgelq_ai_proto_v1_tools_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_ai_proto_v1_tools_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteToolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_tools_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_tools_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteToolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_tools_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolExecutionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_ai_proto_v1_tools_custom_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ToolExecution_ConnectorName)(nil),
		(*ToolExecution_CapabilityTemplateName)(nil),
	}
	edgelq_ai_proto_v1_tools_custom_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ToolExecutionResult_Output)(nil),
		(*ToolExecutionResult_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_ai_proto_v1_tools_custom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_ai_proto_v1_tools_custom_proto_goTypes,
		DependencyIndexes: edgelq_ai_proto_v1_tools_custom_proto_depIdxs,
		MessageInfos:      edgelq_ai_proto_v1_tools_custom_proto_msgTypes,
	}.Build()
	edgelq_ai_proto_v1_tools_custom_proto = out.File
	edgelq_ai_proto_v1_tools_custom_proto_rawDesc = nil
	edgelq_ai_proto_v1_tools_custom_proto_goTypes = nil
	edgelq_ai_proto_v1_tools_custom_proto_depIdxs = nil
}
