// Code generated by protoc-gen-goten-client
// API: ConnectorService
// DO NOT EDIT!!!

package connector_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	connector "github.com/cloudwan/edgelq-sdk/ai/resources/v1/connector"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &connector.Connector{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConnectorServiceClient is the client API for ConnectorService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectorServiceClient interface {
	GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...grpc.CallOption) (*connector.Connector, error)
	BatchGetConnectors(ctx context.Context, in *BatchGetConnectorsRequest, opts ...grpc.CallOption) (*BatchGetConnectorsResponse, error)
	ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error)
	WatchConnector(ctx context.Context, in *WatchConnectorRequest, opts ...grpc.CallOption) (WatchConnectorClientStream, error)
	WatchConnectors(ctx context.Context, in *WatchConnectorsRequest, opts ...grpc.CallOption) (WatchConnectorsClientStream, error)
	CreateConnector(ctx context.Context, in *CreateConnectorRequest, opts ...grpc.CallOption) (*connector.Connector, error)
	UpdateConnector(ctx context.Context, in *UpdateConnectorRequest, opts ...grpc.CallOption) (*connector.Connector, error)
	DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewConnectorServiceClient(cc grpc.ClientConnInterface) ConnectorServiceClient {
	return &client{cc}
}

func (c *client) GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...grpc.CallOption) (*connector.Connector, error) {
	out := new(connector.Connector)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ConnectorService/GetConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetConnectors(ctx context.Context, in *BatchGetConnectorsRequest, opts ...grpc.CallOption) (*BatchGetConnectorsResponse, error) {
	out := new(BatchGetConnectorsResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ConnectorService/BatchGetConnectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error) {
	out := new(ListConnectorsResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ConnectorService/ListConnectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchConnector(ctx context.Context, in *WatchConnectorRequest, opts ...grpc.CallOption) (WatchConnectorClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchConnector",
			ServerStreams: true,
		},
		"/ntt.ai.v1.ConnectorService/WatchConnector", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchConnectorWatchConnectorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchConnectorClientStream interface {
	Recv() (*WatchConnectorResponse, error)
	grpc.ClientStream
}

type watchConnectorWatchConnectorClient struct {
	grpc.ClientStream
}

func (x *watchConnectorWatchConnectorClient) Recv() (*WatchConnectorResponse, error) {
	m := new(WatchConnectorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchConnectors(ctx context.Context, in *WatchConnectorsRequest, opts ...grpc.CallOption) (WatchConnectorsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchConnectors",
			ServerStreams: true,
		},
		"/ntt.ai.v1.ConnectorService/WatchConnectors", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchConnectorsWatchConnectorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchConnectorsClientStream interface {
	Recv() (*WatchConnectorsResponse, error)
	grpc.ClientStream
}

type watchConnectorsWatchConnectorsClient struct {
	grpc.ClientStream
}

func (x *watchConnectorsWatchConnectorsClient) Recv() (*WatchConnectorsResponse, error) {
	m := new(WatchConnectorsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateConnector(ctx context.Context, in *CreateConnectorRequest, opts ...grpc.CallOption) (*connector.Connector, error) {
	out := new(connector.Connector)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ConnectorService/CreateConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateConnector(ctx context.Context, in *UpdateConnectorRequest, opts ...grpc.CallOption) (*connector.Connector, error) {
	out := new(connector.Connector)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ConnectorService/UpdateConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.ConnectorService/DeleteConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
