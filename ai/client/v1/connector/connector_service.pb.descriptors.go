// Code generated by protoc-gen-goten-client
// API: ConnectorService
// DO NOT EDIT!!!

package connector_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	connector "github.com/cloudwan/edgelq-sdk/ai/resources/v1/connector"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &connector.Connector{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized       bool
	connectorServiceDescriptor   *ConnectorServiceDescriptor
	getConnectorDescriptor       *GetConnectorDescriptor
	batchGetConnectorsDescriptor *BatchGetConnectorsDescriptor
	listConnectorsDescriptor     *ListConnectorsDescriptor
	watchConnectorDescriptor     *WatchConnectorDescriptor
	watchConnectorsDescriptor    *WatchConnectorsDescriptor
	createConnectorDescriptor    *CreateConnectorDescriptor
	updateConnectorDescriptor    *UpdateConnectorDescriptor
	deleteConnectorDescriptor    *DeleteConnectorDescriptor
)

type GetConnectorDescriptor struct{}

type GetConnectorDescriptorClientMsgHandle struct{}

type GetConnectorDescriptorServerMsgHandle struct{}

func (d *GetConnectorDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetConnectorRequest{}
}

func (d *GetConnectorDescriptor) NewEmptyServerMsg() proto.Message {
	return &connector.Connector{}
}

func (d *GetConnectorDescriptor) IsUnary() bool {
	return true
}

func (d *GetConnectorDescriptor) IsClientStream() bool {
	return false
}

func (d *GetConnectorDescriptor) IsServerStream() bool {
	return false
}

func (d *GetConnectorDescriptor) IsCollection() bool {
	return false
}

func (d *GetConnectorDescriptor) IsPlural() bool {
	return false
}

func (d *GetConnectorDescriptor) HasResource() bool {
	return true
}

func (d *GetConnectorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetConnectorDescriptor) GetVerb() string {
	return "get"
}

func (d *GetConnectorDescriptor) GetMethodName() string {
	return "GetConnector"
}

func (d *GetConnectorDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConnectorService/GetConnector"
}

func (d *GetConnectorDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *GetConnectorDescriptor) GetApiName() string {
	return "ConnectorService"
}

func (d *GetConnectorDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *GetConnectorDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetConnectorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return connectorServiceDescriptor
}

func (d *GetConnectorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return connector.GetDescriptor()
}

func (d *GetConnectorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetConnectorDescriptorClientMsgHandle{}
}

func (d *GetConnectorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetConnectorDescriptorServerMsgHandle{}
}

func (h *GetConnectorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetConnectorRequest) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*connector.Name)(nil)
}

func (h *GetConnectorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetConnectorRequest) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetConnectorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetConnectorRequest) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetConnectorDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetConnectorRequest) *connector.Connector
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetConnectorDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetConnectorRequest) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetConnectorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*connector.Connector)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*connector.Connector) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*connector.Name)(nil)
}

func (h *GetConnectorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*connector.Connector)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*connector.Connector) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetConnectorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*connector.Connector)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*connector.Connector) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetConnectorDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*connector.Connector)
}

func (h *GetConnectorDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*connector.Connector)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*connector.Connector) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetConnectorDescriptor() *GetConnectorDescriptor {
	return getConnectorDescriptor
}

type BatchGetConnectorsDescriptor struct{}

type BatchGetConnectorsDescriptorClientMsgHandle struct{}

type BatchGetConnectorsDescriptorServerMsgHandle struct{}

func (d *BatchGetConnectorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetConnectorsRequest{}
}

func (d *BatchGetConnectorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetConnectorsResponse{}
}

func (d *BatchGetConnectorsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetConnectorsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetConnectorsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetConnectorsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetConnectorsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetConnectorsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetConnectorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetConnectorsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetConnectorsDescriptor) GetMethodName() string {
	return "BatchGetConnectors"
}

func (d *BatchGetConnectorsDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConnectorService/BatchGetConnectors"
}

func (d *BatchGetConnectorsDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *BatchGetConnectorsDescriptor) GetApiName() string {
	return "ConnectorService"
}

func (d *BatchGetConnectorsDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *BatchGetConnectorsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetConnectorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return connectorServiceDescriptor
}

func (d *BatchGetConnectorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return connector.GetDescriptor()
}

func (d *BatchGetConnectorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetConnectorsDescriptorClientMsgHandle{}
}

func (d *BatchGetConnectorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetConnectorsDescriptorServerMsgHandle{}
}

func (h *BatchGetConnectorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetConnectorsRequest) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetConnectorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetConnectorsRequest) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return connector.ConnectorNameList(names)
		}
	}
	return (connector.ConnectorNameList)(nil)
}

func (h *BatchGetConnectorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetConnectorsRequest) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetConnectorsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetConnectorsRequest) *connector.Connector
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetConnectorsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetConnectorsRequest) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetConnectorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetConnectorsResponse) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetConnectorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetConnectorsResponse) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetConnectors(); len(resources) > 0 {
			list := make(connector.ConnectorNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (connector.ConnectorNameList)(nil)
}

func (h *BatchGetConnectorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetConnectorsResponse) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetConnectorsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetConnectorsResponse) *connector.Connector
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetConnectorsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetConnectorsResponse) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetConnectors(); len(resources) > 0 {
			return connector.ConnectorList(resources)
		}
	}
	return (connector.ConnectorList)(nil)
}

func GetBatchGetConnectorsDescriptor() *BatchGetConnectorsDescriptor {
	return batchGetConnectorsDescriptor
}

type ListConnectorsDescriptor struct{}

type ListConnectorsDescriptorClientMsgHandle struct{}

type ListConnectorsDescriptorServerMsgHandle struct{}

func (d *ListConnectorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListConnectorsRequest{}
}

func (d *ListConnectorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListConnectorsResponse{}
}

func (d *ListConnectorsDescriptor) IsUnary() bool {
	return true
}

func (d *ListConnectorsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListConnectorsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListConnectorsDescriptor) IsCollection() bool {
	return true
}

func (d *ListConnectorsDescriptor) IsPlural() bool {
	return true
}

func (d *ListConnectorsDescriptor) HasResource() bool {
	return true
}

func (d *ListConnectorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListConnectorsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListConnectorsDescriptor) GetMethodName() string {
	return "ListConnectors"
}

func (d *ListConnectorsDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConnectorService/ListConnectors"
}

func (d *ListConnectorsDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *ListConnectorsDescriptor) GetApiName() string {
	return "ConnectorService"
}

func (d *ListConnectorsDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *ListConnectorsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListConnectorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return connectorServiceDescriptor
}

func (d *ListConnectorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return connector.GetDescriptor()
}

func (d *ListConnectorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListConnectorsDescriptorClientMsgHandle{}
}

func (d *ListConnectorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListConnectorsDescriptorServerMsgHandle{}
}

func (h *ListConnectorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListConnectorsRequest) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListConnectorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListConnectorsRequest) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListConnectorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListConnectorsRequest) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*connector.ParentName)(nil)
}

func (h *ListConnectorsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListConnectorsRequest) *connector.Connector
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListConnectorsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListConnectorsRequest) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListConnectorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListConnectorsResponse) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListConnectorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListConnectorsResponse) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetConnectors(); len(resources) > 0 {
			list := make(connector.ConnectorNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (connector.ConnectorNameList)(nil)
}

func (h *ListConnectorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListConnectorsResponse) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListConnectorsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListConnectorsResponse) *connector.Connector
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListConnectorsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListConnectorsResponse) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetConnectors(); len(resources) > 0 {
			return connector.ConnectorList(resources)
		}
	}
	return (connector.ConnectorList)(nil)
}

func GetListConnectorsDescriptor() *ListConnectorsDescriptor {
	return listConnectorsDescriptor
}

type WatchConnectorDescriptor struct{}

type WatchConnectorDescriptorClientMsgHandle struct{}

type WatchConnectorDescriptorServerMsgHandle struct{}

func (d *WatchConnectorDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchConnectorRequest{}
}

func (d *WatchConnectorDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchConnectorResponse{}
}

func (d *WatchConnectorDescriptor) IsUnary() bool {
	return false
}

func (d *WatchConnectorDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchConnectorDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchConnectorDescriptor) IsCollection() bool {
	return false
}

func (d *WatchConnectorDescriptor) IsPlural() bool {
	return false
}

func (d *WatchConnectorDescriptor) HasResource() bool {
	return true
}

func (d *WatchConnectorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchConnectorDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchConnectorDescriptor) GetMethodName() string {
	return "WatchConnector"
}

func (d *WatchConnectorDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConnectorService/WatchConnector"
}

func (d *WatchConnectorDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *WatchConnectorDescriptor) GetApiName() string {
	return "ConnectorService"
}

func (d *WatchConnectorDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *WatchConnectorDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchConnectorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return connectorServiceDescriptor
}

func (d *WatchConnectorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return connector.GetDescriptor()
}

func (d *WatchConnectorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConnectorDescriptorClientMsgHandle{}
}

func (d *WatchConnectorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConnectorDescriptorServerMsgHandle{}
}

func (h *WatchConnectorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchConnectorRequest) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*connector.Name)(nil)
}

func (h *WatchConnectorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchConnectorRequest) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchConnectorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchConnectorRequest) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchConnectorDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchConnectorRequest) *connector.Connector
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchConnectorDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchConnectorRequest) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchConnectorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConnectorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchConnectorResponse) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *connector.ConnectorChange_Added_:
				return tResChange.Added.GetConnector().GetName()
			case *connector.ConnectorChange_Modified_:
				return tResChange.Modified.GetName()
			case *connector.ConnectorChange_Removed_:
				return tResChange.Removed.GetName()
			case *connector.ConnectorChange_Current_:
				return tResChange.Current.GetConnector().GetName()
			}
		}
	}
	return (*connector.Name)(nil)
}

func (h *WatchConnectorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConnectorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchConnectorResponse) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchConnectorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConnectorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchConnectorResponse) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchConnectorDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchConnectorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchConnectorResponse) *connector.Connector
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *connector.ConnectorChange_Added_:
				return tResChange.Added.GetConnector()
			case *connector.ConnectorChange_Modified_:
				return tResChange.Modified.GetConnector()
			case *connector.ConnectorChange_Current_:
				return tResChange.Current.GetConnector()
			}
		}
	}
	return (*connector.Connector)(nil)
}

func (h *WatchConnectorDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchConnectorResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchConnectorResponse) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchConnectorDescriptor() *WatchConnectorDescriptor {
	return watchConnectorDescriptor
}

type WatchConnectorsDescriptor struct{}

type WatchConnectorsDescriptorClientMsgHandle struct{}

type WatchConnectorsDescriptorServerMsgHandle struct{}

func (d *WatchConnectorsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchConnectorsRequest{}
}

func (d *WatchConnectorsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchConnectorsResponse{}
}

func (d *WatchConnectorsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchConnectorsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchConnectorsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchConnectorsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchConnectorsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchConnectorsDescriptor) HasResource() bool {
	return true
}

func (d *WatchConnectorsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchConnectorsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchConnectorsDescriptor) GetMethodName() string {
	return "WatchConnectors"
}

func (d *WatchConnectorsDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConnectorService/WatchConnectors"
}

func (d *WatchConnectorsDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *WatchConnectorsDescriptor) GetApiName() string {
	return "ConnectorService"
}

func (d *WatchConnectorsDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *WatchConnectorsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchConnectorsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return connectorServiceDescriptor
}

func (d *WatchConnectorsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return connector.GetDescriptor()
}

func (d *WatchConnectorsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConnectorsDescriptorClientMsgHandle{}
}

func (d *WatchConnectorsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConnectorsDescriptorServerMsgHandle{}
}

func (h *WatchConnectorsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchConnectorsRequest) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchConnectorsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchConnectorsRequest) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchConnectorsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchConnectorsRequest) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*connector.ParentName)(nil)
}

func (h *WatchConnectorsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchConnectorsRequest) *connector.Connector
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchConnectorsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchConnectorsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchConnectorsRequest) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchConnectorsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchConnectorsResponse) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchConnectorsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchConnectorsResponse) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetConnectorChanges(); len(resChanges) > 0 {
			list := make(connector.ConnectorNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *connector.ConnectorChange_Added_:
					list = append(list, tResChange.Added.GetConnector().GetName())
				case *connector.ConnectorChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *connector.ConnectorChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *connector.ConnectorChange_Current_:
					list = append(list, tResChange.Current.GetConnector().GetName())
				}
			}
			return list
		}
	}
	return (connector.ConnectorNameList)(nil)
}

func (h *WatchConnectorsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchConnectorsResponse) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchConnectorsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchConnectorsResponse) *connector.Connector
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchConnectorsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchConnectorsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchConnectorsResponse) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetConnectorChanges(); len(resChanges) > 0 {
			list := make(connector.ConnectorList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *connector.ConnectorChange_Added_:
					list = append(list, tResChange.Added.GetConnector())
				case *connector.ConnectorChange_Modified_:
					list = append(list, tResChange.Modified.GetConnector())
				case *connector.ConnectorChange_Current_:
					list = append(list, tResChange.Current.GetConnector())
				}
			}
			return list
		}
	}
	return (connector.ConnectorList)(nil)
}

func GetWatchConnectorsDescriptor() *WatchConnectorsDescriptor {
	return watchConnectorsDescriptor
}

type CreateConnectorDescriptor struct{}

type CreateConnectorDescriptorClientMsgHandle struct{}

type CreateConnectorDescriptorServerMsgHandle struct{}

func (d *CreateConnectorDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateConnectorRequest{}
}

func (d *CreateConnectorDescriptor) NewEmptyServerMsg() proto.Message {
	return &connector.Connector{}
}

func (d *CreateConnectorDescriptor) IsUnary() bool {
	return true
}

func (d *CreateConnectorDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateConnectorDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateConnectorDescriptor) IsCollection() bool {
	return true
}

func (d *CreateConnectorDescriptor) IsPlural() bool {
	return false
}

func (d *CreateConnectorDescriptor) HasResource() bool {
	return true
}

func (d *CreateConnectorDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateConnectorDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateConnectorDescriptor) GetMethodName() string {
	return "CreateConnector"
}

func (d *CreateConnectorDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConnectorService/CreateConnector"
}

func (d *CreateConnectorDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *CreateConnectorDescriptor) GetApiName() string {
	return "ConnectorService"
}

func (d *CreateConnectorDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *CreateConnectorDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateConnectorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return connectorServiceDescriptor
}

func (d *CreateConnectorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return connector.GetDescriptor()
}

func (d *CreateConnectorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateConnectorDescriptorClientMsgHandle{}
}

func (d *CreateConnectorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateConnectorDescriptorServerMsgHandle{}
}

func (h *CreateConnectorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateConnectorRequest) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetConnector()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*connector.Name)(nil)
}

func (h *CreateConnectorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateConnectorRequest) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateConnectorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateConnectorRequest) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*connector.ParentName)(nil)
}

func (h *CreateConnectorDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateConnectorRequest) *connector.Connector
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetConnector()
	}
	return (*connector.Connector)(nil)
}

func (h *CreateConnectorDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateConnectorRequest) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateConnectorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*connector.Connector)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*connector.Connector) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*connector.Name)(nil)
}

func (h *CreateConnectorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*connector.Connector)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*connector.Connector) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateConnectorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*connector.Connector)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*connector.Connector) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateConnectorDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*connector.Connector)
}

func (h *CreateConnectorDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*connector.Connector)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*connector.Connector) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateConnectorDescriptor() *CreateConnectorDescriptor {
	return createConnectorDescriptor
}

type UpdateConnectorDescriptor struct{}

type UpdateConnectorDescriptorClientMsgHandle struct{}

type UpdateConnectorDescriptorServerMsgHandle struct{}

func (d *UpdateConnectorDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateConnectorRequest{}
}

func (d *UpdateConnectorDescriptor) NewEmptyServerMsg() proto.Message {
	return &connector.Connector{}
}

func (d *UpdateConnectorDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateConnectorDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateConnectorDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateConnectorDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateConnectorDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateConnectorDescriptor) HasResource() bool {
	return true
}

func (d *UpdateConnectorDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateConnectorDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateConnectorDescriptor) GetMethodName() string {
	return "UpdateConnector"
}

func (d *UpdateConnectorDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConnectorService/UpdateConnector"
}

func (d *UpdateConnectorDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *UpdateConnectorDescriptor) GetApiName() string {
	return "ConnectorService"
}

func (d *UpdateConnectorDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *UpdateConnectorDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateConnectorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return connectorServiceDescriptor
}

func (d *UpdateConnectorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return connector.GetDescriptor()
}

func (d *UpdateConnectorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateConnectorDescriptorClientMsgHandle{}
}

func (d *UpdateConnectorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateConnectorDescriptorServerMsgHandle{}
}

func (h *UpdateConnectorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateConnectorRequest) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetConnector()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*connector.Name)(nil)
}

func (h *UpdateConnectorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateConnectorRequest) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateConnectorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateConnectorRequest) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateConnectorDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateConnectorRequest) *connector.Connector
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetConnector()
	}
	return (*connector.Connector)(nil)
}

func (h *UpdateConnectorDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateConnectorRequest) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateConnectorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*connector.Connector)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*connector.Connector) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*connector.Name)(nil)
}

func (h *UpdateConnectorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*connector.Connector)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*connector.Connector) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateConnectorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*connector.Connector)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*connector.Connector) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateConnectorDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*connector.Connector)
}

func (h *UpdateConnectorDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*connector.Connector)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*connector.Connector) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateConnectorDescriptor() *UpdateConnectorDescriptor {
	return updateConnectorDescriptor
}

type DeleteConnectorDescriptor struct{}

type DeleteConnectorDescriptorClientMsgHandle struct{}

type DeleteConnectorDescriptorServerMsgHandle struct{}

func (d *DeleteConnectorDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteConnectorRequest{}
}

func (d *DeleteConnectorDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteConnectorDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteConnectorDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteConnectorDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteConnectorDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteConnectorDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteConnectorDescriptor) HasResource() bool {
	return true
}

func (d *DeleteConnectorDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteConnectorDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteConnectorDescriptor) GetMethodName() string {
	return "DeleteConnector"
}

func (d *DeleteConnectorDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.ConnectorService/DeleteConnector"
}

func (d *DeleteConnectorDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *DeleteConnectorDescriptor) GetApiName() string {
	return "ConnectorService"
}

func (d *DeleteConnectorDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *DeleteConnectorDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteConnectorDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return connectorServiceDescriptor
}

func (d *DeleteConnectorDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return connector.GetDescriptor()
}

func (d *DeleteConnectorDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteConnectorDescriptorClientMsgHandle{}
}

func (d *DeleteConnectorDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteConnectorDescriptorServerMsgHandle{}
}

func (h *DeleteConnectorDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteConnectorRequest) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*connector.Name)(nil)
}

func (h *DeleteConnectorDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteConnectorRequest) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteConnectorDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteConnectorRequest) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteConnectorDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteConnectorRequest) *connector.Connector
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteConnectorDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteConnectorRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteConnectorRequest) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteConnectorDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *connector.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteConnectorDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*connector.Name
	})
	if ok {
		return connector.ConnectorNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteConnectorDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *connector.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteConnectorDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *connector.Connector
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteConnectorDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*connector.Connector
	})
	if ok {
		return connector.ConnectorList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteConnectorDescriptor() *DeleteConnectorDescriptor {
	return deleteConnectorDescriptor
}

type ConnectorServiceDescriptor struct{}

func (d *ConnectorServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getConnectorDescriptor,
		batchGetConnectorsDescriptor,
		listConnectorsDescriptor,
		watchConnectorDescriptor,
		watchConnectorsDescriptor,
		createConnectorDescriptor,
		updateConnectorDescriptor,
		deleteConnectorDescriptor,
	}
}

func (d *ConnectorServiceDescriptor) GetFullAPIName() string {
	return "/ntt.ai.v1.ConnectorService"
}

func (d *ConnectorServiceDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *ConnectorServiceDescriptor) GetApiName() string {
	return "ConnectorService"
}

func (d *ConnectorServiceDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *ConnectorServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetConnectorServiceDescriptor() *ConnectorServiceDescriptor {
	return connectorServiceDescriptor
}

func initDescriptors() {
	connectorServiceDescriptor = &ConnectorServiceDescriptor{}
	getConnectorDescriptor = &GetConnectorDescriptor{}
	batchGetConnectorsDescriptor = &BatchGetConnectorsDescriptor{}
	listConnectorsDescriptor = &ListConnectorsDescriptor{}
	watchConnectorDescriptor = &WatchConnectorDescriptor{}
	watchConnectorsDescriptor = &WatchConnectorsDescriptor{}
	createConnectorDescriptor = &CreateConnectorDescriptor{}
	updateConnectorDescriptor = &UpdateConnectorDescriptor{}
	deleteConnectorDescriptor = &DeleteConnectorDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(connectorServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getConnectorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetConnectorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listConnectorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchConnectorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchConnectorsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createConnectorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateConnectorDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteConnectorDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
