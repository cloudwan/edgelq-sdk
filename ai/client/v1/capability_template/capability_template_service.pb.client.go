// Code generated by protoc-gen-goten-client
// API: CapabilityTemplateService
// DO NOT EDIT!!!

package capability_template_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	capability_template "github.com/cloudwan/edgelq-sdk/ai/resources/v1/capability_template"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &capability_template.CapabilityTemplate{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CapabilityTemplateServiceClient is the client API for CapabilityTemplateService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CapabilityTemplateServiceClient interface {
	GetCapabilityTemplate(ctx context.Context, in *GetCapabilityTemplateRequest, opts ...grpc.CallOption) (*capability_template.CapabilityTemplate, error)
	BatchGetCapabilityTemplates(ctx context.Context, in *BatchGetCapabilityTemplatesRequest, opts ...grpc.CallOption) (*BatchGetCapabilityTemplatesResponse, error)
	ListCapabilityTemplates(ctx context.Context, in *ListCapabilityTemplatesRequest, opts ...grpc.CallOption) (*ListCapabilityTemplatesResponse, error)
	WatchCapabilityTemplate(ctx context.Context, in *WatchCapabilityTemplateRequest, opts ...grpc.CallOption) (WatchCapabilityTemplateClientStream, error)
	WatchCapabilityTemplates(ctx context.Context, in *WatchCapabilityTemplatesRequest, opts ...grpc.CallOption) (WatchCapabilityTemplatesClientStream, error)
	CreateCapabilityTemplate(ctx context.Context, in *CreateCapabilityTemplateRequest, opts ...grpc.CallOption) (*capability_template.CapabilityTemplate, error)
	UpdateCapabilityTemplate(ctx context.Context, in *UpdateCapabilityTemplateRequest, opts ...grpc.CallOption) (*capability_template.CapabilityTemplate, error)
	DeleteCapabilityTemplate(ctx context.Context, in *DeleteCapabilityTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PreviewTemplateTools(ctx context.Context, in *PreviewTemplateToolsRequest, opts ...grpc.CallOption) (*PreviewTemplateToolsResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewCapabilityTemplateServiceClient(cc grpc.ClientConnInterface) CapabilityTemplateServiceClient {
	return &client{cc}
}

func (c *client) GetCapabilityTemplate(ctx context.Context, in *GetCapabilityTemplateRequest, opts ...grpc.CallOption) (*capability_template.CapabilityTemplate, error) {
	out := new(capability_template.CapabilityTemplate)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.CapabilityTemplateService/GetCapabilityTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetCapabilityTemplates(ctx context.Context, in *BatchGetCapabilityTemplatesRequest, opts ...grpc.CallOption) (*BatchGetCapabilityTemplatesResponse, error) {
	out := new(BatchGetCapabilityTemplatesResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.CapabilityTemplateService/BatchGetCapabilityTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListCapabilityTemplates(ctx context.Context, in *ListCapabilityTemplatesRequest, opts ...grpc.CallOption) (*ListCapabilityTemplatesResponse, error) {
	out := new(ListCapabilityTemplatesResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.CapabilityTemplateService/ListCapabilityTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchCapabilityTemplate(ctx context.Context, in *WatchCapabilityTemplateRequest, opts ...grpc.CallOption) (WatchCapabilityTemplateClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchCapabilityTemplate",
			ServerStreams: true,
		},
		"/ntt.ai.v1.CapabilityTemplateService/WatchCapabilityTemplate", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchCapabilityTemplateWatchCapabilityTemplateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchCapabilityTemplateClientStream interface {
	Recv() (*WatchCapabilityTemplateResponse, error)
	grpc.ClientStream
}

type watchCapabilityTemplateWatchCapabilityTemplateClient struct {
	grpc.ClientStream
}

func (x *watchCapabilityTemplateWatchCapabilityTemplateClient) Recv() (*WatchCapabilityTemplateResponse, error) {
	m := new(WatchCapabilityTemplateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchCapabilityTemplates(ctx context.Context, in *WatchCapabilityTemplatesRequest, opts ...grpc.CallOption) (WatchCapabilityTemplatesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchCapabilityTemplates",
			ServerStreams: true,
		},
		"/ntt.ai.v1.CapabilityTemplateService/WatchCapabilityTemplates", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchCapabilityTemplatesWatchCapabilityTemplatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchCapabilityTemplatesClientStream interface {
	Recv() (*WatchCapabilityTemplatesResponse, error)
	grpc.ClientStream
}

type watchCapabilityTemplatesWatchCapabilityTemplatesClient struct {
	grpc.ClientStream
}

func (x *watchCapabilityTemplatesWatchCapabilityTemplatesClient) Recv() (*WatchCapabilityTemplatesResponse, error) {
	m := new(WatchCapabilityTemplatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateCapabilityTemplate(ctx context.Context, in *CreateCapabilityTemplateRequest, opts ...grpc.CallOption) (*capability_template.CapabilityTemplate, error) {
	out := new(capability_template.CapabilityTemplate)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.CapabilityTemplateService/CreateCapabilityTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateCapabilityTemplate(ctx context.Context, in *UpdateCapabilityTemplateRequest, opts ...grpc.CallOption) (*capability_template.CapabilityTemplate, error) {
	out := new(capability_template.CapabilityTemplate)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.CapabilityTemplateService/UpdateCapabilityTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteCapabilityTemplate(ctx context.Context, in *DeleteCapabilityTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.CapabilityTemplateService/DeleteCapabilityTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) PreviewTemplateTools(ctx context.Context, in *PreviewTemplateToolsRequest, opts ...grpc.CallOption) (*PreviewTemplateToolsResponse, error) {
	out := new(PreviewTemplateToolsResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.CapabilityTemplateService/PreviewTemplateTools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
