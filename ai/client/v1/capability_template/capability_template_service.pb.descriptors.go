// Code generated by protoc-gen-goten-client
// API: CapabilityTemplateService
// DO NOT EDIT!!!

package capability_template_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	capability_template "github.com/cloudwan/edgelq-sdk/ai/resources/v1/capability_template"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &capability_template.CapabilityTemplate{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized                bool
	capabilityTemplateServiceDescriptor   *CapabilityTemplateServiceDescriptor
	getCapabilityTemplateDescriptor       *GetCapabilityTemplateDescriptor
	batchGetCapabilityTemplatesDescriptor *BatchGetCapabilityTemplatesDescriptor
	listCapabilityTemplatesDescriptor     *ListCapabilityTemplatesDescriptor
	watchCapabilityTemplateDescriptor     *WatchCapabilityTemplateDescriptor
	watchCapabilityTemplatesDescriptor    *WatchCapabilityTemplatesDescriptor
	createCapabilityTemplateDescriptor    *CreateCapabilityTemplateDescriptor
	updateCapabilityTemplateDescriptor    *UpdateCapabilityTemplateDescriptor
	deleteCapabilityTemplateDescriptor    *DeleteCapabilityTemplateDescriptor
	previewTemplateToolsDescriptor        *PreviewTemplateToolsDescriptor
)

type GetCapabilityTemplateDescriptor struct{}

type GetCapabilityTemplateDescriptorClientMsgHandle struct{}

type GetCapabilityTemplateDescriptorServerMsgHandle struct{}

func (d *GetCapabilityTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetCapabilityTemplateRequest{}
}

func (d *GetCapabilityTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &capability_template.CapabilityTemplate{}
}

func (d *GetCapabilityTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *GetCapabilityTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *GetCapabilityTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *GetCapabilityTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *GetCapabilityTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *GetCapabilityTemplateDescriptor) HasResource() bool {
	return true
}

func (d *GetCapabilityTemplateDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetCapabilityTemplateDescriptor) GetVerb() string {
	return "get"
}

func (d *GetCapabilityTemplateDescriptor) GetMethodName() string {
	return "GetCapabilityTemplate"
}

func (d *GetCapabilityTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.CapabilityTemplateService/GetCapabilityTemplate"
}

func (d *GetCapabilityTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *GetCapabilityTemplateDescriptor) GetApiName() string {
	return "CapabilityTemplateService"
}

func (d *GetCapabilityTemplateDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *GetCapabilityTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetCapabilityTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return capabilityTemplateServiceDescriptor
}

func (d *GetCapabilityTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return capability_template.GetDescriptor()
}

func (d *GetCapabilityTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetCapabilityTemplateDescriptorClientMsgHandle{}
}

func (d *GetCapabilityTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetCapabilityTemplateDescriptorServerMsgHandle{}
}

func (h *GetCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetCapabilityTemplateRequest) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*capability_template.Name)(nil)
}

func (h *GetCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetCapabilityTemplateRequest) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetCapabilityTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetCapabilityTemplateRequest) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetCapabilityTemplateRequest) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetCapabilityTemplateRequest) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*capability_template.CapabilityTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*capability_template.CapabilityTemplate) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*capability_template.Name)(nil)
}

func (h *GetCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*capability_template.CapabilityTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*capability_template.CapabilityTemplate) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetCapabilityTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*capability_template.CapabilityTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*capability_template.CapabilityTemplate) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*capability_template.CapabilityTemplate)
}

func (h *GetCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*capability_template.CapabilityTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*capability_template.CapabilityTemplate) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetCapabilityTemplateDescriptor() *GetCapabilityTemplateDescriptor {
	return getCapabilityTemplateDescriptor
}

type BatchGetCapabilityTemplatesDescriptor struct{}

type BatchGetCapabilityTemplatesDescriptorClientMsgHandle struct{}

type BatchGetCapabilityTemplatesDescriptorServerMsgHandle struct{}

func (d *BatchGetCapabilityTemplatesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetCapabilityTemplatesRequest{}
}

func (d *BatchGetCapabilityTemplatesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetCapabilityTemplatesResponse{}
}

func (d *BatchGetCapabilityTemplatesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetCapabilityTemplatesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetCapabilityTemplatesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetCapabilityTemplatesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetCapabilityTemplatesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetCapabilityTemplatesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetCapabilityTemplatesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetCapabilityTemplatesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetCapabilityTemplatesDescriptor) GetMethodName() string {
	return "BatchGetCapabilityTemplates"
}

func (d *BatchGetCapabilityTemplatesDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.CapabilityTemplateService/BatchGetCapabilityTemplates"
}

func (d *BatchGetCapabilityTemplatesDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *BatchGetCapabilityTemplatesDescriptor) GetApiName() string {
	return "CapabilityTemplateService"
}

func (d *BatchGetCapabilityTemplatesDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *BatchGetCapabilityTemplatesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetCapabilityTemplatesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return capabilityTemplateServiceDescriptor
}

func (d *BatchGetCapabilityTemplatesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return capability_template.GetDescriptor()
}

func (d *BatchGetCapabilityTemplatesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetCapabilityTemplatesDescriptorClientMsgHandle{}
}

func (d *BatchGetCapabilityTemplatesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetCapabilityTemplatesDescriptorServerMsgHandle{}
}

func (h *BatchGetCapabilityTemplatesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetCapabilityTemplatesRequest) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetCapabilityTemplatesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetCapabilityTemplatesRequest) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return capability_template.CapabilityTemplateNameList(names)
		}
	}
	return (capability_template.CapabilityTemplateNameList)(nil)
}

func (h *BatchGetCapabilityTemplatesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetCapabilityTemplatesRequest) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetCapabilityTemplatesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetCapabilityTemplatesRequest) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetCapabilityTemplatesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetCapabilityTemplatesRequest) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetCapabilityTemplatesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetCapabilityTemplatesResponse) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetCapabilityTemplatesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetCapabilityTemplatesResponse) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetCapabilityTemplates(); len(resources) > 0 {
			list := make(capability_template.CapabilityTemplateNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (capability_template.CapabilityTemplateNameList)(nil)
}

func (h *BatchGetCapabilityTemplatesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetCapabilityTemplatesResponse) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetCapabilityTemplatesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetCapabilityTemplatesResponse) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetCapabilityTemplatesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetCapabilityTemplatesResponse) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetCapabilityTemplates(); len(resources) > 0 {
			return capability_template.CapabilityTemplateList(resources)
		}
	}
	return (capability_template.CapabilityTemplateList)(nil)
}

func GetBatchGetCapabilityTemplatesDescriptor() *BatchGetCapabilityTemplatesDescriptor {
	return batchGetCapabilityTemplatesDescriptor
}

type ListCapabilityTemplatesDescriptor struct{}

type ListCapabilityTemplatesDescriptorClientMsgHandle struct{}

type ListCapabilityTemplatesDescriptorServerMsgHandle struct{}

func (d *ListCapabilityTemplatesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListCapabilityTemplatesRequest{}
}

func (d *ListCapabilityTemplatesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListCapabilityTemplatesResponse{}
}

func (d *ListCapabilityTemplatesDescriptor) IsUnary() bool {
	return true
}

func (d *ListCapabilityTemplatesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListCapabilityTemplatesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListCapabilityTemplatesDescriptor) IsCollection() bool {
	return true
}

func (d *ListCapabilityTemplatesDescriptor) IsPlural() bool {
	return true
}

func (d *ListCapabilityTemplatesDescriptor) HasResource() bool {
	return true
}

func (d *ListCapabilityTemplatesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListCapabilityTemplatesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListCapabilityTemplatesDescriptor) GetMethodName() string {
	return "ListCapabilityTemplates"
}

func (d *ListCapabilityTemplatesDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.CapabilityTemplateService/ListCapabilityTemplates"
}

func (d *ListCapabilityTemplatesDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *ListCapabilityTemplatesDescriptor) GetApiName() string {
	return "CapabilityTemplateService"
}

func (d *ListCapabilityTemplatesDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *ListCapabilityTemplatesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListCapabilityTemplatesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return capabilityTemplateServiceDescriptor
}

func (d *ListCapabilityTemplatesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return capability_template.GetDescriptor()
}

func (d *ListCapabilityTemplatesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListCapabilityTemplatesDescriptorClientMsgHandle{}
}

func (d *ListCapabilityTemplatesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListCapabilityTemplatesDescriptorServerMsgHandle{}
}

func (h *ListCapabilityTemplatesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListCapabilityTemplatesRequest) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListCapabilityTemplatesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListCapabilityTemplatesRequest) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListCapabilityTemplatesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListCapabilityTemplatesRequest) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*capability_template.ParentName)(nil)
}

func (h *ListCapabilityTemplatesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListCapabilityTemplatesRequest) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListCapabilityTemplatesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListCapabilityTemplatesRequest) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListCapabilityTemplatesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListCapabilityTemplatesResponse) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListCapabilityTemplatesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListCapabilityTemplatesResponse) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetCapabilityTemplates(); len(resources) > 0 {
			list := make(capability_template.CapabilityTemplateNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (capability_template.CapabilityTemplateNameList)(nil)
}

func (h *ListCapabilityTemplatesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListCapabilityTemplatesResponse) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListCapabilityTemplatesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListCapabilityTemplatesResponse) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListCapabilityTemplatesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListCapabilityTemplatesResponse) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetCapabilityTemplates(); len(resources) > 0 {
			return capability_template.CapabilityTemplateList(resources)
		}
	}
	return (capability_template.CapabilityTemplateList)(nil)
}

func GetListCapabilityTemplatesDescriptor() *ListCapabilityTemplatesDescriptor {
	return listCapabilityTemplatesDescriptor
}

type WatchCapabilityTemplateDescriptor struct{}

type WatchCapabilityTemplateDescriptorClientMsgHandle struct{}

type WatchCapabilityTemplateDescriptorServerMsgHandle struct{}

func (d *WatchCapabilityTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchCapabilityTemplateRequest{}
}

func (d *WatchCapabilityTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchCapabilityTemplateResponse{}
}

func (d *WatchCapabilityTemplateDescriptor) IsUnary() bool {
	return false
}

func (d *WatchCapabilityTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchCapabilityTemplateDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchCapabilityTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *WatchCapabilityTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *WatchCapabilityTemplateDescriptor) HasResource() bool {
	return true
}

func (d *WatchCapabilityTemplateDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchCapabilityTemplateDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchCapabilityTemplateDescriptor) GetMethodName() string {
	return "WatchCapabilityTemplate"
}

func (d *WatchCapabilityTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.CapabilityTemplateService/WatchCapabilityTemplate"
}

func (d *WatchCapabilityTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *WatchCapabilityTemplateDescriptor) GetApiName() string {
	return "CapabilityTemplateService"
}

func (d *WatchCapabilityTemplateDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *WatchCapabilityTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchCapabilityTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return capabilityTemplateServiceDescriptor
}

func (d *WatchCapabilityTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return capability_template.GetDescriptor()
}

func (d *WatchCapabilityTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchCapabilityTemplateDescriptorClientMsgHandle{}
}

func (d *WatchCapabilityTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchCapabilityTemplateDescriptorServerMsgHandle{}
}

func (h *WatchCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchCapabilityTemplateRequest) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*capability_template.Name)(nil)
}

func (h *WatchCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchCapabilityTemplateRequest) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchCapabilityTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchCapabilityTemplateRequest) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchCapabilityTemplateRequest) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchCapabilityTemplateRequest) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchCapabilityTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchCapabilityTemplateResponse) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *capability_template.CapabilityTemplateChange_Added_:
				return tResChange.Added.GetCapabilityTemplate().GetName()
			case *capability_template.CapabilityTemplateChange_Modified_:
				return tResChange.Modified.GetName()
			case *capability_template.CapabilityTemplateChange_Removed_:
				return tResChange.Removed.GetName()
			case *capability_template.CapabilityTemplateChange_Current_:
				return tResChange.Current.GetCapabilityTemplate().GetName()
			}
		}
	}
	return (*capability_template.Name)(nil)
}

func (h *WatchCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchCapabilityTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchCapabilityTemplateResponse) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchCapabilityTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchCapabilityTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchCapabilityTemplateResponse) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchCapabilityTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchCapabilityTemplateResponse) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *capability_template.CapabilityTemplateChange_Added_:
				return tResChange.Added.GetCapabilityTemplate()
			case *capability_template.CapabilityTemplateChange_Modified_:
				return tResChange.Modified.GetCapabilityTemplate()
			case *capability_template.CapabilityTemplateChange_Current_:
				return tResChange.Current.GetCapabilityTemplate()
			}
		}
	}
	return (*capability_template.CapabilityTemplate)(nil)
}

func (h *WatchCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchCapabilityTemplateResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchCapabilityTemplateResponse) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchCapabilityTemplateDescriptor() *WatchCapabilityTemplateDescriptor {
	return watchCapabilityTemplateDescriptor
}

type WatchCapabilityTemplatesDescriptor struct{}

type WatchCapabilityTemplatesDescriptorClientMsgHandle struct{}

type WatchCapabilityTemplatesDescriptorServerMsgHandle struct{}

func (d *WatchCapabilityTemplatesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchCapabilityTemplatesRequest{}
}

func (d *WatchCapabilityTemplatesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchCapabilityTemplatesResponse{}
}

func (d *WatchCapabilityTemplatesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchCapabilityTemplatesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchCapabilityTemplatesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchCapabilityTemplatesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchCapabilityTemplatesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchCapabilityTemplatesDescriptor) HasResource() bool {
	return true
}

func (d *WatchCapabilityTemplatesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchCapabilityTemplatesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchCapabilityTemplatesDescriptor) GetMethodName() string {
	return "WatchCapabilityTemplates"
}

func (d *WatchCapabilityTemplatesDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.CapabilityTemplateService/WatchCapabilityTemplates"
}

func (d *WatchCapabilityTemplatesDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *WatchCapabilityTemplatesDescriptor) GetApiName() string {
	return "CapabilityTemplateService"
}

func (d *WatchCapabilityTemplatesDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *WatchCapabilityTemplatesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchCapabilityTemplatesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return capabilityTemplateServiceDescriptor
}

func (d *WatchCapabilityTemplatesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return capability_template.GetDescriptor()
}

func (d *WatchCapabilityTemplatesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchCapabilityTemplatesDescriptorClientMsgHandle{}
}

func (d *WatchCapabilityTemplatesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchCapabilityTemplatesDescriptorServerMsgHandle{}
}

func (h *WatchCapabilityTemplatesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchCapabilityTemplatesRequest) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchCapabilityTemplatesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchCapabilityTemplatesRequest) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchCapabilityTemplatesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchCapabilityTemplatesRequest) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*capability_template.ParentName)(nil)
}

func (h *WatchCapabilityTemplatesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchCapabilityTemplatesRequest) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchCapabilityTemplatesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchCapabilityTemplatesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchCapabilityTemplatesRequest) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchCapabilityTemplatesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchCapabilityTemplatesResponse) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchCapabilityTemplatesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchCapabilityTemplatesResponse) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetCapabilityTemplateChanges(); len(resChanges) > 0 {
			list := make(capability_template.CapabilityTemplateNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *capability_template.CapabilityTemplateChange_Added_:
					list = append(list, tResChange.Added.GetCapabilityTemplate().GetName())
				case *capability_template.CapabilityTemplateChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *capability_template.CapabilityTemplateChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *capability_template.CapabilityTemplateChange_Current_:
					list = append(list, tResChange.Current.GetCapabilityTemplate().GetName())
				}
			}
			return list
		}
	}
	return (capability_template.CapabilityTemplateNameList)(nil)
}

func (h *WatchCapabilityTemplatesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchCapabilityTemplatesResponse) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchCapabilityTemplatesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchCapabilityTemplatesResponse) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchCapabilityTemplatesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchCapabilityTemplatesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchCapabilityTemplatesResponse) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetCapabilityTemplateChanges(); len(resChanges) > 0 {
			list := make(capability_template.CapabilityTemplateList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *capability_template.CapabilityTemplateChange_Added_:
					list = append(list, tResChange.Added.GetCapabilityTemplate())
				case *capability_template.CapabilityTemplateChange_Modified_:
					list = append(list, tResChange.Modified.GetCapabilityTemplate())
				case *capability_template.CapabilityTemplateChange_Current_:
					list = append(list, tResChange.Current.GetCapabilityTemplate())
				}
			}
			return list
		}
	}
	return (capability_template.CapabilityTemplateList)(nil)
}

func GetWatchCapabilityTemplatesDescriptor() *WatchCapabilityTemplatesDescriptor {
	return watchCapabilityTemplatesDescriptor
}

type CreateCapabilityTemplateDescriptor struct{}

type CreateCapabilityTemplateDescriptorClientMsgHandle struct{}

type CreateCapabilityTemplateDescriptorServerMsgHandle struct{}

func (d *CreateCapabilityTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateCapabilityTemplateRequest{}
}

func (d *CreateCapabilityTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &capability_template.CapabilityTemplate{}
}

func (d *CreateCapabilityTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *CreateCapabilityTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateCapabilityTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateCapabilityTemplateDescriptor) IsCollection() bool {
	return true
}

func (d *CreateCapabilityTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *CreateCapabilityTemplateDescriptor) HasResource() bool {
	return true
}

func (d *CreateCapabilityTemplateDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateCapabilityTemplateDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateCapabilityTemplateDescriptor) GetMethodName() string {
	return "CreateCapabilityTemplate"
}

func (d *CreateCapabilityTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.CapabilityTemplateService/CreateCapabilityTemplate"
}

func (d *CreateCapabilityTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *CreateCapabilityTemplateDescriptor) GetApiName() string {
	return "CapabilityTemplateService"
}

func (d *CreateCapabilityTemplateDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *CreateCapabilityTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateCapabilityTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return capabilityTemplateServiceDescriptor
}

func (d *CreateCapabilityTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return capability_template.GetDescriptor()
}

func (d *CreateCapabilityTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateCapabilityTemplateDescriptorClientMsgHandle{}
}

func (d *CreateCapabilityTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateCapabilityTemplateDescriptorServerMsgHandle{}
}

func (h *CreateCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateCapabilityTemplateRequest) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetCapabilityTemplate()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*capability_template.Name)(nil)
}

func (h *CreateCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateCapabilityTemplateRequest) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateCapabilityTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateCapabilityTemplateRequest) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*capability_template.ParentName)(nil)
}

func (h *CreateCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateCapabilityTemplateRequest) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetCapabilityTemplate()
	}
	return (*capability_template.CapabilityTemplate)(nil)
}

func (h *CreateCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateCapabilityTemplateRequest) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*capability_template.CapabilityTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*capability_template.CapabilityTemplate) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*capability_template.Name)(nil)
}

func (h *CreateCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*capability_template.CapabilityTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*capability_template.CapabilityTemplate) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateCapabilityTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*capability_template.CapabilityTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*capability_template.CapabilityTemplate) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*capability_template.CapabilityTemplate)
}

func (h *CreateCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*capability_template.CapabilityTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*capability_template.CapabilityTemplate) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateCapabilityTemplateDescriptor() *CreateCapabilityTemplateDescriptor {
	return createCapabilityTemplateDescriptor
}

type UpdateCapabilityTemplateDescriptor struct{}

type UpdateCapabilityTemplateDescriptorClientMsgHandle struct{}

type UpdateCapabilityTemplateDescriptorServerMsgHandle struct{}

func (d *UpdateCapabilityTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateCapabilityTemplateRequest{}
}

func (d *UpdateCapabilityTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &capability_template.CapabilityTemplate{}
}

func (d *UpdateCapabilityTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateCapabilityTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateCapabilityTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateCapabilityTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateCapabilityTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateCapabilityTemplateDescriptor) HasResource() bool {
	return true
}

func (d *UpdateCapabilityTemplateDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateCapabilityTemplateDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateCapabilityTemplateDescriptor) GetMethodName() string {
	return "UpdateCapabilityTemplate"
}

func (d *UpdateCapabilityTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.CapabilityTemplateService/UpdateCapabilityTemplate"
}

func (d *UpdateCapabilityTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *UpdateCapabilityTemplateDescriptor) GetApiName() string {
	return "CapabilityTemplateService"
}

func (d *UpdateCapabilityTemplateDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *UpdateCapabilityTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateCapabilityTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return capabilityTemplateServiceDescriptor
}

func (d *UpdateCapabilityTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return capability_template.GetDescriptor()
}

func (d *UpdateCapabilityTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateCapabilityTemplateDescriptorClientMsgHandle{}
}

func (d *UpdateCapabilityTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateCapabilityTemplateDescriptorServerMsgHandle{}
}

func (h *UpdateCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateCapabilityTemplateRequest) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetCapabilityTemplate()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*capability_template.Name)(nil)
}

func (h *UpdateCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateCapabilityTemplateRequest) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateCapabilityTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateCapabilityTemplateRequest) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateCapabilityTemplateRequest) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetCapabilityTemplate()
	}
	return (*capability_template.CapabilityTemplate)(nil)
}

func (h *UpdateCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateCapabilityTemplateRequest) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*capability_template.CapabilityTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*capability_template.CapabilityTemplate) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*capability_template.Name)(nil)
}

func (h *UpdateCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*capability_template.CapabilityTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*capability_template.CapabilityTemplate) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateCapabilityTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*capability_template.CapabilityTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*capability_template.CapabilityTemplate) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*capability_template.CapabilityTemplate)
}

func (h *UpdateCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*capability_template.CapabilityTemplate)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*capability_template.CapabilityTemplate) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateCapabilityTemplateDescriptor() *UpdateCapabilityTemplateDescriptor {
	return updateCapabilityTemplateDescriptor
}

type DeleteCapabilityTemplateDescriptor struct{}

type DeleteCapabilityTemplateDescriptorClientMsgHandle struct{}

type DeleteCapabilityTemplateDescriptorServerMsgHandle struct{}

func (d *DeleteCapabilityTemplateDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteCapabilityTemplateRequest{}
}

func (d *DeleteCapabilityTemplateDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteCapabilityTemplateDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteCapabilityTemplateDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteCapabilityTemplateDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteCapabilityTemplateDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteCapabilityTemplateDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteCapabilityTemplateDescriptor) HasResource() bool {
	return true
}

func (d *DeleteCapabilityTemplateDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteCapabilityTemplateDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteCapabilityTemplateDescriptor) GetMethodName() string {
	return "DeleteCapabilityTemplate"
}

func (d *DeleteCapabilityTemplateDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.CapabilityTemplateService/DeleteCapabilityTemplate"
}

func (d *DeleteCapabilityTemplateDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *DeleteCapabilityTemplateDescriptor) GetApiName() string {
	return "CapabilityTemplateService"
}

func (d *DeleteCapabilityTemplateDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *DeleteCapabilityTemplateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteCapabilityTemplateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return capabilityTemplateServiceDescriptor
}

func (d *DeleteCapabilityTemplateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return capability_template.GetDescriptor()
}

func (d *DeleteCapabilityTemplateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteCapabilityTemplateDescriptorClientMsgHandle{}
}

func (d *DeleteCapabilityTemplateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteCapabilityTemplateDescriptorServerMsgHandle{}
}

func (h *DeleteCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteCapabilityTemplateRequest) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*capability_template.Name)(nil)
}

func (h *DeleteCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteCapabilityTemplateRequest) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteCapabilityTemplateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteCapabilityTemplateRequest) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteCapabilityTemplateRequest) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteCapabilityTemplateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteCapabilityTemplateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteCapabilityTemplateRequest) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteCapabilityTemplateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteCapabilityTemplateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteCapabilityTemplateDescriptor() *DeleteCapabilityTemplateDescriptor {
	return deleteCapabilityTemplateDescriptor
}

type PreviewTemplateToolsDescriptor struct{}

type PreviewTemplateToolsDescriptorClientMsgHandle struct{}

type PreviewTemplateToolsDescriptorServerMsgHandle struct{}

func (d *PreviewTemplateToolsDescriptor) NewEmptyClientMsg() proto.Message {
	return &PreviewTemplateToolsRequest{}
}

func (d *PreviewTemplateToolsDescriptor) NewEmptyServerMsg() proto.Message {
	return &PreviewTemplateToolsResponse{}
}

func (d *PreviewTemplateToolsDescriptor) IsUnary() bool {
	return true
}

func (d *PreviewTemplateToolsDescriptor) IsClientStream() bool {
	return false
}

func (d *PreviewTemplateToolsDescriptor) IsServerStream() bool {
	return false
}

func (d *PreviewTemplateToolsDescriptor) IsCollection() bool {
	return false
}

func (d *PreviewTemplateToolsDescriptor) IsPlural() bool {
	return false
}

func (d *PreviewTemplateToolsDescriptor) HasResource() bool {
	return true
}

func (d *PreviewTemplateToolsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *PreviewTemplateToolsDescriptor) GetVerb() string {
	return "previewTools"
}

func (d *PreviewTemplateToolsDescriptor) GetMethodName() string {
	return "PreviewTemplateTools"
}

func (d *PreviewTemplateToolsDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.CapabilityTemplateService/PreviewTemplateTools"
}

func (d *PreviewTemplateToolsDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *PreviewTemplateToolsDescriptor) GetApiName() string {
	return "CapabilityTemplateService"
}

func (d *PreviewTemplateToolsDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *PreviewTemplateToolsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *PreviewTemplateToolsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return capabilityTemplateServiceDescriptor
}

func (d *PreviewTemplateToolsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return capability_template.GetDescriptor()
}

func (d *PreviewTemplateToolsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &PreviewTemplateToolsDescriptorClientMsgHandle{}
}

func (d *PreviewTemplateToolsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &PreviewTemplateToolsDescriptorServerMsgHandle{}
}

func (h *PreviewTemplateToolsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*PreviewTemplateToolsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*PreviewTemplateToolsRequest) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*capability_template.Name)(nil)
}

func (h *PreviewTemplateToolsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*PreviewTemplateToolsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*PreviewTemplateToolsRequest) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *PreviewTemplateToolsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*PreviewTemplateToolsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*PreviewTemplateToolsRequest) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *PreviewTemplateToolsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*PreviewTemplateToolsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*PreviewTemplateToolsRequest) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *PreviewTemplateToolsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*PreviewTemplateToolsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*PreviewTemplateToolsRequest) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *PreviewTemplateToolsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*PreviewTemplateToolsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*PreviewTemplateToolsResponse) *capability_template.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *PreviewTemplateToolsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*PreviewTemplateToolsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*PreviewTemplateToolsResponse) []*capability_template.Name
	})
	if ok {
		return capability_template.CapabilityTemplateNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *PreviewTemplateToolsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*PreviewTemplateToolsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*PreviewTemplateToolsResponse) *capability_template.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *PreviewTemplateToolsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*PreviewTemplateToolsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*PreviewTemplateToolsResponse) *capability_template.CapabilityTemplate
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *PreviewTemplateToolsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*PreviewTemplateToolsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*PreviewTemplateToolsResponse) []*capability_template.CapabilityTemplate
	})
	if ok {
		return capability_template.CapabilityTemplateList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetPreviewTemplateToolsDescriptor() *PreviewTemplateToolsDescriptor {
	return previewTemplateToolsDescriptor
}

type CapabilityTemplateServiceDescriptor struct{}

func (d *CapabilityTemplateServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getCapabilityTemplateDescriptor,
		batchGetCapabilityTemplatesDescriptor,
		listCapabilityTemplatesDescriptor,
		watchCapabilityTemplateDescriptor,
		watchCapabilityTemplatesDescriptor,
		createCapabilityTemplateDescriptor,
		updateCapabilityTemplateDescriptor,
		deleteCapabilityTemplateDescriptor,
		previewTemplateToolsDescriptor,
	}
}

func (d *CapabilityTemplateServiceDescriptor) GetFullAPIName() string {
	return "/ntt.ai.v1.CapabilityTemplateService"
}

func (d *CapabilityTemplateServiceDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *CapabilityTemplateServiceDescriptor) GetApiName() string {
	return "CapabilityTemplateService"
}

func (d *CapabilityTemplateServiceDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *CapabilityTemplateServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetCapabilityTemplateServiceDescriptor() *CapabilityTemplateServiceDescriptor {
	return capabilityTemplateServiceDescriptor
}

func initDescriptors() {
	capabilityTemplateServiceDescriptor = &CapabilityTemplateServiceDescriptor{}
	getCapabilityTemplateDescriptor = &GetCapabilityTemplateDescriptor{}
	batchGetCapabilityTemplatesDescriptor = &BatchGetCapabilityTemplatesDescriptor{}
	listCapabilityTemplatesDescriptor = &ListCapabilityTemplatesDescriptor{}
	watchCapabilityTemplateDescriptor = &WatchCapabilityTemplateDescriptor{}
	watchCapabilityTemplatesDescriptor = &WatchCapabilityTemplatesDescriptor{}
	createCapabilityTemplateDescriptor = &CreateCapabilityTemplateDescriptor{}
	updateCapabilityTemplateDescriptor = &UpdateCapabilityTemplateDescriptor{}
	deleteCapabilityTemplateDescriptor = &DeleteCapabilityTemplateDescriptor{}
	previewTemplateToolsDescriptor = &PreviewTemplateToolsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(capabilityTemplateServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getCapabilityTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetCapabilityTemplatesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listCapabilityTemplatesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchCapabilityTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchCapabilityTemplatesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createCapabilityTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateCapabilityTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteCapabilityTemplateDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(previewTemplateToolsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
