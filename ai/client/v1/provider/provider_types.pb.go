// Code generated by protoc-gen-goten-go
// File: edgelq/ai/proto/v1/provider_types.proto
// DO NOT EDIT!!!

package provider_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	common_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &common_client.Message{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResponseFormat_Mode int32

const (
	ResponseFormat_MODE_UNSPECIFIED ResponseFormat_Mode = 0
	ResponseFormat_TEXT             ResponseFormat_Mode = 1
	ResponseFormat_JSON_OBJECT      ResponseFormat_Mode = 2
	ResponseFormat_JSON_SCHEMA      ResponseFormat_Mode = 3
)

var (
	ResponseFormat_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "TEXT",
		2: "JSON_OBJECT",
		3: "JSON_SCHEMA",
	}

	ResponseFormat_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"TEXT":             1,
		"JSON_OBJECT":      2,
		"JSON_SCHEMA":      3,
	}
)

func (x ResponseFormat_Mode) Enum() *ResponseFormat_Mode {
	p := new(ResponseFormat_Mode)
	*p = x
	return p
}

func (x ResponseFormat_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (ResponseFormat_Mode) Descriptor() preflect.EnumDescriptor {
	return edgelq_ai_proto_v1_provider_types_proto_enumTypes[0].Descriptor()
}

func (ResponseFormat_Mode) Type() preflect.EnumType {
	return &edgelq_ai_proto_v1_provider_types_proto_enumTypes[0]
}

func (x ResponseFormat_Mode) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use ResponseFormat_Mode.ProtoReflect.Descriptor instead.
func (ResponseFormat_Mode) EnumDescriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{2, 0}
}

type StreamError_ErrorType int32

const (
	StreamError_ERROR_TYPE_UNSPECIFIED StreamError_ErrorType = 0
	StreamError_RATE_LIMIT             StreamError_ErrorType = 1
	StreamError_CONTENT_FILTER         StreamError_ErrorType = 2
	StreamError_PROVIDER_ERROR         StreamError_ErrorType = 3
)

var (
	StreamError_ErrorType_name = map[int32]string{
		0: "ERROR_TYPE_UNSPECIFIED",
		1: "RATE_LIMIT",
		2: "CONTENT_FILTER",
		3: "PROVIDER_ERROR",
	}

	StreamError_ErrorType_value = map[string]int32{
		"ERROR_TYPE_UNSPECIFIED": 0,
		"RATE_LIMIT":             1,
		"CONTENT_FILTER":         2,
		"PROVIDER_ERROR":         3,
	}
)

func (x StreamError_ErrorType) Enum() *StreamError_ErrorType {
	p := new(StreamError_ErrorType)
	*p = x
	return p
}

func (x StreamError_ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (StreamError_ErrorType) Descriptor() preflect.EnumDescriptor {
	return edgelq_ai_proto_v1_provider_types_proto_enumTypes[1].Descriptor()
}

func (StreamError_ErrorType) Type() preflect.EnumType {
	return &edgelq_ai_proto_v1_provider_types_proto_enumTypes[1]
}

func (x StreamError_ErrorType) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use StreamError_ErrorType.ProtoReflect.Descriptor instead.
func (StreamError_ErrorType) EnumDescriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{4, 0}
}

// Why the generation stopped
type ProviderDone_StopReason int32

const (
	ProviderDone_STOP_REASON_UNSPECIFIED ProviderDone_StopReason = 0
	ProviderDone_STOP                    ProviderDone_StopReason = 1
	ProviderDone_LENGTH                  ProviderDone_StopReason = 2
	ProviderDone_TOOL_CALLS              ProviderDone_StopReason = 3
	ProviderDone_CONTENT_FILTER          ProviderDone_StopReason = 4
	ProviderDone_ERROR                   ProviderDone_StopReason = 5
)

var (
	ProviderDone_StopReason_name = map[int32]string{
		0: "STOP_REASON_UNSPECIFIED",
		1: "STOP",
		2: "LENGTH",
		3: "TOOL_CALLS",
		4: "CONTENT_FILTER",
		5: "ERROR",
	}

	ProviderDone_StopReason_value = map[string]int32{
		"STOP_REASON_UNSPECIFIED": 0,
		"STOP":                    1,
		"LENGTH":                  2,
		"TOOL_CALLS":              3,
		"CONTENT_FILTER":          4,
		"ERROR":                   5,
	}
)

func (x ProviderDone_StopReason) Enum() *ProviderDone_StopReason {
	p := new(ProviderDone_StopReason)
	*p = x
	return p
}

func (x ProviderDone_StopReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (ProviderDone_StopReason) Descriptor() preflect.EnumDescriptor {
	return edgelq_ai_proto_v1_provider_types_proto_enumTypes[2].Descriptor()
}

func (ProviderDone_StopReason) Type() preflect.EnumType {
	return &edgelq_ai_proto_v1_provider_types_proto_enumTypes[2]
}

func (x ProviderDone_StopReason) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use ProviderDone_StopReason.ProtoReflect.Descriptor instead.
func (ProviderDone_StopReason) EnumDescriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{6, 0}
}

// Provider chat request
type ProviderChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Model name or deployment ID
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// Conversation messages
	Messages []*common_client.Message `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	// Available tools
	Tools []*common_client.ToolDefinition `protobuf:"bytes,3,rep,name=tools,proto3" json:"tools,omitempty"`
	// Generation parameters
	Parameters *ChatParameters `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// User identifier for abuse tracking
	User string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Request metadata (request ID, tracing, etc.)
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Provider-specific options
	//
	// Types that are valid to be assigned to ProviderConfig:
	//	*ProviderChatRequest_OpenaiConfig
	//	*ProviderChatRequest_AzureConfig
	//	*ProviderChatRequest_AnthropicConfig
	//	*ProviderChatRequest_GeminiConfig
	ProviderConfig isProviderChatRequest_ProviderConfig `protobuf_oneof:"provider_config"`
}

func (m *ProviderChatRequest) Reset() {
	*m = ProviderChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProviderChatRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProviderChatRequest) ProtoMessage() {}

func (m *ProviderChatRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProviderChatRequest) GotenMessage() {}

// Deprecated, Use ProviderChatRequest.ProtoReflect.Descriptor instead.
func (*ProviderChatRequest) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{0}
}

func (m *ProviderChatRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProviderChatRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProviderChatRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProviderChatRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isProviderChatRequest_ProviderConfig interface {
	isProviderChatRequest_ProviderConfig()
}

type ProviderChatRequest_OpenaiConfig struct {
	OpenaiConfig *OpenAIConfig `protobuf:"bytes,7,opt,name=openai_config,json=openaiConfig,proto3,oneof"`
}
type ProviderChatRequest_AzureConfig struct {
	AzureConfig *AzureConfig `protobuf:"bytes,8,opt,name=azure_config,json=azureConfig,proto3,oneof"`
}
type ProviderChatRequest_AnthropicConfig struct {
	AnthropicConfig *AnthropicConfig `protobuf:"bytes,9,opt,name=anthropic_config,json=anthropicConfig,proto3,oneof"`
}
type ProviderChatRequest_GeminiConfig struct {
	GeminiConfig *GeminiConfig `protobuf:"bytes,10,opt,name=gemini_config,json=geminiConfig,proto3,oneof"`
}

func (*ProviderChatRequest_OpenaiConfig) isProviderChatRequest_ProviderConfig()    {}
func (*ProviderChatRequest_AzureConfig) isProviderChatRequest_ProviderConfig()     {}
func (*ProviderChatRequest_AnthropicConfig) isProviderChatRequest_ProviderConfig() {}
func (*ProviderChatRequest_GeminiConfig) isProviderChatRequest_ProviderConfig()    {}
func (m *ProviderChatRequest) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *ProviderChatRequest) GetMessages() []*common_client.Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ProviderChatRequest) GetTools() []*common_client.ToolDefinition {
	if m != nil {
		return m.Tools
	}
	return nil
}

func (m *ProviderChatRequest) GetParameters() *ChatParameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *ProviderChatRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ProviderChatRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ProviderChatRequest) GetProviderConfig() isProviderChatRequest_ProviderConfig {
	if m != nil {
		return m.ProviderConfig
	}
	return nil
}
func (m *ProviderChatRequest) GetOpenaiConfig() *OpenAIConfig {
	if x, ok := m.GetProviderConfig().(*ProviderChatRequest_OpenaiConfig); ok {
		return x.OpenaiConfig
	}
	return nil
}
func (m *ProviderChatRequest) GetAzureConfig() *AzureConfig {
	if x, ok := m.GetProviderConfig().(*ProviderChatRequest_AzureConfig); ok {
		return x.AzureConfig
	}
	return nil
}
func (m *ProviderChatRequest) GetAnthropicConfig() *AnthropicConfig {
	if x, ok := m.GetProviderConfig().(*ProviderChatRequest_AnthropicConfig); ok {
		return x.AnthropicConfig
	}
	return nil
}
func (m *ProviderChatRequest) GetGeminiConfig() *GeminiConfig {
	if x, ok := m.GetProviderConfig().(*ProviderChatRequest_GeminiConfig); ok {
		return x.GeminiConfig
	}
	return nil
}
func (m *ProviderChatRequest) SetModel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "ProviderChatRequest"))
	}
	m.Model = fv
}

func (m *ProviderChatRequest) SetMessages(fv []*common_client.Message) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Messages", "ProviderChatRequest"))
	}
	m.Messages = fv
}

func (m *ProviderChatRequest) SetTools(fv []*common_client.ToolDefinition) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tools", "ProviderChatRequest"))
	}
	m.Tools = fv
}

func (m *ProviderChatRequest) SetParameters(fv *ChatParameters) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parameters", "ProviderChatRequest"))
	}
	m.Parameters = fv
}

func (m *ProviderChatRequest) SetUser(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "User", "ProviderChatRequest"))
	}
	m.User = fv
}

func (m *ProviderChatRequest) SetMetadata(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "ProviderChatRequest"))
	}
	m.Metadata = fv
}

func (m *ProviderChatRequest) SetProviderConfig(ofv isProviderChatRequest_ProviderConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isProviderChatRequest_ProviderConfig", "ProviderChatRequest"))
	}
	m.ProviderConfig = ofv
}
func (m *ProviderChatRequest) SetOpenaiConfig(fv *OpenAIConfig) {
	m.SetProviderConfig(&ProviderChatRequest_OpenaiConfig{OpenaiConfig: fv})
}
func (m *ProviderChatRequest) SetAzureConfig(fv *AzureConfig) {
	m.SetProviderConfig(&ProviderChatRequest_AzureConfig{AzureConfig: fv})
}
func (m *ProviderChatRequest) SetAnthropicConfig(fv *AnthropicConfig) {
	m.SetProviderConfig(&ProviderChatRequest_AnthropicConfig{AnthropicConfig: fv})
}
func (m *ProviderChatRequest) SetGeminiConfig(fv *GeminiConfig) {
	m.SetProviderConfig(&ProviderChatRequest_GeminiConfig{GeminiConfig: fv})
}

// Provider-specific parameters
type ChatParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Maximum tokens to generate
	MaxTokens int32 `protobuf:"varint,1,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	// Temperature (0.0 - 2.0)
	Temperature float32 `protobuf:"fixed32,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// Top-p nucleus sampling
	TopP float32 `protobuf:"fixed32,3,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`
	// Top-k sampling (Anthropic, Gemini)
	TopK int32 `protobuf:"varint,4,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	// Presence penalty (OpenAI)
	PresencePenalty float32 `protobuf:"fixed32,5,opt,name=presence_penalty,json=presencePenalty,proto3" json:"presence_penalty,omitempty"`
	// Frequency penalty (OpenAI)
	FrequencyPenalty float32  `protobuf:"fixed32,6,opt,name=frequency_penalty,json=frequencyPenalty,proto3" json:"frequency_penalty,omitempty"`
	Seed             int64    `protobuf:"varint,7,opt,name=seed,proto3" json:"seed,omitempty"`
	StopSequences    []string `protobuf:"bytes,8,rep,name=stop_sequences,json=stopSequences,proto3" json:"stop_sequences,omitempty"`
	// Response format
	ResponseFormat *ResponseFormat `protobuf:"bytes,9,opt,name=response_format,json=responseFormat,proto3" json:"response_format,omitempty"`
	// Whether to return log probabilities
	Logprobs bool `protobuf:"varint,10,opt,name=logprobs,proto3" json:"logprobs,omitempty"`
	// Number of most likely tokens to return
	TopLogprobs int32 `protobuf:"varint,11,opt,name=top_logprobs,json=topLogprobs,proto3" json:"top_logprobs,omitempty"`
}

func (m *ChatParameters) Reset() {
	*m = ChatParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ChatParameters) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ChatParameters) ProtoMessage() {}

func (m *ChatParameters) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ChatParameters) GotenMessage() {}

// Deprecated, Use ChatParameters.ProtoReflect.Descriptor instead.
func (*ChatParameters) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{1}
}

func (m *ChatParameters) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ChatParameters) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ChatParameters) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ChatParameters) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ChatParameters) GetMaxTokens() int32 {
	if m != nil {
		return m.MaxTokens
	}
	return int32(0)
}

func (m *ChatParameters) GetTemperature() float32 {
	if m != nil {
		return m.Temperature
	}
	return float32(0)
}

func (m *ChatParameters) GetTopP() float32 {
	if m != nil {
		return m.TopP
	}
	return float32(0)
}

func (m *ChatParameters) GetTopK() int32 {
	if m != nil {
		return m.TopK
	}
	return int32(0)
}

func (m *ChatParameters) GetPresencePenalty() float32 {
	if m != nil {
		return m.PresencePenalty
	}
	return float32(0)
}

func (m *ChatParameters) GetFrequencyPenalty() float32 {
	if m != nil {
		return m.FrequencyPenalty
	}
	return float32(0)
}

func (m *ChatParameters) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return int64(0)
}

func (m *ChatParameters) GetStopSequences() []string {
	if m != nil {
		return m.StopSequences
	}
	return nil
}

func (m *ChatParameters) GetResponseFormat() *ResponseFormat {
	if m != nil {
		return m.ResponseFormat
	}
	return nil
}

func (m *ChatParameters) GetLogprobs() bool {
	if m != nil {
		return m.Logprobs
	}
	return false
}

func (m *ChatParameters) GetTopLogprobs() int32 {
	if m != nil {
		return m.TopLogprobs
	}
	return int32(0)
}

func (m *ChatParameters) SetMaxTokens(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxTokens", "ChatParameters"))
	}
	m.MaxTokens = fv
}

func (m *ChatParameters) SetTemperature(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Temperature", "ChatParameters"))
	}
	m.Temperature = fv
}

func (m *ChatParameters) SetTopP(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TopP", "ChatParameters"))
	}
	m.TopP = fv
}

func (m *ChatParameters) SetTopK(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TopK", "ChatParameters"))
	}
	m.TopK = fv
}

func (m *ChatParameters) SetPresencePenalty(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PresencePenalty", "ChatParameters"))
	}
	m.PresencePenalty = fv
}

func (m *ChatParameters) SetFrequencyPenalty(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FrequencyPenalty", "ChatParameters"))
	}
	m.FrequencyPenalty = fv
}

func (m *ChatParameters) SetSeed(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Seed", "ChatParameters"))
	}
	m.Seed = fv
}

func (m *ChatParameters) SetStopSequences(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StopSequences", "ChatParameters"))
	}
	m.StopSequences = fv
}

func (m *ChatParameters) SetResponseFormat(fv *ResponseFormat) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseFormat", "ChatParameters"))
	}
	m.ResponseFormat = fv
}

func (m *ChatParameters) SetLogprobs(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Logprobs", "ChatParameters"))
	}
	m.Logprobs = fv
}

func (m *ChatParameters) SetTopLogprobs(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TopLogprobs", "ChatParameters"))
	}
	m.TopLogprobs = fv
}

// Response format configuration
type ResponseFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Mode          ResponseFormat_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=ntt.ai.v1.ResponseFormat_Mode" json:"mode,omitempty"`
	// JSON schema for JSON_SCHEMA mode
	JsonSchema string `protobuf:"bytes,2,opt,name=json_schema,json=jsonSchema,proto3" json:"json_schema,omitempty"`
}

func (m *ResponseFormat) Reset() {
	*m = ResponseFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ResponseFormat) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ResponseFormat) ProtoMessage() {}

func (m *ResponseFormat) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ResponseFormat) GotenMessage() {}

// Deprecated, Use ResponseFormat.ProtoReflect.Descriptor instead.
func (*ResponseFormat) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{2}
}

func (m *ResponseFormat) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ResponseFormat) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ResponseFormat) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ResponseFormat) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ResponseFormat) GetMode() ResponseFormat_Mode {
	if m != nil {
		return m.Mode
	}
	return ResponseFormat_MODE_UNSPECIFIED
}

func (m *ResponseFormat) GetJsonSchema() string {
	if m != nil {
		return m.JsonSchema
	}
	return ""
}

func (m *ResponseFormat) SetMode(fv ResponseFormat_Mode) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "ResponseFormat"))
	}
	m.Mode = fv
}

func (m *ResponseFormat) SetJsonSchema(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "JsonSchema", "ResponseFormat"))
	}
	m.JsonSchema = fv
}

// Provider content delta for streaming
type ProviderContentDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Text          string                       `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Channel       common_client.ContentChannel `protobuf:"varint,2,opt,name=channel,proto3,enum=ntt.ai.v1.ContentChannel" json:"channel,omitempty"`
}

func (m *ProviderContentDelta) Reset() {
	*m = ProviderContentDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProviderContentDelta) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProviderContentDelta) ProtoMessage() {}

func (m *ProviderContentDelta) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProviderContentDelta) GotenMessage() {}

// Deprecated, Use ProviderContentDelta.ProtoReflect.Descriptor instead.
func (*ProviderContentDelta) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{3}
}

func (m *ProviderContentDelta) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProviderContentDelta) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProviderContentDelta) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProviderContentDelta) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProviderContentDelta) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ProviderContentDelta) GetChannel() common_client.ContentChannel {
	if m != nil {
		return m.Channel
	}
	return common_client.ContentChannel_CONTENT_CHANNEL_UNSPECIFIED
}

func (m *ProviderContentDelta) SetText(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Text", "ProviderContentDelta"))
	}
	m.Text = fv
}

func (m *ProviderContentDelta) SetChannel(fv common_client.ContentChannel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Channel", "ProviderContentDelta"))
	}
	m.Channel = fv
}

// Stream error information
type StreamError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Type          StreamError_ErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=ntt.ai.v1.StreamError_ErrorType" json:"type,omitempty"`
	Message       string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *StreamError) Reset() {
	*m = StreamError{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *StreamError) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*StreamError) ProtoMessage() {}

func (m *StreamError) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*StreamError) GotenMessage() {}

// Deprecated, Use StreamError.ProtoReflect.Descriptor instead.
func (*StreamError) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{4}
}

func (m *StreamError) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *StreamError) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *StreamError) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *StreamError) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *StreamError) GetType() StreamError_ErrorType {
	if m != nil {
		return m.Type
	}
	return StreamError_ERROR_TYPE_UNSPECIFIED
}

func (m *StreamError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *StreamError) SetType(fv StreamError_ErrorType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "StreamError"))
	}
	m.Type = fv
}

func (m *StreamError) SetMessage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Message", "StreamError"))
	}
	m.Message = fv
}

// Provider streaming event
type ProviderStreamEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Event:
	//	*ProviderStreamEvent_Delta
	//	*ProviderStreamEvent_Usage
	//	*ProviderStreamEvent_Error
	//	*ProviderStreamEvent_Done
	//	*ProviderStreamEvent_ToolCalls
	Event isProviderStreamEvent_Event `protobuf_oneof:"event"`
}

func (m *ProviderStreamEvent) Reset() {
	*m = ProviderStreamEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProviderStreamEvent) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProviderStreamEvent) ProtoMessage() {}

func (m *ProviderStreamEvent) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProviderStreamEvent) GotenMessage() {}

// Deprecated, Use ProviderStreamEvent.ProtoReflect.Descriptor instead.
func (*ProviderStreamEvent) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{5}
}

func (m *ProviderStreamEvent) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProviderStreamEvent) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProviderStreamEvent) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProviderStreamEvent) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isProviderStreamEvent_Event interface {
	isProviderStreamEvent_Event()
}

type ProviderStreamEvent_Delta struct {
	Delta *ProviderContentDelta `protobuf:"bytes,1,opt,name=delta,proto3,oneof"`
}
type ProviderStreamEvent_Usage struct {
	Usage *common_client.TokenUsage `protobuf:"bytes,2,opt,name=usage,proto3,oneof"`
}
type ProviderStreamEvent_Error struct {
	Error *StreamError `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}
type ProviderStreamEvent_Done struct {
	Done *ProviderDone `protobuf:"bytes,4,opt,name=done,proto3,oneof"`
}
type ProviderStreamEvent_ToolCalls struct {
	ToolCalls *common_client.ToolCalls `protobuf:"bytes,5,opt,name=tool_calls,json=toolCalls,proto3,oneof"`
}

func (*ProviderStreamEvent_Delta) isProviderStreamEvent_Event()     {}
func (*ProviderStreamEvent_Usage) isProviderStreamEvent_Event()     {}
func (*ProviderStreamEvent_Error) isProviderStreamEvent_Event()     {}
func (*ProviderStreamEvent_Done) isProviderStreamEvent_Event()      {}
func (*ProviderStreamEvent_ToolCalls) isProviderStreamEvent_Event() {}
func (m *ProviderStreamEvent) GetEvent() isProviderStreamEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}
func (m *ProviderStreamEvent) GetDelta() *ProviderContentDelta {
	if x, ok := m.GetEvent().(*ProviderStreamEvent_Delta); ok {
		return x.Delta
	}
	return nil
}
func (m *ProviderStreamEvent) GetUsage() *common_client.TokenUsage {
	if x, ok := m.GetEvent().(*ProviderStreamEvent_Usage); ok {
		return x.Usage
	}
	return nil
}
func (m *ProviderStreamEvent) GetError() *StreamError {
	if x, ok := m.GetEvent().(*ProviderStreamEvent_Error); ok {
		return x.Error
	}
	return nil
}
func (m *ProviderStreamEvent) GetDone() *ProviderDone {
	if x, ok := m.GetEvent().(*ProviderStreamEvent_Done); ok {
		return x.Done
	}
	return nil
}
func (m *ProviderStreamEvent) GetToolCalls() *common_client.ToolCalls {
	if x, ok := m.GetEvent().(*ProviderStreamEvent_ToolCalls); ok {
		return x.ToolCalls
	}
	return nil
}
func (m *ProviderStreamEvent) SetEvent(ofv isProviderStreamEvent_Event) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isProviderStreamEvent_Event", "ProviderStreamEvent"))
	}
	m.Event = ofv
}
func (m *ProviderStreamEvent) SetDelta(fv *ProviderContentDelta) {
	m.SetEvent(&ProviderStreamEvent_Delta{Delta: fv})
}
func (m *ProviderStreamEvent) SetUsage(fv *common_client.TokenUsage) {
	m.SetEvent(&ProviderStreamEvent_Usage{Usage: fv})
}
func (m *ProviderStreamEvent) SetError(fv *StreamError) {
	m.SetEvent(&ProviderStreamEvent_Error{Error: fv})
}
func (m *ProviderStreamEvent) SetDone(fv *ProviderDone) {
	m.SetEvent(&ProviderStreamEvent_Done{Done: fv})
}
func (m *ProviderStreamEvent) SetToolCalls(fv *common_client.ToolCalls) {
	m.SetEvent(&ProviderStreamEvent_ToolCalls{ToolCalls: fv})
}

// Stream completion event
type ProviderDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	StopReason    ProviderDone_StopReason `protobuf:"varint,1,opt,name=stop_reason,json=stopReason,proto3,enum=ntt.ai.v1.ProviderDone_StopReason" json:"stop_reason,omitempty"`
}

func (m *ProviderDone) Reset() {
	*m = ProviderDone{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProviderDone) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProviderDone) ProtoMessage() {}

func (m *ProviderDone) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProviderDone) GotenMessage() {}

// Deprecated, Use ProviderDone.ProtoReflect.Descriptor instead.
func (*ProviderDone) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{6}
}

func (m *ProviderDone) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProviderDone) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProviderDone) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProviderDone) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProviderDone) GetStopReason() ProviderDone_StopReason {
	if m != nil {
		return m.StopReason
	}
	return ProviderDone_STOP_REASON_UNSPECIFIED
}

func (m *ProviderDone) SetStopReason(fv ProviderDone_StopReason) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StopReason", "ProviderDone"))
	}
	m.StopReason = fv
}

// Provider-specific configurations
type OpenAIConfig struct {
	state               protoimpl.MessageState
	sizeCache           protoimpl.SizeCache
	unknownFields       protoimpl.UnknownFields
	ParallelToolCalls   bool   `protobuf:"varint,1,opt,name=parallel_tool_calls,json=parallelToolCalls,proto3" json:"parallel_tool_calls,omitempty"`
	MaxCompletionTokens int32  `protobuf:"varint,2,opt,name=max_completion_tokens,json=maxCompletionTokens,proto3" json:"max_completion_tokens,omitempty"`
	ReasoningEffort     string `protobuf:"bytes,3,opt,name=reasoning_effort,json=reasoningEffort,proto3" json:"reasoning_effort,omitempty"`
}

func (m *OpenAIConfig) Reset() {
	*m = OpenAIConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *OpenAIConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*OpenAIConfig) ProtoMessage() {}

func (m *OpenAIConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*OpenAIConfig) GotenMessage() {}

// Deprecated, Use OpenAIConfig.ProtoReflect.Descriptor instead.
func (*OpenAIConfig) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{7}
}

func (m *OpenAIConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *OpenAIConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *OpenAIConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *OpenAIConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *OpenAIConfig) GetParallelToolCalls() bool {
	if m != nil {
		return m.ParallelToolCalls
	}
	return false
}

func (m *OpenAIConfig) GetMaxCompletionTokens() int32 {
	if m != nil {
		return m.MaxCompletionTokens
	}
	return int32(0)
}

func (m *OpenAIConfig) GetReasoningEffort() string {
	if m != nil {
		return m.ReasoningEffort
	}
	return ""
}

func (m *OpenAIConfig) SetParallelToolCalls(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ParallelToolCalls", "OpenAIConfig"))
	}
	m.ParallelToolCalls = fv
}

func (m *OpenAIConfig) SetMaxCompletionTokens(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxCompletionTokens", "OpenAIConfig"))
	}
	m.MaxCompletionTokens = fv
}

func (m *OpenAIConfig) SetReasoningEffort(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ReasoningEffort", "OpenAIConfig"))
	}
	m.ReasoningEffort = fv
}

type AzureConfig struct {
	state               protoimpl.MessageState
	sizeCache           protoimpl.SizeCache
	unknownFields       protoimpl.UnknownFields
	Search              *AzureSearchConfig `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	ParallelToolCalls   bool               `protobuf:"varint,2,opt,name=parallel_tool_calls,json=parallelToolCalls,proto3" json:"parallel_tool_calls,omitempty"`
	MaxCompletionTokens int32              `protobuf:"varint,3,opt,name=max_completion_tokens,json=maxCompletionTokens,proto3" json:"max_completion_tokens,omitempty"`
	ReasoningEffort     string             `protobuf:"bytes,4,opt,name=reasoning_effort,json=reasoningEffort,proto3" json:"reasoning_effort,omitempty"`
}

func (m *AzureConfig) Reset() {
	*m = AzureConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AzureConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AzureConfig) ProtoMessage() {}

func (m *AzureConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AzureConfig) GotenMessage() {}

// Deprecated, Use AzureConfig.ProtoReflect.Descriptor instead.
func (*AzureConfig) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{8}
}

func (m *AzureConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AzureConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AzureConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AzureConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AzureConfig) GetSearch() *AzureSearchConfig {
	if m != nil {
		return m.Search
	}
	return nil
}

func (m *AzureConfig) GetParallelToolCalls() bool {
	if m != nil {
		return m.ParallelToolCalls
	}
	return false
}

func (m *AzureConfig) GetMaxCompletionTokens() int32 {
	if m != nil {
		return m.MaxCompletionTokens
	}
	return int32(0)
}

func (m *AzureConfig) GetReasoningEffort() string {
	if m != nil {
		return m.ReasoningEffort
	}
	return ""
}

func (m *AzureConfig) SetSearch(fv *AzureSearchConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Search", "AzureConfig"))
	}
	m.Search = fv
}

func (m *AzureConfig) SetParallelToolCalls(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ParallelToolCalls", "AzureConfig"))
	}
	m.ParallelToolCalls = fv
}

func (m *AzureConfig) SetMaxCompletionTokens(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxCompletionTokens", "AzureConfig"))
	}
	m.MaxCompletionTokens = fv
}

func (m *AzureConfig) SetReasoningEffort(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ReasoningEffort", "AzureConfig"))
	}
	m.ReasoningEffort = fv
}

type AzureSearchConfig struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	Endpoint       string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Index          string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	ApiKey         string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	EnableSemantic bool   `protobuf:"varint,4,opt,name=enable_semantic,json=enableSemantic,proto3" json:"enable_semantic,omitempty"`
}

func (m *AzureSearchConfig) Reset() {
	*m = AzureSearchConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AzureSearchConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AzureSearchConfig) ProtoMessage() {}

func (m *AzureSearchConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AzureSearchConfig) GotenMessage() {}

// Deprecated, Use AzureSearchConfig.ProtoReflect.Descriptor instead.
func (*AzureSearchConfig) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{9}
}

func (m *AzureSearchConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AzureSearchConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AzureSearchConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AzureSearchConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AzureSearchConfig) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *AzureSearchConfig) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *AzureSearchConfig) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *AzureSearchConfig) GetEnableSemantic() bool {
	if m != nil {
		return m.EnableSemantic
	}
	return false
}

func (m *AzureSearchConfig) SetEndpoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Endpoint", "AzureSearchConfig"))
	}
	m.Endpoint = fv
}

func (m *AzureSearchConfig) SetIndex(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Index", "AzureSearchConfig"))
	}
	m.Index = fv
}

func (m *AzureSearchConfig) SetApiKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ApiKey", "AzureSearchConfig"))
	}
	m.ApiKey = fv
}

func (m *AzureSearchConfig) SetEnableSemantic(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnableSemantic", "AzureSearchConfig"))
	}
	m.EnableSemantic = fv
}

type AnthropicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *AnthropicConfig) Reset() {
	*m = AnthropicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AnthropicConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AnthropicConfig) ProtoMessage() {}

func (m *AnthropicConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AnthropicConfig) GotenMessage() {}

// Deprecated, Use AnthropicConfig.ProtoReflect.Descriptor instead.
func (*AnthropicConfig) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{10}
}

func (m *AnthropicConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AnthropicConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AnthropicConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AnthropicConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type GeminiConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *GeminiConfig) Reset() {
	*m = GeminiConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GeminiConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GeminiConfig) ProtoMessage() {}

func (m *GeminiConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_provider_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GeminiConfig) GotenMessage() {}

// Deprecated, Use GeminiConfig.ProtoReflect.Descriptor instead.
func (*GeminiConfig) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP(), []int{11}
}

func (m *GeminiConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GeminiConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GeminiConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GeminiConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

var edgelq_ai_proto_v1_provider_types_proto preflect.FileDescriptor

var edgelq_ai_proto_v1_provider_types_proto_rawDesc = []byte{
	0x0a, 0x27, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x05, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca,
	0xc6, 0x27, 0x04, 0x2a, 0x02, 0x68, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2e,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x48,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x41, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x70,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x74, 0x68,
	0x72, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x61,
	0x6e, 0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e,
	0x0a, 0x0d, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x0c, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x91,
	0x03, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x42, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f,
	0x62, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x48, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x4d, 0x41, 0x10, 0x03, 0x22, 0x5f, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x33, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xbe, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x9c, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x37,
	0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x44, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x0a, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x0a, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x04,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x22, 0x9d, 0x01, 0x0a, 0x0c,
	0x4f, 0x70, 0x65, 0x6e, 0x41, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x66,
	0x66, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x0b,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x6f,
	0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74,
	0x22, 0x87, 0x01, 0x0a, 0x11, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x6e,
	0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x0e, 0x0a,
	0x0c, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6e, 0xe8,
	0xde, 0x21, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e,
	0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x40, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3b, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_ai_proto_v1_provider_types_proto_rawDescOnce sync.Once
	edgelq_ai_proto_v1_provider_types_proto_rawDescData = edgelq_ai_proto_v1_provider_types_proto_rawDesc
)

func edgelq_ai_proto_v1_provider_types_proto_rawDescGZIP() []byte {
	edgelq_ai_proto_v1_provider_types_proto_rawDescOnce.Do(func() {
		edgelq_ai_proto_v1_provider_types_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_ai_proto_v1_provider_types_proto_rawDescData)
	})
	return edgelq_ai_proto_v1_provider_types_proto_rawDescData
}

var edgelq_ai_proto_v1_provider_types_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var edgelq_ai_proto_v1_provider_types_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var edgelq_ai_proto_v1_provider_types_proto_goTypes = []interface{}{
	(ResponseFormat_Mode)(0),             // 0: ntt.ai.v1.ResponseFormat_Mode
	(StreamError_ErrorType)(0),           // 1: ntt.ai.v1.StreamError_ErrorType
	(ProviderDone_StopReason)(0),         // 2: ntt.ai.v1.ProviderDone_StopReason
	(*ProviderChatRequest)(nil),          // 3: ntt.ai.v1.ProviderChatRequest
	(*ChatParameters)(nil),               // 4: ntt.ai.v1.ChatParameters
	(*ResponseFormat)(nil),               // 5: ntt.ai.v1.ResponseFormat
	(*ProviderContentDelta)(nil),         // 6: ntt.ai.v1.ProviderContentDelta
	(*StreamError)(nil),                  // 7: ntt.ai.v1.StreamError
	(*ProviderStreamEvent)(nil),          // 8: ntt.ai.v1.ProviderStreamEvent
	(*ProviderDone)(nil),                 // 9: ntt.ai.v1.ProviderDone
	(*OpenAIConfig)(nil),                 // 10: ntt.ai.v1.OpenAIConfig
	(*AzureConfig)(nil),                  // 11: ntt.ai.v1.AzureConfig
	(*AzureSearchConfig)(nil),            // 12: ntt.ai.v1.AzureSearchConfig
	(*AnthropicConfig)(nil),              // 13: ntt.ai.v1.AnthropicConfig
	(*GeminiConfig)(nil),                 // 14: ntt.ai.v1.GeminiConfig
	nil,                                  // 15: ntt.ai.v1.ProviderChatRequest.MetadataEntry
	(*common_client.Message)(nil),        // 16: ntt.ai.v1.Message
	(*common_client.ToolDefinition)(nil), // 17: ntt.ai.v1.ToolDefinition
	(common_client.ContentChannel)(0),    // 18: ntt.ai.v1.ContentChannel
	(*common_client.TokenUsage)(nil),     // 19: ntt.ai.v1.TokenUsage
	(*common_client.ToolCalls)(nil),      // 20: ntt.ai.v1.ToolCalls
}
var edgelq_ai_proto_v1_provider_types_proto_depIdxs = []int32{
	16, // 0: ntt.ai.v1.ProviderChatRequest.messages:type_name -> ntt.ai.v1.Message
	17, // 1: ntt.ai.v1.ProviderChatRequest.tools:type_name -> ntt.ai.v1.ToolDefinition
	4,  // 2: ntt.ai.v1.ProviderChatRequest.parameters:type_name -> ntt.ai.v1.ChatParameters
	15, // 3: ntt.ai.v1.ProviderChatRequest.metadata:type_name -> ntt.ai.v1.ProviderChatRequest.MetadataEntry
	10, // 4: ntt.ai.v1.ProviderChatRequest.openai_config:type_name -> ntt.ai.v1.OpenAIConfig
	11, // 5: ntt.ai.v1.ProviderChatRequest.azure_config:type_name -> ntt.ai.v1.AzureConfig
	13, // 6: ntt.ai.v1.ProviderChatRequest.anthropic_config:type_name -> ntt.ai.v1.AnthropicConfig
	14, // 7: ntt.ai.v1.ProviderChatRequest.gemini_config:type_name -> ntt.ai.v1.GeminiConfig
	5,  // 8: ntt.ai.v1.ChatParameters.response_format:type_name -> ntt.ai.v1.ResponseFormat
	0,  // 9: ntt.ai.v1.ResponseFormat.mode:type_name -> ntt.ai.v1.ResponseFormat_Mode
	18, // 10: ntt.ai.v1.ProviderContentDelta.channel:type_name -> ntt.ai.v1.ContentChannel
	1,  // 11: ntt.ai.v1.StreamError.type:type_name -> ntt.ai.v1.StreamError_ErrorType
	6,  // 12: ntt.ai.v1.ProviderStreamEvent.delta:type_name -> ntt.ai.v1.ProviderContentDelta
	19, // 13: ntt.ai.v1.ProviderStreamEvent.usage:type_name -> ntt.ai.v1.TokenUsage
	7,  // 14: ntt.ai.v1.ProviderStreamEvent.error:type_name -> ntt.ai.v1.StreamError
	9,  // 15: ntt.ai.v1.ProviderStreamEvent.done:type_name -> ntt.ai.v1.ProviderDone
	20, // 16: ntt.ai.v1.ProviderStreamEvent.tool_calls:type_name -> ntt.ai.v1.ToolCalls
	2,  // 17: ntt.ai.v1.ProviderDone.stop_reason:type_name -> ntt.ai.v1.ProviderDone_StopReason
	12, // 18: ntt.ai.v1.AzureConfig.search:type_name -> ntt.ai.v1.AzureSearchConfig
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { edgelq_ai_proto_v1_provider_types_proto_init() }
func edgelq_ai_proto_v1_provider_types_proto_init() {
	if edgelq_ai_proto_v1_provider_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_ai_proto_v1_provider_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_provider_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_provider_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_provider_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderContentDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_provider_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_provider_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderStreamEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_provider_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderDone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_provider_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenAIConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_provider_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_provider_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureSearchConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_provider_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnthropicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_provider_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeminiConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_ai_proto_v1_provider_types_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ProviderChatRequest_OpenaiConfig)(nil),
		(*ProviderChatRequest_AzureConfig)(nil),
		(*ProviderChatRequest_AnthropicConfig)(nil),
		(*ProviderChatRequest_GeminiConfig)(nil),
	}
	edgelq_ai_proto_v1_provider_types_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ProviderStreamEvent_Delta)(nil),
		(*ProviderStreamEvent_Usage)(nil),
		(*ProviderStreamEvent_Error)(nil),
		(*ProviderStreamEvent_Done)(nil),
		(*ProviderStreamEvent_ToolCalls)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_ai_proto_v1_provider_types_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_ai_proto_v1_provider_types_proto_goTypes,
		DependencyIndexes: edgelq_ai_proto_v1_provider_types_proto_depIdxs,
		EnumInfos:         edgelq_ai_proto_v1_provider_types_proto_enumTypes,
		MessageInfos:      edgelq_ai_proto_v1_provider_types_proto_msgTypes,
	}.Build()
	edgelq_ai_proto_v1_provider_types_proto = out.File
	edgelq_ai_proto_v1_provider_types_proto_rawDesc = nil
	edgelq_ai_proto_v1_provider_types_proto_goTypes = nil
	edgelq_ai_proto_v1_provider_types_proto_depIdxs = nil
}
