// Code generated by protoc-gen-goten-validate
// File: edgelq/ai/proto/v1/provider_types.proto
// DO NOT EDIT!!!

package provider_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	common_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/common"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &common_client.Message{}
)

func (obj *ProviderChatRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if obj.Model == "" {
		return gotenvalidate.NewValidationError("ProviderChatRequest", "model", obj.Model, "field is required", nil)
	}
	for idx, elem := range obj.Messages {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProviderChatRequest", "messages", obj.Messages[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.Tools {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProviderChatRequest", "tools", obj.Tools[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.Parameters).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ProviderChatRequest", "parameters", obj.Parameters, "nested object validation failed", err)
		}
	}
	switch opt := obj.ProviderConfig.(type) {
	case *ProviderChatRequest_OpenaiConfig:
		if subobj, ok := interface{}(opt.OpenaiConfig).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProviderChatRequest", "openaiConfig", opt.OpenaiConfig, "nested object validation failed", err)
			}
		}
	case *ProviderChatRequest_AzureConfig:
		if subobj, ok := interface{}(opt.AzureConfig).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProviderChatRequest", "azureConfig", opt.AzureConfig, "nested object validation failed", err)
			}
		}
	case *ProviderChatRequest_AnthropicConfig:
		if subobj, ok := interface{}(opt.AnthropicConfig).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProviderChatRequest", "anthropicConfig", opt.AnthropicConfig, "nested object validation failed", err)
			}
		}
	case *ProviderChatRequest_GeminiConfig:
		if subobj, ok := interface{}(opt.GeminiConfig).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProviderChatRequest", "geminiConfig", opt.GeminiConfig, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ChatParameters) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.ResponseFormat).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ChatParameters", "responseFormat", obj.ResponseFormat, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ResponseFormat) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ProviderContentDelta) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *StreamError) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *BlockEnd) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ProviderStreamEvent) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Event.(type) {
	case *ProviderStreamEvent_Delta:
		if subobj, ok := interface{}(opt.Delta).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProviderStreamEvent", "delta", opt.Delta, "nested object validation failed", err)
			}
		}
	case *ProviderStreamEvent_Usage:
		if subobj, ok := interface{}(opt.Usage).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProviderStreamEvent", "usage", opt.Usage, "nested object validation failed", err)
			}
		}
	case *ProviderStreamEvent_Error:
		if subobj, ok := interface{}(opt.Error).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProviderStreamEvent", "error", opt.Error, "nested object validation failed", err)
			}
		}
	case *ProviderStreamEvent_Done:
		if subobj, ok := interface{}(opt.Done).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProviderStreamEvent", "done", opt.Done, "nested object validation failed", err)
			}
		}
	case *ProviderStreamEvent_ToolCalls:
		if subobj, ok := interface{}(opt.ToolCalls).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProviderStreamEvent", "toolCalls", opt.ToolCalls, "nested object validation failed", err)
			}
		}
	case *ProviderStreamEvent_Citation:
		if subobj, ok := interface{}(opt.Citation).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProviderStreamEvent", "citation", opt.Citation, "nested object validation failed", err)
			}
		}
	case *ProviderStreamEvent_BlockEnd:
		if subobj, ok := interface{}(opt.BlockEnd).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProviderStreamEvent", "blockEnd", opt.BlockEnd, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ProviderDone) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *OpenAIConfig) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *AzureConfig) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Search).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("AzureConfig", "search", obj.Search, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *AzureSearchConfig) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *AnthropicConfig) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Thinking).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("AnthropicConfig", "thinking", obj.Thinking, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ThinkingConfig) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *GeminiConfig) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
