// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/provider_types.proto
// DO NOT EDIT!!!

package provider_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	common_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/common"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &common_client.Message{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProviderChatRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProviderChatRequest_FieldPathSelector
	Get(source *ProviderChatRequest) []interface{}
	GetSingle(source *ProviderChatRequest) (interface{}, bool)
	ClearValue(item *ProviderChatRequest)

	// Those methods build corresponding ProviderChatRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProviderChatRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ProviderChatRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProviderChatRequest_FieldPathArrayItemValue
}

type ProviderChatRequest_FieldPathSelector int32

const (
	ProviderChatRequest_FieldPathSelectorModel           ProviderChatRequest_FieldPathSelector = 0
	ProviderChatRequest_FieldPathSelectorMessages        ProviderChatRequest_FieldPathSelector = 1
	ProviderChatRequest_FieldPathSelectorTools           ProviderChatRequest_FieldPathSelector = 2
	ProviderChatRequest_FieldPathSelectorParameters      ProviderChatRequest_FieldPathSelector = 3
	ProviderChatRequest_FieldPathSelectorUser            ProviderChatRequest_FieldPathSelector = 4
	ProviderChatRequest_FieldPathSelectorMetadata        ProviderChatRequest_FieldPathSelector = 5
	ProviderChatRequest_FieldPathSelectorOpenaiConfig    ProviderChatRequest_FieldPathSelector = 6
	ProviderChatRequest_FieldPathSelectorAzureConfig     ProviderChatRequest_FieldPathSelector = 7
	ProviderChatRequest_FieldPathSelectorAnthropicConfig ProviderChatRequest_FieldPathSelector = 8
	ProviderChatRequest_FieldPathSelectorGeminiConfig    ProviderChatRequest_FieldPathSelector = 9
	ProviderChatRequest_FieldPathSelectorReasoningLevel  ProviderChatRequest_FieldPathSelector = 10
)

func (s ProviderChatRequest_FieldPathSelector) String() string {
	switch s {
	case ProviderChatRequest_FieldPathSelectorModel:
		return "model"
	case ProviderChatRequest_FieldPathSelectorMessages:
		return "messages"
	case ProviderChatRequest_FieldPathSelectorTools:
		return "tools"
	case ProviderChatRequest_FieldPathSelectorParameters:
		return "parameters"
	case ProviderChatRequest_FieldPathSelectorUser:
		return "user"
	case ProviderChatRequest_FieldPathSelectorMetadata:
		return "metadata"
	case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
		return "openai_config"
	case ProviderChatRequest_FieldPathSelectorAzureConfig:
		return "azure_config"
	case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
		return "anthropic_config"
	case ProviderChatRequest_FieldPathSelectorGeminiConfig:
		return "gemini_config"
	case ProviderChatRequest_FieldPathSelectorReasoningLevel:
		return "reasoning_level"
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", s))
	}
}

func BuildProviderChatRequest_FieldPath(fp gotenobject.RawFieldPath) (ProviderChatRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProviderChatRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "model":
			return &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorModel}, nil
		case "messages":
			return &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorMessages}, nil
		case "tools":
			return &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorTools}, nil
		case "parameters":
			return &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorParameters}, nil
		case "user":
			return &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorUser}, nil
		case "metadata":
			return &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorMetadata}, nil
		case "openai_config", "openaiConfig", "openai-config":
			return &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorOpenaiConfig}, nil
		case "azure_config", "azureConfig", "azure-config":
			return &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorAzureConfig}, nil
		case "anthropic_config", "anthropicConfig", "anthropic-config":
			return &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorAnthropicConfig}, nil
		case "gemini_config", "geminiConfig", "gemini-config":
			return &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorGeminiConfig}, nil
		case "reasoning_level", "reasoningLevel", "reasoning-level":
			return &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorReasoningLevel}, nil
		}
	} else {
		switch fp[0] {
		case "parameters":
			if subpath, err := BuildChatParameters_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProviderChatRequest_FieldSubPath{selector: ProviderChatRequest_FieldPathSelectorParameters, subPath: subpath}, nil
			}
		case "openai_config", "openaiConfig", "openai-config":
			if subpath, err := BuildOpenAIConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProviderChatRequest_FieldSubPath{selector: ProviderChatRequest_FieldPathSelectorOpenaiConfig, subPath: subpath}, nil
			}
		case "azure_config", "azureConfig", "azure-config":
			if subpath, err := BuildAzureConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProviderChatRequest_FieldSubPath{selector: ProviderChatRequest_FieldPathSelectorAzureConfig, subPath: subpath}, nil
			}
		case "anthropic_config", "anthropicConfig", "anthropic-config":
			if subpath, err := BuildAnthropicConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProviderChatRequest_FieldSubPath{selector: ProviderChatRequest_FieldPathSelectorAnthropicConfig, subPath: subpath}, nil
			}
		case "gemini_config", "geminiConfig", "gemini-config":
			if subpath, err := BuildGeminiConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProviderChatRequest_FieldSubPath{selector: ProviderChatRequest_FieldPathSelectorGeminiConfig, subPath: subpath}, nil
			}
		case "metadata":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object ProviderChatRequest)", fp)
			}
			return &ProviderChatRequest_FieldPathMap{selector: ProviderChatRequest_FieldPathSelectorMetadata, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProviderChatRequest", fp)
}

func ParseProviderChatRequest_FieldPath(rawField string) (ProviderChatRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProviderChatRequest_FieldPath(fp)
}

func MustParseProviderChatRequest_FieldPath(rawField string) ProviderChatRequest_FieldPath {
	fp, err := ParseProviderChatRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProviderChatRequest_FieldTerminalPath struct {
	selector ProviderChatRequest_FieldPathSelector
}

var _ ProviderChatRequest_FieldPath = (*ProviderChatRequest_FieldTerminalPath)(nil)

func (fp *ProviderChatRequest_FieldTerminalPath) Selector() ProviderChatRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProviderChatRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProviderChatRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProviderChatRequest
func (fp *ProviderChatRequest_FieldTerminalPath) Get(source *ProviderChatRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProviderChatRequest_FieldPathSelectorModel:
			values = append(values, source.Model)
		case ProviderChatRequest_FieldPathSelectorMessages:
			for _, value := range source.GetMessages() {
				values = append(values, value)
			}
		case ProviderChatRequest_FieldPathSelectorTools:
			for _, value := range source.GetTools() {
				values = append(values, value)
			}
		case ProviderChatRequest_FieldPathSelectorParameters:
			if source.Parameters != nil {
				values = append(values, source.Parameters)
			}
		case ProviderChatRequest_FieldPathSelectorUser:
			values = append(values, source.User)
		case ProviderChatRequest_FieldPathSelectorMetadata:
			values = append(values, source.Metadata)
		case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
			if source, ok := source.ProviderConfig.(*ProviderChatRequest_OpenaiConfig); ok && source != nil {
				if source.OpenaiConfig != nil {
					values = append(values, source.OpenaiConfig)
				}
			}
		case ProviderChatRequest_FieldPathSelectorAzureConfig:
			if source, ok := source.ProviderConfig.(*ProviderChatRequest_AzureConfig); ok && source != nil {
				if source.AzureConfig != nil {
					values = append(values, source.AzureConfig)
				}
			}
		case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
			if source, ok := source.ProviderConfig.(*ProviderChatRequest_AnthropicConfig); ok && source != nil {
				if source.AnthropicConfig != nil {
					values = append(values, source.AnthropicConfig)
				}
			}
		case ProviderChatRequest_FieldPathSelectorGeminiConfig:
			if source, ok := source.ProviderConfig.(*ProviderChatRequest_GeminiConfig); ok && source != nil {
				if source.GeminiConfig != nil {
					values = append(values, source.GeminiConfig)
				}
			}
		case ProviderChatRequest_FieldPathSelectorReasoningLevel:
			values = append(values, source.ReasoningLevel)
		default:
			panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ProviderChatRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProviderChatRequest))
}

// GetSingle returns value pointed by specific field of from source ProviderChatRequest
func (fp *ProviderChatRequest_FieldTerminalPath) GetSingle(source *ProviderChatRequest) (interface{}, bool) {
	switch fp.selector {
	case ProviderChatRequest_FieldPathSelectorModel:
		return source.GetModel(), source != nil
	case ProviderChatRequest_FieldPathSelectorMessages:
		res := source.GetMessages()
		return res, res != nil
	case ProviderChatRequest_FieldPathSelectorTools:
		res := source.GetTools()
		return res, res != nil
	case ProviderChatRequest_FieldPathSelectorParameters:
		res := source.GetParameters()
		return res, res != nil
	case ProviderChatRequest_FieldPathSelectorUser:
		return source.GetUser(), source != nil
	case ProviderChatRequest_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetOpenaiConfig(), false
		}
		_, oneOfSelected := source.ProviderConfig.(*ProviderChatRequest_OpenaiConfig)
		if !oneOfSelected {
			return source.GetOpenaiConfig(), false // to return "type" information
		}
		res := source.GetOpenaiConfig()
		return res, res != nil
	case ProviderChatRequest_FieldPathSelectorAzureConfig:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetAzureConfig(), false
		}
		_, oneOfSelected := source.ProviderConfig.(*ProviderChatRequest_AzureConfig)
		if !oneOfSelected {
			return source.GetAzureConfig(), false // to return "type" information
		}
		res := source.GetAzureConfig()
		return res, res != nil
	case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetAnthropicConfig(), false
		}
		_, oneOfSelected := source.ProviderConfig.(*ProviderChatRequest_AnthropicConfig)
		if !oneOfSelected {
			return source.GetAnthropicConfig(), false // to return "type" information
		}
		res := source.GetAnthropicConfig()
		return res, res != nil
	case ProviderChatRequest_FieldPathSelectorGeminiConfig:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetGeminiConfig(), false
		}
		_, oneOfSelected := source.ProviderConfig.(*ProviderChatRequest_GeminiConfig)
		if !oneOfSelected {
			return source.GetGeminiConfig(), false // to return "type" information
		}
		res := source.GetGeminiConfig()
		return res, res != nil
	case ProviderChatRequest_FieldPathSelectorReasoningLevel:
		return source.GetReasoningLevel(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fp.selector))
	}
}

func (fp *ProviderChatRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProviderChatRequest))
}

// GetDefault returns a default value of the field type
func (fp *ProviderChatRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProviderChatRequest_FieldPathSelectorModel:
		return ""
	case ProviderChatRequest_FieldPathSelectorMessages:
		return ([]*common_client.Message)(nil)
	case ProviderChatRequest_FieldPathSelectorTools:
		return ([]*common_client.ToolDefinition)(nil)
	case ProviderChatRequest_FieldPathSelectorParameters:
		return (*ChatParameters)(nil)
	case ProviderChatRequest_FieldPathSelectorUser:
		return ""
	case ProviderChatRequest_FieldPathSelectorMetadata:
		return (map[string]string)(nil)
	case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
		return (*OpenAIConfig)(nil)
	case ProviderChatRequest_FieldPathSelectorAzureConfig:
		return (*AzureConfig)(nil)
	case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
		return (*AnthropicConfig)(nil)
	case ProviderChatRequest_FieldPathSelectorGeminiConfig:
		return (*GeminiConfig)(nil)
	case ProviderChatRequest_FieldPathSelectorReasoningLevel:
		return common_client.ReasoningLevel_REASONING_LEVEL_DEFAULT
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fp.selector))
	}
}

func (fp *ProviderChatRequest_FieldTerminalPath) ClearValue(item *ProviderChatRequest) {
	if item != nil {
		switch fp.selector {
		case ProviderChatRequest_FieldPathSelectorModel:
			item.Model = ""
		case ProviderChatRequest_FieldPathSelectorMessages:
			item.Messages = nil
		case ProviderChatRequest_FieldPathSelectorTools:
			item.Tools = nil
		case ProviderChatRequest_FieldPathSelectorParameters:
			item.Parameters = nil
		case ProviderChatRequest_FieldPathSelectorUser:
			item.User = ""
		case ProviderChatRequest_FieldPathSelectorMetadata:
			item.Metadata = nil
		case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
			if item, ok := item.ProviderConfig.(*ProviderChatRequest_OpenaiConfig); ok {
				item.OpenaiConfig = nil
			}
		case ProviderChatRequest_FieldPathSelectorAzureConfig:
			if item, ok := item.ProviderConfig.(*ProviderChatRequest_AzureConfig); ok {
				item.AzureConfig = nil
			}
		case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
			if item, ok := item.ProviderConfig.(*ProviderChatRequest_AnthropicConfig); ok {
				item.AnthropicConfig = nil
			}
		case ProviderChatRequest_FieldPathSelectorGeminiConfig:
			if item, ok := item.ProviderConfig.(*ProviderChatRequest_GeminiConfig); ok {
				item.GeminiConfig = nil
			}
		case ProviderChatRequest_FieldPathSelectorReasoningLevel:
			item.ReasoningLevel = common_client.ReasoningLevel_REASONING_LEVEL_DEFAULT
		default:
			panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fp.selector))
		}
	}
}

func (fp *ProviderChatRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProviderChatRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProviderChatRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProviderChatRequest_FieldPathSelectorModel ||
		fp.selector == ProviderChatRequest_FieldPathSelectorMessages ||
		fp.selector == ProviderChatRequest_FieldPathSelectorTools ||
		fp.selector == ProviderChatRequest_FieldPathSelectorUser ||
		fp.selector == ProviderChatRequest_FieldPathSelectorMetadata ||
		fp.selector == ProviderChatRequest_FieldPathSelectorReasoningLevel
}

func (fp *ProviderChatRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProviderChatRequest_FieldTerminalPath) WithIValue(value interface{}) ProviderChatRequest_FieldPathValue {
	switch fp.selector {
	case ProviderChatRequest_FieldPathSelectorModel:
		return &ProviderChatRequest_FieldTerminalPathValue{ProviderChatRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ProviderChatRequest_FieldPathSelectorMessages:
		return &ProviderChatRequest_FieldTerminalPathValue{ProviderChatRequest_FieldTerminalPath: *fp, value: value.([]*common_client.Message)}
	case ProviderChatRequest_FieldPathSelectorTools:
		return &ProviderChatRequest_FieldTerminalPathValue{ProviderChatRequest_FieldTerminalPath: *fp, value: value.([]*common_client.ToolDefinition)}
	case ProviderChatRequest_FieldPathSelectorParameters:
		return &ProviderChatRequest_FieldTerminalPathValue{ProviderChatRequest_FieldTerminalPath: *fp, value: value.(*ChatParameters)}
	case ProviderChatRequest_FieldPathSelectorUser:
		return &ProviderChatRequest_FieldTerminalPathValue{ProviderChatRequest_FieldTerminalPath: *fp, value: value.(string)}
	case ProviderChatRequest_FieldPathSelectorMetadata:
		return &ProviderChatRequest_FieldTerminalPathValue{ProviderChatRequest_FieldTerminalPath: *fp, value: value.(map[string]string)}
	case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
		return &ProviderChatRequest_FieldTerminalPathValue{ProviderChatRequest_FieldTerminalPath: *fp, value: value.(*OpenAIConfig)}
	case ProviderChatRequest_FieldPathSelectorAzureConfig:
		return &ProviderChatRequest_FieldTerminalPathValue{ProviderChatRequest_FieldTerminalPath: *fp, value: value.(*AzureConfig)}
	case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
		return &ProviderChatRequest_FieldTerminalPathValue{ProviderChatRequest_FieldTerminalPath: *fp, value: value.(*AnthropicConfig)}
	case ProviderChatRequest_FieldPathSelectorGeminiConfig:
		return &ProviderChatRequest_FieldTerminalPathValue{ProviderChatRequest_FieldTerminalPath: *fp, value: value.(*GeminiConfig)}
	case ProviderChatRequest_FieldPathSelectorReasoningLevel:
		return &ProviderChatRequest_FieldTerminalPathValue{ProviderChatRequest_FieldTerminalPath: *fp, value: value.(common_client.ReasoningLevel)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fp.selector))
	}
}

func (fp *ProviderChatRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProviderChatRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProviderChatRequest_FieldPathArrayOfValues {
	fpaov := &ProviderChatRequest_FieldTerminalPathArrayOfValues{ProviderChatRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProviderChatRequest_FieldPathSelectorModel:
		return &ProviderChatRequest_FieldTerminalPathArrayOfValues{ProviderChatRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ProviderChatRequest_FieldPathSelectorMessages:
		return &ProviderChatRequest_FieldTerminalPathArrayOfValues{ProviderChatRequest_FieldTerminalPath: *fp, values: values.([][]*common_client.Message)}
	case ProviderChatRequest_FieldPathSelectorTools:
		return &ProviderChatRequest_FieldTerminalPathArrayOfValues{ProviderChatRequest_FieldTerminalPath: *fp, values: values.([][]*common_client.ToolDefinition)}
	case ProviderChatRequest_FieldPathSelectorParameters:
		return &ProviderChatRequest_FieldTerminalPathArrayOfValues{ProviderChatRequest_FieldTerminalPath: *fp, values: values.([]*ChatParameters)}
	case ProviderChatRequest_FieldPathSelectorUser:
		return &ProviderChatRequest_FieldTerminalPathArrayOfValues{ProviderChatRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case ProviderChatRequest_FieldPathSelectorMetadata:
		return &ProviderChatRequest_FieldTerminalPathArrayOfValues{ProviderChatRequest_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
		return &ProviderChatRequest_FieldTerminalPathArrayOfValues{ProviderChatRequest_FieldTerminalPath: *fp, values: values.([]*OpenAIConfig)}
	case ProviderChatRequest_FieldPathSelectorAzureConfig:
		return &ProviderChatRequest_FieldTerminalPathArrayOfValues{ProviderChatRequest_FieldTerminalPath: *fp, values: values.([]*AzureConfig)}
	case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
		return &ProviderChatRequest_FieldTerminalPathArrayOfValues{ProviderChatRequest_FieldTerminalPath: *fp, values: values.([]*AnthropicConfig)}
	case ProviderChatRequest_FieldPathSelectorGeminiConfig:
		return &ProviderChatRequest_FieldTerminalPathArrayOfValues{ProviderChatRequest_FieldTerminalPath: *fp, values: values.([]*GeminiConfig)}
	case ProviderChatRequest_FieldPathSelectorReasoningLevel:
		return &ProviderChatRequest_FieldTerminalPathArrayOfValues{ProviderChatRequest_FieldTerminalPath: *fp, values: values.([]common_client.ReasoningLevel)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProviderChatRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProviderChatRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProviderChatRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case ProviderChatRequest_FieldPathSelectorMessages:
		return &ProviderChatRequest_FieldTerminalPathArrayItemValue{ProviderChatRequest_FieldTerminalPath: *fp, value: value.(*common_client.Message)}
	case ProviderChatRequest_FieldPathSelectorTools:
		return &ProviderChatRequest_FieldTerminalPathArrayItemValue{ProviderChatRequest_FieldTerminalPath: *fp, value: value.(*common_client.ToolDefinition)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fp.selector))
	}
}

func (fp *ProviderChatRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type ProviderChatRequest_FieldPathMap struct {
	key      string
	selector ProviderChatRequest_FieldPathSelector
}

var _ ProviderChatRequest_FieldPath = (*ProviderChatRequest_FieldPathMap)(nil)

func (fpm *ProviderChatRequest_FieldPathMap) Selector() ProviderChatRequest_FieldPathSelector {
	return fpm.selector
}

func (fpm *ProviderChatRequest_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *ProviderChatRequest_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *ProviderChatRequest_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source ProviderChatRequest
func (fpm *ProviderChatRequest_FieldPathMap) Get(source *ProviderChatRequest) (values []interface{}) {
	switch fpm.selector {
	case ProviderChatRequest_FieldPathSelectorMetadata:
		if value, ok := source.GetMetadata()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fpm.selector))
	}
	return
}

func (fpm *ProviderChatRequest_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*ProviderChatRequest))
}

// GetSingle returns value by selected field map key from source ProviderChatRequest
func (fpm *ProviderChatRequest_FieldPathMap) GetSingle(source *ProviderChatRequest) (interface{}, bool) {
	switch fpm.selector {
	case ProviderChatRequest_FieldPathSelectorMetadata:
		res, ok := source.GetMetadata()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fpm.selector))
	}
}

func (fpm *ProviderChatRequest_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*ProviderChatRequest))
}

// GetDefault returns a default value of the field type
func (fpm *ProviderChatRequest_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case ProviderChatRequest_FieldPathSelectorMetadata:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fpm.selector))
	}
}

func (fpm *ProviderChatRequest_FieldPathMap) ClearValue(item *ProviderChatRequest) {
	if item != nil {
		switch fpm.selector {
		case ProviderChatRequest_FieldPathSelectorMetadata:
			delete(item.Metadata, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fpm.selector))
		}
	}
}

func (fpm *ProviderChatRequest_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*ProviderChatRequest))
}

// IsLeaf - whether field path is holds simple value
func (fpm *ProviderChatRequest_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case ProviderChatRequest_FieldPathSelectorMetadata:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fpm.selector))
	}
}

func (fpm *ProviderChatRequest_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *ProviderChatRequest_FieldPathMap) WithIValue(value interface{}) ProviderChatRequest_FieldPathValue {
	switch fpm.selector {
	case ProviderChatRequest_FieldPathSelectorMetadata:
		return &ProviderChatRequest_FieldPathMapValue{ProviderChatRequest_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fpm.selector))
	}
}

func (fpm *ProviderChatRequest_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *ProviderChatRequest_FieldPathMap) WithIArrayOfValues(values interface{}) ProviderChatRequest_FieldPathArrayOfValues {
	switch fpm.selector {
	case ProviderChatRequest_FieldPathSelectorMetadata:
		return &ProviderChatRequest_FieldPathMapArrayOfValues{ProviderChatRequest_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fpm.selector))
	}
}

func (fpm *ProviderChatRequest_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *ProviderChatRequest_FieldPathMap) WithIArrayItemValue(value interface{}) ProviderChatRequest_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *ProviderChatRequest_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type ProviderChatRequest_FieldSubPath struct {
	selector ProviderChatRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProviderChatRequest_FieldPath = (*ProviderChatRequest_FieldSubPath)(nil)

func (fps *ProviderChatRequest_FieldSubPath) Selector() ProviderChatRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ProviderChatRequest_FieldSubPath) AsParametersSubPath() (ChatParameters_FieldPath, bool) {
	res, ok := fps.subPath.(ChatParameters_FieldPath)
	return res, ok
}
func (fps *ProviderChatRequest_FieldSubPath) AsOpenaiConfigSubPath() (OpenAIConfig_FieldPath, bool) {
	res, ok := fps.subPath.(OpenAIConfig_FieldPath)
	return res, ok
}
func (fps *ProviderChatRequest_FieldSubPath) AsAzureConfigSubPath() (AzureConfig_FieldPath, bool) {
	res, ok := fps.subPath.(AzureConfig_FieldPath)
	return res, ok
}
func (fps *ProviderChatRequest_FieldSubPath) AsAnthropicConfigSubPath() (AnthropicConfig_FieldPath, bool) {
	res, ok := fps.subPath.(AnthropicConfig_FieldPath)
	return res, ok
}
func (fps *ProviderChatRequest_FieldSubPath) AsGeminiConfigSubPath() (GeminiConfig_FieldPath, bool) {
	res, ok := fps.subPath.(GeminiConfig_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProviderChatRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProviderChatRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProviderChatRequest
func (fps *ProviderChatRequest_FieldSubPath) Get(source *ProviderChatRequest) (values []interface{}) {
	switch fps.selector {
	case ProviderChatRequest_FieldPathSelectorParameters:
		values = append(values, fps.subPath.GetRaw(source.GetParameters())...)
	case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
		values = append(values, fps.subPath.GetRaw(source.GetOpenaiConfig())...)
	case ProviderChatRequest_FieldPathSelectorAzureConfig:
		values = append(values, fps.subPath.GetRaw(source.GetAzureConfig())...)
	case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
		values = append(values, fps.subPath.GetRaw(source.GetAnthropicConfig())...)
	case ProviderChatRequest_FieldPathSelectorGeminiConfig:
		values = append(values, fps.subPath.GetRaw(source.GetGeminiConfig())...)
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fps.selector))
	}
	return
}

func (fps *ProviderChatRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProviderChatRequest))
}

// GetSingle returns value of selected field from source ProviderChatRequest
func (fps *ProviderChatRequest_FieldSubPath) GetSingle(source *ProviderChatRequest) (interface{}, bool) {
	switch fps.selector {
	case ProviderChatRequest_FieldPathSelectorParameters:
		if source.GetParameters() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetParameters())
	case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
		if source.GetOpenaiConfig() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOpenaiConfig())
	case ProviderChatRequest_FieldPathSelectorAzureConfig:
		if source.GetAzureConfig() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAzureConfig())
	case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
		if source.GetAnthropicConfig() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAnthropicConfig())
	case ProviderChatRequest_FieldPathSelectorGeminiConfig:
		if source.GetGeminiConfig() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGeminiConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fps.selector))
	}
}

func (fps *ProviderChatRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProviderChatRequest))
}

// GetDefault returns a default value of the field type
func (fps *ProviderChatRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProviderChatRequest_FieldSubPath) ClearValue(item *ProviderChatRequest) {
	if item != nil {
		switch fps.selector {
		case ProviderChatRequest_FieldPathSelectorParameters:
			fps.subPath.ClearValueRaw(item.Parameters)
		case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
			if item.ProviderConfig != nil {
				if item, ok := item.ProviderConfig.(*ProviderChatRequest_OpenaiConfig); ok {
					fps.subPath.ClearValueRaw(item.OpenaiConfig)
				}
			}
		case ProviderChatRequest_FieldPathSelectorAzureConfig:
			if item.ProviderConfig != nil {
				if item, ok := item.ProviderConfig.(*ProviderChatRequest_AzureConfig); ok {
					fps.subPath.ClearValueRaw(item.AzureConfig)
				}
			}
		case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
			if item.ProviderConfig != nil {
				if item, ok := item.ProviderConfig.(*ProviderChatRequest_AnthropicConfig); ok {
					fps.subPath.ClearValueRaw(item.AnthropicConfig)
				}
			}
		case ProviderChatRequest_FieldPathSelectorGeminiConfig:
			if item.ProviderConfig != nil {
				if item, ok := item.ProviderConfig.(*ProviderChatRequest_GeminiConfig); ok {
					fps.subPath.ClearValueRaw(item.GeminiConfig)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fps.selector))
		}
	}
}

func (fps *ProviderChatRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProviderChatRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProviderChatRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProviderChatRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProviderChatRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProviderChatRequest_FieldSubPath) WithIValue(value interface{}) ProviderChatRequest_FieldPathValue {
	return &ProviderChatRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProviderChatRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProviderChatRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ProviderChatRequest_FieldPathArrayOfValues {
	return &ProviderChatRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProviderChatRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProviderChatRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ProviderChatRequest_FieldPathArrayItemValue {
	return &ProviderChatRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProviderChatRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProviderChatRequest_FieldPathValue allows storing values for ProviderChatRequest fields according to their type
type ProviderChatRequest_FieldPathValue interface {
	ProviderChatRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProviderChatRequest)
	CompareWith(*ProviderChatRequest) (cmp int, comparable bool)
}

func ParseProviderChatRequest_FieldPathValue(pathStr, valueStr string) (ProviderChatRequest_FieldPathValue, error) {
	fp, err := ParseProviderChatRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProviderChatRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProviderChatRequest_FieldPathValue), nil
}

func MustParseProviderChatRequest_FieldPathValue(pathStr, valueStr string) ProviderChatRequest_FieldPathValue {
	fpv, err := ParseProviderChatRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProviderChatRequest_FieldTerminalPathValue struct {
	ProviderChatRequest_FieldTerminalPath
	value interface{}
}

var _ ProviderChatRequest_FieldPathValue = (*ProviderChatRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProviderChatRequest' as interface{}
func (fpv *ProviderChatRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProviderChatRequest_FieldTerminalPathValue) AsModelValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProviderChatRequest_FieldTerminalPathValue) AsMessagesValue() ([]*common_client.Message, bool) {
	res, ok := fpv.value.([]*common_client.Message)
	return res, ok
}
func (fpv *ProviderChatRequest_FieldTerminalPathValue) AsToolsValue() ([]*common_client.ToolDefinition, bool) {
	res, ok := fpv.value.([]*common_client.ToolDefinition)
	return res, ok
}
func (fpv *ProviderChatRequest_FieldTerminalPathValue) AsParametersValue() (*ChatParameters, bool) {
	res, ok := fpv.value.(*ChatParameters)
	return res, ok
}
func (fpv *ProviderChatRequest_FieldTerminalPathValue) AsUserValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProviderChatRequest_FieldTerminalPathValue) AsMetadataValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}
func (fpv *ProviderChatRequest_FieldTerminalPathValue) AsOpenaiConfigValue() (*OpenAIConfig, bool) {
	res, ok := fpv.value.(*OpenAIConfig)
	return res, ok
}
func (fpv *ProviderChatRequest_FieldTerminalPathValue) AsAzureConfigValue() (*AzureConfig, bool) {
	res, ok := fpv.value.(*AzureConfig)
	return res, ok
}
func (fpv *ProviderChatRequest_FieldTerminalPathValue) AsAnthropicConfigValue() (*AnthropicConfig, bool) {
	res, ok := fpv.value.(*AnthropicConfig)
	return res, ok
}
func (fpv *ProviderChatRequest_FieldTerminalPathValue) AsGeminiConfigValue() (*GeminiConfig, bool) {
	res, ok := fpv.value.(*GeminiConfig)
	return res, ok
}
func (fpv *ProviderChatRequest_FieldTerminalPathValue) AsReasoningLevelValue() (common_client.ReasoningLevel, bool) {
	res, ok := fpv.value.(common_client.ReasoningLevel)
	return res, ok
}

// SetTo stores value for selected field for object ProviderChatRequest
func (fpv *ProviderChatRequest_FieldTerminalPathValue) SetTo(target **ProviderChatRequest) {
	if *target == nil {
		*target = new(ProviderChatRequest)
	}
	switch fpv.selector {
	case ProviderChatRequest_FieldPathSelectorModel:
		(*target).Model = fpv.value.(string)
	case ProviderChatRequest_FieldPathSelectorMessages:
		(*target).Messages = fpv.value.([]*common_client.Message)
	case ProviderChatRequest_FieldPathSelectorTools:
		(*target).Tools = fpv.value.([]*common_client.ToolDefinition)
	case ProviderChatRequest_FieldPathSelectorParameters:
		(*target).Parameters = fpv.value.(*ChatParameters)
	case ProviderChatRequest_FieldPathSelectorUser:
		(*target).User = fpv.value.(string)
	case ProviderChatRequest_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(map[string]string)
	case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
		if _, ok := (*target).ProviderConfig.(*ProviderChatRequest_OpenaiConfig); !ok {
			(*target).ProviderConfig = &ProviderChatRequest_OpenaiConfig{}
		}
		(*target).ProviderConfig.(*ProviderChatRequest_OpenaiConfig).OpenaiConfig = fpv.value.(*OpenAIConfig)
	case ProviderChatRequest_FieldPathSelectorAzureConfig:
		if _, ok := (*target).ProviderConfig.(*ProviderChatRequest_AzureConfig); !ok {
			(*target).ProviderConfig = &ProviderChatRequest_AzureConfig{}
		}
		(*target).ProviderConfig.(*ProviderChatRequest_AzureConfig).AzureConfig = fpv.value.(*AzureConfig)
	case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
		if _, ok := (*target).ProviderConfig.(*ProviderChatRequest_AnthropicConfig); !ok {
			(*target).ProviderConfig = &ProviderChatRequest_AnthropicConfig{}
		}
		(*target).ProviderConfig.(*ProviderChatRequest_AnthropicConfig).AnthropicConfig = fpv.value.(*AnthropicConfig)
	case ProviderChatRequest_FieldPathSelectorGeminiConfig:
		if _, ok := (*target).ProviderConfig.(*ProviderChatRequest_GeminiConfig); !ok {
			(*target).ProviderConfig = &ProviderChatRequest_GeminiConfig{}
		}
		(*target).ProviderConfig.(*ProviderChatRequest_GeminiConfig).GeminiConfig = fpv.value.(*GeminiConfig)
	case ProviderChatRequest_FieldPathSelectorReasoningLevel:
		(*target).ReasoningLevel = fpv.value.(common_client.ReasoningLevel)
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fpv.selector))
	}
}

func (fpv *ProviderChatRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProviderChatRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProviderChatRequest_FieldTerminalPathValue' with the value under path in 'ProviderChatRequest'.
func (fpv *ProviderChatRequest_FieldTerminalPathValue) CompareWith(source *ProviderChatRequest) (int, bool) {
	switch fpv.selector {
	case ProviderChatRequest_FieldPathSelectorModel:
		leftValue := fpv.value.(string)
		rightValue := source.GetModel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProviderChatRequest_FieldPathSelectorMessages:
		return 0, false
	case ProviderChatRequest_FieldPathSelectorTools:
		return 0, false
	case ProviderChatRequest_FieldPathSelectorParameters:
		return 0, false
	case ProviderChatRequest_FieldPathSelectorUser:
		leftValue := fpv.value.(string)
		rightValue := source.GetUser()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProviderChatRequest_FieldPathSelectorMetadata:
		return 0, false
	case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
		return 0, false
	case ProviderChatRequest_FieldPathSelectorAzureConfig:
		return 0, false
	case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
		return 0, false
	case ProviderChatRequest_FieldPathSelectorGeminiConfig:
		return 0, false
	case ProviderChatRequest_FieldPathSelectorReasoningLevel:
		leftValue := fpv.value.(common_client.ReasoningLevel)
		rightValue := source.GetReasoningLevel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fpv.selector))
	}
}

func (fpv *ProviderChatRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProviderChatRequest))
}

type ProviderChatRequest_FieldPathMapValue struct {
	ProviderChatRequest_FieldPathMap
	value interface{}
}

var _ ProviderChatRequest_FieldPathValue = (*ProviderChatRequest_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in ProviderChatRequest as interface{}
func (fpmv *ProviderChatRequest_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *ProviderChatRequest_FieldPathMapValue) AsMetadataElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in ProviderChatRequest
func (fpmv *ProviderChatRequest_FieldPathMapValue) SetTo(target **ProviderChatRequest) {
	if *target == nil {
		*target = new(ProviderChatRequest)
	}
	switch fpmv.selector {
	case ProviderChatRequest_FieldPathSelectorMetadata:
		if (*target).Metadata == nil {
			(*target).Metadata = make(map[string]string)
		}
		(*target).Metadata[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fpmv.selector))
	}
}

func (fpmv *ProviderChatRequest_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProviderChatRequest)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProviderChatRequest_FieldPathMapValue' with the value under path in 'ProviderChatRequest'.
func (fpmv *ProviderChatRequest_FieldPathMapValue) CompareWith(source *ProviderChatRequest) (int, bool) {
	switch fpmv.selector {
	case ProviderChatRequest_FieldPathSelectorMetadata:
		leftValue := fpmv.value.(string)
		rightValue := source.GetMetadata()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fpmv.selector))
	}
}

func (fpmv *ProviderChatRequest_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*ProviderChatRequest))
}

type ProviderChatRequest_FieldSubPathValue struct {
	ProviderChatRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProviderChatRequest_FieldPathValue = (*ProviderChatRequest_FieldSubPathValue)(nil)

func (fpvs *ProviderChatRequest_FieldSubPathValue) AsParametersPathValue() (ChatParameters_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ChatParameters_FieldPathValue)
	return res, ok
}
func (fpvs *ProviderChatRequest_FieldSubPathValue) AsOpenaiConfigPathValue() (OpenAIConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(OpenAIConfig_FieldPathValue)
	return res, ok
}
func (fpvs *ProviderChatRequest_FieldSubPathValue) AsAzureConfigPathValue() (AzureConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AzureConfig_FieldPathValue)
	return res, ok
}
func (fpvs *ProviderChatRequest_FieldSubPathValue) AsAnthropicConfigPathValue() (AnthropicConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AnthropicConfig_FieldPathValue)
	return res, ok
}
func (fpvs *ProviderChatRequest_FieldSubPathValue) AsGeminiConfigPathValue() (GeminiConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(GeminiConfig_FieldPathValue)
	return res, ok
}

func (fpvs *ProviderChatRequest_FieldSubPathValue) SetTo(target **ProviderChatRequest) {
	if *target == nil {
		*target = new(ProviderChatRequest)
	}
	switch fpvs.Selector() {
	case ProviderChatRequest_FieldPathSelectorParameters:
		fpvs.subPathValue.(ChatParameters_FieldPathValue).SetTo(&(*target).Parameters)
	case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
		if _, ok := (*target).ProviderConfig.(*ProviderChatRequest_OpenaiConfig); !ok {
			(*target).ProviderConfig = &ProviderChatRequest_OpenaiConfig{}
		}
		fpvs.subPathValue.(OpenAIConfig_FieldPathValue).SetTo(&(*target).ProviderConfig.(*ProviderChatRequest_OpenaiConfig).OpenaiConfig)
	case ProviderChatRequest_FieldPathSelectorAzureConfig:
		if _, ok := (*target).ProviderConfig.(*ProviderChatRequest_AzureConfig); !ok {
			(*target).ProviderConfig = &ProviderChatRequest_AzureConfig{}
		}
		fpvs.subPathValue.(AzureConfig_FieldPathValue).SetTo(&(*target).ProviderConfig.(*ProviderChatRequest_AzureConfig).AzureConfig)
	case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
		if _, ok := (*target).ProviderConfig.(*ProviderChatRequest_AnthropicConfig); !ok {
			(*target).ProviderConfig = &ProviderChatRequest_AnthropicConfig{}
		}
		fpvs.subPathValue.(AnthropicConfig_FieldPathValue).SetTo(&(*target).ProviderConfig.(*ProviderChatRequest_AnthropicConfig).AnthropicConfig)
	case ProviderChatRequest_FieldPathSelectorGeminiConfig:
		if _, ok := (*target).ProviderConfig.(*ProviderChatRequest_GeminiConfig); !ok {
			(*target).ProviderConfig = &ProviderChatRequest_GeminiConfig{}
		}
		fpvs.subPathValue.(GeminiConfig_FieldPathValue).SetTo(&(*target).ProviderConfig.(*ProviderChatRequest_GeminiConfig).GeminiConfig)
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ProviderChatRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProviderChatRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProviderChatRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProviderChatRequest_FieldSubPathValue) CompareWith(source *ProviderChatRequest) (int, bool) {
	switch fpvs.Selector() {
	case ProviderChatRequest_FieldPathSelectorParameters:
		return fpvs.subPathValue.(ChatParameters_FieldPathValue).CompareWith(source.GetParameters())
	case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
		return fpvs.subPathValue.(OpenAIConfig_FieldPathValue).CompareWith(source.GetOpenaiConfig())
	case ProviderChatRequest_FieldPathSelectorAzureConfig:
		return fpvs.subPathValue.(AzureConfig_FieldPathValue).CompareWith(source.GetAzureConfig())
	case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
		return fpvs.subPathValue.(AnthropicConfig_FieldPathValue).CompareWith(source.GetAnthropicConfig())
	case ProviderChatRequest_FieldPathSelectorGeminiConfig:
		return fpvs.subPathValue.(GeminiConfig_FieldPathValue).CompareWith(source.GetGeminiConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ProviderChatRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProviderChatRequest))
}

// ProviderChatRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ProviderChatRequest according to their type
// Present only for array (repeated) types.
type ProviderChatRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProviderChatRequest_FieldPath
	ContainsValue(*ProviderChatRequest) bool
}

// ParseProviderChatRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProviderChatRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ProviderChatRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseProviderChatRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProviderChatRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProviderChatRequest_FieldPathArrayItemValue), nil
}

func MustParseProviderChatRequest_FieldPathArrayItemValue(pathStr, valueStr string) ProviderChatRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseProviderChatRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProviderChatRequest_FieldTerminalPathArrayItemValue struct {
	ProviderChatRequest_FieldTerminalPath
	value interface{}
}

var _ ProviderChatRequest_FieldPathArrayItemValue = (*ProviderChatRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProviderChatRequest as interface{}
func (fpaiv *ProviderChatRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ProviderChatRequest_FieldTerminalPathArrayItemValue) AsMessagesItemValue() (*common_client.Message, bool) {
	res, ok := fpaiv.value.(*common_client.Message)
	return res, ok
}
func (fpaiv *ProviderChatRequest_FieldTerminalPathArrayItemValue) AsToolsItemValue() (*common_client.ToolDefinition, bool) {
	res, ok := fpaiv.value.(*common_client.ToolDefinition)
	return res, ok
}

func (fpaiv *ProviderChatRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ProviderChatRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProviderChatRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProviderChatRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProviderChatRequest'
func (fpaiv *ProviderChatRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ProviderChatRequest) bool {
	slice := fpaiv.ProviderChatRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProviderChatRequest_FieldSubPathArrayItemValue struct {
	ProviderChatRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProviderChatRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProviderChatRequest_FieldSubPathArrayItemValue) AsParametersPathItemValue() (ChatParameters_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ChatParameters_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProviderChatRequest_FieldSubPathArrayItemValue) AsOpenaiConfigPathItemValue() (OpenAIConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(OpenAIConfig_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProviderChatRequest_FieldSubPathArrayItemValue) AsAzureConfigPathItemValue() (AzureConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AzureConfig_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProviderChatRequest_FieldSubPathArrayItemValue) AsAnthropicConfigPathItemValue() (AnthropicConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AnthropicConfig_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProviderChatRequest_FieldSubPathArrayItemValue) AsGeminiConfigPathItemValue() (GeminiConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(GeminiConfig_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProviderChatRequest'
func (fpaivs *ProviderChatRequest_FieldSubPathArrayItemValue) ContainsValue(source *ProviderChatRequest) bool {
	switch fpaivs.Selector() {
	case ProviderChatRequest_FieldPathSelectorParameters:
		return fpaivs.subPathItemValue.(ChatParameters_FieldPathArrayItemValue).ContainsValue(source.GetParameters())
	case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
		return fpaivs.subPathItemValue.(OpenAIConfig_FieldPathArrayItemValue).ContainsValue(source.GetOpenaiConfig())
	case ProviderChatRequest_FieldPathSelectorAzureConfig:
		return fpaivs.subPathItemValue.(AzureConfig_FieldPathArrayItemValue).ContainsValue(source.GetAzureConfig())
	case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
		return fpaivs.subPathItemValue.(AnthropicConfig_FieldPathArrayItemValue).ContainsValue(source.GetAnthropicConfig())
	case ProviderChatRequest_FieldPathSelectorGeminiConfig:
		return fpaivs.subPathItemValue.(GeminiConfig_FieldPathArrayItemValue).ContainsValue(source.GetGeminiConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderChatRequest: %d", fpaivs.Selector()))
	}
}

// ProviderChatRequest_FieldPathArrayOfValues allows storing slice of values for ProviderChatRequest fields according to their type
type ProviderChatRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProviderChatRequest_FieldPath
}

func ParseProviderChatRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ProviderChatRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseProviderChatRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProviderChatRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProviderChatRequest_FieldPathArrayOfValues), nil
}

func MustParseProviderChatRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ProviderChatRequest_FieldPathArrayOfValues {
	fpaov, err := ParseProviderChatRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProviderChatRequest_FieldTerminalPathArrayOfValues struct {
	ProviderChatRequest_FieldTerminalPath
	values interface{}
}

var _ ProviderChatRequest_FieldPathArrayOfValues = (*ProviderChatRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProviderChatRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProviderChatRequest_FieldPathSelectorModel:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProviderChatRequest_FieldPathSelectorMessages:
		for _, v := range fpaov.values.([][]*common_client.Message) {
			values = append(values, v)
		}
	case ProviderChatRequest_FieldPathSelectorTools:
		for _, v := range fpaov.values.([][]*common_client.ToolDefinition) {
			values = append(values, v)
		}
	case ProviderChatRequest_FieldPathSelectorParameters:
		for _, v := range fpaov.values.([]*ChatParameters) {
			values = append(values, v)
		}
	case ProviderChatRequest_FieldPathSelectorUser:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProviderChatRequest_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	case ProviderChatRequest_FieldPathSelectorOpenaiConfig:
		for _, v := range fpaov.values.([]*OpenAIConfig) {
			values = append(values, v)
		}
	case ProviderChatRequest_FieldPathSelectorAzureConfig:
		for _, v := range fpaov.values.([]*AzureConfig) {
			values = append(values, v)
		}
	case ProviderChatRequest_FieldPathSelectorAnthropicConfig:
		for _, v := range fpaov.values.([]*AnthropicConfig) {
			values = append(values, v)
		}
	case ProviderChatRequest_FieldPathSelectorGeminiConfig:
		for _, v := range fpaov.values.([]*GeminiConfig) {
			values = append(values, v)
		}
	case ProviderChatRequest_FieldPathSelectorReasoningLevel:
		for _, v := range fpaov.values.([]common_client.ReasoningLevel) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProviderChatRequest_FieldTerminalPathArrayOfValues) AsModelArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProviderChatRequest_FieldTerminalPathArrayOfValues) AsMessagesArrayOfValues() ([][]*common_client.Message, bool) {
	res, ok := fpaov.values.([][]*common_client.Message)
	return res, ok
}
func (fpaov *ProviderChatRequest_FieldTerminalPathArrayOfValues) AsToolsArrayOfValues() ([][]*common_client.ToolDefinition, bool) {
	res, ok := fpaov.values.([][]*common_client.ToolDefinition)
	return res, ok
}
func (fpaov *ProviderChatRequest_FieldTerminalPathArrayOfValues) AsParametersArrayOfValues() ([]*ChatParameters, bool) {
	res, ok := fpaov.values.([]*ChatParameters)
	return res, ok
}
func (fpaov *ProviderChatRequest_FieldTerminalPathArrayOfValues) AsUserArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProviderChatRequest_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}
func (fpaov *ProviderChatRequest_FieldTerminalPathArrayOfValues) AsOpenaiConfigArrayOfValues() ([]*OpenAIConfig, bool) {
	res, ok := fpaov.values.([]*OpenAIConfig)
	return res, ok
}
func (fpaov *ProviderChatRequest_FieldTerminalPathArrayOfValues) AsAzureConfigArrayOfValues() ([]*AzureConfig, bool) {
	res, ok := fpaov.values.([]*AzureConfig)
	return res, ok
}
func (fpaov *ProviderChatRequest_FieldTerminalPathArrayOfValues) AsAnthropicConfigArrayOfValues() ([]*AnthropicConfig, bool) {
	res, ok := fpaov.values.([]*AnthropicConfig)
	return res, ok
}
func (fpaov *ProviderChatRequest_FieldTerminalPathArrayOfValues) AsGeminiConfigArrayOfValues() ([]*GeminiConfig, bool) {
	res, ok := fpaov.values.([]*GeminiConfig)
	return res, ok
}
func (fpaov *ProviderChatRequest_FieldTerminalPathArrayOfValues) AsReasoningLevelArrayOfValues() ([]common_client.ReasoningLevel, bool) {
	res, ok := fpaov.values.([]common_client.ReasoningLevel)
	return res, ok
}

type ProviderChatRequest_FieldPathMapArrayOfValues struct {
	ProviderChatRequest_FieldPathMap
	values interface{}
}

var _ ProviderChatRequest_FieldPathArrayOfValues = (*ProviderChatRequest_FieldPathMapArrayOfValues)(nil)

func (fpmaov *ProviderChatRequest_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case ProviderChatRequest_FieldPathSelectorMetadata:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *ProviderChatRequest_FieldPathMapArrayOfValues) AsMetadataArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

type ProviderChatRequest_FieldSubPathArrayOfValues struct {
	ProviderChatRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProviderChatRequest_FieldPathArrayOfValues = (*ProviderChatRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProviderChatRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProviderChatRequest_FieldSubPathArrayOfValues) AsParametersPathArrayOfValues() (ChatParameters_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ChatParameters_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProviderChatRequest_FieldSubPathArrayOfValues) AsOpenaiConfigPathArrayOfValues() (OpenAIConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(OpenAIConfig_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProviderChatRequest_FieldSubPathArrayOfValues) AsAzureConfigPathArrayOfValues() (AzureConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AzureConfig_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProviderChatRequest_FieldSubPathArrayOfValues) AsAnthropicConfigPathArrayOfValues() (AnthropicConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AnthropicConfig_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProviderChatRequest_FieldSubPathArrayOfValues) AsGeminiConfigPathArrayOfValues() (GeminiConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(GeminiConfig_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ChatParameters_FieldPath interface {
	gotenobject.FieldPath
	Selector() ChatParameters_FieldPathSelector
	Get(source *ChatParameters) []interface{}
	GetSingle(source *ChatParameters) (interface{}, bool)
	ClearValue(item *ChatParameters)

	// Those methods build corresponding ChatParameters_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ChatParameters_FieldPathValue
	WithIArrayOfValues(values interface{}) ChatParameters_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ChatParameters_FieldPathArrayItemValue
}

type ChatParameters_FieldPathSelector int32

const (
	ChatParameters_FieldPathSelectorMaxTokens        ChatParameters_FieldPathSelector = 0
	ChatParameters_FieldPathSelectorTemperature      ChatParameters_FieldPathSelector = 1
	ChatParameters_FieldPathSelectorTopP             ChatParameters_FieldPathSelector = 2
	ChatParameters_FieldPathSelectorTopK             ChatParameters_FieldPathSelector = 3
	ChatParameters_FieldPathSelectorPresencePenalty  ChatParameters_FieldPathSelector = 4
	ChatParameters_FieldPathSelectorFrequencyPenalty ChatParameters_FieldPathSelector = 5
	ChatParameters_FieldPathSelectorSeed             ChatParameters_FieldPathSelector = 6
	ChatParameters_FieldPathSelectorStopSequences    ChatParameters_FieldPathSelector = 7
	ChatParameters_FieldPathSelectorResponseFormat   ChatParameters_FieldPathSelector = 8
	ChatParameters_FieldPathSelectorLogprobs         ChatParameters_FieldPathSelector = 9
	ChatParameters_FieldPathSelectorTopLogprobs      ChatParameters_FieldPathSelector = 10
)

func (s ChatParameters_FieldPathSelector) String() string {
	switch s {
	case ChatParameters_FieldPathSelectorMaxTokens:
		return "max_tokens"
	case ChatParameters_FieldPathSelectorTemperature:
		return "temperature"
	case ChatParameters_FieldPathSelectorTopP:
		return "top_p"
	case ChatParameters_FieldPathSelectorTopK:
		return "top_k"
	case ChatParameters_FieldPathSelectorPresencePenalty:
		return "presence_penalty"
	case ChatParameters_FieldPathSelectorFrequencyPenalty:
		return "frequency_penalty"
	case ChatParameters_FieldPathSelectorSeed:
		return "seed"
	case ChatParameters_FieldPathSelectorStopSequences:
		return "stop_sequences"
	case ChatParameters_FieldPathSelectorResponseFormat:
		return "response_format"
	case ChatParameters_FieldPathSelectorLogprobs:
		return "logprobs"
	case ChatParameters_FieldPathSelectorTopLogprobs:
		return "top_logprobs"
	default:
		panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", s))
	}
}

func BuildChatParameters_FieldPath(fp gotenobject.RawFieldPath) (ChatParameters_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ChatParameters")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "max_tokens", "maxTokens", "max-tokens":
			return &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorMaxTokens}, nil
		case "temperature":
			return &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorTemperature}, nil
		case "top_p", "topP", "top-p":
			return &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorTopP}, nil
		case "top_k", "topK", "top-k":
			return &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorTopK}, nil
		case "presence_penalty", "presencePenalty", "presence-penalty":
			return &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorPresencePenalty}, nil
		case "frequency_penalty", "frequencyPenalty", "frequency-penalty":
			return &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorFrequencyPenalty}, nil
		case "seed":
			return &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorSeed}, nil
		case "stop_sequences", "stopSequences", "stop-sequences":
			return &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorStopSequences}, nil
		case "response_format", "responseFormat", "response-format":
			return &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorResponseFormat}, nil
		case "logprobs":
			return &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorLogprobs}, nil
		case "top_logprobs", "topLogprobs", "top-logprobs":
			return &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorTopLogprobs}, nil
		}
	} else {
		switch fp[0] {
		case "response_format", "responseFormat", "response-format":
			if subpath, err := BuildResponseFormat_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ChatParameters_FieldSubPath{selector: ChatParameters_FieldPathSelectorResponseFormat, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ChatParameters", fp)
}

func ParseChatParameters_FieldPath(rawField string) (ChatParameters_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildChatParameters_FieldPath(fp)
}

func MustParseChatParameters_FieldPath(rawField string) ChatParameters_FieldPath {
	fp, err := ParseChatParameters_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ChatParameters_FieldTerminalPath struct {
	selector ChatParameters_FieldPathSelector
}

var _ ChatParameters_FieldPath = (*ChatParameters_FieldTerminalPath)(nil)

func (fp *ChatParameters_FieldTerminalPath) Selector() ChatParameters_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ChatParameters_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ChatParameters_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ChatParameters
func (fp *ChatParameters_FieldTerminalPath) Get(source *ChatParameters) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ChatParameters_FieldPathSelectorMaxTokens:
			values = append(values, source.MaxTokens)
		case ChatParameters_FieldPathSelectorTemperature:
			values = append(values, source.Temperature)
		case ChatParameters_FieldPathSelectorTopP:
			values = append(values, source.TopP)
		case ChatParameters_FieldPathSelectorTopK:
			values = append(values, source.TopK)
		case ChatParameters_FieldPathSelectorPresencePenalty:
			values = append(values, source.PresencePenalty)
		case ChatParameters_FieldPathSelectorFrequencyPenalty:
			values = append(values, source.FrequencyPenalty)
		case ChatParameters_FieldPathSelectorSeed:
			values = append(values, source.Seed)
		case ChatParameters_FieldPathSelectorStopSequences:
			for _, value := range source.GetStopSequences() {
				values = append(values, value)
			}
		case ChatParameters_FieldPathSelectorResponseFormat:
			if source.ResponseFormat != nil {
				values = append(values, source.ResponseFormat)
			}
		case ChatParameters_FieldPathSelectorLogprobs:
			values = append(values, source.Logprobs)
		case ChatParameters_FieldPathSelectorTopLogprobs:
			values = append(values, source.TopLogprobs)
		default:
			panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fp.selector))
		}
	}
	return
}

func (fp *ChatParameters_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ChatParameters))
}

// GetSingle returns value pointed by specific field of from source ChatParameters
func (fp *ChatParameters_FieldTerminalPath) GetSingle(source *ChatParameters) (interface{}, bool) {
	switch fp.selector {
	case ChatParameters_FieldPathSelectorMaxTokens:
		return source.GetMaxTokens(), source != nil
	case ChatParameters_FieldPathSelectorTemperature:
		return source.GetTemperature(), source != nil
	case ChatParameters_FieldPathSelectorTopP:
		return source.GetTopP(), source != nil
	case ChatParameters_FieldPathSelectorTopK:
		return source.GetTopK(), source != nil
	case ChatParameters_FieldPathSelectorPresencePenalty:
		return source.GetPresencePenalty(), source != nil
	case ChatParameters_FieldPathSelectorFrequencyPenalty:
		return source.GetFrequencyPenalty(), source != nil
	case ChatParameters_FieldPathSelectorSeed:
		return source.GetSeed(), source != nil
	case ChatParameters_FieldPathSelectorStopSequences:
		res := source.GetStopSequences()
		return res, res != nil
	case ChatParameters_FieldPathSelectorResponseFormat:
		res := source.GetResponseFormat()
		return res, res != nil
	case ChatParameters_FieldPathSelectorLogprobs:
		return source.GetLogprobs(), source != nil
	case ChatParameters_FieldPathSelectorTopLogprobs:
		return source.GetTopLogprobs(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fp.selector))
	}
}

func (fp *ChatParameters_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ChatParameters))
}

// GetDefault returns a default value of the field type
func (fp *ChatParameters_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ChatParameters_FieldPathSelectorMaxTokens:
		return int32(0)
	case ChatParameters_FieldPathSelectorTemperature:
		return float32(0)
	case ChatParameters_FieldPathSelectorTopP:
		return float32(0)
	case ChatParameters_FieldPathSelectorTopK:
		return int32(0)
	case ChatParameters_FieldPathSelectorPresencePenalty:
		return float32(0)
	case ChatParameters_FieldPathSelectorFrequencyPenalty:
		return float32(0)
	case ChatParameters_FieldPathSelectorSeed:
		return int64(0)
	case ChatParameters_FieldPathSelectorStopSequences:
		return ([]string)(nil)
	case ChatParameters_FieldPathSelectorResponseFormat:
		return (*ResponseFormat)(nil)
	case ChatParameters_FieldPathSelectorLogprobs:
		return false
	case ChatParameters_FieldPathSelectorTopLogprobs:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fp.selector))
	}
}

func (fp *ChatParameters_FieldTerminalPath) ClearValue(item *ChatParameters) {
	if item != nil {
		switch fp.selector {
		case ChatParameters_FieldPathSelectorMaxTokens:
			item.MaxTokens = int32(0)
		case ChatParameters_FieldPathSelectorTemperature:
			item.Temperature = float32(0)
		case ChatParameters_FieldPathSelectorTopP:
			item.TopP = float32(0)
		case ChatParameters_FieldPathSelectorTopK:
			item.TopK = int32(0)
		case ChatParameters_FieldPathSelectorPresencePenalty:
			item.PresencePenalty = float32(0)
		case ChatParameters_FieldPathSelectorFrequencyPenalty:
			item.FrequencyPenalty = float32(0)
		case ChatParameters_FieldPathSelectorSeed:
			item.Seed = int64(0)
		case ChatParameters_FieldPathSelectorStopSequences:
			item.StopSequences = nil
		case ChatParameters_FieldPathSelectorResponseFormat:
			item.ResponseFormat = nil
		case ChatParameters_FieldPathSelectorLogprobs:
			item.Logprobs = false
		case ChatParameters_FieldPathSelectorTopLogprobs:
			item.TopLogprobs = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fp.selector))
		}
	}
}

func (fp *ChatParameters_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ChatParameters))
}

// IsLeaf - whether field path is holds simple value
func (fp *ChatParameters_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ChatParameters_FieldPathSelectorMaxTokens ||
		fp.selector == ChatParameters_FieldPathSelectorTemperature ||
		fp.selector == ChatParameters_FieldPathSelectorTopP ||
		fp.selector == ChatParameters_FieldPathSelectorTopK ||
		fp.selector == ChatParameters_FieldPathSelectorPresencePenalty ||
		fp.selector == ChatParameters_FieldPathSelectorFrequencyPenalty ||
		fp.selector == ChatParameters_FieldPathSelectorSeed ||
		fp.selector == ChatParameters_FieldPathSelectorStopSequences ||
		fp.selector == ChatParameters_FieldPathSelectorLogprobs ||
		fp.selector == ChatParameters_FieldPathSelectorTopLogprobs
}

func (fp *ChatParameters_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ChatParameters_FieldTerminalPath) WithIValue(value interface{}) ChatParameters_FieldPathValue {
	switch fp.selector {
	case ChatParameters_FieldPathSelectorMaxTokens:
		return &ChatParameters_FieldTerminalPathValue{ChatParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case ChatParameters_FieldPathSelectorTemperature:
		return &ChatParameters_FieldTerminalPathValue{ChatParameters_FieldTerminalPath: *fp, value: value.(float32)}
	case ChatParameters_FieldPathSelectorTopP:
		return &ChatParameters_FieldTerminalPathValue{ChatParameters_FieldTerminalPath: *fp, value: value.(float32)}
	case ChatParameters_FieldPathSelectorTopK:
		return &ChatParameters_FieldTerminalPathValue{ChatParameters_FieldTerminalPath: *fp, value: value.(int32)}
	case ChatParameters_FieldPathSelectorPresencePenalty:
		return &ChatParameters_FieldTerminalPathValue{ChatParameters_FieldTerminalPath: *fp, value: value.(float32)}
	case ChatParameters_FieldPathSelectorFrequencyPenalty:
		return &ChatParameters_FieldTerminalPathValue{ChatParameters_FieldTerminalPath: *fp, value: value.(float32)}
	case ChatParameters_FieldPathSelectorSeed:
		return &ChatParameters_FieldTerminalPathValue{ChatParameters_FieldTerminalPath: *fp, value: value.(int64)}
	case ChatParameters_FieldPathSelectorStopSequences:
		return &ChatParameters_FieldTerminalPathValue{ChatParameters_FieldTerminalPath: *fp, value: value.([]string)}
	case ChatParameters_FieldPathSelectorResponseFormat:
		return &ChatParameters_FieldTerminalPathValue{ChatParameters_FieldTerminalPath: *fp, value: value.(*ResponseFormat)}
	case ChatParameters_FieldPathSelectorLogprobs:
		return &ChatParameters_FieldTerminalPathValue{ChatParameters_FieldTerminalPath: *fp, value: value.(bool)}
	case ChatParameters_FieldPathSelectorTopLogprobs:
		return &ChatParameters_FieldTerminalPathValue{ChatParameters_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fp.selector))
	}
}

func (fp *ChatParameters_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ChatParameters_FieldTerminalPath) WithIArrayOfValues(values interface{}) ChatParameters_FieldPathArrayOfValues {
	fpaov := &ChatParameters_FieldTerminalPathArrayOfValues{ChatParameters_FieldTerminalPath: *fp}
	switch fp.selector {
	case ChatParameters_FieldPathSelectorMaxTokens:
		return &ChatParameters_FieldTerminalPathArrayOfValues{ChatParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case ChatParameters_FieldPathSelectorTemperature:
		return &ChatParameters_FieldTerminalPathArrayOfValues{ChatParameters_FieldTerminalPath: *fp, values: values.([]float32)}
	case ChatParameters_FieldPathSelectorTopP:
		return &ChatParameters_FieldTerminalPathArrayOfValues{ChatParameters_FieldTerminalPath: *fp, values: values.([]float32)}
	case ChatParameters_FieldPathSelectorTopK:
		return &ChatParameters_FieldTerminalPathArrayOfValues{ChatParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	case ChatParameters_FieldPathSelectorPresencePenalty:
		return &ChatParameters_FieldTerminalPathArrayOfValues{ChatParameters_FieldTerminalPath: *fp, values: values.([]float32)}
	case ChatParameters_FieldPathSelectorFrequencyPenalty:
		return &ChatParameters_FieldTerminalPathArrayOfValues{ChatParameters_FieldTerminalPath: *fp, values: values.([]float32)}
	case ChatParameters_FieldPathSelectorSeed:
		return &ChatParameters_FieldTerminalPathArrayOfValues{ChatParameters_FieldTerminalPath: *fp, values: values.([]int64)}
	case ChatParameters_FieldPathSelectorStopSequences:
		return &ChatParameters_FieldTerminalPathArrayOfValues{ChatParameters_FieldTerminalPath: *fp, values: values.([][]string)}
	case ChatParameters_FieldPathSelectorResponseFormat:
		return &ChatParameters_FieldTerminalPathArrayOfValues{ChatParameters_FieldTerminalPath: *fp, values: values.([]*ResponseFormat)}
	case ChatParameters_FieldPathSelectorLogprobs:
		return &ChatParameters_FieldTerminalPathArrayOfValues{ChatParameters_FieldTerminalPath: *fp, values: values.([]bool)}
	case ChatParameters_FieldPathSelectorTopLogprobs:
		return &ChatParameters_FieldTerminalPathArrayOfValues{ChatParameters_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fp.selector))
	}
	return fpaov
}

func (fp *ChatParameters_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ChatParameters_FieldTerminalPath) WithIArrayItemValue(value interface{}) ChatParameters_FieldPathArrayItemValue {
	switch fp.selector {
	case ChatParameters_FieldPathSelectorStopSequences:
		return &ChatParameters_FieldTerminalPathArrayItemValue{ChatParameters_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fp.selector))
	}
}

func (fp *ChatParameters_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ChatParameters_FieldSubPath struct {
	selector ChatParameters_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ChatParameters_FieldPath = (*ChatParameters_FieldSubPath)(nil)

func (fps *ChatParameters_FieldSubPath) Selector() ChatParameters_FieldPathSelector {
	return fps.selector
}
func (fps *ChatParameters_FieldSubPath) AsResponseFormatSubPath() (ResponseFormat_FieldPath, bool) {
	res, ok := fps.subPath.(ResponseFormat_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ChatParameters_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ChatParameters_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ChatParameters
func (fps *ChatParameters_FieldSubPath) Get(source *ChatParameters) (values []interface{}) {
	switch fps.selector {
	case ChatParameters_FieldPathSelectorResponseFormat:
		values = append(values, fps.subPath.GetRaw(source.GetResponseFormat())...)
	default:
		panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fps.selector))
	}
	return
}

func (fps *ChatParameters_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ChatParameters))
}

// GetSingle returns value of selected field from source ChatParameters
func (fps *ChatParameters_FieldSubPath) GetSingle(source *ChatParameters) (interface{}, bool) {
	switch fps.selector {
	case ChatParameters_FieldPathSelectorResponseFormat:
		if source.GetResponseFormat() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResponseFormat())
	default:
		panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fps.selector))
	}
}

func (fps *ChatParameters_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ChatParameters))
}

// GetDefault returns a default value of the field type
func (fps *ChatParameters_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ChatParameters_FieldSubPath) ClearValue(item *ChatParameters) {
	if item != nil {
		switch fps.selector {
		case ChatParameters_FieldPathSelectorResponseFormat:
			fps.subPath.ClearValueRaw(item.ResponseFormat)
		default:
			panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fps.selector))
		}
	}
}

func (fps *ChatParameters_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ChatParameters))
}

// IsLeaf - whether field path is holds simple value
func (fps *ChatParameters_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ChatParameters_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ChatParameters_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ChatParameters_FieldSubPath) WithIValue(value interface{}) ChatParameters_FieldPathValue {
	return &ChatParameters_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ChatParameters_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ChatParameters_FieldSubPath) WithIArrayOfValues(values interface{}) ChatParameters_FieldPathArrayOfValues {
	return &ChatParameters_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ChatParameters_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ChatParameters_FieldSubPath) WithIArrayItemValue(value interface{}) ChatParameters_FieldPathArrayItemValue {
	return &ChatParameters_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ChatParameters_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ChatParameters_FieldPathValue allows storing values for ChatParameters fields according to their type
type ChatParameters_FieldPathValue interface {
	ChatParameters_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ChatParameters)
	CompareWith(*ChatParameters) (cmp int, comparable bool)
}

func ParseChatParameters_FieldPathValue(pathStr, valueStr string) (ChatParameters_FieldPathValue, error) {
	fp, err := ParseChatParameters_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChatParameters field path value from %s: %v", valueStr, err)
	}
	return fpv.(ChatParameters_FieldPathValue), nil
}

func MustParseChatParameters_FieldPathValue(pathStr, valueStr string) ChatParameters_FieldPathValue {
	fpv, err := ParseChatParameters_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ChatParameters_FieldTerminalPathValue struct {
	ChatParameters_FieldTerminalPath
	value interface{}
}

var _ ChatParameters_FieldPathValue = (*ChatParameters_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ChatParameters' as interface{}
func (fpv *ChatParameters_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ChatParameters_FieldTerminalPathValue) AsMaxTokensValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ChatParameters_FieldTerminalPathValue) AsTemperatureValue() (float32, bool) {
	res, ok := fpv.value.(float32)
	return res, ok
}
func (fpv *ChatParameters_FieldTerminalPathValue) AsTopPValue() (float32, bool) {
	res, ok := fpv.value.(float32)
	return res, ok
}
func (fpv *ChatParameters_FieldTerminalPathValue) AsTopKValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ChatParameters_FieldTerminalPathValue) AsPresencePenaltyValue() (float32, bool) {
	res, ok := fpv.value.(float32)
	return res, ok
}
func (fpv *ChatParameters_FieldTerminalPathValue) AsFrequencyPenaltyValue() (float32, bool) {
	res, ok := fpv.value.(float32)
	return res, ok
}
func (fpv *ChatParameters_FieldTerminalPathValue) AsSeedValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *ChatParameters_FieldTerminalPathValue) AsStopSequencesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *ChatParameters_FieldTerminalPathValue) AsResponseFormatValue() (*ResponseFormat, bool) {
	res, ok := fpv.value.(*ResponseFormat)
	return res, ok
}
func (fpv *ChatParameters_FieldTerminalPathValue) AsLogprobsValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *ChatParameters_FieldTerminalPathValue) AsTopLogprobsValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ChatParameters
func (fpv *ChatParameters_FieldTerminalPathValue) SetTo(target **ChatParameters) {
	if *target == nil {
		*target = new(ChatParameters)
	}
	switch fpv.selector {
	case ChatParameters_FieldPathSelectorMaxTokens:
		(*target).MaxTokens = fpv.value.(int32)
	case ChatParameters_FieldPathSelectorTemperature:
		(*target).Temperature = fpv.value.(float32)
	case ChatParameters_FieldPathSelectorTopP:
		(*target).TopP = fpv.value.(float32)
	case ChatParameters_FieldPathSelectorTopK:
		(*target).TopK = fpv.value.(int32)
	case ChatParameters_FieldPathSelectorPresencePenalty:
		(*target).PresencePenalty = fpv.value.(float32)
	case ChatParameters_FieldPathSelectorFrequencyPenalty:
		(*target).FrequencyPenalty = fpv.value.(float32)
	case ChatParameters_FieldPathSelectorSeed:
		(*target).Seed = fpv.value.(int64)
	case ChatParameters_FieldPathSelectorStopSequences:
		(*target).StopSequences = fpv.value.([]string)
	case ChatParameters_FieldPathSelectorResponseFormat:
		(*target).ResponseFormat = fpv.value.(*ResponseFormat)
	case ChatParameters_FieldPathSelectorLogprobs:
		(*target).Logprobs = fpv.value.(bool)
	case ChatParameters_FieldPathSelectorTopLogprobs:
		(*target).TopLogprobs = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fpv.selector))
	}
}

func (fpv *ChatParameters_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ChatParameters)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ChatParameters_FieldTerminalPathValue' with the value under path in 'ChatParameters'.
func (fpv *ChatParameters_FieldTerminalPathValue) CompareWith(source *ChatParameters) (int, bool) {
	switch fpv.selector {
	case ChatParameters_FieldPathSelectorMaxTokens:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxTokens()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ChatParameters_FieldPathSelectorTemperature:
		leftValue := fpv.value.(float32)
		rightValue := source.GetTemperature()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ChatParameters_FieldPathSelectorTopP:
		leftValue := fpv.value.(float32)
		rightValue := source.GetTopP()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ChatParameters_FieldPathSelectorTopK:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTopK()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ChatParameters_FieldPathSelectorPresencePenalty:
		leftValue := fpv.value.(float32)
		rightValue := source.GetPresencePenalty()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ChatParameters_FieldPathSelectorFrequencyPenalty:
		leftValue := fpv.value.(float32)
		rightValue := source.GetFrequencyPenalty()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ChatParameters_FieldPathSelectorSeed:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSeed()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ChatParameters_FieldPathSelectorStopSequences:
		return 0, false
	case ChatParameters_FieldPathSelectorResponseFormat:
		return 0, false
	case ChatParameters_FieldPathSelectorLogprobs:
		leftValue := fpv.value.(bool)
		rightValue := source.GetLogprobs()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ChatParameters_FieldPathSelectorTopLogprobs:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTopLogprobs()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fpv.selector))
	}
}

func (fpv *ChatParameters_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ChatParameters))
}

type ChatParameters_FieldSubPathValue struct {
	ChatParameters_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ChatParameters_FieldPathValue = (*ChatParameters_FieldSubPathValue)(nil)

func (fpvs *ChatParameters_FieldSubPathValue) AsResponseFormatPathValue() (ResponseFormat_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ResponseFormat_FieldPathValue)
	return res, ok
}

func (fpvs *ChatParameters_FieldSubPathValue) SetTo(target **ChatParameters) {
	if *target == nil {
		*target = new(ChatParameters)
	}
	switch fpvs.Selector() {
	case ChatParameters_FieldPathSelectorResponseFormat:
		fpvs.subPathValue.(ResponseFormat_FieldPathValue).SetTo(&(*target).ResponseFormat)
	default:
		panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fpvs.Selector()))
	}
}

func (fpvs *ChatParameters_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ChatParameters)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ChatParameters_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ChatParameters_FieldSubPathValue) CompareWith(source *ChatParameters) (int, bool) {
	switch fpvs.Selector() {
	case ChatParameters_FieldPathSelectorResponseFormat:
		return fpvs.subPathValue.(ResponseFormat_FieldPathValue).CompareWith(source.GetResponseFormat())
	default:
		panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fpvs.Selector()))
	}
}

func (fpvs *ChatParameters_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ChatParameters))
}

// ChatParameters_FieldPathArrayItemValue allows storing single item in Path-specific values for ChatParameters according to their type
// Present only for array (repeated) types.
type ChatParameters_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ChatParameters_FieldPath
	ContainsValue(*ChatParameters) bool
}

// ParseChatParameters_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseChatParameters_FieldPathArrayItemValue(pathStr, valueStr string) (ChatParameters_FieldPathArrayItemValue, error) {
	fp, err := ParseChatParameters_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChatParameters field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ChatParameters_FieldPathArrayItemValue), nil
}

func MustParseChatParameters_FieldPathArrayItemValue(pathStr, valueStr string) ChatParameters_FieldPathArrayItemValue {
	fpaiv, err := ParseChatParameters_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ChatParameters_FieldTerminalPathArrayItemValue struct {
	ChatParameters_FieldTerminalPath
	value interface{}
}

var _ ChatParameters_FieldPathArrayItemValue = (*ChatParameters_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ChatParameters as interface{}
func (fpaiv *ChatParameters_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ChatParameters_FieldTerminalPathArrayItemValue) AsStopSequencesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *ChatParameters_FieldTerminalPathArrayItemValue) GetSingle(source *ChatParameters) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ChatParameters_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ChatParameters))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ChatParameters'
func (fpaiv *ChatParameters_FieldTerminalPathArrayItemValue) ContainsValue(source *ChatParameters) bool {
	slice := fpaiv.ChatParameters_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ChatParameters_FieldSubPathArrayItemValue struct {
	ChatParameters_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ChatParameters_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ChatParameters_FieldSubPathArrayItemValue) AsResponseFormatPathItemValue() (ResponseFormat_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ResponseFormat_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ChatParameters'
func (fpaivs *ChatParameters_FieldSubPathArrayItemValue) ContainsValue(source *ChatParameters) bool {
	switch fpaivs.Selector() {
	case ChatParameters_FieldPathSelectorResponseFormat:
		return fpaivs.subPathItemValue.(ResponseFormat_FieldPathArrayItemValue).ContainsValue(source.GetResponseFormat())
	default:
		panic(fmt.Sprintf("Invalid selector for ChatParameters: %d", fpaivs.Selector()))
	}
}

// ChatParameters_FieldPathArrayOfValues allows storing slice of values for ChatParameters fields according to their type
type ChatParameters_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ChatParameters_FieldPath
}

func ParseChatParameters_FieldPathArrayOfValues(pathStr, valuesStr string) (ChatParameters_FieldPathArrayOfValues, error) {
	fp, err := ParseChatParameters_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChatParameters field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ChatParameters_FieldPathArrayOfValues), nil
}

func MustParseChatParameters_FieldPathArrayOfValues(pathStr, valuesStr string) ChatParameters_FieldPathArrayOfValues {
	fpaov, err := ParseChatParameters_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ChatParameters_FieldTerminalPathArrayOfValues struct {
	ChatParameters_FieldTerminalPath
	values interface{}
}

var _ ChatParameters_FieldPathArrayOfValues = (*ChatParameters_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ChatParameters_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ChatParameters_FieldPathSelectorMaxTokens:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ChatParameters_FieldPathSelectorTemperature:
		for _, v := range fpaov.values.([]float32) {
			values = append(values, v)
		}
	case ChatParameters_FieldPathSelectorTopP:
		for _, v := range fpaov.values.([]float32) {
			values = append(values, v)
		}
	case ChatParameters_FieldPathSelectorTopK:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ChatParameters_FieldPathSelectorPresencePenalty:
		for _, v := range fpaov.values.([]float32) {
			values = append(values, v)
		}
	case ChatParameters_FieldPathSelectorFrequencyPenalty:
		for _, v := range fpaov.values.([]float32) {
			values = append(values, v)
		}
	case ChatParameters_FieldPathSelectorSeed:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case ChatParameters_FieldPathSelectorStopSequences:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case ChatParameters_FieldPathSelectorResponseFormat:
		for _, v := range fpaov.values.([]*ResponseFormat) {
			values = append(values, v)
		}
	case ChatParameters_FieldPathSelectorLogprobs:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case ChatParameters_FieldPathSelectorTopLogprobs:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ChatParameters_FieldTerminalPathArrayOfValues) AsMaxTokensArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ChatParameters_FieldTerminalPathArrayOfValues) AsTemperatureArrayOfValues() ([]float32, bool) {
	res, ok := fpaov.values.([]float32)
	return res, ok
}
func (fpaov *ChatParameters_FieldTerminalPathArrayOfValues) AsTopPArrayOfValues() ([]float32, bool) {
	res, ok := fpaov.values.([]float32)
	return res, ok
}
func (fpaov *ChatParameters_FieldTerminalPathArrayOfValues) AsTopKArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ChatParameters_FieldTerminalPathArrayOfValues) AsPresencePenaltyArrayOfValues() ([]float32, bool) {
	res, ok := fpaov.values.([]float32)
	return res, ok
}
func (fpaov *ChatParameters_FieldTerminalPathArrayOfValues) AsFrequencyPenaltyArrayOfValues() ([]float32, bool) {
	res, ok := fpaov.values.([]float32)
	return res, ok
}
func (fpaov *ChatParameters_FieldTerminalPathArrayOfValues) AsSeedArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *ChatParameters_FieldTerminalPathArrayOfValues) AsStopSequencesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *ChatParameters_FieldTerminalPathArrayOfValues) AsResponseFormatArrayOfValues() ([]*ResponseFormat, bool) {
	res, ok := fpaov.values.([]*ResponseFormat)
	return res, ok
}
func (fpaov *ChatParameters_FieldTerminalPathArrayOfValues) AsLogprobsArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *ChatParameters_FieldTerminalPathArrayOfValues) AsTopLogprobsArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ChatParameters_FieldSubPathArrayOfValues struct {
	ChatParameters_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ChatParameters_FieldPathArrayOfValues = (*ChatParameters_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ChatParameters_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ChatParameters_FieldSubPathArrayOfValues) AsResponseFormatPathArrayOfValues() (ResponseFormat_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ResponseFormat_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ResponseFormat_FieldPath interface {
	gotenobject.FieldPath
	Selector() ResponseFormat_FieldPathSelector
	Get(source *ResponseFormat) []interface{}
	GetSingle(source *ResponseFormat) (interface{}, bool)
	ClearValue(item *ResponseFormat)

	// Those methods build corresponding ResponseFormat_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ResponseFormat_FieldPathValue
	WithIArrayOfValues(values interface{}) ResponseFormat_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ResponseFormat_FieldPathArrayItemValue
}

type ResponseFormat_FieldPathSelector int32

const (
	ResponseFormat_FieldPathSelectorMode       ResponseFormat_FieldPathSelector = 0
	ResponseFormat_FieldPathSelectorJsonSchema ResponseFormat_FieldPathSelector = 1
)

func (s ResponseFormat_FieldPathSelector) String() string {
	switch s {
	case ResponseFormat_FieldPathSelectorMode:
		return "mode"
	case ResponseFormat_FieldPathSelectorJsonSchema:
		return "json_schema"
	default:
		panic(fmt.Sprintf("Invalid selector for ResponseFormat: %d", s))
	}
}

func BuildResponseFormat_FieldPath(fp gotenobject.RawFieldPath) (ResponseFormat_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ResponseFormat")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "mode":
			return &ResponseFormat_FieldTerminalPath{selector: ResponseFormat_FieldPathSelectorMode}, nil
		case "json_schema", "jsonSchema", "json-schema":
			return &ResponseFormat_FieldTerminalPath{selector: ResponseFormat_FieldPathSelectorJsonSchema}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ResponseFormat", fp)
}

func ParseResponseFormat_FieldPath(rawField string) (ResponseFormat_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildResponseFormat_FieldPath(fp)
}

func MustParseResponseFormat_FieldPath(rawField string) ResponseFormat_FieldPath {
	fp, err := ParseResponseFormat_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ResponseFormat_FieldTerminalPath struct {
	selector ResponseFormat_FieldPathSelector
}

var _ ResponseFormat_FieldPath = (*ResponseFormat_FieldTerminalPath)(nil)

func (fp *ResponseFormat_FieldTerminalPath) Selector() ResponseFormat_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ResponseFormat_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ResponseFormat_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ResponseFormat
func (fp *ResponseFormat_FieldTerminalPath) Get(source *ResponseFormat) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ResponseFormat_FieldPathSelectorMode:
			values = append(values, source.Mode)
		case ResponseFormat_FieldPathSelectorJsonSchema:
			values = append(values, source.JsonSchema)
		default:
			panic(fmt.Sprintf("Invalid selector for ResponseFormat: %d", fp.selector))
		}
	}
	return
}

func (fp *ResponseFormat_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ResponseFormat))
}

// GetSingle returns value pointed by specific field of from source ResponseFormat
func (fp *ResponseFormat_FieldTerminalPath) GetSingle(source *ResponseFormat) (interface{}, bool) {
	switch fp.selector {
	case ResponseFormat_FieldPathSelectorMode:
		return source.GetMode(), source != nil
	case ResponseFormat_FieldPathSelectorJsonSchema:
		return source.GetJsonSchema(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ResponseFormat: %d", fp.selector))
	}
}

func (fp *ResponseFormat_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ResponseFormat))
}

// GetDefault returns a default value of the field type
func (fp *ResponseFormat_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ResponseFormat_FieldPathSelectorMode:
		return ResponseFormat_MODE_UNSPECIFIED
	case ResponseFormat_FieldPathSelectorJsonSchema:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ResponseFormat: %d", fp.selector))
	}
}

func (fp *ResponseFormat_FieldTerminalPath) ClearValue(item *ResponseFormat) {
	if item != nil {
		switch fp.selector {
		case ResponseFormat_FieldPathSelectorMode:
			item.Mode = ResponseFormat_MODE_UNSPECIFIED
		case ResponseFormat_FieldPathSelectorJsonSchema:
			item.JsonSchema = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ResponseFormat: %d", fp.selector))
		}
	}
}

func (fp *ResponseFormat_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ResponseFormat))
}

// IsLeaf - whether field path is holds simple value
func (fp *ResponseFormat_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ResponseFormat_FieldPathSelectorMode ||
		fp.selector == ResponseFormat_FieldPathSelectorJsonSchema
}

func (fp *ResponseFormat_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ResponseFormat_FieldTerminalPath) WithIValue(value interface{}) ResponseFormat_FieldPathValue {
	switch fp.selector {
	case ResponseFormat_FieldPathSelectorMode:
		return &ResponseFormat_FieldTerminalPathValue{ResponseFormat_FieldTerminalPath: *fp, value: value.(ResponseFormat_Mode)}
	case ResponseFormat_FieldPathSelectorJsonSchema:
		return &ResponseFormat_FieldTerminalPathValue{ResponseFormat_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ResponseFormat: %d", fp.selector))
	}
}

func (fp *ResponseFormat_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ResponseFormat_FieldTerminalPath) WithIArrayOfValues(values interface{}) ResponseFormat_FieldPathArrayOfValues {
	fpaov := &ResponseFormat_FieldTerminalPathArrayOfValues{ResponseFormat_FieldTerminalPath: *fp}
	switch fp.selector {
	case ResponseFormat_FieldPathSelectorMode:
		return &ResponseFormat_FieldTerminalPathArrayOfValues{ResponseFormat_FieldTerminalPath: *fp, values: values.([]ResponseFormat_Mode)}
	case ResponseFormat_FieldPathSelectorJsonSchema:
		return &ResponseFormat_FieldTerminalPathArrayOfValues{ResponseFormat_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ResponseFormat: %d", fp.selector))
	}
	return fpaov
}

func (fp *ResponseFormat_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ResponseFormat_FieldTerminalPath) WithIArrayItemValue(value interface{}) ResponseFormat_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ResponseFormat: %d", fp.selector))
	}
}

func (fp *ResponseFormat_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ResponseFormat_FieldPathValue allows storing values for ResponseFormat fields according to their type
type ResponseFormat_FieldPathValue interface {
	ResponseFormat_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ResponseFormat)
	CompareWith(*ResponseFormat) (cmp int, comparable bool)
}

func ParseResponseFormat_FieldPathValue(pathStr, valueStr string) (ResponseFormat_FieldPathValue, error) {
	fp, err := ParseResponseFormat_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResponseFormat field path value from %s: %v", valueStr, err)
	}
	return fpv.(ResponseFormat_FieldPathValue), nil
}

func MustParseResponseFormat_FieldPathValue(pathStr, valueStr string) ResponseFormat_FieldPathValue {
	fpv, err := ParseResponseFormat_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ResponseFormat_FieldTerminalPathValue struct {
	ResponseFormat_FieldTerminalPath
	value interface{}
}

var _ ResponseFormat_FieldPathValue = (*ResponseFormat_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ResponseFormat' as interface{}
func (fpv *ResponseFormat_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ResponseFormat_FieldTerminalPathValue) AsModeValue() (ResponseFormat_Mode, bool) {
	res, ok := fpv.value.(ResponseFormat_Mode)
	return res, ok
}
func (fpv *ResponseFormat_FieldTerminalPathValue) AsJsonSchemaValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ResponseFormat
func (fpv *ResponseFormat_FieldTerminalPathValue) SetTo(target **ResponseFormat) {
	if *target == nil {
		*target = new(ResponseFormat)
	}
	switch fpv.selector {
	case ResponseFormat_FieldPathSelectorMode:
		(*target).Mode = fpv.value.(ResponseFormat_Mode)
	case ResponseFormat_FieldPathSelectorJsonSchema:
		(*target).JsonSchema = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ResponseFormat: %d", fpv.selector))
	}
}

func (fpv *ResponseFormat_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ResponseFormat)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ResponseFormat_FieldTerminalPathValue' with the value under path in 'ResponseFormat'.
func (fpv *ResponseFormat_FieldTerminalPathValue) CompareWith(source *ResponseFormat) (int, bool) {
	switch fpv.selector {
	case ResponseFormat_FieldPathSelectorMode:
		leftValue := fpv.value.(ResponseFormat_Mode)
		rightValue := source.GetMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ResponseFormat_FieldPathSelectorJsonSchema:
		leftValue := fpv.value.(string)
		rightValue := source.GetJsonSchema()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ResponseFormat: %d", fpv.selector))
	}
}

func (fpv *ResponseFormat_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ResponseFormat))
}

// ResponseFormat_FieldPathArrayItemValue allows storing single item in Path-specific values for ResponseFormat according to their type
// Present only for array (repeated) types.
type ResponseFormat_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ResponseFormat_FieldPath
	ContainsValue(*ResponseFormat) bool
}

// ParseResponseFormat_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseResponseFormat_FieldPathArrayItemValue(pathStr, valueStr string) (ResponseFormat_FieldPathArrayItemValue, error) {
	fp, err := ParseResponseFormat_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResponseFormat field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ResponseFormat_FieldPathArrayItemValue), nil
}

func MustParseResponseFormat_FieldPathArrayItemValue(pathStr, valueStr string) ResponseFormat_FieldPathArrayItemValue {
	fpaiv, err := ParseResponseFormat_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ResponseFormat_FieldTerminalPathArrayItemValue struct {
	ResponseFormat_FieldTerminalPath
	value interface{}
}

var _ ResponseFormat_FieldPathArrayItemValue = (*ResponseFormat_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ResponseFormat as interface{}
func (fpaiv *ResponseFormat_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ResponseFormat_FieldTerminalPathArrayItemValue) GetSingle(source *ResponseFormat) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ResponseFormat_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ResponseFormat))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ResponseFormat'
func (fpaiv *ResponseFormat_FieldTerminalPathArrayItemValue) ContainsValue(source *ResponseFormat) bool {
	slice := fpaiv.ResponseFormat_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ResponseFormat_FieldPathArrayOfValues allows storing slice of values for ResponseFormat fields according to their type
type ResponseFormat_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ResponseFormat_FieldPath
}

func ParseResponseFormat_FieldPathArrayOfValues(pathStr, valuesStr string) (ResponseFormat_FieldPathArrayOfValues, error) {
	fp, err := ParseResponseFormat_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ResponseFormat field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ResponseFormat_FieldPathArrayOfValues), nil
}

func MustParseResponseFormat_FieldPathArrayOfValues(pathStr, valuesStr string) ResponseFormat_FieldPathArrayOfValues {
	fpaov, err := ParseResponseFormat_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ResponseFormat_FieldTerminalPathArrayOfValues struct {
	ResponseFormat_FieldTerminalPath
	values interface{}
}

var _ ResponseFormat_FieldPathArrayOfValues = (*ResponseFormat_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ResponseFormat_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ResponseFormat_FieldPathSelectorMode:
		for _, v := range fpaov.values.([]ResponseFormat_Mode) {
			values = append(values, v)
		}
	case ResponseFormat_FieldPathSelectorJsonSchema:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ResponseFormat_FieldTerminalPathArrayOfValues) AsModeArrayOfValues() ([]ResponseFormat_Mode, bool) {
	res, ok := fpaov.values.([]ResponseFormat_Mode)
	return res, ok
}
func (fpaov *ResponseFormat_FieldTerminalPathArrayOfValues) AsJsonSchemaArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProviderContentDelta_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProviderContentDelta_FieldPathSelector
	Get(source *ProviderContentDelta) []interface{}
	GetSingle(source *ProviderContentDelta) (interface{}, bool)
	ClearValue(item *ProviderContentDelta)

	// Those methods build corresponding ProviderContentDelta_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProviderContentDelta_FieldPathValue
	WithIArrayOfValues(values interface{}) ProviderContentDelta_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProviderContentDelta_FieldPathArrayItemValue
}

type ProviderContentDelta_FieldPathSelector int32

const (
	ProviderContentDelta_FieldPathSelectorText    ProviderContentDelta_FieldPathSelector = 0
	ProviderContentDelta_FieldPathSelectorChannel ProviderContentDelta_FieldPathSelector = 1
)

func (s ProviderContentDelta_FieldPathSelector) String() string {
	switch s {
	case ProviderContentDelta_FieldPathSelectorText:
		return "text"
	case ProviderContentDelta_FieldPathSelectorChannel:
		return "channel"
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderContentDelta: %d", s))
	}
}

func BuildProviderContentDelta_FieldPath(fp gotenobject.RawFieldPath) (ProviderContentDelta_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProviderContentDelta")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "text":
			return &ProviderContentDelta_FieldTerminalPath{selector: ProviderContentDelta_FieldPathSelectorText}, nil
		case "channel":
			return &ProviderContentDelta_FieldTerminalPath{selector: ProviderContentDelta_FieldPathSelectorChannel}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProviderContentDelta", fp)
}

func ParseProviderContentDelta_FieldPath(rawField string) (ProviderContentDelta_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProviderContentDelta_FieldPath(fp)
}

func MustParseProviderContentDelta_FieldPath(rawField string) ProviderContentDelta_FieldPath {
	fp, err := ParseProviderContentDelta_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProviderContentDelta_FieldTerminalPath struct {
	selector ProviderContentDelta_FieldPathSelector
}

var _ ProviderContentDelta_FieldPath = (*ProviderContentDelta_FieldTerminalPath)(nil)

func (fp *ProviderContentDelta_FieldTerminalPath) Selector() ProviderContentDelta_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProviderContentDelta_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProviderContentDelta_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProviderContentDelta
func (fp *ProviderContentDelta_FieldTerminalPath) Get(source *ProviderContentDelta) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProviderContentDelta_FieldPathSelectorText:
			values = append(values, source.Text)
		case ProviderContentDelta_FieldPathSelectorChannel:
			values = append(values, source.Channel)
		default:
			panic(fmt.Sprintf("Invalid selector for ProviderContentDelta: %d", fp.selector))
		}
	}
	return
}

func (fp *ProviderContentDelta_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProviderContentDelta))
}

// GetSingle returns value pointed by specific field of from source ProviderContentDelta
func (fp *ProviderContentDelta_FieldTerminalPath) GetSingle(source *ProviderContentDelta) (interface{}, bool) {
	switch fp.selector {
	case ProviderContentDelta_FieldPathSelectorText:
		return source.GetText(), source != nil
	case ProviderContentDelta_FieldPathSelectorChannel:
		return source.GetChannel(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderContentDelta: %d", fp.selector))
	}
}

func (fp *ProviderContentDelta_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProviderContentDelta))
}

// GetDefault returns a default value of the field type
func (fp *ProviderContentDelta_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProviderContentDelta_FieldPathSelectorText:
		return ""
	case ProviderContentDelta_FieldPathSelectorChannel:
		return common_client.ContentChannel_CONTENT_CHANNEL_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderContentDelta: %d", fp.selector))
	}
}

func (fp *ProviderContentDelta_FieldTerminalPath) ClearValue(item *ProviderContentDelta) {
	if item != nil {
		switch fp.selector {
		case ProviderContentDelta_FieldPathSelectorText:
			item.Text = ""
		case ProviderContentDelta_FieldPathSelectorChannel:
			item.Channel = common_client.ContentChannel_CONTENT_CHANNEL_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ProviderContentDelta: %d", fp.selector))
		}
	}
}

func (fp *ProviderContentDelta_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProviderContentDelta))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProviderContentDelta_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProviderContentDelta_FieldPathSelectorText ||
		fp.selector == ProviderContentDelta_FieldPathSelectorChannel
}

func (fp *ProviderContentDelta_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProviderContentDelta_FieldTerminalPath) WithIValue(value interface{}) ProviderContentDelta_FieldPathValue {
	switch fp.selector {
	case ProviderContentDelta_FieldPathSelectorText:
		return &ProviderContentDelta_FieldTerminalPathValue{ProviderContentDelta_FieldTerminalPath: *fp, value: value.(string)}
	case ProviderContentDelta_FieldPathSelectorChannel:
		return &ProviderContentDelta_FieldTerminalPathValue{ProviderContentDelta_FieldTerminalPath: *fp, value: value.(common_client.ContentChannel)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderContentDelta: %d", fp.selector))
	}
}

func (fp *ProviderContentDelta_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProviderContentDelta_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProviderContentDelta_FieldPathArrayOfValues {
	fpaov := &ProviderContentDelta_FieldTerminalPathArrayOfValues{ProviderContentDelta_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProviderContentDelta_FieldPathSelectorText:
		return &ProviderContentDelta_FieldTerminalPathArrayOfValues{ProviderContentDelta_FieldTerminalPath: *fp, values: values.([]string)}
	case ProviderContentDelta_FieldPathSelectorChannel:
		return &ProviderContentDelta_FieldTerminalPathArrayOfValues{ProviderContentDelta_FieldTerminalPath: *fp, values: values.([]common_client.ContentChannel)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderContentDelta: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProviderContentDelta_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProviderContentDelta_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProviderContentDelta_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderContentDelta: %d", fp.selector))
	}
}

func (fp *ProviderContentDelta_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProviderContentDelta_FieldPathValue allows storing values for ProviderContentDelta fields according to their type
type ProviderContentDelta_FieldPathValue interface {
	ProviderContentDelta_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProviderContentDelta)
	CompareWith(*ProviderContentDelta) (cmp int, comparable bool)
}

func ParseProviderContentDelta_FieldPathValue(pathStr, valueStr string) (ProviderContentDelta_FieldPathValue, error) {
	fp, err := ParseProviderContentDelta_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProviderContentDelta field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProviderContentDelta_FieldPathValue), nil
}

func MustParseProviderContentDelta_FieldPathValue(pathStr, valueStr string) ProviderContentDelta_FieldPathValue {
	fpv, err := ParseProviderContentDelta_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProviderContentDelta_FieldTerminalPathValue struct {
	ProviderContentDelta_FieldTerminalPath
	value interface{}
}

var _ ProviderContentDelta_FieldPathValue = (*ProviderContentDelta_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProviderContentDelta' as interface{}
func (fpv *ProviderContentDelta_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProviderContentDelta_FieldTerminalPathValue) AsTextValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProviderContentDelta_FieldTerminalPathValue) AsChannelValue() (common_client.ContentChannel, bool) {
	res, ok := fpv.value.(common_client.ContentChannel)
	return res, ok
}

// SetTo stores value for selected field for object ProviderContentDelta
func (fpv *ProviderContentDelta_FieldTerminalPathValue) SetTo(target **ProviderContentDelta) {
	if *target == nil {
		*target = new(ProviderContentDelta)
	}
	switch fpv.selector {
	case ProviderContentDelta_FieldPathSelectorText:
		(*target).Text = fpv.value.(string)
	case ProviderContentDelta_FieldPathSelectorChannel:
		(*target).Channel = fpv.value.(common_client.ContentChannel)
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderContentDelta: %d", fpv.selector))
	}
}

func (fpv *ProviderContentDelta_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProviderContentDelta)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProviderContentDelta_FieldTerminalPathValue' with the value under path in 'ProviderContentDelta'.
func (fpv *ProviderContentDelta_FieldTerminalPathValue) CompareWith(source *ProviderContentDelta) (int, bool) {
	switch fpv.selector {
	case ProviderContentDelta_FieldPathSelectorText:
		leftValue := fpv.value.(string)
		rightValue := source.GetText()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProviderContentDelta_FieldPathSelectorChannel:
		leftValue := fpv.value.(common_client.ContentChannel)
		rightValue := source.GetChannel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderContentDelta: %d", fpv.selector))
	}
}

func (fpv *ProviderContentDelta_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProviderContentDelta))
}

// ProviderContentDelta_FieldPathArrayItemValue allows storing single item in Path-specific values for ProviderContentDelta according to their type
// Present only for array (repeated) types.
type ProviderContentDelta_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProviderContentDelta_FieldPath
	ContainsValue(*ProviderContentDelta) bool
}

// ParseProviderContentDelta_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProviderContentDelta_FieldPathArrayItemValue(pathStr, valueStr string) (ProviderContentDelta_FieldPathArrayItemValue, error) {
	fp, err := ParseProviderContentDelta_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProviderContentDelta field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProviderContentDelta_FieldPathArrayItemValue), nil
}

func MustParseProviderContentDelta_FieldPathArrayItemValue(pathStr, valueStr string) ProviderContentDelta_FieldPathArrayItemValue {
	fpaiv, err := ParseProviderContentDelta_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProviderContentDelta_FieldTerminalPathArrayItemValue struct {
	ProviderContentDelta_FieldTerminalPath
	value interface{}
}

var _ ProviderContentDelta_FieldPathArrayItemValue = (*ProviderContentDelta_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProviderContentDelta as interface{}
func (fpaiv *ProviderContentDelta_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProviderContentDelta_FieldTerminalPathArrayItemValue) GetSingle(source *ProviderContentDelta) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProviderContentDelta_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProviderContentDelta))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProviderContentDelta'
func (fpaiv *ProviderContentDelta_FieldTerminalPathArrayItemValue) ContainsValue(source *ProviderContentDelta) bool {
	slice := fpaiv.ProviderContentDelta_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProviderContentDelta_FieldPathArrayOfValues allows storing slice of values for ProviderContentDelta fields according to their type
type ProviderContentDelta_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProviderContentDelta_FieldPath
}

func ParseProviderContentDelta_FieldPathArrayOfValues(pathStr, valuesStr string) (ProviderContentDelta_FieldPathArrayOfValues, error) {
	fp, err := ParseProviderContentDelta_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProviderContentDelta field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProviderContentDelta_FieldPathArrayOfValues), nil
}

func MustParseProviderContentDelta_FieldPathArrayOfValues(pathStr, valuesStr string) ProviderContentDelta_FieldPathArrayOfValues {
	fpaov, err := ParseProviderContentDelta_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProviderContentDelta_FieldTerminalPathArrayOfValues struct {
	ProviderContentDelta_FieldTerminalPath
	values interface{}
}

var _ ProviderContentDelta_FieldPathArrayOfValues = (*ProviderContentDelta_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProviderContentDelta_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProviderContentDelta_FieldPathSelectorText:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProviderContentDelta_FieldPathSelectorChannel:
		for _, v := range fpaov.values.([]common_client.ContentChannel) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProviderContentDelta_FieldTerminalPathArrayOfValues) AsTextArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProviderContentDelta_FieldTerminalPathArrayOfValues) AsChannelArrayOfValues() ([]common_client.ContentChannel, bool) {
	res, ok := fpaov.values.([]common_client.ContentChannel)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type StreamError_FieldPath interface {
	gotenobject.FieldPath
	Selector() StreamError_FieldPathSelector
	Get(source *StreamError) []interface{}
	GetSingle(source *StreamError) (interface{}, bool)
	ClearValue(item *StreamError)

	// Those methods build corresponding StreamError_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) StreamError_FieldPathValue
	WithIArrayOfValues(values interface{}) StreamError_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) StreamError_FieldPathArrayItemValue
}

type StreamError_FieldPathSelector int32

const (
	StreamError_FieldPathSelectorType    StreamError_FieldPathSelector = 0
	StreamError_FieldPathSelectorMessage StreamError_FieldPathSelector = 1
)

func (s StreamError_FieldPathSelector) String() string {
	switch s {
	case StreamError_FieldPathSelectorType:
		return "type"
	case StreamError_FieldPathSelectorMessage:
		return "message"
	default:
		panic(fmt.Sprintf("Invalid selector for StreamError: %d", s))
	}
}

func BuildStreamError_FieldPath(fp gotenobject.RawFieldPath) (StreamError_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object StreamError")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &StreamError_FieldTerminalPath{selector: StreamError_FieldPathSelectorType}, nil
		case "message":
			return &StreamError_FieldTerminalPath{selector: StreamError_FieldPathSelectorMessage}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object StreamError", fp)
}

func ParseStreamError_FieldPath(rawField string) (StreamError_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildStreamError_FieldPath(fp)
}

func MustParseStreamError_FieldPath(rawField string) StreamError_FieldPath {
	fp, err := ParseStreamError_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type StreamError_FieldTerminalPath struct {
	selector StreamError_FieldPathSelector
}

var _ StreamError_FieldPath = (*StreamError_FieldTerminalPath)(nil)

func (fp *StreamError_FieldTerminalPath) Selector() StreamError_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *StreamError_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *StreamError_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source StreamError
func (fp *StreamError_FieldTerminalPath) Get(source *StreamError) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case StreamError_FieldPathSelectorType:
			values = append(values, source.Type)
		case StreamError_FieldPathSelectorMessage:
			values = append(values, source.Message)
		default:
			panic(fmt.Sprintf("Invalid selector for StreamError: %d", fp.selector))
		}
	}
	return
}

func (fp *StreamError_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*StreamError))
}

// GetSingle returns value pointed by specific field of from source StreamError
func (fp *StreamError_FieldTerminalPath) GetSingle(source *StreamError) (interface{}, bool) {
	switch fp.selector {
	case StreamError_FieldPathSelectorType:
		return source.GetType(), source != nil
	case StreamError_FieldPathSelectorMessage:
		return source.GetMessage(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for StreamError: %d", fp.selector))
	}
}

func (fp *StreamError_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*StreamError))
}

// GetDefault returns a default value of the field type
func (fp *StreamError_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case StreamError_FieldPathSelectorType:
		return StreamError_ERROR_TYPE_UNSPECIFIED
	case StreamError_FieldPathSelectorMessage:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for StreamError: %d", fp.selector))
	}
}

func (fp *StreamError_FieldTerminalPath) ClearValue(item *StreamError) {
	if item != nil {
		switch fp.selector {
		case StreamError_FieldPathSelectorType:
			item.Type = StreamError_ERROR_TYPE_UNSPECIFIED
		case StreamError_FieldPathSelectorMessage:
			item.Message = ""
		default:
			panic(fmt.Sprintf("Invalid selector for StreamError: %d", fp.selector))
		}
	}
}

func (fp *StreamError_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*StreamError))
}

// IsLeaf - whether field path is holds simple value
func (fp *StreamError_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == StreamError_FieldPathSelectorType ||
		fp.selector == StreamError_FieldPathSelectorMessage
}

func (fp *StreamError_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *StreamError_FieldTerminalPath) WithIValue(value interface{}) StreamError_FieldPathValue {
	switch fp.selector {
	case StreamError_FieldPathSelectorType:
		return &StreamError_FieldTerminalPathValue{StreamError_FieldTerminalPath: *fp, value: value.(StreamError_ErrorType)}
	case StreamError_FieldPathSelectorMessage:
		return &StreamError_FieldTerminalPathValue{StreamError_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for StreamError: %d", fp.selector))
	}
}

func (fp *StreamError_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *StreamError_FieldTerminalPath) WithIArrayOfValues(values interface{}) StreamError_FieldPathArrayOfValues {
	fpaov := &StreamError_FieldTerminalPathArrayOfValues{StreamError_FieldTerminalPath: *fp}
	switch fp.selector {
	case StreamError_FieldPathSelectorType:
		return &StreamError_FieldTerminalPathArrayOfValues{StreamError_FieldTerminalPath: *fp, values: values.([]StreamError_ErrorType)}
	case StreamError_FieldPathSelectorMessage:
		return &StreamError_FieldTerminalPathArrayOfValues{StreamError_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for StreamError: %d", fp.selector))
	}
	return fpaov
}

func (fp *StreamError_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *StreamError_FieldTerminalPath) WithIArrayItemValue(value interface{}) StreamError_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for StreamError: %d", fp.selector))
	}
}

func (fp *StreamError_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// StreamError_FieldPathValue allows storing values for StreamError fields according to their type
type StreamError_FieldPathValue interface {
	StreamError_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **StreamError)
	CompareWith(*StreamError) (cmp int, comparable bool)
}

func ParseStreamError_FieldPathValue(pathStr, valueStr string) (StreamError_FieldPathValue, error) {
	fp, err := ParseStreamError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StreamError field path value from %s: %v", valueStr, err)
	}
	return fpv.(StreamError_FieldPathValue), nil
}

func MustParseStreamError_FieldPathValue(pathStr, valueStr string) StreamError_FieldPathValue {
	fpv, err := ParseStreamError_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type StreamError_FieldTerminalPathValue struct {
	StreamError_FieldTerminalPath
	value interface{}
}

var _ StreamError_FieldPathValue = (*StreamError_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'StreamError' as interface{}
func (fpv *StreamError_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *StreamError_FieldTerminalPathValue) AsTypeValue() (StreamError_ErrorType, bool) {
	res, ok := fpv.value.(StreamError_ErrorType)
	return res, ok
}
func (fpv *StreamError_FieldTerminalPathValue) AsMessageValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object StreamError
func (fpv *StreamError_FieldTerminalPathValue) SetTo(target **StreamError) {
	if *target == nil {
		*target = new(StreamError)
	}
	switch fpv.selector {
	case StreamError_FieldPathSelectorType:
		(*target).Type = fpv.value.(StreamError_ErrorType)
	case StreamError_FieldPathSelectorMessage:
		(*target).Message = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for StreamError: %d", fpv.selector))
	}
}

func (fpv *StreamError_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*StreamError)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'StreamError_FieldTerminalPathValue' with the value under path in 'StreamError'.
func (fpv *StreamError_FieldTerminalPathValue) CompareWith(source *StreamError) (int, bool) {
	switch fpv.selector {
	case StreamError_FieldPathSelectorType:
		leftValue := fpv.value.(StreamError_ErrorType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case StreamError_FieldPathSelectorMessage:
		leftValue := fpv.value.(string)
		rightValue := source.GetMessage()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for StreamError: %d", fpv.selector))
	}
}

func (fpv *StreamError_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*StreamError))
}

// StreamError_FieldPathArrayItemValue allows storing single item in Path-specific values for StreamError according to their type
// Present only for array (repeated) types.
type StreamError_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	StreamError_FieldPath
	ContainsValue(*StreamError) bool
}

// ParseStreamError_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseStreamError_FieldPathArrayItemValue(pathStr, valueStr string) (StreamError_FieldPathArrayItemValue, error) {
	fp, err := ParseStreamError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StreamError field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(StreamError_FieldPathArrayItemValue), nil
}

func MustParseStreamError_FieldPathArrayItemValue(pathStr, valueStr string) StreamError_FieldPathArrayItemValue {
	fpaiv, err := ParseStreamError_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type StreamError_FieldTerminalPathArrayItemValue struct {
	StreamError_FieldTerminalPath
	value interface{}
}

var _ StreamError_FieldPathArrayItemValue = (*StreamError_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object StreamError as interface{}
func (fpaiv *StreamError_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *StreamError_FieldTerminalPathArrayItemValue) GetSingle(source *StreamError) (interface{}, bool) {
	return nil, false
}

func (fpaiv *StreamError_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*StreamError))
}

// Contains returns a boolean indicating if value that is being held is present in given 'StreamError'
func (fpaiv *StreamError_FieldTerminalPathArrayItemValue) ContainsValue(source *StreamError) bool {
	slice := fpaiv.StreamError_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// StreamError_FieldPathArrayOfValues allows storing slice of values for StreamError fields according to their type
type StreamError_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	StreamError_FieldPath
}

func ParseStreamError_FieldPathArrayOfValues(pathStr, valuesStr string) (StreamError_FieldPathArrayOfValues, error) {
	fp, err := ParseStreamError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StreamError field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(StreamError_FieldPathArrayOfValues), nil
}

func MustParseStreamError_FieldPathArrayOfValues(pathStr, valuesStr string) StreamError_FieldPathArrayOfValues {
	fpaov, err := ParseStreamError_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type StreamError_FieldTerminalPathArrayOfValues struct {
	StreamError_FieldTerminalPath
	values interface{}
}

var _ StreamError_FieldPathArrayOfValues = (*StreamError_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *StreamError_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case StreamError_FieldPathSelectorType:
		for _, v := range fpaov.values.([]StreamError_ErrorType) {
			values = append(values, v)
		}
	case StreamError_FieldPathSelectorMessage:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *StreamError_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]StreamError_ErrorType, bool) {
	res, ok := fpaov.values.([]StreamError_ErrorType)
	return res, ok
}
func (fpaov *StreamError_FieldTerminalPathArrayOfValues) AsMessageArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BlockEnd_FieldPath interface {
	gotenobject.FieldPath
	Selector() BlockEnd_FieldPathSelector
	Get(source *BlockEnd) []interface{}
	GetSingle(source *BlockEnd) (interface{}, bool)
	ClearValue(item *BlockEnd)

	// Those methods build corresponding BlockEnd_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BlockEnd_FieldPathValue
	WithIArrayOfValues(values interface{}) BlockEnd_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BlockEnd_FieldPathArrayItemValue
}

type BlockEnd_FieldPathSelector int32

const (
	BlockEnd_FieldPathSelectorChannel   BlockEnd_FieldPathSelector = 0
	BlockEnd_FieldPathSelectorSignature BlockEnd_FieldPathSelector = 1
)

func (s BlockEnd_FieldPathSelector) String() string {
	switch s {
	case BlockEnd_FieldPathSelectorChannel:
		return "channel"
	case BlockEnd_FieldPathSelectorSignature:
		return "signature"
	default:
		panic(fmt.Sprintf("Invalid selector for BlockEnd: %d", s))
	}
}

func BuildBlockEnd_FieldPath(fp gotenobject.RawFieldPath) (BlockEnd_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BlockEnd")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "channel":
			return &BlockEnd_FieldTerminalPath{selector: BlockEnd_FieldPathSelectorChannel}, nil
		case "signature":
			return &BlockEnd_FieldTerminalPath{selector: BlockEnd_FieldPathSelectorSignature}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BlockEnd", fp)
}

func ParseBlockEnd_FieldPath(rawField string) (BlockEnd_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBlockEnd_FieldPath(fp)
}

func MustParseBlockEnd_FieldPath(rawField string) BlockEnd_FieldPath {
	fp, err := ParseBlockEnd_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BlockEnd_FieldTerminalPath struct {
	selector BlockEnd_FieldPathSelector
}

var _ BlockEnd_FieldPath = (*BlockEnd_FieldTerminalPath)(nil)

func (fp *BlockEnd_FieldTerminalPath) Selector() BlockEnd_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BlockEnd_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BlockEnd_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BlockEnd
func (fp *BlockEnd_FieldTerminalPath) Get(source *BlockEnd) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BlockEnd_FieldPathSelectorChannel:
			values = append(values, source.Channel)
		case BlockEnd_FieldPathSelectorSignature:
			values = append(values, source.Signature)
		default:
			panic(fmt.Sprintf("Invalid selector for BlockEnd: %d", fp.selector))
		}
	}
	return
}

func (fp *BlockEnd_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BlockEnd))
}

// GetSingle returns value pointed by specific field of from source BlockEnd
func (fp *BlockEnd_FieldTerminalPath) GetSingle(source *BlockEnd) (interface{}, bool) {
	switch fp.selector {
	case BlockEnd_FieldPathSelectorChannel:
		return source.GetChannel(), source != nil
	case BlockEnd_FieldPathSelectorSignature:
		return source.GetSignature(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BlockEnd: %d", fp.selector))
	}
}

func (fp *BlockEnd_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BlockEnd))
}

// GetDefault returns a default value of the field type
func (fp *BlockEnd_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BlockEnd_FieldPathSelectorChannel:
		return common_client.ContentChannel_CONTENT_CHANNEL_UNSPECIFIED
	case BlockEnd_FieldPathSelectorSignature:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for BlockEnd: %d", fp.selector))
	}
}

func (fp *BlockEnd_FieldTerminalPath) ClearValue(item *BlockEnd) {
	if item != nil {
		switch fp.selector {
		case BlockEnd_FieldPathSelectorChannel:
			item.Channel = common_client.ContentChannel_CONTENT_CHANNEL_UNSPECIFIED
		case BlockEnd_FieldPathSelectorSignature:
			item.Signature = ""
		default:
			panic(fmt.Sprintf("Invalid selector for BlockEnd: %d", fp.selector))
		}
	}
}

func (fp *BlockEnd_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BlockEnd))
}

// IsLeaf - whether field path is holds simple value
func (fp *BlockEnd_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BlockEnd_FieldPathSelectorChannel ||
		fp.selector == BlockEnd_FieldPathSelectorSignature
}

func (fp *BlockEnd_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BlockEnd_FieldTerminalPath) WithIValue(value interface{}) BlockEnd_FieldPathValue {
	switch fp.selector {
	case BlockEnd_FieldPathSelectorChannel:
		return &BlockEnd_FieldTerminalPathValue{BlockEnd_FieldTerminalPath: *fp, value: value.(common_client.ContentChannel)}
	case BlockEnd_FieldPathSelectorSignature:
		return &BlockEnd_FieldTerminalPathValue{BlockEnd_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BlockEnd: %d", fp.selector))
	}
}

func (fp *BlockEnd_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BlockEnd_FieldTerminalPath) WithIArrayOfValues(values interface{}) BlockEnd_FieldPathArrayOfValues {
	fpaov := &BlockEnd_FieldTerminalPathArrayOfValues{BlockEnd_FieldTerminalPath: *fp}
	switch fp.selector {
	case BlockEnd_FieldPathSelectorChannel:
		return &BlockEnd_FieldTerminalPathArrayOfValues{BlockEnd_FieldTerminalPath: *fp, values: values.([]common_client.ContentChannel)}
	case BlockEnd_FieldPathSelectorSignature:
		return &BlockEnd_FieldTerminalPathArrayOfValues{BlockEnd_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for BlockEnd: %d", fp.selector))
	}
	return fpaov
}

func (fp *BlockEnd_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BlockEnd_FieldTerminalPath) WithIArrayItemValue(value interface{}) BlockEnd_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for BlockEnd: %d", fp.selector))
	}
}

func (fp *BlockEnd_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BlockEnd_FieldPathValue allows storing values for BlockEnd fields according to their type
type BlockEnd_FieldPathValue interface {
	BlockEnd_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BlockEnd)
	CompareWith(*BlockEnd) (cmp int, comparable bool)
}

func ParseBlockEnd_FieldPathValue(pathStr, valueStr string) (BlockEnd_FieldPathValue, error) {
	fp, err := ParseBlockEnd_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BlockEnd field path value from %s: %v", valueStr, err)
	}
	return fpv.(BlockEnd_FieldPathValue), nil
}

func MustParseBlockEnd_FieldPathValue(pathStr, valueStr string) BlockEnd_FieldPathValue {
	fpv, err := ParseBlockEnd_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BlockEnd_FieldTerminalPathValue struct {
	BlockEnd_FieldTerminalPath
	value interface{}
}

var _ BlockEnd_FieldPathValue = (*BlockEnd_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BlockEnd' as interface{}
func (fpv *BlockEnd_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BlockEnd_FieldTerminalPathValue) AsChannelValue() (common_client.ContentChannel, bool) {
	res, ok := fpv.value.(common_client.ContentChannel)
	return res, ok
}
func (fpv *BlockEnd_FieldTerminalPathValue) AsSignatureValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object BlockEnd
func (fpv *BlockEnd_FieldTerminalPathValue) SetTo(target **BlockEnd) {
	if *target == nil {
		*target = new(BlockEnd)
	}
	switch fpv.selector {
	case BlockEnd_FieldPathSelectorChannel:
		(*target).Channel = fpv.value.(common_client.ContentChannel)
	case BlockEnd_FieldPathSelectorSignature:
		(*target).Signature = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for BlockEnd: %d", fpv.selector))
	}
}

func (fpv *BlockEnd_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BlockEnd)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BlockEnd_FieldTerminalPathValue' with the value under path in 'BlockEnd'.
func (fpv *BlockEnd_FieldTerminalPathValue) CompareWith(source *BlockEnd) (int, bool) {
	switch fpv.selector {
	case BlockEnd_FieldPathSelectorChannel:
		leftValue := fpv.value.(common_client.ContentChannel)
		rightValue := source.GetChannel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case BlockEnd_FieldPathSelectorSignature:
		leftValue := fpv.value.(string)
		rightValue := source.GetSignature()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BlockEnd: %d", fpv.selector))
	}
}

func (fpv *BlockEnd_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BlockEnd))
}

// BlockEnd_FieldPathArrayItemValue allows storing single item in Path-specific values for BlockEnd according to their type
// Present only for array (repeated) types.
type BlockEnd_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BlockEnd_FieldPath
	ContainsValue(*BlockEnd) bool
}

// ParseBlockEnd_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBlockEnd_FieldPathArrayItemValue(pathStr, valueStr string) (BlockEnd_FieldPathArrayItemValue, error) {
	fp, err := ParseBlockEnd_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BlockEnd field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BlockEnd_FieldPathArrayItemValue), nil
}

func MustParseBlockEnd_FieldPathArrayItemValue(pathStr, valueStr string) BlockEnd_FieldPathArrayItemValue {
	fpaiv, err := ParseBlockEnd_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BlockEnd_FieldTerminalPathArrayItemValue struct {
	BlockEnd_FieldTerminalPath
	value interface{}
}

var _ BlockEnd_FieldPathArrayItemValue = (*BlockEnd_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BlockEnd as interface{}
func (fpaiv *BlockEnd_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *BlockEnd_FieldTerminalPathArrayItemValue) GetSingle(source *BlockEnd) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BlockEnd_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BlockEnd))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BlockEnd'
func (fpaiv *BlockEnd_FieldTerminalPathArrayItemValue) ContainsValue(source *BlockEnd) bool {
	slice := fpaiv.BlockEnd_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BlockEnd_FieldPathArrayOfValues allows storing slice of values for BlockEnd fields according to their type
type BlockEnd_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BlockEnd_FieldPath
}

func ParseBlockEnd_FieldPathArrayOfValues(pathStr, valuesStr string) (BlockEnd_FieldPathArrayOfValues, error) {
	fp, err := ParseBlockEnd_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BlockEnd field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BlockEnd_FieldPathArrayOfValues), nil
}

func MustParseBlockEnd_FieldPathArrayOfValues(pathStr, valuesStr string) BlockEnd_FieldPathArrayOfValues {
	fpaov, err := ParseBlockEnd_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BlockEnd_FieldTerminalPathArrayOfValues struct {
	BlockEnd_FieldTerminalPath
	values interface{}
}

var _ BlockEnd_FieldPathArrayOfValues = (*BlockEnd_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BlockEnd_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BlockEnd_FieldPathSelectorChannel:
		for _, v := range fpaov.values.([]common_client.ContentChannel) {
			values = append(values, v)
		}
	case BlockEnd_FieldPathSelectorSignature:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BlockEnd_FieldTerminalPathArrayOfValues) AsChannelArrayOfValues() ([]common_client.ContentChannel, bool) {
	res, ok := fpaov.values.([]common_client.ContentChannel)
	return res, ok
}
func (fpaov *BlockEnd_FieldTerminalPathArrayOfValues) AsSignatureArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProviderStreamEvent_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProviderStreamEvent_FieldPathSelector
	Get(source *ProviderStreamEvent) []interface{}
	GetSingle(source *ProviderStreamEvent) (interface{}, bool)
	ClearValue(item *ProviderStreamEvent)

	// Those methods build corresponding ProviderStreamEvent_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProviderStreamEvent_FieldPathValue
	WithIArrayOfValues(values interface{}) ProviderStreamEvent_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProviderStreamEvent_FieldPathArrayItemValue
}

type ProviderStreamEvent_FieldPathSelector int32

const (
	ProviderStreamEvent_FieldPathSelectorDelta     ProviderStreamEvent_FieldPathSelector = 0
	ProviderStreamEvent_FieldPathSelectorUsage     ProviderStreamEvent_FieldPathSelector = 1
	ProviderStreamEvent_FieldPathSelectorError     ProviderStreamEvent_FieldPathSelector = 2
	ProviderStreamEvent_FieldPathSelectorDone      ProviderStreamEvent_FieldPathSelector = 3
	ProviderStreamEvent_FieldPathSelectorToolCalls ProviderStreamEvent_FieldPathSelector = 4
	ProviderStreamEvent_FieldPathSelectorCitation  ProviderStreamEvent_FieldPathSelector = 5
	ProviderStreamEvent_FieldPathSelectorBlockEnd  ProviderStreamEvent_FieldPathSelector = 6
)

func (s ProviderStreamEvent_FieldPathSelector) String() string {
	switch s {
	case ProviderStreamEvent_FieldPathSelectorDelta:
		return "delta"
	case ProviderStreamEvent_FieldPathSelectorUsage:
		return "usage"
	case ProviderStreamEvent_FieldPathSelectorError:
		return "error"
	case ProviderStreamEvent_FieldPathSelectorDone:
		return "done"
	case ProviderStreamEvent_FieldPathSelectorToolCalls:
		return "tool_calls"
	case ProviderStreamEvent_FieldPathSelectorCitation:
		return "citation"
	case ProviderStreamEvent_FieldPathSelectorBlockEnd:
		return "block_end"
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", s))
	}
}

func BuildProviderStreamEvent_FieldPath(fp gotenobject.RawFieldPath) (ProviderStreamEvent_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProviderStreamEvent")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "delta":
			return &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorDelta}, nil
		case "usage":
			return &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorUsage}, nil
		case "error":
			return &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorError}, nil
		case "done":
			return &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorDone}, nil
		case "tool_calls", "toolCalls", "tool-calls":
			return &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorToolCalls}, nil
		case "citation":
			return &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorCitation}, nil
		case "block_end", "blockEnd", "block-end":
			return &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorBlockEnd}, nil
		}
	} else {
		switch fp[0] {
		case "delta":
			if subpath, err := BuildProviderContentDelta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProviderStreamEvent_FieldSubPath{selector: ProviderStreamEvent_FieldPathSelectorDelta, subPath: subpath}, nil
			}
		case "error":
			if subpath, err := BuildStreamError_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProviderStreamEvent_FieldSubPath{selector: ProviderStreamEvent_FieldPathSelectorError, subPath: subpath}, nil
			}
		case "done":
			if subpath, err := BuildProviderDone_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProviderStreamEvent_FieldSubPath{selector: ProviderStreamEvent_FieldPathSelectorDone, subPath: subpath}, nil
			}
		case "block_end", "blockEnd", "block-end":
			if subpath, err := BuildBlockEnd_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProviderStreamEvent_FieldSubPath{selector: ProviderStreamEvent_FieldPathSelectorBlockEnd, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProviderStreamEvent", fp)
}

func ParseProviderStreamEvent_FieldPath(rawField string) (ProviderStreamEvent_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProviderStreamEvent_FieldPath(fp)
}

func MustParseProviderStreamEvent_FieldPath(rawField string) ProviderStreamEvent_FieldPath {
	fp, err := ParseProviderStreamEvent_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProviderStreamEvent_FieldTerminalPath struct {
	selector ProviderStreamEvent_FieldPathSelector
}

var _ ProviderStreamEvent_FieldPath = (*ProviderStreamEvent_FieldTerminalPath)(nil)

func (fp *ProviderStreamEvent_FieldTerminalPath) Selector() ProviderStreamEvent_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProviderStreamEvent_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProviderStreamEvent_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProviderStreamEvent
func (fp *ProviderStreamEvent_FieldTerminalPath) Get(source *ProviderStreamEvent) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProviderStreamEvent_FieldPathSelectorDelta:
			if source, ok := source.Event.(*ProviderStreamEvent_Delta); ok && source != nil {
				if source.Delta != nil {
					values = append(values, source.Delta)
				}
			}
		case ProviderStreamEvent_FieldPathSelectorUsage:
			if source, ok := source.Event.(*ProviderStreamEvent_Usage); ok && source != nil {
				if source.Usage != nil {
					values = append(values, source.Usage)
				}
			}
		case ProviderStreamEvent_FieldPathSelectorError:
			if source, ok := source.Event.(*ProviderStreamEvent_Error); ok && source != nil {
				if source.Error != nil {
					values = append(values, source.Error)
				}
			}
		case ProviderStreamEvent_FieldPathSelectorDone:
			if source, ok := source.Event.(*ProviderStreamEvent_Done); ok && source != nil {
				if source.Done != nil {
					values = append(values, source.Done)
				}
			}
		case ProviderStreamEvent_FieldPathSelectorToolCalls:
			if source, ok := source.Event.(*ProviderStreamEvent_ToolCalls); ok && source != nil {
				if source.ToolCalls != nil {
					values = append(values, source.ToolCalls)
				}
			}
		case ProviderStreamEvent_FieldPathSelectorCitation:
			if source, ok := source.Event.(*ProviderStreamEvent_Citation); ok && source != nil {
				if source.Citation != nil {
					values = append(values, source.Citation)
				}
			}
		case ProviderStreamEvent_FieldPathSelectorBlockEnd:
			if source, ok := source.Event.(*ProviderStreamEvent_BlockEnd); ok && source != nil {
				if source.BlockEnd != nil {
					values = append(values, source.BlockEnd)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fp.selector))
		}
	}
	return
}

func (fp *ProviderStreamEvent_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProviderStreamEvent))
}

// GetSingle returns value pointed by specific field of from source ProviderStreamEvent
func (fp *ProviderStreamEvent_FieldTerminalPath) GetSingle(source *ProviderStreamEvent) (interface{}, bool) {
	switch fp.selector {
	case ProviderStreamEvent_FieldPathSelectorDelta:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetDelta(), false
		}
		_, oneOfSelected := source.Event.(*ProviderStreamEvent_Delta)
		if !oneOfSelected {
			return source.GetDelta(), false // to return "type" information
		}
		res := source.GetDelta()
		return res, res != nil
	case ProviderStreamEvent_FieldPathSelectorUsage:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetUsage(), false
		}
		_, oneOfSelected := source.Event.(*ProviderStreamEvent_Usage)
		if !oneOfSelected {
			return source.GetUsage(), false // to return "type" information
		}
		res := source.GetUsage()
		return res, res != nil
	case ProviderStreamEvent_FieldPathSelectorError:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetError(), false
		}
		_, oneOfSelected := source.Event.(*ProviderStreamEvent_Error)
		if !oneOfSelected {
			return source.GetError(), false // to return "type" information
		}
		res := source.GetError()
		return res, res != nil
	case ProviderStreamEvent_FieldPathSelectorDone:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetDone(), false
		}
		_, oneOfSelected := source.Event.(*ProviderStreamEvent_Done)
		if !oneOfSelected {
			return source.GetDone(), false // to return "type" information
		}
		res := source.GetDone()
		return res, res != nil
	case ProviderStreamEvent_FieldPathSelectorToolCalls:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetToolCalls(), false
		}
		_, oneOfSelected := source.Event.(*ProviderStreamEvent_ToolCalls)
		if !oneOfSelected {
			return source.GetToolCalls(), false // to return "type" information
		}
		res := source.GetToolCalls()
		return res, res != nil
	case ProviderStreamEvent_FieldPathSelectorCitation:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetCitation(), false
		}
		_, oneOfSelected := source.Event.(*ProviderStreamEvent_Citation)
		if !oneOfSelected {
			return source.GetCitation(), false // to return "type" information
		}
		res := source.GetCitation()
		return res, res != nil
	case ProviderStreamEvent_FieldPathSelectorBlockEnd:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetBlockEnd(), false
		}
		_, oneOfSelected := source.Event.(*ProviderStreamEvent_BlockEnd)
		if !oneOfSelected {
			return source.GetBlockEnd(), false // to return "type" information
		}
		res := source.GetBlockEnd()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fp.selector))
	}
}

func (fp *ProviderStreamEvent_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProviderStreamEvent))
}

// GetDefault returns a default value of the field type
func (fp *ProviderStreamEvent_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProviderStreamEvent_FieldPathSelectorDelta:
		return (*ProviderContentDelta)(nil)
	case ProviderStreamEvent_FieldPathSelectorUsage:
		return (*common_client.TokenUsage)(nil)
	case ProviderStreamEvent_FieldPathSelectorError:
		return (*StreamError)(nil)
	case ProviderStreamEvent_FieldPathSelectorDone:
		return (*ProviderDone)(nil)
	case ProviderStreamEvent_FieldPathSelectorToolCalls:
		return (*common_client.ToolCalls)(nil)
	case ProviderStreamEvent_FieldPathSelectorCitation:
		return (*common_client.Citation)(nil)
	case ProviderStreamEvent_FieldPathSelectorBlockEnd:
		return (*BlockEnd)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fp.selector))
	}
}

func (fp *ProviderStreamEvent_FieldTerminalPath) ClearValue(item *ProviderStreamEvent) {
	if item != nil {
		switch fp.selector {
		case ProviderStreamEvent_FieldPathSelectorDelta:
			if item, ok := item.Event.(*ProviderStreamEvent_Delta); ok {
				item.Delta = nil
			}
		case ProviderStreamEvent_FieldPathSelectorUsage:
			if item, ok := item.Event.(*ProviderStreamEvent_Usage); ok {
				item.Usage = nil
			}
		case ProviderStreamEvent_FieldPathSelectorError:
			if item, ok := item.Event.(*ProviderStreamEvent_Error); ok {
				item.Error = nil
			}
		case ProviderStreamEvent_FieldPathSelectorDone:
			if item, ok := item.Event.(*ProviderStreamEvent_Done); ok {
				item.Done = nil
			}
		case ProviderStreamEvent_FieldPathSelectorToolCalls:
			if item, ok := item.Event.(*ProviderStreamEvent_ToolCalls); ok {
				item.ToolCalls = nil
			}
		case ProviderStreamEvent_FieldPathSelectorCitation:
			if item, ok := item.Event.(*ProviderStreamEvent_Citation); ok {
				item.Citation = nil
			}
		case ProviderStreamEvent_FieldPathSelectorBlockEnd:
			if item, ok := item.Event.(*ProviderStreamEvent_BlockEnd); ok {
				item.BlockEnd = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fp.selector))
		}
	}
}

func (fp *ProviderStreamEvent_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProviderStreamEvent))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProviderStreamEvent_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProviderStreamEvent_FieldPathSelectorUsage ||
		fp.selector == ProviderStreamEvent_FieldPathSelectorToolCalls ||
		fp.selector == ProviderStreamEvent_FieldPathSelectorCitation
}

func (fp *ProviderStreamEvent_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProviderStreamEvent_FieldTerminalPath) WithIValue(value interface{}) ProviderStreamEvent_FieldPathValue {
	switch fp.selector {
	case ProviderStreamEvent_FieldPathSelectorDelta:
		return &ProviderStreamEvent_FieldTerminalPathValue{ProviderStreamEvent_FieldTerminalPath: *fp, value: value.(*ProviderContentDelta)}
	case ProviderStreamEvent_FieldPathSelectorUsage:
		return &ProviderStreamEvent_FieldTerminalPathValue{ProviderStreamEvent_FieldTerminalPath: *fp, value: value.(*common_client.TokenUsage)}
	case ProviderStreamEvent_FieldPathSelectorError:
		return &ProviderStreamEvent_FieldTerminalPathValue{ProviderStreamEvent_FieldTerminalPath: *fp, value: value.(*StreamError)}
	case ProviderStreamEvent_FieldPathSelectorDone:
		return &ProviderStreamEvent_FieldTerminalPathValue{ProviderStreamEvent_FieldTerminalPath: *fp, value: value.(*ProviderDone)}
	case ProviderStreamEvent_FieldPathSelectorToolCalls:
		return &ProviderStreamEvent_FieldTerminalPathValue{ProviderStreamEvent_FieldTerminalPath: *fp, value: value.(*common_client.ToolCalls)}
	case ProviderStreamEvent_FieldPathSelectorCitation:
		return &ProviderStreamEvent_FieldTerminalPathValue{ProviderStreamEvent_FieldTerminalPath: *fp, value: value.(*common_client.Citation)}
	case ProviderStreamEvent_FieldPathSelectorBlockEnd:
		return &ProviderStreamEvent_FieldTerminalPathValue{ProviderStreamEvent_FieldTerminalPath: *fp, value: value.(*BlockEnd)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fp.selector))
	}
}

func (fp *ProviderStreamEvent_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProviderStreamEvent_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProviderStreamEvent_FieldPathArrayOfValues {
	fpaov := &ProviderStreamEvent_FieldTerminalPathArrayOfValues{ProviderStreamEvent_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProviderStreamEvent_FieldPathSelectorDelta:
		return &ProviderStreamEvent_FieldTerminalPathArrayOfValues{ProviderStreamEvent_FieldTerminalPath: *fp, values: values.([]*ProviderContentDelta)}
	case ProviderStreamEvent_FieldPathSelectorUsage:
		return &ProviderStreamEvent_FieldTerminalPathArrayOfValues{ProviderStreamEvent_FieldTerminalPath: *fp, values: values.([]*common_client.TokenUsage)}
	case ProviderStreamEvent_FieldPathSelectorError:
		return &ProviderStreamEvent_FieldTerminalPathArrayOfValues{ProviderStreamEvent_FieldTerminalPath: *fp, values: values.([]*StreamError)}
	case ProviderStreamEvent_FieldPathSelectorDone:
		return &ProviderStreamEvent_FieldTerminalPathArrayOfValues{ProviderStreamEvent_FieldTerminalPath: *fp, values: values.([]*ProviderDone)}
	case ProviderStreamEvent_FieldPathSelectorToolCalls:
		return &ProviderStreamEvent_FieldTerminalPathArrayOfValues{ProviderStreamEvent_FieldTerminalPath: *fp, values: values.([]*common_client.ToolCalls)}
	case ProviderStreamEvent_FieldPathSelectorCitation:
		return &ProviderStreamEvent_FieldTerminalPathArrayOfValues{ProviderStreamEvent_FieldTerminalPath: *fp, values: values.([]*common_client.Citation)}
	case ProviderStreamEvent_FieldPathSelectorBlockEnd:
		return &ProviderStreamEvent_FieldTerminalPathArrayOfValues{ProviderStreamEvent_FieldTerminalPath: *fp, values: values.([]*BlockEnd)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProviderStreamEvent_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProviderStreamEvent_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProviderStreamEvent_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fp.selector))
	}
}

func (fp *ProviderStreamEvent_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProviderStreamEvent_FieldSubPath struct {
	selector ProviderStreamEvent_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProviderStreamEvent_FieldPath = (*ProviderStreamEvent_FieldSubPath)(nil)

func (fps *ProviderStreamEvent_FieldSubPath) Selector() ProviderStreamEvent_FieldPathSelector {
	return fps.selector
}
func (fps *ProviderStreamEvent_FieldSubPath) AsDeltaSubPath() (ProviderContentDelta_FieldPath, bool) {
	res, ok := fps.subPath.(ProviderContentDelta_FieldPath)
	return res, ok
}
func (fps *ProviderStreamEvent_FieldSubPath) AsErrorSubPath() (StreamError_FieldPath, bool) {
	res, ok := fps.subPath.(StreamError_FieldPath)
	return res, ok
}
func (fps *ProviderStreamEvent_FieldSubPath) AsDoneSubPath() (ProviderDone_FieldPath, bool) {
	res, ok := fps.subPath.(ProviderDone_FieldPath)
	return res, ok
}
func (fps *ProviderStreamEvent_FieldSubPath) AsBlockEndSubPath() (BlockEnd_FieldPath, bool) {
	res, ok := fps.subPath.(BlockEnd_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProviderStreamEvent_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProviderStreamEvent_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProviderStreamEvent
func (fps *ProviderStreamEvent_FieldSubPath) Get(source *ProviderStreamEvent) (values []interface{}) {
	switch fps.selector {
	case ProviderStreamEvent_FieldPathSelectorDelta:
		values = append(values, fps.subPath.GetRaw(source.GetDelta())...)
	case ProviderStreamEvent_FieldPathSelectorError:
		values = append(values, fps.subPath.GetRaw(source.GetError())...)
	case ProviderStreamEvent_FieldPathSelectorDone:
		values = append(values, fps.subPath.GetRaw(source.GetDone())...)
	case ProviderStreamEvent_FieldPathSelectorBlockEnd:
		values = append(values, fps.subPath.GetRaw(source.GetBlockEnd())...)
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fps.selector))
	}
	return
}

func (fps *ProviderStreamEvent_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProviderStreamEvent))
}

// GetSingle returns value of selected field from source ProviderStreamEvent
func (fps *ProviderStreamEvent_FieldSubPath) GetSingle(source *ProviderStreamEvent) (interface{}, bool) {
	switch fps.selector {
	case ProviderStreamEvent_FieldPathSelectorDelta:
		if source.GetDelta() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDelta())
	case ProviderStreamEvent_FieldPathSelectorError:
		if source.GetError() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetError())
	case ProviderStreamEvent_FieldPathSelectorDone:
		if source.GetDone() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDone())
	case ProviderStreamEvent_FieldPathSelectorBlockEnd:
		if source.GetBlockEnd() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetBlockEnd())
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fps.selector))
	}
}

func (fps *ProviderStreamEvent_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProviderStreamEvent))
}

// GetDefault returns a default value of the field type
func (fps *ProviderStreamEvent_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProviderStreamEvent_FieldSubPath) ClearValue(item *ProviderStreamEvent) {
	if item != nil {
		switch fps.selector {
		case ProviderStreamEvent_FieldPathSelectorDelta:
			if item.Event != nil {
				if item, ok := item.Event.(*ProviderStreamEvent_Delta); ok {
					fps.subPath.ClearValueRaw(item.Delta)
				}
			}
		case ProviderStreamEvent_FieldPathSelectorError:
			if item.Event != nil {
				if item, ok := item.Event.(*ProviderStreamEvent_Error); ok {
					fps.subPath.ClearValueRaw(item.Error)
				}
			}
		case ProviderStreamEvent_FieldPathSelectorDone:
			if item.Event != nil {
				if item, ok := item.Event.(*ProviderStreamEvent_Done); ok {
					fps.subPath.ClearValueRaw(item.Done)
				}
			}
		case ProviderStreamEvent_FieldPathSelectorBlockEnd:
			if item.Event != nil {
				if item, ok := item.Event.(*ProviderStreamEvent_BlockEnd); ok {
					fps.subPath.ClearValueRaw(item.BlockEnd)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fps.selector))
		}
	}
}

func (fps *ProviderStreamEvent_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProviderStreamEvent))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProviderStreamEvent_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProviderStreamEvent_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProviderStreamEvent_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProviderStreamEvent_FieldSubPath) WithIValue(value interface{}) ProviderStreamEvent_FieldPathValue {
	return &ProviderStreamEvent_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProviderStreamEvent_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProviderStreamEvent_FieldSubPath) WithIArrayOfValues(values interface{}) ProviderStreamEvent_FieldPathArrayOfValues {
	return &ProviderStreamEvent_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProviderStreamEvent_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProviderStreamEvent_FieldSubPath) WithIArrayItemValue(value interface{}) ProviderStreamEvent_FieldPathArrayItemValue {
	return &ProviderStreamEvent_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProviderStreamEvent_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProviderStreamEvent_FieldPathValue allows storing values for ProviderStreamEvent fields according to their type
type ProviderStreamEvent_FieldPathValue interface {
	ProviderStreamEvent_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProviderStreamEvent)
	CompareWith(*ProviderStreamEvent) (cmp int, comparable bool)
}

func ParseProviderStreamEvent_FieldPathValue(pathStr, valueStr string) (ProviderStreamEvent_FieldPathValue, error) {
	fp, err := ParseProviderStreamEvent_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProviderStreamEvent field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProviderStreamEvent_FieldPathValue), nil
}

func MustParseProviderStreamEvent_FieldPathValue(pathStr, valueStr string) ProviderStreamEvent_FieldPathValue {
	fpv, err := ParseProviderStreamEvent_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProviderStreamEvent_FieldTerminalPathValue struct {
	ProviderStreamEvent_FieldTerminalPath
	value interface{}
}

var _ ProviderStreamEvent_FieldPathValue = (*ProviderStreamEvent_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProviderStreamEvent' as interface{}
func (fpv *ProviderStreamEvent_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProviderStreamEvent_FieldTerminalPathValue) AsDeltaValue() (*ProviderContentDelta, bool) {
	res, ok := fpv.value.(*ProviderContentDelta)
	return res, ok
}
func (fpv *ProviderStreamEvent_FieldTerminalPathValue) AsUsageValue() (*common_client.TokenUsage, bool) {
	res, ok := fpv.value.(*common_client.TokenUsage)
	return res, ok
}
func (fpv *ProviderStreamEvent_FieldTerminalPathValue) AsErrorValue() (*StreamError, bool) {
	res, ok := fpv.value.(*StreamError)
	return res, ok
}
func (fpv *ProviderStreamEvent_FieldTerminalPathValue) AsDoneValue() (*ProviderDone, bool) {
	res, ok := fpv.value.(*ProviderDone)
	return res, ok
}
func (fpv *ProviderStreamEvent_FieldTerminalPathValue) AsToolCallsValue() (*common_client.ToolCalls, bool) {
	res, ok := fpv.value.(*common_client.ToolCalls)
	return res, ok
}
func (fpv *ProviderStreamEvent_FieldTerminalPathValue) AsCitationValue() (*common_client.Citation, bool) {
	res, ok := fpv.value.(*common_client.Citation)
	return res, ok
}
func (fpv *ProviderStreamEvent_FieldTerminalPathValue) AsBlockEndValue() (*BlockEnd, bool) {
	res, ok := fpv.value.(*BlockEnd)
	return res, ok
}

// SetTo stores value for selected field for object ProviderStreamEvent
func (fpv *ProviderStreamEvent_FieldTerminalPathValue) SetTo(target **ProviderStreamEvent) {
	if *target == nil {
		*target = new(ProviderStreamEvent)
	}
	switch fpv.selector {
	case ProviderStreamEvent_FieldPathSelectorDelta:
		if _, ok := (*target).Event.(*ProviderStreamEvent_Delta); !ok {
			(*target).Event = &ProviderStreamEvent_Delta{}
		}
		(*target).Event.(*ProviderStreamEvent_Delta).Delta = fpv.value.(*ProviderContentDelta)
	case ProviderStreamEvent_FieldPathSelectorUsage:
		if _, ok := (*target).Event.(*ProviderStreamEvent_Usage); !ok {
			(*target).Event = &ProviderStreamEvent_Usage{}
		}
		(*target).Event.(*ProviderStreamEvent_Usage).Usage = fpv.value.(*common_client.TokenUsage)
	case ProviderStreamEvent_FieldPathSelectorError:
		if _, ok := (*target).Event.(*ProviderStreamEvent_Error); !ok {
			(*target).Event = &ProviderStreamEvent_Error{}
		}
		(*target).Event.(*ProviderStreamEvent_Error).Error = fpv.value.(*StreamError)
	case ProviderStreamEvent_FieldPathSelectorDone:
		if _, ok := (*target).Event.(*ProviderStreamEvent_Done); !ok {
			(*target).Event = &ProviderStreamEvent_Done{}
		}
		(*target).Event.(*ProviderStreamEvent_Done).Done = fpv.value.(*ProviderDone)
	case ProviderStreamEvent_FieldPathSelectorToolCalls:
		if _, ok := (*target).Event.(*ProviderStreamEvent_ToolCalls); !ok {
			(*target).Event = &ProviderStreamEvent_ToolCalls{}
		}
		(*target).Event.(*ProviderStreamEvent_ToolCalls).ToolCalls = fpv.value.(*common_client.ToolCalls)
	case ProviderStreamEvent_FieldPathSelectorCitation:
		if _, ok := (*target).Event.(*ProviderStreamEvent_Citation); !ok {
			(*target).Event = &ProviderStreamEvent_Citation{}
		}
		(*target).Event.(*ProviderStreamEvent_Citation).Citation = fpv.value.(*common_client.Citation)
	case ProviderStreamEvent_FieldPathSelectorBlockEnd:
		if _, ok := (*target).Event.(*ProviderStreamEvent_BlockEnd); !ok {
			(*target).Event = &ProviderStreamEvent_BlockEnd{}
		}
		(*target).Event.(*ProviderStreamEvent_BlockEnd).BlockEnd = fpv.value.(*BlockEnd)
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fpv.selector))
	}
}

func (fpv *ProviderStreamEvent_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProviderStreamEvent)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProviderStreamEvent_FieldTerminalPathValue' with the value under path in 'ProviderStreamEvent'.
func (fpv *ProviderStreamEvent_FieldTerminalPathValue) CompareWith(source *ProviderStreamEvent) (int, bool) {
	switch fpv.selector {
	case ProviderStreamEvent_FieldPathSelectorDelta:
		return 0, false
	case ProviderStreamEvent_FieldPathSelectorUsage:
		return 0, false
	case ProviderStreamEvent_FieldPathSelectorError:
		return 0, false
	case ProviderStreamEvent_FieldPathSelectorDone:
		return 0, false
	case ProviderStreamEvent_FieldPathSelectorToolCalls:
		return 0, false
	case ProviderStreamEvent_FieldPathSelectorCitation:
		return 0, false
	case ProviderStreamEvent_FieldPathSelectorBlockEnd:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fpv.selector))
	}
}

func (fpv *ProviderStreamEvent_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProviderStreamEvent))
}

type ProviderStreamEvent_FieldSubPathValue struct {
	ProviderStreamEvent_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProviderStreamEvent_FieldPathValue = (*ProviderStreamEvent_FieldSubPathValue)(nil)

func (fpvs *ProviderStreamEvent_FieldSubPathValue) AsDeltaPathValue() (ProviderContentDelta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProviderContentDelta_FieldPathValue)
	return res, ok
}
func (fpvs *ProviderStreamEvent_FieldSubPathValue) AsErrorPathValue() (StreamError_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(StreamError_FieldPathValue)
	return res, ok
}
func (fpvs *ProviderStreamEvent_FieldSubPathValue) AsDonePathValue() (ProviderDone_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProviderDone_FieldPathValue)
	return res, ok
}
func (fpvs *ProviderStreamEvent_FieldSubPathValue) AsBlockEndPathValue() (BlockEnd_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(BlockEnd_FieldPathValue)
	return res, ok
}

func (fpvs *ProviderStreamEvent_FieldSubPathValue) SetTo(target **ProviderStreamEvent) {
	if *target == nil {
		*target = new(ProviderStreamEvent)
	}
	switch fpvs.Selector() {
	case ProviderStreamEvent_FieldPathSelectorDelta:
		if _, ok := (*target).Event.(*ProviderStreamEvent_Delta); !ok {
			(*target).Event = &ProviderStreamEvent_Delta{}
		}
		fpvs.subPathValue.(ProviderContentDelta_FieldPathValue).SetTo(&(*target).Event.(*ProviderStreamEvent_Delta).Delta)
	case ProviderStreamEvent_FieldPathSelectorError:
		if _, ok := (*target).Event.(*ProviderStreamEvent_Error); !ok {
			(*target).Event = &ProviderStreamEvent_Error{}
		}
		fpvs.subPathValue.(StreamError_FieldPathValue).SetTo(&(*target).Event.(*ProviderStreamEvent_Error).Error)
	case ProviderStreamEvent_FieldPathSelectorDone:
		if _, ok := (*target).Event.(*ProviderStreamEvent_Done); !ok {
			(*target).Event = &ProviderStreamEvent_Done{}
		}
		fpvs.subPathValue.(ProviderDone_FieldPathValue).SetTo(&(*target).Event.(*ProviderStreamEvent_Done).Done)
	case ProviderStreamEvent_FieldPathSelectorBlockEnd:
		if _, ok := (*target).Event.(*ProviderStreamEvent_BlockEnd); !ok {
			(*target).Event = &ProviderStreamEvent_BlockEnd{}
		}
		fpvs.subPathValue.(BlockEnd_FieldPathValue).SetTo(&(*target).Event.(*ProviderStreamEvent_BlockEnd).BlockEnd)
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fpvs.Selector()))
	}
}

func (fpvs *ProviderStreamEvent_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProviderStreamEvent)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProviderStreamEvent_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProviderStreamEvent_FieldSubPathValue) CompareWith(source *ProviderStreamEvent) (int, bool) {
	switch fpvs.Selector() {
	case ProviderStreamEvent_FieldPathSelectorDelta:
		return fpvs.subPathValue.(ProviderContentDelta_FieldPathValue).CompareWith(source.GetDelta())
	case ProviderStreamEvent_FieldPathSelectorError:
		return fpvs.subPathValue.(StreamError_FieldPathValue).CompareWith(source.GetError())
	case ProviderStreamEvent_FieldPathSelectorDone:
		return fpvs.subPathValue.(ProviderDone_FieldPathValue).CompareWith(source.GetDone())
	case ProviderStreamEvent_FieldPathSelectorBlockEnd:
		return fpvs.subPathValue.(BlockEnd_FieldPathValue).CompareWith(source.GetBlockEnd())
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fpvs.Selector()))
	}
}

func (fpvs *ProviderStreamEvent_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProviderStreamEvent))
}

// ProviderStreamEvent_FieldPathArrayItemValue allows storing single item in Path-specific values for ProviderStreamEvent according to their type
// Present only for array (repeated) types.
type ProviderStreamEvent_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProviderStreamEvent_FieldPath
	ContainsValue(*ProviderStreamEvent) bool
}

// ParseProviderStreamEvent_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProviderStreamEvent_FieldPathArrayItemValue(pathStr, valueStr string) (ProviderStreamEvent_FieldPathArrayItemValue, error) {
	fp, err := ParseProviderStreamEvent_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProviderStreamEvent field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProviderStreamEvent_FieldPathArrayItemValue), nil
}

func MustParseProviderStreamEvent_FieldPathArrayItemValue(pathStr, valueStr string) ProviderStreamEvent_FieldPathArrayItemValue {
	fpaiv, err := ParseProviderStreamEvent_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProviderStreamEvent_FieldTerminalPathArrayItemValue struct {
	ProviderStreamEvent_FieldTerminalPath
	value interface{}
}

var _ ProviderStreamEvent_FieldPathArrayItemValue = (*ProviderStreamEvent_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProviderStreamEvent as interface{}
func (fpaiv *ProviderStreamEvent_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProviderStreamEvent_FieldTerminalPathArrayItemValue) GetSingle(source *ProviderStreamEvent) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProviderStreamEvent_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProviderStreamEvent))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProviderStreamEvent'
func (fpaiv *ProviderStreamEvent_FieldTerminalPathArrayItemValue) ContainsValue(source *ProviderStreamEvent) bool {
	slice := fpaiv.ProviderStreamEvent_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProviderStreamEvent_FieldSubPathArrayItemValue struct {
	ProviderStreamEvent_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProviderStreamEvent_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProviderStreamEvent_FieldSubPathArrayItemValue) AsDeltaPathItemValue() (ProviderContentDelta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProviderContentDelta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProviderStreamEvent_FieldSubPathArrayItemValue) AsErrorPathItemValue() (StreamError_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(StreamError_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProviderStreamEvent_FieldSubPathArrayItemValue) AsDonePathItemValue() (ProviderDone_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProviderDone_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProviderStreamEvent_FieldSubPathArrayItemValue) AsBlockEndPathItemValue() (BlockEnd_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(BlockEnd_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProviderStreamEvent'
func (fpaivs *ProviderStreamEvent_FieldSubPathArrayItemValue) ContainsValue(source *ProviderStreamEvent) bool {
	switch fpaivs.Selector() {
	case ProviderStreamEvent_FieldPathSelectorDelta:
		return fpaivs.subPathItemValue.(ProviderContentDelta_FieldPathArrayItemValue).ContainsValue(source.GetDelta())
	case ProviderStreamEvent_FieldPathSelectorError:
		return fpaivs.subPathItemValue.(StreamError_FieldPathArrayItemValue).ContainsValue(source.GetError())
	case ProviderStreamEvent_FieldPathSelectorDone:
		return fpaivs.subPathItemValue.(ProviderDone_FieldPathArrayItemValue).ContainsValue(source.GetDone())
	case ProviderStreamEvent_FieldPathSelectorBlockEnd:
		return fpaivs.subPathItemValue.(BlockEnd_FieldPathArrayItemValue).ContainsValue(source.GetBlockEnd())
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderStreamEvent: %d", fpaivs.Selector()))
	}
}

// ProviderStreamEvent_FieldPathArrayOfValues allows storing slice of values for ProviderStreamEvent fields according to their type
type ProviderStreamEvent_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProviderStreamEvent_FieldPath
}

func ParseProviderStreamEvent_FieldPathArrayOfValues(pathStr, valuesStr string) (ProviderStreamEvent_FieldPathArrayOfValues, error) {
	fp, err := ParseProviderStreamEvent_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProviderStreamEvent field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProviderStreamEvent_FieldPathArrayOfValues), nil
}

func MustParseProviderStreamEvent_FieldPathArrayOfValues(pathStr, valuesStr string) ProviderStreamEvent_FieldPathArrayOfValues {
	fpaov, err := ParseProviderStreamEvent_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProviderStreamEvent_FieldTerminalPathArrayOfValues struct {
	ProviderStreamEvent_FieldTerminalPath
	values interface{}
}

var _ ProviderStreamEvent_FieldPathArrayOfValues = (*ProviderStreamEvent_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProviderStreamEvent_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProviderStreamEvent_FieldPathSelectorDelta:
		for _, v := range fpaov.values.([]*ProviderContentDelta) {
			values = append(values, v)
		}
	case ProviderStreamEvent_FieldPathSelectorUsage:
		for _, v := range fpaov.values.([]*common_client.TokenUsage) {
			values = append(values, v)
		}
	case ProviderStreamEvent_FieldPathSelectorError:
		for _, v := range fpaov.values.([]*StreamError) {
			values = append(values, v)
		}
	case ProviderStreamEvent_FieldPathSelectorDone:
		for _, v := range fpaov.values.([]*ProviderDone) {
			values = append(values, v)
		}
	case ProviderStreamEvent_FieldPathSelectorToolCalls:
		for _, v := range fpaov.values.([]*common_client.ToolCalls) {
			values = append(values, v)
		}
	case ProviderStreamEvent_FieldPathSelectorCitation:
		for _, v := range fpaov.values.([]*common_client.Citation) {
			values = append(values, v)
		}
	case ProviderStreamEvent_FieldPathSelectorBlockEnd:
		for _, v := range fpaov.values.([]*BlockEnd) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProviderStreamEvent_FieldTerminalPathArrayOfValues) AsDeltaArrayOfValues() ([]*ProviderContentDelta, bool) {
	res, ok := fpaov.values.([]*ProviderContentDelta)
	return res, ok
}
func (fpaov *ProviderStreamEvent_FieldTerminalPathArrayOfValues) AsUsageArrayOfValues() ([]*common_client.TokenUsage, bool) {
	res, ok := fpaov.values.([]*common_client.TokenUsage)
	return res, ok
}
func (fpaov *ProviderStreamEvent_FieldTerminalPathArrayOfValues) AsErrorArrayOfValues() ([]*StreamError, bool) {
	res, ok := fpaov.values.([]*StreamError)
	return res, ok
}
func (fpaov *ProviderStreamEvent_FieldTerminalPathArrayOfValues) AsDoneArrayOfValues() ([]*ProviderDone, bool) {
	res, ok := fpaov.values.([]*ProviderDone)
	return res, ok
}
func (fpaov *ProviderStreamEvent_FieldTerminalPathArrayOfValues) AsToolCallsArrayOfValues() ([]*common_client.ToolCalls, bool) {
	res, ok := fpaov.values.([]*common_client.ToolCalls)
	return res, ok
}
func (fpaov *ProviderStreamEvent_FieldTerminalPathArrayOfValues) AsCitationArrayOfValues() ([]*common_client.Citation, bool) {
	res, ok := fpaov.values.([]*common_client.Citation)
	return res, ok
}
func (fpaov *ProviderStreamEvent_FieldTerminalPathArrayOfValues) AsBlockEndArrayOfValues() ([]*BlockEnd, bool) {
	res, ok := fpaov.values.([]*BlockEnd)
	return res, ok
}

type ProviderStreamEvent_FieldSubPathArrayOfValues struct {
	ProviderStreamEvent_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProviderStreamEvent_FieldPathArrayOfValues = (*ProviderStreamEvent_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProviderStreamEvent_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProviderStreamEvent_FieldSubPathArrayOfValues) AsDeltaPathArrayOfValues() (ProviderContentDelta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProviderContentDelta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProviderStreamEvent_FieldSubPathArrayOfValues) AsErrorPathArrayOfValues() (StreamError_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(StreamError_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProviderStreamEvent_FieldSubPathArrayOfValues) AsDonePathArrayOfValues() (ProviderDone_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProviderDone_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProviderStreamEvent_FieldSubPathArrayOfValues) AsBlockEndPathArrayOfValues() (BlockEnd_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(BlockEnd_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProviderDone_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProviderDone_FieldPathSelector
	Get(source *ProviderDone) []interface{}
	GetSingle(source *ProviderDone) (interface{}, bool)
	ClearValue(item *ProviderDone)

	// Those methods build corresponding ProviderDone_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProviderDone_FieldPathValue
	WithIArrayOfValues(values interface{}) ProviderDone_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProviderDone_FieldPathArrayItemValue
}

type ProviderDone_FieldPathSelector int32

const (
	ProviderDone_FieldPathSelectorStopReason ProviderDone_FieldPathSelector = 0
)

func (s ProviderDone_FieldPathSelector) String() string {
	switch s {
	case ProviderDone_FieldPathSelectorStopReason:
		return "stop_reason"
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderDone: %d", s))
	}
}

func BuildProviderDone_FieldPath(fp gotenobject.RawFieldPath) (ProviderDone_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProviderDone")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "stop_reason", "stopReason", "stop-reason":
			return &ProviderDone_FieldTerminalPath{selector: ProviderDone_FieldPathSelectorStopReason}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProviderDone", fp)
}

func ParseProviderDone_FieldPath(rawField string) (ProviderDone_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProviderDone_FieldPath(fp)
}

func MustParseProviderDone_FieldPath(rawField string) ProviderDone_FieldPath {
	fp, err := ParseProviderDone_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProviderDone_FieldTerminalPath struct {
	selector ProviderDone_FieldPathSelector
}

var _ ProviderDone_FieldPath = (*ProviderDone_FieldTerminalPath)(nil)

func (fp *ProviderDone_FieldTerminalPath) Selector() ProviderDone_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProviderDone_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProviderDone_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProviderDone
func (fp *ProviderDone_FieldTerminalPath) Get(source *ProviderDone) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProviderDone_FieldPathSelectorStopReason:
			values = append(values, source.StopReason)
		default:
			panic(fmt.Sprintf("Invalid selector for ProviderDone: %d", fp.selector))
		}
	}
	return
}

func (fp *ProviderDone_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProviderDone))
}

// GetSingle returns value pointed by specific field of from source ProviderDone
func (fp *ProviderDone_FieldTerminalPath) GetSingle(source *ProviderDone) (interface{}, bool) {
	switch fp.selector {
	case ProviderDone_FieldPathSelectorStopReason:
		return source.GetStopReason(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderDone: %d", fp.selector))
	}
}

func (fp *ProviderDone_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProviderDone))
}

// GetDefault returns a default value of the field type
func (fp *ProviderDone_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProviderDone_FieldPathSelectorStopReason:
		return ProviderDone_STOP_REASON_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderDone: %d", fp.selector))
	}
}

func (fp *ProviderDone_FieldTerminalPath) ClearValue(item *ProviderDone) {
	if item != nil {
		switch fp.selector {
		case ProviderDone_FieldPathSelectorStopReason:
			item.StopReason = ProviderDone_STOP_REASON_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ProviderDone: %d", fp.selector))
		}
	}
}

func (fp *ProviderDone_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProviderDone))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProviderDone_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProviderDone_FieldPathSelectorStopReason
}

func (fp *ProviderDone_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProviderDone_FieldTerminalPath) WithIValue(value interface{}) ProviderDone_FieldPathValue {
	switch fp.selector {
	case ProviderDone_FieldPathSelectorStopReason:
		return &ProviderDone_FieldTerminalPathValue{ProviderDone_FieldTerminalPath: *fp, value: value.(ProviderDone_StopReason)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderDone: %d", fp.selector))
	}
}

func (fp *ProviderDone_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProviderDone_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProviderDone_FieldPathArrayOfValues {
	fpaov := &ProviderDone_FieldTerminalPathArrayOfValues{ProviderDone_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProviderDone_FieldPathSelectorStopReason:
		return &ProviderDone_FieldTerminalPathArrayOfValues{ProviderDone_FieldTerminalPath: *fp, values: values.([]ProviderDone_StopReason)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderDone: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProviderDone_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProviderDone_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProviderDone_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderDone: %d", fp.selector))
	}
}

func (fp *ProviderDone_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProviderDone_FieldPathValue allows storing values for ProviderDone fields according to their type
type ProviderDone_FieldPathValue interface {
	ProviderDone_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProviderDone)
	CompareWith(*ProviderDone) (cmp int, comparable bool)
}

func ParseProviderDone_FieldPathValue(pathStr, valueStr string) (ProviderDone_FieldPathValue, error) {
	fp, err := ParseProviderDone_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProviderDone field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProviderDone_FieldPathValue), nil
}

func MustParseProviderDone_FieldPathValue(pathStr, valueStr string) ProviderDone_FieldPathValue {
	fpv, err := ParseProviderDone_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProviderDone_FieldTerminalPathValue struct {
	ProviderDone_FieldTerminalPath
	value interface{}
}

var _ ProviderDone_FieldPathValue = (*ProviderDone_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProviderDone' as interface{}
func (fpv *ProviderDone_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProviderDone_FieldTerminalPathValue) AsStopReasonValue() (ProviderDone_StopReason, bool) {
	res, ok := fpv.value.(ProviderDone_StopReason)
	return res, ok
}

// SetTo stores value for selected field for object ProviderDone
func (fpv *ProviderDone_FieldTerminalPathValue) SetTo(target **ProviderDone) {
	if *target == nil {
		*target = new(ProviderDone)
	}
	switch fpv.selector {
	case ProviderDone_FieldPathSelectorStopReason:
		(*target).StopReason = fpv.value.(ProviderDone_StopReason)
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderDone: %d", fpv.selector))
	}
}

func (fpv *ProviderDone_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProviderDone)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProviderDone_FieldTerminalPathValue' with the value under path in 'ProviderDone'.
func (fpv *ProviderDone_FieldTerminalPathValue) CompareWith(source *ProviderDone) (int, bool) {
	switch fpv.selector {
	case ProviderDone_FieldPathSelectorStopReason:
		leftValue := fpv.value.(ProviderDone_StopReason)
		rightValue := source.GetStopReason()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProviderDone: %d", fpv.selector))
	}
}

func (fpv *ProviderDone_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProviderDone))
}

// ProviderDone_FieldPathArrayItemValue allows storing single item in Path-specific values for ProviderDone according to their type
// Present only for array (repeated) types.
type ProviderDone_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProviderDone_FieldPath
	ContainsValue(*ProviderDone) bool
}

// ParseProviderDone_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProviderDone_FieldPathArrayItemValue(pathStr, valueStr string) (ProviderDone_FieldPathArrayItemValue, error) {
	fp, err := ParseProviderDone_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProviderDone field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProviderDone_FieldPathArrayItemValue), nil
}

func MustParseProviderDone_FieldPathArrayItemValue(pathStr, valueStr string) ProviderDone_FieldPathArrayItemValue {
	fpaiv, err := ParseProviderDone_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProviderDone_FieldTerminalPathArrayItemValue struct {
	ProviderDone_FieldTerminalPath
	value interface{}
}

var _ ProviderDone_FieldPathArrayItemValue = (*ProviderDone_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProviderDone as interface{}
func (fpaiv *ProviderDone_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProviderDone_FieldTerminalPathArrayItemValue) GetSingle(source *ProviderDone) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProviderDone_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProviderDone))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProviderDone'
func (fpaiv *ProviderDone_FieldTerminalPathArrayItemValue) ContainsValue(source *ProviderDone) bool {
	slice := fpaiv.ProviderDone_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProviderDone_FieldPathArrayOfValues allows storing slice of values for ProviderDone fields according to their type
type ProviderDone_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProviderDone_FieldPath
}

func ParseProviderDone_FieldPathArrayOfValues(pathStr, valuesStr string) (ProviderDone_FieldPathArrayOfValues, error) {
	fp, err := ParseProviderDone_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProviderDone field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProviderDone_FieldPathArrayOfValues), nil
}

func MustParseProviderDone_FieldPathArrayOfValues(pathStr, valuesStr string) ProviderDone_FieldPathArrayOfValues {
	fpaov, err := ParseProviderDone_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProviderDone_FieldTerminalPathArrayOfValues struct {
	ProviderDone_FieldTerminalPath
	values interface{}
}

var _ ProviderDone_FieldPathArrayOfValues = (*ProviderDone_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProviderDone_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProviderDone_FieldPathSelectorStopReason:
		for _, v := range fpaov.values.([]ProviderDone_StopReason) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProviderDone_FieldTerminalPathArrayOfValues) AsStopReasonArrayOfValues() ([]ProviderDone_StopReason, bool) {
	res, ok := fpaov.values.([]ProviderDone_StopReason)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type OpenAIConfig_FieldPath interface {
	gotenobject.FieldPath
	Selector() OpenAIConfig_FieldPathSelector
	Get(source *OpenAIConfig) []interface{}
	GetSingle(source *OpenAIConfig) (interface{}, bool)
	ClearValue(item *OpenAIConfig)

	// Those methods build corresponding OpenAIConfig_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) OpenAIConfig_FieldPathValue
	WithIArrayOfValues(values interface{}) OpenAIConfig_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) OpenAIConfig_FieldPathArrayItemValue
}

type OpenAIConfig_FieldPathSelector int32

const (
	OpenAIConfig_FieldPathSelectorParallelToolCalls   OpenAIConfig_FieldPathSelector = 0
	OpenAIConfig_FieldPathSelectorMaxCompletionTokens OpenAIConfig_FieldPathSelector = 1
	OpenAIConfig_FieldPathSelectorReasoningEffort     OpenAIConfig_FieldPathSelector = 2
)

func (s OpenAIConfig_FieldPathSelector) String() string {
	switch s {
	case OpenAIConfig_FieldPathSelectorParallelToolCalls:
		return "parallel_tool_calls"
	case OpenAIConfig_FieldPathSelectorMaxCompletionTokens:
		return "max_completion_tokens"
	case OpenAIConfig_FieldPathSelectorReasoningEffort:
		return "reasoning_effort"
	default:
		panic(fmt.Sprintf("Invalid selector for OpenAIConfig: %d", s))
	}
}

func BuildOpenAIConfig_FieldPath(fp gotenobject.RawFieldPath) (OpenAIConfig_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object OpenAIConfig")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parallel_tool_calls", "parallelToolCalls", "parallel-tool-calls":
			return &OpenAIConfig_FieldTerminalPath{selector: OpenAIConfig_FieldPathSelectorParallelToolCalls}, nil
		case "max_completion_tokens", "maxCompletionTokens", "max-completion-tokens":
			return &OpenAIConfig_FieldTerminalPath{selector: OpenAIConfig_FieldPathSelectorMaxCompletionTokens}, nil
		case "reasoning_effort", "reasoningEffort", "reasoning-effort":
			return &OpenAIConfig_FieldTerminalPath{selector: OpenAIConfig_FieldPathSelectorReasoningEffort}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object OpenAIConfig", fp)
}

func ParseOpenAIConfig_FieldPath(rawField string) (OpenAIConfig_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildOpenAIConfig_FieldPath(fp)
}

func MustParseOpenAIConfig_FieldPath(rawField string) OpenAIConfig_FieldPath {
	fp, err := ParseOpenAIConfig_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type OpenAIConfig_FieldTerminalPath struct {
	selector OpenAIConfig_FieldPathSelector
}

var _ OpenAIConfig_FieldPath = (*OpenAIConfig_FieldTerminalPath)(nil)

func (fp *OpenAIConfig_FieldTerminalPath) Selector() OpenAIConfig_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *OpenAIConfig_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *OpenAIConfig_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source OpenAIConfig
func (fp *OpenAIConfig_FieldTerminalPath) Get(source *OpenAIConfig) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case OpenAIConfig_FieldPathSelectorParallelToolCalls:
			values = append(values, source.ParallelToolCalls)
		case OpenAIConfig_FieldPathSelectorMaxCompletionTokens:
			values = append(values, source.MaxCompletionTokens)
		case OpenAIConfig_FieldPathSelectorReasoningEffort:
			values = append(values, source.ReasoningEffort)
		default:
			panic(fmt.Sprintf("Invalid selector for OpenAIConfig: %d", fp.selector))
		}
	}
	return
}

func (fp *OpenAIConfig_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*OpenAIConfig))
}

// GetSingle returns value pointed by specific field of from source OpenAIConfig
func (fp *OpenAIConfig_FieldTerminalPath) GetSingle(source *OpenAIConfig) (interface{}, bool) {
	switch fp.selector {
	case OpenAIConfig_FieldPathSelectorParallelToolCalls:
		return source.GetParallelToolCalls(), source != nil
	case OpenAIConfig_FieldPathSelectorMaxCompletionTokens:
		return source.GetMaxCompletionTokens(), source != nil
	case OpenAIConfig_FieldPathSelectorReasoningEffort:
		return source.GetReasoningEffort(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for OpenAIConfig: %d", fp.selector))
	}
}

func (fp *OpenAIConfig_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*OpenAIConfig))
}

// GetDefault returns a default value of the field type
func (fp *OpenAIConfig_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case OpenAIConfig_FieldPathSelectorParallelToolCalls:
		return false
	case OpenAIConfig_FieldPathSelectorMaxCompletionTokens:
		return int32(0)
	case OpenAIConfig_FieldPathSelectorReasoningEffort:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for OpenAIConfig: %d", fp.selector))
	}
}

func (fp *OpenAIConfig_FieldTerminalPath) ClearValue(item *OpenAIConfig) {
	if item != nil {
		switch fp.selector {
		case OpenAIConfig_FieldPathSelectorParallelToolCalls:
			item.ParallelToolCalls = false
		case OpenAIConfig_FieldPathSelectorMaxCompletionTokens:
			item.MaxCompletionTokens = int32(0)
		case OpenAIConfig_FieldPathSelectorReasoningEffort:
			item.ReasoningEffort = ""
		default:
			panic(fmt.Sprintf("Invalid selector for OpenAIConfig: %d", fp.selector))
		}
	}
}

func (fp *OpenAIConfig_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*OpenAIConfig))
}

// IsLeaf - whether field path is holds simple value
func (fp *OpenAIConfig_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == OpenAIConfig_FieldPathSelectorParallelToolCalls ||
		fp.selector == OpenAIConfig_FieldPathSelectorMaxCompletionTokens ||
		fp.selector == OpenAIConfig_FieldPathSelectorReasoningEffort
}

func (fp *OpenAIConfig_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *OpenAIConfig_FieldTerminalPath) WithIValue(value interface{}) OpenAIConfig_FieldPathValue {
	switch fp.selector {
	case OpenAIConfig_FieldPathSelectorParallelToolCalls:
		return &OpenAIConfig_FieldTerminalPathValue{OpenAIConfig_FieldTerminalPath: *fp, value: value.(bool)}
	case OpenAIConfig_FieldPathSelectorMaxCompletionTokens:
		return &OpenAIConfig_FieldTerminalPathValue{OpenAIConfig_FieldTerminalPath: *fp, value: value.(int32)}
	case OpenAIConfig_FieldPathSelectorReasoningEffort:
		return &OpenAIConfig_FieldTerminalPathValue{OpenAIConfig_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for OpenAIConfig: %d", fp.selector))
	}
}

func (fp *OpenAIConfig_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *OpenAIConfig_FieldTerminalPath) WithIArrayOfValues(values interface{}) OpenAIConfig_FieldPathArrayOfValues {
	fpaov := &OpenAIConfig_FieldTerminalPathArrayOfValues{OpenAIConfig_FieldTerminalPath: *fp}
	switch fp.selector {
	case OpenAIConfig_FieldPathSelectorParallelToolCalls:
		return &OpenAIConfig_FieldTerminalPathArrayOfValues{OpenAIConfig_FieldTerminalPath: *fp, values: values.([]bool)}
	case OpenAIConfig_FieldPathSelectorMaxCompletionTokens:
		return &OpenAIConfig_FieldTerminalPathArrayOfValues{OpenAIConfig_FieldTerminalPath: *fp, values: values.([]int32)}
	case OpenAIConfig_FieldPathSelectorReasoningEffort:
		return &OpenAIConfig_FieldTerminalPathArrayOfValues{OpenAIConfig_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for OpenAIConfig: %d", fp.selector))
	}
	return fpaov
}

func (fp *OpenAIConfig_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *OpenAIConfig_FieldTerminalPath) WithIArrayItemValue(value interface{}) OpenAIConfig_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for OpenAIConfig: %d", fp.selector))
	}
}

func (fp *OpenAIConfig_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// OpenAIConfig_FieldPathValue allows storing values for OpenAIConfig fields according to their type
type OpenAIConfig_FieldPathValue interface {
	OpenAIConfig_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **OpenAIConfig)
	CompareWith(*OpenAIConfig) (cmp int, comparable bool)
}

func ParseOpenAIConfig_FieldPathValue(pathStr, valueStr string) (OpenAIConfig_FieldPathValue, error) {
	fp, err := ParseOpenAIConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenAIConfig field path value from %s: %v", valueStr, err)
	}
	return fpv.(OpenAIConfig_FieldPathValue), nil
}

func MustParseOpenAIConfig_FieldPathValue(pathStr, valueStr string) OpenAIConfig_FieldPathValue {
	fpv, err := ParseOpenAIConfig_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type OpenAIConfig_FieldTerminalPathValue struct {
	OpenAIConfig_FieldTerminalPath
	value interface{}
}

var _ OpenAIConfig_FieldPathValue = (*OpenAIConfig_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'OpenAIConfig' as interface{}
func (fpv *OpenAIConfig_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *OpenAIConfig_FieldTerminalPathValue) AsParallelToolCallsValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *OpenAIConfig_FieldTerminalPathValue) AsMaxCompletionTokensValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *OpenAIConfig_FieldTerminalPathValue) AsReasoningEffortValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object OpenAIConfig
func (fpv *OpenAIConfig_FieldTerminalPathValue) SetTo(target **OpenAIConfig) {
	if *target == nil {
		*target = new(OpenAIConfig)
	}
	switch fpv.selector {
	case OpenAIConfig_FieldPathSelectorParallelToolCalls:
		(*target).ParallelToolCalls = fpv.value.(bool)
	case OpenAIConfig_FieldPathSelectorMaxCompletionTokens:
		(*target).MaxCompletionTokens = fpv.value.(int32)
	case OpenAIConfig_FieldPathSelectorReasoningEffort:
		(*target).ReasoningEffort = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for OpenAIConfig: %d", fpv.selector))
	}
}

func (fpv *OpenAIConfig_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*OpenAIConfig)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'OpenAIConfig_FieldTerminalPathValue' with the value under path in 'OpenAIConfig'.
func (fpv *OpenAIConfig_FieldTerminalPathValue) CompareWith(source *OpenAIConfig) (int, bool) {
	switch fpv.selector {
	case OpenAIConfig_FieldPathSelectorParallelToolCalls:
		leftValue := fpv.value.(bool)
		rightValue := source.GetParallelToolCalls()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case OpenAIConfig_FieldPathSelectorMaxCompletionTokens:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxCompletionTokens()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case OpenAIConfig_FieldPathSelectorReasoningEffort:
		leftValue := fpv.value.(string)
		rightValue := source.GetReasoningEffort()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for OpenAIConfig: %d", fpv.selector))
	}
}

func (fpv *OpenAIConfig_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*OpenAIConfig))
}

// OpenAIConfig_FieldPathArrayItemValue allows storing single item in Path-specific values for OpenAIConfig according to their type
// Present only for array (repeated) types.
type OpenAIConfig_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	OpenAIConfig_FieldPath
	ContainsValue(*OpenAIConfig) bool
}

// ParseOpenAIConfig_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseOpenAIConfig_FieldPathArrayItemValue(pathStr, valueStr string) (OpenAIConfig_FieldPathArrayItemValue, error) {
	fp, err := ParseOpenAIConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenAIConfig field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(OpenAIConfig_FieldPathArrayItemValue), nil
}

func MustParseOpenAIConfig_FieldPathArrayItemValue(pathStr, valueStr string) OpenAIConfig_FieldPathArrayItemValue {
	fpaiv, err := ParseOpenAIConfig_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type OpenAIConfig_FieldTerminalPathArrayItemValue struct {
	OpenAIConfig_FieldTerminalPath
	value interface{}
}

var _ OpenAIConfig_FieldPathArrayItemValue = (*OpenAIConfig_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object OpenAIConfig as interface{}
func (fpaiv *OpenAIConfig_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *OpenAIConfig_FieldTerminalPathArrayItemValue) GetSingle(source *OpenAIConfig) (interface{}, bool) {
	return nil, false
}

func (fpaiv *OpenAIConfig_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*OpenAIConfig))
}

// Contains returns a boolean indicating if value that is being held is present in given 'OpenAIConfig'
func (fpaiv *OpenAIConfig_FieldTerminalPathArrayItemValue) ContainsValue(source *OpenAIConfig) bool {
	slice := fpaiv.OpenAIConfig_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// OpenAIConfig_FieldPathArrayOfValues allows storing slice of values for OpenAIConfig fields according to their type
type OpenAIConfig_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	OpenAIConfig_FieldPath
}

func ParseOpenAIConfig_FieldPathArrayOfValues(pathStr, valuesStr string) (OpenAIConfig_FieldPathArrayOfValues, error) {
	fp, err := ParseOpenAIConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenAIConfig field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(OpenAIConfig_FieldPathArrayOfValues), nil
}

func MustParseOpenAIConfig_FieldPathArrayOfValues(pathStr, valuesStr string) OpenAIConfig_FieldPathArrayOfValues {
	fpaov, err := ParseOpenAIConfig_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type OpenAIConfig_FieldTerminalPathArrayOfValues struct {
	OpenAIConfig_FieldTerminalPath
	values interface{}
}

var _ OpenAIConfig_FieldPathArrayOfValues = (*OpenAIConfig_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *OpenAIConfig_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case OpenAIConfig_FieldPathSelectorParallelToolCalls:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case OpenAIConfig_FieldPathSelectorMaxCompletionTokens:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case OpenAIConfig_FieldPathSelectorReasoningEffort:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *OpenAIConfig_FieldTerminalPathArrayOfValues) AsParallelToolCallsArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *OpenAIConfig_FieldTerminalPathArrayOfValues) AsMaxCompletionTokensArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *OpenAIConfig_FieldTerminalPathArrayOfValues) AsReasoningEffortArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AzureConfig_FieldPath interface {
	gotenobject.FieldPath
	Selector() AzureConfig_FieldPathSelector
	Get(source *AzureConfig) []interface{}
	GetSingle(source *AzureConfig) (interface{}, bool)
	ClearValue(item *AzureConfig)

	// Those methods build corresponding AzureConfig_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AzureConfig_FieldPathValue
	WithIArrayOfValues(values interface{}) AzureConfig_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AzureConfig_FieldPathArrayItemValue
}

type AzureConfig_FieldPathSelector int32

const (
	AzureConfig_FieldPathSelectorSearch              AzureConfig_FieldPathSelector = 0
	AzureConfig_FieldPathSelectorParallelToolCalls   AzureConfig_FieldPathSelector = 1
	AzureConfig_FieldPathSelectorMaxCompletionTokens AzureConfig_FieldPathSelector = 2
	AzureConfig_FieldPathSelectorReasoningEffort     AzureConfig_FieldPathSelector = 3
)

func (s AzureConfig_FieldPathSelector) String() string {
	switch s {
	case AzureConfig_FieldPathSelectorSearch:
		return "search"
	case AzureConfig_FieldPathSelectorParallelToolCalls:
		return "parallel_tool_calls"
	case AzureConfig_FieldPathSelectorMaxCompletionTokens:
		return "max_completion_tokens"
	case AzureConfig_FieldPathSelectorReasoningEffort:
		return "reasoning_effort"
	default:
		panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", s))
	}
}

func BuildAzureConfig_FieldPath(fp gotenobject.RawFieldPath) (AzureConfig_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AzureConfig")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "search":
			return &AzureConfig_FieldTerminalPath{selector: AzureConfig_FieldPathSelectorSearch}, nil
		case "parallel_tool_calls", "parallelToolCalls", "parallel-tool-calls":
			return &AzureConfig_FieldTerminalPath{selector: AzureConfig_FieldPathSelectorParallelToolCalls}, nil
		case "max_completion_tokens", "maxCompletionTokens", "max-completion-tokens":
			return &AzureConfig_FieldTerminalPath{selector: AzureConfig_FieldPathSelectorMaxCompletionTokens}, nil
		case "reasoning_effort", "reasoningEffort", "reasoning-effort":
			return &AzureConfig_FieldTerminalPath{selector: AzureConfig_FieldPathSelectorReasoningEffort}, nil
		}
	} else {
		switch fp[0] {
		case "search":
			if subpath, err := BuildAzureSearchConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AzureConfig_FieldSubPath{selector: AzureConfig_FieldPathSelectorSearch, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AzureConfig", fp)
}

func ParseAzureConfig_FieldPath(rawField string) (AzureConfig_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAzureConfig_FieldPath(fp)
}

func MustParseAzureConfig_FieldPath(rawField string) AzureConfig_FieldPath {
	fp, err := ParseAzureConfig_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AzureConfig_FieldTerminalPath struct {
	selector AzureConfig_FieldPathSelector
}

var _ AzureConfig_FieldPath = (*AzureConfig_FieldTerminalPath)(nil)

func (fp *AzureConfig_FieldTerminalPath) Selector() AzureConfig_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AzureConfig_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AzureConfig_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AzureConfig
func (fp *AzureConfig_FieldTerminalPath) Get(source *AzureConfig) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AzureConfig_FieldPathSelectorSearch:
			if source.Search != nil {
				values = append(values, source.Search)
			}
		case AzureConfig_FieldPathSelectorParallelToolCalls:
			values = append(values, source.ParallelToolCalls)
		case AzureConfig_FieldPathSelectorMaxCompletionTokens:
			values = append(values, source.MaxCompletionTokens)
		case AzureConfig_FieldPathSelectorReasoningEffort:
			values = append(values, source.ReasoningEffort)
		default:
			panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fp.selector))
		}
	}
	return
}

func (fp *AzureConfig_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AzureConfig))
}

// GetSingle returns value pointed by specific field of from source AzureConfig
func (fp *AzureConfig_FieldTerminalPath) GetSingle(source *AzureConfig) (interface{}, bool) {
	switch fp.selector {
	case AzureConfig_FieldPathSelectorSearch:
		res := source.GetSearch()
		return res, res != nil
	case AzureConfig_FieldPathSelectorParallelToolCalls:
		return source.GetParallelToolCalls(), source != nil
	case AzureConfig_FieldPathSelectorMaxCompletionTokens:
		return source.GetMaxCompletionTokens(), source != nil
	case AzureConfig_FieldPathSelectorReasoningEffort:
		return source.GetReasoningEffort(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fp.selector))
	}
}

func (fp *AzureConfig_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AzureConfig))
}

// GetDefault returns a default value of the field type
func (fp *AzureConfig_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AzureConfig_FieldPathSelectorSearch:
		return (*AzureSearchConfig)(nil)
	case AzureConfig_FieldPathSelectorParallelToolCalls:
		return false
	case AzureConfig_FieldPathSelectorMaxCompletionTokens:
		return int32(0)
	case AzureConfig_FieldPathSelectorReasoningEffort:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fp.selector))
	}
}

func (fp *AzureConfig_FieldTerminalPath) ClearValue(item *AzureConfig) {
	if item != nil {
		switch fp.selector {
		case AzureConfig_FieldPathSelectorSearch:
			item.Search = nil
		case AzureConfig_FieldPathSelectorParallelToolCalls:
			item.ParallelToolCalls = false
		case AzureConfig_FieldPathSelectorMaxCompletionTokens:
			item.MaxCompletionTokens = int32(0)
		case AzureConfig_FieldPathSelectorReasoningEffort:
			item.ReasoningEffort = ""
		default:
			panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fp.selector))
		}
	}
}

func (fp *AzureConfig_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AzureConfig))
}

// IsLeaf - whether field path is holds simple value
func (fp *AzureConfig_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AzureConfig_FieldPathSelectorParallelToolCalls ||
		fp.selector == AzureConfig_FieldPathSelectorMaxCompletionTokens ||
		fp.selector == AzureConfig_FieldPathSelectorReasoningEffort
}

func (fp *AzureConfig_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AzureConfig_FieldTerminalPath) WithIValue(value interface{}) AzureConfig_FieldPathValue {
	switch fp.selector {
	case AzureConfig_FieldPathSelectorSearch:
		return &AzureConfig_FieldTerminalPathValue{AzureConfig_FieldTerminalPath: *fp, value: value.(*AzureSearchConfig)}
	case AzureConfig_FieldPathSelectorParallelToolCalls:
		return &AzureConfig_FieldTerminalPathValue{AzureConfig_FieldTerminalPath: *fp, value: value.(bool)}
	case AzureConfig_FieldPathSelectorMaxCompletionTokens:
		return &AzureConfig_FieldTerminalPathValue{AzureConfig_FieldTerminalPath: *fp, value: value.(int32)}
	case AzureConfig_FieldPathSelectorReasoningEffort:
		return &AzureConfig_FieldTerminalPathValue{AzureConfig_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fp.selector))
	}
}

func (fp *AzureConfig_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AzureConfig_FieldTerminalPath) WithIArrayOfValues(values interface{}) AzureConfig_FieldPathArrayOfValues {
	fpaov := &AzureConfig_FieldTerminalPathArrayOfValues{AzureConfig_FieldTerminalPath: *fp}
	switch fp.selector {
	case AzureConfig_FieldPathSelectorSearch:
		return &AzureConfig_FieldTerminalPathArrayOfValues{AzureConfig_FieldTerminalPath: *fp, values: values.([]*AzureSearchConfig)}
	case AzureConfig_FieldPathSelectorParallelToolCalls:
		return &AzureConfig_FieldTerminalPathArrayOfValues{AzureConfig_FieldTerminalPath: *fp, values: values.([]bool)}
	case AzureConfig_FieldPathSelectorMaxCompletionTokens:
		return &AzureConfig_FieldTerminalPathArrayOfValues{AzureConfig_FieldTerminalPath: *fp, values: values.([]int32)}
	case AzureConfig_FieldPathSelectorReasoningEffort:
		return &AzureConfig_FieldTerminalPathArrayOfValues{AzureConfig_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fp.selector))
	}
	return fpaov
}

func (fp *AzureConfig_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AzureConfig_FieldTerminalPath) WithIArrayItemValue(value interface{}) AzureConfig_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fp.selector))
	}
}

func (fp *AzureConfig_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type AzureConfig_FieldSubPath struct {
	selector AzureConfig_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ AzureConfig_FieldPath = (*AzureConfig_FieldSubPath)(nil)

func (fps *AzureConfig_FieldSubPath) Selector() AzureConfig_FieldPathSelector {
	return fps.selector
}
func (fps *AzureConfig_FieldSubPath) AsSearchSubPath() (AzureSearchConfig_FieldPath, bool) {
	res, ok := fps.subPath.(AzureSearchConfig_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *AzureConfig_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *AzureConfig_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source AzureConfig
func (fps *AzureConfig_FieldSubPath) Get(source *AzureConfig) (values []interface{}) {
	switch fps.selector {
	case AzureConfig_FieldPathSelectorSearch:
		values = append(values, fps.subPath.GetRaw(source.GetSearch())...)
	default:
		panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fps.selector))
	}
	return
}

func (fps *AzureConfig_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*AzureConfig))
}

// GetSingle returns value of selected field from source AzureConfig
func (fps *AzureConfig_FieldSubPath) GetSingle(source *AzureConfig) (interface{}, bool) {
	switch fps.selector {
	case AzureConfig_FieldPathSelectorSearch:
		if source.GetSearch() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSearch())
	default:
		panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fps.selector))
	}
}

func (fps *AzureConfig_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*AzureConfig))
}

// GetDefault returns a default value of the field type
func (fps *AzureConfig_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *AzureConfig_FieldSubPath) ClearValue(item *AzureConfig) {
	if item != nil {
		switch fps.selector {
		case AzureConfig_FieldPathSelectorSearch:
			fps.subPath.ClearValueRaw(item.Search)
		default:
			panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fps.selector))
		}
	}
}

func (fps *AzureConfig_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*AzureConfig))
}

// IsLeaf - whether field path is holds simple value
func (fps *AzureConfig_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *AzureConfig_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&AzureConfig_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *AzureConfig_FieldSubPath) WithIValue(value interface{}) AzureConfig_FieldPathValue {
	return &AzureConfig_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *AzureConfig_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *AzureConfig_FieldSubPath) WithIArrayOfValues(values interface{}) AzureConfig_FieldPathArrayOfValues {
	return &AzureConfig_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *AzureConfig_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *AzureConfig_FieldSubPath) WithIArrayItemValue(value interface{}) AzureConfig_FieldPathArrayItemValue {
	return &AzureConfig_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *AzureConfig_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// AzureConfig_FieldPathValue allows storing values for AzureConfig fields according to their type
type AzureConfig_FieldPathValue interface {
	AzureConfig_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AzureConfig)
	CompareWith(*AzureConfig) (cmp int, comparable bool)
}

func ParseAzureConfig_FieldPathValue(pathStr, valueStr string) (AzureConfig_FieldPathValue, error) {
	fp, err := ParseAzureConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureConfig field path value from %s: %v", valueStr, err)
	}
	return fpv.(AzureConfig_FieldPathValue), nil
}

func MustParseAzureConfig_FieldPathValue(pathStr, valueStr string) AzureConfig_FieldPathValue {
	fpv, err := ParseAzureConfig_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AzureConfig_FieldTerminalPathValue struct {
	AzureConfig_FieldTerminalPath
	value interface{}
}

var _ AzureConfig_FieldPathValue = (*AzureConfig_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AzureConfig' as interface{}
func (fpv *AzureConfig_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AzureConfig_FieldTerminalPathValue) AsSearchValue() (*AzureSearchConfig, bool) {
	res, ok := fpv.value.(*AzureSearchConfig)
	return res, ok
}
func (fpv *AzureConfig_FieldTerminalPathValue) AsParallelToolCallsValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *AzureConfig_FieldTerminalPathValue) AsMaxCompletionTokensValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *AzureConfig_FieldTerminalPathValue) AsReasoningEffortValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object AzureConfig
func (fpv *AzureConfig_FieldTerminalPathValue) SetTo(target **AzureConfig) {
	if *target == nil {
		*target = new(AzureConfig)
	}
	switch fpv.selector {
	case AzureConfig_FieldPathSelectorSearch:
		(*target).Search = fpv.value.(*AzureSearchConfig)
	case AzureConfig_FieldPathSelectorParallelToolCalls:
		(*target).ParallelToolCalls = fpv.value.(bool)
	case AzureConfig_FieldPathSelectorMaxCompletionTokens:
		(*target).MaxCompletionTokens = fpv.value.(int32)
	case AzureConfig_FieldPathSelectorReasoningEffort:
		(*target).ReasoningEffort = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fpv.selector))
	}
}

func (fpv *AzureConfig_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AzureConfig)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AzureConfig_FieldTerminalPathValue' with the value under path in 'AzureConfig'.
func (fpv *AzureConfig_FieldTerminalPathValue) CompareWith(source *AzureConfig) (int, bool) {
	switch fpv.selector {
	case AzureConfig_FieldPathSelectorSearch:
		return 0, false
	case AzureConfig_FieldPathSelectorParallelToolCalls:
		leftValue := fpv.value.(bool)
		rightValue := source.GetParallelToolCalls()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AzureConfig_FieldPathSelectorMaxCompletionTokens:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxCompletionTokens()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AzureConfig_FieldPathSelectorReasoningEffort:
		leftValue := fpv.value.(string)
		rightValue := source.GetReasoningEffort()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fpv.selector))
	}
}

func (fpv *AzureConfig_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AzureConfig))
}

type AzureConfig_FieldSubPathValue struct {
	AzureConfig_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ AzureConfig_FieldPathValue = (*AzureConfig_FieldSubPathValue)(nil)

func (fpvs *AzureConfig_FieldSubPathValue) AsSearchPathValue() (AzureSearchConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AzureSearchConfig_FieldPathValue)
	return res, ok
}

func (fpvs *AzureConfig_FieldSubPathValue) SetTo(target **AzureConfig) {
	if *target == nil {
		*target = new(AzureConfig)
	}
	switch fpvs.Selector() {
	case AzureConfig_FieldPathSelectorSearch:
		fpvs.subPathValue.(AzureSearchConfig_FieldPathValue).SetTo(&(*target).Search)
	default:
		panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fpvs.Selector()))
	}
}

func (fpvs *AzureConfig_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AzureConfig)
	fpvs.SetTo(&typedObject)
}

func (fpvs *AzureConfig_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *AzureConfig_FieldSubPathValue) CompareWith(source *AzureConfig) (int, bool) {
	switch fpvs.Selector() {
	case AzureConfig_FieldPathSelectorSearch:
		return fpvs.subPathValue.(AzureSearchConfig_FieldPathValue).CompareWith(source.GetSearch())
	default:
		panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fpvs.Selector()))
	}
}

func (fpvs *AzureConfig_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*AzureConfig))
}

// AzureConfig_FieldPathArrayItemValue allows storing single item in Path-specific values for AzureConfig according to their type
// Present only for array (repeated) types.
type AzureConfig_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AzureConfig_FieldPath
	ContainsValue(*AzureConfig) bool
}

// ParseAzureConfig_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAzureConfig_FieldPathArrayItemValue(pathStr, valueStr string) (AzureConfig_FieldPathArrayItemValue, error) {
	fp, err := ParseAzureConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureConfig field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AzureConfig_FieldPathArrayItemValue), nil
}

func MustParseAzureConfig_FieldPathArrayItemValue(pathStr, valueStr string) AzureConfig_FieldPathArrayItemValue {
	fpaiv, err := ParseAzureConfig_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AzureConfig_FieldTerminalPathArrayItemValue struct {
	AzureConfig_FieldTerminalPath
	value interface{}
}

var _ AzureConfig_FieldPathArrayItemValue = (*AzureConfig_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AzureConfig as interface{}
func (fpaiv *AzureConfig_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AzureConfig_FieldTerminalPathArrayItemValue) GetSingle(source *AzureConfig) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AzureConfig_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AzureConfig))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AzureConfig'
func (fpaiv *AzureConfig_FieldTerminalPathArrayItemValue) ContainsValue(source *AzureConfig) bool {
	slice := fpaiv.AzureConfig_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type AzureConfig_FieldSubPathArrayItemValue struct {
	AzureConfig_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *AzureConfig_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *AzureConfig_FieldSubPathArrayItemValue) AsSearchPathItemValue() (AzureSearchConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AzureSearchConfig_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'AzureConfig'
func (fpaivs *AzureConfig_FieldSubPathArrayItemValue) ContainsValue(source *AzureConfig) bool {
	switch fpaivs.Selector() {
	case AzureConfig_FieldPathSelectorSearch:
		return fpaivs.subPathItemValue.(AzureSearchConfig_FieldPathArrayItemValue).ContainsValue(source.GetSearch())
	default:
		panic(fmt.Sprintf("Invalid selector for AzureConfig: %d", fpaivs.Selector()))
	}
}

// AzureConfig_FieldPathArrayOfValues allows storing slice of values for AzureConfig fields according to their type
type AzureConfig_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AzureConfig_FieldPath
}

func ParseAzureConfig_FieldPathArrayOfValues(pathStr, valuesStr string) (AzureConfig_FieldPathArrayOfValues, error) {
	fp, err := ParseAzureConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureConfig field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AzureConfig_FieldPathArrayOfValues), nil
}

func MustParseAzureConfig_FieldPathArrayOfValues(pathStr, valuesStr string) AzureConfig_FieldPathArrayOfValues {
	fpaov, err := ParseAzureConfig_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AzureConfig_FieldTerminalPathArrayOfValues struct {
	AzureConfig_FieldTerminalPath
	values interface{}
}

var _ AzureConfig_FieldPathArrayOfValues = (*AzureConfig_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AzureConfig_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AzureConfig_FieldPathSelectorSearch:
		for _, v := range fpaov.values.([]*AzureSearchConfig) {
			values = append(values, v)
		}
	case AzureConfig_FieldPathSelectorParallelToolCalls:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case AzureConfig_FieldPathSelectorMaxCompletionTokens:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case AzureConfig_FieldPathSelectorReasoningEffort:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AzureConfig_FieldTerminalPathArrayOfValues) AsSearchArrayOfValues() ([]*AzureSearchConfig, bool) {
	res, ok := fpaov.values.([]*AzureSearchConfig)
	return res, ok
}
func (fpaov *AzureConfig_FieldTerminalPathArrayOfValues) AsParallelToolCallsArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *AzureConfig_FieldTerminalPathArrayOfValues) AsMaxCompletionTokensArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *AzureConfig_FieldTerminalPathArrayOfValues) AsReasoningEffortArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type AzureConfig_FieldSubPathArrayOfValues struct {
	AzureConfig_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ AzureConfig_FieldPathArrayOfValues = (*AzureConfig_FieldSubPathArrayOfValues)(nil)

func (fpsaov *AzureConfig_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *AzureConfig_FieldSubPathArrayOfValues) AsSearchPathArrayOfValues() (AzureSearchConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AzureSearchConfig_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AzureSearchConfig_FieldPath interface {
	gotenobject.FieldPath
	Selector() AzureSearchConfig_FieldPathSelector
	Get(source *AzureSearchConfig) []interface{}
	GetSingle(source *AzureSearchConfig) (interface{}, bool)
	ClearValue(item *AzureSearchConfig)

	// Those methods build corresponding AzureSearchConfig_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AzureSearchConfig_FieldPathValue
	WithIArrayOfValues(values interface{}) AzureSearchConfig_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AzureSearchConfig_FieldPathArrayItemValue
}

type AzureSearchConfig_FieldPathSelector int32

const (
	AzureSearchConfig_FieldPathSelectorEndpoint       AzureSearchConfig_FieldPathSelector = 0
	AzureSearchConfig_FieldPathSelectorIndex          AzureSearchConfig_FieldPathSelector = 1
	AzureSearchConfig_FieldPathSelectorApiKey         AzureSearchConfig_FieldPathSelector = 2
	AzureSearchConfig_FieldPathSelectorEnableSemantic AzureSearchConfig_FieldPathSelector = 3
)

func (s AzureSearchConfig_FieldPathSelector) String() string {
	switch s {
	case AzureSearchConfig_FieldPathSelectorEndpoint:
		return "endpoint"
	case AzureSearchConfig_FieldPathSelectorIndex:
		return "index"
	case AzureSearchConfig_FieldPathSelectorApiKey:
		return "api_key"
	case AzureSearchConfig_FieldPathSelectorEnableSemantic:
		return "enable_semantic"
	default:
		panic(fmt.Sprintf("Invalid selector for AzureSearchConfig: %d", s))
	}
}

func BuildAzureSearchConfig_FieldPath(fp gotenobject.RawFieldPath) (AzureSearchConfig_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AzureSearchConfig")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "endpoint":
			return &AzureSearchConfig_FieldTerminalPath{selector: AzureSearchConfig_FieldPathSelectorEndpoint}, nil
		case "index":
			return &AzureSearchConfig_FieldTerminalPath{selector: AzureSearchConfig_FieldPathSelectorIndex}, nil
		case "api_key", "apiKey", "api-key":
			return &AzureSearchConfig_FieldTerminalPath{selector: AzureSearchConfig_FieldPathSelectorApiKey}, nil
		case "enable_semantic", "enableSemantic", "enable-semantic":
			return &AzureSearchConfig_FieldTerminalPath{selector: AzureSearchConfig_FieldPathSelectorEnableSemantic}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AzureSearchConfig", fp)
}

func ParseAzureSearchConfig_FieldPath(rawField string) (AzureSearchConfig_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAzureSearchConfig_FieldPath(fp)
}

func MustParseAzureSearchConfig_FieldPath(rawField string) AzureSearchConfig_FieldPath {
	fp, err := ParseAzureSearchConfig_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AzureSearchConfig_FieldTerminalPath struct {
	selector AzureSearchConfig_FieldPathSelector
}

var _ AzureSearchConfig_FieldPath = (*AzureSearchConfig_FieldTerminalPath)(nil)

func (fp *AzureSearchConfig_FieldTerminalPath) Selector() AzureSearchConfig_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AzureSearchConfig_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AzureSearchConfig_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AzureSearchConfig
func (fp *AzureSearchConfig_FieldTerminalPath) Get(source *AzureSearchConfig) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AzureSearchConfig_FieldPathSelectorEndpoint:
			values = append(values, source.Endpoint)
		case AzureSearchConfig_FieldPathSelectorIndex:
			values = append(values, source.Index)
		case AzureSearchConfig_FieldPathSelectorApiKey:
			values = append(values, source.ApiKey)
		case AzureSearchConfig_FieldPathSelectorEnableSemantic:
			values = append(values, source.EnableSemantic)
		default:
			panic(fmt.Sprintf("Invalid selector for AzureSearchConfig: %d", fp.selector))
		}
	}
	return
}

func (fp *AzureSearchConfig_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AzureSearchConfig))
}

// GetSingle returns value pointed by specific field of from source AzureSearchConfig
func (fp *AzureSearchConfig_FieldTerminalPath) GetSingle(source *AzureSearchConfig) (interface{}, bool) {
	switch fp.selector {
	case AzureSearchConfig_FieldPathSelectorEndpoint:
		return source.GetEndpoint(), source != nil
	case AzureSearchConfig_FieldPathSelectorIndex:
		return source.GetIndex(), source != nil
	case AzureSearchConfig_FieldPathSelectorApiKey:
		return source.GetApiKey(), source != nil
	case AzureSearchConfig_FieldPathSelectorEnableSemantic:
		return source.GetEnableSemantic(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AzureSearchConfig: %d", fp.selector))
	}
}

func (fp *AzureSearchConfig_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AzureSearchConfig))
}

// GetDefault returns a default value of the field type
func (fp *AzureSearchConfig_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AzureSearchConfig_FieldPathSelectorEndpoint:
		return ""
	case AzureSearchConfig_FieldPathSelectorIndex:
		return ""
	case AzureSearchConfig_FieldPathSelectorApiKey:
		return ""
	case AzureSearchConfig_FieldPathSelectorEnableSemantic:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for AzureSearchConfig: %d", fp.selector))
	}
}

func (fp *AzureSearchConfig_FieldTerminalPath) ClearValue(item *AzureSearchConfig) {
	if item != nil {
		switch fp.selector {
		case AzureSearchConfig_FieldPathSelectorEndpoint:
			item.Endpoint = ""
		case AzureSearchConfig_FieldPathSelectorIndex:
			item.Index = ""
		case AzureSearchConfig_FieldPathSelectorApiKey:
			item.ApiKey = ""
		case AzureSearchConfig_FieldPathSelectorEnableSemantic:
			item.EnableSemantic = false
		default:
			panic(fmt.Sprintf("Invalid selector for AzureSearchConfig: %d", fp.selector))
		}
	}
}

func (fp *AzureSearchConfig_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AzureSearchConfig))
}

// IsLeaf - whether field path is holds simple value
func (fp *AzureSearchConfig_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AzureSearchConfig_FieldPathSelectorEndpoint ||
		fp.selector == AzureSearchConfig_FieldPathSelectorIndex ||
		fp.selector == AzureSearchConfig_FieldPathSelectorApiKey ||
		fp.selector == AzureSearchConfig_FieldPathSelectorEnableSemantic
}

func (fp *AzureSearchConfig_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AzureSearchConfig_FieldTerminalPath) WithIValue(value interface{}) AzureSearchConfig_FieldPathValue {
	switch fp.selector {
	case AzureSearchConfig_FieldPathSelectorEndpoint:
		return &AzureSearchConfig_FieldTerminalPathValue{AzureSearchConfig_FieldTerminalPath: *fp, value: value.(string)}
	case AzureSearchConfig_FieldPathSelectorIndex:
		return &AzureSearchConfig_FieldTerminalPathValue{AzureSearchConfig_FieldTerminalPath: *fp, value: value.(string)}
	case AzureSearchConfig_FieldPathSelectorApiKey:
		return &AzureSearchConfig_FieldTerminalPathValue{AzureSearchConfig_FieldTerminalPath: *fp, value: value.(string)}
	case AzureSearchConfig_FieldPathSelectorEnableSemantic:
		return &AzureSearchConfig_FieldTerminalPathValue{AzureSearchConfig_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for AzureSearchConfig: %d", fp.selector))
	}
}

func (fp *AzureSearchConfig_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AzureSearchConfig_FieldTerminalPath) WithIArrayOfValues(values interface{}) AzureSearchConfig_FieldPathArrayOfValues {
	fpaov := &AzureSearchConfig_FieldTerminalPathArrayOfValues{AzureSearchConfig_FieldTerminalPath: *fp}
	switch fp.selector {
	case AzureSearchConfig_FieldPathSelectorEndpoint:
		return &AzureSearchConfig_FieldTerminalPathArrayOfValues{AzureSearchConfig_FieldTerminalPath: *fp, values: values.([]string)}
	case AzureSearchConfig_FieldPathSelectorIndex:
		return &AzureSearchConfig_FieldTerminalPathArrayOfValues{AzureSearchConfig_FieldTerminalPath: *fp, values: values.([]string)}
	case AzureSearchConfig_FieldPathSelectorApiKey:
		return &AzureSearchConfig_FieldTerminalPathArrayOfValues{AzureSearchConfig_FieldTerminalPath: *fp, values: values.([]string)}
	case AzureSearchConfig_FieldPathSelectorEnableSemantic:
		return &AzureSearchConfig_FieldTerminalPathArrayOfValues{AzureSearchConfig_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for AzureSearchConfig: %d", fp.selector))
	}
	return fpaov
}

func (fp *AzureSearchConfig_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AzureSearchConfig_FieldTerminalPath) WithIArrayItemValue(value interface{}) AzureSearchConfig_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AzureSearchConfig: %d", fp.selector))
	}
}

func (fp *AzureSearchConfig_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// AzureSearchConfig_FieldPathValue allows storing values for AzureSearchConfig fields according to their type
type AzureSearchConfig_FieldPathValue interface {
	AzureSearchConfig_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AzureSearchConfig)
	CompareWith(*AzureSearchConfig) (cmp int, comparable bool)
}

func ParseAzureSearchConfig_FieldPathValue(pathStr, valueStr string) (AzureSearchConfig_FieldPathValue, error) {
	fp, err := ParseAzureSearchConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureSearchConfig field path value from %s: %v", valueStr, err)
	}
	return fpv.(AzureSearchConfig_FieldPathValue), nil
}

func MustParseAzureSearchConfig_FieldPathValue(pathStr, valueStr string) AzureSearchConfig_FieldPathValue {
	fpv, err := ParseAzureSearchConfig_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AzureSearchConfig_FieldTerminalPathValue struct {
	AzureSearchConfig_FieldTerminalPath
	value interface{}
}

var _ AzureSearchConfig_FieldPathValue = (*AzureSearchConfig_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AzureSearchConfig' as interface{}
func (fpv *AzureSearchConfig_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AzureSearchConfig_FieldTerminalPathValue) AsEndpointValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AzureSearchConfig_FieldTerminalPathValue) AsIndexValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AzureSearchConfig_FieldTerminalPathValue) AsApiKeyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AzureSearchConfig_FieldTerminalPathValue) AsEnableSemanticValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object AzureSearchConfig
func (fpv *AzureSearchConfig_FieldTerminalPathValue) SetTo(target **AzureSearchConfig) {
	if *target == nil {
		*target = new(AzureSearchConfig)
	}
	switch fpv.selector {
	case AzureSearchConfig_FieldPathSelectorEndpoint:
		(*target).Endpoint = fpv.value.(string)
	case AzureSearchConfig_FieldPathSelectorIndex:
		(*target).Index = fpv.value.(string)
	case AzureSearchConfig_FieldPathSelectorApiKey:
		(*target).ApiKey = fpv.value.(string)
	case AzureSearchConfig_FieldPathSelectorEnableSemantic:
		(*target).EnableSemantic = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for AzureSearchConfig: %d", fpv.selector))
	}
}

func (fpv *AzureSearchConfig_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AzureSearchConfig)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AzureSearchConfig_FieldTerminalPathValue' with the value under path in 'AzureSearchConfig'.
func (fpv *AzureSearchConfig_FieldTerminalPathValue) CompareWith(source *AzureSearchConfig) (int, bool) {
	switch fpv.selector {
	case AzureSearchConfig_FieldPathSelectorEndpoint:
		leftValue := fpv.value.(string)
		rightValue := source.GetEndpoint()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AzureSearchConfig_FieldPathSelectorIndex:
		leftValue := fpv.value.(string)
		rightValue := source.GetIndex()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AzureSearchConfig_FieldPathSelectorApiKey:
		leftValue := fpv.value.(string)
		rightValue := source.GetApiKey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AzureSearchConfig_FieldPathSelectorEnableSemantic:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEnableSemantic()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AzureSearchConfig: %d", fpv.selector))
	}
}

func (fpv *AzureSearchConfig_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AzureSearchConfig))
}

// AzureSearchConfig_FieldPathArrayItemValue allows storing single item in Path-specific values for AzureSearchConfig according to their type
// Present only for array (repeated) types.
type AzureSearchConfig_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AzureSearchConfig_FieldPath
	ContainsValue(*AzureSearchConfig) bool
}

// ParseAzureSearchConfig_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAzureSearchConfig_FieldPathArrayItemValue(pathStr, valueStr string) (AzureSearchConfig_FieldPathArrayItemValue, error) {
	fp, err := ParseAzureSearchConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureSearchConfig field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AzureSearchConfig_FieldPathArrayItemValue), nil
}

func MustParseAzureSearchConfig_FieldPathArrayItemValue(pathStr, valueStr string) AzureSearchConfig_FieldPathArrayItemValue {
	fpaiv, err := ParseAzureSearchConfig_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AzureSearchConfig_FieldTerminalPathArrayItemValue struct {
	AzureSearchConfig_FieldTerminalPath
	value interface{}
}

var _ AzureSearchConfig_FieldPathArrayItemValue = (*AzureSearchConfig_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AzureSearchConfig as interface{}
func (fpaiv *AzureSearchConfig_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AzureSearchConfig_FieldTerminalPathArrayItemValue) GetSingle(source *AzureSearchConfig) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AzureSearchConfig_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AzureSearchConfig))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AzureSearchConfig'
func (fpaiv *AzureSearchConfig_FieldTerminalPathArrayItemValue) ContainsValue(source *AzureSearchConfig) bool {
	slice := fpaiv.AzureSearchConfig_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// AzureSearchConfig_FieldPathArrayOfValues allows storing slice of values for AzureSearchConfig fields according to their type
type AzureSearchConfig_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AzureSearchConfig_FieldPath
}

func ParseAzureSearchConfig_FieldPathArrayOfValues(pathStr, valuesStr string) (AzureSearchConfig_FieldPathArrayOfValues, error) {
	fp, err := ParseAzureSearchConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureSearchConfig field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AzureSearchConfig_FieldPathArrayOfValues), nil
}

func MustParseAzureSearchConfig_FieldPathArrayOfValues(pathStr, valuesStr string) AzureSearchConfig_FieldPathArrayOfValues {
	fpaov, err := ParseAzureSearchConfig_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AzureSearchConfig_FieldTerminalPathArrayOfValues struct {
	AzureSearchConfig_FieldTerminalPath
	values interface{}
}

var _ AzureSearchConfig_FieldPathArrayOfValues = (*AzureSearchConfig_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AzureSearchConfig_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AzureSearchConfig_FieldPathSelectorEndpoint:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AzureSearchConfig_FieldPathSelectorIndex:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AzureSearchConfig_FieldPathSelectorApiKey:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AzureSearchConfig_FieldPathSelectorEnableSemantic:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AzureSearchConfig_FieldTerminalPathArrayOfValues) AsEndpointArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AzureSearchConfig_FieldTerminalPathArrayOfValues) AsIndexArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AzureSearchConfig_FieldTerminalPathArrayOfValues) AsApiKeyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AzureSearchConfig_FieldTerminalPathArrayOfValues) AsEnableSemanticArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AnthropicConfig_FieldPath interface {
	gotenobject.FieldPath
	Selector() AnthropicConfig_FieldPathSelector
	Get(source *AnthropicConfig) []interface{}
	GetSingle(source *AnthropicConfig) (interface{}, bool)
	ClearValue(item *AnthropicConfig)

	// Those methods build corresponding AnthropicConfig_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AnthropicConfig_FieldPathValue
	WithIArrayOfValues(values interface{}) AnthropicConfig_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AnthropicConfig_FieldPathArrayItemValue
}

type AnthropicConfig_FieldPathSelector int32

const (
	AnthropicConfig_FieldPathSelectorThinking               AnthropicConfig_FieldPathSelector = 0
	AnthropicConfig_FieldPathSelectorBetaFeatures           AnthropicConfig_FieldPathSelector = 1
	AnthropicConfig_FieldPathSelectorDisableInputTokenCache AnthropicConfig_FieldPathSelector = 2
)

func (s AnthropicConfig_FieldPathSelector) String() string {
	switch s {
	case AnthropicConfig_FieldPathSelectorThinking:
		return "thinking"
	case AnthropicConfig_FieldPathSelectorBetaFeatures:
		return "beta_features"
	case AnthropicConfig_FieldPathSelectorDisableInputTokenCache:
		return "disable_input_token_cache"
	default:
		panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", s))
	}
}

func BuildAnthropicConfig_FieldPath(fp gotenobject.RawFieldPath) (AnthropicConfig_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AnthropicConfig")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "thinking":
			return &AnthropicConfig_FieldTerminalPath{selector: AnthropicConfig_FieldPathSelectorThinking}, nil
		case "beta_features", "betaFeatures", "beta-features":
			return &AnthropicConfig_FieldTerminalPath{selector: AnthropicConfig_FieldPathSelectorBetaFeatures}, nil
		case "disable_input_token_cache", "disableInputTokenCache", "disable-input-token-cache":
			return &AnthropicConfig_FieldTerminalPath{selector: AnthropicConfig_FieldPathSelectorDisableInputTokenCache}, nil
		}
	} else {
		switch fp[0] {
		case "thinking":
			if subpath, err := BuildThinkingConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AnthropicConfig_FieldSubPath{selector: AnthropicConfig_FieldPathSelectorThinking, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AnthropicConfig", fp)
}

func ParseAnthropicConfig_FieldPath(rawField string) (AnthropicConfig_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAnthropicConfig_FieldPath(fp)
}

func MustParseAnthropicConfig_FieldPath(rawField string) AnthropicConfig_FieldPath {
	fp, err := ParseAnthropicConfig_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AnthropicConfig_FieldTerminalPath struct {
	selector AnthropicConfig_FieldPathSelector
}

var _ AnthropicConfig_FieldPath = (*AnthropicConfig_FieldTerminalPath)(nil)

func (fp *AnthropicConfig_FieldTerminalPath) Selector() AnthropicConfig_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AnthropicConfig_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AnthropicConfig_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AnthropicConfig
func (fp *AnthropicConfig_FieldTerminalPath) Get(source *AnthropicConfig) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AnthropicConfig_FieldPathSelectorThinking:
			if source.Thinking != nil {
				values = append(values, source.Thinking)
			}
		case AnthropicConfig_FieldPathSelectorBetaFeatures:
			for _, value := range source.GetBetaFeatures() {
				values = append(values, value)
			}
		case AnthropicConfig_FieldPathSelectorDisableInputTokenCache:
			values = append(values, source.DisableInputTokenCache)
		default:
			panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fp.selector))
		}
	}
	return
}

func (fp *AnthropicConfig_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AnthropicConfig))
}

// GetSingle returns value pointed by specific field of from source AnthropicConfig
func (fp *AnthropicConfig_FieldTerminalPath) GetSingle(source *AnthropicConfig) (interface{}, bool) {
	switch fp.selector {
	case AnthropicConfig_FieldPathSelectorThinking:
		res := source.GetThinking()
		return res, res != nil
	case AnthropicConfig_FieldPathSelectorBetaFeatures:
		res := source.GetBetaFeatures()
		return res, res != nil
	case AnthropicConfig_FieldPathSelectorDisableInputTokenCache:
		return source.GetDisableInputTokenCache(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fp.selector))
	}
}

func (fp *AnthropicConfig_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AnthropicConfig))
}

// GetDefault returns a default value of the field type
func (fp *AnthropicConfig_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AnthropicConfig_FieldPathSelectorThinking:
		return (*ThinkingConfig)(nil)
	case AnthropicConfig_FieldPathSelectorBetaFeatures:
		return ([]string)(nil)
	case AnthropicConfig_FieldPathSelectorDisableInputTokenCache:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fp.selector))
	}
}

func (fp *AnthropicConfig_FieldTerminalPath) ClearValue(item *AnthropicConfig) {
	if item != nil {
		switch fp.selector {
		case AnthropicConfig_FieldPathSelectorThinking:
			item.Thinking = nil
		case AnthropicConfig_FieldPathSelectorBetaFeatures:
			item.BetaFeatures = nil
		case AnthropicConfig_FieldPathSelectorDisableInputTokenCache:
			item.DisableInputTokenCache = false
		default:
			panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fp.selector))
		}
	}
}

func (fp *AnthropicConfig_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AnthropicConfig))
}

// IsLeaf - whether field path is holds simple value
func (fp *AnthropicConfig_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AnthropicConfig_FieldPathSelectorBetaFeatures ||
		fp.selector == AnthropicConfig_FieldPathSelectorDisableInputTokenCache
}

func (fp *AnthropicConfig_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AnthropicConfig_FieldTerminalPath) WithIValue(value interface{}) AnthropicConfig_FieldPathValue {
	switch fp.selector {
	case AnthropicConfig_FieldPathSelectorThinking:
		return &AnthropicConfig_FieldTerminalPathValue{AnthropicConfig_FieldTerminalPath: *fp, value: value.(*ThinkingConfig)}
	case AnthropicConfig_FieldPathSelectorBetaFeatures:
		return &AnthropicConfig_FieldTerminalPathValue{AnthropicConfig_FieldTerminalPath: *fp, value: value.([]string)}
	case AnthropicConfig_FieldPathSelectorDisableInputTokenCache:
		return &AnthropicConfig_FieldTerminalPathValue{AnthropicConfig_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fp.selector))
	}
}

func (fp *AnthropicConfig_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AnthropicConfig_FieldTerminalPath) WithIArrayOfValues(values interface{}) AnthropicConfig_FieldPathArrayOfValues {
	fpaov := &AnthropicConfig_FieldTerminalPathArrayOfValues{AnthropicConfig_FieldTerminalPath: *fp}
	switch fp.selector {
	case AnthropicConfig_FieldPathSelectorThinking:
		return &AnthropicConfig_FieldTerminalPathArrayOfValues{AnthropicConfig_FieldTerminalPath: *fp, values: values.([]*ThinkingConfig)}
	case AnthropicConfig_FieldPathSelectorBetaFeatures:
		return &AnthropicConfig_FieldTerminalPathArrayOfValues{AnthropicConfig_FieldTerminalPath: *fp, values: values.([][]string)}
	case AnthropicConfig_FieldPathSelectorDisableInputTokenCache:
		return &AnthropicConfig_FieldTerminalPathArrayOfValues{AnthropicConfig_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fp.selector))
	}
	return fpaov
}

func (fp *AnthropicConfig_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AnthropicConfig_FieldTerminalPath) WithIArrayItemValue(value interface{}) AnthropicConfig_FieldPathArrayItemValue {
	switch fp.selector {
	case AnthropicConfig_FieldPathSelectorBetaFeatures:
		return &AnthropicConfig_FieldTerminalPathArrayItemValue{AnthropicConfig_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fp.selector))
	}
}

func (fp *AnthropicConfig_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type AnthropicConfig_FieldSubPath struct {
	selector AnthropicConfig_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ AnthropicConfig_FieldPath = (*AnthropicConfig_FieldSubPath)(nil)

func (fps *AnthropicConfig_FieldSubPath) Selector() AnthropicConfig_FieldPathSelector {
	return fps.selector
}
func (fps *AnthropicConfig_FieldSubPath) AsThinkingSubPath() (ThinkingConfig_FieldPath, bool) {
	res, ok := fps.subPath.(ThinkingConfig_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *AnthropicConfig_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *AnthropicConfig_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source AnthropicConfig
func (fps *AnthropicConfig_FieldSubPath) Get(source *AnthropicConfig) (values []interface{}) {
	switch fps.selector {
	case AnthropicConfig_FieldPathSelectorThinking:
		values = append(values, fps.subPath.GetRaw(source.GetThinking())...)
	default:
		panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fps.selector))
	}
	return
}

func (fps *AnthropicConfig_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*AnthropicConfig))
}

// GetSingle returns value of selected field from source AnthropicConfig
func (fps *AnthropicConfig_FieldSubPath) GetSingle(source *AnthropicConfig) (interface{}, bool) {
	switch fps.selector {
	case AnthropicConfig_FieldPathSelectorThinking:
		if source.GetThinking() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetThinking())
	default:
		panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fps.selector))
	}
}

func (fps *AnthropicConfig_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*AnthropicConfig))
}

// GetDefault returns a default value of the field type
func (fps *AnthropicConfig_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *AnthropicConfig_FieldSubPath) ClearValue(item *AnthropicConfig) {
	if item != nil {
		switch fps.selector {
		case AnthropicConfig_FieldPathSelectorThinking:
			fps.subPath.ClearValueRaw(item.Thinking)
		default:
			panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fps.selector))
		}
	}
}

func (fps *AnthropicConfig_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*AnthropicConfig))
}

// IsLeaf - whether field path is holds simple value
func (fps *AnthropicConfig_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *AnthropicConfig_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&AnthropicConfig_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *AnthropicConfig_FieldSubPath) WithIValue(value interface{}) AnthropicConfig_FieldPathValue {
	return &AnthropicConfig_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *AnthropicConfig_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *AnthropicConfig_FieldSubPath) WithIArrayOfValues(values interface{}) AnthropicConfig_FieldPathArrayOfValues {
	return &AnthropicConfig_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *AnthropicConfig_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *AnthropicConfig_FieldSubPath) WithIArrayItemValue(value interface{}) AnthropicConfig_FieldPathArrayItemValue {
	return &AnthropicConfig_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *AnthropicConfig_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// AnthropicConfig_FieldPathValue allows storing values for AnthropicConfig fields according to their type
type AnthropicConfig_FieldPathValue interface {
	AnthropicConfig_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AnthropicConfig)
	CompareWith(*AnthropicConfig) (cmp int, comparable bool)
}

func ParseAnthropicConfig_FieldPathValue(pathStr, valueStr string) (AnthropicConfig_FieldPathValue, error) {
	fp, err := ParseAnthropicConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AnthropicConfig field path value from %s: %v", valueStr, err)
	}
	return fpv.(AnthropicConfig_FieldPathValue), nil
}

func MustParseAnthropicConfig_FieldPathValue(pathStr, valueStr string) AnthropicConfig_FieldPathValue {
	fpv, err := ParseAnthropicConfig_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AnthropicConfig_FieldTerminalPathValue struct {
	AnthropicConfig_FieldTerminalPath
	value interface{}
}

var _ AnthropicConfig_FieldPathValue = (*AnthropicConfig_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AnthropicConfig' as interface{}
func (fpv *AnthropicConfig_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AnthropicConfig_FieldTerminalPathValue) AsThinkingValue() (*ThinkingConfig, bool) {
	res, ok := fpv.value.(*ThinkingConfig)
	return res, ok
}
func (fpv *AnthropicConfig_FieldTerminalPathValue) AsBetaFeaturesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *AnthropicConfig_FieldTerminalPathValue) AsDisableInputTokenCacheValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object AnthropicConfig
func (fpv *AnthropicConfig_FieldTerminalPathValue) SetTo(target **AnthropicConfig) {
	if *target == nil {
		*target = new(AnthropicConfig)
	}
	switch fpv.selector {
	case AnthropicConfig_FieldPathSelectorThinking:
		(*target).Thinking = fpv.value.(*ThinkingConfig)
	case AnthropicConfig_FieldPathSelectorBetaFeatures:
		(*target).BetaFeatures = fpv.value.([]string)
	case AnthropicConfig_FieldPathSelectorDisableInputTokenCache:
		(*target).DisableInputTokenCache = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fpv.selector))
	}
}

func (fpv *AnthropicConfig_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AnthropicConfig)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AnthropicConfig_FieldTerminalPathValue' with the value under path in 'AnthropicConfig'.
func (fpv *AnthropicConfig_FieldTerminalPathValue) CompareWith(source *AnthropicConfig) (int, bool) {
	switch fpv.selector {
	case AnthropicConfig_FieldPathSelectorThinking:
		return 0, false
	case AnthropicConfig_FieldPathSelectorBetaFeatures:
		return 0, false
	case AnthropicConfig_FieldPathSelectorDisableInputTokenCache:
		leftValue := fpv.value.(bool)
		rightValue := source.GetDisableInputTokenCache()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fpv.selector))
	}
}

func (fpv *AnthropicConfig_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AnthropicConfig))
}

type AnthropicConfig_FieldSubPathValue struct {
	AnthropicConfig_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ AnthropicConfig_FieldPathValue = (*AnthropicConfig_FieldSubPathValue)(nil)

func (fpvs *AnthropicConfig_FieldSubPathValue) AsThinkingPathValue() (ThinkingConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ThinkingConfig_FieldPathValue)
	return res, ok
}

func (fpvs *AnthropicConfig_FieldSubPathValue) SetTo(target **AnthropicConfig) {
	if *target == nil {
		*target = new(AnthropicConfig)
	}
	switch fpvs.Selector() {
	case AnthropicConfig_FieldPathSelectorThinking:
		fpvs.subPathValue.(ThinkingConfig_FieldPathValue).SetTo(&(*target).Thinking)
	default:
		panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fpvs.Selector()))
	}
}

func (fpvs *AnthropicConfig_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AnthropicConfig)
	fpvs.SetTo(&typedObject)
}

func (fpvs *AnthropicConfig_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *AnthropicConfig_FieldSubPathValue) CompareWith(source *AnthropicConfig) (int, bool) {
	switch fpvs.Selector() {
	case AnthropicConfig_FieldPathSelectorThinking:
		return fpvs.subPathValue.(ThinkingConfig_FieldPathValue).CompareWith(source.GetThinking())
	default:
		panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fpvs.Selector()))
	}
}

func (fpvs *AnthropicConfig_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*AnthropicConfig))
}

// AnthropicConfig_FieldPathArrayItemValue allows storing single item in Path-specific values for AnthropicConfig according to their type
// Present only for array (repeated) types.
type AnthropicConfig_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AnthropicConfig_FieldPath
	ContainsValue(*AnthropicConfig) bool
}

// ParseAnthropicConfig_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAnthropicConfig_FieldPathArrayItemValue(pathStr, valueStr string) (AnthropicConfig_FieldPathArrayItemValue, error) {
	fp, err := ParseAnthropicConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AnthropicConfig field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AnthropicConfig_FieldPathArrayItemValue), nil
}

func MustParseAnthropicConfig_FieldPathArrayItemValue(pathStr, valueStr string) AnthropicConfig_FieldPathArrayItemValue {
	fpaiv, err := ParseAnthropicConfig_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AnthropicConfig_FieldTerminalPathArrayItemValue struct {
	AnthropicConfig_FieldTerminalPath
	value interface{}
}

var _ AnthropicConfig_FieldPathArrayItemValue = (*AnthropicConfig_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AnthropicConfig as interface{}
func (fpaiv *AnthropicConfig_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *AnthropicConfig_FieldTerminalPathArrayItemValue) AsBetaFeaturesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *AnthropicConfig_FieldTerminalPathArrayItemValue) GetSingle(source *AnthropicConfig) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AnthropicConfig_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AnthropicConfig))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AnthropicConfig'
func (fpaiv *AnthropicConfig_FieldTerminalPathArrayItemValue) ContainsValue(source *AnthropicConfig) bool {
	slice := fpaiv.AnthropicConfig_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type AnthropicConfig_FieldSubPathArrayItemValue struct {
	AnthropicConfig_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *AnthropicConfig_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *AnthropicConfig_FieldSubPathArrayItemValue) AsThinkingPathItemValue() (ThinkingConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ThinkingConfig_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'AnthropicConfig'
func (fpaivs *AnthropicConfig_FieldSubPathArrayItemValue) ContainsValue(source *AnthropicConfig) bool {
	switch fpaivs.Selector() {
	case AnthropicConfig_FieldPathSelectorThinking:
		return fpaivs.subPathItemValue.(ThinkingConfig_FieldPathArrayItemValue).ContainsValue(source.GetThinking())
	default:
		panic(fmt.Sprintf("Invalid selector for AnthropicConfig: %d", fpaivs.Selector()))
	}
}

// AnthropicConfig_FieldPathArrayOfValues allows storing slice of values for AnthropicConfig fields according to their type
type AnthropicConfig_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AnthropicConfig_FieldPath
}

func ParseAnthropicConfig_FieldPathArrayOfValues(pathStr, valuesStr string) (AnthropicConfig_FieldPathArrayOfValues, error) {
	fp, err := ParseAnthropicConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AnthropicConfig field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AnthropicConfig_FieldPathArrayOfValues), nil
}

func MustParseAnthropicConfig_FieldPathArrayOfValues(pathStr, valuesStr string) AnthropicConfig_FieldPathArrayOfValues {
	fpaov, err := ParseAnthropicConfig_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AnthropicConfig_FieldTerminalPathArrayOfValues struct {
	AnthropicConfig_FieldTerminalPath
	values interface{}
}

var _ AnthropicConfig_FieldPathArrayOfValues = (*AnthropicConfig_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AnthropicConfig_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AnthropicConfig_FieldPathSelectorThinking:
		for _, v := range fpaov.values.([]*ThinkingConfig) {
			values = append(values, v)
		}
	case AnthropicConfig_FieldPathSelectorBetaFeatures:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case AnthropicConfig_FieldPathSelectorDisableInputTokenCache:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AnthropicConfig_FieldTerminalPathArrayOfValues) AsThinkingArrayOfValues() ([]*ThinkingConfig, bool) {
	res, ok := fpaov.values.([]*ThinkingConfig)
	return res, ok
}
func (fpaov *AnthropicConfig_FieldTerminalPathArrayOfValues) AsBetaFeaturesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *AnthropicConfig_FieldTerminalPathArrayOfValues) AsDisableInputTokenCacheArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type AnthropicConfig_FieldSubPathArrayOfValues struct {
	AnthropicConfig_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ AnthropicConfig_FieldPathArrayOfValues = (*AnthropicConfig_FieldSubPathArrayOfValues)(nil)

func (fpsaov *AnthropicConfig_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *AnthropicConfig_FieldSubPathArrayOfValues) AsThinkingPathArrayOfValues() (ThinkingConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ThinkingConfig_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ThinkingConfig_FieldPath interface {
	gotenobject.FieldPath
	Selector() ThinkingConfig_FieldPathSelector
	Get(source *ThinkingConfig) []interface{}
	GetSingle(source *ThinkingConfig) (interface{}, bool)
	ClearValue(item *ThinkingConfig)

	// Those methods build corresponding ThinkingConfig_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ThinkingConfig_FieldPathValue
	WithIArrayOfValues(values interface{}) ThinkingConfig_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ThinkingConfig_FieldPathArrayItemValue
}

type ThinkingConfig_FieldPathSelector int32

const (
	ThinkingConfig_FieldPathSelectorType         ThinkingConfig_FieldPathSelector = 0
	ThinkingConfig_FieldPathSelectorBudgetTokens ThinkingConfig_FieldPathSelector = 1
)

func (s ThinkingConfig_FieldPathSelector) String() string {
	switch s {
	case ThinkingConfig_FieldPathSelectorType:
		return "type"
	case ThinkingConfig_FieldPathSelectorBudgetTokens:
		return "budget_tokens"
	default:
		panic(fmt.Sprintf("Invalid selector for ThinkingConfig: %d", s))
	}
}

func BuildThinkingConfig_FieldPath(fp gotenobject.RawFieldPath) (ThinkingConfig_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ThinkingConfig")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &ThinkingConfig_FieldTerminalPath{selector: ThinkingConfig_FieldPathSelectorType}, nil
		case "budget_tokens", "budgetTokens", "budget-tokens":
			return &ThinkingConfig_FieldTerminalPath{selector: ThinkingConfig_FieldPathSelectorBudgetTokens}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ThinkingConfig", fp)
}

func ParseThinkingConfig_FieldPath(rawField string) (ThinkingConfig_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildThinkingConfig_FieldPath(fp)
}

func MustParseThinkingConfig_FieldPath(rawField string) ThinkingConfig_FieldPath {
	fp, err := ParseThinkingConfig_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ThinkingConfig_FieldTerminalPath struct {
	selector ThinkingConfig_FieldPathSelector
}

var _ ThinkingConfig_FieldPath = (*ThinkingConfig_FieldTerminalPath)(nil)

func (fp *ThinkingConfig_FieldTerminalPath) Selector() ThinkingConfig_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ThinkingConfig_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ThinkingConfig_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ThinkingConfig
func (fp *ThinkingConfig_FieldTerminalPath) Get(source *ThinkingConfig) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ThinkingConfig_FieldPathSelectorType:
			values = append(values, source.Type)
		case ThinkingConfig_FieldPathSelectorBudgetTokens:
			values = append(values, source.BudgetTokens)
		default:
			panic(fmt.Sprintf("Invalid selector for ThinkingConfig: %d", fp.selector))
		}
	}
	return
}

func (fp *ThinkingConfig_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ThinkingConfig))
}

// GetSingle returns value pointed by specific field of from source ThinkingConfig
func (fp *ThinkingConfig_FieldTerminalPath) GetSingle(source *ThinkingConfig) (interface{}, bool) {
	switch fp.selector {
	case ThinkingConfig_FieldPathSelectorType:
		return source.GetType(), source != nil
	case ThinkingConfig_FieldPathSelectorBudgetTokens:
		return source.GetBudgetTokens(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ThinkingConfig: %d", fp.selector))
	}
}

func (fp *ThinkingConfig_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ThinkingConfig))
}

// GetDefault returns a default value of the field type
func (fp *ThinkingConfig_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ThinkingConfig_FieldPathSelectorType:
		return ThinkingConfig_TYPE_UNSPECIFIED
	case ThinkingConfig_FieldPathSelectorBudgetTokens:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ThinkingConfig: %d", fp.selector))
	}
}

func (fp *ThinkingConfig_FieldTerminalPath) ClearValue(item *ThinkingConfig) {
	if item != nil {
		switch fp.selector {
		case ThinkingConfig_FieldPathSelectorType:
			item.Type = ThinkingConfig_TYPE_UNSPECIFIED
		case ThinkingConfig_FieldPathSelectorBudgetTokens:
			item.BudgetTokens = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ThinkingConfig: %d", fp.selector))
		}
	}
}

func (fp *ThinkingConfig_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ThinkingConfig))
}

// IsLeaf - whether field path is holds simple value
func (fp *ThinkingConfig_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ThinkingConfig_FieldPathSelectorType ||
		fp.selector == ThinkingConfig_FieldPathSelectorBudgetTokens
}

func (fp *ThinkingConfig_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ThinkingConfig_FieldTerminalPath) WithIValue(value interface{}) ThinkingConfig_FieldPathValue {
	switch fp.selector {
	case ThinkingConfig_FieldPathSelectorType:
		return &ThinkingConfig_FieldTerminalPathValue{ThinkingConfig_FieldTerminalPath: *fp, value: value.(ThinkingConfig_Type)}
	case ThinkingConfig_FieldPathSelectorBudgetTokens:
		return &ThinkingConfig_FieldTerminalPathValue{ThinkingConfig_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ThinkingConfig: %d", fp.selector))
	}
}

func (fp *ThinkingConfig_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ThinkingConfig_FieldTerminalPath) WithIArrayOfValues(values interface{}) ThinkingConfig_FieldPathArrayOfValues {
	fpaov := &ThinkingConfig_FieldTerminalPathArrayOfValues{ThinkingConfig_FieldTerminalPath: *fp}
	switch fp.selector {
	case ThinkingConfig_FieldPathSelectorType:
		return &ThinkingConfig_FieldTerminalPathArrayOfValues{ThinkingConfig_FieldTerminalPath: *fp, values: values.([]ThinkingConfig_Type)}
	case ThinkingConfig_FieldPathSelectorBudgetTokens:
		return &ThinkingConfig_FieldTerminalPathArrayOfValues{ThinkingConfig_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ThinkingConfig: %d", fp.selector))
	}
	return fpaov
}

func (fp *ThinkingConfig_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ThinkingConfig_FieldTerminalPath) WithIArrayItemValue(value interface{}) ThinkingConfig_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ThinkingConfig: %d", fp.selector))
	}
}

func (fp *ThinkingConfig_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ThinkingConfig_FieldPathValue allows storing values for ThinkingConfig fields according to their type
type ThinkingConfig_FieldPathValue interface {
	ThinkingConfig_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ThinkingConfig)
	CompareWith(*ThinkingConfig) (cmp int, comparable bool)
}

func ParseThinkingConfig_FieldPathValue(pathStr, valueStr string) (ThinkingConfig_FieldPathValue, error) {
	fp, err := ParseThinkingConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ThinkingConfig field path value from %s: %v", valueStr, err)
	}
	return fpv.(ThinkingConfig_FieldPathValue), nil
}

func MustParseThinkingConfig_FieldPathValue(pathStr, valueStr string) ThinkingConfig_FieldPathValue {
	fpv, err := ParseThinkingConfig_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ThinkingConfig_FieldTerminalPathValue struct {
	ThinkingConfig_FieldTerminalPath
	value interface{}
}

var _ ThinkingConfig_FieldPathValue = (*ThinkingConfig_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ThinkingConfig' as interface{}
func (fpv *ThinkingConfig_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ThinkingConfig_FieldTerminalPathValue) AsTypeValue() (ThinkingConfig_Type, bool) {
	res, ok := fpv.value.(ThinkingConfig_Type)
	return res, ok
}
func (fpv *ThinkingConfig_FieldTerminalPathValue) AsBudgetTokensValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ThinkingConfig
func (fpv *ThinkingConfig_FieldTerminalPathValue) SetTo(target **ThinkingConfig) {
	if *target == nil {
		*target = new(ThinkingConfig)
	}
	switch fpv.selector {
	case ThinkingConfig_FieldPathSelectorType:
		(*target).Type = fpv.value.(ThinkingConfig_Type)
	case ThinkingConfig_FieldPathSelectorBudgetTokens:
		(*target).BudgetTokens = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ThinkingConfig: %d", fpv.selector))
	}
}

func (fpv *ThinkingConfig_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ThinkingConfig)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ThinkingConfig_FieldTerminalPathValue' with the value under path in 'ThinkingConfig'.
func (fpv *ThinkingConfig_FieldTerminalPathValue) CompareWith(source *ThinkingConfig) (int, bool) {
	switch fpv.selector {
	case ThinkingConfig_FieldPathSelectorType:
		leftValue := fpv.value.(ThinkingConfig_Type)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ThinkingConfig_FieldPathSelectorBudgetTokens:
		leftValue := fpv.value.(int32)
		rightValue := source.GetBudgetTokens()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ThinkingConfig: %d", fpv.selector))
	}
}

func (fpv *ThinkingConfig_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ThinkingConfig))
}

// ThinkingConfig_FieldPathArrayItemValue allows storing single item in Path-specific values for ThinkingConfig according to their type
// Present only for array (repeated) types.
type ThinkingConfig_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ThinkingConfig_FieldPath
	ContainsValue(*ThinkingConfig) bool
}

// ParseThinkingConfig_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseThinkingConfig_FieldPathArrayItemValue(pathStr, valueStr string) (ThinkingConfig_FieldPathArrayItemValue, error) {
	fp, err := ParseThinkingConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ThinkingConfig field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ThinkingConfig_FieldPathArrayItemValue), nil
}

func MustParseThinkingConfig_FieldPathArrayItemValue(pathStr, valueStr string) ThinkingConfig_FieldPathArrayItemValue {
	fpaiv, err := ParseThinkingConfig_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ThinkingConfig_FieldTerminalPathArrayItemValue struct {
	ThinkingConfig_FieldTerminalPath
	value interface{}
}

var _ ThinkingConfig_FieldPathArrayItemValue = (*ThinkingConfig_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ThinkingConfig as interface{}
func (fpaiv *ThinkingConfig_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ThinkingConfig_FieldTerminalPathArrayItemValue) GetSingle(source *ThinkingConfig) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ThinkingConfig_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ThinkingConfig))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ThinkingConfig'
func (fpaiv *ThinkingConfig_FieldTerminalPathArrayItemValue) ContainsValue(source *ThinkingConfig) bool {
	slice := fpaiv.ThinkingConfig_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ThinkingConfig_FieldPathArrayOfValues allows storing slice of values for ThinkingConfig fields according to their type
type ThinkingConfig_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ThinkingConfig_FieldPath
}

func ParseThinkingConfig_FieldPathArrayOfValues(pathStr, valuesStr string) (ThinkingConfig_FieldPathArrayOfValues, error) {
	fp, err := ParseThinkingConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ThinkingConfig field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ThinkingConfig_FieldPathArrayOfValues), nil
}

func MustParseThinkingConfig_FieldPathArrayOfValues(pathStr, valuesStr string) ThinkingConfig_FieldPathArrayOfValues {
	fpaov, err := ParseThinkingConfig_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ThinkingConfig_FieldTerminalPathArrayOfValues struct {
	ThinkingConfig_FieldTerminalPath
	values interface{}
}

var _ ThinkingConfig_FieldPathArrayOfValues = (*ThinkingConfig_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ThinkingConfig_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ThinkingConfig_FieldPathSelectorType:
		for _, v := range fpaov.values.([]ThinkingConfig_Type) {
			values = append(values, v)
		}
	case ThinkingConfig_FieldPathSelectorBudgetTokens:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ThinkingConfig_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]ThinkingConfig_Type, bool) {
	res, ok := fpaov.values.([]ThinkingConfig_Type)
	return res, ok
}
func (fpaov *ThinkingConfig_FieldTerminalPathArrayOfValues) AsBudgetTokensArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GeminiConfig_FieldPath interface {
	gotenobject.FieldPath
	Selector() GeminiConfig_FieldPathSelector
	Get(source *GeminiConfig) []interface{}
	GetSingle(source *GeminiConfig) (interface{}, bool)
	ClearValue(item *GeminiConfig)

	// Those methods build corresponding GeminiConfig_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GeminiConfig_FieldPathValue
	WithIArrayOfValues(values interface{}) GeminiConfig_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GeminiConfig_FieldPathArrayItemValue
}

type GeminiConfig_FieldPathSelector int32

func (s GeminiConfig_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for GeminiConfig: %d", s))
	}
}

func BuildGeminiConfig_FieldPath(fp gotenobject.RawFieldPath) (GeminiConfig_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GeminiConfig")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GeminiConfig", fp)
}

func ParseGeminiConfig_FieldPath(rawField string) (GeminiConfig_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGeminiConfig_FieldPath(fp)
}

func MustParseGeminiConfig_FieldPath(rawField string) GeminiConfig_FieldPath {
	fp, err := ParseGeminiConfig_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GeminiConfig_FieldTerminalPath struct {
	selector GeminiConfig_FieldPathSelector
}

var _ GeminiConfig_FieldPath = (*GeminiConfig_FieldTerminalPath)(nil)

func (fp *GeminiConfig_FieldTerminalPath) Selector() GeminiConfig_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GeminiConfig_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GeminiConfig_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GeminiConfig
func (fp *GeminiConfig_FieldTerminalPath) Get(source *GeminiConfig) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for GeminiConfig: %d", fp.selector))
		}
	}
	return
}

func (fp *GeminiConfig_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GeminiConfig))
}

// GetSingle returns value pointed by specific field of from source GeminiConfig
func (fp *GeminiConfig_FieldTerminalPath) GetSingle(source *GeminiConfig) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GeminiConfig: %d", fp.selector))
	}
}

func (fp *GeminiConfig_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GeminiConfig))
}

// GetDefault returns a default value of the field type
func (fp *GeminiConfig_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GeminiConfig: %d", fp.selector))
	}
}

func (fp *GeminiConfig_FieldTerminalPath) ClearValue(item *GeminiConfig) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for GeminiConfig: %d", fp.selector))
		}
	}
}

func (fp *GeminiConfig_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GeminiConfig))
}

// IsLeaf - whether field path is holds simple value
func (fp *GeminiConfig_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *GeminiConfig_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GeminiConfig_FieldTerminalPath) WithIValue(value interface{}) GeminiConfig_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GeminiConfig: %d", fp.selector))
	}
}

func (fp *GeminiConfig_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GeminiConfig_FieldTerminalPath) WithIArrayOfValues(values interface{}) GeminiConfig_FieldPathArrayOfValues {
	fpaov := &GeminiConfig_FieldTerminalPathArrayOfValues{GeminiConfig_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GeminiConfig: %d", fp.selector))
	}
	return fpaov
}

func (fp *GeminiConfig_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GeminiConfig_FieldTerminalPath) WithIArrayItemValue(value interface{}) GeminiConfig_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GeminiConfig: %d", fp.selector))
	}
}

func (fp *GeminiConfig_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GeminiConfig_FieldPathValue allows storing values for GeminiConfig fields according to their type
type GeminiConfig_FieldPathValue interface {
	GeminiConfig_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GeminiConfig)
	CompareWith(*GeminiConfig) (cmp int, comparable bool)
}

func ParseGeminiConfig_FieldPathValue(pathStr, valueStr string) (GeminiConfig_FieldPathValue, error) {
	fp, err := ParseGeminiConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GeminiConfig field path value from %s: %v", valueStr, err)
	}
	return fpv.(GeminiConfig_FieldPathValue), nil
}

func MustParseGeminiConfig_FieldPathValue(pathStr, valueStr string) GeminiConfig_FieldPathValue {
	fpv, err := ParseGeminiConfig_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GeminiConfig_FieldTerminalPathValue struct {
	GeminiConfig_FieldTerminalPath
	value interface{}
}

var _ GeminiConfig_FieldPathValue = (*GeminiConfig_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GeminiConfig' as interface{}
func (fpv *GeminiConfig_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object GeminiConfig
func (fpv *GeminiConfig_FieldTerminalPathValue) SetTo(target **GeminiConfig) {
	if *target == nil {
		*target = new(GeminiConfig)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GeminiConfig: %d", fpv.selector))
	}
}

func (fpv *GeminiConfig_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GeminiConfig)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GeminiConfig_FieldTerminalPathValue' with the value under path in 'GeminiConfig'.
func (fpv *GeminiConfig_FieldTerminalPathValue) CompareWith(source *GeminiConfig) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GeminiConfig: %d", fpv.selector))
	}
}

func (fpv *GeminiConfig_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GeminiConfig))
}

// GeminiConfig_FieldPathArrayItemValue allows storing single item in Path-specific values for GeminiConfig according to their type
// Present only for array (repeated) types.
type GeminiConfig_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GeminiConfig_FieldPath
	ContainsValue(*GeminiConfig) bool
}

// ParseGeminiConfig_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGeminiConfig_FieldPathArrayItemValue(pathStr, valueStr string) (GeminiConfig_FieldPathArrayItemValue, error) {
	fp, err := ParseGeminiConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GeminiConfig field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GeminiConfig_FieldPathArrayItemValue), nil
}

func MustParseGeminiConfig_FieldPathArrayItemValue(pathStr, valueStr string) GeminiConfig_FieldPathArrayItemValue {
	fpaiv, err := ParseGeminiConfig_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GeminiConfig_FieldTerminalPathArrayItemValue struct {
	GeminiConfig_FieldTerminalPath
	value interface{}
}

var _ GeminiConfig_FieldPathArrayItemValue = (*GeminiConfig_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GeminiConfig as interface{}
func (fpaiv *GeminiConfig_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GeminiConfig_FieldTerminalPathArrayItemValue) GetSingle(source *GeminiConfig) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GeminiConfig_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GeminiConfig))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GeminiConfig'
func (fpaiv *GeminiConfig_FieldTerminalPathArrayItemValue) ContainsValue(source *GeminiConfig) bool {
	slice := fpaiv.GeminiConfig_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GeminiConfig_FieldPathArrayOfValues allows storing slice of values for GeminiConfig fields according to their type
type GeminiConfig_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GeminiConfig_FieldPath
}

func ParseGeminiConfig_FieldPathArrayOfValues(pathStr, valuesStr string) (GeminiConfig_FieldPathArrayOfValues, error) {
	fp, err := ParseGeminiConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GeminiConfig field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GeminiConfig_FieldPathArrayOfValues), nil
}

func MustParseGeminiConfig_FieldPathArrayOfValues(pathStr, valuesStr string) GeminiConfig_FieldPathArrayOfValues {
	fpaov, err := ParseGeminiConfig_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GeminiConfig_FieldTerminalPathArrayOfValues struct {
	GeminiConfig_FieldTerminalPath
	values interface{}
}

var _ GeminiConfig_FieldPathArrayOfValues = (*GeminiConfig_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GeminiConfig_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}
