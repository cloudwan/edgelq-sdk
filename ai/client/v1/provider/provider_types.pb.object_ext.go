// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/provider_types.proto
// DO NOT EDIT!!!

package provider_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/common"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &common_client.Message{}
)

func (o *ProviderChatRequest) GotenObjectExt() {}

func (o *ProviderChatRequest) MakeFullFieldMask() *ProviderChatRequest_FieldMask {
	return FullProviderChatRequest_FieldMask()
}

func (o *ProviderChatRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProviderChatRequest_FieldMask()
}

func (o *ProviderChatRequest) MakeDiffFieldMask(other *ProviderChatRequest) *ProviderChatRequest_FieldMask {
	if o == nil && other == nil {
		return &ProviderChatRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProviderChatRequest_FieldMask()
	}

	res := &ProviderChatRequest_FieldMask{}
	if o.GetModel() != other.GetModel() {
		res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorModel})
	}

	if len(o.GetMessages()) == len(other.GetMessages()) {
		for i, lValue := range o.GetMessages() {
			rValue := other.GetMessages()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorMessages})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorMessages})
	}

	if len(o.GetTools()) == len(other.GetTools()) {
		for i, lValue := range o.GetTools() {
			rValue := other.GetTools()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorTools})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorTools})
	}
	{
		subMask := o.GetParameters().MakeDiffFieldMask(other.GetParameters())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorParameters})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProviderChatRequest_FieldSubPath{selector: ProviderChatRequest_FieldPathSelectorParameters, subPath: subpath})
			}
		}
	}
	if o.GetUser() != other.GetUser() {
		res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorUser})
	}

	if len(o.GetMetadata()) == len(other.GetMetadata()) {
		for i, lValue := range o.GetMetadata() {
			rValue := other.GetMetadata()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorMetadata})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorMetadata})
	}
	{
		_, leftSelected := o.ProviderConfig.(*ProviderChatRequest_OpenaiConfig)
		_, rightSelected := other.ProviderConfig.(*ProviderChatRequest_OpenaiConfig)
		if leftSelected == rightSelected {
			subMask := o.GetOpenaiConfig().MakeDiffFieldMask(other.GetOpenaiConfig())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorOpenaiConfig})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &ProviderChatRequest_FieldSubPath{selector: ProviderChatRequest_FieldPathSelectorOpenaiConfig, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorOpenaiConfig})
		}
	}
	{
		_, leftSelected := o.ProviderConfig.(*ProviderChatRequest_AzureConfig)
		_, rightSelected := other.ProviderConfig.(*ProviderChatRequest_AzureConfig)
		if leftSelected == rightSelected {
			subMask := o.GetAzureConfig().MakeDiffFieldMask(other.GetAzureConfig())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorAzureConfig})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &ProviderChatRequest_FieldSubPath{selector: ProviderChatRequest_FieldPathSelectorAzureConfig, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorAzureConfig})
		}
	}
	{
		_, leftSelected := o.ProviderConfig.(*ProviderChatRequest_AnthropicConfig)
		_, rightSelected := other.ProviderConfig.(*ProviderChatRequest_AnthropicConfig)
		if leftSelected == rightSelected {
			subMask := o.GetAnthropicConfig().MakeDiffFieldMask(other.GetAnthropicConfig())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorAnthropicConfig})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &ProviderChatRequest_FieldSubPath{selector: ProviderChatRequest_FieldPathSelectorAnthropicConfig, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorAnthropicConfig})
		}
	}
	{
		_, leftSelected := o.ProviderConfig.(*ProviderChatRequest_GeminiConfig)
		_, rightSelected := other.ProviderConfig.(*ProviderChatRequest_GeminiConfig)
		if leftSelected == rightSelected {
			subMask := o.GetGeminiConfig().MakeDiffFieldMask(other.GetGeminiConfig())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorGeminiConfig})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &ProviderChatRequest_FieldSubPath{selector: ProviderChatRequest_FieldPathSelectorGeminiConfig, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorGeminiConfig})
		}
	}
	if o.GetReasoningLevel() != other.GetReasoningLevel() {
		res.Paths = append(res.Paths, &ProviderChatRequest_FieldTerminalPath{selector: ProviderChatRequest_FieldPathSelectorReasoningLevel})
	}
	return res
}

func (o *ProviderChatRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProviderChatRequest))
}

func (o *ProviderChatRequest) Clone() *ProviderChatRequest {
	if o == nil {
		return nil
	}
	result := &ProviderChatRequest{}
	result.Model = o.Model
	result.Messages = make([]*common_client.Message, len(o.Messages))
	for i, sourceValue := range o.Messages {
		result.Messages[i] = proto.Clone(sourceValue).(*common_client.Message)
	}
	result.Tools = make([]*common_client.ToolDefinition, len(o.Tools))
	for i, sourceValue := range o.Tools {
		result.Tools[i] = proto.Clone(sourceValue).(*common_client.ToolDefinition)
	}
	result.Parameters = o.Parameters.Clone()
	result.User = o.User
	result.Metadata = map[string]string{}
	for key, sourceValue := range o.Metadata {
		result.Metadata[key] = sourceValue
	}
	if o, ok := o.ProviderConfig.(*ProviderChatRequest_OpenaiConfig); ok {
		result.ProviderConfig = (*ProviderChatRequest_OpenaiConfig)(nil)
		if o != nil {
			result.ProviderConfig = &ProviderChatRequest_OpenaiConfig{}
			result := result.ProviderConfig.(*ProviderChatRequest_OpenaiConfig)
			result.OpenaiConfig = o.OpenaiConfig.Clone()
		}
	}
	if o, ok := o.ProviderConfig.(*ProviderChatRequest_AzureConfig); ok {
		result.ProviderConfig = (*ProviderChatRequest_AzureConfig)(nil)
		if o != nil {
			result.ProviderConfig = &ProviderChatRequest_AzureConfig{}
			result := result.ProviderConfig.(*ProviderChatRequest_AzureConfig)
			result.AzureConfig = o.AzureConfig.Clone()
		}
	}
	if o, ok := o.ProviderConfig.(*ProviderChatRequest_AnthropicConfig); ok {
		result.ProviderConfig = (*ProviderChatRequest_AnthropicConfig)(nil)
		if o != nil {
			result.ProviderConfig = &ProviderChatRequest_AnthropicConfig{}
			result := result.ProviderConfig.(*ProviderChatRequest_AnthropicConfig)
			result.AnthropicConfig = o.AnthropicConfig.Clone()
		}
	}
	if o, ok := o.ProviderConfig.(*ProviderChatRequest_GeminiConfig); ok {
		result.ProviderConfig = (*ProviderChatRequest_GeminiConfig)(nil)
		if o != nil {
			result.ProviderConfig = &ProviderChatRequest_GeminiConfig{}
			result := result.ProviderConfig.(*ProviderChatRequest_GeminiConfig)
			result.GeminiConfig = o.GeminiConfig.Clone()
		}
	}
	result.ReasoningLevel = o.ReasoningLevel
	return result
}

func (o *ProviderChatRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProviderChatRequest) Merge(source *ProviderChatRequest) {
	o.Model = source.GetModel()
	for _, sourceValue := range source.GetMessages() {
		exists := false
		for _, currentValue := range o.Messages {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *common_client.Message
			if sourceValue != nil {
				newDstElement = new(common_client.Message)
				proto.Merge(newDstElement, sourceValue)
			}
			o.Messages = append(o.Messages, newDstElement)
		}
	}

	for _, sourceValue := range source.GetTools() {
		exists := false
		for _, currentValue := range o.Tools {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *common_client.ToolDefinition
			if sourceValue != nil {
				newDstElement = new(common_client.ToolDefinition)
				proto.Merge(newDstElement, sourceValue)
			}
			o.Tools = append(o.Tools, newDstElement)
		}
	}

	if source.GetParameters() != nil {
		if o.Parameters == nil {
			o.Parameters = new(ChatParameters)
		}
		o.Parameters.Merge(source.GetParameters())
	}
	o.User = source.GetUser()
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = make(map[string]string, len(source.GetMetadata()))
		}
		for key, sourceValue := range source.GetMetadata() {
			o.Metadata[key] = sourceValue
		}
	}
	if source, ok := source.GetProviderConfig().(*ProviderChatRequest_OpenaiConfig); ok {
		if dstOneOf, ok := o.ProviderConfig.(*ProviderChatRequest_OpenaiConfig); !ok || dstOneOf == nil {
			o.ProviderConfig = &ProviderChatRequest_OpenaiConfig{}
		}
		if source != nil {
			o := o.ProviderConfig.(*ProviderChatRequest_OpenaiConfig)
			if source.OpenaiConfig != nil {
				if o.OpenaiConfig == nil {
					o.OpenaiConfig = new(OpenAIConfig)
				}
				o.OpenaiConfig.Merge(source.OpenaiConfig)
			}
		}
	}
	if source, ok := source.GetProviderConfig().(*ProviderChatRequest_AzureConfig); ok {
		if dstOneOf, ok := o.ProviderConfig.(*ProviderChatRequest_AzureConfig); !ok || dstOneOf == nil {
			o.ProviderConfig = &ProviderChatRequest_AzureConfig{}
		}
		if source != nil {
			o := o.ProviderConfig.(*ProviderChatRequest_AzureConfig)
			if source.AzureConfig != nil {
				if o.AzureConfig == nil {
					o.AzureConfig = new(AzureConfig)
				}
				o.AzureConfig.Merge(source.AzureConfig)
			}
		}
	}
	if source, ok := source.GetProviderConfig().(*ProviderChatRequest_AnthropicConfig); ok {
		if dstOneOf, ok := o.ProviderConfig.(*ProviderChatRequest_AnthropicConfig); !ok || dstOneOf == nil {
			o.ProviderConfig = &ProviderChatRequest_AnthropicConfig{}
		}
		if source != nil {
			o := o.ProviderConfig.(*ProviderChatRequest_AnthropicConfig)
			if source.AnthropicConfig != nil {
				if o.AnthropicConfig == nil {
					o.AnthropicConfig = new(AnthropicConfig)
				}
				o.AnthropicConfig.Merge(source.AnthropicConfig)
			}
		}
	}
	if source, ok := source.GetProviderConfig().(*ProviderChatRequest_GeminiConfig); ok {
		if dstOneOf, ok := o.ProviderConfig.(*ProviderChatRequest_GeminiConfig); !ok || dstOneOf == nil {
			o.ProviderConfig = &ProviderChatRequest_GeminiConfig{}
		}
		if source != nil {
			o := o.ProviderConfig.(*ProviderChatRequest_GeminiConfig)
			if source.GeminiConfig != nil {
				if o.GeminiConfig == nil {
					o.GeminiConfig = new(GeminiConfig)
				}
				o.GeminiConfig.Merge(source.GeminiConfig)
			}
		}
	}
	o.ReasoningLevel = source.GetReasoningLevel()
}

func (o *ProviderChatRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProviderChatRequest))
}

func (o *ChatParameters) GotenObjectExt() {}

func (o *ChatParameters) MakeFullFieldMask() *ChatParameters_FieldMask {
	return FullChatParameters_FieldMask()
}

func (o *ChatParameters) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullChatParameters_FieldMask()
}

func (o *ChatParameters) MakeDiffFieldMask(other *ChatParameters) *ChatParameters_FieldMask {
	if o == nil && other == nil {
		return &ChatParameters_FieldMask{}
	}
	if o == nil || other == nil {
		return FullChatParameters_FieldMask()
	}

	res := &ChatParameters_FieldMask{}
	if o.GetMaxTokens() != other.GetMaxTokens() {
		res.Paths = append(res.Paths, &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorMaxTokens})
	}
	if o.GetTemperature() != other.GetTemperature() {
		res.Paths = append(res.Paths, &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorTemperature})
	}
	if o.GetTopP() != other.GetTopP() {
		res.Paths = append(res.Paths, &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorTopP})
	}
	if o.GetTopK() != other.GetTopK() {
		res.Paths = append(res.Paths, &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorTopK})
	}
	if o.GetPresencePenalty() != other.GetPresencePenalty() {
		res.Paths = append(res.Paths, &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorPresencePenalty})
	}
	if o.GetFrequencyPenalty() != other.GetFrequencyPenalty() {
		res.Paths = append(res.Paths, &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorFrequencyPenalty})
	}
	if o.GetSeed() != other.GetSeed() {
		res.Paths = append(res.Paths, &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorSeed})
	}

	if len(o.GetStopSequences()) == len(other.GetStopSequences()) {
		for i, lValue := range o.GetStopSequences() {
			rValue := other.GetStopSequences()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorStopSequences})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorStopSequences})
	}
	{
		subMask := o.GetResponseFormat().MakeDiffFieldMask(other.GetResponseFormat())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorResponseFormat})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ChatParameters_FieldSubPath{selector: ChatParameters_FieldPathSelectorResponseFormat, subPath: subpath})
			}
		}
	}
	if o.GetLogprobs() != other.GetLogprobs() {
		res.Paths = append(res.Paths, &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorLogprobs})
	}
	if o.GetTopLogprobs() != other.GetTopLogprobs() {
		res.Paths = append(res.Paths, &ChatParameters_FieldTerminalPath{selector: ChatParameters_FieldPathSelectorTopLogprobs})
	}
	return res
}

func (o *ChatParameters) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ChatParameters))
}

func (o *ChatParameters) Clone() *ChatParameters {
	if o == nil {
		return nil
	}
	result := &ChatParameters{}
	result.MaxTokens = o.MaxTokens
	result.Temperature = o.Temperature
	result.TopP = o.TopP
	result.TopK = o.TopK
	result.PresencePenalty = o.PresencePenalty
	result.FrequencyPenalty = o.FrequencyPenalty
	result.Seed = o.Seed
	result.StopSequences = make([]string, len(o.StopSequences))
	for i, sourceValue := range o.StopSequences {
		result.StopSequences[i] = sourceValue
	}
	result.ResponseFormat = o.ResponseFormat.Clone()
	result.Logprobs = o.Logprobs
	result.TopLogprobs = o.TopLogprobs
	return result
}

func (o *ChatParameters) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ChatParameters) Merge(source *ChatParameters) {
	o.MaxTokens = source.GetMaxTokens()
	o.Temperature = source.GetTemperature()
	o.TopP = source.GetTopP()
	o.TopK = source.GetTopK()
	o.PresencePenalty = source.GetPresencePenalty()
	o.FrequencyPenalty = source.GetFrequencyPenalty()
	o.Seed = source.GetSeed()
	for _, sourceValue := range source.GetStopSequences() {
		exists := false
		for _, currentValue := range o.StopSequences {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.StopSequences = append(o.StopSequences, newDstElement)
		}
	}

	if source.GetResponseFormat() != nil {
		if o.ResponseFormat == nil {
			o.ResponseFormat = new(ResponseFormat)
		}
		o.ResponseFormat.Merge(source.GetResponseFormat())
	}
	o.Logprobs = source.GetLogprobs()
	o.TopLogprobs = source.GetTopLogprobs()
}

func (o *ChatParameters) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ChatParameters))
}

func (o *ResponseFormat) GotenObjectExt() {}

func (o *ResponseFormat) MakeFullFieldMask() *ResponseFormat_FieldMask {
	return FullResponseFormat_FieldMask()
}

func (o *ResponseFormat) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullResponseFormat_FieldMask()
}

func (o *ResponseFormat) MakeDiffFieldMask(other *ResponseFormat) *ResponseFormat_FieldMask {
	if o == nil && other == nil {
		return &ResponseFormat_FieldMask{}
	}
	if o == nil || other == nil {
		return FullResponseFormat_FieldMask()
	}

	res := &ResponseFormat_FieldMask{}
	if o.GetMode() != other.GetMode() {
		res.Paths = append(res.Paths, &ResponseFormat_FieldTerminalPath{selector: ResponseFormat_FieldPathSelectorMode})
	}
	if o.GetJsonSchema() != other.GetJsonSchema() {
		res.Paths = append(res.Paths, &ResponseFormat_FieldTerminalPath{selector: ResponseFormat_FieldPathSelectorJsonSchema})
	}
	return res
}

func (o *ResponseFormat) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ResponseFormat))
}

func (o *ResponseFormat) Clone() *ResponseFormat {
	if o == nil {
		return nil
	}
	result := &ResponseFormat{}
	result.Mode = o.Mode
	result.JsonSchema = o.JsonSchema
	return result
}

func (o *ResponseFormat) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ResponseFormat) Merge(source *ResponseFormat) {
	o.Mode = source.GetMode()
	o.JsonSchema = source.GetJsonSchema()
}

func (o *ResponseFormat) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ResponseFormat))
}

func (o *ProviderContentDelta) GotenObjectExt() {}

func (o *ProviderContentDelta) MakeFullFieldMask() *ProviderContentDelta_FieldMask {
	return FullProviderContentDelta_FieldMask()
}

func (o *ProviderContentDelta) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProviderContentDelta_FieldMask()
}

func (o *ProviderContentDelta) MakeDiffFieldMask(other *ProviderContentDelta) *ProviderContentDelta_FieldMask {
	if o == nil && other == nil {
		return &ProviderContentDelta_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProviderContentDelta_FieldMask()
	}

	res := &ProviderContentDelta_FieldMask{}
	if o.GetText() != other.GetText() {
		res.Paths = append(res.Paths, &ProviderContentDelta_FieldTerminalPath{selector: ProviderContentDelta_FieldPathSelectorText})
	}
	if o.GetChannel() != other.GetChannel() {
		res.Paths = append(res.Paths, &ProviderContentDelta_FieldTerminalPath{selector: ProviderContentDelta_FieldPathSelectorChannel})
	}
	return res
}

func (o *ProviderContentDelta) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProviderContentDelta))
}

func (o *ProviderContentDelta) Clone() *ProviderContentDelta {
	if o == nil {
		return nil
	}
	result := &ProviderContentDelta{}
	result.Text = o.Text
	result.Channel = o.Channel
	return result
}

func (o *ProviderContentDelta) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProviderContentDelta) Merge(source *ProviderContentDelta) {
	o.Text = source.GetText()
	o.Channel = source.GetChannel()
}

func (o *ProviderContentDelta) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProviderContentDelta))
}

func (o *StreamError) GotenObjectExt() {}

func (o *StreamError) MakeFullFieldMask() *StreamError_FieldMask {
	return FullStreamError_FieldMask()
}

func (o *StreamError) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullStreamError_FieldMask()
}

func (o *StreamError) MakeDiffFieldMask(other *StreamError) *StreamError_FieldMask {
	if o == nil && other == nil {
		return &StreamError_FieldMask{}
	}
	if o == nil || other == nil {
		return FullStreamError_FieldMask()
	}

	res := &StreamError_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &StreamError_FieldTerminalPath{selector: StreamError_FieldPathSelectorType})
	}
	if o.GetMessage() != other.GetMessage() {
		res.Paths = append(res.Paths, &StreamError_FieldTerminalPath{selector: StreamError_FieldPathSelectorMessage})
	}
	return res
}

func (o *StreamError) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*StreamError))
}

func (o *StreamError) Clone() *StreamError {
	if o == nil {
		return nil
	}
	result := &StreamError{}
	result.Type = o.Type
	result.Message = o.Message
	return result
}

func (o *StreamError) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *StreamError) Merge(source *StreamError) {
	o.Type = source.GetType()
	o.Message = source.GetMessage()
}

func (o *StreamError) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*StreamError))
}

func (o *BlockEnd) GotenObjectExt() {}

func (o *BlockEnd) MakeFullFieldMask() *BlockEnd_FieldMask {
	return FullBlockEnd_FieldMask()
}

func (o *BlockEnd) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBlockEnd_FieldMask()
}

func (o *BlockEnd) MakeDiffFieldMask(other *BlockEnd) *BlockEnd_FieldMask {
	if o == nil && other == nil {
		return &BlockEnd_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBlockEnd_FieldMask()
	}

	res := &BlockEnd_FieldMask{}
	if o.GetChannel() != other.GetChannel() {
		res.Paths = append(res.Paths, &BlockEnd_FieldTerminalPath{selector: BlockEnd_FieldPathSelectorChannel})
	}
	if o.GetSignature() != other.GetSignature() {
		res.Paths = append(res.Paths, &BlockEnd_FieldTerminalPath{selector: BlockEnd_FieldPathSelectorSignature})
	}
	return res
}

func (o *BlockEnd) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BlockEnd))
}

func (o *BlockEnd) Clone() *BlockEnd {
	if o == nil {
		return nil
	}
	result := &BlockEnd{}
	result.Channel = o.Channel
	result.Signature = o.Signature
	return result
}

func (o *BlockEnd) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BlockEnd) Merge(source *BlockEnd) {
	o.Channel = source.GetChannel()
	o.Signature = source.GetSignature()
}

func (o *BlockEnd) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BlockEnd))
}

func (o *ProviderStreamEvent) GotenObjectExt() {}

func (o *ProviderStreamEvent) MakeFullFieldMask() *ProviderStreamEvent_FieldMask {
	return FullProviderStreamEvent_FieldMask()
}

func (o *ProviderStreamEvent) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProviderStreamEvent_FieldMask()
}

func (o *ProviderStreamEvent) MakeDiffFieldMask(other *ProviderStreamEvent) *ProviderStreamEvent_FieldMask {
	if o == nil && other == nil {
		return &ProviderStreamEvent_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProviderStreamEvent_FieldMask()
	}

	res := &ProviderStreamEvent_FieldMask{}
	{
		_, leftSelected := o.Event.(*ProviderStreamEvent_Delta)
		_, rightSelected := other.Event.(*ProviderStreamEvent_Delta)
		if leftSelected == rightSelected {
			subMask := o.GetDelta().MakeDiffFieldMask(other.GetDelta())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorDelta})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &ProviderStreamEvent_FieldSubPath{selector: ProviderStreamEvent_FieldPathSelectorDelta, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorDelta})
		}
	}
	{
		_, leftSelected := o.Event.(*ProviderStreamEvent_Usage)
		_, rightSelected := other.Event.(*ProviderStreamEvent_Usage)
		if leftSelected == rightSelected {
			if !proto.Equal(o.GetUsage(), other.GetUsage()) {
				res.Paths = append(res.Paths, &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorUsage})
			}
		} else {
			res.Paths = append(res.Paths, &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorUsage})
		}
	}
	{
		_, leftSelected := o.Event.(*ProviderStreamEvent_Error)
		_, rightSelected := other.Event.(*ProviderStreamEvent_Error)
		if leftSelected == rightSelected {
			subMask := o.GetError().MakeDiffFieldMask(other.GetError())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorError})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &ProviderStreamEvent_FieldSubPath{selector: ProviderStreamEvent_FieldPathSelectorError, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorError})
		}
	}
	{
		_, leftSelected := o.Event.(*ProviderStreamEvent_Done)
		_, rightSelected := other.Event.(*ProviderStreamEvent_Done)
		if leftSelected == rightSelected {
			subMask := o.GetDone().MakeDiffFieldMask(other.GetDone())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorDone})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &ProviderStreamEvent_FieldSubPath{selector: ProviderStreamEvent_FieldPathSelectorDone, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorDone})
		}
	}
	{
		_, leftSelected := o.Event.(*ProviderStreamEvent_ToolCalls)
		_, rightSelected := other.Event.(*ProviderStreamEvent_ToolCalls)
		if leftSelected == rightSelected {
			if !proto.Equal(o.GetToolCalls(), other.GetToolCalls()) {
				res.Paths = append(res.Paths, &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorToolCalls})
			}
		} else {
			res.Paths = append(res.Paths, &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorToolCalls})
		}
	}
	{
		_, leftSelected := o.Event.(*ProviderStreamEvent_Citation)
		_, rightSelected := other.Event.(*ProviderStreamEvent_Citation)
		if leftSelected == rightSelected {
			if !proto.Equal(o.GetCitation(), other.GetCitation()) {
				res.Paths = append(res.Paths, &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorCitation})
			}
		} else {
			res.Paths = append(res.Paths, &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorCitation})
		}
	}
	{
		_, leftSelected := o.Event.(*ProviderStreamEvent_BlockEnd)
		_, rightSelected := other.Event.(*ProviderStreamEvent_BlockEnd)
		if leftSelected == rightSelected {
			subMask := o.GetBlockEnd().MakeDiffFieldMask(other.GetBlockEnd())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorBlockEnd})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &ProviderStreamEvent_FieldSubPath{selector: ProviderStreamEvent_FieldPathSelectorBlockEnd, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &ProviderStreamEvent_FieldTerminalPath{selector: ProviderStreamEvent_FieldPathSelectorBlockEnd})
		}
	}
	return res
}

func (o *ProviderStreamEvent) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProviderStreamEvent))
}

func (o *ProviderStreamEvent) Clone() *ProviderStreamEvent {
	if o == nil {
		return nil
	}
	result := &ProviderStreamEvent{}
	if o, ok := o.Event.(*ProviderStreamEvent_Delta); ok {
		result.Event = (*ProviderStreamEvent_Delta)(nil)
		if o != nil {
			result.Event = &ProviderStreamEvent_Delta{}
			result := result.Event.(*ProviderStreamEvent_Delta)
			result.Delta = o.Delta.Clone()
		}
	}
	if o, ok := o.Event.(*ProviderStreamEvent_Usage); ok {
		result.Event = (*ProviderStreamEvent_Usage)(nil)
		if o != nil {
			result.Event = &ProviderStreamEvent_Usage{}
			result := result.Event.(*ProviderStreamEvent_Usage)
			result.Usage = proto.Clone(o.Usage).(*common_client.TokenUsage)
		}
	}
	if o, ok := o.Event.(*ProviderStreamEvent_Error); ok {
		result.Event = (*ProviderStreamEvent_Error)(nil)
		if o != nil {
			result.Event = &ProviderStreamEvent_Error{}
			result := result.Event.(*ProviderStreamEvent_Error)
			result.Error = o.Error.Clone()
		}
	}
	if o, ok := o.Event.(*ProviderStreamEvent_Done); ok {
		result.Event = (*ProviderStreamEvent_Done)(nil)
		if o != nil {
			result.Event = &ProviderStreamEvent_Done{}
			result := result.Event.(*ProviderStreamEvent_Done)
			result.Done = o.Done.Clone()
		}
	}
	if o, ok := o.Event.(*ProviderStreamEvent_ToolCalls); ok {
		result.Event = (*ProviderStreamEvent_ToolCalls)(nil)
		if o != nil {
			result.Event = &ProviderStreamEvent_ToolCalls{}
			result := result.Event.(*ProviderStreamEvent_ToolCalls)
			result.ToolCalls = proto.Clone(o.ToolCalls).(*common_client.ToolCalls)
		}
	}
	if o, ok := o.Event.(*ProviderStreamEvent_Citation); ok {
		result.Event = (*ProviderStreamEvent_Citation)(nil)
		if o != nil {
			result.Event = &ProviderStreamEvent_Citation{}
			result := result.Event.(*ProviderStreamEvent_Citation)
			result.Citation = proto.Clone(o.Citation).(*common_client.Citation)
		}
	}
	if o, ok := o.Event.(*ProviderStreamEvent_BlockEnd); ok {
		result.Event = (*ProviderStreamEvent_BlockEnd)(nil)
		if o != nil {
			result.Event = &ProviderStreamEvent_BlockEnd{}
			result := result.Event.(*ProviderStreamEvent_BlockEnd)
			result.BlockEnd = o.BlockEnd.Clone()
		}
	}
	return result
}

func (o *ProviderStreamEvent) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProviderStreamEvent) Merge(source *ProviderStreamEvent) {
	if source, ok := source.GetEvent().(*ProviderStreamEvent_Delta); ok {
		if dstOneOf, ok := o.Event.(*ProviderStreamEvent_Delta); !ok || dstOneOf == nil {
			o.Event = &ProviderStreamEvent_Delta{}
		}
		if source != nil {
			o := o.Event.(*ProviderStreamEvent_Delta)
			if source.Delta != nil {
				if o.Delta == nil {
					o.Delta = new(ProviderContentDelta)
				}
				o.Delta.Merge(source.Delta)
			}
		}
	}
	if source, ok := source.GetEvent().(*ProviderStreamEvent_Usage); ok {
		if dstOneOf, ok := o.Event.(*ProviderStreamEvent_Usage); !ok || dstOneOf == nil {
			o.Event = &ProviderStreamEvent_Usage{}
		}
		if source != nil {
			o := o.Event.(*ProviderStreamEvent_Usage)
			if source.Usage != nil {
				if o.Usage == nil {
					o.Usage = new(common_client.TokenUsage)
				}
				proto.Merge(o.Usage, source.Usage)
			}
		}
	}
	if source, ok := source.GetEvent().(*ProviderStreamEvent_Error); ok {
		if dstOneOf, ok := o.Event.(*ProviderStreamEvent_Error); !ok || dstOneOf == nil {
			o.Event = &ProviderStreamEvent_Error{}
		}
		if source != nil {
			o := o.Event.(*ProviderStreamEvent_Error)
			if source.Error != nil {
				if o.Error == nil {
					o.Error = new(StreamError)
				}
				o.Error.Merge(source.Error)
			}
		}
	}
	if source, ok := source.GetEvent().(*ProviderStreamEvent_Done); ok {
		if dstOneOf, ok := o.Event.(*ProviderStreamEvent_Done); !ok || dstOneOf == nil {
			o.Event = &ProviderStreamEvent_Done{}
		}
		if source != nil {
			o := o.Event.(*ProviderStreamEvent_Done)
			if source.Done != nil {
				if o.Done == nil {
					o.Done = new(ProviderDone)
				}
				o.Done.Merge(source.Done)
			}
		}
	}
	if source, ok := source.GetEvent().(*ProviderStreamEvent_ToolCalls); ok {
		if dstOneOf, ok := o.Event.(*ProviderStreamEvent_ToolCalls); !ok || dstOneOf == nil {
			o.Event = &ProviderStreamEvent_ToolCalls{}
		}
		if source != nil {
			o := o.Event.(*ProviderStreamEvent_ToolCalls)
			if source.ToolCalls != nil {
				if o.ToolCalls == nil {
					o.ToolCalls = new(common_client.ToolCalls)
				}
				proto.Merge(o.ToolCalls, source.ToolCalls)
			}
		}
	}
	if source, ok := source.GetEvent().(*ProviderStreamEvent_Citation); ok {
		if dstOneOf, ok := o.Event.(*ProviderStreamEvent_Citation); !ok || dstOneOf == nil {
			o.Event = &ProviderStreamEvent_Citation{}
		}
		if source != nil {
			o := o.Event.(*ProviderStreamEvent_Citation)
			if source.Citation != nil {
				if o.Citation == nil {
					o.Citation = new(common_client.Citation)
				}
				proto.Merge(o.Citation, source.Citation)
			}
		}
	}
	if source, ok := source.GetEvent().(*ProviderStreamEvent_BlockEnd); ok {
		if dstOneOf, ok := o.Event.(*ProviderStreamEvent_BlockEnd); !ok || dstOneOf == nil {
			o.Event = &ProviderStreamEvent_BlockEnd{}
		}
		if source != nil {
			o := o.Event.(*ProviderStreamEvent_BlockEnd)
			if source.BlockEnd != nil {
				if o.BlockEnd == nil {
					o.BlockEnd = new(BlockEnd)
				}
				o.BlockEnd.Merge(source.BlockEnd)
			}
		}
	}
}

func (o *ProviderStreamEvent) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProviderStreamEvent))
}

func (o *ProviderDone) GotenObjectExt() {}

func (o *ProviderDone) MakeFullFieldMask() *ProviderDone_FieldMask {
	return FullProviderDone_FieldMask()
}

func (o *ProviderDone) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProviderDone_FieldMask()
}

func (o *ProviderDone) MakeDiffFieldMask(other *ProviderDone) *ProviderDone_FieldMask {
	if o == nil && other == nil {
		return &ProviderDone_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProviderDone_FieldMask()
	}

	res := &ProviderDone_FieldMask{}
	if o.GetStopReason() != other.GetStopReason() {
		res.Paths = append(res.Paths, &ProviderDone_FieldTerminalPath{selector: ProviderDone_FieldPathSelectorStopReason})
	}
	return res
}

func (o *ProviderDone) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProviderDone))
}

func (o *ProviderDone) Clone() *ProviderDone {
	if o == nil {
		return nil
	}
	result := &ProviderDone{}
	result.StopReason = o.StopReason
	return result
}

func (o *ProviderDone) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProviderDone) Merge(source *ProviderDone) {
	o.StopReason = source.GetStopReason()
}

func (o *ProviderDone) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProviderDone))
}

func (o *OpenAIConfig) GotenObjectExt() {}

func (o *OpenAIConfig) MakeFullFieldMask() *OpenAIConfig_FieldMask {
	return FullOpenAIConfig_FieldMask()
}

func (o *OpenAIConfig) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullOpenAIConfig_FieldMask()
}

func (o *OpenAIConfig) MakeDiffFieldMask(other *OpenAIConfig) *OpenAIConfig_FieldMask {
	if o == nil && other == nil {
		return &OpenAIConfig_FieldMask{}
	}
	if o == nil || other == nil {
		return FullOpenAIConfig_FieldMask()
	}

	res := &OpenAIConfig_FieldMask{}
	if o.GetParallelToolCalls() != other.GetParallelToolCalls() {
		res.Paths = append(res.Paths, &OpenAIConfig_FieldTerminalPath{selector: OpenAIConfig_FieldPathSelectorParallelToolCalls})
	}
	if o.GetMaxCompletionTokens() != other.GetMaxCompletionTokens() {
		res.Paths = append(res.Paths, &OpenAIConfig_FieldTerminalPath{selector: OpenAIConfig_FieldPathSelectorMaxCompletionTokens})
	}
	if o.GetReasoningEffort() != other.GetReasoningEffort() {
		res.Paths = append(res.Paths, &OpenAIConfig_FieldTerminalPath{selector: OpenAIConfig_FieldPathSelectorReasoningEffort})
	}
	return res
}

func (o *OpenAIConfig) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*OpenAIConfig))
}

func (o *OpenAIConfig) Clone() *OpenAIConfig {
	if o == nil {
		return nil
	}
	result := &OpenAIConfig{}
	result.ParallelToolCalls = o.ParallelToolCalls
	result.MaxCompletionTokens = o.MaxCompletionTokens
	result.ReasoningEffort = o.ReasoningEffort
	return result
}

func (o *OpenAIConfig) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *OpenAIConfig) Merge(source *OpenAIConfig) {
	o.ParallelToolCalls = source.GetParallelToolCalls()
	o.MaxCompletionTokens = source.GetMaxCompletionTokens()
	o.ReasoningEffort = source.GetReasoningEffort()
}

func (o *OpenAIConfig) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*OpenAIConfig))
}

func (o *AzureConfig) GotenObjectExt() {}

func (o *AzureConfig) MakeFullFieldMask() *AzureConfig_FieldMask {
	return FullAzureConfig_FieldMask()
}

func (o *AzureConfig) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAzureConfig_FieldMask()
}

func (o *AzureConfig) MakeDiffFieldMask(other *AzureConfig) *AzureConfig_FieldMask {
	if o == nil && other == nil {
		return &AzureConfig_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAzureConfig_FieldMask()
	}

	res := &AzureConfig_FieldMask{}
	{
		subMask := o.GetSearch().MakeDiffFieldMask(other.GetSearch())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AzureConfig_FieldTerminalPath{selector: AzureConfig_FieldPathSelectorSearch})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AzureConfig_FieldSubPath{selector: AzureConfig_FieldPathSelectorSearch, subPath: subpath})
			}
		}
	}
	if o.GetParallelToolCalls() != other.GetParallelToolCalls() {
		res.Paths = append(res.Paths, &AzureConfig_FieldTerminalPath{selector: AzureConfig_FieldPathSelectorParallelToolCalls})
	}
	if o.GetMaxCompletionTokens() != other.GetMaxCompletionTokens() {
		res.Paths = append(res.Paths, &AzureConfig_FieldTerminalPath{selector: AzureConfig_FieldPathSelectorMaxCompletionTokens})
	}
	if o.GetReasoningEffort() != other.GetReasoningEffort() {
		res.Paths = append(res.Paths, &AzureConfig_FieldTerminalPath{selector: AzureConfig_FieldPathSelectorReasoningEffort})
	}
	return res
}

func (o *AzureConfig) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AzureConfig))
}

func (o *AzureConfig) Clone() *AzureConfig {
	if o == nil {
		return nil
	}
	result := &AzureConfig{}
	result.Search = o.Search.Clone()
	result.ParallelToolCalls = o.ParallelToolCalls
	result.MaxCompletionTokens = o.MaxCompletionTokens
	result.ReasoningEffort = o.ReasoningEffort
	return result
}

func (o *AzureConfig) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AzureConfig) Merge(source *AzureConfig) {
	if source.GetSearch() != nil {
		if o.Search == nil {
			o.Search = new(AzureSearchConfig)
		}
		o.Search.Merge(source.GetSearch())
	}
	o.ParallelToolCalls = source.GetParallelToolCalls()
	o.MaxCompletionTokens = source.GetMaxCompletionTokens()
	o.ReasoningEffort = source.GetReasoningEffort()
}

func (o *AzureConfig) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AzureConfig))
}

func (o *AzureSearchConfig) GotenObjectExt() {}

func (o *AzureSearchConfig) MakeFullFieldMask() *AzureSearchConfig_FieldMask {
	return FullAzureSearchConfig_FieldMask()
}

func (o *AzureSearchConfig) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAzureSearchConfig_FieldMask()
}

func (o *AzureSearchConfig) MakeDiffFieldMask(other *AzureSearchConfig) *AzureSearchConfig_FieldMask {
	if o == nil && other == nil {
		return &AzureSearchConfig_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAzureSearchConfig_FieldMask()
	}

	res := &AzureSearchConfig_FieldMask{}
	if o.GetEndpoint() != other.GetEndpoint() {
		res.Paths = append(res.Paths, &AzureSearchConfig_FieldTerminalPath{selector: AzureSearchConfig_FieldPathSelectorEndpoint})
	}
	if o.GetIndex() != other.GetIndex() {
		res.Paths = append(res.Paths, &AzureSearchConfig_FieldTerminalPath{selector: AzureSearchConfig_FieldPathSelectorIndex})
	}
	if o.GetApiKey() != other.GetApiKey() {
		res.Paths = append(res.Paths, &AzureSearchConfig_FieldTerminalPath{selector: AzureSearchConfig_FieldPathSelectorApiKey})
	}
	if o.GetEnableSemantic() != other.GetEnableSemantic() {
		res.Paths = append(res.Paths, &AzureSearchConfig_FieldTerminalPath{selector: AzureSearchConfig_FieldPathSelectorEnableSemantic})
	}
	return res
}

func (o *AzureSearchConfig) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AzureSearchConfig))
}

func (o *AzureSearchConfig) Clone() *AzureSearchConfig {
	if o == nil {
		return nil
	}
	result := &AzureSearchConfig{}
	result.Endpoint = o.Endpoint
	result.Index = o.Index
	result.ApiKey = o.ApiKey
	result.EnableSemantic = o.EnableSemantic
	return result
}

func (o *AzureSearchConfig) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AzureSearchConfig) Merge(source *AzureSearchConfig) {
	o.Endpoint = source.GetEndpoint()
	o.Index = source.GetIndex()
	o.ApiKey = source.GetApiKey()
	o.EnableSemantic = source.GetEnableSemantic()
}

func (o *AzureSearchConfig) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AzureSearchConfig))
}

func (o *AnthropicConfig) GotenObjectExt() {}

func (o *AnthropicConfig) MakeFullFieldMask() *AnthropicConfig_FieldMask {
	return FullAnthropicConfig_FieldMask()
}

func (o *AnthropicConfig) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAnthropicConfig_FieldMask()
}

func (o *AnthropicConfig) MakeDiffFieldMask(other *AnthropicConfig) *AnthropicConfig_FieldMask {
	if o == nil && other == nil {
		return &AnthropicConfig_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAnthropicConfig_FieldMask()
	}

	res := &AnthropicConfig_FieldMask{}
	{
		subMask := o.GetThinking().MakeDiffFieldMask(other.GetThinking())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AnthropicConfig_FieldTerminalPath{selector: AnthropicConfig_FieldPathSelectorThinking})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AnthropicConfig_FieldSubPath{selector: AnthropicConfig_FieldPathSelectorThinking, subPath: subpath})
			}
		}
	}

	if len(o.GetBetaFeatures()) == len(other.GetBetaFeatures()) {
		for i, lValue := range o.GetBetaFeatures() {
			rValue := other.GetBetaFeatures()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &AnthropicConfig_FieldTerminalPath{selector: AnthropicConfig_FieldPathSelectorBetaFeatures})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &AnthropicConfig_FieldTerminalPath{selector: AnthropicConfig_FieldPathSelectorBetaFeatures})
	}
	if o.GetDisableInputTokenCache() != other.GetDisableInputTokenCache() {
		res.Paths = append(res.Paths, &AnthropicConfig_FieldTerminalPath{selector: AnthropicConfig_FieldPathSelectorDisableInputTokenCache})
	}
	return res
}

func (o *AnthropicConfig) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AnthropicConfig))
}

func (o *AnthropicConfig) Clone() *AnthropicConfig {
	if o == nil {
		return nil
	}
	result := &AnthropicConfig{}
	result.Thinking = o.Thinking.Clone()
	result.BetaFeatures = make([]string, len(o.BetaFeatures))
	for i, sourceValue := range o.BetaFeatures {
		result.BetaFeatures[i] = sourceValue
	}
	result.DisableInputTokenCache = o.DisableInputTokenCache
	return result
}

func (o *AnthropicConfig) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AnthropicConfig) Merge(source *AnthropicConfig) {
	if source.GetThinking() != nil {
		if o.Thinking == nil {
			o.Thinking = new(ThinkingConfig)
		}
		o.Thinking.Merge(source.GetThinking())
	}
	for _, sourceValue := range source.GetBetaFeatures() {
		exists := false
		for _, currentValue := range o.BetaFeatures {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.BetaFeatures = append(o.BetaFeatures, newDstElement)
		}
	}

	o.DisableInputTokenCache = source.GetDisableInputTokenCache()
}

func (o *AnthropicConfig) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AnthropicConfig))
}

func (o *ThinkingConfig) GotenObjectExt() {}

func (o *ThinkingConfig) MakeFullFieldMask() *ThinkingConfig_FieldMask {
	return FullThinkingConfig_FieldMask()
}

func (o *ThinkingConfig) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullThinkingConfig_FieldMask()
}

func (o *ThinkingConfig) MakeDiffFieldMask(other *ThinkingConfig) *ThinkingConfig_FieldMask {
	if o == nil && other == nil {
		return &ThinkingConfig_FieldMask{}
	}
	if o == nil || other == nil {
		return FullThinkingConfig_FieldMask()
	}

	res := &ThinkingConfig_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &ThinkingConfig_FieldTerminalPath{selector: ThinkingConfig_FieldPathSelectorType})
	}
	if o.GetBudgetTokens() != other.GetBudgetTokens() {
		res.Paths = append(res.Paths, &ThinkingConfig_FieldTerminalPath{selector: ThinkingConfig_FieldPathSelectorBudgetTokens})
	}
	return res
}

func (o *ThinkingConfig) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ThinkingConfig))
}

func (o *ThinkingConfig) Clone() *ThinkingConfig {
	if o == nil {
		return nil
	}
	result := &ThinkingConfig{}
	result.Type = o.Type
	result.BudgetTokens = o.BudgetTokens
	return result
}

func (o *ThinkingConfig) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ThinkingConfig) Merge(source *ThinkingConfig) {
	o.Type = source.GetType()
	o.BudgetTokens = source.GetBudgetTokens()
}

func (o *ThinkingConfig) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ThinkingConfig))
}

func (o *GeminiConfig) GotenObjectExt() {}

func (o *GeminiConfig) MakeFullFieldMask() *GeminiConfig_FieldMask {
	return FullGeminiConfig_FieldMask()
}

func (o *GeminiConfig) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGeminiConfig_FieldMask()
}

func (o *GeminiConfig) MakeDiffFieldMask(other *GeminiConfig) *GeminiConfig_FieldMask {
	if o == nil && other == nil {
		return &GeminiConfig_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGeminiConfig_FieldMask()
	}

	res := &GeminiConfig_FieldMask{}
	return res
}

func (o *GeminiConfig) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GeminiConfig))
}

func (o *GeminiConfig) Clone() *GeminiConfig {
	if o == nil {
		return nil
	}
	result := &GeminiConfig{}
	return result
}

func (o *GeminiConfig) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GeminiConfig) Merge(source *GeminiConfig) {
}

func (o *GeminiConfig) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GeminiConfig))
}
