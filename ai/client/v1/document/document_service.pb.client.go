// Code generated by protoc-gen-goten-client
// API: DocumentService
// DO NOT EDIT!!!

package document_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	document "github.com/cloudwan/edgelq-sdk/ai/resources/v1/document"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &document.Document{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DocumentServiceClient is the client API for DocumentService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DocumentServiceClient interface {
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*document.Document, error)
	BatchGetDocuments(ctx context.Context, in *BatchGetDocumentsRequest, opts ...grpc.CallOption) (*BatchGetDocumentsResponse, error)
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error)
	WatchDocument(ctx context.Context, in *WatchDocumentRequest, opts ...grpc.CallOption) (WatchDocumentClientStream, error)
	WatchDocuments(ctx context.Context, in *WatchDocumentsRequest, opts ...grpc.CallOption) (WatchDocumentsClientStream, error)
	CreateDocument(ctx context.Context, in *CreateDocumentRequest, opts ...grpc.CallOption) (*document.Document, error)
	UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*document.Document, error)
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewDocumentServiceClient(cc grpc.ClientConnInterface) DocumentServiceClient {
	return &client{cc}
}

func (c *client) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*document.Document, error) {
	out := new(document.Document)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.DocumentService/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetDocuments(ctx context.Context, in *BatchGetDocumentsRequest, opts ...grpc.CallOption) (*BatchGetDocumentsResponse, error) {
	out := new(BatchGetDocumentsResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.DocumentService/BatchGetDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error) {
	out := new(ListDocumentsResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.DocumentService/ListDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchDocument(ctx context.Context, in *WatchDocumentRequest, opts ...grpc.CallOption) (WatchDocumentClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchDocument",
			ServerStreams: true,
		},
		"/ntt.ai.v1.DocumentService/WatchDocument", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchDocumentWatchDocumentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchDocumentClientStream interface {
	Recv() (*WatchDocumentResponse, error)
	grpc.ClientStream
}

type watchDocumentWatchDocumentClient struct {
	grpc.ClientStream
}

func (x *watchDocumentWatchDocumentClient) Recv() (*WatchDocumentResponse, error) {
	m := new(WatchDocumentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchDocuments(ctx context.Context, in *WatchDocumentsRequest, opts ...grpc.CallOption) (WatchDocumentsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchDocuments",
			ServerStreams: true,
		},
		"/ntt.ai.v1.DocumentService/WatchDocuments", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchDocumentsWatchDocumentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchDocumentsClientStream interface {
	Recv() (*WatchDocumentsResponse, error)
	grpc.ClientStream
}

type watchDocumentsWatchDocumentsClient struct {
	grpc.ClientStream
}

func (x *watchDocumentsWatchDocumentsClient) Recv() (*WatchDocumentsResponse, error) {
	m := new(WatchDocumentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateDocument(ctx context.Context, in *CreateDocumentRequest, opts ...grpc.CallOption) (*document.Document, error) {
	out := new(document.Document)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.DocumentService/CreateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*document.Document, error) {
	out := new(document.Document)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.DocumentService/UpdateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.DocumentService/DeleteDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
