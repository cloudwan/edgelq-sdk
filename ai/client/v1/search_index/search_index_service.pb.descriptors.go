// Code generated by protoc-gen-goten-client
// API: SearchIndexService
// DO NOT EDIT!!!

package search_index_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	search_index "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_index"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &search_index.SearchIndex{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized          bool
	searchIndexServiceDescriptor    *SearchIndexServiceDescriptor
	getSearchIndexDescriptor        *GetSearchIndexDescriptor
	batchGetSearchIndicesDescriptor *BatchGetSearchIndicesDescriptor
	listSearchIndicesDescriptor     *ListSearchIndicesDescriptor
	watchSearchIndexDescriptor      *WatchSearchIndexDescriptor
	watchSearchIndicesDescriptor    *WatchSearchIndicesDescriptor
	createSearchIndexDescriptor     *CreateSearchIndexDescriptor
	updateSearchIndexDescriptor     *UpdateSearchIndexDescriptor
	deleteSearchIndexDescriptor     *DeleteSearchIndexDescriptor
)

type GetSearchIndexDescriptor struct{}

type GetSearchIndexDescriptorClientMsgHandle struct{}

type GetSearchIndexDescriptorServerMsgHandle struct{}

func (d *GetSearchIndexDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetSearchIndexRequest{}
}

func (d *GetSearchIndexDescriptor) NewEmptyServerMsg() proto.Message {
	return &search_index.SearchIndex{}
}

func (d *GetSearchIndexDescriptor) IsUnary() bool {
	return true
}

func (d *GetSearchIndexDescriptor) IsClientStream() bool {
	return false
}

func (d *GetSearchIndexDescriptor) IsServerStream() bool {
	return false
}

func (d *GetSearchIndexDescriptor) IsCollection() bool {
	return false
}

func (d *GetSearchIndexDescriptor) IsPlural() bool {
	return false
}

func (d *GetSearchIndexDescriptor) HasResource() bool {
	return true
}

func (d *GetSearchIndexDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetSearchIndexDescriptor) GetVerb() string {
	return "get"
}

func (d *GetSearchIndexDescriptor) GetMethodName() string {
	return "GetSearchIndex"
}

func (d *GetSearchIndexDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchIndexService/GetSearchIndex"
}

func (d *GetSearchIndexDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *GetSearchIndexDescriptor) GetApiName() string {
	return "SearchIndexService"
}

func (d *GetSearchIndexDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *GetSearchIndexDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetSearchIndexDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchIndexServiceDescriptor
}

func (d *GetSearchIndexDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_index.GetDescriptor()
}

func (d *GetSearchIndexDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetSearchIndexDescriptorClientMsgHandle{}
}

func (d *GetSearchIndexDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetSearchIndexDescriptorServerMsgHandle{}
}

func (h *GetSearchIndexDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetSearchIndexRequest) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*search_index.Name)(nil)
}

func (h *GetSearchIndexDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetSearchIndexRequest) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetSearchIndexDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetSearchIndexRequest) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetSearchIndexDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetSearchIndexRequest) *search_index.SearchIndex
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetSearchIndexDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetSearchIndexRequest) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetSearchIndexDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*search_index.SearchIndex)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*search_index.SearchIndex) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*search_index.Name)(nil)
}

func (h *GetSearchIndexDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*search_index.SearchIndex)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*search_index.SearchIndex) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetSearchIndexDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*search_index.SearchIndex)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*search_index.SearchIndex) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetSearchIndexDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*search_index.SearchIndex)
}

func (h *GetSearchIndexDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*search_index.SearchIndex)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*search_index.SearchIndex) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetSearchIndexDescriptor() *GetSearchIndexDescriptor {
	return getSearchIndexDescriptor
}

type BatchGetSearchIndicesDescriptor struct{}

type BatchGetSearchIndicesDescriptorClientMsgHandle struct{}

type BatchGetSearchIndicesDescriptorServerMsgHandle struct{}

func (d *BatchGetSearchIndicesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetSearchIndicesRequest{}
}

func (d *BatchGetSearchIndicesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetSearchIndicesResponse{}
}

func (d *BatchGetSearchIndicesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetSearchIndicesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetSearchIndicesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetSearchIndicesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetSearchIndicesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetSearchIndicesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetSearchIndicesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetSearchIndicesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetSearchIndicesDescriptor) GetMethodName() string {
	return "BatchGetSearchIndices"
}

func (d *BatchGetSearchIndicesDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchIndexService/BatchGetSearchIndices"
}

func (d *BatchGetSearchIndicesDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *BatchGetSearchIndicesDescriptor) GetApiName() string {
	return "SearchIndexService"
}

func (d *BatchGetSearchIndicesDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *BatchGetSearchIndicesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetSearchIndicesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchIndexServiceDescriptor
}

func (d *BatchGetSearchIndicesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_index.GetDescriptor()
}

func (d *BatchGetSearchIndicesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetSearchIndicesDescriptorClientMsgHandle{}
}

func (d *BatchGetSearchIndicesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetSearchIndicesDescriptorServerMsgHandle{}
}

func (h *BatchGetSearchIndicesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetSearchIndicesRequest) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetSearchIndicesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetSearchIndicesRequest) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return search_index.SearchIndexNameList(names)
		}
	}
	return (search_index.SearchIndexNameList)(nil)
}

func (h *BatchGetSearchIndicesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetSearchIndicesRequest) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetSearchIndicesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetSearchIndicesRequest) *search_index.SearchIndex
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetSearchIndicesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetSearchIndicesRequest) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetSearchIndicesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetSearchIndicesResponse) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetSearchIndicesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetSearchIndicesResponse) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetSearchIndices(); len(resources) > 0 {
			list := make(search_index.SearchIndexNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (search_index.SearchIndexNameList)(nil)
}

func (h *BatchGetSearchIndicesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetSearchIndicesResponse) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetSearchIndicesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetSearchIndicesResponse) *search_index.SearchIndex
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetSearchIndicesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetSearchIndicesResponse) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetSearchIndices(); len(resources) > 0 {
			return search_index.SearchIndexList(resources)
		}
	}
	return (search_index.SearchIndexList)(nil)
}

func GetBatchGetSearchIndicesDescriptor() *BatchGetSearchIndicesDescriptor {
	return batchGetSearchIndicesDescriptor
}

type ListSearchIndicesDescriptor struct{}

type ListSearchIndicesDescriptorClientMsgHandle struct{}

type ListSearchIndicesDescriptorServerMsgHandle struct{}

func (d *ListSearchIndicesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListSearchIndicesRequest{}
}

func (d *ListSearchIndicesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListSearchIndicesResponse{}
}

func (d *ListSearchIndicesDescriptor) IsUnary() bool {
	return true
}

func (d *ListSearchIndicesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListSearchIndicesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListSearchIndicesDescriptor) IsCollection() bool {
	return true
}

func (d *ListSearchIndicesDescriptor) IsPlural() bool {
	return true
}

func (d *ListSearchIndicesDescriptor) HasResource() bool {
	return true
}

func (d *ListSearchIndicesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListSearchIndicesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListSearchIndicesDescriptor) GetMethodName() string {
	return "ListSearchIndices"
}

func (d *ListSearchIndicesDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchIndexService/ListSearchIndices"
}

func (d *ListSearchIndicesDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *ListSearchIndicesDescriptor) GetApiName() string {
	return "SearchIndexService"
}

func (d *ListSearchIndicesDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *ListSearchIndicesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListSearchIndicesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchIndexServiceDescriptor
}

func (d *ListSearchIndicesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_index.GetDescriptor()
}

func (d *ListSearchIndicesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListSearchIndicesDescriptorClientMsgHandle{}
}

func (d *ListSearchIndicesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListSearchIndicesDescriptorServerMsgHandle{}
}

func (h *ListSearchIndicesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListSearchIndicesRequest) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListSearchIndicesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListSearchIndicesRequest) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListSearchIndicesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListSearchIndicesRequest) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*search_index.ParentName)(nil)
}

func (h *ListSearchIndicesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListSearchIndicesRequest) *search_index.SearchIndex
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListSearchIndicesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListSearchIndicesRequest) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListSearchIndicesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListSearchIndicesResponse) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListSearchIndicesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListSearchIndicesResponse) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetSearchIndices(); len(resources) > 0 {
			list := make(search_index.SearchIndexNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (search_index.SearchIndexNameList)(nil)
}

func (h *ListSearchIndicesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListSearchIndicesResponse) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListSearchIndicesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListSearchIndicesResponse) *search_index.SearchIndex
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListSearchIndicesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListSearchIndicesResponse) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetSearchIndices(); len(resources) > 0 {
			return search_index.SearchIndexList(resources)
		}
	}
	return (search_index.SearchIndexList)(nil)
}

func GetListSearchIndicesDescriptor() *ListSearchIndicesDescriptor {
	return listSearchIndicesDescriptor
}

type WatchSearchIndexDescriptor struct{}

type WatchSearchIndexDescriptorClientMsgHandle struct{}

type WatchSearchIndexDescriptorServerMsgHandle struct{}

func (d *WatchSearchIndexDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchSearchIndexRequest{}
}

func (d *WatchSearchIndexDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchSearchIndexResponse{}
}

func (d *WatchSearchIndexDescriptor) IsUnary() bool {
	return false
}

func (d *WatchSearchIndexDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchSearchIndexDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchSearchIndexDescriptor) IsCollection() bool {
	return false
}

func (d *WatchSearchIndexDescriptor) IsPlural() bool {
	return false
}

func (d *WatchSearchIndexDescriptor) HasResource() bool {
	return true
}

func (d *WatchSearchIndexDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchSearchIndexDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchSearchIndexDescriptor) GetMethodName() string {
	return "WatchSearchIndex"
}

func (d *WatchSearchIndexDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchIndexService/WatchSearchIndex"
}

func (d *WatchSearchIndexDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *WatchSearchIndexDescriptor) GetApiName() string {
	return "SearchIndexService"
}

func (d *WatchSearchIndexDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *WatchSearchIndexDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchSearchIndexDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchIndexServiceDescriptor
}

func (d *WatchSearchIndexDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_index.GetDescriptor()
}

func (d *WatchSearchIndexDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSearchIndexDescriptorClientMsgHandle{}
}

func (d *WatchSearchIndexDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSearchIndexDescriptorServerMsgHandle{}
}

func (h *WatchSearchIndexDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSearchIndexRequest) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*search_index.Name)(nil)
}

func (h *WatchSearchIndexDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSearchIndexRequest) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSearchIndexDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSearchIndexRequest) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchSearchIndexDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchSearchIndexRequest) *search_index.SearchIndex
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchSearchIndexDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchSearchIndexRequest) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchSearchIndexDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchIndexResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSearchIndexResponse) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *search_index.SearchIndexChange_Added_:
				return tResChange.Added.GetSearchIndex().GetName()
			case *search_index.SearchIndexChange_Modified_:
				return tResChange.Modified.GetName()
			case *search_index.SearchIndexChange_Removed_:
				return tResChange.Removed.GetName()
			case *search_index.SearchIndexChange_Current_:
				return tResChange.Current.GetSearchIndex().GetName()
			}
		}
	}
	return (*search_index.Name)(nil)
}

func (h *WatchSearchIndexDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSearchIndexResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSearchIndexResponse) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSearchIndexDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchIndexResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSearchIndexResponse) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchSearchIndexDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchSearchIndexResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchSearchIndexResponse) *search_index.SearchIndex
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *search_index.SearchIndexChange_Added_:
				return tResChange.Added.GetSearchIndex()
			case *search_index.SearchIndexChange_Modified_:
				return tResChange.Modified.GetSearchIndex()
			case *search_index.SearchIndexChange_Current_:
				return tResChange.Current.GetSearchIndex()
			}
		}
	}
	return (*search_index.SearchIndex)(nil)
}

func (h *WatchSearchIndexDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchSearchIndexResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchSearchIndexResponse) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchSearchIndexDescriptor() *WatchSearchIndexDescriptor {
	return watchSearchIndexDescriptor
}

type WatchSearchIndicesDescriptor struct{}

type WatchSearchIndicesDescriptorClientMsgHandle struct{}

type WatchSearchIndicesDescriptorServerMsgHandle struct{}

func (d *WatchSearchIndicesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchSearchIndicesRequest{}
}

func (d *WatchSearchIndicesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchSearchIndicesResponse{}
}

func (d *WatchSearchIndicesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchSearchIndicesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchSearchIndicesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchSearchIndicesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchSearchIndicesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchSearchIndicesDescriptor) HasResource() bool {
	return true
}

func (d *WatchSearchIndicesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchSearchIndicesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchSearchIndicesDescriptor) GetMethodName() string {
	return "WatchSearchIndices"
}

func (d *WatchSearchIndicesDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchIndexService/WatchSearchIndices"
}

func (d *WatchSearchIndicesDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *WatchSearchIndicesDescriptor) GetApiName() string {
	return "SearchIndexService"
}

func (d *WatchSearchIndicesDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *WatchSearchIndicesDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchSearchIndicesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchIndexServiceDescriptor
}

func (d *WatchSearchIndicesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_index.GetDescriptor()
}

func (d *WatchSearchIndicesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSearchIndicesDescriptorClientMsgHandle{}
}

func (d *WatchSearchIndicesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSearchIndicesDescriptorServerMsgHandle{}
}

func (h *WatchSearchIndicesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSearchIndicesRequest) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchSearchIndicesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSearchIndicesRequest) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSearchIndicesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSearchIndicesRequest) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*search_index.ParentName)(nil)
}

func (h *WatchSearchIndicesDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchSearchIndicesRequest) *search_index.SearchIndex
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchSearchIndicesDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchSearchIndicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchSearchIndicesRequest) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchSearchIndicesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSearchIndicesResponse) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchSearchIndicesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSearchIndicesResponse) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetSearchIndexChanges(); len(resChanges) > 0 {
			list := make(search_index.SearchIndexNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *search_index.SearchIndexChange_Added_:
					list = append(list, tResChange.Added.GetSearchIndex().GetName())
				case *search_index.SearchIndexChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *search_index.SearchIndexChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *search_index.SearchIndexChange_Current_:
					list = append(list, tResChange.Current.GetSearchIndex().GetName())
				}
			}
			return list
		}
	}
	return (search_index.SearchIndexNameList)(nil)
}

func (h *WatchSearchIndicesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSearchIndicesResponse) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchSearchIndicesDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchSearchIndicesResponse) *search_index.SearchIndex
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchSearchIndicesDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchSearchIndicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchSearchIndicesResponse) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetSearchIndexChanges(); len(resChanges) > 0 {
			list := make(search_index.SearchIndexList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *search_index.SearchIndexChange_Added_:
					list = append(list, tResChange.Added.GetSearchIndex())
				case *search_index.SearchIndexChange_Modified_:
					list = append(list, tResChange.Modified.GetSearchIndex())
				case *search_index.SearchIndexChange_Current_:
					list = append(list, tResChange.Current.GetSearchIndex())
				}
			}
			return list
		}
	}
	return (search_index.SearchIndexList)(nil)
}

func GetWatchSearchIndicesDescriptor() *WatchSearchIndicesDescriptor {
	return watchSearchIndicesDescriptor
}

type CreateSearchIndexDescriptor struct{}

type CreateSearchIndexDescriptorClientMsgHandle struct{}

type CreateSearchIndexDescriptorServerMsgHandle struct{}

func (d *CreateSearchIndexDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateSearchIndexRequest{}
}

func (d *CreateSearchIndexDescriptor) NewEmptyServerMsg() proto.Message {
	return &search_index.SearchIndex{}
}

func (d *CreateSearchIndexDescriptor) IsUnary() bool {
	return true
}

func (d *CreateSearchIndexDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateSearchIndexDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateSearchIndexDescriptor) IsCollection() bool {
	return true
}

func (d *CreateSearchIndexDescriptor) IsPlural() bool {
	return false
}

func (d *CreateSearchIndexDescriptor) HasResource() bool {
	return true
}

func (d *CreateSearchIndexDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateSearchIndexDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateSearchIndexDescriptor) GetMethodName() string {
	return "CreateSearchIndex"
}

func (d *CreateSearchIndexDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchIndexService/CreateSearchIndex"
}

func (d *CreateSearchIndexDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *CreateSearchIndexDescriptor) GetApiName() string {
	return "SearchIndexService"
}

func (d *CreateSearchIndexDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *CreateSearchIndexDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateSearchIndexDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchIndexServiceDescriptor
}

func (d *CreateSearchIndexDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_index.GetDescriptor()
}

func (d *CreateSearchIndexDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateSearchIndexDescriptorClientMsgHandle{}
}

func (d *CreateSearchIndexDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateSearchIndexDescriptorServerMsgHandle{}
}

func (h *CreateSearchIndexDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateSearchIndexRequest) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetSearchIndex()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*search_index.Name)(nil)
}

func (h *CreateSearchIndexDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateSearchIndexRequest) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateSearchIndexDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateSearchIndexRequest) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*search_index.ParentName)(nil)
}

func (h *CreateSearchIndexDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateSearchIndexRequest) *search_index.SearchIndex
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetSearchIndex()
	}
	return (*search_index.SearchIndex)(nil)
}

func (h *CreateSearchIndexDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateSearchIndexRequest) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateSearchIndexDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*search_index.SearchIndex)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*search_index.SearchIndex) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*search_index.Name)(nil)
}

func (h *CreateSearchIndexDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*search_index.SearchIndex)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*search_index.SearchIndex) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateSearchIndexDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*search_index.SearchIndex)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*search_index.SearchIndex) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateSearchIndexDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*search_index.SearchIndex)
}

func (h *CreateSearchIndexDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*search_index.SearchIndex)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*search_index.SearchIndex) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateSearchIndexDescriptor() *CreateSearchIndexDescriptor {
	return createSearchIndexDescriptor
}

type UpdateSearchIndexDescriptor struct{}

type UpdateSearchIndexDescriptorClientMsgHandle struct{}

type UpdateSearchIndexDescriptorServerMsgHandle struct{}

func (d *UpdateSearchIndexDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateSearchIndexRequest{}
}

func (d *UpdateSearchIndexDescriptor) NewEmptyServerMsg() proto.Message {
	return &search_index.SearchIndex{}
}

func (d *UpdateSearchIndexDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateSearchIndexDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateSearchIndexDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateSearchIndexDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateSearchIndexDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateSearchIndexDescriptor) HasResource() bool {
	return true
}

func (d *UpdateSearchIndexDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateSearchIndexDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateSearchIndexDescriptor) GetMethodName() string {
	return "UpdateSearchIndex"
}

func (d *UpdateSearchIndexDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchIndexService/UpdateSearchIndex"
}

func (d *UpdateSearchIndexDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *UpdateSearchIndexDescriptor) GetApiName() string {
	return "SearchIndexService"
}

func (d *UpdateSearchIndexDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *UpdateSearchIndexDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateSearchIndexDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchIndexServiceDescriptor
}

func (d *UpdateSearchIndexDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_index.GetDescriptor()
}

func (d *UpdateSearchIndexDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateSearchIndexDescriptorClientMsgHandle{}
}

func (d *UpdateSearchIndexDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateSearchIndexDescriptorServerMsgHandle{}
}

func (h *UpdateSearchIndexDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateSearchIndexRequest) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetSearchIndex()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*search_index.Name)(nil)
}

func (h *UpdateSearchIndexDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateSearchIndexRequest) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateSearchIndexDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateSearchIndexRequest) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateSearchIndexDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateSearchIndexRequest) *search_index.SearchIndex
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetSearchIndex()
	}
	return (*search_index.SearchIndex)(nil)
}

func (h *UpdateSearchIndexDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateSearchIndexRequest) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateSearchIndexDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*search_index.SearchIndex)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*search_index.SearchIndex) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*search_index.Name)(nil)
}

func (h *UpdateSearchIndexDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*search_index.SearchIndex)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*search_index.SearchIndex) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateSearchIndexDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*search_index.SearchIndex)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*search_index.SearchIndex) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateSearchIndexDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*search_index.SearchIndex)
}

func (h *UpdateSearchIndexDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*search_index.SearchIndex)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*search_index.SearchIndex) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateSearchIndexDescriptor() *UpdateSearchIndexDescriptor {
	return updateSearchIndexDescriptor
}

type DeleteSearchIndexDescriptor struct{}

type DeleteSearchIndexDescriptorClientMsgHandle struct{}

type DeleteSearchIndexDescriptorServerMsgHandle struct{}

func (d *DeleteSearchIndexDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteSearchIndexRequest{}
}

func (d *DeleteSearchIndexDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteSearchIndexDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteSearchIndexDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteSearchIndexDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteSearchIndexDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteSearchIndexDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteSearchIndexDescriptor) HasResource() bool {
	return true
}

func (d *DeleteSearchIndexDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteSearchIndexDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteSearchIndexDescriptor) GetMethodName() string {
	return "DeleteSearchIndex"
}

func (d *DeleteSearchIndexDescriptor) GetFullMethodName() string {
	return "/ntt.ai.v1.SearchIndexService/DeleteSearchIndex"
}

func (d *DeleteSearchIndexDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *DeleteSearchIndexDescriptor) GetApiName() string {
	return "SearchIndexService"
}

func (d *DeleteSearchIndexDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *DeleteSearchIndexDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteSearchIndexDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return searchIndexServiceDescriptor
}

func (d *DeleteSearchIndexDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return search_index.GetDescriptor()
}

func (d *DeleteSearchIndexDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteSearchIndexDescriptorClientMsgHandle{}
}

func (d *DeleteSearchIndexDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteSearchIndexDescriptorServerMsgHandle{}
}

func (h *DeleteSearchIndexDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteSearchIndexRequest) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*search_index.Name)(nil)
}

func (h *DeleteSearchIndexDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteSearchIndexRequest) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteSearchIndexDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteSearchIndexRequest) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteSearchIndexDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteSearchIndexRequest) *search_index.SearchIndex
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteSearchIndexDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteSearchIndexRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteSearchIndexRequest) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteSearchIndexDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *search_index.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteSearchIndexDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*search_index.Name
	})
	if ok {
		return search_index.SearchIndexNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteSearchIndexDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *search_index.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteSearchIndexDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *search_index.SearchIndex
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteSearchIndexDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*search_index.SearchIndex
	})
	if ok {
		return search_index.SearchIndexList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteSearchIndexDescriptor() *DeleteSearchIndexDescriptor {
	return deleteSearchIndexDescriptor
}

type SearchIndexServiceDescriptor struct{}

func (d *SearchIndexServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getSearchIndexDescriptor,
		batchGetSearchIndicesDescriptor,
		listSearchIndicesDescriptor,
		watchSearchIndexDescriptor,
		watchSearchIndicesDescriptor,
		createSearchIndexDescriptor,
		updateSearchIndexDescriptor,
		deleteSearchIndexDescriptor,
	}
}

func (d *SearchIndexServiceDescriptor) GetFullAPIName() string {
	return "/ntt.ai.v1.SearchIndexService"
}

func (d *SearchIndexServiceDescriptor) GetProtoPkgName() string {
	return "ntt.ai.v1"
}

func (d *SearchIndexServiceDescriptor) GetApiName() string {
	return "SearchIndexService"
}

func (d *SearchIndexServiceDescriptor) GetServiceDomain() string {
	return "ai.edgelq.com"
}

func (d *SearchIndexServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetSearchIndexServiceDescriptor() *SearchIndexServiceDescriptor {
	return searchIndexServiceDescriptor
}

func initDescriptors() {
	searchIndexServiceDescriptor = &SearchIndexServiceDescriptor{}
	getSearchIndexDescriptor = &GetSearchIndexDescriptor{}
	batchGetSearchIndicesDescriptor = &BatchGetSearchIndicesDescriptor{}
	listSearchIndicesDescriptor = &ListSearchIndicesDescriptor{}
	watchSearchIndexDescriptor = &WatchSearchIndexDescriptor{}
	watchSearchIndicesDescriptor = &WatchSearchIndicesDescriptor{}
	createSearchIndexDescriptor = &CreateSearchIndexDescriptor{}
	updateSearchIndexDescriptor = &UpdateSearchIndexDescriptor{}
	deleteSearchIndexDescriptor = &DeleteSearchIndexDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(searchIndexServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getSearchIndexDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetSearchIndicesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listSearchIndicesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchSearchIndexDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchSearchIndicesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createSearchIndexDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateSearchIndexDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteSearchIndexDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
