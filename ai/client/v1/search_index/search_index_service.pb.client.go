// Code generated by protoc-gen-goten-client
// API: SearchIndexService
// DO NOT EDIT!!!

package search_index_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	search_index "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_index"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &search_index.SearchIndex{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SearchIndexServiceClient is the client API for SearchIndexService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchIndexServiceClient interface {
	GetSearchIndex(ctx context.Context, in *GetSearchIndexRequest, opts ...grpc.CallOption) (*search_index.SearchIndex, error)
	BatchGetSearchIndices(ctx context.Context, in *BatchGetSearchIndicesRequest, opts ...grpc.CallOption) (*BatchGetSearchIndicesResponse, error)
	ListSearchIndices(ctx context.Context, in *ListSearchIndicesRequest, opts ...grpc.CallOption) (*ListSearchIndicesResponse, error)
	WatchSearchIndex(ctx context.Context, in *WatchSearchIndexRequest, opts ...grpc.CallOption) (WatchSearchIndexClientStream, error)
	WatchSearchIndices(ctx context.Context, in *WatchSearchIndicesRequest, opts ...grpc.CallOption) (WatchSearchIndicesClientStream, error)
	CreateSearchIndex(ctx context.Context, in *CreateSearchIndexRequest, opts ...grpc.CallOption) (*search_index.SearchIndex, error)
	UpdateSearchIndex(ctx context.Context, in *UpdateSearchIndexRequest, opts ...grpc.CallOption) (*search_index.SearchIndex, error)
	DeleteSearchIndex(ctx context.Context, in *DeleteSearchIndexRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewSearchIndexServiceClient(cc grpc.ClientConnInterface) SearchIndexServiceClient {
	return &client{cc}
}

func (c *client) GetSearchIndex(ctx context.Context, in *GetSearchIndexRequest, opts ...grpc.CallOption) (*search_index.SearchIndex, error) {
	out := new(search_index.SearchIndex)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.SearchIndexService/GetSearchIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetSearchIndices(ctx context.Context, in *BatchGetSearchIndicesRequest, opts ...grpc.CallOption) (*BatchGetSearchIndicesResponse, error) {
	out := new(BatchGetSearchIndicesResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.SearchIndexService/BatchGetSearchIndices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListSearchIndices(ctx context.Context, in *ListSearchIndicesRequest, opts ...grpc.CallOption) (*ListSearchIndicesResponse, error) {
	out := new(ListSearchIndicesResponse)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.SearchIndexService/ListSearchIndices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchSearchIndex(ctx context.Context, in *WatchSearchIndexRequest, opts ...grpc.CallOption) (WatchSearchIndexClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchSearchIndex",
			ServerStreams: true,
		},
		"/ntt.ai.v1.SearchIndexService/WatchSearchIndex", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchSearchIndexWatchSearchIndexClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchSearchIndexClientStream interface {
	Recv() (*WatchSearchIndexResponse, error)
	grpc.ClientStream
}

type watchSearchIndexWatchSearchIndexClient struct {
	grpc.ClientStream
}

func (x *watchSearchIndexWatchSearchIndexClient) Recv() (*WatchSearchIndexResponse, error) {
	m := new(WatchSearchIndexResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchSearchIndices(ctx context.Context, in *WatchSearchIndicesRequest, opts ...grpc.CallOption) (WatchSearchIndicesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchSearchIndices",
			ServerStreams: true,
		},
		"/ntt.ai.v1.SearchIndexService/WatchSearchIndices", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchSearchIndicesWatchSearchIndicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchSearchIndicesClientStream interface {
	Recv() (*WatchSearchIndicesResponse, error)
	grpc.ClientStream
}

type watchSearchIndicesWatchSearchIndicesClient struct {
	grpc.ClientStream
}

func (x *watchSearchIndicesWatchSearchIndicesClient) Recv() (*WatchSearchIndicesResponse, error) {
	m := new(WatchSearchIndicesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateSearchIndex(ctx context.Context, in *CreateSearchIndexRequest, opts ...grpc.CallOption) (*search_index.SearchIndex, error) {
	out := new(search_index.SearchIndex)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.SearchIndexService/CreateSearchIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateSearchIndex(ctx context.Context, in *UpdateSearchIndexRequest, opts ...grpc.CallOption) (*search_index.SearchIndex, error) {
	out := new(search_index.SearchIndex)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.SearchIndexService/UpdateSearchIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteSearchIndex(ctx context.Context, in *DeleteSearchIndexRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.ai.v1.SearchIndexService/DeleteSearchIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
