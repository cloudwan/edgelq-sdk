// Code generated by protoc-gen-goten-client
// API: ResponsesService
// DO NOT EDIT!!!

package responses_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import ()

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var ()

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ResponsesServiceClient is the client API for ResponsesService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResponsesServiceClient interface {
	CreateResponse(ctx context.Context, in *CreateResponseRequest, opts ...grpc.CallOption) (CreateResponseClientStream, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewResponsesServiceClient(cc grpc.ClientConnInterface) ResponsesServiceClient {
	return &client{cc}
}

func (c *client) CreateResponse(ctx context.Context, in *CreateResponseRequest, opts ...grpc.CallOption) (CreateResponseClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "CreateResponse",
			ServerStreams: true,
		},
		"/ntt.ai.v1.ResponsesService/CreateResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &createResponseCreateResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CreateResponseClientStream interface {
	Recv() (*CreateResponseResult, error)
	grpc.ClientStream
}

type createResponseCreateResponseClient struct {
	grpc.ClientStream
}

func (x *createResponseCreateResponseClient) Recv() (*CreateResponseResult, error) {
	m := new(CreateResponseResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}
