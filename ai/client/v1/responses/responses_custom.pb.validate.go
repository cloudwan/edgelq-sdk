// Code generated by protoc-gen-goten-validate
// File: edgelq/ai/proto/v1/responses_custom.proto
// DO NOT EDIT!!!

package responses_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	common_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/common"
	capability_template "github.com/cloudwan/edgelq-sdk/ai/resources/v1/capability_template"
	chat_model "github.com/cloudwan/edgelq-sdk/ai/resources/v1/chat_model"
	conversation "github.com/cloudwan/edgelq-sdk/ai/resources/v1/conversation"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1/user"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &capability_template.CapabilityTemplate{}
	_ = &chat_model.ChatModel{}
	_ = &common_client.Message{}
	_ = &conversation.Conversation{}
	_ = &iam_project.Project{}
	_ = &iam_user.User{}
)

func (obj *CreateResponseRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.CreateRequest).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("CreateResponseRequest", "createRequest", obj.CreateRequest, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CreateRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.Messages {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateRequest", "messages", obj.Messages[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.ClientTools {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateRequest", "clientTools", obj.ClientTools[idx], "nested object validation failed", err)
			}
		}
	}
	switch opt := obj.ServerToolsConfig.(type) {
	case *CreateRequest_CapabilityTemplate:
	case *CreateRequest_Connectors:
		if subobj, ok := interface{}(opt.Connectors).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateRequest", "connectors", opt.Connectors, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CreateResponseResult) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Event.(type) {
	case *CreateResponseResult_ResponseStarted:
		if subobj, ok := interface{}(opt.ResponseStarted).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateResponseResult", "responseStarted", opt.ResponseStarted, "nested object validation failed", err)
			}
		}
	case *CreateResponseResult_ContentDelta:
		if subobj, ok := interface{}(opt.ContentDelta).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateResponseResult", "contentDelta", opt.ContentDelta, "nested object validation failed", err)
			}
		}
	case *CreateResponseResult_ContentDone:
		if subobj, ok := interface{}(opt.ContentDone).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateResponseResult", "contentDone", opt.ContentDone, "nested object validation failed", err)
			}
		}
	case *CreateResponseResult_ThinkingDelta:
		if subobj, ok := interface{}(opt.ThinkingDelta).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateResponseResult", "thinkingDelta", opt.ThinkingDelta, "nested object validation failed", err)
			}
		}
	case *CreateResponseResult_ThinkingDone:
		if subobj, ok := interface{}(opt.ThinkingDone).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateResponseResult", "thinkingDone", opt.ThinkingDone, "nested object validation failed", err)
			}
		}
	case *CreateResponseResult_ToolCalls:
		if subobj, ok := interface{}(opt.ToolCalls).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateResponseResult", "toolCalls", opt.ToolCalls, "nested object validation failed", err)
			}
		}
	case *CreateResponseResult_ResponseComplete:
		if subobj, ok := interface{}(opt.ResponseComplete).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateResponseResult", "responseComplete", opt.ResponseComplete, "nested object validation failed", err)
			}
		}
	case *CreateResponseResult_Error:
		if subobj, ok := interface{}(opt.Error).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateResponseResult", "error", opt.Error, "nested object validation failed", err)
			}
		}
	case *CreateResponseResult_CitationDelta:
		if subobj, ok := interface{}(opt.CitationDelta).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("CreateResponseResult", "citationDelta", opt.CitationDelta, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ResponseStarted) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.AvailableTools {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ResponseStarted", "availableTools", obj.AvailableTools[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.Capabilities).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ResponseStarted", "capabilities", obj.Capabilities, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ToolInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Source.(type) {
	case *ToolInfo_Client:
		if subobj, ok := interface{}(opt.Client).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ToolInfo", "client", opt.Client, "nested object validation failed", err)
			}
		}
	case *ToolInfo_Connector:
		if subobj, ok := interface{}(opt.Connector).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ToolInfo", "connector", opt.Connector, "nested object validation failed", err)
			}
		}
	case *ToolInfo_Internal:
		if subobj, ok := interface{}(opt.Internal).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ToolInfo", "internal", opt.Internal, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ModelCapabilities) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ContentDelta) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ContentDone) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ThinkingDelta) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ThinkingDone) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *CitationDelta) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Citation).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("CitationDelta", "citation", obj.Citation, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ResponseComplete) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Usage).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ResponseComplete", "usage", obj.Usage, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.CumulativeUsage).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ResponseComplete", "cumulativeUsage", obj.CumulativeUsage, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Error) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
