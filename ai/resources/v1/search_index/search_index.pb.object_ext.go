// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/search_index.proto
// DO NOT EDIT!!!

package search_index

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	search_db "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_db"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &search_db.SearchDb{}
	_ = &meta.Meta{}
)

func (o *SearchIndex) GotenObjectExt() {}

func (o *SearchIndex) MakeFullFieldMask() *SearchIndex_FieldMask {
	return FullSearchIndex_FieldMask()
}

func (o *SearchIndex) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchIndex_FieldMask()
}

func (o *SearchIndex) MakeDiffFieldMask(other *SearchIndex) *SearchIndex_FieldMask {
	if o == nil && other == nil {
		return &SearchIndex_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchIndex_FieldMask()
	}

	res := &SearchIndex_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &SearchIndex_FieldTerminalPath{selector: SearchIndex_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SearchIndex_FieldTerminalPath{selector: SearchIndex_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SearchIndex_FieldSubPath{selector: SearchIndex_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetIndexName() != other.GetIndexName() {
		res.Paths = append(res.Paths, &SearchIndex_FieldTerminalPath{selector: SearchIndex_FieldPathSelectorIndexName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &SearchIndex_FieldTerminalPath{selector: SearchIndex_FieldPathSelectorDisplayName})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &SearchIndex_FieldTerminalPath{selector: SearchIndex_FieldPathSelectorDescription})
	}
	if o.GetTokensPerChunk() != other.GetTokensPerChunk() {
		res.Paths = append(res.Paths, &SearchIndex_FieldTerminalPath{selector: SearchIndex_FieldPathSelectorTokensPerChunk})
	}
	if o.GetOverlapTokens() != other.GetOverlapTokens() {
		res.Paths = append(res.Paths, &SearchIndex_FieldTerminalPath{selector: SearchIndex_FieldPathSelectorOverlapTokens})
	}
	return res
}

func (o *SearchIndex) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchIndex))
}

func (o *SearchIndex) Clone() *SearchIndex {
	if o == nil {
		return nil
	}
	result := &SearchIndex{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.IndexName = o.IndexName
	result.DisplayName = o.DisplayName
	result.Description = o.Description
	result.TokensPerChunk = o.TokensPerChunk
	result.OverlapTokens = o.OverlapTokens
	return result
}

func (o *SearchIndex) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchIndex) Merge(source *SearchIndex) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.IndexName = source.GetIndexName()
	o.DisplayName = source.GetDisplayName()
	o.Description = source.GetDescription()
	o.TokensPerChunk = source.GetTokensPerChunk()
	o.OverlapTokens = source.GetOverlapTokens()
}

func (o *SearchIndex) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchIndex))
}
