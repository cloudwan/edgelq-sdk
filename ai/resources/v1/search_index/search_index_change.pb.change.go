// Code generated by protoc-gen-goten-resource
// Resource change: SearchIndexChange
// DO NOT EDIT!!!

package search_index

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	search_db "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_db"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &search_db.SearchDb{}
	_ = &fieldmaskpb.FieldMask{}
)

func (c *SearchIndexChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*SearchIndexChange_Added_)
	return ok
}

func (c *SearchIndexChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*SearchIndexChange_Modified_)
	return ok
}

func (c *SearchIndexChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*SearchIndexChange_Current_)
	return ok
}

func (c *SearchIndexChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*SearchIndexChange_Removed_)
	return ok
}

func (c *SearchIndexChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *SearchIndexChange_Added_:
		return cType.Added.ViewIndex
	case *SearchIndexChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *SearchIndexChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *SearchIndexChange_Removed_:
		return cType.Removed.ViewIndex
	case *SearchIndexChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *SearchIndexChange) GetSearchIndex() *SearchIndex {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *SearchIndexChange_Added_:
		return cType.Added.SearchIndex
	case *SearchIndexChange_Modified_:
		return cType.Modified.SearchIndex
	case *SearchIndexChange_Current_:
		return cType.Current.SearchIndex
	case *SearchIndexChange_Removed_:
		return nil
	}
	return nil
}

func (c *SearchIndexChange) GetRawResource() gotenresource.Resource {
	return c.GetSearchIndex()
}

func (c *SearchIndexChange) GetSearchIndexName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *SearchIndexChange_Added_:
		return cType.Added.SearchIndex.GetName()
	case *SearchIndexChange_Modified_:
		return cType.Modified.Name
	case *SearchIndexChange_Current_:
		return cType.Current.SearchIndex.GetName()
	case *SearchIndexChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *SearchIndexChange) GetRawName() gotenresource.Name {
	return c.GetSearchIndexName()
}

func (c *SearchIndexChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &SearchIndexChange_Added_{
		Added: &SearchIndexChange_Added{
			SearchIndex: snapshot.(*SearchIndex),
			ViewIndex:   int32(idx),
		},
	}
}

func (c *SearchIndexChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &SearchIndexChange_Modified_{
		Modified: &SearchIndexChange_Modified{
			Name:              name.(*Name),
			SearchIndex:       snapshot.(*SearchIndex),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *SearchIndexChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &SearchIndexChange_Current_{
		Current: &SearchIndexChange_Current{
			SearchIndex: snapshot.(*SearchIndex),
		},
	}
}

func (c *SearchIndexChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &SearchIndexChange_Removed_{
		Removed: &SearchIndexChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
