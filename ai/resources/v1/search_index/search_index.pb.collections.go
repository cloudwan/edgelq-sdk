// Code generated by protoc-gen-goten-resource
// Resource: SearchIndex
// DO NOT EDIT!!!

package search_index

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	search_db "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_db"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &search_db.SearchDb{}
	_ = &meta.Meta{}
)

type SearchIndexList []*SearchIndex

func (l SearchIndexList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*SearchIndex))
}

func (l SearchIndexList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(SearchIndexList)...)
}

func (l SearchIndexList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SearchIndexList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l SearchIndexList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*SearchIndex)
}

func (l SearchIndexList) Length() int {
	return len(l)
}

type SearchIndexChangeList []*SearchIndexChange

func (l SearchIndexChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*SearchIndexChange))
}

func (l SearchIndexChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(SearchIndexChangeList)...)
}

func (l SearchIndexChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SearchIndexChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l SearchIndexChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*SearchIndexChange)
}

func (l SearchIndexChangeList) Length() int {
	return len(l)
}

type SearchIndexNameList []*Name

func (l SearchIndexNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l SearchIndexNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(SearchIndexNameList)...)
}

func (l SearchIndexNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SearchIndexNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l SearchIndexNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l SearchIndexNameList) Length() int {
	return len(l)
}

type SearchIndexReferenceList []*Reference

func (l SearchIndexReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l SearchIndexReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(SearchIndexReferenceList)...)
}

func (l SearchIndexReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SearchIndexReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l SearchIndexReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l SearchIndexReferenceList) Length() int {
	return len(l)
}

type SearchIndexParentNameList []*ParentName

func (l SearchIndexParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l SearchIndexParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(SearchIndexParentNameList)...)
}

func (l SearchIndexParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SearchIndexParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l SearchIndexParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l SearchIndexParentNameList) Length() int {
	return len(l)
}

type SearchIndexParentReferenceList []*ParentReference

func (l SearchIndexParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l SearchIndexParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(SearchIndexParentReferenceList)...)
}

func (l SearchIndexParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SearchIndexParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l SearchIndexParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l SearchIndexParentReferenceList) Length() int {
	return len(l)
}

type SearchIndexMap map[Name]*SearchIndex

func (m SearchIndexMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m SearchIndexMap) Set(res gotenresource.Resource) {
	tRes := res.(*SearchIndex)
	m[*tRes.Name] = tRes
}

func (m SearchIndexMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m SearchIndexMap) Length() int {
	return len(m)
}

func (m SearchIndexMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type SearchIndexChangeMap map[Name]*SearchIndexChange

func (m SearchIndexChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m SearchIndexChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*SearchIndexChange)
	m[*tChange.GetSearchIndexName()] = tChange
}

func (m SearchIndexChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m SearchIndexChangeMap) Length() int {
	return len(m)
}

func (m SearchIndexChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
