// Code generated by protoc-gen-goten-validate
// File: edgelq/ai/proto/v1/search_index.proto
// DO NOT EDIT!!!

package search_index

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	search_db "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_db"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &search_db.SearchDb{}
	_ = &meta.Meta{}
)

func (obj *SearchIndex) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Metadata).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("SearchIndex", "metadata", obj.Metadata, "nested object validation failed", err)
		}
	}
	if len(obj.IndexName) > 64 {
		return gotenvalidate.NewValidationError("SearchIndex", "indexName", obj.IndexName, "field must contain at most 64 characters", nil)
	}
	if obj.IndexName == "" {
		return gotenvalidate.NewValidationError("SearchIndex", "indexName", obj.IndexName, "field is required", nil)
	}
	if len(obj.DisplayName) > 128 {
		return gotenvalidate.NewValidationError("SearchIndex", "displayName", obj.DisplayName, "field must contain at most 128 characters", nil)
	}
	if obj.DisplayName == "" {
		return gotenvalidate.NewValidationError("SearchIndex", "displayName", obj.DisplayName, "field is required", nil)
	}
	if len(obj.Description) > 1024 {
		return gotenvalidate.NewValidationError("SearchIndex", "description", obj.Description, "field must contain at most 1024 characters", nil)
	}
	if obj.Description == "" {
		return gotenvalidate.NewValidationError("SearchIndex", "description", obj.Description, "field is required", nil)
	}
	if !(obj.TokensPerChunk > 0 && obj.TokensPerChunk <= 1536) {
		return gotenvalidate.NewValidationError("SearchIndex", "tokensPerChunk", obj.TokensPerChunk, "field must be in range (0, 1536]", nil)
	}
	if !(obj.OverlapTokens >= 0 && obj.OverlapTokens <= 256) {
		return gotenvalidate.NewValidationError("SearchIndex", "overlapTokens", obj.OverlapTokens, "field must be in range [0, 256]", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
