// Code generated by protoc-gen-goten-go
// File: edgelq/ai/proto/v1/search_index.proto
// DO NOT EDIT!!!

package search_index

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	search_db "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_db"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &search_db.SearchDb{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SearchIndex Resource represents set of related documents focused on
// concrete topic. Such an index can be used with Chat service (RAG).
// Index fields in search database are:
// * ID (contains chunk index with document file name, or url/title)
// * DocumentChecksum (string, maps one to 1 with Document resource).
// * Parent ID (applicable for some documents, like markdown file split by
// titles).
// * Content (text content after chunking)
// * Title (string, if applicable, depending on a file)
// * URL (string, if applicable, depending on document type)
// * Filepath (string, if applicable, depending on document type)
type SearchIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of SearchIndex
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata  *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	IndexName string     `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	// Human-readable display name for this search index
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of what content this index contains
	Description    string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	TokensPerChunk int32  `protobuf:"varint,6,opt,name=tokens_per_chunk,json=tokensPerChunk,proto3" json:"tokens_per_chunk,omitempty"`
	OverlapTokens  int32  `protobuf:"varint,7,opt,name=overlap_tokens,json=overlapTokens,proto3" json:"overlap_tokens,omitempty"`
}

func (m *SearchIndex) Reset() {
	*m = SearchIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_search_index_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SearchIndex) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SearchIndex) ProtoMessage() {}

func (m *SearchIndex) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_search_index_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SearchIndex) GotenMessage() {}

// Deprecated, Use SearchIndex.ProtoReflect.Descriptor instead.
func (*SearchIndex) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_search_index_proto_rawDescGZIP(), []int{0}
}

func (m *SearchIndex) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SearchIndex) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SearchIndex) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SearchIndex) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SearchIndex) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *SearchIndex) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SearchIndex) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

func (m *SearchIndex) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *SearchIndex) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SearchIndex) GetTokensPerChunk() int32 {
	if m != nil {
		return m.TokensPerChunk
	}
	return int32(0)
}

func (m *SearchIndex) GetOverlapTokens() int32 {
	if m != nil {
		return m.OverlapTokens
	}
	return int32(0)
}

func (m *SearchIndex) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "SearchIndex"))
	}
	m.Name = fv
}

func (m *SearchIndex) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "SearchIndex"))
	}
	m.Metadata = fv
}

func (m *SearchIndex) SetIndexName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IndexName", "SearchIndex"))
	}
	m.IndexName = fv
}

func (m *SearchIndex) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "SearchIndex"))
	}
	m.DisplayName = fv
}

func (m *SearchIndex) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "SearchIndex"))
	}
	m.Description = fv
}

func (m *SearchIndex) SetTokensPerChunk(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TokensPerChunk", "SearchIndex"))
	}
	m.TokensPerChunk = fv
}

func (m *SearchIndex) SetOverlapTokens(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OverlapTokens", "SearchIndex"))
	}
	m.OverlapTokens = fv
}

var edgelq_ai_proto_v1_search_index_proto preflect.FileDescriptor

var edgelq_ai_proto_v1_search_index_proto_rawDesc = []byte{
	0x0a, 0x25, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb,
	0x04, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xb2, 0xda,
	0x21, 0x0f, 0x0a, 0x0d, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08,
	0x2a, 0x06, 0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a,
	0x07, 0x3a, 0x03, 0x08, 0x80, 0x01, 0x68, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09,
	0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x08, 0x68, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x12, 0x07, 0x1a, 0x03, 0x08, 0x80, 0x0c, 0x22, 0x00, 0x52,
	0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x34, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x12, 0x07, 0x1a,
	0x03, 0x08, 0x80, 0x02, 0x2a, 0x00, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x3a, 0xd4, 0x01, 0xea, 0x41, 0x96, 0x01, 0x0a, 0x19, 0x61, 0x69,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x62, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x62, 0x7d, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x7d, 0x12, 0x45, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x62, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x64, 0x62, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x7d, 0x92, 0xd9, 0x21, 0x2a, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x1a, 0x08, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x62, 0x38, 0x05,
	0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x8e, 0x02, 0xe8,
	0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x49, 0x0a, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0xa2, 0x80, 0xd1, 0x02, 0x4b, 0x0a, 0x13, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x70, 0x62,
	0x2e, 0x76, 0x31, 0x42, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x3b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_ai_proto_v1_search_index_proto_rawDescOnce sync.Once
	edgelq_ai_proto_v1_search_index_proto_rawDescData = edgelq_ai_proto_v1_search_index_proto_rawDesc
)

func edgelq_ai_proto_v1_search_index_proto_rawDescGZIP() []byte {
	edgelq_ai_proto_v1_search_index_proto_rawDescOnce.Do(func() {
		edgelq_ai_proto_v1_search_index_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_ai_proto_v1_search_index_proto_rawDescData)
	})
	return edgelq_ai_proto_v1_search_index_proto_rawDescData
}

var edgelq_ai_proto_v1_search_index_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var edgelq_ai_proto_v1_search_index_proto_goTypes = []interface{}{
	(*SearchIndex)(nil), // 0: ntt.ai.v1.SearchIndex
	(*meta.Meta)(nil),   // 1: goten.types.Meta
}
var edgelq_ai_proto_v1_search_index_proto_depIdxs = []int32{
	1, // 0: ntt.ai.v1.SearchIndex.metadata:type_name -> goten.types.Meta
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { edgelq_ai_proto_v1_search_index_proto_init() }
func edgelq_ai_proto_v1_search_index_proto_init() {
	if edgelq_ai_proto_v1_search_index_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_ai_proto_v1_search_index_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_ai_proto_v1_search_index_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_ai_proto_v1_search_index_proto_goTypes,
		DependencyIndexes: edgelq_ai_proto_v1_search_index_proto_depIdxs,
		MessageInfos:      edgelq_ai_proto_v1_search_index_proto_msgTypes,
	}.Build()
	edgelq_ai_proto_v1_search_index_proto = out.File
	edgelq_ai_proto_v1_search_index_proto_rawDesc = nil
	edgelq_ai_proto_v1_search_index_proto_goTypes = nil
	edgelq_ai_proto_v1_search_index_proto_depIdxs = nil
}
