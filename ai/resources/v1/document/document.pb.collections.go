// Code generated by protoc-gen-goten-resource
// Resource: Document
// DO NOT EDIT!!!

package document

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	search_index "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_index"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &search_index.SearchIndex{}
	_ = &meta.Meta{}
)

type DocumentList []*Document

func (l DocumentList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Document))
}

func (l DocumentList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(DocumentList)...)
}

func (l DocumentList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DocumentList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l DocumentList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Document)
}

func (l DocumentList) Length() int {
	return len(l)
}

type DocumentChangeList []*DocumentChange

func (l DocumentChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*DocumentChange))
}

func (l DocumentChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(DocumentChangeList)...)
}

func (l DocumentChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DocumentChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l DocumentChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*DocumentChange)
}

func (l DocumentChangeList) Length() int {
	return len(l)
}

type DocumentNameList []*Name

func (l DocumentNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l DocumentNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(DocumentNameList)...)
}

func (l DocumentNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DocumentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l DocumentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l DocumentNameList) Length() int {
	return len(l)
}

type DocumentReferenceList []*Reference

func (l DocumentReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l DocumentReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(DocumentReferenceList)...)
}

func (l DocumentReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DocumentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l DocumentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l DocumentReferenceList) Length() int {
	return len(l)
}

type DocumentParentNameList []*ParentName

func (l DocumentParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l DocumentParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(DocumentParentNameList)...)
}

func (l DocumentParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DocumentParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l DocumentParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l DocumentParentNameList) Length() int {
	return len(l)
}

type DocumentParentReferenceList []*ParentReference

func (l DocumentParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l DocumentParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(DocumentParentReferenceList)...)
}

func (l DocumentParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l DocumentParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l DocumentParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l DocumentParentReferenceList) Length() int {
	return len(l)
}

type DocumentMap map[Name]*Document

func (m DocumentMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m DocumentMap) Set(res gotenresource.Resource) {
	tRes := res.(*Document)
	m[*tRes.Name] = tRes
}

func (m DocumentMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m DocumentMap) Length() int {
	return len(m)
}

func (m DocumentMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type DocumentChangeMap map[Name]*DocumentChange

func (m DocumentChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m DocumentChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*DocumentChange)
	m[*tChange.GetDocumentName()] = tChange
}

func (m DocumentChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m DocumentChangeMap) Length() int {
	return len(m)
}

func (m DocumentChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
