// Code generated by protoc-gen-goten-resource
// Resource: CapabilityTemplate
// DO NOT EDIT!!!

package capability_template

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	chat_model "github.com/cloudwan/edgelq-sdk/ai/resources/v1/chat_model"
	connector "github.com/cloudwan/edgelq-sdk/ai/resources/v1/connector"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &chat_model.ChatModel{}
	_ = &connector.Connector{}
	_ = &iam_project.Project{}
	_ = &meta.Meta{}
)

type CapabilityTemplateList []*CapabilityTemplate

func (l CapabilityTemplateList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*CapabilityTemplate))
}

func (l CapabilityTemplateList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(CapabilityTemplateList)...)
}

func (l CapabilityTemplateList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CapabilityTemplateList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l CapabilityTemplateList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*CapabilityTemplate)
}

func (l CapabilityTemplateList) Length() int {
	return len(l)
}

type CapabilityTemplateChangeList []*CapabilityTemplateChange

func (l CapabilityTemplateChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*CapabilityTemplateChange))
}

func (l CapabilityTemplateChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(CapabilityTemplateChangeList)...)
}

func (l CapabilityTemplateChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CapabilityTemplateChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l CapabilityTemplateChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*CapabilityTemplateChange)
}

func (l CapabilityTemplateChangeList) Length() int {
	return len(l)
}

type CapabilityTemplateNameList []*Name

func (l CapabilityTemplateNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l CapabilityTemplateNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(CapabilityTemplateNameList)...)
}

func (l CapabilityTemplateNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CapabilityTemplateNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l CapabilityTemplateNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l CapabilityTemplateNameList) Length() int {
	return len(l)
}

type CapabilityTemplateReferenceList []*Reference

func (l CapabilityTemplateReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l CapabilityTemplateReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(CapabilityTemplateReferenceList)...)
}

func (l CapabilityTemplateReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CapabilityTemplateReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l CapabilityTemplateReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l CapabilityTemplateReferenceList) Length() int {
	return len(l)
}

type CapabilityTemplateParentNameList []*ParentName

func (l CapabilityTemplateParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l CapabilityTemplateParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(CapabilityTemplateParentNameList)...)
}

func (l CapabilityTemplateParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CapabilityTemplateParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l CapabilityTemplateParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l CapabilityTemplateParentNameList) Length() int {
	return len(l)
}

type CapabilityTemplateParentReferenceList []*ParentReference

func (l CapabilityTemplateParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l CapabilityTemplateParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(CapabilityTemplateParentReferenceList)...)
}

func (l CapabilityTemplateParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CapabilityTemplateParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l CapabilityTemplateParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l CapabilityTemplateParentReferenceList) Length() int {
	return len(l)
}

type CapabilityTemplateMap map[Name]*CapabilityTemplate

func (m CapabilityTemplateMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m CapabilityTemplateMap) Set(res gotenresource.Resource) {
	tRes := res.(*CapabilityTemplate)
	m[*tRes.Name] = tRes
}

func (m CapabilityTemplateMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m CapabilityTemplateMap) Length() int {
	return len(m)
}

func (m CapabilityTemplateMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type CapabilityTemplateChangeMap map[Name]*CapabilityTemplateChange

func (m CapabilityTemplateChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m CapabilityTemplateChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*CapabilityTemplateChange)
	m[*tChange.GetCapabilityTemplateName()] = tChange
}

func (m CapabilityTemplateChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m CapabilityTemplateChangeMap) Length() int {
	return len(m)
}

func (m CapabilityTemplateChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
