// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/capability_template.proto
// DO NOT EDIT!!!

package capability_template

import (
	"encoding/json"
	"strings"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	connector "github.com/cloudwan/edgelq-sdk/ai/resources/v1/connector"
	search_db "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_db"
	search_index "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_index"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &connector.Connector{}
	_ = &search_db.SearchDb{}
	_ = &search_index.SearchIndex{}
	_ = &iam_project.Project{}
	_ = &meta.Meta{}
)

type CapabilityTemplate_FieldMask struct {
	Paths []CapabilityTemplate_FieldPath
}

func FullCapabilityTemplate_FieldMask() *CapabilityTemplate_FieldMask {
	res := &CapabilityTemplate_FieldMask{}
	res.Paths = append(res.Paths, &CapabilityTemplate_FieldTerminalPath{selector: CapabilityTemplate_FieldPathSelectorName})
	res.Paths = append(res.Paths, &CapabilityTemplate_FieldTerminalPath{selector: CapabilityTemplate_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &CapabilityTemplate_FieldTerminalPath{selector: CapabilityTemplate_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &CapabilityTemplate_FieldTerminalPath{selector: CapabilityTemplate_FieldPathSelectorConnectors})
	res.Paths = append(res.Paths, &CapabilityTemplate_FieldTerminalPath{selector: CapabilityTemplate_FieldPathSelectorRagConfig})
	res.Paths = append(res.Paths, &CapabilityTemplate_FieldTerminalPath{selector: CapabilityTemplate_FieldPathSelectorMaxToolRounds})
	res.Paths = append(res.Paths, &CapabilityTemplate_FieldTerminalPath{selector: CapabilityTemplate_FieldPathSelectorDefaultModel})
	res.Paths = append(res.Paths, &CapabilityTemplate_FieldTerminalPath{selector: CapabilityTemplate_FieldPathSelectorDisplayName})
	return res
}

func (fieldMask *CapabilityTemplate_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *CapabilityTemplate_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CapabilityTemplate_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CapabilityTemplate_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCapabilityTemplate_FieldPath(raw)
	})
}

func (fieldMask *CapabilityTemplate_FieldMask) ProtoMessage() {}

func (fieldMask *CapabilityTemplate_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CapabilityTemplate_FieldMask) Subtract(other *CapabilityTemplate_FieldMask) *CapabilityTemplate_FieldMask {
	result := &CapabilityTemplate_FieldMask{}
	removedSelectors := make([]bool, 8)
	otherSubMasks := map[CapabilityTemplate_FieldPathSelector]gotenobject.FieldMask{
		CapabilityTemplate_FieldPathSelectorMetadata:  &meta.Meta_FieldMask{},
		CapabilityTemplate_FieldPathSelectorRagConfig: &RAGConfig_FieldMask{},
	}
	mySubMasks := map[CapabilityTemplate_FieldPathSelector]gotenobject.FieldMask{
		CapabilityTemplate_FieldPathSelectorMetadata:  &meta.Meta_FieldMask{},
		CapabilityTemplate_FieldPathSelectorRagConfig: &RAGConfig_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CapabilityTemplate_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CapabilityTemplate_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CapabilityTemplate_FieldTerminalPath); ok {
					switch tp.selector {
					case CapabilityTemplate_FieldPathSelectorMetadata:
						mySubMasks[CapabilityTemplate_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case CapabilityTemplate_FieldPathSelectorRagConfig:
						mySubMasks[CapabilityTemplate_FieldPathSelectorRagConfig] = FullRAGConfig_FieldMask()
					}
				} else if tp, ok := path.(*CapabilityTemplate_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CapabilityTemplate_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CapabilityTemplate_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CapabilityTemplate_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CapabilityTemplate_FieldMask) FilterInputFields() *CapabilityTemplate_FieldMask {
	result := &CapabilityTemplate_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CapabilityTemplate_FieldPathSelectorMetadata:
			if _, ok := path.(*CapabilityTemplate_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CapabilityTemplate_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CapabilityTemplate_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CapabilityTemplate_FieldSubPath{selector: CapabilityTemplate_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CapabilityTemplate_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CapabilityTemplate_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CapabilityTemplate_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCapabilityTemplate_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CapabilityTemplate_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CapabilityTemplate_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CapabilityTemplate_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CapabilityTemplate_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CapabilityTemplate_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CapabilityTemplate_FieldMask) AppendPath(path CapabilityTemplate_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CapabilityTemplate_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CapabilityTemplate_FieldPath))
}

func (fieldMask *CapabilityTemplate_FieldMask) GetPaths() []CapabilityTemplate_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CapabilityTemplate_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CapabilityTemplate_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCapabilityTemplate_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CapabilityTemplate_FieldMask) Set(target, source *CapabilityTemplate) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CapabilityTemplate_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CapabilityTemplate), source.(*CapabilityTemplate))
}

func (fieldMask *CapabilityTemplate_FieldMask) Project(source *CapabilityTemplate) *CapabilityTemplate {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CapabilityTemplate{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	ragConfigMask := &RAGConfig_FieldMask{}
	wholeRagConfigAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CapabilityTemplate_FieldTerminalPath:
			switch tp.selector {
			case CapabilityTemplate_FieldPathSelectorName:
				result.Name = source.Name
			case CapabilityTemplate_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case CapabilityTemplate_FieldPathSelectorDescription:
				result.Description = source.Description
			case CapabilityTemplate_FieldPathSelectorConnectors:
				result.Connectors = source.Connectors
			case CapabilityTemplate_FieldPathSelectorRagConfig:
				result.RagConfig = source.RagConfig
				wholeRagConfigAccepted = true
			case CapabilityTemplate_FieldPathSelectorMaxToolRounds:
				result.MaxToolRounds = source.MaxToolRounds
			case CapabilityTemplate_FieldPathSelectorDefaultModel:
				result.DefaultModel = source.DefaultModel
			case CapabilityTemplate_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			}
		case *CapabilityTemplate_FieldSubPath:
			switch tp.selector {
			case CapabilityTemplate_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case CapabilityTemplate_FieldPathSelectorRagConfig:
				ragConfigMask.AppendPath(tp.subPath.(RAGConfig_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeRagConfigAccepted == false && len(ragConfigMask.Paths) > 0 {
		result.RagConfig = ragConfigMask.Project(source.GetRagConfig())
	}
	return result
}

func (fieldMask *CapabilityTemplate_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CapabilityTemplate))
}

func (fieldMask *CapabilityTemplate_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type RAGConfig_FieldMask struct {
	Paths []RAGConfig_FieldPath
}

func FullRAGConfig_FieldMask() *RAGConfig_FieldMask {
	res := &RAGConfig_FieldMask{}
	res.Paths = append(res.Paths, &RAGConfig_FieldTerminalPath{selector: RAGConfig_FieldPathSelectorSearchIndices})
	res.Paths = append(res.Paths, &RAGConfig_FieldTerminalPath{selector: RAGConfig_FieldPathSelectorIndexingPolicy})
	res.Paths = append(res.Paths, &RAGConfig_FieldTerminalPath{selector: RAGConfig_FieldPathSelectorRetrievalLimits})
	res.Paths = append(res.Paths, &RAGConfig_FieldTerminalPath{selector: RAGConfig_FieldPathSelectorUseAzureNativeRag})
	return res
}

func (fieldMask *RAGConfig_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *RAGConfig_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RAGConfig_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RAGConfig_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRAGConfig_FieldPath(raw)
	})
}

func (fieldMask *RAGConfig_FieldMask) ProtoMessage() {}

func (fieldMask *RAGConfig_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RAGConfig_FieldMask) Subtract(other *RAGConfig_FieldMask) *RAGConfig_FieldMask {
	result := &RAGConfig_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[RAGConfig_FieldPathSelector]gotenobject.FieldMask{
		RAGConfig_FieldPathSelectorIndexingPolicy:  &IndexingPolicy_FieldMask{},
		RAGConfig_FieldPathSelectorRetrievalLimits: &RetrievalLimits_FieldMask{},
	}
	mySubMasks := map[RAGConfig_FieldPathSelector]gotenobject.FieldMask{
		RAGConfig_FieldPathSelectorIndexingPolicy:  &IndexingPolicy_FieldMask{},
		RAGConfig_FieldPathSelectorRetrievalLimits: &RetrievalLimits_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RAGConfig_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *RAGConfig_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*RAGConfig_FieldTerminalPath); ok {
					switch tp.selector {
					case RAGConfig_FieldPathSelectorIndexingPolicy:
						mySubMasks[RAGConfig_FieldPathSelectorIndexingPolicy] = FullIndexingPolicy_FieldMask()
					case RAGConfig_FieldPathSelectorRetrievalLimits:
						mySubMasks[RAGConfig_FieldPathSelectorRetrievalLimits] = FullRetrievalLimits_FieldMask()
					}
				} else if tp, ok := path.(*RAGConfig_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &RAGConfig_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RAGConfig_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RAGConfig_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RAGConfig_FieldMask) FilterInputFields() *RAGConfig_FieldMask {
	result := &RAGConfig_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RAGConfig_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RAGConfig_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RAGConfig_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRAGConfig_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RAGConfig_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RAGConfig_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RAGConfig_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RAGConfig_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RAGConfig_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RAGConfig_FieldMask) AppendPath(path RAGConfig_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RAGConfig_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RAGConfig_FieldPath))
}

func (fieldMask *RAGConfig_FieldMask) GetPaths() []RAGConfig_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RAGConfig_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RAGConfig_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRAGConfig_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RAGConfig_FieldMask) Set(target, source *RAGConfig) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RAGConfig_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RAGConfig), source.(*RAGConfig))
}

func (fieldMask *RAGConfig_FieldMask) Project(source *RAGConfig) *RAGConfig {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RAGConfig{}
	indexingPolicyMask := &IndexingPolicy_FieldMask{}
	wholeIndexingPolicyAccepted := false
	retrievalLimitsMask := &RetrievalLimits_FieldMask{}
	wholeRetrievalLimitsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RAGConfig_FieldTerminalPath:
			switch tp.selector {
			case RAGConfig_FieldPathSelectorSearchIndices:
				result.SearchIndices = source.SearchIndices
			case RAGConfig_FieldPathSelectorIndexingPolicy:
				result.IndexingPolicy = source.IndexingPolicy
				wholeIndexingPolicyAccepted = true
			case RAGConfig_FieldPathSelectorRetrievalLimits:
				result.RetrievalLimits = source.RetrievalLimits
				wholeRetrievalLimitsAccepted = true
			case RAGConfig_FieldPathSelectorUseAzureNativeRag:
				result.UseAzureNativeRag = source.UseAzureNativeRag
			}
		case *RAGConfig_FieldSubPath:
			switch tp.selector {
			case RAGConfig_FieldPathSelectorIndexingPolicy:
				indexingPolicyMask.AppendPath(tp.subPath.(IndexingPolicy_FieldPath))
			case RAGConfig_FieldPathSelectorRetrievalLimits:
				retrievalLimitsMask.AppendPath(tp.subPath.(RetrievalLimits_FieldPath))
			}
		}
	}
	if wholeIndexingPolicyAccepted == false && len(indexingPolicyMask.Paths) > 0 {
		result.IndexingPolicy = indexingPolicyMask.Project(source.GetIndexingPolicy())
	}
	if wholeRetrievalLimitsAccepted == false && len(retrievalLimitsMask.Paths) > 0 {
		result.RetrievalLimits = retrievalLimitsMask.Project(source.GetRetrievalLimits())
	}
	return result
}

func (fieldMask *RAGConfig_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RAGConfig))
}

func (fieldMask *RAGConfig_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type IndexingPolicy_FieldMask struct {
	Paths []IndexingPolicy_FieldPath
}

func FullIndexingPolicy_FieldMask() *IndexingPolicy_FieldMask {
	res := &IndexingPolicy_FieldMask{}
	res.Paths = append(res.Paths, &IndexingPolicy_FieldTerminalPath{selector: IndexingPolicy_FieldPathSelectorChunkSizeTokens})
	res.Paths = append(res.Paths, &IndexingPolicy_FieldTerminalPath{selector: IndexingPolicy_FieldPathSelectorChunkOverlapTokens})
	res.Paths = append(res.Paths, &IndexingPolicy_FieldTerminalPath{selector: IndexingPolicy_FieldPathSelectorEmbeddingModel})
	res.Paths = append(res.Paths, &IndexingPolicy_FieldTerminalPath{selector: IndexingPolicy_FieldPathSelectorChunkingStrategy})
	return res
}

func (fieldMask *IndexingPolicy_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *IndexingPolicy_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*IndexingPolicy_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *IndexingPolicy_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseIndexingPolicy_FieldPath(raw)
	})
}

func (fieldMask *IndexingPolicy_FieldMask) ProtoMessage() {}

func (fieldMask *IndexingPolicy_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *IndexingPolicy_FieldMask) Subtract(other *IndexingPolicy_FieldMask) *IndexingPolicy_FieldMask {
	result := &IndexingPolicy_FieldMask{}
	removedSelectors := make([]bool, 4)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *IndexingPolicy_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *IndexingPolicy_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*IndexingPolicy_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *IndexingPolicy_FieldMask) FilterInputFields() *IndexingPolicy_FieldMask {
	result := &IndexingPolicy_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *IndexingPolicy_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *IndexingPolicy_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]IndexingPolicy_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseIndexingPolicy_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask IndexingPolicy_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *IndexingPolicy_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *IndexingPolicy_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask IndexingPolicy_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *IndexingPolicy_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *IndexingPolicy_FieldMask) AppendPath(path IndexingPolicy_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *IndexingPolicy_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(IndexingPolicy_FieldPath))
}

func (fieldMask *IndexingPolicy_FieldMask) GetPaths() []IndexingPolicy_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *IndexingPolicy_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *IndexingPolicy_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseIndexingPolicy_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *IndexingPolicy_FieldMask) Set(target, source *IndexingPolicy) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *IndexingPolicy_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*IndexingPolicy), source.(*IndexingPolicy))
}

func (fieldMask *IndexingPolicy_FieldMask) Project(source *IndexingPolicy) *IndexingPolicy {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &IndexingPolicy{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *IndexingPolicy_FieldTerminalPath:
			switch tp.selector {
			case IndexingPolicy_FieldPathSelectorChunkSizeTokens:
				result.ChunkSizeTokens = source.ChunkSizeTokens
			case IndexingPolicy_FieldPathSelectorChunkOverlapTokens:
				result.ChunkOverlapTokens = source.ChunkOverlapTokens
			case IndexingPolicy_FieldPathSelectorEmbeddingModel:
				result.EmbeddingModel = source.EmbeddingModel
			case IndexingPolicy_FieldPathSelectorChunkingStrategy:
				result.ChunkingStrategy = source.ChunkingStrategy
			}
		}
	}
	return result
}

func (fieldMask *IndexingPolicy_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*IndexingPolicy))
}

func (fieldMask *IndexingPolicy_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type RetrievalLimits_FieldMask struct {
	Paths []RetrievalLimits_FieldPath
}

func FullRetrievalLimits_FieldMask() *RetrievalLimits_FieldMask {
	res := &RetrievalLimits_FieldMask{}
	res.Paths = append(res.Paths, &RetrievalLimits_FieldTerminalPath{selector: RetrievalLimits_FieldPathSelectorMaxDocuments})
	res.Paths = append(res.Paths, &RetrievalLimits_FieldTerminalPath{selector: RetrievalLimits_FieldPathSelectorMaxContextTokens})
	res.Paths = append(res.Paths, &RetrievalLimits_FieldTerminalPath{selector: RetrievalLimits_FieldPathSelectorMinRelevanceScore})
	res.Paths = append(res.Paths, &RetrievalLimits_FieldTerminalPath{selector: RetrievalLimits_FieldPathSelectorRequireCitations})
	return res
}

func (fieldMask *RetrievalLimits_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *RetrievalLimits_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RetrievalLimits_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RetrievalLimits_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRetrievalLimits_FieldPath(raw)
	})
}

func (fieldMask *RetrievalLimits_FieldMask) ProtoMessage() {}

func (fieldMask *RetrievalLimits_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RetrievalLimits_FieldMask) Subtract(other *RetrievalLimits_FieldMask) *RetrievalLimits_FieldMask {
	result := &RetrievalLimits_FieldMask{}
	removedSelectors := make([]bool, 4)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RetrievalLimits_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RetrievalLimits_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RetrievalLimits_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RetrievalLimits_FieldMask) FilterInputFields() *RetrievalLimits_FieldMask {
	result := &RetrievalLimits_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RetrievalLimits_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RetrievalLimits_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RetrievalLimits_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRetrievalLimits_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RetrievalLimits_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RetrievalLimits_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RetrievalLimits_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RetrievalLimits_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RetrievalLimits_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RetrievalLimits_FieldMask) AppendPath(path RetrievalLimits_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RetrievalLimits_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RetrievalLimits_FieldPath))
}

func (fieldMask *RetrievalLimits_FieldMask) GetPaths() []RetrievalLimits_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RetrievalLimits_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RetrievalLimits_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRetrievalLimits_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RetrievalLimits_FieldMask) Set(target, source *RetrievalLimits) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RetrievalLimits_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RetrievalLimits), source.(*RetrievalLimits))
}

func (fieldMask *RetrievalLimits_FieldMask) Project(source *RetrievalLimits) *RetrievalLimits {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RetrievalLimits{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RetrievalLimits_FieldTerminalPath:
			switch tp.selector {
			case RetrievalLimits_FieldPathSelectorMaxDocuments:
				result.MaxDocuments = source.MaxDocuments
			case RetrievalLimits_FieldPathSelectorMaxContextTokens:
				result.MaxContextTokens = source.MaxContextTokens
			case RetrievalLimits_FieldPathSelectorMinRelevanceScore:
				result.MinRelevanceScore = source.MinRelevanceScore
			case RetrievalLimits_FieldPathSelectorRequireCitations:
				result.RequireCitations = source.RequireCitations
			}
		}
	}
	return result
}

func (fieldMask *RetrievalLimits_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RetrievalLimits))
}

func (fieldMask *RetrievalLimits_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
