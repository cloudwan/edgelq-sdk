// Code generated by protoc-gen-goten-resource
// Resource change: CapabilityTemplateChange
// DO NOT EDIT!!!

package capability_template

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &fieldmaskpb.FieldMask{}
)

func (c *CapabilityTemplateChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*CapabilityTemplateChange_Added_)
	return ok
}

func (c *CapabilityTemplateChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*CapabilityTemplateChange_Modified_)
	return ok
}

func (c *CapabilityTemplateChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*CapabilityTemplateChange_Current_)
	return ok
}

func (c *CapabilityTemplateChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*CapabilityTemplateChange_Removed_)
	return ok
}

func (c *CapabilityTemplateChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *CapabilityTemplateChange_Added_:
		return cType.Added.ViewIndex
	case *CapabilityTemplateChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *CapabilityTemplateChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *CapabilityTemplateChange_Removed_:
		return cType.Removed.ViewIndex
	case *CapabilityTemplateChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *CapabilityTemplateChange) GetCapabilityTemplate() *CapabilityTemplate {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *CapabilityTemplateChange_Added_:
		return cType.Added.CapabilityTemplate
	case *CapabilityTemplateChange_Modified_:
		return cType.Modified.CapabilityTemplate
	case *CapabilityTemplateChange_Current_:
		return cType.Current.CapabilityTemplate
	case *CapabilityTemplateChange_Removed_:
		return nil
	}
	return nil
}

func (c *CapabilityTemplateChange) GetRawResource() gotenresource.Resource {
	return c.GetCapabilityTemplate()
}

func (c *CapabilityTemplateChange) GetCapabilityTemplateName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *CapabilityTemplateChange_Added_:
		return cType.Added.CapabilityTemplate.GetName()
	case *CapabilityTemplateChange_Modified_:
		return cType.Modified.Name
	case *CapabilityTemplateChange_Current_:
		return cType.Current.CapabilityTemplate.GetName()
	case *CapabilityTemplateChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *CapabilityTemplateChange) GetRawName() gotenresource.Name {
	return c.GetCapabilityTemplateName()
}

func (c *CapabilityTemplateChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &CapabilityTemplateChange_Added_{
		Added: &CapabilityTemplateChange_Added{
			CapabilityTemplate: snapshot.(*CapabilityTemplate),
			ViewIndex:          int32(idx),
		},
	}
}

func (c *CapabilityTemplateChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &CapabilityTemplateChange_Modified_{
		Modified: &CapabilityTemplateChange_Modified{
			Name:               name.(*Name),
			CapabilityTemplate: snapshot.(*CapabilityTemplate),
			PreviousViewIndex:  int32(prevIdx),
			ViewIndex:          int32(newIdx),
		},
	}
}

func (c *CapabilityTemplateChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &CapabilityTemplateChange_Current_{
		Current: &CapabilityTemplateChange_Current{
			CapabilityTemplate: snapshot.(*CapabilityTemplate),
		},
	}
}

func (c *CapabilityTemplateChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &CapabilityTemplateChange_Removed_{
		Removed: &CapabilityTemplateChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
