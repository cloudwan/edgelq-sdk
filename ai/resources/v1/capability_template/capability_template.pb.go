// Code generated by protoc-gen-goten-go
// File: edgelq/ai/proto/v1/capability_template.proto
// DO NOT EDIT!!!

package capability_template

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	common_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/common"
	chat_model "github.com/cloudwan/edgelq-sdk/ai/resources/v1/chat_model"
	connector "github.com/cloudwan/edgelq-sdk/ai/resources/v1/connector"
	search_index "github.com/cloudwan/edgelq-sdk/ai/resources/v1/search_index"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &chat_model.ChatModel{}
	_ = &common_client.Message{}
	_ = &connector.Connector{}
	_ = &search_index.SearchIndex{}
	_ = &iam_project.Project{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Policy for how to handle missing variables during rendering
type PromptMissingVarPolicy int32

const (
	PromptMissingVarPolicy_PROMPT_MISSING_VAR_POLICY_ERROR       PromptMissingVarPolicy = 0
	PromptMissingVarPolicy_PROMPT_MISSING_VAR_POLICY_SKIP_APPEND PromptMissingVarPolicy = 1
)

var (
	PromptMissingVarPolicy_name = map[int32]string{
		0: "PROMPT_MISSING_VAR_POLICY_ERROR",
		1: "PROMPT_MISSING_VAR_POLICY_SKIP_APPEND",
	}

	PromptMissingVarPolicy_value = map[string]int32{
		"PROMPT_MISSING_VAR_POLICY_ERROR":       0,
		"PROMPT_MISSING_VAR_POLICY_SKIP_APPEND": 1,
	}
)

func (x PromptMissingVarPolicy) Enum() *PromptMissingVarPolicy {
	p := new(PromptMissingVarPolicy)
	*p = x
	return p
}

func (x PromptMissingVarPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (PromptMissingVarPolicy) Descriptor() preflect.EnumDescriptor {
	return edgelq_ai_proto_v1_capability_template_proto_enumTypes[0].Descriptor()
}

func (PromptMissingVarPolicy) Type() preflect.EnumType {
	return &edgelq_ai_proto_v1_capability_template_proto_enumTypes[0]
}

func (x PromptMissingVarPolicy) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use PromptMissingVarPolicy.ProtoReflect.Descriptor instead.
func (PromptMissingVarPolicy) EnumDescriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_capability_template_proto_rawDescGZIP(), []int{0}
}

// Variable source mode - determines where template variables come from
// Variables are auto-detected from template text (e.g., {{.userEmail}})
type PromptVariableMode int32

const (
	// Server-provided variables (trusted, from auth context)
	// Rendered text is injected into the system prompt
	// Known server variables: userEmail, projectName
	PromptVariableMode_MODE_SERVER PromptVariableMode = 0
	// Client-provided variables (untrusted, sanitized)
	// Rendered text is injected into the first user message for prompt injection
	// isolation Variables looked up from CreateRequest.prompt_variables map
	PromptVariableMode_MODE_CLIENT PromptVariableMode = 1
)

var (
	PromptVariableMode_name = map[int32]string{
		0: "MODE_SERVER",
		1: "MODE_CLIENT",
	}

	PromptVariableMode_value = map[string]int32{
		"MODE_SERVER": 0,
		"MODE_CLIENT": 1,
	}
)

func (x PromptVariableMode) Enum() *PromptVariableMode {
	p := new(PromptVariableMode)
	*p = x
	return p
}

func (x PromptVariableMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (PromptVariableMode) Descriptor() preflect.EnumDescriptor {
	return edgelq_ai_proto_v1_capability_template_proto_enumTypes[1].Descriptor()
}

func (PromptVariableMode) Type() preflect.EnumType {
	return &edgelq_ai_proto_v1_capability_template_proto_enumTypes[1]
}

func (x PromptVariableMode) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use PromptVariableMode.ProtoReflect.Descriptor instead.
func (PromptVariableMode) EnumDescriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_capability_template_proto_rawDescGZIP(), []int{1}
}

// CapabilityTemplate Resource
type CapabilityTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of CapabilityTemplate
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Human-readable description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Connectors to include
	Connectors []*connector.Reference `protobuf:"bytes,4,rep,customtype=Reference,name=connectors,proto3" json:"connectors,omitempty"`
	// RAG configuration (optional)
	RagConfig *RAGConfig `protobuf:"bytes,5,opt,name=rag_config,json=ragConfig,proto3" json:"rag_config,omitempty"`
	// Human-readable display name
	DisplayName string `protobuf:"bytes,8,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Reasoning/thinking configuration and limits
	Reasoning *ReasoningConfig `protobuf:"bytes,9,opt,name=reasoning,proto3" json:"reasoning,omitempty"`
	// Maximum output tokens (overrides ChatModel's default if set)
	MaxOutputTokens int32 `protobuf:"varint,10,opt,name=max_output_tokens,json=maxOutputTokens,proto3" json:"max_output_tokens,omitempty"`
	// When set, this prompt will be used instead of a default system prompt.
	SystemPrompt string `protobuf:"bytes,11,opt,name=system_prompt,json=systemPrompt,proto3" json:"system_prompt,omitempty"`
	// Optional: a templated append that will be rendered and appended to
	// the base system prompt (or the user input for client provided variables).
	SystemPromptAppend *PromptAppendTemplate `protobuf:"bytes,16,opt,name=system_prompt_append,json=systemPromptAppend,proto3" json:"system_prompt_append,omitempty"`
	// When true, disables Anthropic prompt caching (default: caching enabled)
	DisableInputTokenCache bool `protobuf:"varint,12,opt,name=disable_input_token_cache,json=disableInputTokenCache,proto3" json:"disable_input_token_cache,omitempty"`
	// Allowed chat models for this template (optional)
	// If empty, any model can be used with this template
	// If specified, only models in this list can be used with this template
	// This allows organizations to control which models are used for specific
	// use cases, capabilities, or compliance requirements
	AllowedModels []*chat_model.Reference `protobuf:"bytes,13,rep,customtype=Reference,name=allowed_models,json=allowedModels,proto3" json:"allowed_models,omitempty"`
	// Tool safety configuration for loop detection (optional)
	ToolSafety *ToolSafetyConfig `protobuf:"bytes,14,opt,name=tool_safety,json=toolSafety,proto3" json:"tool_safety,omitempty"`
	// Default model for this template (optional)
	DefaultModel *chat_model.Name `protobuf:"bytes,15,opt,customtype=Name,name=default_model,json=defaultModel,proto3" json:"default_model,omitempty"`
}

func (m *CapabilityTemplate) Reset() {
	*m = CapabilityTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_capability_template_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CapabilityTemplate) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CapabilityTemplate) ProtoMessage() {}

func (m *CapabilityTemplate) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_capability_template_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CapabilityTemplate) GotenMessage() {}

// Deprecated, Use CapabilityTemplate.ProtoReflect.Descriptor instead.
func (*CapabilityTemplate) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_capability_template_proto_rawDescGZIP(), []int{0}
}

func (m *CapabilityTemplate) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CapabilityTemplate) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CapabilityTemplate) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CapabilityTemplate) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CapabilityTemplate) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CapabilityTemplate) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CapabilityTemplate) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CapabilityTemplate) GetConnectors() []*connector.Reference {
	if m != nil {
		return m.Connectors
	}
	return nil
}

func (m *CapabilityTemplate) GetRagConfig() *RAGConfig {
	if m != nil {
		return m.RagConfig
	}
	return nil
}

func (m *CapabilityTemplate) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *CapabilityTemplate) GetReasoning() *ReasoningConfig {
	if m != nil {
		return m.Reasoning
	}
	return nil
}

func (m *CapabilityTemplate) GetMaxOutputTokens() int32 {
	if m != nil {
		return m.MaxOutputTokens
	}
	return int32(0)
}

func (m *CapabilityTemplate) GetSystemPrompt() string {
	if m != nil {
		return m.SystemPrompt
	}
	return ""
}

func (m *CapabilityTemplate) GetSystemPromptAppend() *PromptAppendTemplate {
	if m != nil {
		return m.SystemPromptAppend
	}
	return nil
}

func (m *CapabilityTemplate) GetDisableInputTokenCache() bool {
	if m != nil {
		return m.DisableInputTokenCache
	}
	return false
}

func (m *CapabilityTemplate) GetAllowedModels() []*chat_model.Reference {
	if m != nil {
		return m.AllowedModels
	}
	return nil
}

func (m *CapabilityTemplate) GetToolSafety() *ToolSafetyConfig {
	if m != nil {
		return m.ToolSafety
	}
	return nil
}

func (m *CapabilityTemplate) GetDefaultModel() *chat_model.Name {
	if m != nil {
		return m.DefaultModel
	}
	return nil
}

func (m *CapabilityTemplate) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "CapabilityTemplate"))
	}
	m.Name = fv
}

func (m *CapabilityTemplate) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "CapabilityTemplate"))
	}
	m.Metadata = fv
}

func (m *CapabilityTemplate) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "CapabilityTemplate"))
	}
	m.Description = fv
}

func (m *CapabilityTemplate) SetConnectors(fv []*connector.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Connectors", "CapabilityTemplate"))
	}
	m.Connectors = fv
}

func (m *CapabilityTemplate) SetRagConfig(fv *RAGConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RagConfig", "CapabilityTemplate"))
	}
	m.RagConfig = fv
}

func (m *CapabilityTemplate) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "CapabilityTemplate"))
	}
	m.DisplayName = fv
}

func (m *CapabilityTemplate) SetReasoning(fv *ReasoningConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reasoning", "CapabilityTemplate"))
	}
	m.Reasoning = fv
}

func (m *CapabilityTemplate) SetMaxOutputTokens(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxOutputTokens", "CapabilityTemplate"))
	}
	m.MaxOutputTokens = fv
}

func (m *CapabilityTemplate) SetSystemPrompt(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SystemPrompt", "CapabilityTemplate"))
	}
	m.SystemPrompt = fv
}

func (m *CapabilityTemplate) SetSystemPromptAppend(fv *PromptAppendTemplate) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SystemPromptAppend", "CapabilityTemplate"))
	}
	m.SystemPromptAppend = fv
}

func (m *CapabilityTemplate) SetDisableInputTokenCache(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisableInputTokenCache", "CapabilityTemplate"))
	}
	m.DisableInputTokenCache = fv
}

func (m *CapabilityTemplate) SetAllowedModels(fv []*chat_model.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowedModels", "CapabilityTemplate"))
	}
	m.AllowedModels = fv
}

func (m *CapabilityTemplate) SetToolSafety(fv *ToolSafetyConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ToolSafety", "CapabilityTemplate"))
	}
	m.ToolSafety = fv
}

func (m *CapabilityTemplate) SetDefaultModel(fv *chat_model.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DefaultModel", "CapabilityTemplate"))
	}
	m.DefaultModel = fv
}

// Templated append to the system prompt using Go template syntax ({{.var}})
// The server always renders templates - clients supply variable
// values via CreateRequest.prompt_variables
//
// - Server applies automatic sanitization (8000 chars per value, 64000 chars
// total, control chars stripped)
//
// Example (server variables - auto-detected):
//
//	text: "User: {{.userEmail}}, Project: {{.projectName}}"
//	mode: MODE_SERVER
//	on_missing: PROMPT_MISSING_VAR_POLICY_ERROR
//
// Example (client variables with optional sections):
//
//	text: "Task: {{.task}}{{if .priority}}, Priority: {{.priority}}{{end}}"
//	mode: MODE_CLIENT
//	on_missing: PROMPT_MISSING_VAR_POLICY_SKIP_APPEND
//	// Variables automatically detected: task, priority
//	// Use {{if}} for optional sections instead of defaults
type PromptAppendTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Mode          PromptVariableMode     `protobuf:"varint,2,opt,name=mode,proto3,enum=ntt.ai.v1.PromptVariableMode" json:"mode,omitempty"`
	OnMissing     PromptMissingVarPolicy `protobuf:"varint,3,opt,name=on_missing,json=onMissing,proto3,enum=ntt.ai.v1.PromptMissingVarPolicy" json:"on_missing,omitempty"`
}

func (m *PromptAppendTemplate) Reset() {
	*m = PromptAppendTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_capability_template_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PromptAppendTemplate) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PromptAppendTemplate) ProtoMessage() {}

func (m *PromptAppendTemplate) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_capability_template_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PromptAppendTemplate) GotenMessage() {}

// Deprecated, Use PromptAppendTemplate.ProtoReflect.Descriptor instead.
func (*PromptAppendTemplate) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_capability_template_proto_rawDescGZIP(), []int{1}
}

func (m *PromptAppendTemplate) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PromptAppendTemplate) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PromptAppendTemplate) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PromptAppendTemplate) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PromptAppendTemplate) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *PromptAppendTemplate) GetMode() PromptVariableMode {
	if m != nil {
		return m.Mode
	}
	return PromptVariableMode_MODE_SERVER
}

func (m *PromptAppendTemplate) GetOnMissing() PromptMissingVarPolicy {
	if m != nil {
		return m.OnMissing
	}
	return PromptMissingVarPolicy_PROMPT_MISSING_VAR_POLICY_ERROR
}

func (m *PromptAppendTemplate) SetText(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Text", "PromptAppendTemplate"))
	}
	m.Text = fv
}

func (m *PromptAppendTemplate) SetMode(fv PromptVariableMode) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "PromptAppendTemplate"))
	}
	m.Mode = fv
}

func (m *PromptAppendTemplate) SetOnMissing(fv PromptMissingVarPolicy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OnMissing", "PromptAppendTemplate"))
	}
	m.OnMissing = fv
}

// RAG (Retrieval-Augmented Generation) configuration
type RAGConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Search indices available for RAG tool to search
	SearchIndices []*search_index.Reference `protobuf:"bytes,1,rep,customtype=Reference,name=search_indices,json=searchIndices,proto3" json:"search_indices,omitempty"`
	// Indexing configuration
	IndexingPolicy *IndexingPolicy `protobuf:"bytes,2,opt,name=indexing_policy,json=indexingPolicy,proto3" json:"indexing_policy,omitempty"`
	// Retrieval limits
	RetrievalLimits *RetrievalLimits `protobuf:"bytes,3,opt,name=retrieval_limits,json=retrievalLimits,proto3" json:"retrieval_limits,omitempty"`
	// When true and using Azure OpenAI models, use Azure's native
	// "On Your Data" extensions instead of tool-based RAG.
	// When false, RAG is exposed as "internal.rag.search" tool.
	UseAzureNativeRag bool `protobuf:"varint,4,opt,name=use_azure_native_rag,json=useAzureNativeRag,proto3" json:"use_azure_native_rag,omitempty"`
}

func (m *RAGConfig) Reset() {
	*m = RAGConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_capability_template_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *RAGConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*RAGConfig) ProtoMessage() {}

func (m *RAGConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_capability_template_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*RAGConfig) GotenMessage() {}

// Deprecated, Use RAGConfig.ProtoReflect.Descriptor instead.
func (*RAGConfig) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_capability_template_proto_rawDescGZIP(), []int{2}
}

func (m *RAGConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *RAGConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *RAGConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *RAGConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *RAGConfig) GetSearchIndices() []*search_index.Reference {
	if m != nil {
		return m.SearchIndices
	}
	return nil
}

func (m *RAGConfig) GetIndexingPolicy() *IndexingPolicy {
	if m != nil {
		return m.IndexingPolicy
	}
	return nil
}

func (m *RAGConfig) GetRetrievalLimits() *RetrievalLimits {
	if m != nil {
		return m.RetrievalLimits
	}
	return nil
}

func (m *RAGConfig) GetUseAzureNativeRag() bool {
	if m != nil {
		return m.UseAzureNativeRag
	}
	return false
}

func (m *RAGConfig) SetSearchIndices(fv []*search_index.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SearchIndices", "RAGConfig"))
	}
	m.SearchIndices = fv
}

func (m *RAGConfig) SetIndexingPolicy(fv *IndexingPolicy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IndexingPolicy", "RAGConfig"))
	}
	m.IndexingPolicy = fv
}

func (m *RAGConfig) SetRetrievalLimits(fv *RetrievalLimits) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RetrievalLimits", "RAGConfig"))
	}
	m.RetrievalLimits = fv
}

func (m *RAGConfig) SetUseAzureNativeRag(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UseAzureNativeRag", "RAGConfig"))
	}
	m.UseAzureNativeRag = fv
}

type IndexingPolicy struct {
	state              protoimpl.MessageState
	sizeCache          protoimpl.SizeCache
	unknownFields      protoimpl.UnknownFields
	ChunkSizeTokens    uint32 `protobuf:"varint,1,opt,name=chunk_size_tokens,json=chunkSizeTokens,proto3" json:"chunk_size_tokens,omitempty"`
	ChunkOverlapTokens uint32 `protobuf:"varint,2,opt,name=chunk_overlap_tokens,json=chunkOverlapTokens,proto3" json:"chunk_overlap_tokens,omitempty"`
	EmbeddingModel     string `protobuf:"bytes,3,opt,name=embedding_model,json=embeddingModel,proto3" json:"embedding_model,omitempty"`
	ChunkingStrategy   string `protobuf:"bytes,4,opt,name=chunking_strategy,json=chunkingStrategy,proto3" json:"chunking_strategy,omitempty"`
}

func (m *IndexingPolicy) Reset() {
	*m = IndexingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_capability_template_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *IndexingPolicy) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*IndexingPolicy) ProtoMessage() {}

func (m *IndexingPolicy) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_capability_template_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*IndexingPolicy) GotenMessage() {}

// Deprecated, Use IndexingPolicy.ProtoReflect.Descriptor instead.
func (*IndexingPolicy) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_capability_template_proto_rawDescGZIP(), []int{3}
}

func (m *IndexingPolicy) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *IndexingPolicy) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *IndexingPolicy) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *IndexingPolicy) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *IndexingPolicy) GetChunkSizeTokens() uint32 {
	if m != nil {
		return m.ChunkSizeTokens
	}
	return uint32(0)
}

func (m *IndexingPolicy) GetChunkOverlapTokens() uint32 {
	if m != nil {
		return m.ChunkOverlapTokens
	}
	return uint32(0)
}

func (m *IndexingPolicy) GetEmbeddingModel() string {
	if m != nil {
		return m.EmbeddingModel
	}
	return ""
}

func (m *IndexingPolicy) GetChunkingStrategy() string {
	if m != nil {
		return m.ChunkingStrategy
	}
	return ""
}

func (m *IndexingPolicy) SetChunkSizeTokens(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChunkSizeTokens", "IndexingPolicy"))
	}
	m.ChunkSizeTokens = fv
}

func (m *IndexingPolicy) SetChunkOverlapTokens(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChunkOverlapTokens", "IndexingPolicy"))
	}
	m.ChunkOverlapTokens = fv
}

func (m *IndexingPolicy) SetEmbeddingModel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EmbeddingModel", "IndexingPolicy"))
	}
	m.EmbeddingModel = fv
}

func (m *IndexingPolicy) SetChunkingStrategy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChunkingStrategy", "IndexingPolicy"))
	}
	m.ChunkingStrategy = fv
}

type RetrievalLimits struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	MaxDocuments      uint32  `protobuf:"varint,1,opt,name=max_documents,json=maxDocuments,proto3" json:"max_documents,omitempty"`
	MaxContextTokens  uint32  `protobuf:"varint,2,opt,name=max_context_tokens,json=maxContextTokens,proto3" json:"max_context_tokens,omitempty"`
	MinRelevanceScore float32 `protobuf:"fixed32,3,opt,name=min_relevance_score,json=minRelevanceScore,proto3" json:"min_relevance_score,omitempty"`
	RequireCitations  bool    `protobuf:"varint,4,opt,name=require_citations,json=requireCitations,proto3" json:"require_citations,omitempty"`
}

func (m *RetrievalLimits) Reset() {
	*m = RetrievalLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_capability_template_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *RetrievalLimits) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*RetrievalLimits) ProtoMessage() {}

func (m *RetrievalLimits) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_capability_template_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*RetrievalLimits) GotenMessage() {}

// Deprecated, Use RetrievalLimits.ProtoReflect.Descriptor instead.
func (*RetrievalLimits) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_capability_template_proto_rawDescGZIP(), []int{4}
}

func (m *RetrievalLimits) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *RetrievalLimits) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *RetrievalLimits) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *RetrievalLimits) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *RetrievalLimits) GetMaxDocuments() uint32 {
	if m != nil {
		return m.MaxDocuments
	}
	return uint32(0)
}

func (m *RetrievalLimits) GetMaxContextTokens() uint32 {
	if m != nil {
		return m.MaxContextTokens
	}
	return uint32(0)
}

func (m *RetrievalLimits) GetMinRelevanceScore() float32 {
	if m != nil {
		return m.MinRelevanceScore
	}
	return float32(0)
}

func (m *RetrievalLimits) GetRequireCitations() bool {
	if m != nil {
		return m.RequireCitations
	}
	return false
}

func (m *RetrievalLimits) SetMaxDocuments(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxDocuments", "RetrievalLimits"))
	}
	m.MaxDocuments = fv
}

func (m *RetrievalLimits) SetMaxContextTokens(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxContextTokens", "RetrievalLimits"))
	}
	m.MaxContextTokens = fv
}

func (m *RetrievalLimits) SetMinRelevanceScore(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MinRelevanceScore", "RetrievalLimits"))
	}
	m.MinRelevanceScore = fv
}

func (m *RetrievalLimits) SetRequireCitations(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequireCitations", "RetrievalLimits"))
	}
	m.RequireCitations = fv
}

// Reasoning configuration for AI models
type ReasoningConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Maximum allowed reasoning level for requests using this template
	MaxLevel common_client.ReasoningLevel `protobuf:"varint,1,opt,name=max_level,json=maxLevel,proto3,enum=ntt.ai.v1.ReasoningLevel" json:"max_level,omitempty"`
	// Default level if not specified in request
	DefaultLevel common_client.ReasoningLevel `protobuf:"varint,2,opt,name=default_level,json=defaultLevel,proto3,enum=ntt.ai.v1.ReasoningLevel" json:"default_level,omitempty"`
}

func (m *ReasoningConfig) Reset() {
	*m = ReasoningConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_capability_template_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ReasoningConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ReasoningConfig) ProtoMessage() {}

func (m *ReasoningConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_capability_template_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ReasoningConfig) GotenMessage() {}

// Deprecated, Use ReasoningConfig.ProtoReflect.Descriptor instead.
func (*ReasoningConfig) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_capability_template_proto_rawDescGZIP(), []int{5}
}

func (m *ReasoningConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ReasoningConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ReasoningConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ReasoningConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ReasoningConfig) GetMaxLevel() common_client.ReasoningLevel {
	if m != nil {
		return m.MaxLevel
	}
	return common_client.ReasoningLevel_REASONING_LEVEL_DEFAULT
}

func (m *ReasoningConfig) GetDefaultLevel() common_client.ReasoningLevel {
	if m != nil {
		return m.DefaultLevel
	}
	return common_client.ReasoningLevel_REASONING_LEVEL_DEFAULT
}

func (m *ReasoningConfig) SetMaxLevel(fv common_client.ReasoningLevel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxLevel", "ReasoningConfig"))
	}
	m.MaxLevel = fv
}

func (m *ReasoningConfig) SetDefaultLevel(fv common_client.ReasoningLevel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DefaultLevel", "ReasoningConfig"))
	}
	m.DefaultLevel = fv
}

// Tool safety configuration for loop detection
type ToolSafetyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Maximum consecutive tool-calling assistant messages (default: 20)
	// This detects infinite tool loops, NOT total tool usage.
	// Counter resets when assistant message doesn't contain tool calls.
	// Example: 20 consecutive turns with tools → blocked
	//          19 turns with tools + 1 text-only turn + 19 more → allowed
	MaxConsecutiveToolCalls uint32 `protobuf:"varint,1,opt,name=max_consecutive_tool_calls,json=maxConsecutiveToolCalls,proto3" json:"max_consecutive_tool_calls,omitempty"`
	// Maximum consecutive identical tool+args calls (default: 3)
	// This detects stuck loops where same tool+args is called repeatedly.
	// Example: search_docs("query") called 3 times in a row → blocked
	//          search_docs("query1"), search_docs("query2"), ... → allowed
	MaxConsecutiveIdenticalToolCalls uint32 `protobuf:"varint,2,opt,name=max_consecutive_identical_tool_calls,json=maxConsecutiveIdenticalToolCalls,proto3" json:"max_consecutive_identical_tool_calls,omitempty"`
	// Maximum consecutive calls to the same tool name (default: 6)
	// Similar to the identical check but ignores arguments, only tool names.
	// Example: search_docs("q1"), search_docs("q2"), ... (same tool name) →
	// blocked
	//          weather_lookup(...), search_docs(...), weather_lookup(...) →
	//          allowed
	MaxConsecutiveSameToolCalls uint32 `protobuf:"varint,3,opt,name=max_consecutive_same_tool_calls,json=maxConsecutiveSameToolCalls,proto3" json:"max_consecutive_same_tool_calls,omitempty"`
}

func (m *ToolSafetyConfig) Reset() {
	*m = ToolSafetyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_capability_template_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ToolSafetyConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ToolSafetyConfig) ProtoMessage() {}

func (m *ToolSafetyConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_capability_template_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ToolSafetyConfig) GotenMessage() {}

// Deprecated, Use ToolSafetyConfig.ProtoReflect.Descriptor instead.
func (*ToolSafetyConfig) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_capability_template_proto_rawDescGZIP(), []int{6}
}

func (m *ToolSafetyConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ToolSafetyConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ToolSafetyConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ToolSafetyConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ToolSafetyConfig) GetMaxConsecutiveToolCalls() uint32 {
	if m != nil {
		return m.MaxConsecutiveToolCalls
	}
	return uint32(0)
}

func (m *ToolSafetyConfig) GetMaxConsecutiveIdenticalToolCalls() uint32 {
	if m != nil {
		return m.MaxConsecutiveIdenticalToolCalls
	}
	return uint32(0)
}

func (m *ToolSafetyConfig) GetMaxConsecutiveSameToolCalls() uint32 {
	if m != nil {
		return m.MaxConsecutiveSameToolCalls
	}
	return uint32(0)
}

func (m *ToolSafetyConfig) SetMaxConsecutiveToolCalls(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxConsecutiveToolCalls", "ToolSafetyConfig"))
	}
	m.MaxConsecutiveToolCalls = fv
}

func (m *ToolSafetyConfig) SetMaxConsecutiveIdenticalToolCalls(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxConsecutiveIdenticalToolCalls", "ToolSafetyConfig"))
	}
	m.MaxConsecutiveIdenticalToolCalls = fv
}

func (m *ToolSafetyConfig) SetMaxConsecutiveSameToolCalls(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxConsecutiveSameToolCalls", "ToolSafetyConfig"))
	}
	m.MaxConsecutiveSameToolCalls = fv
}

var edgelq_ai_proto_v1_capability_template_proto preflect.FileDescriptor

var edgelq_ai_proto_v1_capability_template_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61,
	0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x08, 0x0a, 0x12, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xb2, 0xda, 0x21, 0x16, 0x0a, 0x14, 0x0a, 0x12, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xb2, 0xda, 0x21, 0x0f, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x61, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x41, 0x47, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x09, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80, 0x01, 0x68,
	0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x19,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x13, 0xb2, 0xda, 0x21, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x10, 0x01, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x53, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x0a, 0x0b,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0xf7, 0x01, 0xea, 0x41, 0x8b, 0x01,
	0x0a, 0x20, 0x61, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x7d, 0x12, 0x3c, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x7d, 0x92, 0xd9, 0x21, 0x58, 0x0a,
	0x13, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x13, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x12, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x6f, 0x6e, 0x65, 0x1a, 0x16, 0x69,
	0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x05, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22,
	0x9f, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x40, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x22, 0x85, 0x02, 0x0a, 0x09, 0x52, 0x41, 0x47, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3c, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x01, 0x52, 0x0d,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61,
	0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x73, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x67, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0xe5, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x6f, 0x6c, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x20, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x53, 0x61, 0x6d, 0x65, 0x54,
	0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x2a, 0x68, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x4d, 0x50,
	0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x52, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44,
	0x10, 0x01, 0x2a, 0x36, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x42, 0xbf, 0x02, 0xe8, 0xde, 0x21,
	0x01, 0xd2, 0xff, 0xd0, 0x02, 0x57, 0x0a, 0x19, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0xa2, 0x80, 0xd1,
	0x02, 0x59, 0x0a, 0x1a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x17, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3b, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_ai_proto_v1_capability_template_proto_rawDescOnce sync.Once
	edgelq_ai_proto_v1_capability_template_proto_rawDescData = edgelq_ai_proto_v1_capability_template_proto_rawDesc
)

func edgelq_ai_proto_v1_capability_template_proto_rawDescGZIP() []byte {
	edgelq_ai_proto_v1_capability_template_proto_rawDescOnce.Do(func() {
		edgelq_ai_proto_v1_capability_template_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_ai_proto_v1_capability_template_proto_rawDescData)
	})
	return edgelq_ai_proto_v1_capability_template_proto_rawDescData
}

var edgelq_ai_proto_v1_capability_template_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var edgelq_ai_proto_v1_capability_template_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var edgelq_ai_proto_v1_capability_template_proto_goTypes = []interface{}{
	(PromptMissingVarPolicy)(0),       // 0: ntt.ai.v1.PromptMissingVarPolicy
	(PromptVariableMode)(0),           // 1: ntt.ai.v1.PromptVariableMode
	(*CapabilityTemplate)(nil),        // 2: ntt.ai.v1.CapabilityTemplate
	(*PromptAppendTemplate)(nil),      // 3: ntt.ai.v1.PromptAppendTemplate
	(*RAGConfig)(nil),                 // 4: ntt.ai.v1.RAGConfig
	(*IndexingPolicy)(nil),            // 5: ntt.ai.v1.IndexingPolicy
	(*RetrievalLimits)(nil),           // 6: ntt.ai.v1.RetrievalLimits
	(*ReasoningConfig)(nil),           // 7: ntt.ai.v1.ReasoningConfig
	(*ToolSafetyConfig)(nil),          // 8: ntt.ai.v1.ToolSafetyConfig
	(*meta.Meta)(nil),                 // 9: goten.types.Meta
	(common_client.ReasoningLevel)(0), // 10: ntt.ai.v1.ReasoningLevel
}
var edgelq_ai_proto_v1_capability_template_proto_depIdxs = []int32{
	9,  // 0: ntt.ai.v1.CapabilityTemplate.metadata:type_name -> goten.types.Meta
	4,  // 1: ntt.ai.v1.CapabilityTemplate.rag_config:type_name -> ntt.ai.v1.RAGConfig
	7,  // 2: ntt.ai.v1.CapabilityTemplate.reasoning:type_name -> ntt.ai.v1.ReasoningConfig
	3,  // 3: ntt.ai.v1.CapabilityTemplate.system_prompt_append:type_name -> ntt.ai.v1.PromptAppendTemplate
	8,  // 4: ntt.ai.v1.CapabilityTemplate.tool_safety:type_name -> ntt.ai.v1.ToolSafetyConfig
	1,  // 5: ntt.ai.v1.PromptAppendTemplate.mode:type_name -> ntt.ai.v1.PromptVariableMode
	0,  // 6: ntt.ai.v1.PromptAppendTemplate.on_missing:type_name -> ntt.ai.v1.PromptMissingVarPolicy
	5,  // 7: ntt.ai.v1.RAGConfig.indexing_policy:type_name -> ntt.ai.v1.IndexingPolicy
	6,  // 8: ntt.ai.v1.RAGConfig.retrieval_limits:type_name -> ntt.ai.v1.RetrievalLimits
	10, // 9: ntt.ai.v1.ReasoningConfig.max_level:type_name -> ntt.ai.v1.ReasoningLevel
	10, // 10: ntt.ai.v1.ReasoningConfig.default_level:type_name -> ntt.ai.v1.ReasoningLevel
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { edgelq_ai_proto_v1_capability_template_proto_init() }
func edgelq_ai_proto_v1_capability_template_proto_init() {
	if edgelq_ai_proto_v1_capability_template_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_ai_proto_v1_capability_template_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_capability_template_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromptAppendTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_capability_template_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RAGConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_capability_template_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_capability_template_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrievalLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_capability_template_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReasoningConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_capability_template_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolSafetyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_ai_proto_v1_capability_template_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_ai_proto_v1_capability_template_proto_goTypes,
		DependencyIndexes: edgelq_ai_proto_v1_capability_template_proto_depIdxs,
		EnumInfos:         edgelq_ai_proto_v1_capability_template_proto_enumTypes,
		MessageInfos:      edgelq_ai_proto_v1_capability_template_proto_msgTypes,
	}.Build()
	edgelq_ai_proto_v1_capability_template_proto = out.File
	edgelq_ai_proto_v1_capability_template_proto_rawDesc = nil
	edgelq_ai_proto_v1_capability_template_proto_goTypes = nil
	edgelq_ai_proto_v1_capability_template_proto_depIdxs = nil
}
