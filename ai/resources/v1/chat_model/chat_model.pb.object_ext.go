// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/chat_model.proto
// DO NOT EDIT!!!

package chat_model

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	money "google.golang.org/genproto/googleapis/type/money"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &money.Money{}
	_ = &meta.Meta{}
)

func (o *ChatModel) GotenObjectExt() {}

func (o *ChatModel) MakeFullFieldMask() *ChatModel_FieldMask {
	return FullChatModel_FieldMask()
}

func (o *ChatModel) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullChatModel_FieldMask()
}

func (o *ChatModel) MakeDiffFieldMask(other *ChatModel) *ChatModel_FieldMask {
	if o == nil && other == nil {
		return &ChatModel_FieldMask{}
	}
	if o == nil || other == nil {
		return FullChatModel_FieldMask()
	}

	res := &ChatModel_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ChatModel_FieldSubPath{selector: ChatModel_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	{
		_, leftSelected := o.Provider.(*ChatModel_AzureOpenAi_)
		_, rightSelected := other.Provider.(*ChatModel_AzureOpenAi_)
		if leftSelected == rightSelected {
			subMask := o.GetAzureOpenAi().MakeDiffFieldMask(other.GetAzureOpenAi())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorAzureOpenAi})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &ChatModel_FieldSubPath{selector: ChatModel_FieldPathSelectorAzureOpenAi, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorAzureOpenAi})
		}
	}
	{
		_, leftSelected := o.Provider.(*ChatModel_OpenaiCompatible)
		_, rightSelected := other.Provider.(*ChatModel_OpenaiCompatible)
		if leftSelected == rightSelected {
			subMask := o.GetOpenaiCompatible().MakeDiffFieldMask(other.GetOpenaiCompatible())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorOpenaiCompatible})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &ChatModel_FieldSubPath{selector: ChatModel_FieldPathSelectorOpenaiCompatible, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorOpenaiCompatible})
		}
	}
	{
		_, leftSelected := o.Provider.(*ChatModel_Anthropic_)
		_, rightSelected := other.Provider.(*ChatModel_Anthropic_)
		if leftSelected == rightSelected {
			subMask := o.GetAnthropic().MakeDiffFieldMask(other.GetAnthropic())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorAnthropic})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &ChatModel_FieldSubPath{selector: ChatModel_FieldPathSelectorAnthropic, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorAnthropic})
		}
	}
	{
		_, leftSelected := o.Provider.(*ChatModel_Gemini_)
		_, rightSelected := other.Provider.(*ChatModel_Gemini_)
		if leftSelected == rightSelected {
			subMask := o.GetGemini().MakeDiffFieldMask(other.GetGemini())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorGemini})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &ChatModel_FieldSubPath{selector: ChatModel_FieldPathSelectorGemini, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorGemini})
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorDisplayName})
	}
	{
		subMask := o.GetCost().MakeDiffFieldMask(other.GetCost())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorCost})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ChatModel_FieldSubPath{selector: ChatModel_FieldPathSelectorCost, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ChatModel) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ChatModel))
}

func (o *ChatModel) Clone() *ChatModel {
	if o == nil {
		return nil
	}
	result := &ChatModel{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	if o, ok := o.Provider.(*ChatModel_AzureOpenAi_); ok {
		result.Provider = (*ChatModel_AzureOpenAi_)(nil)
		if o != nil {
			result.Provider = &ChatModel_AzureOpenAi_{}
			result := result.Provider.(*ChatModel_AzureOpenAi_)
			result.AzureOpenAi = o.AzureOpenAi.Clone()
		}
	}
	if o, ok := o.Provider.(*ChatModel_OpenaiCompatible); ok {
		result.Provider = (*ChatModel_OpenaiCompatible)(nil)
		if o != nil {
			result.Provider = &ChatModel_OpenaiCompatible{}
			result := result.Provider.(*ChatModel_OpenaiCompatible)
			result.OpenaiCompatible = o.OpenaiCompatible.Clone()
		}
	}
	if o, ok := o.Provider.(*ChatModel_Anthropic_); ok {
		result.Provider = (*ChatModel_Anthropic_)(nil)
		if o != nil {
			result.Provider = &ChatModel_Anthropic_{}
			result := result.Provider.(*ChatModel_Anthropic_)
			result.Anthropic = o.Anthropic.Clone()
		}
	}
	if o, ok := o.Provider.(*ChatModel_Gemini_); ok {
		result.Provider = (*ChatModel_Gemini_)(nil)
		if o != nil {
			result.Provider = &ChatModel_Gemini_{}
			result := result.Provider.(*ChatModel_Gemini_)
			result.Gemini = o.Gemini.Clone()
		}
	}
	result.DisplayName = o.DisplayName
	result.Cost = o.Cost.Clone()
	return result
}

func (o *ChatModel) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ChatModel) Merge(source *ChatModel) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source, ok := source.GetProvider().(*ChatModel_AzureOpenAi_); ok {
		if dstOneOf, ok := o.Provider.(*ChatModel_AzureOpenAi_); !ok || dstOneOf == nil {
			o.Provider = &ChatModel_AzureOpenAi_{}
		}
		if source != nil {
			o := o.Provider.(*ChatModel_AzureOpenAi_)
			if source.AzureOpenAi != nil {
				if o.AzureOpenAi == nil {
					o.AzureOpenAi = new(ChatModel_AzureOpenAi)
				}
				o.AzureOpenAi.Merge(source.AzureOpenAi)
			}
		}
	}
	if source, ok := source.GetProvider().(*ChatModel_OpenaiCompatible); ok {
		if dstOneOf, ok := o.Provider.(*ChatModel_OpenaiCompatible); !ok || dstOneOf == nil {
			o.Provider = &ChatModel_OpenaiCompatible{}
		}
		if source != nil {
			o := o.Provider.(*ChatModel_OpenaiCompatible)
			if source.OpenaiCompatible != nil {
				if o.OpenaiCompatible == nil {
					o.OpenaiCompatible = new(ChatModel_OpenAICompatible)
				}
				o.OpenaiCompatible.Merge(source.OpenaiCompatible)
			}
		}
	}
	if source, ok := source.GetProvider().(*ChatModel_Anthropic_); ok {
		if dstOneOf, ok := o.Provider.(*ChatModel_Anthropic_); !ok || dstOneOf == nil {
			o.Provider = &ChatModel_Anthropic_{}
		}
		if source != nil {
			o := o.Provider.(*ChatModel_Anthropic_)
			if source.Anthropic != nil {
				if o.Anthropic == nil {
					o.Anthropic = new(ChatModel_Anthropic)
				}
				o.Anthropic.Merge(source.Anthropic)
			}
		}
	}
	if source, ok := source.GetProvider().(*ChatModel_Gemini_); ok {
		if dstOneOf, ok := o.Provider.(*ChatModel_Gemini_); !ok || dstOneOf == nil {
			o.Provider = &ChatModel_Gemini_{}
		}
		if source != nil {
			o := o.Provider.(*ChatModel_Gemini_)
			if source.Gemini != nil {
				if o.Gemini == nil {
					o.Gemini = new(ChatModel_Gemini)
				}
				o.Gemini.Merge(source.Gemini)
			}
		}
	}
	o.DisplayName = source.GetDisplayName()
	if source.GetCost() != nil {
		if o.Cost == nil {
			o.Cost = new(ChatModel_Cost)
		}
		o.Cost.Merge(source.GetCost())
	}
}

func (o *ChatModel) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ChatModel))
}

func (o *ChatModel_OpenAICompatible) GotenObjectExt() {}

func (o *ChatModel_OpenAICompatible) MakeFullFieldMask() *ChatModel_OpenAICompatible_FieldMask {
	return FullChatModel_OpenAICompatible_FieldMask()
}

func (o *ChatModel_OpenAICompatible) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullChatModel_OpenAICompatible_FieldMask()
}

func (o *ChatModel_OpenAICompatible) MakeDiffFieldMask(other *ChatModel_OpenAICompatible) *ChatModel_OpenAICompatible_FieldMask {
	if o == nil && other == nil {
		return &ChatModel_OpenAICompatible_FieldMask{}
	}
	if o == nil || other == nil {
		return FullChatModel_OpenAICompatible_FieldMask()
	}

	res := &ChatModel_OpenAICompatible_FieldMask{}
	if o.GetApiKey().String() != other.GetApiKey().String() {
		res.Paths = append(res.Paths, &ChatModelOpenAICompatible_FieldTerminalPath{selector: ChatModelOpenAICompatible_FieldPathSelectorApiKey})
	}
	if o.GetModel() != other.GetModel() {
		res.Paths = append(res.Paths, &ChatModelOpenAICompatible_FieldTerminalPath{selector: ChatModelOpenAICompatible_FieldPathSelectorModel})
	}
	if o.GetBaseUrl() != other.GetBaseUrl() {
		res.Paths = append(res.Paths, &ChatModelOpenAICompatible_FieldTerminalPath{selector: ChatModelOpenAICompatible_FieldPathSelectorBaseUrl})
	}
	if o.GetOrganization() != other.GetOrganization() {
		res.Paths = append(res.Paths, &ChatModelOpenAICompatible_FieldTerminalPath{selector: ChatModelOpenAICompatible_FieldPathSelectorOrganization})
	}
	if o.GetAzureEndpoint() != other.GetAzureEndpoint() {
		res.Paths = append(res.Paths, &ChatModelOpenAICompatible_FieldTerminalPath{selector: ChatModelOpenAICompatible_FieldPathSelectorAzureEndpoint})
	}
	if o.GetAzureApiVersion() != other.GetAzureApiVersion() {
		res.Paths = append(res.Paths, &ChatModelOpenAICompatible_FieldTerminalPath{selector: ChatModelOpenAICompatible_FieldPathSelectorAzureApiVersion})
	}
	if o.GetMaxOutputTokens() != other.GetMaxOutputTokens() {
		res.Paths = append(res.Paths, &ChatModelOpenAICompatible_FieldTerminalPath{selector: ChatModelOpenAICompatible_FieldPathSelectorMaxOutputTokens})
	}
	return res
}

func (o *ChatModel_OpenAICompatible) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ChatModel_OpenAICompatible))
}

func (o *ChatModel_OpenAICompatible) Clone() *ChatModel_OpenAICompatible {
	if o == nil {
		return nil
	}
	result := &ChatModel_OpenAICompatible{}
	if o.ApiKey == nil {
		result.ApiKey = nil
	} else if data, err := o.ApiKey.ProtoString(); err != nil {
		panic(err)
	} else {
		result.ApiKey = &secrets_secret.Reference{}
		if err := result.ApiKey.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Model = o.Model
	result.BaseUrl = o.BaseUrl
	result.Organization = o.Organization
	result.AzureEndpoint = o.AzureEndpoint
	result.AzureApiVersion = o.AzureApiVersion
	result.MaxOutputTokens = o.MaxOutputTokens
	return result
}

func (o *ChatModel_OpenAICompatible) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ChatModel_OpenAICompatible) Merge(source *ChatModel_OpenAICompatible) {
	if source.GetApiKey() != nil {
		if data, err := source.GetApiKey().ProtoString(); err != nil {
			panic(err)
		} else {
			o.ApiKey = &secrets_secret.Reference{}
			if err := o.ApiKey.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.ApiKey = nil
	}
	o.Model = source.GetModel()
	o.BaseUrl = source.GetBaseUrl()
	o.Organization = source.GetOrganization()
	o.AzureEndpoint = source.GetAzureEndpoint()
	o.AzureApiVersion = source.GetAzureApiVersion()
	o.MaxOutputTokens = source.GetMaxOutputTokens()
}

func (o *ChatModel_OpenAICompatible) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ChatModel_OpenAICompatible))
}

func (o *ChatModel_Anthropic) GotenObjectExt() {}

func (o *ChatModel_Anthropic) MakeFullFieldMask() *ChatModel_Anthropic_FieldMask {
	return FullChatModel_Anthropic_FieldMask()
}

func (o *ChatModel_Anthropic) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullChatModel_Anthropic_FieldMask()
}

func (o *ChatModel_Anthropic) MakeDiffFieldMask(other *ChatModel_Anthropic) *ChatModel_Anthropic_FieldMask {
	if o == nil && other == nil {
		return &ChatModel_Anthropic_FieldMask{}
	}
	if o == nil || other == nil {
		return FullChatModel_Anthropic_FieldMask()
	}

	res := &ChatModel_Anthropic_FieldMask{}
	if o.GetApiKey().String() != other.GetApiKey().String() {
		res.Paths = append(res.Paths, &ChatModelAnthropic_FieldTerminalPath{selector: ChatModelAnthropic_FieldPathSelectorApiKey})
	}
	if o.GetModel() != other.GetModel() {
		res.Paths = append(res.Paths, &ChatModelAnthropic_FieldTerminalPath{selector: ChatModelAnthropic_FieldPathSelectorModel})
	}
	if o.GetBaseUrl() != other.GetBaseUrl() {
		res.Paths = append(res.Paths, &ChatModelAnthropic_FieldTerminalPath{selector: ChatModelAnthropic_FieldPathSelectorBaseUrl})
	}
	if o.GetMaxOutputTokens() != other.GetMaxOutputTokens() {
		res.Paths = append(res.Paths, &ChatModelAnthropic_FieldTerminalPath{selector: ChatModelAnthropic_FieldPathSelectorMaxOutputTokens})
	}
	return res
}

func (o *ChatModel_Anthropic) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ChatModel_Anthropic))
}

func (o *ChatModel_Anthropic) Clone() *ChatModel_Anthropic {
	if o == nil {
		return nil
	}
	result := &ChatModel_Anthropic{}
	if o.ApiKey == nil {
		result.ApiKey = nil
	} else if data, err := o.ApiKey.ProtoString(); err != nil {
		panic(err)
	} else {
		result.ApiKey = &secrets_secret.Reference{}
		if err := result.ApiKey.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Model = o.Model
	result.BaseUrl = o.BaseUrl
	result.MaxOutputTokens = o.MaxOutputTokens
	return result
}

func (o *ChatModel_Anthropic) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ChatModel_Anthropic) Merge(source *ChatModel_Anthropic) {
	if source.GetApiKey() != nil {
		if data, err := source.GetApiKey().ProtoString(); err != nil {
			panic(err)
		} else {
			o.ApiKey = &secrets_secret.Reference{}
			if err := o.ApiKey.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.ApiKey = nil
	}
	o.Model = source.GetModel()
	o.BaseUrl = source.GetBaseUrl()
	o.MaxOutputTokens = source.GetMaxOutputTokens()
}

func (o *ChatModel_Anthropic) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ChatModel_Anthropic))
}

func (o *ChatModel_Gemini) GotenObjectExt() {}

func (o *ChatModel_Gemini) MakeFullFieldMask() *ChatModel_Gemini_FieldMask {
	return FullChatModel_Gemini_FieldMask()
}

func (o *ChatModel_Gemini) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullChatModel_Gemini_FieldMask()
}

func (o *ChatModel_Gemini) MakeDiffFieldMask(other *ChatModel_Gemini) *ChatModel_Gemini_FieldMask {
	if o == nil && other == nil {
		return &ChatModel_Gemini_FieldMask{}
	}
	if o == nil || other == nil {
		return FullChatModel_Gemini_FieldMask()
	}

	res := &ChatModel_Gemini_FieldMask{}
	if o.GetApiKey().String() != other.GetApiKey().String() {
		res.Paths = append(res.Paths, &ChatModelGemini_FieldTerminalPath{selector: ChatModelGemini_FieldPathSelectorApiKey})
	}
	if o.GetModel() != other.GetModel() {
		res.Paths = append(res.Paths, &ChatModelGemini_FieldTerminalPath{selector: ChatModelGemini_FieldPathSelectorModel})
	}
	if o.GetMaxOutputTokens() != other.GetMaxOutputTokens() {
		res.Paths = append(res.Paths, &ChatModelGemini_FieldTerminalPath{selector: ChatModelGemini_FieldPathSelectorMaxOutputTokens})
	}
	return res
}

func (o *ChatModel_Gemini) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ChatModel_Gemini))
}

func (o *ChatModel_Gemini) Clone() *ChatModel_Gemini {
	if o == nil {
		return nil
	}
	result := &ChatModel_Gemini{}
	if o.ApiKey == nil {
		result.ApiKey = nil
	} else if data, err := o.ApiKey.ProtoString(); err != nil {
		panic(err)
	} else {
		result.ApiKey = &secrets_secret.Reference{}
		if err := result.ApiKey.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Model = o.Model
	result.MaxOutputTokens = o.MaxOutputTokens
	return result
}

func (o *ChatModel_Gemini) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ChatModel_Gemini) Merge(source *ChatModel_Gemini) {
	if source.GetApiKey() != nil {
		if data, err := source.GetApiKey().ProtoString(); err != nil {
			panic(err)
		} else {
			o.ApiKey = &secrets_secret.Reference{}
			if err := o.ApiKey.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.ApiKey = nil
	}
	o.Model = source.GetModel()
	o.MaxOutputTokens = source.GetMaxOutputTokens()
}

func (o *ChatModel_Gemini) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ChatModel_Gemini))
}

func (o *ChatModel_AzureOpenAi) GotenObjectExt() {}

func (o *ChatModel_AzureOpenAi) MakeFullFieldMask() *ChatModel_AzureOpenAi_FieldMask {
	return FullChatModel_AzureOpenAi_FieldMask()
}

func (o *ChatModel_AzureOpenAi) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullChatModel_AzureOpenAi_FieldMask()
}

func (o *ChatModel_AzureOpenAi) MakeDiffFieldMask(other *ChatModel_AzureOpenAi) *ChatModel_AzureOpenAi_FieldMask {
	if o == nil && other == nil {
		return &ChatModel_AzureOpenAi_FieldMask{}
	}
	if o == nil || other == nil {
		return FullChatModel_AzureOpenAi_FieldMask()
	}

	res := &ChatModel_AzureOpenAi_FieldMask{}
	if o.GetEndpoint() != other.GetEndpoint() {
		res.Paths = append(res.Paths, &ChatModelAzureOpenAi_FieldTerminalPath{selector: ChatModelAzureOpenAi_FieldPathSelectorEndpoint})
	}
	if o.GetApiKey().String() != other.GetApiKey().String() {
		res.Paths = append(res.Paths, &ChatModelAzureOpenAi_FieldTerminalPath{selector: ChatModelAzureOpenAi_FieldPathSelectorApiKey})
	}
	if o.GetDeploymentName() != other.GetDeploymentName() {
		res.Paths = append(res.Paths, &ChatModelAzureOpenAi_FieldTerminalPath{selector: ChatModelAzureOpenAi_FieldPathSelectorDeploymentName})
	}
	if o.GetApiVersion() != other.GetApiVersion() {
		res.Paths = append(res.Paths, &ChatModelAzureOpenAi_FieldTerminalPath{selector: ChatModelAzureOpenAi_FieldPathSelectorApiVersion})
	}
	if o.GetMaxOutputTokens() != other.GetMaxOutputTokens() {
		res.Paths = append(res.Paths, &ChatModelAzureOpenAi_FieldTerminalPath{selector: ChatModelAzureOpenAi_FieldPathSelectorMaxOutputTokens})
	}
	return res
}

func (o *ChatModel_AzureOpenAi) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ChatModel_AzureOpenAi))
}

func (o *ChatModel_AzureOpenAi) Clone() *ChatModel_AzureOpenAi {
	if o == nil {
		return nil
	}
	result := &ChatModel_AzureOpenAi{}
	result.Endpoint = o.Endpoint
	if o.ApiKey == nil {
		result.ApiKey = nil
	} else if data, err := o.ApiKey.ProtoString(); err != nil {
		panic(err)
	} else {
		result.ApiKey = &secrets_secret.Reference{}
		if err := result.ApiKey.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DeploymentName = o.DeploymentName
	result.ApiVersion = o.ApiVersion
	result.MaxOutputTokens = o.MaxOutputTokens
	return result
}

func (o *ChatModel_AzureOpenAi) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ChatModel_AzureOpenAi) Merge(source *ChatModel_AzureOpenAi) {
	o.Endpoint = source.GetEndpoint()
	if source.GetApiKey() != nil {
		if data, err := source.GetApiKey().ProtoString(); err != nil {
			panic(err)
		} else {
			o.ApiKey = &secrets_secret.Reference{}
			if err := o.ApiKey.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.ApiKey = nil
	}
	o.DeploymentName = source.GetDeploymentName()
	o.ApiVersion = source.GetApiVersion()
	o.MaxOutputTokens = source.GetMaxOutputTokens()
}

func (o *ChatModel_AzureOpenAi) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ChatModel_AzureOpenAi))
}

func (o *ChatModel_Cost) GotenObjectExt() {}

func (o *ChatModel_Cost) MakeFullFieldMask() *ChatModel_Cost_FieldMask {
	return FullChatModel_Cost_FieldMask()
}

func (o *ChatModel_Cost) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullChatModel_Cost_FieldMask()
}

func (o *ChatModel_Cost) MakeDiffFieldMask(other *ChatModel_Cost) *ChatModel_Cost_FieldMask {
	if o == nil && other == nil {
		return &ChatModel_Cost_FieldMask{}
	}
	if o == nil || other == nil {
		return FullChatModel_Cost_FieldMask()
	}

	res := &ChatModel_Cost_FieldMask{}
	if !proto.Equal(o.GetInputPerMillion(), other.GetInputPerMillion()) {
		res.Paths = append(res.Paths, &ChatModelCost_FieldTerminalPath{selector: ChatModelCost_FieldPathSelectorInputPerMillion})
	}
	if !proto.Equal(o.GetCachedInputPerMillion(), other.GetCachedInputPerMillion()) {
		res.Paths = append(res.Paths, &ChatModelCost_FieldTerminalPath{selector: ChatModelCost_FieldPathSelectorCachedInputPerMillion})
	}
	if !proto.Equal(o.GetCacheWriteFiveMinPerMillion(), other.GetCacheWriteFiveMinPerMillion()) {
		res.Paths = append(res.Paths, &ChatModelCost_FieldTerminalPath{selector: ChatModelCost_FieldPathSelectorCacheWriteFiveMinPerMillion})
	}
	if !proto.Equal(o.GetCacheWriteOneHourPerMillion(), other.GetCacheWriteOneHourPerMillion()) {
		res.Paths = append(res.Paths, &ChatModelCost_FieldTerminalPath{selector: ChatModelCost_FieldPathSelectorCacheWriteOneHourPerMillion})
	}
	if !proto.Equal(o.GetOutputPerMillion(), other.GetOutputPerMillion()) {
		res.Paths = append(res.Paths, &ChatModelCost_FieldTerminalPath{selector: ChatModelCost_FieldPathSelectorOutputPerMillion})
	}
	return res
}

func (o *ChatModel_Cost) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ChatModel_Cost))
}

func (o *ChatModel_Cost) Clone() *ChatModel_Cost {
	if o == nil {
		return nil
	}
	result := &ChatModel_Cost{}
	result.InputPerMillion = proto.Clone(o.InputPerMillion).(*money.Money)
	result.CachedInputPerMillion = proto.Clone(o.CachedInputPerMillion).(*money.Money)
	result.CacheWriteFiveMinPerMillion = proto.Clone(o.CacheWriteFiveMinPerMillion).(*money.Money)
	result.CacheWriteOneHourPerMillion = proto.Clone(o.CacheWriteOneHourPerMillion).(*money.Money)
	result.OutputPerMillion = proto.Clone(o.OutputPerMillion).(*money.Money)
	return result
}

func (o *ChatModel_Cost) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ChatModel_Cost) Merge(source *ChatModel_Cost) {
	if source.GetInputPerMillion() != nil {
		if o.InputPerMillion == nil {
			o.InputPerMillion = new(money.Money)
		}
		proto.Merge(o.InputPerMillion, source.GetInputPerMillion())
	}
	if source.GetCachedInputPerMillion() != nil {
		if o.CachedInputPerMillion == nil {
			o.CachedInputPerMillion = new(money.Money)
		}
		proto.Merge(o.CachedInputPerMillion, source.GetCachedInputPerMillion())
	}
	if source.GetCacheWriteFiveMinPerMillion() != nil {
		if o.CacheWriteFiveMinPerMillion == nil {
			o.CacheWriteFiveMinPerMillion = new(money.Money)
		}
		proto.Merge(o.CacheWriteFiveMinPerMillion, source.GetCacheWriteFiveMinPerMillion())
	}
	if source.GetCacheWriteOneHourPerMillion() != nil {
		if o.CacheWriteOneHourPerMillion == nil {
			o.CacheWriteOneHourPerMillion = new(money.Money)
		}
		proto.Merge(o.CacheWriteOneHourPerMillion, source.GetCacheWriteOneHourPerMillion())
	}
	if source.GetOutputPerMillion() != nil {
		if o.OutputPerMillion == nil {
			o.OutputPerMillion = new(money.Money)
		}
		proto.Merge(o.OutputPerMillion, source.GetOutputPerMillion())
	}
}

func (o *ChatModel_Cost) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ChatModel_Cost))
}
