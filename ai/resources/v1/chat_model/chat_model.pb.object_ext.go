// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/chat_model.proto
// DO NOT EDIT!!!

package chat_model

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &meta.Meta{}
)

func (o *ChatModel) GotenObjectExt() {}

func (o *ChatModel) MakeFullFieldMask() *ChatModel_FieldMask {
	return FullChatModel_FieldMask()
}

func (o *ChatModel) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullChatModel_FieldMask()
}

func (o *ChatModel) MakeDiffFieldMask(other *ChatModel) *ChatModel_FieldMask {
	if o == nil && other == nil {
		return &ChatModel_FieldMask{}
	}
	if o == nil || other == nil {
		return FullChatModel_FieldMask()
	}

	res := &ChatModel_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ChatModel_FieldSubPath{selector: ChatModel_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	{
		_, leftSelected := o.ModelType.(*ChatModel_AzureOpenAi_)
		_, rightSelected := other.ModelType.(*ChatModel_AzureOpenAi_)
		if leftSelected == rightSelected {
			subMask := o.GetAzureOpenAi().MakeDiffFieldMask(other.GetAzureOpenAi())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorAzureOpenAi})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &ChatModel_FieldSubPath{selector: ChatModel_FieldPathSelectorAzureOpenAi, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorAzureOpenAi})
		}
	}
	return res
}

func (o *ChatModel) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ChatModel))
}

func (o *ChatModel) Clone() *ChatModel {
	if o == nil {
		return nil
	}
	result := &ChatModel{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	if o, ok := o.ModelType.(*ChatModel_AzureOpenAi_); ok {
		result.ModelType = (*ChatModel_AzureOpenAi_)(nil)
		if o != nil {
			result.ModelType = &ChatModel_AzureOpenAi_{}
			result := result.ModelType.(*ChatModel_AzureOpenAi_)
			result.AzureOpenAi = o.AzureOpenAi.Clone()
		}
	}
	return result
}

func (o *ChatModel) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ChatModel) Merge(source *ChatModel) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source, ok := source.GetModelType().(*ChatModel_AzureOpenAi_); ok {
		if dstOneOf, ok := o.ModelType.(*ChatModel_AzureOpenAi_); !ok || dstOneOf == nil {
			o.ModelType = &ChatModel_AzureOpenAi_{}
		}
		if source != nil {
			o := o.ModelType.(*ChatModel_AzureOpenAi_)
			if source.AzureOpenAi != nil {
				if o.AzureOpenAi == nil {
					o.AzureOpenAi = new(ChatModel_AzureOpenAi)
				}
				o.AzureOpenAi.Merge(source.AzureOpenAi)
			}
		}
	}
}

func (o *ChatModel) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ChatModel))
}

func (o *ChatModel_AzureOpenAi) GotenObjectExt() {}

func (o *ChatModel_AzureOpenAi) MakeFullFieldMask() *ChatModel_AzureOpenAi_FieldMask {
	return FullChatModel_AzureOpenAi_FieldMask()
}

func (o *ChatModel_AzureOpenAi) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullChatModel_AzureOpenAi_FieldMask()
}

func (o *ChatModel_AzureOpenAi) MakeDiffFieldMask(other *ChatModel_AzureOpenAi) *ChatModel_AzureOpenAi_FieldMask {
	if o == nil && other == nil {
		return &ChatModel_AzureOpenAi_FieldMask{}
	}
	if o == nil || other == nil {
		return FullChatModel_AzureOpenAi_FieldMask()
	}

	res := &ChatModel_AzureOpenAi_FieldMask{}
	if o.GetEndpoint() != other.GetEndpoint() {
		res.Paths = append(res.Paths, &ChatModelAzureOpenAi_FieldTerminalPath{selector: ChatModelAzureOpenAi_FieldPathSelectorEndpoint})
	}
	if o.GetApiKey().String() != other.GetApiKey().String() {
		res.Paths = append(res.Paths, &ChatModelAzureOpenAi_FieldTerminalPath{selector: ChatModelAzureOpenAi_FieldPathSelectorApiKey})
	}
	if o.GetModelName() != other.GetModelName() {
		res.Paths = append(res.Paths, &ChatModelAzureOpenAi_FieldTerminalPath{selector: ChatModelAzureOpenAi_FieldPathSelectorModelName})
	}
	if o.GetNativeAzureApiCompatible() != other.GetNativeAzureApiCompatible() {
		res.Paths = append(res.Paths, &ChatModelAzureOpenAi_FieldTerminalPath{selector: ChatModelAzureOpenAi_FieldPathSelectorNativeAzureApiCompatible})
	}
	return res
}

func (o *ChatModel_AzureOpenAi) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ChatModel_AzureOpenAi))
}

func (o *ChatModel_AzureOpenAi) Clone() *ChatModel_AzureOpenAi {
	if o == nil {
		return nil
	}
	result := &ChatModel_AzureOpenAi{}
	result.Endpoint = o.Endpoint
	if o.ApiKey == nil {
		result.ApiKey = nil
	} else if data, err := o.ApiKey.ProtoString(); err != nil {
		panic(err)
	} else {
		result.ApiKey = &secrets_secret.Reference{}
		if err := result.ApiKey.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ModelName = o.ModelName
	result.NativeAzureApiCompatible = o.NativeAzureApiCompatible
	return result
}

func (o *ChatModel_AzureOpenAi) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ChatModel_AzureOpenAi) Merge(source *ChatModel_AzureOpenAi) {
	o.Endpoint = source.GetEndpoint()
	if source.GetApiKey() != nil {
		if data, err := source.GetApiKey().ProtoString(); err != nil {
			panic(err)
		} else {
			o.ApiKey = &secrets_secret.Reference{}
			if err := o.ApiKey.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.ApiKey = nil
	}
	o.ModelName = source.GetModelName()
	o.NativeAzureApiCompatible = source.GetNativeAzureApiCompatible()
}

func (o *ChatModel_AzureOpenAi) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ChatModel_AzureOpenAi))
}
