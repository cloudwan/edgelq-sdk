// Code generated by protoc-gen-goten-validate
// File: edgelq/ai/proto/v1/chat_model.proto
// DO NOT EDIT!!!

package chat_model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &meta.Meta{}
)

func (obj *ChatModel) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Metadata).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ChatModel", "metadata", obj.Metadata, "nested object validation failed", err)
		}
	}
	if len(obj.DisplayName) > 128 {
		return gotenvalidate.NewValidationError("ChatModel", "displayName", obj.DisplayName, "field must contain at most 128 characters", nil)
	}
	if obj.DisplayName == "" {
		return gotenvalidate.NewValidationError("ChatModel", "displayName", obj.DisplayName, "field is required", nil)
	}
	switch opt := obj.Provider.(type) {
	case *ChatModel_AzureOpenAi_:
		if subobj, ok := interface{}(opt.AzureOpenAi).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ChatModel", "azureOpenAi", opt.AzureOpenAi, "nested object validation failed", err)
			}
		}
	case *ChatModel_OpenaiCompatible:
		if subobj, ok := interface{}(opt.OpenaiCompatible).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ChatModel", "openaiCompatible", opt.OpenaiCompatible, "nested object validation failed", err)
			}
		}
	case *ChatModel_Anthropic_:
		if subobj, ok := interface{}(opt.Anthropic).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ChatModel", "anthropic", opt.Anthropic, "nested object validation failed", err)
			}
		}
	case *ChatModel_Gemini_:
		if subobj, ok := interface{}(opt.Gemini).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ChatModel", "gemini", opt.Gemini, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ChatModel_OpenAICompatible) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ChatModel_Anthropic) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ChatModel_Gemini) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ChatModel_AzureOpenAi) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
