// Code generated by protoc-gen-goten-resource
// Resource: ChatModel
// DO NOT EDIT!!!

package chat_model

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	money "google.golang.org/genproto/googleapis/type/money"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &money.Money{}
	_ = &meta.Meta{}
)

type ChatModelList []*ChatModel

func (l ChatModelList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*ChatModel))
}

func (l ChatModelList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ChatModelList)...)
}

func (l ChatModelList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ChatModelList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ChatModelList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*ChatModel)
}

func (l ChatModelList) Length() int {
	return len(l)
}

type ChatModelChangeList []*ChatModelChange

func (l ChatModelChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ChatModelChange))
}

func (l ChatModelChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ChatModelChangeList)...)
}

func (l ChatModelChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ChatModelChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ChatModelChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ChatModelChange)
}

func (l ChatModelChangeList) Length() int {
	return len(l)
}

type ChatModelNameList []*Name

func (l ChatModelNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ChatModelNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ChatModelNameList)...)
}

func (l ChatModelNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ChatModelNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ChatModelNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ChatModelNameList) Length() int {
	return len(l)
}

type ChatModelReferenceList []*Reference

func (l ChatModelReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ChatModelReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ChatModelReferenceList)...)
}

func (l ChatModelReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ChatModelReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ChatModelReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ChatModelReferenceList) Length() int {
	return len(l)
}

type ChatModelParentNameList []*ParentName

func (l ChatModelParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ChatModelParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ChatModelParentNameList)...)
}

func (l ChatModelParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ChatModelParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ChatModelParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ChatModelParentNameList) Length() int {
	return len(l)
}

type ChatModelParentReferenceList []*ParentReference

func (l ChatModelParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ChatModelParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ChatModelParentReferenceList)...)
}

func (l ChatModelParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ChatModelParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ChatModelParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ChatModelParentReferenceList) Length() int {
	return len(l)
}

type ChatModelMap map[Name]*ChatModel

func (m ChatModelMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ChatModelMap) Set(res gotenresource.Resource) {
	tRes := res.(*ChatModel)
	m[*tRes.Name] = tRes
}

func (m ChatModelMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ChatModelMap) Length() int {
	return len(m)
}

func (m ChatModelMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ChatModelChangeMap map[Name]*ChatModelChange

func (m ChatModelChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ChatModelChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ChatModelChange)
	m[*tChange.GetChatModelName()] = tChange
}

func (m ChatModelChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ChatModelChangeMap) Length() int {
	return len(m)
}

func (m ChatModelChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
