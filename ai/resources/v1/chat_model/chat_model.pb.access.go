// Code generated by protoc-gen-goten-resource
// Resource: ChatModel
// DO NOT EDIT!!!

package chat_model

import (
	"context"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	"github.com/cloudwan/goten-sdk/types/watch_type"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(context.Context)

	_ = codes.Internal
	_ = status.Status{}

	_ = watch_type.WatchType_STATEFUL
	_ = new(gotenobject.FieldPath)
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &meta.Meta{}
)

type ChatModelAccess interface {
	GetChatModel(context.Context, *GetQuery, ...gotenresource.GetOption) (*ChatModel, error)
	BatchGetChatModels(context.Context, []*Reference, ...gotenresource.BatchGetOption) error
	QueryChatModels(context.Context, *ListQuery, ...gotenresource.QueryOption) (*QueryResultSnapshot, error)
	WatchChatModel(context.Context, *GetQuery, func(*ChatModelChange) error) error
	WatchChatModels(context.Context, *WatchQuery, func(*QueryResultChange) error) error
	SaveChatModel(context.Context, *ChatModel, ...gotenresource.SaveOption) error
	DeleteChatModel(context.Context, *Reference, ...gotenresource.DeleteOption) error
}

type anyCastAccess struct {
	ChatModelAccess
}

func AsAnyCastAccess(access ChatModelAccess) gotenresource.Access {
	return &anyCastAccess{ChatModelAccess: access}
}

func (a *anyCastAccess) Get(ctx context.Context, q gotenresource.GetQuery, opts ...gotenresource.GetOption) (gotenresource.Resource, error) {
	if asChatModelQuery, ok := q.(*GetQuery); ok {
		return a.GetChatModel(ctx, asChatModelQuery, opts...)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected ChatModel, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Query(ctx context.Context, q gotenresource.ListQuery, opts ...gotenresource.QueryOption) (gotenresource.QueryResultSnapshot, error) {
	if asChatModelQuery, ok := q.(*ListQuery); ok {
		return a.QueryChatModels(ctx, asChatModelQuery, opts...)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected ChatModel, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Search(ctx context.Context, q gotenresource.SearchQuery, opts ...gotenresource.QueryOption) (gotenresource.QueryResultSnapshot, error) {
	return nil, status.Errorf(codes.Internal, "Search is not available for ChatModel")
}

func (a *anyCastAccess) Watch(ctx context.Context, q gotenresource.GetQuery, cb func(ch gotenresource.ResourceChange) error) error {
	if asChatModelQuery, ok := q.(*GetQuery); ok {
		return a.WatchChatModel(ctx, asChatModelQuery, func(change *ChatModelChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected ChatModel, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) WatchQuery(ctx context.Context, q gotenresource.WatchQuery, cb func(ch gotenresource.QueryResultChange) error) error {
	if asChatModelQuery, ok := q.(*WatchQuery); ok {
		return a.WatchChatModels(ctx, asChatModelQuery, func(change *QueryResultChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected ChatModel, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Save(ctx context.Context, res gotenresource.Resource, opts ...gotenresource.SaveOption) error {
	if asChatModelRes, ok := res.(*ChatModel); ok {
		return a.SaveChatModel(ctx, asChatModelRes, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected ChatModel, got: %s",
		res.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Delete(ctx context.Context, ref gotenresource.Reference, opts ...gotenresource.DeleteOption) error {
	if asChatModelRef, ok := ref.(*Reference); ok {
		return a.DeleteChatModel(ctx, asChatModelRef, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected ChatModel, got: %s",
		ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) BatchGet(ctx context.Context, toGet []gotenresource.Reference, opts ...gotenresource.BatchGetOption) error {
	chatModelRefs := make([]*Reference, 0, len(toGet))
	for _, ref := range toGet {
		if asChatModelRef, ok := ref.(*Reference); !ok {
			return status.Errorf(codes.Internal,
				"Unrecognized descriptor, expected ChatModel, got: %s",
				ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
		} else {
			chatModelRefs = append(chatModelRefs, asChatModelRef)
		}
	}
	return a.BatchGetChatModels(ctx, chatModelRefs, opts...)
}

func (a *anyCastAccess) GetResourceDescriptors() []gotenresource.Descriptor {
	return []gotenresource.Descriptor{
		GetDescriptor(),
	}
}
