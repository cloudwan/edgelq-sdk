// Code generated by protoc-gen-goten-go
// File: edgelq/ai/proto/v1/chat_model.proto
// DO NOT EDIT!!!

package chat_model

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	money "google.golang.org/genproto/googleapis/type/money"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &money.Money{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChatModel Resource represents deployment of an AI chat model.
type ChatModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ChatModel
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Human-readable display name
	DisplayName string `protobuf:"bytes,8,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional cost metadata (pricing per 1M tokens).
	Cost *ChatModel_Cost `protobuf:"bytes,9,opt,name=cost,proto3" json:"cost,omitempty"`
	// Types that are valid to be assigned to Provider:
	//	*ChatModel_AzureOpenAi_
	//	*ChatModel_OpenaiCompatible
	//	*ChatModel_Anthropic_
	//	*ChatModel_Gemini_
	Provider isChatModel_Provider `protobuf_oneof:"provider"`
}

func (m *ChatModel) Reset() {
	*m = ChatModel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_chat_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ChatModel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ChatModel) ProtoMessage() {}

func (m *ChatModel) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_chat_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ChatModel) GotenMessage() {}

// Deprecated, Use ChatModel.ProtoReflect.Descriptor instead.
func (*ChatModel) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_chat_model_proto_rawDescGZIP(), []int{0}
}

func (m *ChatModel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ChatModel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ChatModel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ChatModel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isChatModel_Provider interface {
	isChatModel_Provider()
}

type ChatModel_AzureOpenAi_ struct {
	AzureOpenAi *ChatModel_AzureOpenAi `protobuf:"bytes,4,opt,name=azure_open_ai,json=azureOpenAi,proto3,oneof"`
}
type ChatModel_OpenaiCompatible struct {
	OpenaiCompatible *ChatModel_OpenAICompatible `protobuf:"bytes,5,opt,name=openai_compatible,json=openaiCompatible,proto3,oneof"`
}
type ChatModel_Anthropic_ struct {
	Anthropic *ChatModel_Anthropic `protobuf:"bytes,6,opt,name=anthropic,proto3,oneof"`
}
type ChatModel_Gemini_ struct {
	Gemini *ChatModel_Gemini `protobuf:"bytes,7,opt,name=gemini,proto3,oneof"`
}

func (*ChatModel_AzureOpenAi_) isChatModel_Provider()     {}
func (*ChatModel_OpenaiCompatible) isChatModel_Provider() {}
func (*ChatModel_Anthropic_) isChatModel_Provider()       {}
func (*ChatModel_Gemini_) isChatModel_Provider()          {}
func (m *ChatModel) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ChatModel) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ChatModel) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ChatModel) GetCost() *ChatModel_Cost {
	if m != nil {
		return m.Cost
	}
	return nil
}

func (m *ChatModel) GetProvider() isChatModel_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}
func (m *ChatModel) GetAzureOpenAi() *ChatModel_AzureOpenAi {
	if x, ok := m.GetProvider().(*ChatModel_AzureOpenAi_); ok {
		return x.AzureOpenAi
	}
	return nil
}
func (m *ChatModel) GetOpenaiCompatible() *ChatModel_OpenAICompatible {
	if x, ok := m.GetProvider().(*ChatModel_OpenaiCompatible); ok {
		return x.OpenaiCompatible
	}
	return nil
}
func (m *ChatModel) GetAnthropic() *ChatModel_Anthropic {
	if x, ok := m.GetProvider().(*ChatModel_Anthropic_); ok {
		return x.Anthropic
	}
	return nil
}
func (m *ChatModel) GetGemini() *ChatModel_Gemini {
	if x, ok := m.GetProvider().(*ChatModel_Gemini_); ok {
		return x.Gemini
	}
	return nil
}
func (m *ChatModel) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ChatModel"))
	}
	m.Name = fv
}

func (m *ChatModel) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "ChatModel"))
	}
	m.Metadata = fv
}

func (m *ChatModel) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "ChatModel"))
	}
	m.DisplayName = fv
}

func (m *ChatModel) SetCost(fv *ChatModel_Cost) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cost", "ChatModel"))
	}
	m.Cost = fv
}

func (m *ChatModel) SetProvider(ofv isChatModel_Provider) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isChatModel_Provider", "ChatModel"))
	}
	m.Provider = ofv
}
func (m *ChatModel) SetAzureOpenAi(fv *ChatModel_AzureOpenAi) {
	m.SetProvider(&ChatModel_AzureOpenAi_{AzureOpenAi: fv})
}
func (m *ChatModel) SetOpenaiCompatible(fv *ChatModel_OpenAICompatible) {
	m.SetProvider(&ChatModel_OpenaiCompatible{OpenaiCompatible: fv})
}
func (m *ChatModel) SetAnthropic(fv *ChatModel_Anthropic) {
	m.SetProvider(&ChatModel_Anthropic_{Anthropic: fv})
}
func (m *ChatModel) SetGemini(fv *ChatModel_Gemini) {
	m.SetProvider(&ChatModel_Gemini_{Gemini: fv})
}

type ChatModel_OpenAICompatible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ApiKey        *secrets_secret.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Model name or Azure deployment name
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// Optional: Custom endpoint for compatible APIs
	BaseUrl string `protobuf:"bytes,3,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// Optional: OpenAI organization ID
	Organization string `protobuf:"bytes,4,opt,name=organization,proto3" json:"organization,omitempty"`
	// Optional: Azure-specific endpoint (e.g.,
	// https://myresource.openai.azure.com)
	AzureEndpoint string `protobuf:"bytes,5,opt,name=azure_endpoint,json=azureEndpoint,proto3" json:"azure_endpoint,omitempty"`
	// Optional: Azure API version (e.g., "2024-06-01")
	AzureApiVersion string `protobuf:"bytes,6,opt,name=azure_api_version,json=azureApiVersion,proto3" json:"azure_api_version,omitempty"`
	// Maximum output tokens
	MaxOutputTokens int32 `protobuf:"varint,7,opt,name=max_output_tokens,json=maxOutputTokens,proto3" json:"max_output_tokens,omitempty"`
}

func (m *ChatModel_OpenAICompatible) Reset() {
	*m = ChatModel_OpenAICompatible{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_chat_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ChatModel_OpenAICompatible) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ChatModel_OpenAICompatible) ProtoMessage() {}

func (m *ChatModel_OpenAICompatible) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_chat_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ChatModel_OpenAICompatible) GotenMessage() {}

// Deprecated, Use ChatModel_OpenAICompatible.ProtoReflect.Descriptor instead.
func (*ChatModel_OpenAICompatible) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_chat_model_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ChatModel_OpenAICompatible) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ChatModel_OpenAICompatible) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ChatModel_OpenAICompatible) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ChatModel_OpenAICompatible) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ChatModel_OpenAICompatible) GetApiKey() *secrets_secret.Reference {
	if m != nil {
		return m.ApiKey
	}
	return nil
}

func (m *ChatModel_OpenAICompatible) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *ChatModel_OpenAICompatible) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

func (m *ChatModel_OpenAICompatible) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ChatModel_OpenAICompatible) GetAzureEndpoint() string {
	if m != nil {
		return m.AzureEndpoint
	}
	return ""
}

func (m *ChatModel_OpenAICompatible) GetAzureApiVersion() string {
	if m != nil {
		return m.AzureApiVersion
	}
	return ""
}

func (m *ChatModel_OpenAICompatible) GetMaxOutputTokens() int32 {
	if m != nil {
		return m.MaxOutputTokens
	}
	return int32(0)
}

func (m *ChatModel_OpenAICompatible) SetApiKey(fv *secrets_secret.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ApiKey", "ChatModel_OpenAICompatible"))
	}
	m.ApiKey = fv
}

func (m *ChatModel_OpenAICompatible) SetModel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "ChatModel_OpenAICompatible"))
	}
	m.Model = fv
}

func (m *ChatModel_OpenAICompatible) SetBaseUrl(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BaseUrl", "ChatModel_OpenAICompatible"))
	}
	m.BaseUrl = fv
}

func (m *ChatModel_OpenAICompatible) SetOrganization(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Organization", "ChatModel_OpenAICompatible"))
	}
	m.Organization = fv
}

func (m *ChatModel_OpenAICompatible) SetAzureEndpoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AzureEndpoint", "ChatModel_OpenAICompatible"))
	}
	m.AzureEndpoint = fv
}

func (m *ChatModel_OpenAICompatible) SetAzureApiVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AzureApiVersion", "ChatModel_OpenAICompatible"))
	}
	m.AzureApiVersion = fv
}

func (m *ChatModel_OpenAICompatible) SetMaxOutputTokens(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxOutputTokens", "ChatModel_OpenAICompatible"))
	}
	m.MaxOutputTokens = fv
}

type ChatModel_Anthropic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ApiKey        *secrets_secret.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Model name (e.g., "claude-3-opus", "claude-3-sonnet")
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// Optional: Custom endpoint
	BaseUrl string `protobuf:"bytes,3,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// Maximum output tokens (must be >= 4096 for Anthropic)
	MaxOutputTokens int32 `protobuf:"varint,4,opt,name=max_output_tokens,json=maxOutputTokens,proto3" json:"max_output_tokens,omitempty"`
}

func (m *ChatModel_Anthropic) Reset() {
	*m = ChatModel_Anthropic{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_chat_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ChatModel_Anthropic) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ChatModel_Anthropic) ProtoMessage() {}

func (m *ChatModel_Anthropic) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_chat_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ChatModel_Anthropic) GotenMessage() {}

// Deprecated, Use ChatModel_Anthropic.ProtoReflect.Descriptor instead.
func (*ChatModel_Anthropic) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_chat_model_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ChatModel_Anthropic) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ChatModel_Anthropic) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ChatModel_Anthropic) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ChatModel_Anthropic) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ChatModel_Anthropic) GetApiKey() *secrets_secret.Reference {
	if m != nil {
		return m.ApiKey
	}
	return nil
}

func (m *ChatModel_Anthropic) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *ChatModel_Anthropic) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

func (m *ChatModel_Anthropic) GetMaxOutputTokens() int32 {
	if m != nil {
		return m.MaxOutputTokens
	}
	return int32(0)
}

func (m *ChatModel_Anthropic) SetApiKey(fv *secrets_secret.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ApiKey", "ChatModel_Anthropic"))
	}
	m.ApiKey = fv
}

func (m *ChatModel_Anthropic) SetModel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "ChatModel_Anthropic"))
	}
	m.Model = fv
}

func (m *ChatModel_Anthropic) SetBaseUrl(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BaseUrl", "ChatModel_Anthropic"))
	}
	m.BaseUrl = fv
}

func (m *ChatModel_Anthropic) SetMaxOutputTokens(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxOutputTokens", "ChatModel_Anthropic"))
	}
	m.MaxOutputTokens = fv
}

type ChatModel_Gemini struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ApiKey        *secrets_secret.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Model name (e.g., "gemini-pro", "gemini-ultra")
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// Maximum output tokens
	MaxOutputTokens int32 `protobuf:"varint,3,opt,name=max_output_tokens,json=maxOutputTokens,proto3" json:"max_output_tokens,omitempty"`
}

func (m *ChatModel_Gemini) Reset() {
	*m = ChatModel_Gemini{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_chat_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ChatModel_Gemini) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ChatModel_Gemini) ProtoMessage() {}

func (m *ChatModel_Gemini) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_chat_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ChatModel_Gemini) GotenMessage() {}

// Deprecated, Use ChatModel_Gemini.ProtoReflect.Descriptor instead.
func (*ChatModel_Gemini) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_chat_model_proto_rawDescGZIP(), []int{0, 2}
}

func (m *ChatModel_Gemini) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ChatModel_Gemini) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ChatModel_Gemini) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ChatModel_Gemini) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ChatModel_Gemini) GetApiKey() *secrets_secret.Reference {
	if m != nil {
		return m.ApiKey
	}
	return nil
}

func (m *ChatModel_Gemini) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *ChatModel_Gemini) GetMaxOutputTokens() int32 {
	if m != nil {
		return m.MaxOutputTokens
	}
	return int32(0)
}

func (m *ChatModel_Gemini) SetApiKey(fv *secrets_secret.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ApiKey", "ChatModel_Gemini"))
	}
	m.ApiKey = fv
}

func (m *ChatModel_Gemini) SetModel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "ChatModel_Gemini"))
	}
	m.Model = fv
}

func (m *ChatModel_Gemini) SetMaxOutputTokens(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxOutputTokens", "ChatModel_Gemini"))
	}
	m.MaxOutputTokens = fv
}

type ChatModel_AzureOpenAi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Azure OpenAI endpoint (e.g., https://myresource.openai.azure.com)
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Azure API key
	ApiKey *secrets_secret.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Azure deployment name
	DeploymentName string `protobuf:"bytes,3,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	// API version (e.g., "2024-10-21")
	ApiVersion string `protobuf:"bytes,4,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Maximum output tokens
	MaxOutputTokens int32 `protobuf:"varint,5,opt,name=max_output_tokens,json=maxOutputTokens,proto3" json:"max_output_tokens,omitempty"`
}

func (m *ChatModel_AzureOpenAi) Reset() {
	*m = ChatModel_AzureOpenAi{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_chat_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ChatModel_AzureOpenAi) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ChatModel_AzureOpenAi) ProtoMessage() {}

func (m *ChatModel_AzureOpenAi) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_chat_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ChatModel_AzureOpenAi) GotenMessage() {}

// Deprecated, Use ChatModel_AzureOpenAi.ProtoReflect.Descriptor instead.
func (*ChatModel_AzureOpenAi) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_chat_model_proto_rawDescGZIP(), []int{0, 3}
}

func (m *ChatModel_AzureOpenAi) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ChatModel_AzureOpenAi) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ChatModel_AzureOpenAi) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ChatModel_AzureOpenAi) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ChatModel_AzureOpenAi) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *ChatModel_AzureOpenAi) GetApiKey() *secrets_secret.Reference {
	if m != nil {
		return m.ApiKey
	}
	return nil
}

func (m *ChatModel_AzureOpenAi) GetDeploymentName() string {
	if m != nil {
		return m.DeploymentName
	}
	return ""
}

func (m *ChatModel_AzureOpenAi) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *ChatModel_AzureOpenAi) GetMaxOutputTokens() int32 {
	if m != nil {
		return m.MaxOutputTokens
	}
	return int32(0)
}

func (m *ChatModel_AzureOpenAi) SetEndpoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Endpoint", "ChatModel_AzureOpenAi"))
	}
	m.Endpoint = fv
}

func (m *ChatModel_AzureOpenAi) SetApiKey(fv *secrets_secret.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ApiKey", "ChatModel_AzureOpenAi"))
	}
	m.ApiKey = fv
}

func (m *ChatModel_AzureOpenAi) SetDeploymentName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeploymentName", "ChatModel_AzureOpenAi"))
	}
	m.DeploymentName = fv
}

func (m *ChatModel_AzureOpenAi) SetApiVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ApiVersion", "ChatModel_AzureOpenAi"))
	}
	m.ApiVersion = fv
}

func (m *ChatModel_AzureOpenAi) SetMaxOutputTokens(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxOutputTokens", "ChatModel_AzureOpenAi"))
	}
	m.MaxOutputTokens = fv
}

// Cost captures pricing per 1M tokens for each billing bucket.
type ChatModel_Cost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Cost for uncached input tokens per 1M tokens.
	InputPerMillion *money.Money `protobuf:"bytes,1,opt,name=input_per_million,json=inputPerMillion,proto3" json:"input_per_million,omitempty"`
	// Cost for cached input tokens per 1M tokens (discounted rate).
	CachedInputPerMillion *money.Money `protobuf:"bytes,2,opt,name=cached_input_per_million,json=cachedInputPerMillion,proto3" json:"cached_input_per_million,omitempty"`
	// Cost for cache writes with a 5 minute TTL per 1M tokens.
	CacheWriteFiveMinPerMillion *money.Money `protobuf:"bytes,3,opt,name=cache_write_five_min_per_million,json=cacheWriteFiveMinPerMillion,proto3" json:"cache_write_five_min_per_million,omitempty"`
	// Cost for cache writes with a 1 hour TTL per 1M tokens.
	CacheWriteOneHourPerMillion *money.Money `protobuf:"bytes,4,opt,name=cache_write_one_hour_per_million,json=cacheWriteOneHourPerMillion,proto3" json:"cache_write_one_hour_per_million,omitempty"`
	// Cost for output tokens per 1M tokens.
	OutputPerMillion *money.Money `protobuf:"bytes,5,opt,name=output_per_million,json=outputPerMillion,proto3" json:"output_per_million,omitempty"`
}

func (m *ChatModel_Cost) Reset() {
	*m = ChatModel_Cost{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_chat_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ChatModel_Cost) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ChatModel_Cost) ProtoMessage() {}

func (m *ChatModel_Cost) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_chat_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ChatModel_Cost) GotenMessage() {}

// Deprecated, Use ChatModel_Cost.ProtoReflect.Descriptor instead.
func (*ChatModel_Cost) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_chat_model_proto_rawDescGZIP(), []int{0, 4}
}

func (m *ChatModel_Cost) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ChatModel_Cost) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ChatModel_Cost) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ChatModel_Cost) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ChatModel_Cost) GetInputPerMillion() *money.Money {
	if m != nil {
		return m.InputPerMillion
	}
	return nil
}

func (m *ChatModel_Cost) GetCachedInputPerMillion() *money.Money {
	if m != nil {
		return m.CachedInputPerMillion
	}
	return nil
}

func (m *ChatModel_Cost) GetCacheWriteFiveMinPerMillion() *money.Money {
	if m != nil {
		return m.CacheWriteFiveMinPerMillion
	}
	return nil
}

func (m *ChatModel_Cost) GetCacheWriteOneHourPerMillion() *money.Money {
	if m != nil {
		return m.CacheWriteOneHourPerMillion
	}
	return nil
}

func (m *ChatModel_Cost) GetOutputPerMillion() *money.Money {
	if m != nil {
		return m.OutputPerMillion
	}
	return nil
}

func (m *ChatModel_Cost) SetInputPerMillion(fv *money.Money) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "InputPerMillion", "ChatModel_Cost"))
	}
	m.InputPerMillion = fv
}

func (m *ChatModel_Cost) SetCachedInputPerMillion(fv *money.Money) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CachedInputPerMillion", "ChatModel_Cost"))
	}
	m.CachedInputPerMillion = fv
}

func (m *ChatModel_Cost) SetCacheWriteFiveMinPerMillion(fv *money.Money) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CacheWriteFiveMinPerMillion", "ChatModel_Cost"))
	}
	m.CacheWriteFiveMinPerMillion = fv
}

func (m *ChatModel_Cost) SetCacheWriteOneHourPerMillion(fv *money.Money) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CacheWriteOneHourPerMillion", "ChatModel_Cost"))
	}
	m.CacheWriteOneHourPerMillion = fv
}

func (m *ChatModel_Cost) SetOutputPerMillion(fv *money.Money) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OutputPerMillion", "ChatModel_Cost"))
	}
	m.OutputPerMillion = fv
}

var edgelq_ai_proto_v1_chat_model_proto preflect.FileDescriptor

var edgelq_ai_proto_v1_chat_model_proto_rawDesc = []byte{
	0x0a, 0x23, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x0e, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0d, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x41, 0x69, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41,
	0x69, 0x12, 0x54, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x61, 0x6e, 0x74, 0x68, 0x72,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x41, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6e,
	0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x35, 0x0a, 0x06, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x65,
	0x6d, 0x69, 0x6e, 0x69, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x12, 0x30,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08, 0x80,
	0x01, 0x68, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x1a,
	0xa4, 0x02, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x49, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xb2, 0xda, 0x21, 0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61,
	0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x1a, 0xa6, 0x01, 0x0a, 0x09, 0x41, 0x6e, 0x74, 0x68, 0x72,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xb2, 0xda, 0x21, 0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x1a,
	0x88, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xb2, 0xda, 0x21,
	0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x01,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x1a, 0xdd, 0x01, 0x0a, 0x0b, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xb2, 0xda, 0x21, 0x1f, 0x12, 0x1d, 0x0a,
	0x19, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x01, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x1a, 0x8b, 0x03, 0x0a, 0x04, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x18, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x15, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e,
	0x12, 0x59, 0x0a, 0x20, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x66, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x1b,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x76, 0x65, 0x4d, 0x69,
	0x6e, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x20, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x1b, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x50, 0x65, 0x72, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x65,
	0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x3a, 0xb7, 0x01, 0xea, 0x41, 0x5e, 0x0a, 0x17,
	0x61, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x7d,
	0x12, 0x2a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x7b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x7d, 0x92, 0xd9, 0x21, 0x46,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x0a, 0x63, 0x68,
	0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x12, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x6f, 0x6e, 0x65, 0x1a, 0x16, 0x69, 0x61,
	0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x38, 0x05, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x42, 0x80, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x45,
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61,
	0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xa2, 0x80, 0xd1, 0x02, 0x47, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x32, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x70, 0x62,
	0x2e, 0x76, 0x31, 0x42, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x61, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3b, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_ai_proto_v1_chat_model_proto_rawDescOnce sync.Once
	edgelq_ai_proto_v1_chat_model_proto_rawDescData = edgelq_ai_proto_v1_chat_model_proto_rawDesc
)

func edgelq_ai_proto_v1_chat_model_proto_rawDescGZIP() []byte {
	edgelq_ai_proto_v1_chat_model_proto_rawDescOnce.Do(func() {
		edgelq_ai_proto_v1_chat_model_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_ai_proto_v1_chat_model_proto_rawDescData)
	})
	return edgelq_ai_proto_v1_chat_model_proto_rawDescData
}

var edgelq_ai_proto_v1_chat_model_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var edgelq_ai_proto_v1_chat_model_proto_goTypes = []interface{}{
	(*ChatModel)(nil),                  // 0: ntt.ai.v1.ChatModel
	(*ChatModel_OpenAICompatible)(nil), // 1: ntt.ai.v1.ChatModel.OpenAICompatible
	(*ChatModel_Anthropic)(nil),        // 2: ntt.ai.v1.ChatModel.Anthropic
	(*ChatModel_Gemini)(nil),           // 3: ntt.ai.v1.ChatModel.Gemini
	(*ChatModel_AzureOpenAi)(nil),      // 4: ntt.ai.v1.ChatModel.AzureOpenAi
	(*ChatModel_Cost)(nil),             // 5: ntt.ai.v1.ChatModel.Cost
	(*meta.Meta)(nil),                  // 6: goten.types.Meta
	(*money.Money)(nil),                // 7: google.type.Money
}
var edgelq_ai_proto_v1_chat_model_proto_depIdxs = []int32{
	6,  // 0: ntt.ai.v1.ChatModel.metadata:type_name -> goten.types.Meta
	4,  // 1: ntt.ai.v1.ChatModel.azure_open_ai:type_name -> ntt.ai.v1.ChatModel.AzureOpenAi
	1,  // 2: ntt.ai.v1.ChatModel.openai_compatible:type_name -> ntt.ai.v1.ChatModel.OpenAICompatible
	2,  // 3: ntt.ai.v1.ChatModel.anthropic:type_name -> ntt.ai.v1.ChatModel.Anthropic
	3,  // 4: ntt.ai.v1.ChatModel.gemini:type_name -> ntt.ai.v1.ChatModel.Gemini
	5,  // 5: ntt.ai.v1.ChatModel.cost:type_name -> ntt.ai.v1.ChatModel.Cost
	7,  // 6: ntt.ai.v1.ChatModel.Cost.input_per_million:type_name -> google.type.Money
	7,  // 7: ntt.ai.v1.ChatModel.Cost.cached_input_per_million:type_name -> google.type.Money
	7,  // 8: ntt.ai.v1.ChatModel.Cost.cache_write_five_min_per_million:type_name -> google.type.Money
	7,  // 9: ntt.ai.v1.ChatModel.Cost.cache_write_one_hour_per_million:type_name -> google.type.Money
	7,  // 10: ntt.ai.v1.ChatModel.Cost.output_per_million:type_name -> google.type.Money
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { edgelq_ai_proto_v1_chat_model_proto_init() }
func edgelq_ai_proto_v1_chat_model_proto_init() {
	if edgelq_ai_proto_v1_chat_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_ai_proto_v1_chat_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_chat_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatModel_OpenAICompatible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_chat_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatModel_Anthropic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_chat_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatModel_Gemini); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_chat_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatModel_AzureOpenAi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_chat_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatModel_Cost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_ai_proto_v1_chat_model_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ChatModel_AzureOpenAi_)(nil),
		(*ChatModel_OpenaiCompatible)(nil),
		(*ChatModel_Anthropic_)(nil),
		(*ChatModel_Gemini_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_ai_proto_v1_chat_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_ai_proto_v1_chat_model_proto_goTypes,
		DependencyIndexes: edgelq_ai_proto_v1_chat_model_proto_depIdxs,
		MessageInfos:      edgelq_ai_proto_v1_chat_model_proto_msgTypes,
	}.Build()
	edgelq_ai_proto_v1_chat_model_proto = out.File
	edgelq_ai_proto_v1_chat_model_proto_rawDesc = nil
	edgelq_ai_proto_v1_chat_model_proto_goTypes = nil
	edgelq_ai_proto_v1_chat_model_proto_depIdxs = nil
}
