// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/chat_model.proto
// DO NOT EDIT!!!

package chat_model

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ChatModel_FieldPath interface {
	gotenobject.FieldPath
	Selector() ChatModel_FieldPathSelector
	Get(source *ChatModel) []interface{}
	GetSingle(source *ChatModel) (interface{}, bool)
	ClearValue(item *ChatModel)

	// Those methods build corresponding ChatModel_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ChatModel_FieldPathValue
	WithIArrayOfValues(values interface{}) ChatModel_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ChatModel_FieldPathArrayItemValue
}

type ChatModel_FieldPathSelector int32

const (
	ChatModel_FieldPathSelectorName        ChatModel_FieldPathSelector = 0
	ChatModel_FieldPathSelectorMetadata    ChatModel_FieldPathSelector = 1
	ChatModel_FieldPathSelectorAzureOpenAi ChatModel_FieldPathSelector = 2
)

func (s ChatModel_FieldPathSelector) String() string {
	switch s {
	case ChatModel_FieldPathSelectorName:
		return "name"
	case ChatModel_FieldPathSelectorMetadata:
		return "metadata"
	case ChatModel_FieldPathSelectorAzureOpenAi:
		return "azure_open_ai"
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel: %d", s))
	}
}

func BuildChatModel_FieldPath(fp gotenobject.RawFieldPath) (ChatModel_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ChatModel")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorName}, nil
		case "metadata":
			return &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorMetadata}, nil
		case "azure_open_ai", "azureOpenAi", "azure-open-ai":
			return &ChatModel_FieldTerminalPath{selector: ChatModel_FieldPathSelectorAzureOpenAi}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ChatModel_FieldSubPath{selector: ChatModel_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "azure_open_ai", "azureOpenAi", "azure-open-ai":
			if subpath, err := BuildChatModelAzureOpenAi_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ChatModel_FieldSubPath{selector: ChatModel_FieldPathSelectorAzureOpenAi, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ChatModel", fp)
}

func ParseChatModel_FieldPath(rawField string) (ChatModel_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildChatModel_FieldPath(fp)
}

func MustParseChatModel_FieldPath(rawField string) ChatModel_FieldPath {
	fp, err := ParseChatModel_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ChatModel_FieldTerminalPath struct {
	selector ChatModel_FieldPathSelector
}

var _ ChatModel_FieldPath = (*ChatModel_FieldTerminalPath)(nil)

func (fp *ChatModel_FieldTerminalPath) Selector() ChatModel_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ChatModel_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ChatModel_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ChatModel
func (fp *ChatModel_FieldTerminalPath) Get(source *ChatModel) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ChatModel_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ChatModel_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case ChatModel_FieldPathSelectorAzureOpenAi:
			if source, ok := source.ModelType.(*ChatModel_AzureOpenAi_); ok && source != nil {
				if source.AzureOpenAi != nil {
					values = append(values, source.AzureOpenAi)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fp.selector))
		}
	}
	return
}

func (fp *ChatModel_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ChatModel))
}

// GetSingle returns value pointed by specific field of from source ChatModel
func (fp *ChatModel_FieldTerminalPath) GetSingle(source *ChatModel) (interface{}, bool) {
	switch fp.selector {
	case ChatModel_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ChatModel_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case ChatModel_FieldPathSelectorAzureOpenAi:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetAzureOpenAi(), false
		}
		_, oneOfSelected := source.ModelType.(*ChatModel_AzureOpenAi_)
		if !oneOfSelected {
			return source.GetAzureOpenAi(), false // to return "type" information
		}
		res := source.GetAzureOpenAi()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fp.selector))
	}
}

func (fp *ChatModel_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ChatModel))
}

// GetDefault returns a default value of the field type
func (fp *ChatModel_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ChatModel_FieldPathSelectorName:
		return (*Name)(nil)
	case ChatModel_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case ChatModel_FieldPathSelectorAzureOpenAi:
		return (*ChatModel_AzureOpenAi)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fp.selector))
	}
}

func (fp *ChatModel_FieldTerminalPath) ClearValue(item *ChatModel) {
	if item != nil {
		switch fp.selector {
		case ChatModel_FieldPathSelectorName:
			item.Name = nil
		case ChatModel_FieldPathSelectorMetadata:
			item.Metadata = nil
		case ChatModel_FieldPathSelectorAzureOpenAi:
			if item, ok := item.ModelType.(*ChatModel_AzureOpenAi_); ok {
				item.AzureOpenAi = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fp.selector))
		}
	}
}

func (fp *ChatModel_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ChatModel))
}

// IsLeaf - whether field path is holds simple value
func (fp *ChatModel_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ChatModel_FieldPathSelectorName
}

func (fp *ChatModel_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ChatModel_FieldTerminalPath) WithIValue(value interface{}) ChatModel_FieldPathValue {
	switch fp.selector {
	case ChatModel_FieldPathSelectorName:
		return &ChatModel_FieldTerminalPathValue{ChatModel_FieldTerminalPath: *fp, value: value.(*Name)}
	case ChatModel_FieldPathSelectorMetadata:
		return &ChatModel_FieldTerminalPathValue{ChatModel_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case ChatModel_FieldPathSelectorAzureOpenAi:
		return &ChatModel_FieldTerminalPathValue{ChatModel_FieldTerminalPath: *fp, value: value.(*ChatModel_AzureOpenAi)}
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fp.selector))
	}
}

func (fp *ChatModel_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ChatModel_FieldTerminalPath) WithIArrayOfValues(values interface{}) ChatModel_FieldPathArrayOfValues {
	fpaov := &ChatModel_FieldTerminalPathArrayOfValues{ChatModel_FieldTerminalPath: *fp}
	switch fp.selector {
	case ChatModel_FieldPathSelectorName:
		return &ChatModel_FieldTerminalPathArrayOfValues{ChatModel_FieldTerminalPath: *fp, values: values.([]*Name)}
	case ChatModel_FieldPathSelectorMetadata:
		return &ChatModel_FieldTerminalPathArrayOfValues{ChatModel_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case ChatModel_FieldPathSelectorAzureOpenAi:
		return &ChatModel_FieldTerminalPathArrayOfValues{ChatModel_FieldTerminalPath: *fp, values: values.([]*ChatModel_AzureOpenAi)}
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fp.selector))
	}
	return fpaov
}

func (fp *ChatModel_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ChatModel_FieldTerminalPath) WithIArrayItemValue(value interface{}) ChatModel_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fp.selector))
	}
}

func (fp *ChatModel_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ChatModel_FieldSubPath struct {
	selector ChatModel_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ChatModel_FieldPath = (*ChatModel_FieldSubPath)(nil)

func (fps *ChatModel_FieldSubPath) Selector() ChatModel_FieldPathSelector {
	return fps.selector
}
func (fps *ChatModel_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *ChatModel_FieldSubPath) AsAzureOpenAiSubPath() (ChatModelAzureOpenAi_FieldPath, bool) {
	res, ok := fps.subPath.(ChatModelAzureOpenAi_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ChatModel_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ChatModel_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ChatModel
func (fps *ChatModel_FieldSubPath) Get(source *ChatModel) (values []interface{}) {
	switch fps.selector {
	case ChatModel_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case ChatModel_FieldPathSelectorAzureOpenAi:
		values = append(values, fps.subPath.GetRaw(source.GetAzureOpenAi())...)
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fps.selector))
	}
	return
}

func (fps *ChatModel_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ChatModel))
}

// GetSingle returns value of selected field from source ChatModel
func (fps *ChatModel_FieldSubPath) GetSingle(source *ChatModel) (interface{}, bool) {
	switch fps.selector {
	case ChatModel_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case ChatModel_FieldPathSelectorAzureOpenAi:
		if source.GetAzureOpenAi() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAzureOpenAi())
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fps.selector))
	}
}

func (fps *ChatModel_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ChatModel))
}

// GetDefault returns a default value of the field type
func (fps *ChatModel_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ChatModel_FieldSubPath) ClearValue(item *ChatModel) {
	if item != nil {
		switch fps.selector {
		case ChatModel_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case ChatModel_FieldPathSelectorAzureOpenAi:
			if item.ModelType != nil {
				if item, ok := item.ModelType.(*ChatModel_AzureOpenAi_); ok {
					fps.subPath.ClearValueRaw(item.AzureOpenAi)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fps.selector))
		}
	}
}

func (fps *ChatModel_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ChatModel))
}

// IsLeaf - whether field path is holds simple value
func (fps *ChatModel_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ChatModel_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ChatModel_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ChatModel_FieldSubPath) WithIValue(value interface{}) ChatModel_FieldPathValue {
	return &ChatModel_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ChatModel_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ChatModel_FieldSubPath) WithIArrayOfValues(values interface{}) ChatModel_FieldPathArrayOfValues {
	return &ChatModel_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ChatModel_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ChatModel_FieldSubPath) WithIArrayItemValue(value interface{}) ChatModel_FieldPathArrayItemValue {
	return &ChatModel_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ChatModel_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ChatModel_FieldPathValue allows storing values for ChatModel fields according to their type
type ChatModel_FieldPathValue interface {
	ChatModel_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ChatModel)
	CompareWith(*ChatModel) (cmp int, comparable bool)
}

func ParseChatModel_FieldPathValue(pathStr, valueStr string) (ChatModel_FieldPathValue, error) {
	fp, err := ParseChatModel_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChatModel field path value from %s: %v", valueStr, err)
	}
	return fpv.(ChatModel_FieldPathValue), nil
}

func MustParseChatModel_FieldPathValue(pathStr, valueStr string) ChatModel_FieldPathValue {
	fpv, err := ParseChatModel_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ChatModel_FieldTerminalPathValue struct {
	ChatModel_FieldTerminalPath
	value interface{}
}

var _ ChatModel_FieldPathValue = (*ChatModel_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ChatModel' as interface{}
func (fpv *ChatModel_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ChatModel_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *ChatModel_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *ChatModel_FieldTerminalPathValue) AsAzureOpenAiValue() (*ChatModel_AzureOpenAi, bool) {
	res, ok := fpv.value.(*ChatModel_AzureOpenAi)
	return res, ok
}

// SetTo stores value for selected field for object ChatModel
func (fpv *ChatModel_FieldTerminalPathValue) SetTo(target **ChatModel) {
	if *target == nil {
		*target = new(ChatModel)
	}
	switch fpv.selector {
	case ChatModel_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case ChatModel_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case ChatModel_FieldPathSelectorAzureOpenAi:
		if _, ok := (*target).ModelType.(*ChatModel_AzureOpenAi_); !ok {
			(*target).ModelType = &ChatModel_AzureOpenAi_{}
		}
		(*target).ModelType.(*ChatModel_AzureOpenAi_).AzureOpenAi = fpv.value.(*ChatModel_AzureOpenAi)
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fpv.selector))
	}
}

func (fpv *ChatModel_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ChatModel)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ChatModel_FieldTerminalPathValue' with the value under path in 'ChatModel'.
func (fpv *ChatModel_FieldTerminalPathValue) CompareWith(source *ChatModel) (int, bool) {
	switch fpv.selector {
	case ChatModel_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ChatModel_FieldPathSelectorMetadata:
		return 0, false
	case ChatModel_FieldPathSelectorAzureOpenAi:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fpv.selector))
	}
}

func (fpv *ChatModel_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ChatModel))
}

type ChatModel_FieldSubPathValue struct {
	ChatModel_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ChatModel_FieldPathValue = (*ChatModel_FieldSubPathValue)(nil)

func (fpvs *ChatModel_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *ChatModel_FieldSubPathValue) AsAzureOpenAiPathValue() (ChatModelAzureOpenAi_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ChatModelAzureOpenAi_FieldPathValue)
	return res, ok
}

func (fpvs *ChatModel_FieldSubPathValue) SetTo(target **ChatModel) {
	if *target == nil {
		*target = new(ChatModel)
	}
	switch fpvs.Selector() {
	case ChatModel_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case ChatModel_FieldPathSelectorAzureOpenAi:
		if _, ok := (*target).ModelType.(*ChatModel_AzureOpenAi_); !ok {
			(*target).ModelType = &ChatModel_AzureOpenAi_{}
		}
		fpvs.subPathValue.(ChatModelAzureOpenAi_FieldPathValue).SetTo(&(*target).ModelType.(*ChatModel_AzureOpenAi_).AzureOpenAi)
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fpvs.Selector()))
	}
}

func (fpvs *ChatModel_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ChatModel)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ChatModel_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ChatModel_FieldSubPathValue) CompareWith(source *ChatModel) (int, bool) {
	switch fpvs.Selector() {
	case ChatModel_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case ChatModel_FieldPathSelectorAzureOpenAi:
		return fpvs.subPathValue.(ChatModelAzureOpenAi_FieldPathValue).CompareWith(source.GetAzureOpenAi())
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fpvs.Selector()))
	}
}

func (fpvs *ChatModel_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ChatModel))
}

// ChatModel_FieldPathArrayItemValue allows storing single item in Path-specific values for ChatModel according to their type
// Present only for array (repeated) types.
type ChatModel_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ChatModel_FieldPath
	ContainsValue(*ChatModel) bool
}

// ParseChatModel_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseChatModel_FieldPathArrayItemValue(pathStr, valueStr string) (ChatModel_FieldPathArrayItemValue, error) {
	fp, err := ParseChatModel_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChatModel field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ChatModel_FieldPathArrayItemValue), nil
}

func MustParseChatModel_FieldPathArrayItemValue(pathStr, valueStr string) ChatModel_FieldPathArrayItemValue {
	fpaiv, err := ParseChatModel_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ChatModel_FieldTerminalPathArrayItemValue struct {
	ChatModel_FieldTerminalPath
	value interface{}
}

var _ ChatModel_FieldPathArrayItemValue = (*ChatModel_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ChatModel as interface{}
func (fpaiv *ChatModel_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ChatModel_FieldTerminalPathArrayItemValue) GetSingle(source *ChatModel) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ChatModel_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ChatModel))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ChatModel'
func (fpaiv *ChatModel_FieldTerminalPathArrayItemValue) ContainsValue(source *ChatModel) bool {
	slice := fpaiv.ChatModel_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ChatModel_FieldSubPathArrayItemValue struct {
	ChatModel_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ChatModel_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ChatModel_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ChatModel_FieldSubPathArrayItemValue) AsAzureOpenAiPathItemValue() (ChatModelAzureOpenAi_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ChatModelAzureOpenAi_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ChatModel'
func (fpaivs *ChatModel_FieldSubPathArrayItemValue) ContainsValue(source *ChatModel) bool {
	switch fpaivs.Selector() {
	case ChatModel_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case ChatModel_FieldPathSelectorAzureOpenAi:
		return fpaivs.subPathItemValue.(ChatModelAzureOpenAi_FieldPathArrayItemValue).ContainsValue(source.GetAzureOpenAi())
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel: %d", fpaivs.Selector()))
	}
}

// ChatModel_FieldPathArrayOfValues allows storing slice of values for ChatModel fields according to their type
type ChatModel_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ChatModel_FieldPath
}

func ParseChatModel_FieldPathArrayOfValues(pathStr, valuesStr string) (ChatModel_FieldPathArrayOfValues, error) {
	fp, err := ParseChatModel_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChatModel field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ChatModel_FieldPathArrayOfValues), nil
}

func MustParseChatModel_FieldPathArrayOfValues(pathStr, valuesStr string) ChatModel_FieldPathArrayOfValues {
	fpaov, err := ParseChatModel_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ChatModel_FieldTerminalPathArrayOfValues struct {
	ChatModel_FieldTerminalPath
	values interface{}
}

var _ ChatModel_FieldPathArrayOfValues = (*ChatModel_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ChatModel_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ChatModel_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case ChatModel_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case ChatModel_FieldPathSelectorAzureOpenAi:
		for _, v := range fpaov.values.([]*ChatModel_AzureOpenAi) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ChatModel_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *ChatModel_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *ChatModel_FieldTerminalPathArrayOfValues) AsAzureOpenAiArrayOfValues() ([]*ChatModel_AzureOpenAi, bool) {
	res, ok := fpaov.values.([]*ChatModel_AzureOpenAi)
	return res, ok
}

type ChatModel_FieldSubPathArrayOfValues struct {
	ChatModel_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ChatModel_FieldPathArrayOfValues = (*ChatModel_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ChatModel_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ChatModel_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ChatModel_FieldSubPathArrayOfValues) AsAzureOpenAiPathArrayOfValues() (ChatModelAzureOpenAi_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ChatModelAzureOpenAi_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ChatModelAzureOpenAi_FieldPath interface {
	gotenobject.FieldPath
	Selector() ChatModelAzureOpenAi_FieldPathSelector
	Get(source *ChatModel_AzureOpenAi) []interface{}
	GetSingle(source *ChatModel_AzureOpenAi) (interface{}, bool)
	ClearValue(item *ChatModel_AzureOpenAi)

	// Those methods build corresponding ChatModelAzureOpenAi_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ChatModelAzureOpenAi_FieldPathValue
	WithIArrayOfValues(values interface{}) ChatModelAzureOpenAi_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ChatModelAzureOpenAi_FieldPathArrayItemValue
}

type ChatModelAzureOpenAi_FieldPathSelector int32

const (
	ChatModelAzureOpenAi_FieldPathSelectorEndpoint                 ChatModelAzureOpenAi_FieldPathSelector = 0
	ChatModelAzureOpenAi_FieldPathSelectorApiKey                   ChatModelAzureOpenAi_FieldPathSelector = 1
	ChatModelAzureOpenAi_FieldPathSelectorModelName                ChatModelAzureOpenAi_FieldPathSelector = 2
	ChatModelAzureOpenAi_FieldPathSelectorNativeAzureApiCompatible ChatModelAzureOpenAi_FieldPathSelector = 3
)

func (s ChatModelAzureOpenAi_FieldPathSelector) String() string {
	switch s {
	case ChatModelAzureOpenAi_FieldPathSelectorEndpoint:
		return "endpoint"
	case ChatModelAzureOpenAi_FieldPathSelectorApiKey:
		return "api_key"
	case ChatModelAzureOpenAi_FieldPathSelectorModelName:
		return "model_name"
	case ChatModelAzureOpenAi_FieldPathSelectorNativeAzureApiCompatible:
		return "native_azure_api_compatible"
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel_AzureOpenAi: %d", s))
	}
}

func BuildChatModelAzureOpenAi_FieldPath(fp gotenobject.RawFieldPath) (ChatModelAzureOpenAi_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ChatModel_AzureOpenAi")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "endpoint":
			return &ChatModelAzureOpenAi_FieldTerminalPath{selector: ChatModelAzureOpenAi_FieldPathSelectorEndpoint}, nil
		case "api_key", "apiKey", "api-key":
			return &ChatModelAzureOpenAi_FieldTerminalPath{selector: ChatModelAzureOpenAi_FieldPathSelectorApiKey}, nil
		case "model_name", "modelName", "model-name":
			return &ChatModelAzureOpenAi_FieldTerminalPath{selector: ChatModelAzureOpenAi_FieldPathSelectorModelName}, nil
		case "native_azure_api_compatible", "nativeAzureApiCompatible", "native-azure-api-compatible":
			return &ChatModelAzureOpenAi_FieldTerminalPath{selector: ChatModelAzureOpenAi_FieldPathSelectorNativeAzureApiCompatible}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ChatModel_AzureOpenAi", fp)
}

func ParseChatModelAzureOpenAi_FieldPath(rawField string) (ChatModelAzureOpenAi_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildChatModelAzureOpenAi_FieldPath(fp)
}

func MustParseChatModelAzureOpenAi_FieldPath(rawField string) ChatModelAzureOpenAi_FieldPath {
	fp, err := ParseChatModelAzureOpenAi_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ChatModelAzureOpenAi_FieldTerminalPath struct {
	selector ChatModelAzureOpenAi_FieldPathSelector
}

var _ ChatModelAzureOpenAi_FieldPath = (*ChatModelAzureOpenAi_FieldTerminalPath)(nil)

func (fp *ChatModelAzureOpenAi_FieldTerminalPath) Selector() ChatModelAzureOpenAi_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ChatModelAzureOpenAi_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ChatModelAzureOpenAi_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ChatModel_AzureOpenAi
func (fp *ChatModelAzureOpenAi_FieldTerminalPath) Get(source *ChatModel_AzureOpenAi) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ChatModelAzureOpenAi_FieldPathSelectorEndpoint:
			values = append(values, source.Endpoint)
		case ChatModelAzureOpenAi_FieldPathSelectorApiKey:
			if source.ApiKey != nil {
				values = append(values, source.ApiKey)
			}
		case ChatModelAzureOpenAi_FieldPathSelectorModelName:
			values = append(values, source.ModelName)
		case ChatModelAzureOpenAi_FieldPathSelectorNativeAzureApiCompatible:
			values = append(values, source.NativeAzureApiCompatible)
		default:
			panic(fmt.Sprintf("Invalid selector for ChatModel_AzureOpenAi: %d", fp.selector))
		}
	}
	return
}

func (fp *ChatModelAzureOpenAi_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ChatModel_AzureOpenAi))
}

// GetSingle returns value pointed by specific field of from source ChatModel_AzureOpenAi
func (fp *ChatModelAzureOpenAi_FieldTerminalPath) GetSingle(source *ChatModel_AzureOpenAi) (interface{}, bool) {
	switch fp.selector {
	case ChatModelAzureOpenAi_FieldPathSelectorEndpoint:
		return source.GetEndpoint(), source != nil
	case ChatModelAzureOpenAi_FieldPathSelectorApiKey:
		res := source.GetApiKey()
		return res, res != nil
	case ChatModelAzureOpenAi_FieldPathSelectorModelName:
		return source.GetModelName(), source != nil
	case ChatModelAzureOpenAi_FieldPathSelectorNativeAzureApiCompatible:
		return source.GetNativeAzureApiCompatible(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel_AzureOpenAi: %d", fp.selector))
	}
}

func (fp *ChatModelAzureOpenAi_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ChatModel_AzureOpenAi))
}

// GetDefault returns a default value of the field type
func (fp *ChatModelAzureOpenAi_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ChatModelAzureOpenAi_FieldPathSelectorEndpoint:
		return ""
	case ChatModelAzureOpenAi_FieldPathSelectorApiKey:
		return (*secrets_secret.Reference)(nil)
	case ChatModelAzureOpenAi_FieldPathSelectorModelName:
		return ""
	case ChatModelAzureOpenAi_FieldPathSelectorNativeAzureApiCompatible:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel_AzureOpenAi: %d", fp.selector))
	}
}

func (fp *ChatModelAzureOpenAi_FieldTerminalPath) ClearValue(item *ChatModel_AzureOpenAi) {
	if item != nil {
		switch fp.selector {
		case ChatModelAzureOpenAi_FieldPathSelectorEndpoint:
			item.Endpoint = ""
		case ChatModelAzureOpenAi_FieldPathSelectorApiKey:
			item.ApiKey = nil
		case ChatModelAzureOpenAi_FieldPathSelectorModelName:
			item.ModelName = ""
		case ChatModelAzureOpenAi_FieldPathSelectorNativeAzureApiCompatible:
			item.NativeAzureApiCompatible = false
		default:
			panic(fmt.Sprintf("Invalid selector for ChatModel_AzureOpenAi: %d", fp.selector))
		}
	}
}

func (fp *ChatModelAzureOpenAi_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ChatModel_AzureOpenAi))
}

// IsLeaf - whether field path is holds simple value
func (fp *ChatModelAzureOpenAi_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ChatModelAzureOpenAi_FieldPathSelectorEndpoint ||
		fp.selector == ChatModelAzureOpenAi_FieldPathSelectorApiKey ||
		fp.selector == ChatModelAzureOpenAi_FieldPathSelectorModelName ||
		fp.selector == ChatModelAzureOpenAi_FieldPathSelectorNativeAzureApiCompatible
}

func (fp *ChatModelAzureOpenAi_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ChatModelAzureOpenAi_FieldTerminalPath) WithIValue(value interface{}) ChatModelAzureOpenAi_FieldPathValue {
	switch fp.selector {
	case ChatModelAzureOpenAi_FieldPathSelectorEndpoint:
		return &ChatModelAzureOpenAi_FieldTerminalPathValue{ChatModelAzureOpenAi_FieldTerminalPath: *fp, value: value.(string)}
	case ChatModelAzureOpenAi_FieldPathSelectorApiKey:
		return &ChatModelAzureOpenAi_FieldTerminalPathValue{ChatModelAzureOpenAi_FieldTerminalPath: *fp, value: value.(*secrets_secret.Reference)}
	case ChatModelAzureOpenAi_FieldPathSelectorModelName:
		return &ChatModelAzureOpenAi_FieldTerminalPathValue{ChatModelAzureOpenAi_FieldTerminalPath: *fp, value: value.(string)}
	case ChatModelAzureOpenAi_FieldPathSelectorNativeAzureApiCompatible:
		return &ChatModelAzureOpenAi_FieldTerminalPathValue{ChatModelAzureOpenAi_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel_AzureOpenAi: %d", fp.selector))
	}
}

func (fp *ChatModelAzureOpenAi_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ChatModelAzureOpenAi_FieldTerminalPath) WithIArrayOfValues(values interface{}) ChatModelAzureOpenAi_FieldPathArrayOfValues {
	fpaov := &ChatModelAzureOpenAi_FieldTerminalPathArrayOfValues{ChatModelAzureOpenAi_FieldTerminalPath: *fp}
	switch fp.selector {
	case ChatModelAzureOpenAi_FieldPathSelectorEndpoint:
		return &ChatModelAzureOpenAi_FieldTerminalPathArrayOfValues{ChatModelAzureOpenAi_FieldTerminalPath: *fp, values: values.([]string)}
	case ChatModelAzureOpenAi_FieldPathSelectorApiKey:
		return &ChatModelAzureOpenAi_FieldTerminalPathArrayOfValues{ChatModelAzureOpenAi_FieldTerminalPath: *fp, values: values.([]*secrets_secret.Reference)}
	case ChatModelAzureOpenAi_FieldPathSelectorModelName:
		return &ChatModelAzureOpenAi_FieldTerminalPathArrayOfValues{ChatModelAzureOpenAi_FieldTerminalPath: *fp, values: values.([]string)}
	case ChatModelAzureOpenAi_FieldPathSelectorNativeAzureApiCompatible:
		return &ChatModelAzureOpenAi_FieldTerminalPathArrayOfValues{ChatModelAzureOpenAi_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel_AzureOpenAi: %d", fp.selector))
	}
	return fpaov
}

func (fp *ChatModelAzureOpenAi_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ChatModelAzureOpenAi_FieldTerminalPath) WithIArrayItemValue(value interface{}) ChatModelAzureOpenAi_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel_AzureOpenAi: %d", fp.selector))
	}
}

func (fp *ChatModelAzureOpenAi_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ChatModelAzureOpenAi_FieldPathValue allows storing values for AzureOpenAi fields according to their type
type ChatModelAzureOpenAi_FieldPathValue interface {
	ChatModelAzureOpenAi_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ChatModel_AzureOpenAi)
	CompareWith(*ChatModel_AzureOpenAi) (cmp int, comparable bool)
}

func ParseChatModelAzureOpenAi_FieldPathValue(pathStr, valueStr string) (ChatModelAzureOpenAi_FieldPathValue, error) {
	fp, err := ParseChatModelAzureOpenAi_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureOpenAi field path value from %s: %v", valueStr, err)
	}
	return fpv.(ChatModelAzureOpenAi_FieldPathValue), nil
}

func MustParseChatModelAzureOpenAi_FieldPathValue(pathStr, valueStr string) ChatModelAzureOpenAi_FieldPathValue {
	fpv, err := ParseChatModelAzureOpenAi_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ChatModelAzureOpenAi_FieldTerminalPathValue struct {
	ChatModelAzureOpenAi_FieldTerminalPath
	value interface{}
}

var _ ChatModelAzureOpenAi_FieldPathValue = (*ChatModelAzureOpenAi_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AzureOpenAi' as interface{}
func (fpv *ChatModelAzureOpenAi_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ChatModelAzureOpenAi_FieldTerminalPathValue) AsEndpointValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ChatModelAzureOpenAi_FieldTerminalPathValue) AsApiKeyValue() (*secrets_secret.Reference, bool) {
	res, ok := fpv.value.(*secrets_secret.Reference)
	return res, ok
}
func (fpv *ChatModelAzureOpenAi_FieldTerminalPathValue) AsModelNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ChatModelAzureOpenAi_FieldTerminalPathValue) AsNativeAzureApiCompatibleValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object AzureOpenAi
func (fpv *ChatModelAzureOpenAi_FieldTerminalPathValue) SetTo(target **ChatModel_AzureOpenAi) {
	if *target == nil {
		*target = new(ChatModel_AzureOpenAi)
	}
	switch fpv.selector {
	case ChatModelAzureOpenAi_FieldPathSelectorEndpoint:
		(*target).Endpoint = fpv.value.(string)
	case ChatModelAzureOpenAi_FieldPathSelectorApiKey:
		(*target).ApiKey = fpv.value.(*secrets_secret.Reference)
	case ChatModelAzureOpenAi_FieldPathSelectorModelName:
		(*target).ModelName = fpv.value.(string)
	case ChatModelAzureOpenAi_FieldPathSelectorNativeAzureApiCompatible:
		(*target).NativeAzureApiCompatible = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel_AzureOpenAi: %d", fpv.selector))
	}
}

func (fpv *ChatModelAzureOpenAi_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ChatModel_AzureOpenAi)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ChatModelAzureOpenAi_FieldTerminalPathValue' with the value under path in 'ChatModel_AzureOpenAi'.
func (fpv *ChatModelAzureOpenAi_FieldTerminalPathValue) CompareWith(source *ChatModel_AzureOpenAi) (int, bool) {
	switch fpv.selector {
	case ChatModelAzureOpenAi_FieldPathSelectorEndpoint:
		leftValue := fpv.value.(string)
		rightValue := source.GetEndpoint()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ChatModelAzureOpenAi_FieldPathSelectorApiKey:
		leftValue := fpv.value.(*secrets_secret.Reference)
		rightValue := source.GetApiKey()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ChatModelAzureOpenAi_FieldPathSelectorModelName:
		leftValue := fpv.value.(string)
		rightValue := source.GetModelName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ChatModelAzureOpenAi_FieldPathSelectorNativeAzureApiCompatible:
		leftValue := fpv.value.(bool)
		rightValue := source.GetNativeAzureApiCompatible()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ChatModel_AzureOpenAi: %d", fpv.selector))
	}
}

func (fpv *ChatModelAzureOpenAi_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ChatModel_AzureOpenAi))
}

// ChatModelAzureOpenAi_FieldPathArrayItemValue allows storing single item in Path-specific values for AzureOpenAi according to their type
// Present only for array (repeated) types.
type ChatModelAzureOpenAi_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ChatModelAzureOpenAi_FieldPath
	ContainsValue(*ChatModel_AzureOpenAi) bool
}

// ParseChatModelAzureOpenAi_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseChatModelAzureOpenAi_FieldPathArrayItemValue(pathStr, valueStr string) (ChatModelAzureOpenAi_FieldPathArrayItemValue, error) {
	fp, err := ParseChatModelAzureOpenAi_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureOpenAi field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ChatModelAzureOpenAi_FieldPathArrayItemValue), nil
}

func MustParseChatModelAzureOpenAi_FieldPathArrayItemValue(pathStr, valueStr string) ChatModelAzureOpenAi_FieldPathArrayItemValue {
	fpaiv, err := ParseChatModelAzureOpenAi_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ChatModelAzureOpenAi_FieldTerminalPathArrayItemValue struct {
	ChatModelAzureOpenAi_FieldTerminalPath
	value interface{}
}

var _ ChatModelAzureOpenAi_FieldPathArrayItemValue = (*ChatModelAzureOpenAi_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ChatModel_AzureOpenAi as interface{}
func (fpaiv *ChatModelAzureOpenAi_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ChatModelAzureOpenAi_FieldTerminalPathArrayItemValue) GetSingle(source *ChatModel_AzureOpenAi) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ChatModelAzureOpenAi_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ChatModel_AzureOpenAi))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AzureOpenAi'
func (fpaiv *ChatModelAzureOpenAi_FieldTerminalPathArrayItemValue) ContainsValue(source *ChatModel_AzureOpenAi) bool {
	slice := fpaiv.ChatModelAzureOpenAi_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ChatModelAzureOpenAi_FieldPathArrayOfValues allows storing slice of values for AzureOpenAi fields according to their type
type ChatModelAzureOpenAi_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ChatModelAzureOpenAi_FieldPath
}

func ParseChatModelAzureOpenAi_FieldPathArrayOfValues(pathStr, valuesStr string) (ChatModelAzureOpenAi_FieldPathArrayOfValues, error) {
	fp, err := ParseChatModelAzureOpenAi_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureOpenAi field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ChatModelAzureOpenAi_FieldPathArrayOfValues), nil
}

func MustParseChatModelAzureOpenAi_FieldPathArrayOfValues(pathStr, valuesStr string) ChatModelAzureOpenAi_FieldPathArrayOfValues {
	fpaov, err := ParseChatModelAzureOpenAi_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ChatModelAzureOpenAi_FieldTerminalPathArrayOfValues struct {
	ChatModelAzureOpenAi_FieldTerminalPath
	values interface{}
}

var _ ChatModelAzureOpenAi_FieldPathArrayOfValues = (*ChatModelAzureOpenAi_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ChatModelAzureOpenAi_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ChatModelAzureOpenAi_FieldPathSelectorEndpoint:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ChatModelAzureOpenAi_FieldPathSelectorApiKey:
		for _, v := range fpaov.values.([]*secrets_secret.Reference) {
			values = append(values, v)
		}
	case ChatModelAzureOpenAi_FieldPathSelectorModelName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ChatModelAzureOpenAi_FieldPathSelectorNativeAzureApiCompatible:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ChatModelAzureOpenAi_FieldTerminalPathArrayOfValues) AsEndpointArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ChatModelAzureOpenAi_FieldTerminalPathArrayOfValues) AsApiKeyArrayOfValues() ([]*secrets_secret.Reference, bool) {
	res, ok := fpaov.values.([]*secrets_secret.Reference)
	return res, ok
}
func (fpaov *ChatModelAzureOpenAi_FieldTerminalPathArrayOfValues) AsModelNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ChatModelAzureOpenAi_FieldTerminalPathArrayOfValues) AsNativeAzureApiCompatibleArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
