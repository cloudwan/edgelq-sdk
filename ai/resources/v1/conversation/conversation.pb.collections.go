// Code generated by protoc-gen-goten-resource
// Resource: Conversation
// DO NOT EDIT!!!

package conversation

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1/user"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &iam_user.User{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

type ConversationList []*Conversation

func (l ConversationList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Conversation))
}

func (l ConversationList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ConversationList)...)
}

func (l ConversationList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConversationList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ConversationList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Conversation)
}

func (l ConversationList) Length() int {
	return len(l)
}

type ConversationChangeList []*ConversationChange

func (l ConversationChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ConversationChange))
}

func (l ConversationChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ConversationChangeList)...)
}

func (l ConversationChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConversationChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ConversationChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ConversationChange)
}

func (l ConversationChangeList) Length() int {
	return len(l)
}

type ConversationNameList []*Name

func (l ConversationNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ConversationNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ConversationNameList)...)
}

func (l ConversationNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConversationNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ConversationNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ConversationNameList) Length() int {
	return len(l)
}

type ConversationReferenceList []*Reference

func (l ConversationReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ConversationReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ConversationReferenceList)...)
}

func (l ConversationReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConversationReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ConversationReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ConversationReferenceList) Length() int {
	return len(l)
}

type ConversationParentNameList []*ParentName

func (l ConversationParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ConversationParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ConversationParentNameList)...)
}

func (l ConversationParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConversationParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ConversationParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ConversationParentNameList) Length() int {
	return len(l)
}

type ConversationParentReferenceList []*ParentReference

func (l ConversationParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ConversationParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ConversationParentReferenceList)...)
}

func (l ConversationParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConversationParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ConversationParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ConversationParentReferenceList) Length() int {
	return len(l)
}

type ConversationMap map[Name]*Conversation

func (m ConversationMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ConversationMap) Set(res gotenresource.Resource) {
	tRes := res.(*Conversation)
	m[*tRes.Name] = tRes
}

func (m ConversationMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ConversationMap) Length() int {
	return len(m)
}

func (m ConversationMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ConversationChangeMap map[Name]*ConversationChange

func (m ConversationChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ConversationChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ConversationChange)
	m[*tChange.GetConversationName()] = tChange
}

func (m ConversationChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ConversationChangeMap) Length() int {
	return len(m)
}

func (m ConversationChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
