// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/conversation.proto
// DO NOT EDIT!!!

package conversation

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	common_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/common"
	chat_model "github.com/cloudwan/edgelq-sdk/ai/resources/v1/chat_model"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1/user"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &chat_model.ChatModel{}
	_ = &common_client.Message{}
	_ = &iam_project.Project{}
	_ = &iam_user.User{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Conversation_FieldPath interface {
	gotenobject.FieldPath
	Selector() Conversation_FieldPathSelector
	Get(source *Conversation) []interface{}
	GetSingle(source *Conversation) (interface{}, bool)
	ClearValue(item *Conversation)

	// Those methods build corresponding Conversation_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Conversation_FieldPathValue
	WithIArrayOfValues(values interface{}) Conversation_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Conversation_FieldPathArrayItemValue
}

type Conversation_FieldPathSelector int32

const (
	Conversation_FieldPathSelectorName             Conversation_FieldPathSelector = 0
	Conversation_FieldPathSelectorMetadata         Conversation_FieldPathSelector = 1
	Conversation_FieldPathSelectorTitle            Conversation_FieldPathSelector = 2
	Conversation_FieldPathSelectorArchived         Conversation_FieldPathSelector = 3
	Conversation_FieldPathSelectorMessages         Conversation_FieldPathSelector = 4
	Conversation_FieldPathSelectorModelSnapshot    Conversation_FieldPathSelector = 5
	Conversation_FieldPathSelectorUsageStats       Conversation_FieldPathSelector = 6
	Conversation_FieldPathSelectorLastActivityTime Conversation_FieldPathSelector = 7
)

func (s Conversation_FieldPathSelector) String() string {
	switch s {
	case Conversation_FieldPathSelectorName:
		return "name"
	case Conversation_FieldPathSelectorMetadata:
		return "metadata"
	case Conversation_FieldPathSelectorTitle:
		return "title"
	case Conversation_FieldPathSelectorArchived:
		return "archived"
	case Conversation_FieldPathSelectorMessages:
		return "messages"
	case Conversation_FieldPathSelectorModelSnapshot:
		return "model_snapshot"
	case Conversation_FieldPathSelectorUsageStats:
		return "usage_stats"
	case Conversation_FieldPathSelectorLastActivityTime:
		return "last_activity_time"
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation: %d", s))
	}
}

func BuildConversation_FieldPath(fp gotenobject.RawFieldPath) (Conversation_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Conversation")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorName}, nil
		case "metadata":
			return &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorMetadata}, nil
		case "title":
			return &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorTitle}, nil
		case "archived":
			return &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorArchived}, nil
		case "messages":
			return &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorMessages}, nil
		case "model_snapshot", "modelSnapshot", "model-snapshot":
			return &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorModelSnapshot}, nil
		case "usage_stats", "usageStats", "usage-stats":
			return &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorUsageStats}, nil
		case "last_activity_time", "lastActivityTime", "last-activity-time":
			return &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorLastActivityTime}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Conversation_FieldSubPath{selector: Conversation_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "model_snapshot", "modelSnapshot", "model-snapshot":
			if subpath, err := BuildConversationModelSnapshot_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Conversation_FieldSubPath{selector: Conversation_FieldPathSelectorModelSnapshot, subPath: subpath}, nil
			}
		case "usage_stats", "usageStats", "usage-stats":
			if subpath, err := BuildConversationUsageStats_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Conversation_FieldSubPath{selector: Conversation_FieldPathSelectorUsageStats, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Conversation", fp)
}

func ParseConversation_FieldPath(rawField string) (Conversation_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConversation_FieldPath(fp)
}

func MustParseConversation_FieldPath(rawField string) Conversation_FieldPath {
	fp, err := ParseConversation_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Conversation_FieldTerminalPath struct {
	selector Conversation_FieldPathSelector
}

var _ Conversation_FieldPath = (*Conversation_FieldTerminalPath)(nil)

func (fp *Conversation_FieldTerminalPath) Selector() Conversation_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Conversation_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Conversation_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Conversation
func (fp *Conversation_FieldTerminalPath) Get(source *Conversation) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Conversation_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Conversation_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Conversation_FieldPathSelectorTitle:
			values = append(values, source.Title)
		case Conversation_FieldPathSelectorArchived:
			values = append(values, source.Archived)
		case Conversation_FieldPathSelectorMessages:
			for _, value := range source.GetMessages() {
				values = append(values, value)
			}
		case Conversation_FieldPathSelectorModelSnapshot:
			if source.ModelSnapshot != nil {
				values = append(values, source.ModelSnapshot)
			}
		case Conversation_FieldPathSelectorUsageStats:
			if source.UsageStats != nil {
				values = append(values, source.UsageStats)
			}
		case Conversation_FieldPathSelectorLastActivityTime:
			if source.LastActivityTime != nil {
				values = append(values, source.LastActivityTime)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Conversation: %d", fp.selector))
		}
	}
	return
}

func (fp *Conversation_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Conversation))
}

// GetSingle returns value pointed by specific field of from source Conversation
func (fp *Conversation_FieldTerminalPath) GetSingle(source *Conversation) (interface{}, bool) {
	switch fp.selector {
	case Conversation_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Conversation_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Conversation_FieldPathSelectorTitle:
		return source.GetTitle(), source != nil
	case Conversation_FieldPathSelectorArchived:
		return source.GetArchived(), source != nil
	case Conversation_FieldPathSelectorMessages:
		res := source.GetMessages()
		return res, res != nil
	case Conversation_FieldPathSelectorModelSnapshot:
		res := source.GetModelSnapshot()
		return res, res != nil
	case Conversation_FieldPathSelectorUsageStats:
		res := source.GetUsageStats()
		return res, res != nil
	case Conversation_FieldPathSelectorLastActivityTime:
		res := source.GetLastActivityTime()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation: %d", fp.selector))
	}
}

func (fp *Conversation_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Conversation))
}

// GetDefault returns a default value of the field type
func (fp *Conversation_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Conversation_FieldPathSelectorName:
		return (*Name)(nil)
	case Conversation_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case Conversation_FieldPathSelectorTitle:
		return ""
	case Conversation_FieldPathSelectorArchived:
		return false
	case Conversation_FieldPathSelectorMessages:
		return ([]*common_client.Message)(nil)
	case Conversation_FieldPathSelectorModelSnapshot:
		return (*Conversation_ModelSnapshot)(nil)
	case Conversation_FieldPathSelectorUsageStats:
		return (*Conversation_UsageStats)(nil)
	case Conversation_FieldPathSelectorLastActivityTime:
		return (*timestamppb.Timestamp)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation: %d", fp.selector))
	}
}

func (fp *Conversation_FieldTerminalPath) ClearValue(item *Conversation) {
	if item != nil {
		switch fp.selector {
		case Conversation_FieldPathSelectorName:
			item.Name = nil
		case Conversation_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Conversation_FieldPathSelectorTitle:
			item.Title = ""
		case Conversation_FieldPathSelectorArchived:
			item.Archived = false
		case Conversation_FieldPathSelectorMessages:
			item.Messages = nil
		case Conversation_FieldPathSelectorModelSnapshot:
			item.ModelSnapshot = nil
		case Conversation_FieldPathSelectorUsageStats:
			item.UsageStats = nil
		case Conversation_FieldPathSelectorLastActivityTime:
			item.LastActivityTime = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Conversation: %d", fp.selector))
		}
	}
}

func (fp *Conversation_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Conversation))
}

// IsLeaf - whether field path is holds simple value
func (fp *Conversation_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Conversation_FieldPathSelectorName ||
		fp.selector == Conversation_FieldPathSelectorTitle ||
		fp.selector == Conversation_FieldPathSelectorArchived ||
		fp.selector == Conversation_FieldPathSelectorMessages ||
		fp.selector == Conversation_FieldPathSelectorLastActivityTime
}

func (fp *Conversation_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Conversation_FieldTerminalPath) WithIValue(value interface{}) Conversation_FieldPathValue {
	switch fp.selector {
	case Conversation_FieldPathSelectorName:
		return &Conversation_FieldTerminalPathValue{Conversation_FieldTerminalPath: *fp, value: value.(*Name)}
	case Conversation_FieldPathSelectorMetadata:
		return &Conversation_FieldTerminalPathValue{Conversation_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case Conversation_FieldPathSelectorTitle:
		return &Conversation_FieldTerminalPathValue{Conversation_FieldTerminalPath: *fp, value: value.(string)}
	case Conversation_FieldPathSelectorArchived:
		return &Conversation_FieldTerminalPathValue{Conversation_FieldTerminalPath: *fp, value: value.(bool)}
	case Conversation_FieldPathSelectorMessages:
		return &Conversation_FieldTerminalPathValue{Conversation_FieldTerminalPath: *fp, value: value.([]*common_client.Message)}
	case Conversation_FieldPathSelectorModelSnapshot:
		return &Conversation_FieldTerminalPathValue{Conversation_FieldTerminalPath: *fp, value: value.(*Conversation_ModelSnapshot)}
	case Conversation_FieldPathSelectorUsageStats:
		return &Conversation_FieldTerminalPathValue{Conversation_FieldTerminalPath: *fp, value: value.(*Conversation_UsageStats)}
	case Conversation_FieldPathSelectorLastActivityTime:
		return &Conversation_FieldTerminalPathValue{Conversation_FieldTerminalPath: *fp, value: value.(*timestamppb.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation: %d", fp.selector))
	}
}

func (fp *Conversation_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Conversation_FieldTerminalPath) WithIArrayOfValues(values interface{}) Conversation_FieldPathArrayOfValues {
	fpaov := &Conversation_FieldTerminalPathArrayOfValues{Conversation_FieldTerminalPath: *fp}
	switch fp.selector {
	case Conversation_FieldPathSelectorName:
		return &Conversation_FieldTerminalPathArrayOfValues{Conversation_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Conversation_FieldPathSelectorMetadata:
		return &Conversation_FieldTerminalPathArrayOfValues{Conversation_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case Conversation_FieldPathSelectorTitle:
		return &Conversation_FieldTerminalPathArrayOfValues{Conversation_FieldTerminalPath: *fp, values: values.([]string)}
	case Conversation_FieldPathSelectorArchived:
		return &Conversation_FieldTerminalPathArrayOfValues{Conversation_FieldTerminalPath: *fp, values: values.([]bool)}
	case Conversation_FieldPathSelectorMessages:
		return &Conversation_FieldTerminalPathArrayOfValues{Conversation_FieldTerminalPath: *fp, values: values.([][]*common_client.Message)}
	case Conversation_FieldPathSelectorModelSnapshot:
		return &Conversation_FieldTerminalPathArrayOfValues{Conversation_FieldTerminalPath: *fp, values: values.([]*Conversation_ModelSnapshot)}
	case Conversation_FieldPathSelectorUsageStats:
		return &Conversation_FieldTerminalPathArrayOfValues{Conversation_FieldTerminalPath: *fp, values: values.([]*Conversation_UsageStats)}
	case Conversation_FieldPathSelectorLastActivityTime:
		return &Conversation_FieldTerminalPathArrayOfValues{Conversation_FieldTerminalPath: *fp, values: values.([]*timestamppb.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation: %d", fp.selector))
	}
	return fpaov
}

func (fp *Conversation_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Conversation_FieldTerminalPath) WithIArrayItemValue(value interface{}) Conversation_FieldPathArrayItemValue {
	switch fp.selector {
	case Conversation_FieldPathSelectorMessages:
		return &Conversation_FieldTerminalPathArrayItemValue{Conversation_FieldTerminalPath: *fp, value: value.(*common_client.Message)}
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation: %d", fp.selector))
	}
}

func (fp *Conversation_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Conversation_FieldSubPath struct {
	selector Conversation_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Conversation_FieldPath = (*Conversation_FieldSubPath)(nil)

func (fps *Conversation_FieldSubPath) Selector() Conversation_FieldPathSelector {
	return fps.selector
}
func (fps *Conversation_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *Conversation_FieldSubPath) AsModelSnapshotSubPath() (ConversationModelSnapshot_FieldPath, bool) {
	res, ok := fps.subPath.(ConversationModelSnapshot_FieldPath)
	return res, ok
}
func (fps *Conversation_FieldSubPath) AsUsageStatsSubPath() (ConversationUsageStats_FieldPath, bool) {
	res, ok := fps.subPath.(ConversationUsageStats_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Conversation_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Conversation_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Conversation
func (fps *Conversation_FieldSubPath) Get(source *Conversation) (values []interface{}) {
	switch fps.selector {
	case Conversation_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case Conversation_FieldPathSelectorModelSnapshot:
		values = append(values, fps.subPath.GetRaw(source.GetModelSnapshot())...)
	case Conversation_FieldPathSelectorUsageStats:
		values = append(values, fps.subPath.GetRaw(source.GetUsageStats())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation: %d", fps.selector))
	}
	return
}

func (fps *Conversation_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Conversation))
}

// GetSingle returns value of selected field from source Conversation
func (fps *Conversation_FieldSubPath) GetSingle(source *Conversation) (interface{}, bool) {
	switch fps.selector {
	case Conversation_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Conversation_FieldPathSelectorModelSnapshot:
		if source.GetModelSnapshot() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetModelSnapshot())
	case Conversation_FieldPathSelectorUsageStats:
		if source.GetUsageStats() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetUsageStats())
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation: %d", fps.selector))
	}
}

func (fps *Conversation_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Conversation))
}

// GetDefault returns a default value of the field type
func (fps *Conversation_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Conversation_FieldSubPath) ClearValue(item *Conversation) {
	if item != nil {
		switch fps.selector {
		case Conversation_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Conversation_FieldPathSelectorModelSnapshot:
			fps.subPath.ClearValueRaw(item.ModelSnapshot)
		case Conversation_FieldPathSelectorUsageStats:
			fps.subPath.ClearValueRaw(item.UsageStats)
		default:
			panic(fmt.Sprintf("Invalid selector for Conversation: %d", fps.selector))
		}
	}
}

func (fps *Conversation_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Conversation))
}

// IsLeaf - whether field path is holds simple value
func (fps *Conversation_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Conversation_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Conversation_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Conversation_FieldSubPath) WithIValue(value interface{}) Conversation_FieldPathValue {
	return &Conversation_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Conversation_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Conversation_FieldSubPath) WithIArrayOfValues(values interface{}) Conversation_FieldPathArrayOfValues {
	return &Conversation_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Conversation_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Conversation_FieldSubPath) WithIArrayItemValue(value interface{}) Conversation_FieldPathArrayItemValue {
	return &Conversation_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Conversation_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Conversation_FieldPathValue allows storing values for Conversation fields according to their type
type Conversation_FieldPathValue interface {
	Conversation_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Conversation)
	CompareWith(*Conversation) (cmp int, comparable bool)
}

func ParseConversation_FieldPathValue(pathStr, valueStr string) (Conversation_FieldPathValue, error) {
	fp, err := ParseConversation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Conversation field path value from %s: %v", valueStr, err)
	}
	return fpv.(Conversation_FieldPathValue), nil
}

func MustParseConversation_FieldPathValue(pathStr, valueStr string) Conversation_FieldPathValue {
	fpv, err := ParseConversation_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Conversation_FieldTerminalPathValue struct {
	Conversation_FieldTerminalPath
	value interface{}
}

var _ Conversation_FieldPathValue = (*Conversation_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Conversation' as interface{}
func (fpv *Conversation_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Conversation_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Conversation_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *Conversation_FieldTerminalPathValue) AsTitleValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Conversation_FieldTerminalPathValue) AsArchivedValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *Conversation_FieldTerminalPathValue) AsMessagesValue() ([]*common_client.Message, bool) {
	res, ok := fpv.value.([]*common_client.Message)
	return res, ok
}
func (fpv *Conversation_FieldTerminalPathValue) AsModelSnapshotValue() (*Conversation_ModelSnapshot, bool) {
	res, ok := fpv.value.(*Conversation_ModelSnapshot)
	return res, ok
}
func (fpv *Conversation_FieldTerminalPathValue) AsUsageStatsValue() (*Conversation_UsageStats, bool) {
	res, ok := fpv.value.(*Conversation_UsageStats)
	return res, ok
}
func (fpv *Conversation_FieldTerminalPathValue) AsLastActivityTimeValue() (*timestamppb.Timestamp, bool) {
	res, ok := fpv.value.(*timestamppb.Timestamp)
	return res, ok
}

// SetTo stores value for selected field for object Conversation
func (fpv *Conversation_FieldTerminalPathValue) SetTo(target **Conversation) {
	if *target == nil {
		*target = new(Conversation)
	}
	switch fpv.selector {
	case Conversation_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Conversation_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case Conversation_FieldPathSelectorTitle:
		(*target).Title = fpv.value.(string)
	case Conversation_FieldPathSelectorArchived:
		(*target).Archived = fpv.value.(bool)
	case Conversation_FieldPathSelectorMessages:
		(*target).Messages = fpv.value.([]*common_client.Message)
	case Conversation_FieldPathSelectorModelSnapshot:
		(*target).ModelSnapshot = fpv.value.(*Conversation_ModelSnapshot)
	case Conversation_FieldPathSelectorUsageStats:
		(*target).UsageStats = fpv.value.(*Conversation_UsageStats)
	case Conversation_FieldPathSelectorLastActivityTime:
		(*target).LastActivityTime = fpv.value.(*timestamppb.Timestamp)
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation: %d", fpv.selector))
	}
}

func (fpv *Conversation_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Conversation)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Conversation_FieldTerminalPathValue' with the value under path in 'Conversation'.
func (fpv *Conversation_FieldTerminalPathValue) CompareWith(source *Conversation) (int, bool) {
	switch fpv.selector {
	case Conversation_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Conversation_FieldPathSelectorMetadata:
		return 0, false
	case Conversation_FieldPathSelectorTitle:
		leftValue := fpv.value.(string)
		rightValue := source.GetTitle()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Conversation_FieldPathSelectorArchived:
		leftValue := fpv.value.(bool)
		rightValue := source.GetArchived()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Conversation_FieldPathSelectorMessages:
		return 0, false
	case Conversation_FieldPathSelectorModelSnapshot:
		return 0, false
	case Conversation_FieldPathSelectorUsageStats:
		return 0, false
	case Conversation_FieldPathSelectorLastActivityTime:
		leftValue := fpv.value.(*timestamppb.Timestamp)
		rightValue := source.GetLastActivityTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation: %d", fpv.selector))
	}
}

func (fpv *Conversation_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Conversation))
}

type Conversation_FieldSubPathValue struct {
	Conversation_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Conversation_FieldPathValue = (*Conversation_FieldSubPathValue)(nil)

func (fpvs *Conversation_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Conversation_FieldSubPathValue) AsModelSnapshotPathValue() (ConversationModelSnapshot_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConversationModelSnapshot_FieldPathValue)
	return res, ok
}
func (fpvs *Conversation_FieldSubPathValue) AsUsageStatsPathValue() (ConversationUsageStats_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConversationUsageStats_FieldPathValue)
	return res, ok
}

func (fpvs *Conversation_FieldSubPathValue) SetTo(target **Conversation) {
	if *target == nil {
		*target = new(Conversation)
	}
	switch fpvs.Selector() {
	case Conversation_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Conversation_FieldPathSelectorModelSnapshot:
		fpvs.subPathValue.(ConversationModelSnapshot_FieldPathValue).SetTo(&(*target).ModelSnapshot)
	case Conversation_FieldPathSelectorUsageStats:
		fpvs.subPathValue.(ConversationUsageStats_FieldPathValue).SetTo(&(*target).UsageStats)
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation: %d", fpvs.Selector()))
	}
}

func (fpvs *Conversation_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Conversation)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Conversation_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Conversation_FieldSubPathValue) CompareWith(source *Conversation) (int, bool) {
	switch fpvs.Selector() {
	case Conversation_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Conversation_FieldPathSelectorModelSnapshot:
		return fpvs.subPathValue.(ConversationModelSnapshot_FieldPathValue).CompareWith(source.GetModelSnapshot())
	case Conversation_FieldPathSelectorUsageStats:
		return fpvs.subPathValue.(ConversationUsageStats_FieldPathValue).CompareWith(source.GetUsageStats())
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation: %d", fpvs.Selector()))
	}
}

func (fpvs *Conversation_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Conversation))
}

// Conversation_FieldPathArrayItemValue allows storing single item in Path-specific values for Conversation according to their type
// Present only for array (repeated) types.
type Conversation_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Conversation_FieldPath
	ContainsValue(*Conversation) bool
}

// ParseConversation_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConversation_FieldPathArrayItemValue(pathStr, valueStr string) (Conversation_FieldPathArrayItemValue, error) {
	fp, err := ParseConversation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Conversation field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Conversation_FieldPathArrayItemValue), nil
}

func MustParseConversation_FieldPathArrayItemValue(pathStr, valueStr string) Conversation_FieldPathArrayItemValue {
	fpaiv, err := ParseConversation_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Conversation_FieldTerminalPathArrayItemValue struct {
	Conversation_FieldTerminalPath
	value interface{}
}

var _ Conversation_FieldPathArrayItemValue = (*Conversation_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Conversation as interface{}
func (fpaiv *Conversation_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Conversation_FieldTerminalPathArrayItemValue) AsMessagesItemValue() (*common_client.Message, bool) {
	res, ok := fpaiv.value.(*common_client.Message)
	return res, ok
}

func (fpaiv *Conversation_FieldTerminalPathArrayItemValue) GetSingle(source *Conversation) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Conversation_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Conversation))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Conversation'
func (fpaiv *Conversation_FieldTerminalPathArrayItemValue) ContainsValue(source *Conversation) bool {
	slice := fpaiv.Conversation_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Conversation_FieldSubPathArrayItemValue struct {
	Conversation_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Conversation_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Conversation_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Conversation_FieldSubPathArrayItemValue) AsModelSnapshotPathItemValue() (ConversationModelSnapshot_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConversationModelSnapshot_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Conversation_FieldSubPathArrayItemValue) AsUsageStatsPathItemValue() (ConversationUsageStats_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConversationUsageStats_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Conversation'
func (fpaivs *Conversation_FieldSubPathArrayItemValue) ContainsValue(source *Conversation) bool {
	switch fpaivs.Selector() {
	case Conversation_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Conversation_FieldPathSelectorModelSnapshot:
		return fpaivs.subPathItemValue.(ConversationModelSnapshot_FieldPathArrayItemValue).ContainsValue(source.GetModelSnapshot())
	case Conversation_FieldPathSelectorUsageStats:
		return fpaivs.subPathItemValue.(ConversationUsageStats_FieldPathArrayItemValue).ContainsValue(source.GetUsageStats())
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation: %d", fpaivs.Selector()))
	}
}

// Conversation_FieldPathArrayOfValues allows storing slice of values for Conversation fields according to their type
type Conversation_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Conversation_FieldPath
}

func ParseConversation_FieldPathArrayOfValues(pathStr, valuesStr string) (Conversation_FieldPathArrayOfValues, error) {
	fp, err := ParseConversation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Conversation field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Conversation_FieldPathArrayOfValues), nil
}

func MustParseConversation_FieldPathArrayOfValues(pathStr, valuesStr string) Conversation_FieldPathArrayOfValues {
	fpaov, err := ParseConversation_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Conversation_FieldTerminalPathArrayOfValues struct {
	Conversation_FieldTerminalPath
	values interface{}
}

var _ Conversation_FieldPathArrayOfValues = (*Conversation_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Conversation_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Conversation_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Conversation_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case Conversation_FieldPathSelectorTitle:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Conversation_FieldPathSelectorArchived:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case Conversation_FieldPathSelectorMessages:
		for _, v := range fpaov.values.([][]*common_client.Message) {
			values = append(values, v)
		}
	case Conversation_FieldPathSelectorModelSnapshot:
		for _, v := range fpaov.values.([]*Conversation_ModelSnapshot) {
			values = append(values, v)
		}
	case Conversation_FieldPathSelectorUsageStats:
		for _, v := range fpaov.values.([]*Conversation_UsageStats) {
			values = append(values, v)
		}
	case Conversation_FieldPathSelectorLastActivityTime:
		for _, v := range fpaov.values.([]*timestamppb.Timestamp) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Conversation_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Conversation_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *Conversation_FieldTerminalPathArrayOfValues) AsTitleArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Conversation_FieldTerminalPathArrayOfValues) AsArchivedArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *Conversation_FieldTerminalPathArrayOfValues) AsMessagesArrayOfValues() ([][]*common_client.Message, bool) {
	res, ok := fpaov.values.([][]*common_client.Message)
	return res, ok
}
func (fpaov *Conversation_FieldTerminalPathArrayOfValues) AsModelSnapshotArrayOfValues() ([]*Conversation_ModelSnapshot, bool) {
	res, ok := fpaov.values.([]*Conversation_ModelSnapshot)
	return res, ok
}
func (fpaov *Conversation_FieldTerminalPathArrayOfValues) AsUsageStatsArrayOfValues() ([]*Conversation_UsageStats, bool) {
	res, ok := fpaov.values.([]*Conversation_UsageStats)
	return res, ok
}
func (fpaov *Conversation_FieldTerminalPathArrayOfValues) AsLastActivityTimeArrayOfValues() ([]*timestamppb.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamppb.Timestamp)
	return res, ok
}

type Conversation_FieldSubPathArrayOfValues struct {
	Conversation_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Conversation_FieldPathArrayOfValues = (*Conversation_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Conversation_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Conversation_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Conversation_FieldSubPathArrayOfValues) AsModelSnapshotPathArrayOfValues() (ConversationModelSnapshot_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConversationModelSnapshot_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Conversation_FieldSubPathArrayOfValues) AsUsageStatsPathArrayOfValues() (ConversationUsageStats_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConversationUsageStats_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConversationModelSnapshot_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConversationModelSnapshot_FieldPathSelector
	Get(source *Conversation_ModelSnapshot) []interface{}
	GetSingle(source *Conversation_ModelSnapshot) (interface{}, bool)
	ClearValue(item *Conversation_ModelSnapshot)

	// Those methods build corresponding ConversationModelSnapshot_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConversationModelSnapshot_FieldPathValue
	WithIArrayOfValues(values interface{}) ConversationModelSnapshot_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConversationModelSnapshot_FieldPathArrayItemValue
}

type ConversationModelSnapshot_FieldPathSelector int32

const (
	ConversationModelSnapshot_FieldPathSelectorModel       ConversationModelSnapshot_FieldPathSelector = 0
	ConversationModelSnapshot_FieldPathSelectorModelUsed   ConversationModelSnapshot_FieldPathSelector = 1
	ConversationModelSnapshot_FieldPathSelectorTemperature ConversationModelSnapshot_FieldPathSelector = 2
	ConversationModelSnapshot_FieldPathSelectorMaxTokens   ConversationModelSnapshot_FieldPathSelector = 3
)

func (s ConversationModelSnapshot_FieldPathSelector) String() string {
	switch s {
	case ConversationModelSnapshot_FieldPathSelectorModel:
		return "model"
	case ConversationModelSnapshot_FieldPathSelectorModelUsed:
		return "model_used"
	case ConversationModelSnapshot_FieldPathSelectorTemperature:
		return "temperature"
	case ConversationModelSnapshot_FieldPathSelectorMaxTokens:
		return "max_tokens"
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_ModelSnapshot: %d", s))
	}
}

func BuildConversationModelSnapshot_FieldPath(fp gotenobject.RawFieldPath) (ConversationModelSnapshot_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Conversation_ModelSnapshot")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "model":
			return &ConversationModelSnapshot_FieldTerminalPath{selector: ConversationModelSnapshot_FieldPathSelectorModel}, nil
		case "model_used", "modelUsed", "model-used":
			return &ConversationModelSnapshot_FieldTerminalPath{selector: ConversationModelSnapshot_FieldPathSelectorModelUsed}, nil
		case "temperature":
			return &ConversationModelSnapshot_FieldTerminalPath{selector: ConversationModelSnapshot_FieldPathSelectorTemperature}, nil
		case "max_tokens", "maxTokens", "max-tokens":
			return &ConversationModelSnapshot_FieldTerminalPath{selector: ConversationModelSnapshot_FieldPathSelectorMaxTokens}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Conversation_ModelSnapshot", fp)
}

func ParseConversationModelSnapshot_FieldPath(rawField string) (ConversationModelSnapshot_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConversationModelSnapshot_FieldPath(fp)
}

func MustParseConversationModelSnapshot_FieldPath(rawField string) ConversationModelSnapshot_FieldPath {
	fp, err := ParseConversationModelSnapshot_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConversationModelSnapshot_FieldTerminalPath struct {
	selector ConversationModelSnapshot_FieldPathSelector
}

var _ ConversationModelSnapshot_FieldPath = (*ConversationModelSnapshot_FieldTerminalPath)(nil)

func (fp *ConversationModelSnapshot_FieldTerminalPath) Selector() ConversationModelSnapshot_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConversationModelSnapshot_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConversationModelSnapshot_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Conversation_ModelSnapshot
func (fp *ConversationModelSnapshot_FieldTerminalPath) Get(source *Conversation_ModelSnapshot) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConversationModelSnapshot_FieldPathSelectorModel:
			if source.Model != nil {
				values = append(values, source.Model)
			}
		case ConversationModelSnapshot_FieldPathSelectorModelUsed:
			values = append(values, source.ModelUsed)
		case ConversationModelSnapshot_FieldPathSelectorTemperature:
			values = append(values, source.Temperature)
		case ConversationModelSnapshot_FieldPathSelectorMaxTokens:
			values = append(values, source.MaxTokens)
		default:
			panic(fmt.Sprintf("Invalid selector for Conversation_ModelSnapshot: %d", fp.selector))
		}
	}
	return
}

func (fp *ConversationModelSnapshot_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Conversation_ModelSnapshot))
}

// GetSingle returns value pointed by specific field of from source Conversation_ModelSnapshot
func (fp *ConversationModelSnapshot_FieldTerminalPath) GetSingle(source *Conversation_ModelSnapshot) (interface{}, bool) {
	switch fp.selector {
	case ConversationModelSnapshot_FieldPathSelectorModel:
		res := source.GetModel()
		return res, res != nil
	case ConversationModelSnapshot_FieldPathSelectorModelUsed:
		return source.GetModelUsed(), source != nil
	case ConversationModelSnapshot_FieldPathSelectorTemperature:
		return source.GetTemperature(), source != nil
	case ConversationModelSnapshot_FieldPathSelectorMaxTokens:
		return source.GetMaxTokens(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_ModelSnapshot: %d", fp.selector))
	}
}

func (fp *ConversationModelSnapshot_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Conversation_ModelSnapshot))
}

// GetDefault returns a default value of the field type
func (fp *ConversationModelSnapshot_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConversationModelSnapshot_FieldPathSelectorModel:
		return (*chat_model.Name)(nil)
	case ConversationModelSnapshot_FieldPathSelectorModelUsed:
		return ""
	case ConversationModelSnapshot_FieldPathSelectorTemperature:
		return float32(0)
	case ConversationModelSnapshot_FieldPathSelectorMaxTokens:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_ModelSnapshot: %d", fp.selector))
	}
}

func (fp *ConversationModelSnapshot_FieldTerminalPath) ClearValue(item *Conversation_ModelSnapshot) {
	if item != nil {
		switch fp.selector {
		case ConversationModelSnapshot_FieldPathSelectorModel:
			item.Model = nil
		case ConversationModelSnapshot_FieldPathSelectorModelUsed:
			item.ModelUsed = ""
		case ConversationModelSnapshot_FieldPathSelectorTemperature:
			item.Temperature = float32(0)
		case ConversationModelSnapshot_FieldPathSelectorMaxTokens:
			item.MaxTokens = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Conversation_ModelSnapshot: %d", fp.selector))
		}
	}
}

func (fp *ConversationModelSnapshot_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Conversation_ModelSnapshot))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConversationModelSnapshot_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConversationModelSnapshot_FieldPathSelectorModel ||
		fp.selector == ConversationModelSnapshot_FieldPathSelectorModelUsed ||
		fp.selector == ConversationModelSnapshot_FieldPathSelectorTemperature ||
		fp.selector == ConversationModelSnapshot_FieldPathSelectorMaxTokens
}

func (fp *ConversationModelSnapshot_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConversationModelSnapshot_FieldTerminalPath) WithIValue(value interface{}) ConversationModelSnapshot_FieldPathValue {
	switch fp.selector {
	case ConversationModelSnapshot_FieldPathSelectorModel:
		return &ConversationModelSnapshot_FieldTerminalPathValue{ConversationModelSnapshot_FieldTerminalPath: *fp, value: value.(*chat_model.Name)}
	case ConversationModelSnapshot_FieldPathSelectorModelUsed:
		return &ConversationModelSnapshot_FieldTerminalPathValue{ConversationModelSnapshot_FieldTerminalPath: *fp, value: value.(string)}
	case ConversationModelSnapshot_FieldPathSelectorTemperature:
		return &ConversationModelSnapshot_FieldTerminalPathValue{ConversationModelSnapshot_FieldTerminalPath: *fp, value: value.(float32)}
	case ConversationModelSnapshot_FieldPathSelectorMaxTokens:
		return &ConversationModelSnapshot_FieldTerminalPathValue{ConversationModelSnapshot_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_ModelSnapshot: %d", fp.selector))
	}
}

func (fp *ConversationModelSnapshot_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConversationModelSnapshot_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConversationModelSnapshot_FieldPathArrayOfValues {
	fpaov := &ConversationModelSnapshot_FieldTerminalPathArrayOfValues{ConversationModelSnapshot_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConversationModelSnapshot_FieldPathSelectorModel:
		return &ConversationModelSnapshot_FieldTerminalPathArrayOfValues{ConversationModelSnapshot_FieldTerminalPath: *fp, values: values.([]*chat_model.Name)}
	case ConversationModelSnapshot_FieldPathSelectorModelUsed:
		return &ConversationModelSnapshot_FieldTerminalPathArrayOfValues{ConversationModelSnapshot_FieldTerminalPath: *fp, values: values.([]string)}
	case ConversationModelSnapshot_FieldPathSelectorTemperature:
		return &ConversationModelSnapshot_FieldTerminalPathArrayOfValues{ConversationModelSnapshot_FieldTerminalPath: *fp, values: values.([]float32)}
	case ConversationModelSnapshot_FieldPathSelectorMaxTokens:
		return &ConversationModelSnapshot_FieldTerminalPathArrayOfValues{ConversationModelSnapshot_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_ModelSnapshot: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConversationModelSnapshot_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConversationModelSnapshot_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConversationModelSnapshot_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_ModelSnapshot: %d", fp.selector))
	}
}

func (fp *ConversationModelSnapshot_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ConversationModelSnapshot_FieldPathValue allows storing values for ModelSnapshot fields according to their type
type ConversationModelSnapshot_FieldPathValue interface {
	ConversationModelSnapshot_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Conversation_ModelSnapshot)
	CompareWith(*Conversation_ModelSnapshot) (cmp int, comparable bool)
}

func ParseConversationModelSnapshot_FieldPathValue(pathStr, valueStr string) (ConversationModelSnapshot_FieldPathValue, error) {
	fp, err := ParseConversationModelSnapshot_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ModelSnapshot field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConversationModelSnapshot_FieldPathValue), nil
}

func MustParseConversationModelSnapshot_FieldPathValue(pathStr, valueStr string) ConversationModelSnapshot_FieldPathValue {
	fpv, err := ParseConversationModelSnapshot_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConversationModelSnapshot_FieldTerminalPathValue struct {
	ConversationModelSnapshot_FieldTerminalPath
	value interface{}
}

var _ ConversationModelSnapshot_FieldPathValue = (*ConversationModelSnapshot_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ModelSnapshot' as interface{}
func (fpv *ConversationModelSnapshot_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConversationModelSnapshot_FieldTerminalPathValue) AsModelValue() (*chat_model.Name, bool) {
	res, ok := fpv.value.(*chat_model.Name)
	return res, ok
}
func (fpv *ConversationModelSnapshot_FieldTerminalPathValue) AsModelUsedValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ConversationModelSnapshot_FieldTerminalPathValue) AsTemperatureValue() (float32, bool) {
	res, ok := fpv.value.(float32)
	return res, ok
}
func (fpv *ConversationModelSnapshot_FieldTerminalPathValue) AsMaxTokensValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ModelSnapshot
func (fpv *ConversationModelSnapshot_FieldTerminalPathValue) SetTo(target **Conversation_ModelSnapshot) {
	if *target == nil {
		*target = new(Conversation_ModelSnapshot)
	}
	switch fpv.selector {
	case ConversationModelSnapshot_FieldPathSelectorModel:
		(*target).Model = fpv.value.(*chat_model.Name)
	case ConversationModelSnapshot_FieldPathSelectorModelUsed:
		(*target).ModelUsed = fpv.value.(string)
	case ConversationModelSnapshot_FieldPathSelectorTemperature:
		(*target).Temperature = fpv.value.(float32)
	case ConversationModelSnapshot_FieldPathSelectorMaxTokens:
		(*target).MaxTokens = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_ModelSnapshot: %d", fpv.selector))
	}
}

func (fpv *ConversationModelSnapshot_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Conversation_ModelSnapshot)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConversationModelSnapshot_FieldTerminalPathValue' with the value under path in 'Conversation_ModelSnapshot'.
func (fpv *ConversationModelSnapshot_FieldTerminalPathValue) CompareWith(source *Conversation_ModelSnapshot) (int, bool) {
	switch fpv.selector {
	case ConversationModelSnapshot_FieldPathSelectorModel:
		leftValue := fpv.value.(*chat_model.Name)
		rightValue := source.GetModel()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ConversationModelSnapshot_FieldPathSelectorModelUsed:
		leftValue := fpv.value.(string)
		rightValue := source.GetModelUsed()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConversationModelSnapshot_FieldPathSelectorTemperature:
		leftValue := fpv.value.(float32)
		rightValue := source.GetTemperature()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConversationModelSnapshot_FieldPathSelectorMaxTokens:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxTokens()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_ModelSnapshot: %d", fpv.selector))
	}
}

func (fpv *ConversationModelSnapshot_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Conversation_ModelSnapshot))
}

// ConversationModelSnapshot_FieldPathArrayItemValue allows storing single item in Path-specific values for ModelSnapshot according to their type
// Present only for array (repeated) types.
type ConversationModelSnapshot_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConversationModelSnapshot_FieldPath
	ContainsValue(*Conversation_ModelSnapshot) bool
}

// ParseConversationModelSnapshot_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConversationModelSnapshot_FieldPathArrayItemValue(pathStr, valueStr string) (ConversationModelSnapshot_FieldPathArrayItemValue, error) {
	fp, err := ParseConversationModelSnapshot_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ModelSnapshot field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConversationModelSnapshot_FieldPathArrayItemValue), nil
}

func MustParseConversationModelSnapshot_FieldPathArrayItemValue(pathStr, valueStr string) ConversationModelSnapshot_FieldPathArrayItemValue {
	fpaiv, err := ParseConversationModelSnapshot_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConversationModelSnapshot_FieldTerminalPathArrayItemValue struct {
	ConversationModelSnapshot_FieldTerminalPath
	value interface{}
}

var _ ConversationModelSnapshot_FieldPathArrayItemValue = (*ConversationModelSnapshot_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Conversation_ModelSnapshot as interface{}
func (fpaiv *ConversationModelSnapshot_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConversationModelSnapshot_FieldTerminalPathArrayItemValue) GetSingle(source *Conversation_ModelSnapshot) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConversationModelSnapshot_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Conversation_ModelSnapshot))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ModelSnapshot'
func (fpaiv *ConversationModelSnapshot_FieldTerminalPathArrayItemValue) ContainsValue(source *Conversation_ModelSnapshot) bool {
	slice := fpaiv.ConversationModelSnapshot_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConversationModelSnapshot_FieldPathArrayOfValues allows storing slice of values for ModelSnapshot fields according to their type
type ConversationModelSnapshot_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConversationModelSnapshot_FieldPath
}

func ParseConversationModelSnapshot_FieldPathArrayOfValues(pathStr, valuesStr string) (ConversationModelSnapshot_FieldPathArrayOfValues, error) {
	fp, err := ParseConversationModelSnapshot_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ModelSnapshot field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConversationModelSnapshot_FieldPathArrayOfValues), nil
}

func MustParseConversationModelSnapshot_FieldPathArrayOfValues(pathStr, valuesStr string) ConversationModelSnapshot_FieldPathArrayOfValues {
	fpaov, err := ParseConversationModelSnapshot_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConversationModelSnapshot_FieldTerminalPathArrayOfValues struct {
	ConversationModelSnapshot_FieldTerminalPath
	values interface{}
}

var _ ConversationModelSnapshot_FieldPathArrayOfValues = (*ConversationModelSnapshot_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConversationModelSnapshot_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConversationModelSnapshot_FieldPathSelectorModel:
		for _, v := range fpaov.values.([]*chat_model.Name) {
			values = append(values, v)
		}
	case ConversationModelSnapshot_FieldPathSelectorModelUsed:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ConversationModelSnapshot_FieldPathSelectorTemperature:
		for _, v := range fpaov.values.([]float32) {
			values = append(values, v)
		}
	case ConversationModelSnapshot_FieldPathSelectorMaxTokens:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConversationModelSnapshot_FieldTerminalPathArrayOfValues) AsModelArrayOfValues() ([]*chat_model.Name, bool) {
	res, ok := fpaov.values.([]*chat_model.Name)
	return res, ok
}
func (fpaov *ConversationModelSnapshot_FieldTerminalPathArrayOfValues) AsModelUsedArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ConversationModelSnapshot_FieldTerminalPathArrayOfValues) AsTemperatureArrayOfValues() ([]float32, bool) {
	res, ok := fpaov.values.([]float32)
	return res, ok
}
func (fpaov *ConversationModelSnapshot_FieldTerminalPathArrayOfValues) AsMaxTokensArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConversationUsageStats_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConversationUsageStats_FieldPathSelector
	Get(source *Conversation_UsageStats) []interface{}
	GetSingle(source *Conversation_UsageStats) (interface{}, bool)
	ClearValue(item *Conversation_UsageStats)

	// Those methods build corresponding ConversationUsageStats_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConversationUsageStats_FieldPathValue
	WithIArrayOfValues(values interface{}) ConversationUsageStats_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConversationUsageStats_FieldPathArrayItemValue
}

type ConversationUsageStats_FieldPathSelector int32

const (
	ConversationUsageStats_FieldPathSelectorMessageCount      ConversationUsageStats_FieldPathSelector = 0
	ConversationUsageStats_FieldPathSelectorTotalInputTokens  ConversationUsageStats_FieldPathSelector = 1
	ConversationUsageStats_FieldPathSelectorTotalOutputTokens ConversationUsageStats_FieldPathSelector = 2
	ConversationUsageStats_FieldPathSelectorTotalTokens       ConversationUsageStats_FieldPathSelector = 3
)

func (s ConversationUsageStats_FieldPathSelector) String() string {
	switch s {
	case ConversationUsageStats_FieldPathSelectorMessageCount:
		return "message_count"
	case ConversationUsageStats_FieldPathSelectorTotalInputTokens:
		return "total_input_tokens"
	case ConversationUsageStats_FieldPathSelectorTotalOutputTokens:
		return "total_output_tokens"
	case ConversationUsageStats_FieldPathSelectorTotalTokens:
		return "total_tokens"
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_UsageStats: %d", s))
	}
}

func BuildConversationUsageStats_FieldPath(fp gotenobject.RawFieldPath) (ConversationUsageStats_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Conversation_UsageStats")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "message_count", "messageCount", "message-count":
			return &ConversationUsageStats_FieldTerminalPath{selector: ConversationUsageStats_FieldPathSelectorMessageCount}, nil
		case "total_input_tokens", "totalInputTokens", "total-input-tokens":
			return &ConversationUsageStats_FieldTerminalPath{selector: ConversationUsageStats_FieldPathSelectorTotalInputTokens}, nil
		case "total_output_tokens", "totalOutputTokens", "total-output-tokens":
			return &ConversationUsageStats_FieldTerminalPath{selector: ConversationUsageStats_FieldPathSelectorTotalOutputTokens}, nil
		case "total_tokens", "totalTokens", "total-tokens":
			return &ConversationUsageStats_FieldTerminalPath{selector: ConversationUsageStats_FieldPathSelectorTotalTokens}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Conversation_UsageStats", fp)
}

func ParseConversationUsageStats_FieldPath(rawField string) (ConversationUsageStats_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConversationUsageStats_FieldPath(fp)
}

func MustParseConversationUsageStats_FieldPath(rawField string) ConversationUsageStats_FieldPath {
	fp, err := ParseConversationUsageStats_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConversationUsageStats_FieldTerminalPath struct {
	selector ConversationUsageStats_FieldPathSelector
}

var _ ConversationUsageStats_FieldPath = (*ConversationUsageStats_FieldTerminalPath)(nil)

func (fp *ConversationUsageStats_FieldTerminalPath) Selector() ConversationUsageStats_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConversationUsageStats_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConversationUsageStats_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Conversation_UsageStats
func (fp *ConversationUsageStats_FieldTerminalPath) Get(source *Conversation_UsageStats) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConversationUsageStats_FieldPathSelectorMessageCount:
			values = append(values, source.MessageCount)
		case ConversationUsageStats_FieldPathSelectorTotalInputTokens:
			values = append(values, source.TotalInputTokens)
		case ConversationUsageStats_FieldPathSelectorTotalOutputTokens:
			values = append(values, source.TotalOutputTokens)
		case ConversationUsageStats_FieldPathSelectorTotalTokens:
			values = append(values, source.TotalTokens)
		default:
			panic(fmt.Sprintf("Invalid selector for Conversation_UsageStats: %d", fp.selector))
		}
	}
	return
}

func (fp *ConversationUsageStats_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Conversation_UsageStats))
}

// GetSingle returns value pointed by specific field of from source Conversation_UsageStats
func (fp *ConversationUsageStats_FieldTerminalPath) GetSingle(source *Conversation_UsageStats) (interface{}, bool) {
	switch fp.selector {
	case ConversationUsageStats_FieldPathSelectorMessageCount:
		return source.GetMessageCount(), source != nil
	case ConversationUsageStats_FieldPathSelectorTotalInputTokens:
		return source.GetTotalInputTokens(), source != nil
	case ConversationUsageStats_FieldPathSelectorTotalOutputTokens:
		return source.GetTotalOutputTokens(), source != nil
	case ConversationUsageStats_FieldPathSelectorTotalTokens:
		return source.GetTotalTokens(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_UsageStats: %d", fp.selector))
	}
}

func (fp *ConversationUsageStats_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Conversation_UsageStats))
}

// GetDefault returns a default value of the field type
func (fp *ConversationUsageStats_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConversationUsageStats_FieldPathSelectorMessageCount:
		return int32(0)
	case ConversationUsageStats_FieldPathSelectorTotalInputTokens:
		return int32(0)
	case ConversationUsageStats_FieldPathSelectorTotalOutputTokens:
		return int32(0)
	case ConversationUsageStats_FieldPathSelectorTotalTokens:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_UsageStats: %d", fp.selector))
	}
}

func (fp *ConversationUsageStats_FieldTerminalPath) ClearValue(item *Conversation_UsageStats) {
	if item != nil {
		switch fp.selector {
		case ConversationUsageStats_FieldPathSelectorMessageCount:
			item.MessageCount = int32(0)
		case ConversationUsageStats_FieldPathSelectorTotalInputTokens:
			item.TotalInputTokens = int32(0)
		case ConversationUsageStats_FieldPathSelectorTotalOutputTokens:
			item.TotalOutputTokens = int32(0)
		case ConversationUsageStats_FieldPathSelectorTotalTokens:
			item.TotalTokens = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Conversation_UsageStats: %d", fp.selector))
		}
	}
}

func (fp *ConversationUsageStats_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Conversation_UsageStats))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConversationUsageStats_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConversationUsageStats_FieldPathSelectorMessageCount ||
		fp.selector == ConversationUsageStats_FieldPathSelectorTotalInputTokens ||
		fp.selector == ConversationUsageStats_FieldPathSelectorTotalOutputTokens ||
		fp.selector == ConversationUsageStats_FieldPathSelectorTotalTokens
}

func (fp *ConversationUsageStats_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ConversationUsageStats_FieldTerminalPath) WithIValue(value interface{}) ConversationUsageStats_FieldPathValue {
	switch fp.selector {
	case ConversationUsageStats_FieldPathSelectorMessageCount:
		return &ConversationUsageStats_FieldTerminalPathValue{ConversationUsageStats_FieldTerminalPath: *fp, value: value.(int32)}
	case ConversationUsageStats_FieldPathSelectorTotalInputTokens:
		return &ConversationUsageStats_FieldTerminalPathValue{ConversationUsageStats_FieldTerminalPath: *fp, value: value.(int32)}
	case ConversationUsageStats_FieldPathSelectorTotalOutputTokens:
		return &ConversationUsageStats_FieldTerminalPathValue{ConversationUsageStats_FieldTerminalPath: *fp, value: value.(int32)}
	case ConversationUsageStats_FieldPathSelectorTotalTokens:
		return &ConversationUsageStats_FieldTerminalPathValue{ConversationUsageStats_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_UsageStats: %d", fp.selector))
	}
}

func (fp *ConversationUsageStats_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConversationUsageStats_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConversationUsageStats_FieldPathArrayOfValues {
	fpaov := &ConversationUsageStats_FieldTerminalPathArrayOfValues{ConversationUsageStats_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConversationUsageStats_FieldPathSelectorMessageCount:
		return &ConversationUsageStats_FieldTerminalPathArrayOfValues{ConversationUsageStats_FieldTerminalPath: *fp, values: values.([]int32)}
	case ConversationUsageStats_FieldPathSelectorTotalInputTokens:
		return &ConversationUsageStats_FieldTerminalPathArrayOfValues{ConversationUsageStats_FieldTerminalPath: *fp, values: values.([]int32)}
	case ConversationUsageStats_FieldPathSelectorTotalOutputTokens:
		return &ConversationUsageStats_FieldTerminalPathArrayOfValues{ConversationUsageStats_FieldTerminalPath: *fp, values: values.([]int32)}
	case ConversationUsageStats_FieldPathSelectorTotalTokens:
		return &ConversationUsageStats_FieldTerminalPathArrayOfValues{ConversationUsageStats_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_UsageStats: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConversationUsageStats_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConversationUsageStats_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConversationUsageStats_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_UsageStats: %d", fp.selector))
	}
}

func (fp *ConversationUsageStats_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ConversationUsageStats_FieldPathValue allows storing values for UsageStats fields according to their type
type ConversationUsageStats_FieldPathValue interface {
	ConversationUsageStats_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Conversation_UsageStats)
	CompareWith(*Conversation_UsageStats) (cmp int, comparable bool)
}

func ParseConversationUsageStats_FieldPathValue(pathStr, valueStr string) (ConversationUsageStats_FieldPathValue, error) {
	fp, err := ParseConversationUsageStats_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UsageStats field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConversationUsageStats_FieldPathValue), nil
}

func MustParseConversationUsageStats_FieldPathValue(pathStr, valueStr string) ConversationUsageStats_FieldPathValue {
	fpv, err := ParseConversationUsageStats_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConversationUsageStats_FieldTerminalPathValue struct {
	ConversationUsageStats_FieldTerminalPath
	value interface{}
}

var _ ConversationUsageStats_FieldPathValue = (*ConversationUsageStats_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UsageStats' as interface{}
func (fpv *ConversationUsageStats_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConversationUsageStats_FieldTerminalPathValue) AsMessageCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ConversationUsageStats_FieldTerminalPathValue) AsTotalInputTokensValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ConversationUsageStats_FieldTerminalPathValue) AsTotalOutputTokensValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ConversationUsageStats_FieldTerminalPathValue) AsTotalTokensValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object UsageStats
func (fpv *ConversationUsageStats_FieldTerminalPathValue) SetTo(target **Conversation_UsageStats) {
	if *target == nil {
		*target = new(Conversation_UsageStats)
	}
	switch fpv.selector {
	case ConversationUsageStats_FieldPathSelectorMessageCount:
		(*target).MessageCount = fpv.value.(int32)
	case ConversationUsageStats_FieldPathSelectorTotalInputTokens:
		(*target).TotalInputTokens = fpv.value.(int32)
	case ConversationUsageStats_FieldPathSelectorTotalOutputTokens:
		(*target).TotalOutputTokens = fpv.value.(int32)
	case ConversationUsageStats_FieldPathSelectorTotalTokens:
		(*target).TotalTokens = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_UsageStats: %d", fpv.selector))
	}
}

func (fpv *ConversationUsageStats_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Conversation_UsageStats)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConversationUsageStats_FieldTerminalPathValue' with the value under path in 'Conversation_UsageStats'.
func (fpv *ConversationUsageStats_FieldTerminalPathValue) CompareWith(source *Conversation_UsageStats) (int, bool) {
	switch fpv.selector {
	case ConversationUsageStats_FieldPathSelectorMessageCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMessageCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConversationUsageStats_FieldPathSelectorTotalInputTokens:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalInputTokens()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConversationUsageStats_FieldPathSelectorTotalOutputTokens:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalOutputTokens()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConversationUsageStats_FieldPathSelectorTotalTokens:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalTokens()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Conversation_UsageStats: %d", fpv.selector))
	}
}

func (fpv *ConversationUsageStats_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Conversation_UsageStats))
}

// ConversationUsageStats_FieldPathArrayItemValue allows storing single item in Path-specific values for UsageStats according to their type
// Present only for array (repeated) types.
type ConversationUsageStats_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConversationUsageStats_FieldPath
	ContainsValue(*Conversation_UsageStats) bool
}

// ParseConversationUsageStats_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConversationUsageStats_FieldPathArrayItemValue(pathStr, valueStr string) (ConversationUsageStats_FieldPathArrayItemValue, error) {
	fp, err := ParseConversationUsageStats_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UsageStats field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConversationUsageStats_FieldPathArrayItemValue), nil
}

func MustParseConversationUsageStats_FieldPathArrayItemValue(pathStr, valueStr string) ConversationUsageStats_FieldPathArrayItemValue {
	fpaiv, err := ParseConversationUsageStats_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConversationUsageStats_FieldTerminalPathArrayItemValue struct {
	ConversationUsageStats_FieldTerminalPath
	value interface{}
}

var _ ConversationUsageStats_FieldPathArrayItemValue = (*ConversationUsageStats_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Conversation_UsageStats as interface{}
func (fpaiv *ConversationUsageStats_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConversationUsageStats_FieldTerminalPathArrayItemValue) GetSingle(source *Conversation_UsageStats) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConversationUsageStats_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Conversation_UsageStats))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UsageStats'
func (fpaiv *ConversationUsageStats_FieldTerminalPathArrayItemValue) ContainsValue(source *Conversation_UsageStats) bool {
	slice := fpaiv.ConversationUsageStats_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConversationUsageStats_FieldPathArrayOfValues allows storing slice of values for UsageStats fields according to their type
type ConversationUsageStats_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConversationUsageStats_FieldPath
}

func ParseConversationUsageStats_FieldPathArrayOfValues(pathStr, valuesStr string) (ConversationUsageStats_FieldPathArrayOfValues, error) {
	fp, err := ParseConversationUsageStats_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UsageStats field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConversationUsageStats_FieldPathArrayOfValues), nil
}

func MustParseConversationUsageStats_FieldPathArrayOfValues(pathStr, valuesStr string) ConversationUsageStats_FieldPathArrayOfValues {
	fpaov, err := ParseConversationUsageStats_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConversationUsageStats_FieldTerminalPathArrayOfValues struct {
	ConversationUsageStats_FieldTerminalPath
	values interface{}
}

var _ ConversationUsageStats_FieldPathArrayOfValues = (*ConversationUsageStats_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConversationUsageStats_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConversationUsageStats_FieldPathSelectorMessageCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ConversationUsageStats_FieldPathSelectorTotalInputTokens:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ConversationUsageStats_FieldPathSelectorTotalOutputTokens:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ConversationUsageStats_FieldPathSelectorTotalTokens:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConversationUsageStats_FieldTerminalPathArrayOfValues) AsMessageCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ConversationUsageStats_FieldTerminalPathArrayOfValues) AsTotalInputTokensArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ConversationUsageStats_FieldTerminalPathArrayOfValues) AsTotalOutputTokensArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ConversationUsageStats_FieldTerminalPathArrayOfValues) AsTotalTokensArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
