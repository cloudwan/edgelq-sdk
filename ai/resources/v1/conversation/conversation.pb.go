// Code generated by protoc-gen-goten-go
// File: edgelq/ai/proto/v1/conversation.proto
// DO NOT EDIT!!!

package conversation

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	common_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/common"
	chat_model "github.com/cloudwan/edgelq-sdk/ai/resources/v1/chat_model"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1/user"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &chat_model.ChatModel{}
	_ = &common_client.Message{}
	_ = &iam_project.Project{}
	_ = &iam_user.User{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Conversation Resource
type Conversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Conversation
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Display title for the conversation
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Whether the conversation has been archived
	Archived bool `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	// All messages in the conversation history
	Messages []*common_client.Message `protobuf:"bytes,5,rep,name=messages,proto3" json:"messages,omitempty"`
	// Model configuration snapshot
	ModelSnapshot *Conversation_ModelSnapshot `protobuf:"bytes,6,opt,name=model_snapshot,json=modelSnapshot,proto3" json:"model_snapshot,omitempty"`
	// Accumulated usage statistics
	UsageStats *Conversation_UsageStats `protobuf:"bytes,7,opt,name=usage_stats,json=usageStats,proto3" json:"usage_stats,omitempty"`
	// Timestamp of the last activity
	LastActivityTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_activity_time,json=lastActivityTime,proto3" json:"last_activity_time,omitempty"`
}

func (m *Conversation) Reset() {
	*m = Conversation{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Conversation) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Conversation) ProtoMessage() {}

func (m *Conversation) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Conversation) GotenMessage() {}

// Deprecated, Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_conversation_proto_rawDescGZIP(), []int{0}
}

func (m *Conversation) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Conversation) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Conversation) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Conversation) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Conversation) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Conversation) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Conversation) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Conversation) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Conversation) GetMessages() []*common_client.Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *Conversation) GetModelSnapshot() *Conversation_ModelSnapshot {
	if m != nil {
		return m.ModelSnapshot
	}
	return nil
}

func (m *Conversation) GetUsageStats() *Conversation_UsageStats {
	if m != nil {
		return m.UsageStats
	}
	return nil
}

func (m *Conversation) GetLastActivityTime() *timestamppb.Timestamp {
	if m != nil {
		return m.LastActivityTime
	}
	return nil
}

func (m *Conversation) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Conversation"))
	}
	m.Name = fv
}

func (m *Conversation) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Conversation"))
	}
	m.Metadata = fv
}

func (m *Conversation) SetTitle(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Title", "Conversation"))
	}
	m.Title = fv
}

func (m *Conversation) SetArchived(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Archived", "Conversation"))
	}
	m.Archived = fv
}

func (m *Conversation) SetMessages(fv []*common_client.Message) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Messages", "Conversation"))
	}
	m.Messages = fv
}

func (m *Conversation) SetModelSnapshot(fv *Conversation_ModelSnapshot) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ModelSnapshot", "Conversation"))
	}
	m.ModelSnapshot = fv
}

func (m *Conversation) SetUsageStats(fv *Conversation_UsageStats) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UsageStats", "Conversation"))
	}
	m.UsageStats = fv
}

func (m *Conversation) SetLastActivityTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastActivityTime", "Conversation"))
	}
	m.LastActivityTime = fv
}

// Model configuration snapshot
type Conversation_ModelSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Model resource used
	Model *chat_model.Name `protobuf:"bytes,1,opt,customtype=Name,name=model,proto3" json:"model,omitempty"`
	// Actual model ID used (if overridden)
	ModelUsed string `protobuf:"bytes,2,opt,name=model_used,json=modelUsed,proto3" json:"model_used,omitempty"`
	// Parameters used
	Temperature float32 `protobuf:"fixed32,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
	MaxTokens   int32   `protobuf:"varint,4,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
}

func (m *Conversation_ModelSnapshot) Reset() {
	*m = Conversation_ModelSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Conversation_ModelSnapshot) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Conversation_ModelSnapshot) ProtoMessage() {}

func (m *Conversation_ModelSnapshot) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Conversation_ModelSnapshot) GotenMessage() {}

// Deprecated, Use Conversation_ModelSnapshot.ProtoReflect.Descriptor instead.
func (*Conversation_ModelSnapshot) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_conversation_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Conversation_ModelSnapshot) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Conversation_ModelSnapshot) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Conversation_ModelSnapshot) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Conversation_ModelSnapshot) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Conversation_ModelSnapshot) GetModel() *chat_model.Name {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *Conversation_ModelSnapshot) GetModelUsed() string {
	if m != nil {
		return m.ModelUsed
	}
	return ""
}

func (m *Conversation_ModelSnapshot) GetTemperature() float32 {
	if m != nil {
		return m.Temperature
	}
	return float32(0)
}

func (m *Conversation_ModelSnapshot) GetMaxTokens() int32 {
	if m != nil {
		return m.MaxTokens
	}
	return int32(0)
}

func (m *Conversation_ModelSnapshot) SetModel(fv *chat_model.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "Conversation_ModelSnapshot"))
	}
	m.Model = fv
}

func (m *Conversation_ModelSnapshot) SetModelUsed(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ModelUsed", "Conversation_ModelSnapshot"))
	}
	m.ModelUsed = fv
}

func (m *Conversation_ModelSnapshot) SetTemperature(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Temperature", "Conversation_ModelSnapshot"))
	}
	m.Temperature = fv
}

func (m *Conversation_ModelSnapshot) SetMaxTokens(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxTokens", "Conversation_ModelSnapshot"))
	}
	m.MaxTokens = fv
}

// Usage statistics
type Conversation_UsageStats struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	MessageCount      int32 `protobuf:"varint,1,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	TotalInputTokens  int32 `protobuf:"varint,2,opt,name=total_input_tokens,json=totalInputTokens,proto3" json:"total_input_tokens,omitempty"`
	TotalOutputTokens int32 `protobuf:"varint,3,opt,name=total_output_tokens,json=totalOutputTokens,proto3" json:"total_output_tokens,omitempty"`
	TotalTokens       int32 `protobuf:"varint,4,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
}

func (m *Conversation_UsageStats) Reset() {
	*m = Conversation_UsageStats{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Conversation_UsageStats) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Conversation_UsageStats) ProtoMessage() {}

func (m *Conversation_UsageStats) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Conversation_UsageStats) GotenMessage() {}

// Deprecated, Use Conversation_UsageStats.ProtoReflect.Descriptor instead.
func (*Conversation_UsageStats) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_conversation_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Conversation_UsageStats) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Conversation_UsageStats) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Conversation_UsageStats) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Conversation_UsageStats) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Conversation_UsageStats) GetMessageCount() int32 {
	if m != nil {
		return m.MessageCount
	}
	return int32(0)
}

func (m *Conversation_UsageStats) GetTotalInputTokens() int32 {
	if m != nil {
		return m.TotalInputTokens
	}
	return int32(0)
}

func (m *Conversation_UsageStats) GetTotalOutputTokens() int32 {
	if m != nil {
		return m.TotalOutputTokens
	}
	return int32(0)
}

func (m *Conversation_UsageStats) GetTotalTokens() int32 {
	if m != nil {
		return m.TotalTokens
	}
	return int32(0)
}

func (m *Conversation_UsageStats) SetMessageCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MessageCount", "Conversation_UsageStats"))
	}
	m.MessageCount = fv
}

func (m *Conversation_UsageStats) SetTotalInputTokens(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalInputTokens", "Conversation_UsageStats"))
	}
	m.TotalInputTokens = fv
}

func (m *Conversation_UsageStats) SetTotalOutputTokens(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalOutputTokens", "Conversation_UsageStats"))
	}
	m.TotalOutputTokens = fv
}

func (m *Conversation_UsageStats) SetTotalTokens(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalTokens", "Conversation_UsageStats"))
	}
	m.TotalTokens = fv
}

var edgelq_ai_proto_v1_conversation_proto preflect.FileDescriptor

var edgelq_ai_proto_v1_conversation_proto_rawDesc = []byte{
	0x0a, 0x25, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd1, 0x07, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xb2, 0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x48, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x98, 0x01, 0x0a, 0x0d, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d,
	0x0a, 0x0b, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x1a, 0xb2, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x3a, 0xd8, 0x01, 0xea, 0x41, 0x78, 0x0a,
	0x1a, 0x61, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x29, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x92, 0xd9, 0x21, 0x4d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x16, 0x69, 0x61, 0x6d, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x1a, 0x13, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x38, 0x03, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x8f, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x49,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x61, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xa2, 0x80, 0xd1, 0x02, 0x4b, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x61, 0x69, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_ai_proto_v1_conversation_proto_rawDescOnce sync.Once
	edgelq_ai_proto_v1_conversation_proto_rawDescData = edgelq_ai_proto_v1_conversation_proto_rawDesc
)

func edgelq_ai_proto_v1_conversation_proto_rawDescGZIP() []byte {
	edgelq_ai_proto_v1_conversation_proto_rawDescOnce.Do(func() {
		edgelq_ai_proto_v1_conversation_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_ai_proto_v1_conversation_proto_rawDescData)
	})
	return edgelq_ai_proto_v1_conversation_proto_rawDescData
}

var edgelq_ai_proto_v1_conversation_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var edgelq_ai_proto_v1_conversation_proto_goTypes = []interface{}{
	(*Conversation)(nil),               // 0: ntt.ai.v1.Conversation
	(*Conversation_ModelSnapshot)(nil), // 1: ntt.ai.v1.Conversation.ModelSnapshot
	(*Conversation_UsageStats)(nil),    // 2: ntt.ai.v1.Conversation.UsageStats
	(*meta.Meta)(nil),                  // 3: goten.types.Meta
	(*common_client.Message)(nil),      // 4: ntt.ai.v1.Message
	(*timestamppb.Timestamp)(nil),      // 5: google.protobuf.Timestamp
}
var edgelq_ai_proto_v1_conversation_proto_depIdxs = []int32{
	3, // 0: ntt.ai.v1.Conversation.metadata:type_name -> goten.types.Meta
	4, // 1: ntt.ai.v1.Conversation.messages:type_name -> ntt.ai.v1.Message
	1, // 2: ntt.ai.v1.Conversation.model_snapshot:type_name -> ntt.ai.v1.Conversation.ModelSnapshot
	2, // 3: ntt.ai.v1.Conversation.usage_stats:type_name -> ntt.ai.v1.Conversation.UsageStats
	5, // 4: ntt.ai.v1.Conversation.last_activity_time:type_name -> google.protobuf.Timestamp
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { edgelq_ai_proto_v1_conversation_proto_init() }
func edgelq_ai_proto_v1_conversation_proto_init() {
	if edgelq_ai_proto_v1_conversation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_ai_proto_v1_conversation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_conversation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversation_ModelSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_conversation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversation_UsageStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_ai_proto_v1_conversation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_ai_proto_v1_conversation_proto_goTypes,
		DependencyIndexes: edgelq_ai_proto_v1_conversation_proto_depIdxs,
		MessageInfos:      edgelq_ai_proto_v1_conversation_proto_msgTypes,
	}.Build()
	edgelq_ai_proto_v1_conversation_proto = out.File
	edgelq_ai_proto_v1_conversation_proto_rawDesc = nil
	edgelq_ai_proto_v1_conversation_proto_goTypes = nil
	edgelq_ai_proto_v1_conversation_proto_depIdxs = nil
}
