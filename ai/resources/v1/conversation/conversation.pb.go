// Code generated by protoc-gen-goten-go
// File: edgelq/ai/proto/v1/conversation.proto
// DO NOT EDIT!!!

package conversation

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	common_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/common"
	capability_template "github.com/cloudwan/edgelq-sdk/ai/resources/v1/capability_template"
	chat_model "github.com/cloudwan/edgelq-sdk/ai/resources/v1/chat_model"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1/user"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &capability_template.CapabilityTemplate{}
	_ = &chat_model.ChatModel{}
	_ = &common_client.Message{}
	_ = &iam_project.Project{}
	_ = &iam_user.User{}
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Conversation Resource
type Conversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Conversation
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Display title for the conversation
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Whether the conversation has been archived
	Archived bool `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	// Timestamp of the last activity
	LastActivityTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_activity_time,json=lastActivityTime,proto3" json:"last_activity_time,omitempty"`
	// Core conversation data - sequence of turns (each turn = one CreateResponse
	// API call)
	Turns []*ConversationTurn `protobuf:"bytes,6,rep,name=turns,proto3" json:"turns,omitempty"`
	// Aggregate statistics by model (for easy analytics/billing)
	UsageByModel map[string]*ModelUsageStats `protobuf:"bytes,7,rep,name=usage_by_model,json=usageByModel,proto3" json:"usage_by_model,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Total statistics across all models
	TotalUsage *TotalUsageStats `protobuf:"bytes,8,opt,name=total_usage,json=totalUsage,proto3" json:"total_usage,omitempty"`
}

func (m *Conversation) Reset() {
	*m = Conversation{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Conversation) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Conversation) ProtoMessage() {}

func (m *Conversation) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Conversation) GotenMessage() {}

// Deprecated, Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_conversation_proto_rawDescGZIP(), []int{0}
}

func (m *Conversation) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Conversation) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Conversation) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Conversation) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Conversation) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Conversation) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Conversation) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Conversation) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Conversation) GetLastActivityTime() *timestamppb.Timestamp {
	if m != nil {
		return m.LastActivityTime
	}
	return nil
}

func (m *Conversation) GetTurns() []*ConversationTurn {
	if m != nil {
		return m.Turns
	}
	return nil
}

func (m *Conversation) GetUsageByModel() map[string]*ModelUsageStats {
	if m != nil {
		return m.UsageByModel
	}
	return nil
}

func (m *Conversation) GetTotalUsage() *TotalUsageStats {
	if m != nil {
		return m.TotalUsage
	}
	return nil
}

func (m *Conversation) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Conversation"))
	}
	m.Name = fv
}

func (m *Conversation) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Conversation"))
	}
	m.Metadata = fv
}

func (m *Conversation) SetTitle(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Title", "Conversation"))
	}
	m.Title = fv
}

func (m *Conversation) SetArchived(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Archived", "Conversation"))
	}
	m.Archived = fv
}

func (m *Conversation) SetLastActivityTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastActivityTime", "Conversation"))
	}
	m.LastActivityTime = fv
}

func (m *Conversation) SetTurns(fv []*ConversationTurn) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Turns", "Conversation"))
	}
	m.Turns = fv
}

func (m *Conversation) SetUsageByModel(fv map[string]*ModelUsageStats) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UsageByModel", "Conversation"))
	}
	m.UsageByModel = fv
}

func (m *Conversation) SetTotalUsage(fv *TotalUsageStats) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalUsage", "Conversation"))
	}
	m.TotalUsage = fv
}

// Represents one CreateResponse API call
type ConversationTurn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Sequential turn number (0-indexed)
	TurnNumber int32 `protobuf:"varint,1,opt,name=turn_number,json=turnNumber,proto3" json:"turn_number,omitempty"`
	// When this turn started
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Messages added in THIS turn only (not full history)
	// Typically: [user_msg, assistant_msg] or [tool_result_msg, assistant_msg]
	Messages []*common_client.Message `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	// Configuration used for this specific API call
	Config *TurnConfig `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	// Token usage for this specific turn
	Usage *common_client.TokenUsage `protobuf:"bytes,5,opt,name=usage,proto3" json:"usage,omitempty"`
	// How this turn ended
	StopReason common_client.StopReason `protobuf:"varint,6,opt,name=stop_reason,json=stopReason,proto3,enum=ntt.ai.v1.StopReason" json:"stop_reason,omitempty"`
	// Duration of the API call
	Duration *durationpb.Duration `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty"`
	// Tool names that were available in this turn
	AvailableTools []string `protobuf:"bytes,8,rep,name=available_tools,json=availableTools,proto3" json:"available_tools,omitempty"`
}

func (m *ConversationTurn) Reset() {
	*m = ConversationTurn{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConversationTurn) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConversationTurn) ProtoMessage() {}

func (m *ConversationTurn) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConversationTurn) GotenMessage() {}

// Deprecated, Use ConversationTurn.ProtoReflect.Descriptor instead.
func (*ConversationTurn) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_conversation_proto_rawDescGZIP(), []int{1}
}

func (m *ConversationTurn) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConversationTurn) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConversationTurn) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConversationTurn) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ConversationTurn) GetTurnNumber() int32 {
	if m != nil {
		return m.TurnNumber
	}
	return int32(0)
}

func (m *ConversationTurn) GetTimestamp() *timestamppb.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *ConversationTurn) GetMessages() []*common_client.Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ConversationTurn) GetConfig() *TurnConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ConversationTurn) GetUsage() *common_client.TokenUsage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *ConversationTurn) GetStopReason() common_client.StopReason {
	if m != nil {
		return m.StopReason
	}
	return common_client.StopReason_STOP_REASON_UNSPECIFIED
}

func (m *ConversationTurn) GetDuration() *durationpb.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *ConversationTurn) GetAvailableTools() []string {
	if m != nil {
		return m.AvailableTools
	}
	return nil
}

func (m *ConversationTurn) SetTurnNumber(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TurnNumber", "ConversationTurn"))
	}
	m.TurnNumber = fv
}

func (m *ConversationTurn) SetTimestamp(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Timestamp", "ConversationTurn"))
	}
	m.Timestamp = fv
}

func (m *ConversationTurn) SetMessages(fv []*common_client.Message) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Messages", "ConversationTurn"))
	}
	m.Messages = fv
}

func (m *ConversationTurn) SetConfig(fv *TurnConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Config", "ConversationTurn"))
	}
	m.Config = fv
}

func (m *ConversationTurn) SetUsage(fv *common_client.TokenUsage) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Usage", "ConversationTurn"))
	}
	m.Usage = fv
}

func (m *ConversationTurn) SetStopReason(fv common_client.StopReason) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StopReason", "ConversationTurn"))
	}
	m.StopReason = fv
}

func (m *ConversationTurn) SetDuration(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Duration", "ConversationTurn"))
	}
	m.Duration = fv
}

func (m *ConversationTurn) SetAvailableTools(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AvailableTools", "ConversationTurn"))
	}
	m.AvailableTools = fv
}

// Configuration snapshot for a single turn
type TurnConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Model selection
	Model *chat_model.Name `protobuf:"bytes,1,opt,customtype=Name,name=model,proto3" json:"model,omitempty"`
	// Actual model ID from ResponseStarted
	ModelUsed string `protobuf:"bytes,2,opt,name=model_used,json=modelUsed,proto3" json:"model_used,omitempty"`
	// Parameters
	Temperature    float32                      `protobuf:"fixed32,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
	MaxTokens      int32                        `protobuf:"varint,4,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	ReasoningLevel common_client.ReasoningLevel `protobuf:"varint,5,opt,name=reasoning_level,json=reasoningLevel,proto3,enum=ntt.ai.v1.ReasoningLevel" json:"reasoning_level,omitempty"`
	// Server tools configuration for this turn
	//
	// Types that are valid to be assigned to ServerToolsConfig:
	//	*TurnConfig_CapabilityTemplate
	//	*TurnConfig_Connectors
	ServerToolsConfig isTurnConfig_ServerToolsConfig `protobuf_oneof:"server_tools_config"`
}

func (m *TurnConfig) Reset() {
	*m = TurnConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TurnConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TurnConfig) ProtoMessage() {}

func (m *TurnConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TurnConfig) GotenMessage() {}

// Deprecated, Use TurnConfig.ProtoReflect.Descriptor instead.
func (*TurnConfig) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_conversation_proto_rawDescGZIP(), []int{2}
}

func (m *TurnConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TurnConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TurnConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TurnConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isTurnConfig_ServerToolsConfig interface {
	isTurnConfig_ServerToolsConfig()
}

type TurnConfig_CapabilityTemplate struct {
	CapabilityTemplate *capability_template.Name `protobuf:"bytes,6,opt,customtype=Name,name=capability_template,json=capabilityTemplate,proto3,oneof"`
}
type TurnConfig_Connectors struct {
	Connectors *common_client.ConnectorsList `protobuf:"bytes,7,opt,name=connectors,proto3,oneof"`
}

func (*TurnConfig_CapabilityTemplate) isTurnConfig_ServerToolsConfig() {}
func (*TurnConfig_Connectors) isTurnConfig_ServerToolsConfig()         {}
func (m *TurnConfig) GetModel() *chat_model.Name {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *TurnConfig) GetModelUsed() string {
	if m != nil {
		return m.ModelUsed
	}
	return ""
}

func (m *TurnConfig) GetTemperature() float32 {
	if m != nil {
		return m.Temperature
	}
	return float32(0)
}

func (m *TurnConfig) GetMaxTokens() int32 {
	if m != nil {
		return m.MaxTokens
	}
	return int32(0)
}

func (m *TurnConfig) GetReasoningLevel() common_client.ReasoningLevel {
	if m != nil {
		return m.ReasoningLevel
	}
	return common_client.ReasoningLevel_REASONING_LEVEL_DEFAULT
}

func (m *TurnConfig) GetServerToolsConfig() isTurnConfig_ServerToolsConfig {
	if m != nil {
		return m.ServerToolsConfig
	}
	return nil
}
func (m *TurnConfig) GetCapabilityTemplate() *capability_template.Name {
	if x, ok := m.GetServerToolsConfig().(*TurnConfig_CapabilityTemplate); ok {
		return x.CapabilityTemplate
	}
	return nil
}
func (m *TurnConfig) GetConnectors() *common_client.ConnectorsList {
	if x, ok := m.GetServerToolsConfig().(*TurnConfig_Connectors); ok {
		return x.Connectors
	}
	return nil
}
func (m *TurnConfig) SetModel(fv *chat_model.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "TurnConfig"))
	}
	m.Model = fv
}

func (m *TurnConfig) SetModelUsed(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ModelUsed", "TurnConfig"))
	}
	m.ModelUsed = fv
}

func (m *TurnConfig) SetTemperature(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Temperature", "TurnConfig"))
	}
	m.Temperature = fv
}

func (m *TurnConfig) SetMaxTokens(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxTokens", "TurnConfig"))
	}
	m.MaxTokens = fv
}

func (m *TurnConfig) SetReasoningLevel(fv common_client.ReasoningLevel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ReasoningLevel", "TurnConfig"))
	}
	m.ReasoningLevel = fv
}

func (m *TurnConfig) SetServerToolsConfig(ofv isTurnConfig_ServerToolsConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isTurnConfig_ServerToolsConfig", "TurnConfig"))
	}
	m.ServerToolsConfig = ofv
}
func (m *TurnConfig) SetCapabilityTemplate(fv *capability_template.Name) {
	m.SetServerToolsConfig(&TurnConfig_CapabilityTemplate{CapabilityTemplate: fv})
}
func (m *TurnConfig) SetConnectors(fv *common_client.ConnectorsList) {
	m.SetServerToolsConfig(&TurnConfig_Connectors{Connectors: fv})
}

// Per-model usage statistics
type ModelUsageStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	TurnCount     int32 `protobuf:"varint,1,opt,name=turn_count,json=turnCount,proto3" json:"turn_count,omitempty"`
	// Aggregated token usage for this model (sum of all turns)
	AggregatedUsage *common_client.TokenUsage `protobuf:"bytes,2,opt,name=aggregated_usage,json=aggregatedUsage,proto3" json:"aggregated_usage,omitempty"`
}

func (m *ModelUsageStats) Reset() {
	*m = ModelUsageStats{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ModelUsageStats) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ModelUsageStats) ProtoMessage() {}

func (m *ModelUsageStats) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ModelUsageStats) GotenMessage() {}

// Deprecated, Use ModelUsageStats.ProtoReflect.Descriptor instead.
func (*ModelUsageStats) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_conversation_proto_rawDescGZIP(), []int{3}
}

func (m *ModelUsageStats) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ModelUsageStats) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ModelUsageStats) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ModelUsageStats) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ModelUsageStats) GetTurnCount() int32 {
	if m != nil {
		return m.TurnCount
	}
	return int32(0)
}

func (m *ModelUsageStats) GetAggregatedUsage() *common_client.TokenUsage {
	if m != nil {
		return m.AggregatedUsage
	}
	return nil
}

func (m *ModelUsageStats) SetTurnCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TurnCount", "ModelUsageStats"))
	}
	m.TurnCount = fv
}

func (m *ModelUsageStats) SetAggregatedUsage(fv *common_client.TokenUsage) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AggregatedUsage", "ModelUsageStats"))
	}
	m.AggregatedUsage = fv
}

// Total usage across all models
type TotalUsageStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	TotalTurns    int32 `protobuf:"varint,1,opt,name=total_turns,json=totalTurns,proto3" json:"total_turns,omitempty"`
	TotalMessages int32 `protobuf:"varint,2,opt,name=total_messages,json=totalMessages,proto3" json:"total_messages,omitempty"`
	// Aggregated token usage across all models
	AggregatedUsage *common_client.TokenUsage `protobuf:"bytes,3,opt,name=aggregated_usage,json=aggregatedUsage,proto3" json:"aggregated_usage,omitempty"`
}

func (m *TotalUsageStats) Reset() {
	*m = TotalUsageStats{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TotalUsageStats) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TotalUsageStats) ProtoMessage() {}

func (m *TotalUsageStats) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_conversation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TotalUsageStats) GotenMessage() {}

// Deprecated, Use TotalUsageStats.ProtoReflect.Descriptor instead.
func (*TotalUsageStats) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_conversation_proto_rawDescGZIP(), []int{4}
}

func (m *TotalUsageStats) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TotalUsageStats) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TotalUsageStats) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TotalUsageStats) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TotalUsageStats) GetTotalTurns() int32 {
	if m != nil {
		return m.TotalTurns
	}
	return int32(0)
}

func (m *TotalUsageStats) GetTotalMessages() int32 {
	if m != nil {
		return m.TotalMessages
	}
	return int32(0)
}

func (m *TotalUsageStats) GetAggregatedUsage() *common_client.TokenUsage {
	if m != nil {
		return m.AggregatedUsage
	}
	return nil
}

func (m *TotalUsageStats) SetTotalTurns(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalTurns", "TotalUsageStats"))
	}
	m.TotalTurns = fv
}

func (m *TotalUsageStats) SetTotalMessages(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalMessages", "TotalUsageStats"))
	}
	m.TotalMessages = fv
}

func (m *TotalUsageStats) SetAggregatedUsage(fv *common_client.TokenUsage) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AggregatedUsage", "TotalUsageStats"))
	}
	m.AggregatedUsage = fv
}

var edgelq_ai_proto_v1_conversation_proto preflect.FileDescriptor

var edgelq_ai_proto_v1_conversation_proto_rawDesc = []byte{
	0x0a, 0x25, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xdc, 0x05, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xb2, 0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x75,
	0x72, 0x6e, 0x52, 0x05, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x5b, 0x0a, 0x11, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0xd8, 0x01, 0xea, 0x41, 0x78, 0x0a, 0x1a, 0x61, 0x69, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x29, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x7d, 0x92, 0xd9, 0x21, 0x4d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x16, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x13, 0x69, 0x61,
	0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x55, 0x73, 0x65,
	0x72, 0x38, 0x03, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x91, 0x03, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x75, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x75, 0x72, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2e, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x72, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b,
	0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f,
	0x6f, 0x6c, 0x73, 0x22, 0xfc, 0x02, 0x0a, 0x0a, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x4d, 0x0a, 0x13, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda,
	0x21, 0x16, 0x0a, 0x14, 0x0a, 0x12, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x72, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x8f, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x49,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x61, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xa2, 0x80, 0xd1, 0x02, 0x4b, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x61, 0x69, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_ai_proto_v1_conversation_proto_rawDescOnce sync.Once
	edgelq_ai_proto_v1_conversation_proto_rawDescData = edgelq_ai_proto_v1_conversation_proto_rawDesc
)

func edgelq_ai_proto_v1_conversation_proto_rawDescGZIP() []byte {
	edgelq_ai_proto_v1_conversation_proto_rawDescOnce.Do(func() {
		edgelq_ai_proto_v1_conversation_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_ai_proto_v1_conversation_proto_rawDescData)
	})
	return edgelq_ai_proto_v1_conversation_proto_rawDescData
}

var edgelq_ai_proto_v1_conversation_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var edgelq_ai_proto_v1_conversation_proto_goTypes = []interface{}{
	(*Conversation)(nil),                 // 0: ntt.ai.v1.Conversation
	(*ConversationTurn)(nil),             // 1: ntt.ai.v1.ConversationTurn
	(*TurnConfig)(nil),                   // 2: ntt.ai.v1.TurnConfig
	(*ModelUsageStats)(nil),              // 3: ntt.ai.v1.ModelUsageStats
	(*TotalUsageStats)(nil),              // 4: ntt.ai.v1.TotalUsageStats
	nil,                                  // 5: ntt.ai.v1.Conversation.UsageByModelEntry
	(*meta.Meta)(nil),                    // 6: goten.types.Meta
	(*timestamppb.Timestamp)(nil),        // 7: google.protobuf.Timestamp
	(*common_client.Message)(nil),        // 8: ntt.ai.v1.Message
	(*common_client.TokenUsage)(nil),     // 9: ntt.ai.v1.TokenUsage
	(common_client.StopReason)(0),        // 10: ntt.ai.v1.StopReason
	(*durationpb.Duration)(nil),          // 11: google.protobuf.Duration
	(common_client.ReasoningLevel)(0),    // 12: ntt.ai.v1.ReasoningLevel
	(*common_client.ConnectorsList)(nil), // 13: ntt.ai.v1.ConnectorsList
}
var edgelq_ai_proto_v1_conversation_proto_depIdxs = []int32{
	6,  // 0: ntt.ai.v1.Conversation.metadata:type_name -> goten.types.Meta
	7,  // 1: ntt.ai.v1.Conversation.last_activity_time:type_name -> google.protobuf.Timestamp
	1,  // 2: ntt.ai.v1.Conversation.turns:type_name -> ntt.ai.v1.ConversationTurn
	5,  // 3: ntt.ai.v1.Conversation.usage_by_model:type_name -> ntt.ai.v1.Conversation.UsageByModelEntry
	4,  // 4: ntt.ai.v1.Conversation.total_usage:type_name -> ntt.ai.v1.TotalUsageStats
	7,  // 5: ntt.ai.v1.ConversationTurn.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 6: ntt.ai.v1.ConversationTurn.messages:type_name -> ntt.ai.v1.Message
	2,  // 7: ntt.ai.v1.ConversationTurn.config:type_name -> ntt.ai.v1.TurnConfig
	9,  // 8: ntt.ai.v1.ConversationTurn.usage:type_name -> ntt.ai.v1.TokenUsage
	10, // 9: ntt.ai.v1.ConversationTurn.stop_reason:type_name -> ntt.ai.v1.StopReason
	11, // 10: ntt.ai.v1.ConversationTurn.duration:type_name -> google.protobuf.Duration
	12, // 11: ntt.ai.v1.TurnConfig.reasoning_level:type_name -> ntt.ai.v1.ReasoningLevel
	13, // 12: ntt.ai.v1.TurnConfig.connectors:type_name -> ntt.ai.v1.ConnectorsList
	9,  // 13: ntt.ai.v1.ModelUsageStats.aggregated_usage:type_name -> ntt.ai.v1.TokenUsage
	9,  // 14: ntt.ai.v1.TotalUsageStats.aggregated_usage:type_name -> ntt.ai.v1.TokenUsage
	3,  // 15: ntt.ai.v1.Conversation.UsageByModelEntry.value:type_name -> ntt.ai.v1.ModelUsageStats
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { edgelq_ai_proto_v1_conversation_proto_init() }
func edgelq_ai_proto_v1_conversation_proto_init() {
	if edgelq_ai_proto_v1_conversation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_ai_proto_v1_conversation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_conversation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationTurn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_conversation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurnConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_conversation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelUsageStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_conversation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalUsageStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_ai_proto_v1_conversation_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*TurnConfig_CapabilityTemplate)(nil),
		(*TurnConfig_Connectors)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_ai_proto_v1_conversation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_ai_proto_v1_conversation_proto_goTypes,
		DependencyIndexes: edgelq_ai_proto_v1_conversation_proto_depIdxs,
		MessageInfos:      edgelq_ai_proto_v1_conversation_proto_msgTypes,
	}.Build()
	edgelq_ai_proto_v1_conversation_proto = out.File
	edgelq_ai_proto_v1_conversation_proto_rawDesc = nil
	edgelq_ai_proto_v1_conversation_proto_goTypes = nil
	edgelq_ai_proto_v1_conversation_proto_depIdxs = nil
}
