// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/conversation.proto
// DO NOT EDIT!!!

package conversation

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/common"
	chat_model "github.com/cloudwan/edgelq-sdk/ai/resources/v1/chat_model"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1/user"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &chat_model.ChatModel{}
	_ = &common_client.Message{}
	_ = &iam_project.Project{}
	_ = &iam_user.User{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

func (o *Conversation) GotenObjectExt() {}

func (o *Conversation) MakeFullFieldMask() *Conversation_FieldMask {
	return FullConversation_FieldMask()
}

func (o *Conversation) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConversation_FieldMask()
}

func (o *Conversation) MakeDiffFieldMask(other *Conversation) *Conversation_FieldMask {
	if o == nil && other == nil {
		return &Conversation_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConversation_FieldMask()
	}

	res := &Conversation_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Conversation_FieldSubPath{selector: Conversation_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetTitle() != other.GetTitle() {
		res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorTitle})
	}
	if o.GetArchived() != other.GetArchived() {
		res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorArchived})
	}

	if len(o.GetMessages()) == len(other.GetMessages()) {
		for i, lValue := range o.GetMessages() {
			rValue := other.GetMessages()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorMessages})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorMessages})
	}
	{
		subMask := o.GetModelSnapshot().MakeDiffFieldMask(other.GetModelSnapshot())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorModelSnapshot})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Conversation_FieldSubPath{selector: Conversation_FieldPathSelectorModelSnapshot, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetUsageStats().MakeDiffFieldMask(other.GetUsageStats())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorUsageStats})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Conversation_FieldSubPath{selector: Conversation_FieldPathSelectorUsageStats, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetLastActivityTime(), other.GetLastActivityTime()) {
		res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorLastActivityTime})
	}
	return res
}

func (o *Conversation) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Conversation))
}

func (o *Conversation) Clone() *Conversation {
	if o == nil {
		return nil
	}
	result := &Conversation{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.Title = o.Title
	result.Archived = o.Archived
	result.Messages = make([]*common_client.Message, len(o.Messages))
	for i, sourceValue := range o.Messages {
		result.Messages[i] = proto.Clone(sourceValue).(*common_client.Message)
	}
	result.ModelSnapshot = o.ModelSnapshot.Clone()
	result.UsageStats = o.UsageStats.Clone()
	result.LastActivityTime = proto.Clone(o.LastActivityTime).(*timestamppb.Timestamp)
	return result
}

func (o *Conversation) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Conversation) Merge(source *Conversation) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.Title = source.GetTitle()
	o.Archived = source.GetArchived()
	for _, sourceValue := range source.GetMessages() {
		exists := false
		for _, currentValue := range o.Messages {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *common_client.Message
			if sourceValue != nil {
				newDstElement = new(common_client.Message)
				proto.Merge(newDstElement, sourceValue)
			}
			o.Messages = append(o.Messages, newDstElement)
		}
	}

	if source.GetModelSnapshot() != nil {
		if o.ModelSnapshot == nil {
			o.ModelSnapshot = new(Conversation_ModelSnapshot)
		}
		o.ModelSnapshot.Merge(source.GetModelSnapshot())
	}
	if source.GetUsageStats() != nil {
		if o.UsageStats == nil {
			o.UsageStats = new(Conversation_UsageStats)
		}
		o.UsageStats.Merge(source.GetUsageStats())
	}
	if source.GetLastActivityTime() != nil {
		if o.LastActivityTime == nil {
			o.LastActivityTime = new(timestamppb.Timestamp)
		}
		proto.Merge(o.LastActivityTime, source.GetLastActivityTime())
	}
}

func (o *Conversation) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Conversation))
}

func (o *Conversation_ModelSnapshot) GotenObjectExt() {}

func (o *Conversation_ModelSnapshot) MakeFullFieldMask() *Conversation_ModelSnapshot_FieldMask {
	return FullConversation_ModelSnapshot_FieldMask()
}

func (o *Conversation_ModelSnapshot) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConversation_ModelSnapshot_FieldMask()
}

func (o *Conversation_ModelSnapshot) MakeDiffFieldMask(other *Conversation_ModelSnapshot) *Conversation_ModelSnapshot_FieldMask {
	if o == nil && other == nil {
		return &Conversation_ModelSnapshot_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConversation_ModelSnapshot_FieldMask()
	}

	res := &Conversation_ModelSnapshot_FieldMask{}
	if o.GetModel().String() != other.GetModel().String() {
		res.Paths = append(res.Paths, &ConversationModelSnapshot_FieldTerminalPath{selector: ConversationModelSnapshot_FieldPathSelectorModel})
	}
	if o.GetModelUsed() != other.GetModelUsed() {
		res.Paths = append(res.Paths, &ConversationModelSnapshot_FieldTerminalPath{selector: ConversationModelSnapshot_FieldPathSelectorModelUsed})
	}
	if o.GetTemperature() != other.GetTemperature() {
		res.Paths = append(res.Paths, &ConversationModelSnapshot_FieldTerminalPath{selector: ConversationModelSnapshot_FieldPathSelectorTemperature})
	}
	if o.GetMaxTokens() != other.GetMaxTokens() {
		res.Paths = append(res.Paths, &ConversationModelSnapshot_FieldTerminalPath{selector: ConversationModelSnapshot_FieldPathSelectorMaxTokens})
	}
	return res
}

func (o *Conversation_ModelSnapshot) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Conversation_ModelSnapshot))
}

func (o *Conversation_ModelSnapshot) Clone() *Conversation_ModelSnapshot {
	if o == nil {
		return nil
	}
	result := &Conversation_ModelSnapshot{}
	if o.Model == nil {
		result.Model = nil
	} else if data, err := o.Model.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Model = &chat_model.Name{}
		if err := result.Model.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ModelUsed = o.ModelUsed
	result.Temperature = o.Temperature
	result.MaxTokens = o.MaxTokens
	return result
}

func (o *Conversation_ModelSnapshot) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Conversation_ModelSnapshot) Merge(source *Conversation_ModelSnapshot) {
	if source.GetModel() != nil {
		if data, err := source.GetModel().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Model = &chat_model.Name{}
			if err := o.Model.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Model = nil
	}
	o.ModelUsed = source.GetModelUsed()
	o.Temperature = source.GetTemperature()
	o.MaxTokens = source.GetMaxTokens()
}

func (o *Conversation_ModelSnapshot) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Conversation_ModelSnapshot))
}

func (o *Conversation_UsageStats) GotenObjectExt() {}

func (o *Conversation_UsageStats) MakeFullFieldMask() *Conversation_UsageStats_FieldMask {
	return FullConversation_UsageStats_FieldMask()
}

func (o *Conversation_UsageStats) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConversation_UsageStats_FieldMask()
}

func (o *Conversation_UsageStats) MakeDiffFieldMask(other *Conversation_UsageStats) *Conversation_UsageStats_FieldMask {
	if o == nil && other == nil {
		return &Conversation_UsageStats_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConversation_UsageStats_FieldMask()
	}

	res := &Conversation_UsageStats_FieldMask{}
	if o.GetMessageCount() != other.GetMessageCount() {
		res.Paths = append(res.Paths, &ConversationUsageStats_FieldTerminalPath{selector: ConversationUsageStats_FieldPathSelectorMessageCount})
	}
	if o.GetTotalInputTokens() != other.GetTotalInputTokens() {
		res.Paths = append(res.Paths, &ConversationUsageStats_FieldTerminalPath{selector: ConversationUsageStats_FieldPathSelectorTotalInputTokens})
	}
	if o.GetTotalOutputTokens() != other.GetTotalOutputTokens() {
		res.Paths = append(res.Paths, &ConversationUsageStats_FieldTerminalPath{selector: ConversationUsageStats_FieldPathSelectorTotalOutputTokens})
	}
	if o.GetTotalTokens() != other.GetTotalTokens() {
		res.Paths = append(res.Paths, &ConversationUsageStats_FieldTerminalPath{selector: ConversationUsageStats_FieldPathSelectorTotalTokens})
	}
	return res
}

func (o *Conversation_UsageStats) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Conversation_UsageStats))
}

func (o *Conversation_UsageStats) Clone() *Conversation_UsageStats {
	if o == nil {
		return nil
	}
	result := &Conversation_UsageStats{}
	result.MessageCount = o.MessageCount
	result.TotalInputTokens = o.TotalInputTokens
	result.TotalOutputTokens = o.TotalOutputTokens
	result.TotalTokens = o.TotalTokens
	return result
}

func (o *Conversation_UsageStats) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Conversation_UsageStats) Merge(source *Conversation_UsageStats) {
	o.MessageCount = source.GetMessageCount()
	o.TotalInputTokens = source.GetTotalInputTokens()
	o.TotalOutputTokens = source.GetTotalOutputTokens()
	o.TotalTokens = source.GetTotalTokens()
}

func (o *Conversation_UsageStats) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Conversation_UsageStats))
}
