// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/conversation.proto
// DO NOT EDIT!!!

package conversation

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/common"
	capability_template "github.com/cloudwan/edgelq-sdk/ai/resources/v1/capability_template"
	chat_model "github.com/cloudwan/edgelq-sdk/ai/resources/v1/chat_model"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1/user"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &capability_template.CapabilityTemplate{}
	_ = &chat_model.ChatModel{}
	_ = &common_client.Message{}
	_ = &iam_project.Project{}
	_ = &iam_user.User{}
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

func (o *Conversation) GotenObjectExt() {}

func (o *Conversation) MakeFullFieldMask() *Conversation_FieldMask {
	return FullConversation_FieldMask()
}

func (o *Conversation) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConversation_FieldMask()
}

func (o *Conversation) MakeDiffFieldMask(other *Conversation) *Conversation_FieldMask {
	if o == nil && other == nil {
		return &Conversation_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConversation_FieldMask()
	}

	res := &Conversation_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Conversation_FieldSubPath{selector: Conversation_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetTitle() != other.GetTitle() {
		res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorTitle})
	}
	if o.GetArchived() != other.GetArchived() {
		res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorArchived})
	}
	if o.GetIsPrivate() != other.GetIsPrivate() {
		res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorIsPrivate})
	}
	if !proto.Equal(o.GetLastActivityTime(), other.GetLastActivityTime()) {
		res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorLastActivityTime})
	}

	if len(o.GetTurns()) == len(other.GetTurns()) {
		for i, lValue := range o.GetTurns() {
			rValue := other.GetTurns()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorTurns})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorTurns})
	}

	if len(o.GetUsageByModel()) == len(other.GetUsageByModel()) {
		for i, lValue := range o.GetUsageByModel() {
			rValue := other.GetUsageByModel()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorUsageByModel})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorUsageByModel})
	}

	if len(o.GetFailedTurns()) == len(other.GetFailedTurns()) {
		for i, lValue := range o.GetFailedTurns() {
			rValue := other.GetFailedTurns()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorFailedTurns})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorFailedTurns})
	}
	return res
}

func (o *Conversation) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Conversation))
}

func (o *Conversation) Clone() *Conversation {
	if o == nil {
		return nil
	}
	result := &Conversation{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.Title = o.Title
	result.Archived = o.Archived
	result.IsPrivate = o.IsPrivate
	result.LastActivityTime = proto.Clone(o.LastActivityTime).(*timestamppb.Timestamp)
	result.Turns = make([]*ConversationTurn, len(o.Turns))
	for i, sourceValue := range o.Turns {
		result.Turns[i] = sourceValue.Clone()
	}
	result.UsageByModel = map[string]*ModelUsageStats{}
	for key, sourceValue := range o.UsageByModel {
		result.UsageByModel[key] = sourceValue.Clone()
	}
	result.FailedTurns = make([]*ConversationTurn, len(o.FailedTurns))
	for i, sourceValue := range o.FailedTurns {
		result.FailedTurns[i] = sourceValue.Clone()
	}
	return result
}

func (o *Conversation) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Conversation) Merge(source *Conversation) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.Title = source.GetTitle()
	o.Archived = source.GetArchived()
	o.IsPrivate = source.GetIsPrivate()
	if source.GetLastActivityTime() != nil {
		if o.LastActivityTime == nil {
			o.LastActivityTime = new(timestamppb.Timestamp)
		}
		proto.Merge(o.LastActivityTime, source.GetLastActivityTime())
	}
	for _, sourceValue := range source.GetTurns() {
		exists := false
		for _, currentValue := range o.Turns {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *ConversationTurn
			if sourceValue != nil {
				newDstElement = new(ConversationTurn)
				newDstElement.Merge(sourceValue)
			}
			o.Turns = append(o.Turns, newDstElement)
		}
	}

	if source.GetUsageByModel() != nil {
		if o.UsageByModel == nil {
			o.UsageByModel = make(map[string]*ModelUsageStats, len(source.GetUsageByModel()))
		}
		for key, sourceValue := range source.GetUsageByModel() {
			if sourceValue != nil {
				if o.UsageByModel[key] == nil {
					o.UsageByModel[key] = new(ModelUsageStats)
				}
				o.UsageByModel[key].Merge(sourceValue)
			}
		}
	}
	for _, sourceValue := range source.GetFailedTurns() {
		exists := false
		for _, currentValue := range o.FailedTurns {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *ConversationTurn
			if sourceValue != nil {
				newDstElement = new(ConversationTurn)
				newDstElement.Merge(sourceValue)
			}
			o.FailedTurns = append(o.FailedTurns, newDstElement)
		}
	}

}

func (o *Conversation) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Conversation))
}

func (o *ConversationTurn) GotenObjectExt() {}

func (o *ConversationTurn) MakeFullFieldMask() *ConversationTurn_FieldMask {
	return FullConversationTurn_FieldMask()
}

func (o *ConversationTurn) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConversationTurn_FieldMask()
}

func (o *ConversationTurn) MakeDiffFieldMask(other *ConversationTurn) *ConversationTurn_FieldMask {
	if o == nil && other == nil {
		return &ConversationTurn_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConversationTurn_FieldMask()
	}

	res := &ConversationTurn_FieldMask{}
	if o.GetTurnNumber() != other.GetTurnNumber() {
		res.Paths = append(res.Paths, &ConversationTurn_FieldTerminalPath{selector: ConversationTurn_FieldPathSelectorTurnNumber})
	}
	if !proto.Equal(o.GetTimestamp(), other.GetTimestamp()) {
		res.Paths = append(res.Paths, &ConversationTurn_FieldTerminalPath{selector: ConversationTurn_FieldPathSelectorTimestamp})
	}

	if len(o.GetMessages()) == len(other.GetMessages()) {
		for i, lValue := range o.GetMessages() {
			rValue := other.GetMessages()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &ConversationTurn_FieldTerminalPath{selector: ConversationTurn_FieldPathSelectorMessages})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ConversationTurn_FieldTerminalPath{selector: ConversationTurn_FieldPathSelectorMessages})
	}
	{
		subMask := o.GetConfig().MakeDiffFieldMask(other.GetConfig())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConversationTurn_FieldTerminalPath{selector: ConversationTurn_FieldPathSelectorConfig})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConversationTurn_FieldSubPath{selector: ConversationTurn_FieldPathSelectorConfig, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUsage(), other.GetUsage()) {
		res.Paths = append(res.Paths, &ConversationTurn_FieldTerminalPath{selector: ConversationTurn_FieldPathSelectorUsage})
	}
	if o.GetStopReason() != other.GetStopReason() {
		res.Paths = append(res.Paths, &ConversationTurn_FieldTerminalPath{selector: ConversationTurn_FieldPathSelectorStopReason})
	}
	if !proto.Equal(o.GetDuration(), other.GetDuration()) {
		res.Paths = append(res.Paths, &ConversationTurn_FieldTerminalPath{selector: ConversationTurn_FieldPathSelectorDuration})
	}

	if len(o.GetAvailableToolsBySource()) == len(other.GetAvailableToolsBySource()) {
		for i, lValue := range o.GetAvailableToolsBySource() {
			rValue := other.GetAvailableToolsBySource()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ConversationTurn_FieldTerminalPath{selector: ConversationTurn_FieldPathSelectorAvailableToolsBySource})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ConversationTurn_FieldTerminalPath{selector: ConversationTurn_FieldPathSelectorAvailableToolsBySource})
	}
	return res
}

func (o *ConversationTurn) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConversationTurn))
}

func (o *ConversationTurn) Clone() *ConversationTurn {
	if o == nil {
		return nil
	}
	result := &ConversationTurn{}
	result.TurnNumber = o.TurnNumber
	result.Timestamp = proto.Clone(o.Timestamp).(*timestamppb.Timestamp)
	result.Messages = make([]*common_client.Message, len(o.Messages))
	for i, sourceValue := range o.Messages {
		result.Messages[i] = proto.Clone(sourceValue).(*common_client.Message)
	}
	result.Config = o.Config.Clone()
	result.Usage = proto.Clone(o.Usage).(*common_client.TokenUsage)
	result.StopReason = o.StopReason
	result.Duration = proto.Clone(o.Duration).(*durationpb.Duration)
	result.AvailableToolsBySource = make([]*TurnToolsBySourceGroup, len(o.AvailableToolsBySource))
	for i, sourceValue := range o.AvailableToolsBySource {
		result.AvailableToolsBySource[i] = sourceValue.Clone()
	}
	return result
}

func (o *ConversationTurn) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConversationTurn) Merge(source *ConversationTurn) {
	o.TurnNumber = source.GetTurnNumber()
	if source.GetTimestamp() != nil {
		if o.Timestamp == nil {
			o.Timestamp = new(timestamppb.Timestamp)
		}
		proto.Merge(o.Timestamp, source.GetTimestamp())
	}
	for _, sourceValue := range source.GetMessages() {
		exists := false
		for _, currentValue := range o.Messages {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *common_client.Message
			if sourceValue != nil {
				newDstElement = new(common_client.Message)
				proto.Merge(newDstElement, sourceValue)
			}
			o.Messages = append(o.Messages, newDstElement)
		}
	}

	if source.GetConfig() != nil {
		if o.Config == nil {
			o.Config = new(TurnConfig)
		}
		o.Config.Merge(source.GetConfig())
	}
	if source.GetUsage() != nil {
		if o.Usage == nil {
			o.Usage = new(common_client.TokenUsage)
		}
		proto.Merge(o.Usage, source.GetUsage())
	}
	o.StopReason = source.GetStopReason()
	if source.GetDuration() != nil {
		if o.Duration == nil {
			o.Duration = new(durationpb.Duration)
		}
		proto.Merge(o.Duration, source.GetDuration())
	}
	for _, sourceValue := range source.GetAvailableToolsBySource() {
		exists := false
		for _, currentValue := range o.AvailableToolsBySource {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *TurnToolsBySourceGroup
			if sourceValue != nil {
				newDstElement = new(TurnToolsBySourceGroup)
				newDstElement.Merge(sourceValue)
			}
			o.AvailableToolsBySource = append(o.AvailableToolsBySource, newDstElement)
		}
	}

}

func (o *ConversationTurn) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConversationTurn))
}

func (o *TurnToolsBySourceGroup) GotenObjectExt() {}

func (o *TurnToolsBySourceGroup) MakeFullFieldMask() *TurnToolsBySourceGroup_FieldMask {
	return FullTurnToolsBySourceGroup_FieldMask()
}

func (o *TurnToolsBySourceGroup) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTurnToolsBySourceGroup_FieldMask()
}

func (o *TurnToolsBySourceGroup) MakeDiffFieldMask(other *TurnToolsBySourceGroup) *TurnToolsBySourceGroup_FieldMask {
	if o == nil && other == nil {
		return &TurnToolsBySourceGroup_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTurnToolsBySourceGroup_FieldMask()
	}

	res := &TurnToolsBySourceGroup_FieldMask{}
	{
		_, leftSelected := o.Source.(*TurnToolsBySourceGroup_Client)
		_, rightSelected := other.Source.(*TurnToolsBySourceGroup_Client)
		if leftSelected == rightSelected {
			if !proto.Equal(o.GetClient(), other.GetClient()) {
				res.Paths = append(res.Paths, &TurnToolsBySourceGroup_FieldTerminalPath{selector: TurnToolsBySourceGroup_FieldPathSelectorClient})
			}
		} else {
			res.Paths = append(res.Paths, &TurnToolsBySourceGroup_FieldTerminalPath{selector: TurnToolsBySourceGroup_FieldPathSelectorClient})
		}
	}
	{
		_, leftSelected := o.Source.(*TurnToolsBySourceGroup_Connector)
		_, rightSelected := other.Source.(*TurnToolsBySourceGroup_Connector)
		if leftSelected == rightSelected {
			if !proto.Equal(o.GetConnector(), other.GetConnector()) {
				res.Paths = append(res.Paths, &TurnToolsBySourceGroup_FieldTerminalPath{selector: TurnToolsBySourceGroup_FieldPathSelectorConnector})
			}
		} else {
			res.Paths = append(res.Paths, &TurnToolsBySourceGroup_FieldTerminalPath{selector: TurnToolsBySourceGroup_FieldPathSelectorConnector})
		}
	}
	{
		_, leftSelected := o.Source.(*TurnToolsBySourceGroup_Internal)
		_, rightSelected := other.Source.(*TurnToolsBySourceGroup_Internal)
		if leftSelected == rightSelected {
			if !proto.Equal(o.GetInternal(), other.GetInternal()) {
				res.Paths = append(res.Paths, &TurnToolsBySourceGroup_FieldTerminalPath{selector: TurnToolsBySourceGroup_FieldPathSelectorInternal})
			}
		} else {
			res.Paths = append(res.Paths, &TurnToolsBySourceGroup_FieldTerminalPath{selector: TurnToolsBySourceGroup_FieldPathSelectorInternal})
		}
	}

	if len(o.GetToolNames()) == len(other.GetToolNames()) {
		for i, lValue := range o.GetToolNames() {
			rValue := other.GetToolNames()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &TurnToolsBySourceGroup_FieldTerminalPath{selector: TurnToolsBySourceGroup_FieldPathSelectorToolNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TurnToolsBySourceGroup_FieldTerminalPath{selector: TurnToolsBySourceGroup_FieldPathSelectorToolNames})
	}
	return res
}

func (o *TurnToolsBySourceGroup) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TurnToolsBySourceGroup))
}

func (o *TurnToolsBySourceGroup) Clone() *TurnToolsBySourceGroup {
	if o == nil {
		return nil
	}
	result := &TurnToolsBySourceGroup{}
	if o, ok := o.Source.(*TurnToolsBySourceGroup_Client); ok {
		result.Source = (*TurnToolsBySourceGroup_Client)(nil)
		if o != nil {
			result.Source = &TurnToolsBySourceGroup_Client{}
			result := result.Source.(*TurnToolsBySourceGroup_Client)
			result.Client = proto.Clone(o.Client).(*common_client.ClientToolSource)
		}
	}
	if o, ok := o.Source.(*TurnToolsBySourceGroup_Connector); ok {
		result.Source = (*TurnToolsBySourceGroup_Connector)(nil)
		if o != nil {
			result.Source = &TurnToolsBySourceGroup_Connector{}
			result := result.Source.(*TurnToolsBySourceGroup_Connector)
			result.Connector = proto.Clone(o.Connector).(*common_client.ConnectorToolSource)
		}
	}
	if o, ok := o.Source.(*TurnToolsBySourceGroup_Internal); ok {
		result.Source = (*TurnToolsBySourceGroup_Internal)(nil)
		if o != nil {
			result.Source = &TurnToolsBySourceGroup_Internal{}
			result := result.Source.(*TurnToolsBySourceGroup_Internal)
			result.Internal = proto.Clone(o.Internal).(*common_client.InternalToolSource)
		}
	}
	result.ToolNames = make([]string, len(o.ToolNames))
	for i, sourceValue := range o.ToolNames {
		result.ToolNames[i] = sourceValue
	}
	return result
}

func (o *TurnToolsBySourceGroup) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TurnToolsBySourceGroup) Merge(source *TurnToolsBySourceGroup) {
	if source, ok := source.GetSource().(*TurnToolsBySourceGroup_Client); ok {
		if dstOneOf, ok := o.Source.(*TurnToolsBySourceGroup_Client); !ok || dstOneOf == nil {
			o.Source = &TurnToolsBySourceGroup_Client{}
		}
		if source != nil {
			o := o.Source.(*TurnToolsBySourceGroup_Client)
			if source.Client != nil {
				if o.Client == nil {
					o.Client = new(common_client.ClientToolSource)
				}
				proto.Merge(o.Client, source.Client)
			}
		}
	}
	if source, ok := source.GetSource().(*TurnToolsBySourceGroup_Connector); ok {
		if dstOneOf, ok := o.Source.(*TurnToolsBySourceGroup_Connector); !ok || dstOneOf == nil {
			o.Source = &TurnToolsBySourceGroup_Connector{}
		}
		if source != nil {
			o := o.Source.(*TurnToolsBySourceGroup_Connector)
			if source.Connector != nil {
				if o.Connector == nil {
					o.Connector = new(common_client.ConnectorToolSource)
				}
				proto.Merge(o.Connector, source.Connector)
			}
		}
	}
	if source, ok := source.GetSource().(*TurnToolsBySourceGroup_Internal); ok {
		if dstOneOf, ok := o.Source.(*TurnToolsBySourceGroup_Internal); !ok || dstOneOf == nil {
			o.Source = &TurnToolsBySourceGroup_Internal{}
		}
		if source != nil {
			o := o.Source.(*TurnToolsBySourceGroup_Internal)
			if source.Internal != nil {
				if o.Internal == nil {
					o.Internal = new(common_client.InternalToolSource)
				}
				proto.Merge(o.Internal, source.Internal)
			}
		}
	}
	for _, sourceValue := range source.GetToolNames() {
		exists := false
		for _, currentValue := range o.ToolNames {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.ToolNames = append(o.ToolNames, newDstElement)
		}
	}

}

func (o *TurnToolsBySourceGroup) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TurnToolsBySourceGroup))
}

func (o *TurnConfig) GotenObjectExt() {}

func (o *TurnConfig) MakeFullFieldMask() *TurnConfig_FieldMask {
	return FullTurnConfig_FieldMask()
}

func (o *TurnConfig) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTurnConfig_FieldMask()
}

func (o *TurnConfig) MakeDiffFieldMask(other *TurnConfig) *TurnConfig_FieldMask {
	if o == nil && other == nil {
		return &TurnConfig_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTurnConfig_FieldMask()
	}

	res := &TurnConfig_FieldMask{}
	if o.GetModel().String() != other.GetModel().String() {
		res.Paths = append(res.Paths, &TurnConfig_FieldTerminalPath{selector: TurnConfig_FieldPathSelectorModel})
	}
	if o.GetModelUsed() != other.GetModelUsed() {
		res.Paths = append(res.Paths, &TurnConfig_FieldTerminalPath{selector: TurnConfig_FieldPathSelectorModelUsed})
	}
	if o.GetTemperature() != other.GetTemperature() {
		res.Paths = append(res.Paths, &TurnConfig_FieldTerminalPath{selector: TurnConfig_FieldPathSelectorTemperature})
	}
	if o.GetMaxTokens() != other.GetMaxTokens() {
		res.Paths = append(res.Paths, &TurnConfig_FieldTerminalPath{selector: TurnConfig_FieldPathSelectorMaxTokens})
	}
	if o.GetReasoningLevel() != other.GetReasoningLevel() {
		res.Paths = append(res.Paths, &TurnConfig_FieldTerminalPath{selector: TurnConfig_FieldPathSelectorReasoningLevel})
	}
	{
		_, leftSelected := o.ServerToolsConfig.(*TurnConfig_CapabilityTemplate)
		_, rightSelected := other.ServerToolsConfig.(*TurnConfig_CapabilityTemplate)
		if leftSelected == rightSelected {
			if o.GetCapabilityTemplate().String() != other.GetCapabilityTemplate().String() {
				res.Paths = append(res.Paths, &TurnConfig_FieldTerminalPath{selector: TurnConfig_FieldPathSelectorCapabilityTemplate})
			}
		} else {
			res.Paths = append(res.Paths, &TurnConfig_FieldTerminalPath{selector: TurnConfig_FieldPathSelectorCapabilityTemplate})
		}
	}
	{
		_, leftSelected := o.ServerToolsConfig.(*TurnConfig_Connectors)
		_, rightSelected := other.ServerToolsConfig.(*TurnConfig_Connectors)
		if leftSelected == rightSelected {
			if !proto.Equal(o.GetConnectors(), other.GetConnectors()) {
				res.Paths = append(res.Paths, &TurnConfig_FieldTerminalPath{selector: TurnConfig_FieldPathSelectorConnectors})
			}
		} else {
			res.Paths = append(res.Paths, &TurnConfig_FieldTerminalPath{selector: TurnConfig_FieldPathSelectorConnectors})
		}
	}
	return res
}

func (o *TurnConfig) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TurnConfig))
}

func (o *TurnConfig) Clone() *TurnConfig {
	if o == nil {
		return nil
	}
	result := &TurnConfig{}
	if o.Model == nil {
		result.Model = nil
	} else if data, err := o.Model.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Model = &chat_model.Name{}
		if err := result.Model.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ModelUsed = o.ModelUsed
	result.Temperature = o.Temperature
	result.MaxTokens = o.MaxTokens
	result.ReasoningLevel = o.ReasoningLevel
	if o, ok := o.ServerToolsConfig.(*TurnConfig_CapabilityTemplate); ok {
		result.ServerToolsConfig = (*TurnConfig_CapabilityTemplate)(nil)
		if o != nil {
			result.ServerToolsConfig = &TurnConfig_CapabilityTemplate{}
			result := result.ServerToolsConfig.(*TurnConfig_CapabilityTemplate)
			if o.CapabilityTemplate == nil {
				result.CapabilityTemplate = nil
			} else if data, err := o.CapabilityTemplate.ProtoString(); err != nil {
				panic(err)
			} else {
				result.CapabilityTemplate = &capability_template.Name{}
				if err := result.CapabilityTemplate.ParseProtoString(data); err != nil {
					panic(err)
				}
			}
		}
	}
	if o, ok := o.ServerToolsConfig.(*TurnConfig_Connectors); ok {
		result.ServerToolsConfig = (*TurnConfig_Connectors)(nil)
		if o != nil {
			result.ServerToolsConfig = &TurnConfig_Connectors{}
			result := result.ServerToolsConfig.(*TurnConfig_Connectors)
			result.Connectors = proto.Clone(o.Connectors).(*common_client.ConnectorsList)
		}
	}
	return result
}

func (o *TurnConfig) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TurnConfig) Merge(source *TurnConfig) {
	if source.GetModel() != nil {
		if data, err := source.GetModel().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Model = &chat_model.Name{}
			if err := o.Model.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Model = nil
	}
	o.ModelUsed = source.GetModelUsed()
	o.Temperature = source.GetTemperature()
	o.MaxTokens = source.GetMaxTokens()
	o.ReasoningLevel = source.GetReasoningLevel()
	if source, ok := source.GetServerToolsConfig().(*TurnConfig_CapabilityTemplate); ok {
		if dstOneOf, ok := o.ServerToolsConfig.(*TurnConfig_CapabilityTemplate); !ok || dstOneOf == nil {
			o.ServerToolsConfig = &TurnConfig_CapabilityTemplate{}
		}
		if source != nil {
			o := o.ServerToolsConfig.(*TurnConfig_CapabilityTemplate)
			if source.CapabilityTemplate != nil {
				if data, err := source.CapabilityTemplate.ProtoString(); err != nil {
					panic(err)
				} else {
					o.CapabilityTemplate = &capability_template.Name{}
					if err := o.CapabilityTemplate.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			} else {
				o.CapabilityTemplate = nil
			}
		}
	}
	if source, ok := source.GetServerToolsConfig().(*TurnConfig_Connectors); ok {
		if dstOneOf, ok := o.ServerToolsConfig.(*TurnConfig_Connectors); !ok || dstOneOf == nil {
			o.ServerToolsConfig = &TurnConfig_Connectors{}
		}
		if source != nil {
			o := o.ServerToolsConfig.(*TurnConfig_Connectors)
			if source.Connectors != nil {
				if o.Connectors == nil {
					o.Connectors = new(common_client.ConnectorsList)
				}
				proto.Merge(o.Connectors, source.Connectors)
			}
		}
	}
}

func (o *TurnConfig) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TurnConfig))
}

func (o *ModelUsageStats) GotenObjectExt() {}

func (o *ModelUsageStats) MakeFullFieldMask() *ModelUsageStats_FieldMask {
	return FullModelUsageStats_FieldMask()
}

func (o *ModelUsageStats) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullModelUsageStats_FieldMask()
}

func (o *ModelUsageStats) MakeDiffFieldMask(other *ModelUsageStats) *ModelUsageStats_FieldMask {
	if o == nil && other == nil {
		return &ModelUsageStats_FieldMask{}
	}
	if o == nil || other == nil {
		return FullModelUsageStats_FieldMask()
	}

	res := &ModelUsageStats_FieldMask{}
	if o.GetTurnCount() != other.GetTurnCount() {
		res.Paths = append(res.Paths, &ModelUsageStats_FieldTerminalPath{selector: ModelUsageStats_FieldPathSelectorTurnCount})
	}
	if !proto.Equal(o.GetAggregatedUsage(), other.GetAggregatedUsage()) {
		res.Paths = append(res.Paths, &ModelUsageStats_FieldTerminalPath{selector: ModelUsageStats_FieldPathSelectorAggregatedUsage})
	}
	return res
}

func (o *ModelUsageStats) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ModelUsageStats))
}

func (o *ModelUsageStats) Clone() *ModelUsageStats {
	if o == nil {
		return nil
	}
	result := &ModelUsageStats{}
	result.TurnCount = o.TurnCount
	result.AggregatedUsage = proto.Clone(o.AggregatedUsage).(*common_client.TokenUsage)
	return result
}

func (o *ModelUsageStats) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ModelUsageStats) Merge(source *ModelUsageStats) {
	o.TurnCount = source.GetTurnCount()
	if source.GetAggregatedUsage() != nil {
		if o.AggregatedUsage == nil {
			o.AggregatedUsage = new(common_client.TokenUsage)
		}
		proto.Merge(o.AggregatedUsage, source.GetAggregatedUsage())
	}
}

func (o *ModelUsageStats) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ModelUsageStats))
}
