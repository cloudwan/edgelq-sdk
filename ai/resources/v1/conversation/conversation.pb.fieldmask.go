// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/conversation.proto
// DO NOT EDIT!!!

package conversation

import (
	"encoding/json"
	"strings"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common_client "github.com/cloudwan/edgelq-sdk/ai/client/v1/common"
	chat_model "github.com/cloudwan/edgelq-sdk/ai/resources/v1/chat_model"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1/user"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &chat_model.ChatModel{}
	_ = &common_client.Message{}
	_ = &iam_project.Project{}
	_ = &iam_user.User{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

type Conversation_FieldMask struct {
	Paths []Conversation_FieldPath
}

func FullConversation_FieldMask() *Conversation_FieldMask {
	res := &Conversation_FieldMask{}
	res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorName})
	res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorTitle})
	res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorArchived})
	res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorMessages})
	res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorModelSnapshot})
	res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorUsageStats})
	res.Paths = append(res.Paths, &Conversation_FieldTerminalPath{selector: Conversation_FieldPathSelectorLastActivityTime})
	return res
}

func (fieldMask *Conversation_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Conversation_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Conversation_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Conversation_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseConversation_FieldPath(raw)
	})
}

func (fieldMask *Conversation_FieldMask) ProtoMessage() {}

func (fieldMask *Conversation_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Conversation_FieldMask) Subtract(other *Conversation_FieldMask) *Conversation_FieldMask {
	result := &Conversation_FieldMask{}
	removedSelectors := make([]bool, 8)
	otherSubMasks := map[Conversation_FieldPathSelector]gotenobject.FieldMask{
		Conversation_FieldPathSelectorMetadata:      &meta.Meta_FieldMask{},
		Conversation_FieldPathSelectorModelSnapshot: &Conversation_ModelSnapshot_FieldMask{},
		Conversation_FieldPathSelectorUsageStats:    &Conversation_UsageStats_FieldMask{},
	}
	mySubMasks := map[Conversation_FieldPathSelector]gotenobject.FieldMask{
		Conversation_FieldPathSelectorMetadata:      &meta.Meta_FieldMask{},
		Conversation_FieldPathSelectorModelSnapshot: &Conversation_ModelSnapshot_FieldMask{},
		Conversation_FieldPathSelectorUsageStats:    &Conversation_UsageStats_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Conversation_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Conversation_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Conversation_FieldTerminalPath); ok {
					switch tp.selector {
					case Conversation_FieldPathSelectorMetadata:
						mySubMasks[Conversation_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case Conversation_FieldPathSelectorModelSnapshot:
						mySubMasks[Conversation_FieldPathSelectorModelSnapshot] = FullConversation_ModelSnapshot_FieldMask()
					case Conversation_FieldPathSelectorUsageStats:
						mySubMasks[Conversation_FieldPathSelectorUsageStats] = FullConversation_UsageStats_FieldMask()
					}
				} else if tp, ok := path.(*Conversation_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Conversation_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Conversation_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Conversation_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Conversation_FieldMask) FilterInputFields() *Conversation_FieldMask {
	result := &Conversation_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case Conversation_FieldPathSelectorMetadata:
			if _, ok := path.(*Conversation_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Conversation_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Conversation_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Conversation_FieldSubPath{selector: Conversation_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Conversation_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Conversation_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Conversation_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseConversation_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Conversation_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Conversation_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Conversation_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Conversation_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Conversation_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Conversation_FieldMask) AppendPath(path Conversation_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Conversation_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Conversation_FieldPath))
}

func (fieldMask *Conversation_FieldMask) GetPaths() []Conversation_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Conversation_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Conversation_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseConversation_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Conversation_FieldMask) Set(target, source *Conversation) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Conversation_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Conversation), source.(*Conversation))
}

func (fieldMask *Conversation_FieldMask) Project(source *Conversation) *Conversation {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Conversation{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	modelSnapshotMask := &Conversation_ModelSnapshot_FieldMask{}
	wholeModelSnapshotAccepted := false
	usageStatsMask := &Conversation_UsageStats_FieldMask{}
	wholeUsageStatsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Conversation_FieldTerminalPath:
			switch tp.selector {
			case Conversation_FieldPathSelectorName:
				result.Name = source.Name
			case Conversation_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case Conversation_FieldPathSelectorTitle:
				result.Title = source.Title
			case Conversation_FieldPathSelectorArchived:
				result.Archived = source.Archived
			case Conversation_FieldPathSelectorMessages:
				result.Messages = source.Messages
			case Conversation_FieldPathSelectorModelSnapshot:
				result.ModelSnapshot = source.ModelSnapshot
				wholeModelSnapshotAccepted = true
			case Conversation_FieldPathSelectorUsageStats:
				result.UsageStats = source.UsageStats
				wholeUsageStatsAccepted = true
			case Conversation_FieldPathSelectorLastActivityTime:
				result.LastActivityTime = source.LastActivityTime
			}
		case *Conversation_FieldSubPath:
			switch tp.selector {
			case Conversation_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case Conversation_FieldPathSelectorModelSnapshot:
				modelSnapshotMask.AppendPath(tp.subPath.(ConversationModelSnapshot_FieldPath))
			case Conversation_FieldPathSelectorUsageStats:
				usageStatsMask.AppendPath(tp.subPath.(ConversationUsageStats_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeModelSnapshotAccepted == false && len(modelSnapshotMask.Paths) > 0 {
		result.ModelSnapshot = modelSnapshotMask.Project(source.GetModelSnapshot())
	}
	if wholeUsageStatsAccepted == false && len(usageStatsMask.Paths) > 0 {
		result.UsageStats = usageStatsMask.Project(source.GetUsageStats())
	}
	return result
}

func (fieldMask *Conversation_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Conversation))
}

func (fieldMask *Conversation_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Conversation_ModelSnapshot_FieldMask struct {
	Paths []ConversationModelSnapshot_FieldPath
}

func FullConversation_ModelSnapshot_FieldMask() *Conversation_ModelSnapshot_FieldMask {
	res := &Conversation_ModelSnapshot_FieldMask{}
	res.Paths = append(res.Paths, &ConversationModelSnapshot_FieldTerminalPath{selector: ConversationModelSnapshot_FieldPathSelectorModel})
	res.Paths = append(res.Paths, &ConversationModelSnapshot_FieldTerminalPath{selector: ConversationModelSnapshot_FieldPathSelectorModelUsed})
	res.Paths = append(res.Paths, &ConversationModelSnapshot_FieldTerminalPath{selector: ConversationModelSnapshot_FieldPathSelectorTemperature})
	res.Paths = append(res.Paths, &ConversationModelSnapshot_FieldTerminalPath{selector: ConversationModelSnapshot_FieldPathSelectorMaxTokens})
	return res
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ConversationModelSnapshot_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseConversationModelSnapshot_FieldPath(raw)
	})
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) ProtoMessage() {}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) Subtract(other *Conversation_ModelSnapshot_FieldMask) *Conversation_ModelSnapshot_FieldMask {
	result := &Conversation_ModelSnapshot_FieldMask{}
	removedSelectors := make([]bool, 4)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ConversationModelSnapshot_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Conversation_ModelSnapshot_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Conversation_ModelSnapshot_FieldMask) FilterInputFields() *Conversation_ModelSnapshot_FieldMask {
	result := &Conversation_ModelSnapshot_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Conversation_ModelSnapshot_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ConversationModelSnapshot_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseConversationModelSnapshot_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Conversation_ModelSnapshot_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Conversation_ModelSnapshot_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) AppendPath(path ConversationModelSnapshot_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ConversationModelSnapshot_FieldPath))
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) GetPaths() []ConversationModelSnapshot_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseConversationModelSnapshot_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) Set(target, source *Conversation_ModelSnapshot) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Conversation_ModelSnapshot), source.(*Conversation_ModelSnapshot))
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) Project(source *Conversation_ModelSnapshot) *Conversation_ModelSnapshot {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Conversation_ModelSnapshot{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ConversationModelSnapshot_FieldTerminalPath:
			switch tp.selector {
			case ConversationModelSnapshot_FieldPathSelectorModel:
				result.Model = source.Model
			case ConversationModelSnapshot_FieldPathSelectorModelUsed:
				result.ModelUsed = source.ModelUsed
			case ConversationModelSnapshot_FieldPathSelectorTemperature:
				result.Temperature = source.Temperature
			case ConversationModelSnapshot_FieldPathSelectorMaxTokens:
				result.MaxTokens = source.MaxTokens
			}
		}
	}
	return result
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Conversation_ModelSnapshot))
}

func (fieldMask *Conversation_ModelSnapshot_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Conversation_UsageStats_FieldMask struct {
	Paths []ConversationUsageStats_FieldPath
}

func FullConversation_UsageStats_FieldMask() *Conversation_UsageStats_FieldMask {
	res := &Conversation_UsageStats_FieldMask{}
	res.Paths = append(res.Paths, &ConversationUsageStats_FieldTerminalPath{selector: ConversationUsageStats_FieldPathSelectorMessageCount})
	res.Paths = append(res.Paths, &ConversationUsageStats_FieldTerminalPath{selector: ConversationUsageStats_FieldPathSelectorTotalInputTokens})
	res.Paths = append(res.Paths, &ConversationUsageStats_FieldTerminalPath{selector: ConversationUsageStats_FieldPathSelectorTotalOutputTokens})
	res.Paths = append(res.Paths, &ConversationUsageStats_FieldTerminalPath{selector: ConversationUsageStats_FieldPathSelectorTotalTokens})
	return res
}

func (fieldMask *Conversation_UsageStats_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Conversation_UsageStats_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ConversationUsageStats_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Conversation_UsageStats_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseConversationUsageStats_FieldPath(raw)
	})
}

func (fieldMask *Conversation_UsageStats_FieldMask) ProtoMessage() {}

func (fieldMask *Conversation_UsageStats_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Conversation_UsageStats_FieldMask) Subtract(other *Conversation_UsageStats_FieldMask) *Conversation_UsageStats_FieldMask {
	result := &Conversation_UsageStats_FieldMask{}
	removedSelectors := make([]bool, 4)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ConversationUsageStats_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Conversation_UsageStats_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Conversation_UsageStats_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Conversation_UsageStats_FieldMask) FilterInputFields() *Conversation_UsageStats_FieldMask {
	result := &Conversation_UsageStats_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Conversation_UsageStats_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Conversation_UsageStats_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ConversationUsageStats_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseConversationUsageStats_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Conversation_UsageStats_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Conversation_UsageStats_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Conversation_UsageStats_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Conversation_UsageStats_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Conversation_UsageStats_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Conversation_UsageStats_FieldMask) AppendPath(path ConversationUsageStats_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Conversation_UsageStats_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ConversationUsageStats_FieldPath))
}

func (fieldMask *Conversation_UsageStats_FieldMask) GetPaths() []ConversationUsageStats_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Conversation_UsageStats_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Conversation_UsageStats_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseConversationUsageStats_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Conversation_UsageStats_FieldMask) Set(target, source *Conversation_UsageStats) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Conversation_UsageStats_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Conversation_UsageStats), source.(*Conversation_UsageStats))
}

func (fieldMask *Conversation_UsageStats_FieldMask) Project(source *Conversation_UsageStats) *Conversation_UsageStats {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Conversation_UsageStats{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ConversationUsageStats_FieldTerminalPath:
			switch tp.selector {
			case ConversationUsageStats_FieldPathSelectorMessageCount:
				result.MessageCount = source.MessageCount
			case ConversationUsageStats_FieldPathSelectorTotalInputTokens:
				result.TotalInputTokens = source.TotalInputTokens
			case ConversationUsageStats_FieldPathSelectorTotalOutputTokens:
				result.TotalOutputTokens = source.TotalOutputTokens
			case ConversationUsageStats_FieldPathSelectorTotalTokens:
				result.TotalTokens = source.TotalTokens
			}
		}
	}
	return result
}

func (fieldMask *Conversation_UsageStats_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Conversation_UsageStats))
}

func (fieldMask *Conversation_UsageStats_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
