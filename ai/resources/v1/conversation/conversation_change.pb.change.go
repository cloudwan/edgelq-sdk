// Code generated by protoc-gen-goten-resource
// Resource change: ConversationChange
// DO NOT EDIT!!!

package conversation

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1/user"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &iam_user.User{}
	_ = &fieldmaskpb.FieldMask{}
)

func (c *ConversationChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ConversationChange_Added_)
	return ok
}

func (c *ConversationChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ConversationChange_Modified_)
	return ok
}

func (c *ConversationChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ConversationChange_Current_)
	return ok
}

func (c *ConversationChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ConversationChange_Removed_)
	return ok
}

func (c *ConversationChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *ConversationChange_Added_:
		return cType.Added.ViewIndex
	case *ConversationChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *ConversationChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *ConversationChange_Removed_:
		return cType.Removed.ViewIndex
	case *ConversationChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *ConversationChange) GetConversation() *Conversation {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *ConversationChange_Added_:
		return cType.Added.Conversation
	case *ConversationChange_Modified_:
		return cType.Modified.Conversation
	case *ConversationChange_Current_:
		return cType.Current.Conversation
	case *ConversationChange_Removed_:
		return nil
	}
	return nil
}

func (c *ConversationChange) GetRawResource() gotenresource.Resource {
	return c.GetConversation()
}

func (c *ConversationChange) GetConversationName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *ConversationChange_Added_:
		return cType.Added.Conversation.GetName()
	case *ConversationChange_Modified_:
		return cType.Modified.Name
	case *ConversationChange_Current_:
		return cType.Current.Conversation.GetName()
	case *ConversationChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *ConversationChange) GetRawName() gotenresource.Name {
	return c.GetConversationName()
}

func (c *ConversationChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &ConversationChange_Added_{
		Added: &ConversationChange_Added{
			Conversation: snapshot.(*Conversation),
			ViewIndex:    int32(idx),
		},
	}
}

func (c *ConversationChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &ConversationChange_Modified_{
		Modified: &ConversationChange_Modified{
			Name:              name.(*Name),
			Conversation:      snapshot.(*Conversation),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *ConversationChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &ConversationChange_Current_{
		Current: &ConversationChange_Current{
			Conversation: snapshot.(*Conversation),
		},
	}
}

func (c *ConversationChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &ConversationChange_Removed_{
		Removed: &ConversationChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
