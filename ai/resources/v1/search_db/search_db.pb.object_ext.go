// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/search_db.proto
// DO NOT EDIT!!!

package search_db

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &meta.Meta{}
)

func (o *SearchDb) GotenObjectExt() {}

func (o *SearchDb) MakeFullFieldMask() *SearchDb_FieldMask {
	return FullSearchDb_FieldMask()
}

func (o *SearchDb) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchDb_FieldMask()
}

func (o *SearchDb) MakeDiffFieldMask(other *SearchDb) *SearchDb_FieldMask {
	if o == nil && other == nil {
		return &SearchDb_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchDb_FieldMask()
	}

	res := &SearchDb_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &SearchDb_FieldTerminalPath{selector: SearchDb_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SearchDb_FieldTerminalPath{selector: SearchDb_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SearchDb_FieldSubPath{selector: SearchDb_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	{
		_, leftSelected := o.ModelType.(*SearchDb_AzureAiSearch_)
		_, rightSelected := other.ModelType.(*SearchDb_AzureAiSearch_)
		if leftSelected == rightSelected {
			subMask := o.GetAzureAiSearch().MakeDiffFieldMask(other.GetAzureAiSearch())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &SearchDb_FieldTerminalPath{selector: SearchDb_FieldPathSelectorAzureAiSearch})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &SearchDb_FieldSubPath{selector: SearchDb_FieldPathSelectorAzureAiSearch, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &SearchDb_FieldTerminalPath{selector: SearchDb_FieldPathSelectorAzureAiSearch})
		}
	}
	return res
}

func (o *SearchDb) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchDb))
}

func (o *SearchDb) Clone() *SearchDb {
	if o == nil {
		return nil
	}
	result := &SearchDb{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	if o, ok := o.ModelType.(*SearchDb_AzureAiSearch_); ok {
		result.ModelType = (*SearchDb_AzureAiSearch_)(nil)
		if o != nil {
			result.ModelType = &SearchDb_AzureAiSearch_{}
			result := result.ModelType.(*SearchDb_AzureAiSearch_)
			result.AzureAiSearch = o.AzureAiSearch.Clone()
		}
	}
	return result
}

func (o *SearchDb) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchDb) Merge(source *SearchDb) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source, ok := source.GetModelType().(*SearchDb_AzureAiSearch_); ok {
		if dstOneOf, ok := o.ModelType.(*SearchDb_AzureAiSearch_); !ok || dstOneOf == nil {
			o.ModelType = &SearchDb_AzureAiSearch_{}
		}
		if source != nil {
			o := o.ModelType.(*SearchDb_AzureAiSearch_)
			if source.AzureAiSearch != nil {
				if o.AzureAiSearch == nil {
					o.AzureAiSearch = new(SearchDb_AzureAiSearch)
				}
				o.AzureAiSearch.Merge(source.AzureAiSearch)
			}
		}
	}
}

func (o *SearchDb) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchDb))
}

func (o *SearchDb_AzureAiSearch) GotenObjectExt() {}

func (o *SearchDb_AzureAiSearch) MakeFullFieldMask() *SearchDb_AzureAiSearch_FieldMask {
	return FullSearchDb_AzureAiSearch_FieldMask()
}

func (o *SearchDb_AzureAiSearch) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSearchDb_AzureAiSearch_FieldMask()
}

func (o *SearchDb_AzureAiSearch) MakeDiffFieldMask(other *SearchDb_AzureAiSearch) *SearchDb_AzureAiSearch_FieldMask {
	if o == nil && other == nil {
		return &SearchDb_AzureAiSearch_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSearchDb_AzureAiSearch_FieldMask()
	}

	res := &SearchDb_AzureAiSearch_FieldMask{}
	if o.GetEndpoint() != other.GetEndpoint() {
		res.Paths = append(res.Paths, &SearchDbAzureAiSearch_FieldTerminalPath{selector: SearchDbAzureAiSearch_FieldPathSelectorEndpoint})
	}
	if o.GetApiKey().String() != other.GetApiKey().String() {
		res.Paths = append(res.Paths, &SearchDbAzureAiSearch_FieldTerminalPath{selector: SearchDbAzureAiSearch_FieldPathSelectorApiKey})
	}
	if o.GetEnableSemantic() != other.GetEnableSemantic() {
		res.Paths = append(res.Paths, &SearchDbAzureAiSearch_FieldTerminalPath{selector: SearchDbAzureAiSearch_FieldPathSelectorEnableSemantic})
	}
	return res
}

func (o *SearchDb_AzureAiSearch) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SearchDb_AzureAiSearch))
}

func (o *SearchDb_AzureAiSearch) Clone() *SearchDb_AzureAiSearch {
	if o == nil {
		return nil
	}
	result := &SearchDb_AzureAiSearch{}
	result.Endpoint = o.Endpoint
	if o.ApiKey == nil {
		result.ApiKey = nil
	} else if data, err := o.ApiKey.ProtoString(); err != nil {
		panic(err)
	} else {
		result.ApiKey = &secrets_secret.Reference{}
		if err := result.ApiKey.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.EnableSemantic = o.EnableSemantic
	return result
}

func (o *SearchDb_AzureAiSearch) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SearchDb_AzureAiSearch) Merge(source *SearchDb_AzureAiSearch) {
	o.Endpoint = source.GetEndpoint()
	if source.GetApiKey() != nil {
		if data, err := source.GetApiKey().ProtoString(); err != nil {
			panic(err)
		} else {
			o.ApiKey = &secrets_secret.Reference{}
			if err := o.ApiKey.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.ApiKey = nil
	}
	o.EnableSemantic = source.GetEnableSemantic()
}

func (o *SearchDb_AzureAiSearch) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SearchDb_AzureAiSearch))
}
