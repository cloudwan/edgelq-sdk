// Code generated by protoc-gen-goten-resource
// Resource: SearchDb
// DO NOT EDIT!!!

package search_db

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &meta.Meta{}
)

type SearchDbList []*SearchDb

func (l SearchDbList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*SearchDb))
}

func (l SearchDbList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(SearchDbList)...)
}

func (l SearchDbList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SearchDbList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l SearchDbList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*SearchDb)
}

func (l SearchDbList) Length() int {
	return len(l)
}

type SearchDbChangeList []*SearchDbChange

func (l SearchDbChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*SearchDbChange))
}

func (l SearchDbChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(SearchDbChangeList)...)
}

func (l SearchDbChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SearchDbChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l SearchDbChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*SearchDbChange)
}

func (l SearchDbChangeList) Length() int {
	return len(l)
}

type SearchDbNameList []*Name

func (l SearchDbNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l SearchDbNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(SearchDbNameList)...)
}

func (l SearchDbNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SearchDbNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l SearchDbNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l SearchDbNameList) Length() int {
	return len(l)
}

type SearchDbReferenceList []*Reference

func (l SearchDbReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l SearchDbReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(SearchDbReferenceList)...)
}

func (l SearchDbReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SearchDbReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l SearchDbReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l SearchDbReferenceList) Length() int {
	return len(l)
}

type SearchDbParentNameList []*ParentName

func (l SearchDbParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l SearchDbParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(SearchDbParentNameList)...)
}

func (l SearchDbParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SearchDbParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l SearchDbParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l SearchDbParentNameList) Length() int {
	return len(l)
}

type SearchDbParentReferenceList []*ParentReference

func (l SearchDbParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l SearchDbParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(SearchDbParentReferenceList)...)
}

func (l SearchDbParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SearchDbParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l SearchDbParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l SearchDbParentReferenceList) Length() int {
	return len(l)
}

type SearchDbMap map[Name]*SearchDb

func (m SearchDbMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m SearchDbMap) Set(res gotenresource.Resource) {
	tRes := res.(*SearchDb)
	m[*tRes.Name] = tRes
}

func (m SearchDbMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m SearchDbMap) Length() int {
	return len(m)
}

func (m SearchDbMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type SearchDbChangeMap map[Name]*SearchDbChange

func (m SearchDbChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m SearchDbChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*SearchDbChange)
	m[*tChange.GetSearchDbName()] = tChange
}

func (m SearchDbChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m SearchDbChangeMap) Length() int {
	return len(m)
}

func (m SearchDbChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
