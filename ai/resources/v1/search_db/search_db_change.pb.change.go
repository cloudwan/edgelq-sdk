// Code generated by protoc-gen-goten-resource
// Resource change: SearchDbChange
// DO NOT EDIT!!!

package search_db

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &fieldmaskpb.FieldMask{}
)

func (c *SearchDbChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*SearchDbChange_Added_)
	return ok
}

func (c *SearchDbChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*SearchDbChange_Modified_)
	return ok
}

func (c *SearchDbChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*SearchDbChange_Current_)
	return ok
}

func (c *SearchDbChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*SearchDbChange_Removed_)
	return ok
}

func (c *SearchDbChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *SearchDbChange_Added_:
		return cType.Added.ViewIndex
	case *SearchDbChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *SearchDbChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *SearchDbChange_Removed_:
		return cType.Removed.ViewIndex
	case *SearchDbChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *SearchDbChange) GetSearchDb() *SearchDb {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *SearchDbChange_Added_:
		return cType.Added.SearchDb
	case *SearchDbChange_Modified_:
		return cType.Modified.SearchDb
	case *SearchDbChange_Current_:
		return cType.Current.SearchDb
	case *SearchDbChange_Removed_:
		return nil
	}
	return nil
}

func (c *SearchDbChange) GetRawResource() gotenresource.Resource {
	return c.GetSearchDb()
}

func (c *SearchDbChange) GetSearchDbName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *SearchDbChange_Added_:
		return cType.Added.SearchDb.GetName()
	case *SearchDbChange_Modified_:
		return cType.Modified.Name
	case *SearchDbChange_Current_:
		return cType.Current.SearchDb.GetName()
	case *SearchDbChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *SearchDbChange) GetRawName() gotenresource.Name {
	return c.GetSearchDbName()
}

func (c *SearchDbChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &SearchDbChange_Added_{
		Added: &SearchDbChange_Added{
			SearchDb:  snapshot.(*SearchDb),
			ViewIndex: int32(idx),
		},
	}
}

func (c *SearchDbChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &SearchDbChange_Modified_{
		Modified: &SearchDbChange_Modified{
			Name:              name.(*Name),
			SearchDb:          snapshot.(*SearchDb),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *SearchDbChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &SearchDbChange_Current_{
		Current: &SearchDbChange_Current{
			SearchDb: snapshot.(*SearchDb),
		},
	}
}

func (c *SearchDbChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &SearchDbChange_Removed_{
		Removed: &SearchDbChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
