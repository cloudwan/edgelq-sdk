// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/search_db.proto
// DO NOT EDIT!!!

package search_db

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SearchDb_FieldPath interface {
	gotenobject.FieldPath
	Selector() SearchDb_FieldPathSelector
	Get(source *SearchDb) []interface{}
	GetSingle(source *SearchDb) (interface{}, bool)
	ClearValue(item *SearchDb)

	// Those methods build corresponding SearchDb_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SearchDb_FieldPathValue
	WithIArrayOfValues(values interface{}) SearchDb_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SearchDb_FieldPathArrayItemValue
}

type SearchDb_FieldPathSelector int32

const (
	SearchDb_FieldPathSelectorName          SearchDb_FieldPathSelector = 0
	SearchDb_FieldPathSelectorMetadata      SearchDb_FieldPathSelector = 1
	SearchDb_FieldPathSelectorAzureAiSearch SearchDb_FieldPathSelector = 2
)

func (s SearchDb_FieldPathSelector) String() string {
	switch s {
	case SearchDb_FieldPathSelectorName:
		return "name"
	case SearchDb_FieldPathSelectorMetadata:
		return "metadata"
	case SearchDb_FieldPathSelectorAzureAiSearch:
		return "azure_ai_search"
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb: %d", s))
	}
}

func BuildSearchDb_FieldPath(fp gotenobject.RawFieldPath) (SearchDb_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SearchDb")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &SearchDb_FieldTerminalPath{selector: SearchDb_FieldPathSelectorName}, nil
		case "metadata":
			return &SearchDb_FieldTerminalPath{selector: SearchDb_FieldPathSelectorMetadata}, nil
		case "azure_ai_search", "azureAiSearch", "azure-ai-search":
			return &SearchDb_FieldTerminalPath{selector: SearchDb_FieldPathSelectorAzureAiSearch}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SearchDb_FieldSubPath{selector: SearchDb_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "azure_ai_search", "azureAiSearch", "azure-ai-search":
			if subpath, err := BuildSearchDbAzureAiSearch_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SearchDb_FieldSubPath{selector: SearchDb_FieldPathSelectorAzureAiSearch, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SearchDb", fp)
}

func ParseSearchDb_FieldPath(rawField string) (SearchDb_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSearchDb_FieldPath(fp)
}

func MustParseSearchDb_FieldPath(rawField string) SearchDb_FieldPath {
	fp, err := ParseSearchDb_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SearchDb_FieldTerminalPath struct {
	selector SearchDb_FieldPathSelector
}

var _ SearchDb_FieldPath = (*SearchDb_FieldTerminalPath)(nil)

func (fp *SearchDb_FieldTerminalPath) Selector() SearchDb_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SearchDb_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SearchDb_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SearchDb
func (fp *SearchDb_FieldTerminalPath) Get(source *SearchDb) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SearchDb_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case SearchDb_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case SearchDb_FieldPathSelectorAzureAiSearch:
			if source, ok := source.ModelType.(*SearchDb_AzureAiSearch_); ok && source != nil {
				if source.AzureAiSearch != nil {
					values = append(values, source.AzureAiSearch)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fp.selector))
		}
	}
	return
}

func (fp *SearchDb_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SearchDb))
}

// GetSingle returns value pointed by specific field of from source SearchDb
func (fp *SearchDb_FieldTerminalPath) GetSingle(source *SearchDb) (interface{}, bool) {
	switch fp.selector {
	case SearchDb_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case SearchDb_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case SearchDb_FieldPathSelectorAzureAiSearch:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetAzureAiSearch(), false
		}
		_, oneOfSelected := source.ModelType.(*SearchDb_AzureAiSearch_)
		if !oneOfSelected {
			return source.GetAzureAiSearch(), false // to return "type" information
		}
		res := source.GetAzureAiSearch()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fp.selector))
	}
}

func (fp *SearchDb_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SearchDb))
}

// GetDefault returns a default value of the field type
func (fp *SearchDb_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SearchDb_FieldPathSelectorName:
		return (*Name)(nil)
	case SearchDb_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case SearchDb_FieldPathSelectorAzureAiSearch:
		return (*SearchDb_AzureAiSearch)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fp.selector))
	}
}

func (fp *SearchDb_FieldTerminalPath) ClearValue(item *SearchDb) {
	if item != nil {
		switch fp.selector {
		case SearchDb_FieldPathSelectorName:
			item.Name = nil
		case SearchDb_FieldPathSelectorMetadata:
			item.Metadata = nil
		case SearchDb_FieldPathSelectorAzureAiSearch:
			if item, ok := item.ModelType.(*SearchDb_AzureAiSearch_); ok {
				item.AzureAiSearch = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fp.selector))
		}
	}
}

func (fp *SearchDb_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SearchDb))
}

// IsLeaf - whether field path is holds simple value
func (fp *SearchDb_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SearchDb_FieldPathSelectorName
}

func (fp *SearchDb_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SearchDb_FieldTerminalPath) WithIValue(value interface{}) SearchDb_FieldPathValue {
	switch fp.selector {
	case SearchDb_FieldPathSelectorName:
		return &SearchDb_FieldTerminalPathValue{SearchDb_FieldTerminalPath: *fp, value: value.(*Name)}
	case SearchDb_FieldPathSelectorMetadata:
		return &SearchDb_FieldTerminalPathValue{SearchDb_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case SearchDb_FieldPathSelectorAzureAiSearch:
		return &SearchDb_FieldTerminalPathValue{SearchDb_FieldTerminalPath: *fp, value: value.(*SearchDb_AzureAiSearch)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fp.selector))
	}
}

func (fp *SearchDb_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SearchDb_FieldTerminalPath) WithIArrayOfValues(values interface{}) SearchDb_FieldPathArrayOfValues {
	fpaov := &SearchDb_FieldTerminalPathArrayOfValues{SearchDb_FieldTerminalPath: *fp}
	switch fp.selector {
	case SearchDb_FieldPathSelectorName:
		return &SearchDb_FieldTerminalPathArrayOfValues{SearchDb_FieldTerminalPath: *fp, values: values.([]*Name)}
	case SearchDb_FieldPathSelectorMetadata:
		return &SearchDb_FieldTerminalPathArrayOfValues{SearchDb_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case SearchDb_FieldPathSelectorAzureAiSearch:
		return &SearchDb_FieldTerminalPathArrayOfValues{SearchDb_FieldTerminalPath: *fp, values: values.([]*SearchDb_AzureAiSearch)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fp.selector))
	}
	return fpaov
}

func (fp *SearchDb_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SearchDb_FieldTerminalPath) WithIArrayItemValue(value interface{}) SearchDb_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fp.selector))
	}
}

func (fp *SearchDb_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type SearchDb_FieldSubPath struct {
	selector SearchDb_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ SearchDb_FieldPath = (*SearchDb_FieldSubPath)(nil)

func (fps *SearchDb_FieldSubPath) Selector() SearchDb_FieldPathSelector {
	return fps.selector
}
func (fps *SearchDb_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *SearchDb_FieldSubPath) AsAzureAiSearchSubPath() (SearchDbAzureAiSearch_FieldPath, bool) {
	res, ok := fps.subPath.(SearchDbAzureAiSearch_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *SearchDb_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *SearchDb_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source SearchDb
func (fps *SearchDb_FieldSubPath) Get(source *SearchDb) (values []interface{}) {
	switch fps.selector {
	case SearchDb_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case SearchDb_FieldPathSelectorAzureAiSearch:
		values = append(values, fps.subPath.GetRaw(source.GetAzureAiSearch())...)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fps.selector))
	}
	return
}

func (fps *SearchDb_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*SearchDb))
}

// GetSingle returns value of selected field from source SearchDb
func (fps *SearchDb_FieldSubPath) GetSingle(source *SearchDb) (interface{}, bool) {
	switch fps.selector {
	case SearchDb_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case SearchDb_FieldPathSelectorAzureAiSearch:
		if source.GetAzureAiSearch() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAzureAiSearch())
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fps.selector))
	}
}

func (fps *SearchDb_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*SearchDb))
}

// GetDefault returns a default value of the field type
func (fps *SearchDb_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *SearchDb_FieldSubPath) ClearValue(item *SearchDb) {
	if item != nil {
		switch fps.selector {
		case SearchDb_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case SearchDb_FieldPathSelectorAzureAiSearch:
			if item.ModelType != nil {
				if item, ok := item.ModelType.(*SearchDb_AzureAiSearch_); ok {
					fps.subPath.ClearValueRaw(item.AzureAiSearch)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fps.selector))
		}
	}
}

func (fps *SearchDb_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*SearchDb))
}

// IsLeaf - whether field path is holds simple value
func (fps *SearchDb_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *SearchDb_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&SearchDb_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *SearchDb_FieldSubPath) WithIValue(value interface{}) SearchDb_FieldPathValue {
	return &SearchDb_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *SearchDb_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *SearchDb_FieldSubPath) WithIArrayOfValues(values interface{}) SearchDb_FieldPathArrayOfValues {
	return &SearchDb_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *SearchDb_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *SearchDb_FieldSubPath) WithIArrayItemValue(value interface{}) SearchDb_FieldPathArrayItemValue {
	return &SearchDb_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *SearchDb_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// SearchDb_FieldPathValue allows storing values for SearchDb fields according to their type
type SearchDb_FieldPathValue interface {
	SearchDb_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SearchDb)
	CompareWith(*SearchDb) (cmp int, comparable bool)
}

func ParseSearchDb_FieldPathValue(pathStr, valueStr string) (SearchDb_FieldPathValue, error) {
	fp, err := ParseSearchDb_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchDb field path value from %s: %v", valueStr, err)
	}
	return fpv.(SearchDb_FieldPathValue), nil
}

func MustParseSearchDb_FieldPathValue(pathStr, valueStr string) SearchDb_FieldPathValue {
	fpv, err := ParseSearchDb_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SearchDb_FieldTerminalPathValue struct {
	SearchDb_FieldTerminalPath
	value interface{}
}

var _ SearchDb_FieldPathValue = (*SearchDb_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SearchDb' as interface{}
func (fpv *SearchDb_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SearchDb_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *SearchDb_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *SearchDb_FieldTerminalPathValue) AsAzureAiSearchValue() (*SearchDb_AzureAiSearch, bool) {
	res, ok := fpv.value.(*SearchDb_AzureAiSearch)
	return res, ok
}

// SetTo stores value for selected field for object SearchDb
func (fpv *SearchDb_FieldTerminalPathValue) SetTo(target **SearchDb) {
	if *target == nil {
		*target = new(SearchDb)
	}
	switch fpv.selector {
	case SearchDb_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case SearchDb_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case SearchDb_FieldPathSelectorAzureAiSearch:
		if _, ok := (*target).ModelType.(*SearchDb_AzureAiSearch_); !ok {
			(*target).ModelType = &SearchDb_AzureAiSearch_{}
		}
		(*target).ModelType.(*SearchDb_AzureAiSearch_).AzureAiSearch = fpv.value.(*SearchDb_AzureAiSearch)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fpv.selector))
	}
}

func (fpv *SearchDb_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchDb)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SearchDb_FieldTerminalPathValue' with the value under path in 'SearchDb'.
func (fpv *SearchDb_FieldTerminalPathValue) CompareWith(source *SearchDb) (int, bool) {
	switch fpv.selector {
	case SearchDb_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case SearchDb_FieldPathSelectorMetadata:
		return 0, false
	case SearchDb_FieldPathSelectorAzureAiSearch:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fpv.selector))
	}
}

func (fpv *SearchDb_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SearchDb))
}

type SearchDb_FieldSubPathValue struct {
	SearchDb_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ SearchDb_FieldPathValue = (*SearchDb_FieldSubPathValue)(nil)

func (fpvs *SearchDb_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *SearchDb_FieldSubPathValue) AsAzureAiSearchPathValue() (SearchDbAzureAiSearch_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(SearchDbAzureAiSearch_FieldPathValue)
	return res, ok
}

func (fpvs *SearchDb_FieldSubPathValue) SetTo(target **SearchDb) {
	if *target == nil {
		*target = new(SearchDb)
	}
	switch fpvs.Selector() {
	case SearchDb_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case SearchDb_FieldPathSelectorAzureAiSearch:
		if _, ok := (*target).ModelType.(*SearchDb_AzureAiSearch_); !ok {
			(*target).ModelType = &SearchDb_AzureAiSearch_{}
		}
		fpvs.subPathValue.(SearchDbAzureAiSearch_FieldPathValue).SetTo(&(*target).ModelType.(*SearchDb_AzureAiSearch_).AzureAiSearch)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fpvs.Selector()))
	}
}

func (fpvs *SearchDb_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchDb)
	fpvs.SetTo(&typedObject)
}

func (fpvs *SearchDb_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *SearchDb_FieldSubPathValue) CompareWith(source *SearchDb) (int, bool) {
	switch fpvs.Selector() {
	case SearchDb_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case SearchDb_FieldPathSelectorAzureAiSearch:
		return fpvs.subPathValue.(SearchDbAzureAiSearch_FieldPathValue).CompareWith(source.GetAzureAiSearch())
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fpvs.Selector()))
	}
}

func (fpvs *SearchDb_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*SearchDb))
}

// SearchDb_FieldPathArrayItemValue allows storing single item in Path-specific values for SearchDb according to their type
// Present only for array (repeated) types.
type SearchDb_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SearchDb_FieldPath
	ContainsValue(*SearchDb) bool
}

// ParseSearchDb_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSearchDb_FieldPathArrayItemValue(pathStr, valueStr string) (SearchDb_FieldPathArrayItemValue, error) {
	fp, err := ParseSearchDb_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchDb field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SearchDb_FieldPathArrayItemValue), nil
}

func MustParseSearchDb_FieldPathArrayItemValue(pathStr, valueStr string) SearchDb_FieldPathArrayItemValue {
	fpaiv, err := ParseSearchDb_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SearchDb_FieldTerminalPathArrayItemValue struct {
	SearchDb_FieldTerminalPath
	value interface{}
}

var _ SearchDb_FieldPathArrayItemValue = (*SearchDb_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SearchDb as interface{}
func (fpaiv *SearchDb_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SearchDb_FieldTerminalPathArrayItemValue) GetSingle(source *SearchDb) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SearchDb_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SearchDb))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchDb'
func (fpaiv *SearchDb_FieldTerminalPathArrayItemValue) ContainsValue(source *SearchDb) bool {
	slice := fpaiv.SearchDb_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type SearchDb_FieldSubPathArrayItemValue struct {
	SearchDb_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *SearchDb_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *SearchDb_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *SearchDb_FieldSubPathArrayItemValue) AsAzureAiSearchPathItemValue() (SearchDbAzureAiSearch_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(SearchDbAzureAiSearch_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'SearchDb'
func (fpaivs *SearchDb_FieldSubPathArrayItemValue) ContainsValue(source *SearchDb) bool {
	switch fpaivs.Selector() {
	case SearchDb_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case SearchDb_FieldPathSelectorAzureAiSearch:
		return fpaivs.subPathItemValue.(SearchDbAzureAiSearch_FieldPathArrayItemValue).ContainsValue(source.GetAzureAiSearch())
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb: %d", fpaivs.Selector()))
	}
}

// SearchDb_FieldPathArrayOfValues allows storing slice of values for SearchDb fields according to their type
type SearchDb_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SearchDb_FieldPath
}

func ParseSearchDb_FieldPathArrayOfValues(pathStr, valuesStr string) (SearchDb_FieldPathArrayOfValues, error) {
	fp, err := ParseSearchDb_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SearchDb field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SearchDb_FieldPathArrayOfValues), nil
}

func MustParseSearchDb_FieldPathArrayOfValues(pathStr, valuesStr string) SearchDb_FieldPathArrayOfValues {
	fpaov, err := ParseSearchDb_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SearchDb_FieldTerminalPathArrayOfValues struct {
	SearchDb_FieldTerminalPath
	values interface{}
}

var _ SearchDb_FieldPathArrayOfValues = (*SearchDb_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SearchDb_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SearchDb_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case SearchDb_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case SearchDb_FieldPathSelectorAzureAiSearch:
		for _, v := range fpaov.values.([]*SearchDb_AzureAiSearch) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SearchDb_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *SearchDb_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *SearchDb_FieldTerminalPathArrayOfValues) AsAzureAiSearchArrayOfValues() ([]*SearchDb_AzureAiSearch, bool) {
	res, ok := fpaov.values.([]*SearchDb_AzureAiSearch)
	return res, ok
}

type SearchDb_FieldSubPathArrayOfValues struct {
	SearchDb_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ SearchDb_FieldPathArrayOfValues = (*SearchDb_FieldSubPathArrayOfValues)(nil)

func (fpsaov *SearchDb_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *SearchDb_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *SearchDb_FieldSubPathArrayOfValues) AsAzureAiSearchPathArrayOfValues() (SearchDbAzureAiSearch_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(SearchDbAzureAiSearch_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SearchDbAzureAiSearch_FieldPath interface {
	gotenobject.FieldPath
	Selector() SearchDbAzureAiSearch_FieldPathSelector
	Get(source *SearchDb_AzureAiSearch) []interface{}
	GetSingle(source *SearchDb_AzureAiSearch) (interface{}, bool)
	ClearValue(item *SearchDb_AzureAiSearch)

	// Those methods build corresponding SearchDbAzureAiSearch_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SearchDbAzureAiSearch_FieldPathValue
	WithIArrayOfValues(values interface{}) SearchDbAzureAiSearch_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SearchDbAzureAiSearch_FieldPathArrayItemValue
}

type SearchDbAzureAiSearch_FieldPathSelector int32

const (
	SearchDbAzureAiSearch_FieldPathSelectorEndpoint SearchDbAzureAiSearch_FieldPathSelector = 0
	SearchDbAzureAiSearch_FieldPathSelectorApiKey   SearchDbAzureAiSearch_FieldPathSelector = 1
)

func (s SearchDbAzureAiSearch_FieldPathSelector) String() string {
	switch s {
	case SearchDbAzureAiSearch_FieldPathSelectorEndpoint:
		return "endpoint"
	case SearchDbAzureAiSearch_FieldPathSelectorApiKey:
		return "api_key"
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb_AzureAiSearch: %d", s))
	}
}

func BuildSearchDbAzureAiSearch_FieldPath(fp gotenobject.RawFieldPath) (SearchDbAzureAiSearch_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SearchDb_AzureAiSearch")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "endpoint":
			return &SearchDbAzureAiSearch_FieldTerminalPath{selector: SearchDbAzureAiSearch_FieldPathSelectorEndpoint}, nil
		case "api_key", "apiKey", "api-key":
			return &SearchDbAzureAiSearch_FieldTerminalPath{selector: SearchDbAzureAiSearch_FieldPathSelectorApiKey}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SearchDb_AzureAiSearch", fp)
}

func ParseSearchDbAzureAiSearch_FieldPath(rawField string) (SearchDbAzureAiSearch_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSearchDbAzureAiSearch_FieldPath(fp)
}

func MustParseSearchDbAzureAiSearch_FieldPath(rawField string) SearchDbAzureAiSearch_FieldPath {
	fp, err := ParseSearchDbAzureAiSearch_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SearchDbAzureAiSearch_FieldTerminalPath struct {
	selector SearchDbAzureAiSearch_FieldPathSelector
}

var _ SearchDbAzureAiSearch_FieldPath = (*SearchDbAzureAiSearch_FieldTerminalPath)(nil)

func (fp *SearchDbAzureAiSearch_FieldTerminalPath) Selector() SearchDbAzureAiSearch_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SearchDbAzureAiSearch_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SearchDbAzureAiSearch_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SearchDb_AzureAiSearch
func (fp *SearchDbAzureAiSearch_FieldTerminalPath) Get(source *SearchDb_AzureAiSearch) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SearchDbAzureAiSearch_FieldPathSelectorEndpoint:
			values = append(values, source.Endpoint)
		case SearchDbAzureAiSearch_FieldPathSelectorApiKey:
			if source.ApiKey != nil {
				values = append(values, source.ApiKey)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SearchDb_AzureAiSearch: %d", fp.selector))
		}
	}
	return
}

func (fp *SearchDbAzureAiSearch_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SearchDb_AzureAiSearch))
}

// GetSingle returns value pointed by specific field of from source SearchDb_AzureAiSearch
func (fp *SearchDbAzureAiSearch_FieldTerminalPath) GetSingle(source *SearchDb_AzureAiSearch) (interface{}, bool) {
	switch fp.selector {
	case SearchDbAzureAiSearch_FieldPathSelectorEndpoint:
		return source.GetEndpoint(), source != nil
	case SearchDbAzureAiSearch_FieldPathSelectorApiKey:
		res := source.GetApiKey()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb_AzureAiSearch: %d", fp.selector))
	}
}

func (fp *SearchDbAzureAiSearch_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SearchDb_AzureAiSearch))
}

// GetDefault returns a default value of the field type
func (fp *SearchDbAzureAiSearch_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SearchDbAzureAiSearch_FieldPathSelectorEndpoint:
		return ""
	case SearchDbAzureAiSearch_FieldPathSelectorApiKey:
		return (*secrets_secret.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb_AzureAiSearch: %d", fp.selector))
	}
}

func (fp *SearchDbAzureAiSearch_FieldTerminalPath) ClearValue(item *SearchDb_AzureAiSearch) {
	if item != nil {
		switch fp.selector {
		case SearchDbAzureAiSearch_FieldPathSelectorEndpoint:
			item.Endpoint = ""
		case SearchDbAzureAiSearch_FieldPathSelectorApiKey:
			item.ApiKey = nil
		default:
			panic(fmt.Sprintf("Invalid selector for SearchDb_AzureAiSearch: %d", fp.selector))
		}
	}
}

func (fp *SearchDbAzureAiSearch_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SearchDb_AzureAiSearch))
}

// IsLeaf - whether field path is holds simple value
func (fp *SearchDbAzureAiSearch_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SearchDbAzureAiSearch_FieldPathSelectorEndpoint ||
		fp.selector == SearchDbAzureAiSearch_FieldPathSelectorApiKey
}

func (fp *SearchDbAzureAiSearch_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SearchDbAzureAiSearch_FieldTerminalPath) WithIValue(value interface{}) SearchDbAzureAiSearch_FieldPathValue {
	switch fp.selector {
	case SearchDbAzureAiSearch_FieldPathSelectorEndpoint:
		return &SearchDbAzureAiSearch_FieldTerminalPathValue{SearchDbAzureAiSearch_FieldTerminalPath: *fp, value: value.(string)}
	case SearchDbAzureAiSearch_FieldPathSelectorApiKey:
		return &SearchDbAzureAiSearch_FieldTerminalPathValue{SearchDbAzureAiSearch_FieldTerminalPath: *fp, value: value.(*secrets_secret.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb_AzureAiSearch: %d", fp.selector))
	}
}

func (fp *SearchDbAzureAiSearch_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SearchDbAzureAiSearch_FieldTerminalPath) WithIArrayOfValues(values interface{}) SearchDbAzureAiSearch_FieldPathArrayOfValues {
	fpaov := &SearchDbAzureAiSearch_FieldTerminalPathArrayOfValues{SearchDbAzureAiSearch_FieldTerminalPath: *fp}
	switch fp.selector {
	case SearchDbAzureAiSearch_FieldPathSelectorEndpoint:
		return &SearchDbAzureAiSearch_FieldTerminalPathArrayOfValues{SearchDbAzureAiSearch_FieldTerminalPath: *fp, values: values.([]string)}
	case SearchDbAzureAiSearch_FieldPathSelectorApiKey:
		return &SearchDbAzureAiSearch_FieldTerminalPathArrayOfValues{SearchDbAzureAiSearch_FieldTerminalPath: *fp, values: values.([]*secrets_secret.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb_AzureAiSearch: %d", fp.selector))
	}
	return fpaov
}

func (fp *SearchDbAzureAiSearch_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SearchDbAzureAiSearch_FieldTerminalPath) WithIArrayItemValue(value interface{}) SearchDbAzureAiSearch_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb_AzureAiSearch: %d", fp.selector))
	}
}

func (fp *SearchDbAzureAiSearch_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// SearchDbAzureAiSearch_FieldPathValue allows storing values for AzureAiSearch fields according to their type
type SearchDbAzureAiSearch_FieldPathValue interface {
	SearchDbAzureAiSearch_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SearchDb_AzureAiSearch)
	CompareWith(*SearchDb_AzureAiSearch) (cmp int, comparable bool)
}

func ParseSearchDbAzureAiSearch_FieldPathValue(pathStr, valueStr string) (SearchDbAzureAiSearch_FieldPathValue, error) {
	fp, err := ParseSearchDbAzureAiSearch_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureAiSearch field path value from %s: %v", valueStr, err)
	}
	return fpv.(SearchDbAzureAiSearch_FieldPathValue), nil
}

func MustParseSearchDbAzureAiSearch_FieldPathValue(pathStr, valueStr string) SearchDbAzureAiSearch_FieldPathValue {
	fpv, err := ParseSearchDbAzureAiSearch_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SearchDbAzureAiSearch_FieldTerminalPathValue struct {
	SearchDbAzureAiSearch_FieldTerminalPath
	value interface{}
}

var _ SearchDbAzureAiSearch_FieldPathValue = (*SearchDbAzureAiSearch_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AzureAiSearch' as interface{}
func (fpv *SearchDbAzureAiSearch_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SearchDbAzureAiSearch_FieldTerminalPathValue) AsEndpointValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *SearchDbAzureAiSearch_FieldTerminalPathValue) AsApiKeyValue() (*secrets_secret.Reference, bool) {
	res, ok := fpv.value.(*secrets_secret.Reference)
	return res, ok
}

// SetTo stores value for selected field for object AzureAiSearch
func (fpv *SearchDbAzureAiSearch_FieldTerminalPathValue) SetTo(target **SearchDb_AzureAiSearch) {
	if *target == nil {
		*target = new(SearchDb_AzureAiSearch)
	}
	switch fpv.selector {
	case SearchDbAzureAiSearch_FieldPathSelectorEndpoint:
		(*target).Endpoint = fpv.value.(string)
	case SearchDbAzureAiSearch_FieldPathSelectorApiKey:
		(*target).ApiKey = fpv.value.(*secrets_secret.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb_AzureAiSearch: %d", fpv.selector))
	}
}

func (fpv *SearchDbAzureAiSearch_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SearchDb_AzureAiSearch)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SearchDbAzureAiSearch_FieldTerminalPathValue' with the value under path in 'SearchDb_AzureAiSearch'.
func (fpv *SearchDbAzureAiSearch_FieldTerminalPathValue) CompareWith(source *SearchDb_AzureAiSearch) (int, bool) {
	switch fpv.selector {
	case SearchDbAzureAiSearch_FieldPathSelectorEndpoint:
		leftValue := fpv.value.(string)
		rightValue := source.GetEndpoint()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SearchDbAzureAiSearch_FieldPathSelectorApiKey:
		leftValue := fpv.value.(*secrets_secret.Reference)
		rightValue := source.GetApiKey()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SearchDb_AzureAiSearch: %d", fpv.selector))
	}
}

func (fpv *SearchDbAzureAiSearch_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SearchDb_AzureAiSearch))
}

// SearchDbAzureAiSearch_FieldPathArrayItemValue allows storing single item in Path-specific values for AzureAiSearch according to their type
// Present only for array (repeated) types.
type SearchDbAzureAiSearch_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SearchDbAzureAiSearch_FieldPath
	ContainsValue(*SearchDb_AzureAiSearch) bool
}

// ParseSearchDbAzureAiSearch_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSearchDbAzureAiSearch_FieldPathArrayItemValue(pathStr, valueStr string) (SearchDbAzureAiSearch_FieldPathArrayItemValue, error) {
	fp, err := ParseSearchDbAzureAiSearch_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureAiSearch field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SearchDbAzureAiSearch_FieldPathArrayItemValue), nil
}

func MustParseSearchDbAzureAiSearch_FieldPathArrayItemValue(pathStr, valueStr string) SearchDbAzureAiSearch_FieldPathArrayItemValue {
	fpaiv, err := ParseSearchDbAzureAiSearch_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SearchDbAzureAiSearch_FieldTerminalPathArrayItemValue struct {
	SearchDbAzureAiSearch_FieldTerminalPath
	value interface{}
}

var _ SearchDbAzureAiSearch_FieldPathArrayItemValue = (*SearchDbAzureAiSearch_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SearchDb_AzureAiSearch as interface{}
func (fpaiv *SearchDbAzureAiSearch_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SearchDbAzureAiSearch_FieldTerminalPathArrayItemValue) GetSingle(source *SearchDb_AzureAiSearch) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SearchDbAzureAiSearch_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SearchDb_AzureAiSearch))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AzureAiSearch'
func (fpaiv *SearchDbAzureAiSearch_FieldTerminalPathArrayItemValue) ContainsValue(source *SearchDb_AzureAiSearch) bool {
	slice := fpaiv.SearchDbAzureAiSearch_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// SearchDbAzureAiSearch_FieldPathArrayOfValues allows storing slice of values for AzureAiSearch fields according to their type
type SearchDbAzureAiSearch_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SearchDbAzureAiSearch_FieldPath
}

func ParseSearchDbAzureAiSearch_FieldPathArrayOfValues(pathStr, valuesStr string) (SearchDbAzureAiSearch_FieldPathArrayOfValues, error) {
	fp, err := ParseSearchDbAzureAiSearch_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureAiSearch field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SearchDbAzureAiSearch_FieldPathArrayOfValues), nil
}

func MustParseSearchDbAzureAiSearch_FieldPathArrayOfValues(pathStr, valuesStr string) SearchDbAzureAiSearch_FieldPathArrayOfValues {
	fpaov, err := ParseSearchDbAzureAiSearch_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SearchDbAzureAiSearch_FieldTerminalPathArrayOfValues struct {
	SearchDbAzureAiSearch_FieldTerminalPath
	values interface{}
}

var _ SearchDbAzureAiSearch_FieldPathArrayOfValues = (*SearchDbAzureAiSearch_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SearchDbAzureAiSearch_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SearchDbAzureAiSearch_FieldPathSelectorEndpoint:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case SearchDbAzureAiSearch_FieldPathSelectorApiKey:
		for _, v := range fpaov.values.([]*secrets_secret.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SearchDbAzureAiSearch_FieldTerminalPathArrayOfValues) AsEndpointArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *SearchDbAzureAiSearch_FieldTerminalPathArrayOfValues) AsApiKeyArrayOfValues() ([]*secrets_secret.Reference, bool) {
	res, ok := fpaov.values.([]*secrets_secret.Reference)
	return res, ok
}
