// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/connector.proto
// DO NOT EDIT!!!

package connector

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

func (o *Connector) GotenObjectExt() {}

func (o *Connector) MakeFullFieldMask() *Connector_FieldMask {
	return FullConnector_FieldMask()
}

func (o *Connector) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConnector_FieldMask()
}

func (o *Connector) MakeDiffFieldMask(other *Connector) *Connector_FieldMask {
	if o == nil && other == nil {
		return &Connector_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConnector_FieldMask()
	}

	res := &Connector_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Connector_FieldSubPath{selector: Connector_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorDisplayName})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorDescription})
	}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorType})
	}
	{
		subMask := o.GetMcpConfig().MakeDiffFieldMask(other.GetMcpConfig())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorMcpConfig})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Connector_FieldSubPath{selector: Connector_FieldPathSelectorMcpConfig, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetOauthConfig().MakeDiffFieldMask(other.GetOauthConfig())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorOauthConfig})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Connector_FieldSubPath{selector: Connector_FieldPathSelectorOauthConfig, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetConnectTimeout(), other.GetConnectTimeout()) {
		res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorConnectTimeout})
	}
	if !proto.Equal(o.GetRequestTimeout(), other.GetRequestTimeout()) {
		res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorRequestTimeout})
	}
	return res
}

func (o *Connector) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Connector))
}

func (o *Connector) Clone() *Connector {
	if o == nil {
		return nil
	}
	result := &Connector{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.DisplayName = o.DisplayName
	result.Description = o.Description
	result.Type = o.Type
	result.McpConfig = o.McpConfig.Clone()
	result.OauthConfig = o.OauthConfig.Clone()
	result.ConnectTimeout = proto.Clone(o.ConnectTimeout).(*durationpb.Duration)
	result.RequestTimeout = proto.Clone(o.RequestTimeout).(*durationpb.Duration)
	return result
}

func (o *Connector) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Connector) Merge(source *Connector) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.DisplayName = source.GetDisplayName()
	o.Description = source.GetDescription()
	o.Type = source.GetType()
	if source.GetMcpConfig() != nil {
		if o.McpConfig == nil {
			o.McpConfig = new(MCPConfig)
		}
		o.McpConfig.Merge(source.GetMcpConfig())
	}
	if source.GetOauthConfig() != nil {
		if o.OauthConfig == nil {
			o.OauthConfig = new(OAuthConfig)
		}
		o.OauthConfig.Merge(source.GetOauthConfig())
	}
	if source.GetConnectTimeout() != nil {
		if o.ConnectTimeout == nil {
			o.ConnectTimeout = new(durationpb.Duration)
		}
		proto.Merge(o.ConnectTimeout, source.GetConnectTimeout())
	}
	if source.GetRequestTimeout() != nil {
		if o.RequestTimeout == nil {
			o.RequestTimeout = new(durationpb.Duration)
		}
		proto.Merge(o.RequestTimeout, source.GetRequestTimeout())
	}
}

func (o *Connector) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Connector))
}

func (o *MCPConfig) GotenObjectExt() {}

func (o *MCPConfig) MakeFullFieldMask() *MCPConfig_FieldMask {
	return FullMCPConfig_FieldMask()
}

func (o *MCPConfig) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullMCPConfig_FieldMask()
}

func (o *MCPConfig) MakeDiffFieldMask(other *MCPConfig) *MCPConfig_FieldMask {
	if o == nil && other == nil {
		return &MCPConfig_FieldMask{}
	}
	if o == nil || other == nil {
		return FullMCPConfig_FieldMask()
	}

	res := &MCPConfig_FieldMask{}
	if o.GetEndpoint() != other.GetEndpoint() {
		res.Paths = append(res.Paths, &MCPConfig_FieldTerminalPath{selector: MCPConfig_FieldPathSelectorEndpoint})
	}

	if len(o.GetArgs()) == len(other.GetArgs()) {
		for i, lValue := range o.GetArgs() {
			rValue := other.GetArgs()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &MCPConfig_FieldTerminalPath{selector: MCPConfig_FieldPathSelectorArgs})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &MCPConfig_FieldTerminalPath{selector: MCPConfig_FieldPathSelectorArgs})
	}

	if len(o.GetEnvironment()) == len(other.GetEnvironment()) {
		for i, lValue := range o.GetEnvironment() {
			rValue := other.GetEnvironment()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &MCPConfig_FieldTerminalPath{selector: MCPConfig_FieldPathSelectorEnvironment})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &MCPConfig_FieldTerminalPath{selector: MCPConfig_FieldPathSelectorEnvironment})
	}
	return res
}

func (o *MCPConfig) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*MCPConfig))
}

func (o *MCPConfig) Clone() *MCPConfig {
	if o == nil {
		return nil
	}
	result := &MCPConfig{}
	result.Endpoint = o.Endpoint
	result.Args = make([]string, len(o.Args))
	for i, sourceValue := range o.Args {
		result.Args[i] = sourceValue
	}
	result.Environment = map[string]string{}
	for key, sourceValue := range o.Environment {
		result.Environment[key] = sourceValue
	}
	return result
}

func (o *MCPConfig) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *MCPConfig) Merge(source *MCPConfig) {
	o.Endpoint = source.GetEndpoint()
	for _, sourceValue := range source.GetArgs() {
		exists := false
		for _, currentValue := range o.Args {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Args = append(o.Args, newDstElement)
		}
	}

	if source.GetEnvironment() != nil {
		if o.Environment == nil {
			o.Environment = make(map[string]string, len(source.GetEnvironment()))
		}
		for key, sourceValue := range source.GetEnvironment() {
			o.Environment[key] = sourceValue
		}
	}
}

func (o *MCPConfig) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*MCPConfig))
}

func (o *OAuthConfig) GotenObjectExt() {}

func (o *OAuthConfig) MakeFullFieldMask() *OAuthConfig_FieldMask {
	return FullOAuthConfig_FieldMask()
}

func (o *OAuthConfig) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullOAuthConfig_FieldMask()
}

func (o *OAuthConfig) MakeDiffFieldMask(other *OAuthConfig) *OAuthConfig_FieldMask {
	if o == nil && other == nil {
		return &OAuthConfig_FieldMask{}
	}
	if o == nil || other == nil {
		return FullOAuthConfig_FieldMask()
	}

	res := &OAuthConfig_FieldMask{}
	if o.GetClientId() != other.GetClientId() {
		res.Paths = append(res.Paths, &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorClientId})
	}
	if o.GetClientSecret() != other.GetClientSecret() {
		res.Paths = append(res.Paths, &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorClientSecret})
	}
	if o.GetAuthorizationEndpoint() != other.GetAuthorizationEndpoint() {
		res.Paths = append(res.Paths, &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorAuthorizationEndpoint})
	}
	if o.GetTokenEndpoint() != other.GetTokenEndpoint() {
		res.Paths = append(res.Paths, &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorTokenEndpoint})
	}

	if len(o.GetAdditionalScopes()) == len(other.GetAdditionalScopes()) {
		for i, lValue := range o.GetAdditionalScopes() {
			rValue := other.GetAdditionalScopes()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorAdditionalScopes})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorAdditionalScopes})
	}
	return res
}

func (o *OAuthConfig) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*OAuthConfig))
}

func (o *OAuthConfig) Clone() *OAuthConfig {
	if o == nil {
		return nil
	}
	result := &OAuthConfig{}
	result.ClientId = o.ClientId
	result.ClientSecret = o.ClientSecret
	result.AuthorizationEndpoint = o.AuthorizationEndpoint
	result.TokenEndpoint = o.TokenEndpoint
	result.AdditionalScopes = make([]string, len(o.AdditionalScopes))
	for i, sourceValue := range o.AdditionalScopes {
		result.AdditionalScopes[i] = sourceValue
	}
	return result
}

func (o *OAuthConfig) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *OAuthConfig) Merge(source *OAuthConfig) {
	o.ClientId = source.GetClientId()
	o.ClientSecret = source.GetClientSecret()
	o.AuthorizationEndpoint = source.GetAuthorizationEndpoint()
	o.TokenEndpoint = source.GetTokenEndpoint()
	for _, sourceValue := range source.GetAdditionalScopes() {
		exists := false
		for _, currentValue := range o.AdditionalScopes {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.AdditionalScopes = append(o.AdditionalScopes, newDstElement)
		}
	}

}

func (o *OAuthConfig) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*OAuthConfig))
}
