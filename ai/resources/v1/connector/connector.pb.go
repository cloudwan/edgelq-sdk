// Code generated by protoc-gen-goten-go
// File: edgelq/ai/proto/v1/connector.proto
// DO NOT EDIT!!!

package connector

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Connector type
type Connector_Type int32

const (
	Connector_MCP Connector_Type = 0
)

var (
	Connector_Type_name = map[int32]string{
		0: "MCP",
	}

	Connector_Type_value = map[string]int32{
		"MCP": 0,
	}
)

func (x Connector_Type) Enum() *Connector_Type {
	p := new(Connector_Type)
	*p = x
	return p
}

func (x Connector_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Connector_Type) Descriptor() preflect.EnumDescriptor {
	return edgelq_ai_proto_v1_connector_proto_enumTypes[0].Descriptor()
}

func (Connector_Type) Type() preflect.EnumType {
	return &edgelq_ai_proto_v1_connector_proto_enumTypes[0]
}

func (x Connector_Type) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Connector_Type.ProtoReflect.Descriptor instead.
func (Connector_Type) EnumDescriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_connector_proto_rawDescGZIP(), []int{0, 0}
}

// Connector Resource
type Connector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Connector
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Human-readable display name
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Human-readable description
	Description string         `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Type        Connector_Type `protobuf:"varint,5,opt,name=type,proto3,enum=ntt.ai.v1.Connector_Type" json:"type,omitempty"`
	// MCP connection configuration
	McpConfig *MCPConfig `protobuf:"bytes,6,opt,name=mcp_config,json=mcpConfig,proto3" json:"mcp_config,omitempty"`
	// OAuth configuration (optional)
	// Only needed if MCP server doesn't support RFC9728 auto-discovery
	OauthConfig *OAuthConfig `protobuf:"bytes,7,opt,name=oauth_config,json=oauthConfig,proto3" json:"oauth_config,omitempty"`
	// Connection timeout
	ConnectTimeout *durationpb.Duration `protobuf:"bytes,8,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	// Request timeout
	RequestTimeout *durationpb.Duration `protobuf:"bytes,9,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
}

func (m *Connector) Reset() {
	*m = Connector{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_connector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Connector) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Connector) ProtoMessage() {}

func (m *Connector) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_connector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Connector) GotenMessage() {}

// Deprecated, Use Connector.ProtoReflect.Descriptor instead.
func (*Connector) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_connector_proto_rawDescGZIP(), []int{0}
}

func (m *Connector) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Connector) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Connector) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Connector) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Connector) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Connector) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Connector) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Connector) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Connector) GetType() Connector_Type {
	if m != nil {
		return m.Type
	}
	return Connector_MCP
}

func (m *Connector) GetMcpConfig() *MCPConfig {
	if m != nil {
		return m.McpConfig
	}
	return nil
}

func (m *Connector) GetOauthConfig() *OAuthConfig {
	if m != nil {
		return m.OauthConfig
	}
	return nil
}

func (m *Connector) GetConnectTimeout() *durationpb.Duration {
	if m != nil {
		return m.ConnectTimeout
	}
	return nil
}

func (m *Connector) GetRequestTimeout() *durationpb.Duration {
	if m != nil {
		return m.RequestTimeout
	}
	return nil
}

func (m *Connector) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Connector"))
	}
	m.Name = fv
}

func (m *Connector) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Connector"))
	}
	m.Metadata = fv
}

func (m *Connector) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Connector"))
	}
	m.DisplayName = fv
}

func (m *Connector) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Connector"))
	}
	m.Description = fv
}

func (m *Connector) SetType(fv Connector_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Connector"))
	}
	m.Type = fv
}

func (m *Connector) SetMcpConfig(fv *MCPConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "McpConfig", "Connector"))
	}
	m.McpConfig = fv
}

func (m *Connector) SetOauthConfig(fv *OAuthConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OauthConfig", "Connector"))
	}
	m.OauthConfig = fv
}

func (m *Connector) SetConnectTimeout(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConnectTimeout", "Connector"))
	}
	m.ConnectTimeout = fv
}

func (m *Connector) SetRequestTimeout(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequestTimeout", "Connector"))
	}
	m.RequestTimeout = fv
}

// MCP-specific configuration
type MCPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Connection endpoint (transport determined by scheme)
	// - stdio://command - Local process, no auth
	// - http(s)://host/path - HTTP/HTTPS, OAuth required
	// - sse://host/path - SSE, OAuth required
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Command arguments (only for stdio:// transport)
	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	// Environment variables (only for stdio:// transport)
	Environment map[string]string `protobuf:"bytes,3,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MCPConfig) Reset() {
	*m = MCPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_connector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MCPConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MCPConfig) ProtoMessage() {}

func (m *MCPConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_connector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MCPConfig) GotenMessage() {}

// Deprecated, Use MCPConfig.ProtoReflect.Descriptor instead.
func (*MCPConfig) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_connector_proto_rawDescGZIP(), []int{1}
}

func (m *MCPConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MCPConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MCPConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MCPConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MCPConfig) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *MCPConfig) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *MCPConfig) GetEnvironment() map[string]string {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *MCPConfig) SetEndpoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Endpoint", "MCPConfig"))
	}
	m.Endpoint = fv
}

func (m *MCPConfig) SetArgs(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Args", "MCPConfig"))
	}
	m.Args = fv
}

func (m *MCPConfig) SetEnvironment(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Environment", "MCPConfig"))
	}
	m.Environment = fv
}

// OAuth configuration
type OAuthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Pre-registered OAuth client ID
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Reference to secret containing client secret
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// Override auto-discovered authorization endpoint
	AuthorizationEndpoint string `protobuf:"bytes,3,opt,name=authorization_endpoint,json=authorizationEndpoint,proto3" json:"authorization_endpoint,omitempty"`
	// Override auto-discovered token endpoint
	TokenEndpoint string `protobuf:"bytes,4,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	// Additional scopes beyond what MCP server declares
	AdditionalScopes []string `protobuf:"bytes,5,rep,name=additional_scopes,json=additionalScopes,proto3" json:"additional_scopes,omitempty"`
}

func (m *OAuthConfig) Reset() {
	*m = OAuthConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_ai_proto_v1_connector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *OAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*OAuthConfig) ProtoMessage() {}

func (m *OAuthConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_ai_proto_v1_connector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*OAuthConfig) GotenMessage() {}

// Deprecated, Use OAuthConfig.ProtoReflect.Descriptor instead.
func (*OAuthConfig) Descriptor() ([]byte, []int) {
	return edgelq_ai_proto_v1_connector_proto_rawDescGZIP(), []int{2}
}

func (m *OAuthConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *OAuthConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *OAuthConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *OAuthConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *OAuthConfig) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *OAuthConfig) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func (m *OAuthConfig) GetAuthorizationEndpoint() string {
	if m != nil {
		return m.AuthorizationEndpoint
	}
	return ""
}

func (m *OAuthConfig) GetTokenEndpoint() string {
	if m != nil {
		return m.TokenEndpoint
	}
	return ""
}

func (m *OAuthConfig) GetAdditionalScopes() []string {
	if m != nil {
		return m.AdditionalScopes
	}
	return nil
}

func (m *OAuthConfig) SetClientId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientId", "OAuthConfig"))
	}
	m.ClientId = fv
}

func (m *OAuthConfig) SetClientSecret(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientSecret", "OAuthConfig"))
	}
	m.ClientSecret = fv
}

func (m *OAuthConfig) SetAuthorizationEndpoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AuthorizationEndpoint", "OAuthConfig"))
	}
	m.AuthorizationEndpoint = fv
}

func (m *OAuthConfig) SetTokenEndpoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TokenEndpoint", "OAuthConfig"))
	}
	m.TokenEndpoint = fv
}

func (m *OAuthConfig) SetAdditionalScopes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdditionalScopes", "OAuthConfig"))
	}
	m.AdditionalScopes = fv
}

var edgelq_ai_proto_v1_connector_proto preflect.FileDescriptor

var edgelq_ai_proto_v1_connector_proto_rawDesc = []byte{
	0x0a, 0x22, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x05, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x0a, 0x0b, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x30, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09, 0x2a, 0x07, 0x3a, 0x03, 0x08,
	0x80, 0x01, 0x68, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x6d, 0x63,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0c, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x0f, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x43, 0x50, 0x10, 0x00, 0x3a, 0xb5, 0x01, 0xea, 0x41,
	0x5c, 0x0a, 0x17, 0x61, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x7d, 0x12, 0x29, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x7d, 0x92, 0xd9, 0x21,
	0x46, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x12, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x6f, 0x6e, 0x65, 0x1a, 0x16, 0x69,
	0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x05, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x09, 0x4d, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x24, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x2a, 0x02, 0x68, 0x01, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x50,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x0b, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x42, 0xfa, 0x01, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x43, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x30,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0xa2, 0x80, 0xd1, 0x02, 0x45, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x69, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x3b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_ai_proto_v1_connector_proto_rawDescOnce sync.Once
	edgelq_ai_proto_v1_connector_proto_rawDescData = edgelq_ai_proto_v1_connector_proto_rawDesc
)

func edgelq_ai_proto_v1_connector_proto_rawDescGZIP() []byte {
	edgelq_ai_proto_v1_connector_proto_rawDescOnce.Do(func() {
		edgelq_ai_proto_v1_connector_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_ai_proto_v1_connector_proto_rawDescData)
	})
	return edgelq_ai_proto_v1_connector_proto_rawDescData
}

var edgelq_ai_proto_v1_connector_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_ai_proto_v1_connector_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var edgelq_ai_proto_v1_connector_proto_goTypes = []interface{}{
	(Connector_Type)(0),         // 0: ntt.ai.v1.Connector_Type
	(*Connector)(nil),           // 1: ntt.ai.v1.Connector
	(*MCPConfig)(nil),           // 2: ntt.ai.v1.MCPConfig
	(*OAuthConfig)(nil),         // 3: ntt.ai.v1.OAuthConfig
	nil,                         // 4: ntt.ai.v1.MCPConfig.EnvironmentEntry
	(*meta.Meta)(nil),           // 5: goten.types.Meta
	(*durationpb.Duration)(nil), // 6: google.protobuf.Duration
}
var edgelq_ai_proto_v1_connector_proto_depIdxs = []int32{
	5, // 0: ntt.ai.v1.Connector.metadata:type_name -> goten.types.Meta
	0, // 1: ntt.ai.v1.Connector.type:type_name -> ntt.ai.v1.Connector_Type
	2, // 2: ntt.ai.v1.Connector.mcp_config:type_name -> ntt.ai.v1.MCPConfig
	3, // 3: ntt.ai.v1.Connector.oauth_config:type_name -> ntt.ai.v1.OAuthConfig
	6, // 4: ntt.ai.v1.Connector.connect_timeout:type_name -> google.protobuf.Duration
	6, // 5: ntt.ai.v1.Connector.request_timeout:type_name -> google.protobuf.Duration
	4, // 6: ntt.ai.v1.MCPConfig.environment:type_name -> ntt.ai.v1.MCPConfig.EnvironmentEntry
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { edgelq_ai_proto_v1_connector_proto_init() }
func edgelq_ai_proto_v1_connector_proto_init() {
	if edgelq_ai_proto_v1_connector_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_ai_proto_v1_connector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_connector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MCPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_ai_proto_v1_connector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuthConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_ai_proto_v1_connector_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_ai_proto_v1_connector_proto_goTypes,
		DependencyIndexes: edgelq_ai_proto_v1_connector_proto_depIdxs,
		EnumInfos:         edgelq_ai_proto_v1_connector_proto_enumTypes,
		MessageInfos:      edgelq_ai_proto_v1_connector_proto_msgTypes,
	}.Build()
	edgelq_ai_proto_v1_connector_proto = out.File
	edgelq_ai_proto_v1_connector_proto_rawDesc = nil
	edgelq_ai_proto_v1_connector_proto_goTypes = nil
	edgelq_ai_proto_v1_connector_proto_depIdxs = nil
}
