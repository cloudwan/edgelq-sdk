// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/connector.proto
// DO NOT EDIT!!!

package connector

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Connector_FieldPath interface {
	gotenobject.FieldPath
	Selector() Connector_FieldPathSelector
	Get(source *Connector) []interface{}
	GetSingle(source *Connector) (interface{}, bool)
	ClearValue(item *Connector)

	// Those methods build corresponding Connector_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Connector_FieldPathValue
	WithIArrayOfValues(values interface{}) Connector_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Connector_FieldPathArrayItemValue
}

type Connector_FieldPathSelector int32

const (
	Connector_FieldPathSelectorName           Connector_FieldPathSelector = 0
	Connector_FieldPathSelectorMetadata       Connector_FieldPathSelector = 1
	Connector_FieldPathSelectorDisplayName    Connector_FieldPathSelector = 2
	Connector_FieldPathSelectorDescription    Connector_FieldPathSelector = 3
	Connector_FieldPathSelectorType           Connector_FieldPathSelector = 4
	Connector_FieldPathSelectorMcpConfig      Connector_FieldPathSelector = 5
	Connector_FieldPathSelectorOauthConfig    Connector_FieldPathSelector = 6
	Connector_FieldPathSelectorConnectTimeout Connector_FieldPathSelector = 7
	Connector_FieldPathSelectorRequestTimeout Connector_FieldPathSelector = 8
)

func (s Connector_FieldPathSelector) String() string {
	switch s {
	case Connector_FieldPathSelectorName:
		return "name"
	case Connector_FieldPathSelectorMetadata:
		return "metadata"
	case Connector_FieldPathSelectorDisplayName:
		return "display_name"
	case Connector_FieldPathSelectorDescription:
		return "description"
	case Connector_FieldPathSelectorType:
		return "type"
	case Connector_FieldPathSelectorMcpConfig:
		return "mcp_config"
	case Connector_FieldPathSelectorOauthConfig:
		return "oauth_config"
	case Connector_FieldPathSelectorConnectTimeout:
		return "connect_timeout"
	case Connector_FieldPathSelectorRequestTimeout:
		return "request_timeout"
	default:
		panic(fmt.Sprintf("Invalid selector for Connector: %d", s))
	}
}

func BuildConnector_FieldPath(fp gotenobject.RawFieldPath) (Connector_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Connector")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorName}, nil
		case "metadata":
			return &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorDisplayName}, nil
		case "description":
			return &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorDescription}, nil
		case "type":
			return &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorType}, nil
		case "mcp_config", "mcpConfig", "mcp-config":
			return &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorMcpConfig}, nil
		case "oauth_config", "oauthConfig", "oauth-config":
			return &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorOauthConfig}, nil
		case "connect_timeout", "connectTimeout", "connect-timeout":
			return &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorConnectTimeout}, nil
		case "request_timeout", "requestTimeout", "request-timeout":
			return &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorRequestTimeout}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Connector_FieldSubPath{selector: Connector_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "mcp_config", "mcpConfig", "mcp-config":
			if subpath, err := BuildMCPConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Connector_FieldSubPath{selector: Connector_FieldPathSelectorMcpConfig, subPath: subpath}, nil
			}
		case "oauth_config", "oauthConfig", "oauth-config":
			if subpath, err := BuildOAuthConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Connector_FieldSubPath{selector: Connector_FieldPathSelectorOauthConfig, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Connector", fp)
}

func ParseConnector_FieldPath(rawField string) (Connector_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConnector_FieldPath(fp)
}

func MustParseConnector_FieldPath(rawField string) Connector_FieldPath {
	fp, err := ParseConnector_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Connector_FieldTerminalPath struct {
	selector Connector_FieldPathSelector
}

var _ Connector_FieldPath = (*Connector_FieldTerminalPath)(nil)

func (fp *Connector_FieldTerminalPath) Selector() Connector_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Connector_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Connector_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Connector
func (fp *Connector_FieldTerminalPath) Get(source *Connector) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Connector_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Connector_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Connector_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Connector_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case Connector_FieldPathSelectorType:
			values = append(values, source.Type)
		case Connector_FieldPathSelectorMcpConfig:
			if source.McpConfig != nil {
				values = append(values, source.McpConfig)
			}
		case Connector_FieldPathSelectorOauthConfig:
			if source.OauthConfig != nil {
				values = append(values, source.OauthConfig)
			}
		case Connector_FieldPathSelectorConnectTimeout:
			if source.ConnectTimeout != nil {
				values = append(values, source.ConnectTimeout)
			}
		case Connector_FieldPathSelectorRequestTimeout:
			if source.RequestTimeout != nil {
				values = append(values, source.RequestTimeout)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Connector: %d", fp.selector))
		}
	}
	return
}

func (fp *Connector_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Connector))
}

// GetSingle returns value pointed by specific field of from source Connector
func (fp *Connector_FieldTerminalPath) GetSingle(source *Connector) (interface{}, bool) {
	switch fp.selector {
	case Connector_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Connector_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Connector_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Connector_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case Connector_FieldPathSelectorType:
		return source.GetType(), source != nil
	case Connector_FieldPathSelectorMcpConfig:
		res := source.GetMcpConfig()
		return res, res != nil
	case Connector_FieldPathSelectorOauthConfig:
		res := source.GetOauthConfig()
		return res, res != nil
	case Connector_FieldPathSelectorConnectTimeout:
		res := source.GetConnectTimeout()
		return res, res != nil
	case Connector_FieldPathSelectorRequestTimeout:
		res := source.GetRequestTimeout()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Connector: %d", fp.selector))
	}
}

func (fp *Connector_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Connector))
}

// GetDefault returns a default value of the field type
func (fp *Connector_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Connector_FieldPathSelectorName:
		return (*Name)(nil)
	case Connector_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case Connector_FieldPathSelectorDisplayName:
		return ""
	case Connector_FieldPathSelectorDescription:
		return ""
	case Connector_FieldPathSelectorType:
		return Connector_MCP
	case Connector_FieldPathSelectorMcpConfig:
		return (*MCPConfig)(nil)
	case Connector_FieldPathSelectorOauthConfig:
		return (*OAuthConfig)(nil)
	case Connector_FieldPathSelectorConnectTimeout:
		return (*durationpb.Duration)(nil)
	case Connector_FieldPathSelectorRequestTimeout:
		return (*durationpb.Duration)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Connector: %d", fp.selector))
	}
}

func (fp *Connector_FieldTerminalPath) ClearValue(item *Connector) {
	if item != nil {
		switch fp.selector {
		case Connector_FieldPathSelectorName:
			item.Name = nil
		case Connector_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Connector_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Connector_FieldPathSelectorDescription:
			item.Description = ""
		case Connector_FieldPathSelectorType:
			item.Type = Connector_MCP
		case Connector_FieldPathSelectorMcpConfig:
			item.McpConfig = nil
		case Connector_FieldPathSelectorOauthConfig:
			item.OauthConfig = nil
		case Connector_FieldPathSelectorConnectTimeout:
			item.ConnectTimeout = nil
		case Connector_FieldPathSelectorRequestTimeout:
			item.RequestTimeout = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Connector: %d", fp.selector))
		}
	}
}

func (fp *Connector_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Connector))
}

// IsLeaf - whether field path is holds simple value
func (fp *Connector_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Connector_FieldPathSelectorName ||
		fp.selector == Connector_FieldPathSelectorDisplayName ||
		fp.selector == Connector_FieldPathSelectorDescription ||
		fp.selector == Connector_FieldPathSelectorType ||
		fp.selector == Connector_FieldPathSelectorConnectTimeout ||
		fp.selector == Connector_FieldPathSelectorRequestTimeout
}

func (fp *Connector_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Connector_FieldTerminalPath) WithIValue(value interface{}) Connector_FieldPathValue {
	switch fp.selector {
	case Connector_FieldPathSelectorName:
		return &Connector_FieldTerminalPathValue{Connector_FieldTerminalPath: *fp, value: value.(*Name)}
	case Connector_FieldPathSelectorMetadata:
		return &Connector_FieldTerminalPathValue{Connector_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case Connector_FieldPathSelectorDisplayName:
		return &Connector_FieldTerminalPathValue{Connector_FieldTerminalPath: *fp, value: value.(string)}
	case Connector_FieldPathSelectorDescription:
		return &Connector_FieldTerminalPathValue{Connector_FieldTerminalPath: *fp, value: value.(string)}
	case Connector_FieldPathSelectorType:
		return &Connector_FieldTerminalPathValue{Connector_FieldTerminalPath: *fp, value: value.(Connector_Type)}
	case Connector_FieldPathSelectorMcpConfig:
		return &Connector_FieldTerminalPathValue{Connector_FieldTerminalPath: *fp, value: value.(*MCPConfig)}
	case Connector_FieldPathSelectorOauthConfig:
		return &Connector_FieldTerminalPathValue{Connector_FieldTerminalPath: *fp, value: value.(*OAuthConfig)}
	case Connector_FieldPathSelectorConnectTimeout:
		return &Connector_FieldTerminalPathValue{Connector_FieldTerminalPath: *fp, value: value.(*durationpb.Duration)}
	case Connector_FieldPathSelectorRequestTimeout:
		return &Connector_FieldTerminalPathValue{Connector_FieldTerminalPath: *fp, value: value.(*durationpb.Duration)}
	default:
		panic(fmt.Sprintf("Invalid selector for Connector: %d", fp.selector))
	}
}

func (fp *Connector_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Connector_FieldTerminalPath) WithIArrayOfValues(values interface{}) Connector_FieldPathArrayOfValues {
	fpaov := &Connector_FieldTerminalPathArrayOfValues{Connector_FieldTerminalPath: *fp}
	switch fp.selector {
	case Connector_FieldPathSelectorName:
		return &Connector_FieldTerminalPathArrayOfValues{Connector_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Connector_FieldPathSelectorMetadata:
		return &Connector_FieldTerminalPathArrayOfValues{Connector_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case Connector_FieldPathSelectorDisplayName:
		return &Connector_FieldTerminalPathArrayOfValues{Connector_FieldTerminalPath: *fp, values: values.([]string)}
	case Connector_FieldPathSelectorDescription:
		return &Connector_FieldTerminalPathArrayOfValues{Connector_FieldTerminalPath: *fp, values: values.([]string)}
	case Connector_FieldPathSelectorType:
		return &Connector_FieldTerminalPathArrayOfValues{Connector_FieldTerminalPath: *fp, values: values.([]Connector_Type)}
	case Connector_FieldPathSelectorMcpConfig:
		return &Connector_FieldTerminalPathArrayOfValues{Connector_FieldTerminalPath: *fp, values: values.([]*MCPConfig)}
	case Connector_FieldPathSelectorOauthConfig:
		return &Connector_FieldTerminalPathArrayOfValues{Connector_FieldTerminalPath: *fp, values: values.([]*OAuthConfig)}
	case Connector_FieldPathSelectorConnectTimeout:
		return &Connector_FieldTerminalPathArrayOfValues{Connector_FieldTerminalPath: *fp, values: values.([]*durationpb.Duration)}
	case Connector_FieldPathSelectorRequestTimeout:
		return &Connector_FieldTerminalPathArrayOfValues{Connector_FieldTerminalPath: *fp, values: values.([]*durationpb.Duration)}
	default:
		panic(fmt.Sprintf("Invalid selector for Connector: %d", fp.selector))
	}
	return fpaov
}

func (fp *Connector_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Connector_FieldTerminalPath) WithIArrayItemValue(value interface{}) Connector_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Connector: %d", fp.selector))
	}
}

func (fp *Connector_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Connector_FieldSubPath struct {
	selector Connector_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Connector_FieldPath = (*Connector_FieldSubPath)(nil)

func (fps *Connector_FieldSubPath) Selector() Connector_FieldPathSelector {
	return fps.selector
}
func (fps *Connector_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *Connector_FieldSubPath) AsMcpConfigSubPath() (MCPConfig_FieldPath, bool) {
	res, ok := fps.subPath.(MCPConfig_FieldPath)
	return res, ok
}
func (fps *Connector_FieldSubPath) AsOauthConfigSubPath() (OAuthConfig_FieldPath, bool) {
	res, ok := fps.subPath.(OAuthConfig_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Connector_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Connector_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Connector
func (fps *Connector_FieldSubPath) Get(source *Connector) (values []interface{}) {
	switch fps.selector {
	case Connector_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case Connector_FieldPathSelectorMcpConfig:
		values = append(values, fps.subPath.GetRaw(source.GetMcpConfig())...)
	case Connector_FieldPathSelectorOauthConfig:
		values = append(values, fps.subPath.GetRaw(source.GetOauthConfig())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Connector: %d", fps.selector))
	}
	return
}

func (fps *Connector_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Connector))
}

// GetSingle returns value of selected field from source Connector
func (fps *Connector_FieldSubPath) GetSingle(source *Connector) (interface{}, bool) {
	switch fps.selector {
	case Connector_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Connector_FieldPathSelectorMcpConfig:
		if source.GetMcpConfig() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMcpConfig())
	case Connector_FieldPathSelectorOauthConfig:
		if source.GetOauthConfig() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOauthConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for Connector: %d", fps.selector))
	}
}

func (fps *Connector_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Connector))
}

// GetDefault returns a default value of the field type
func (fps *Connector_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Connector_FieldSubPath) ClearValue(item *Connector) {
	if item != nil {
		switch fps.selector {
		case Connector_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Connector_FieldPathSelectorMcpConfig:
			fps.subPath.ClearValueRaw(item.McpConfig)
		case Connector_FieldPathSelectorOauthConfig:
			fps.subPath.ClearValueRaw(item.OauthConfig)
		default:
			panic(fmt.Sprintf("Invalid selector for Connector: %d", fps.selector))
		}
	}
}

func (fps *Connector_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Connector))
}

// IsLeaf - whether field path is holds simple value
func (fps *Connector_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Connector_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Connector_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Connector_FieldSubPath) WithIValue(value interface{}) Connector_FieldPathValue {
	return &Connector_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Connector_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Connector_FieldSubPath) WithIArrayOfValues(values interface{}) Connector_FieldPathArrayOfValues {
	return &Connector_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Connector_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Connector_FieldSubPath) WithIArrayItemValue(value interface{}) Connector_FieldPathArrayItemValue {
	return &Connector_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Connector_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Connector_FieldPathValue allows storing values for Connector fields according to their type
type Connector_FieldPathValue interface {
	Connector_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Connector)
	CompareWith(*Connector) (cmp int, comparable bool)
}

func ParseConnector_FieldPathValue(pathStr, valueStr string) (Connector_FieldPathValue, error) {
	fp, err := ParseConnector_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Connector field path value from %s: %v", valueStr, err)
	}
	return fpv.(Connector_FieldPathValue), nil
}

func MustParseConnector_FieldPathValue(pathStr, valueStr string) Connector_FieldPathValue {
	fpv, err := ParseConnector_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Connector_FieldTerminalPathValue struct {
	Connector_FieldTerminalPath
	value interface{}
}

var _ Connector_FieldPathValue = (*Connector_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Connector' as interface{}
func (fpv *Connector_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Connector_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Connector_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *Connector_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Connector_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Connector_FieldTerminalPathValue) AsTypeValue() (Connector_Type, bool) {
	res, ok := fpv.value.(Connector_Type)
	return res, ok
}
func (fpv *Connector_FieldTerminalPathValue) AsMcpConfigValue() (*MCPConfig, bool) {
	res, ok := fpv.value.(*MCPConfig)
	return res, ok
}
func (fpv *Connector_FieldTerminalPathValue) AsOauthConfigValue() (*OAuthConfig, bool) {
	res, ok := fpv.value.(*OAuthConfig)
	return res, ok
}
func (fpv *Connector_FieldTerminalPathValue) AsConnectTimeoutValue() (*durationpb.Duration, bool) {
	res, ok := fpv.value.(*durationpb.Duration)
	return res, ok
}
func (fpv *Connector_FieldTerminalPathValue) AsRequestTimeoutValue() (*durationpb.Duration, bool) {
	res, ok := fpv.value.(*durationpb.Duration)
	return res, ok
}

// SetTo stores value for selected field for object Connector
func (fpv *Connector_FieldTerminalPathValue) SetTo(target **Connector) {
	if *target == nil {
		*target = new(Connector)
	}
	switch fpv.selector {
	case Connector_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Connector_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case Connector_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Connector_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case Connector_FieldPathSelectorType:
		(*target).Type = fpv.value.(Connector_Type)
	case Connector_FieldPathSelectorMcpConfig:
		(*target).McpConfig = fpv.value.(*MCPConfig)
	case Connector_FieldPathSelectorOauthConfig:
		(*target).OauthConfig = fpv.value.(*OAuthConfig)
	case Connector_FieldPathSelectorConnectTimeout:
		(*target).ConnectTimeout = fpv.value.(*durationpb.Duration)
	case Connector_FieldPathSelectorRequestTimeout:
		(*target).RequestTimeout = fpv.value.(*durationpb.Duration)
	default:
		panic(fmt.Sprintf("Invalid selector for Connector: %d", fpv.selector))
	}
}

func (fpv *Connector_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Connector)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Connector_FieldTerminalPathValue' with the value under path in 'Connector'.
func (fpv *Connector_FieldTerminalPathValue) CompareWith(source *Connector) (int, bool) {
	switch fpv.selector {
	case Connector_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Connector_FieldPathSelectorMetadata:
		return 0, false
	case Connector_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Connector_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Connector_FieldPathSelectorType:
		leftValue := fpv.value.(Connector_Type)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Connector_FieldPathSelectorMcpConfig:
		return 0, false
	case Connector_FieldPathSelectorOauthConfig:
		return 0, false
	case Connector_FieldPathSelectorConnectTimeout:
		leftValue := fpv.value.(*durationpb.Duration)
		rightValue := source.GetConnectTimeout()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case Connector_FieldPathSelectorRequestTimeout:
		leftValue := fpv.value.(*durationpb.Duration)
		rightValue := source.GetRequestTimeout()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Connector: %d", fpv.selector))
	}
}

func (fpv *Connector_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Connector))
}

type Connector_FieldSubPathValue struct {
	Connector_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Connector_FieldPathValue = (*Connector_FieldSubPathValue)(nil)

func (fpvs *Connector_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Connector_FieldSubPathValue) AsMcpConfigPathValue() (MCPConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(MCPConfig_FieldPathValue)
	return res, ok
}
func (fpvs *Connector_FieldSubPathValue) AsOauthConfigPathValue() (OAuthConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(OAuthConfig_FieldPathValue)
	return res, ok
}

func (fpvs *Connector_FieldSubPathValue) SetTo(target **Connector) {
	if *target == nil {
		*target = new(Connector)
	}
	switch fpvs.Selector() {
	case Connector_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Connector_FieldPathSelectorMcpConfig:
		fpvs.subPathValue.(MCPConfig_FieldPathValue).SetTo(&(*target).McpConfig)
	case Connector_FieldPathSelectorOauthConfig:
		fpvs.subPathValue.(OAuthConfig_FieldPathValue).SetTo(&(*target).OauthConfig)
	default:
		panic(fmt.Sprintf("Invalid selector for Connector: %d", fpvs.Selector()))
	}
}

func (fpvs *Connector_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Connector)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Connector_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Connector_FieldSubPathValue) CompareWith(source *Connector) (int, bool) {
	switch fpvs.Selector() {
	case Connector_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Connector_FieldPathSelectorMcpConfig:
		return fpvs.subPathValue.(MCPConfig_FieldPathValue).CompareWith(source.GetMcpConfig())
	case Connector_FieldPathSelectorOauthConfig:
		return fpvs.subPathValue.(OAuthConfig_FieldPathValue).CompareWith(source.GetOauthConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for Connector: %d", fpvs.Selector()))
	}
}

func (fpvs *Connector_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Connector))
}

// Connector_FieldPathArrayItemValue allows storing single item in Path-specific values for Connector according to their type
// Present only for array (repeated) types.
type Connector_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Connector_FieldPath
	ContainsValue(*Connector) bool
}

// ParseConnector_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConnector_FieldPathArrayItemValue(pathStr, valueStr string) (Connector_FieldPathArrayItemValue, error) {
	fp, err := ParseConnector_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Connector field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Connector_FieldPathArrayItemValue), nil
}

func MustParseConnector_FieldPathArrayItemValue(pathStr, valueStr string) Connector_FieldPathArrayItemValue {
	fpaiv, err := ParseConnector_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Connector_FieldTerminalPathArrayItemValue struct {
	Connector_FieldTerminalPath
	value interface{}
}

var _ Connector_FieldPathArrayItemValue = (*Connector_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Connector as interface{}
func (fpaiv *Connector_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Connector_FieldTerminalPathArrayItemValue) GetSingle(source *Connector) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Connector_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Connector))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Connector'
func (fpaiv *Connector_FieldTerminalPathArrayItemValue) ContainsValue(source *Connector) bool {
	slice := fpaiv.Connector_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Connector_FieldSubPathArrayItemValue struct {
	Connector_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Connector_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Connector_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Connector_FieldSubPathArrayItemValue) AsMcpConfigPathItemValue() (MCPConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(MCPConfig_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Connector_FieldSubPathArrayItemValue) AsOauthConfigPathItemValue() (OAuthConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(OAuthConfig_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Connector'
func (fpaivs *Connector_FieldSubPathArrayItemValue) ContainsValue(source *Connector) bool {
	switch fpaivs.Selector() {
	case Connector_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Connector_FieldPathSelectorMcpConfig:
		return fpaivs.subPathItemValue.(MCPConfig_FieldPathArrayItemValue).ContainsValue(source.GetMcpConfig())
	case Connector_FieldPathSelectorOauthConfig:
		return fpaivs.subPathItemValue.(OAuthConfig_FieldPathArrayItemValue).ContainsValue(source.GetOauthConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for Connector: %d", fpaivs.Selector()))
	}
}

// Connector_FieldPathArrayOfValues allows storing slice of values for Connector fields according to their type
type Connector_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Connector_FieldPath
}

func ParseConnector_FieldPathArrayOfValues(pathStr, valuesStr string) (Connector_FieldPathArrayOfValues, error) {
	fp, err := ParseConnector_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Connector field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Connector_FieldPathArrayOfValues), nil
}

func MustParseConnector_FieldPathArrayOfValues(pathStr, valuesStr string) Connector_FieldPathArrayOfValues {
	fpaov, err := ParseConnector_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Connector_FieldTerminalPathArrayOfValues struct {
	Connector_FieldTerminalPath
	values interface{}
}

var _ Connector_FieldPathArrayOfValues = (*Connector_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Connector_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Connector_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Connector_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case Connector_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Connector_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Connector_FieldPathSelectorType:
		for _, v := range fpaov.values.([]Connector_Type) {
			values = append(values, v)
		}
	case Connector_FieldPathSelectorMcpConfig:
		for _, v := range fpaov.values.([]*MCPConfig) {
			values = append(values, v)
		}
	case Connector_FieldPathSelectorOauthConfig:
		for _, v := range fpaov.values.([]*OAuthConfig) {
			values = append(values, v)
		}
	case Connector_FieldPathSelectorConnectTimeout:
		for _, v := range fpaov.values.([]*durationpb.Duration) {
			values = append(values, v)
		}
	case Connector_FieldPathSelectorRequestTimeout:
		for _, v := range fpaov.values.([]*durationpb.Duration) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Connector_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Connector_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *Connector_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Connector_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Connector_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]Connector_Type, bool) {
	res, ok := fpaov.values.([]Connector_Type)
	return res, ok
}
func (fpaov *Connector_FieldTerminalPathArrayOfValues) AsMcpConfigArrayOfValues() ([]*MCPConfig, bool) {
	res, ok := fpaov.values.([]*MCPConfig)
	return res, ok
}
func (fpaov *Connector_FieldTerminalPathArrayOfValues) AsOauthConfigArrayOfValues() ([]*OAuthConfig, bool) {
	res, ok := fpaov.values.([]*OAuthConfig)
	return res, ok
}
func (fpaov *Connector_FieldTerminalPathArrayOfValues) AsConnectTimeoutArrayOfValues() ([]*durationpb.Duration, bool) {
	res, ok := fpaov.values.([]*durationpb.Duration)
	return res, ok
}
func (fpaov *Connector_FieldTerminalPathArrayOfValues) AsRequestTimeoutArrayOfValues() ([]*durationpb.Duration, bool) {
	res, ok := fpaov.values.([]*durationpb.Duration)
	return res, ok
}

type Connector_FieldSubPathArrayOfValues struct {
	Connector_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Connector_FieldPathArrayOfValues = (*Connector_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Connector_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Connector_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Connector_FieldSubPathArrayOfValues) AsMcpConfigPathArrayOfValues() (MCPConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(MCPConfig_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Connector_FieldSubPathArrayOfValues) AsOauthConfigPathArrayOfValues() (OAuthConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(OAuthConfig_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type MCPConfig_FieldPath interface {
	gotenobject.FieldPath
	Selector() MCPConfig_FieldPathSelector
	Get(source *MCPConfig) []interface{}
	GetSingle(source *MCPConfig) (interface{}, bool)
	ClearValue(item *MCPConfig)

	// Those methods build corresponding MCPConfig_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) MCPConfig_FieldPathValue
	WithIArrayOfValues(values interface{}) MCPConfig_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) MCPConfig_FieldPathArrayItemValue
}

type MCPConfig_FieldPathSelector int32

const (
	MCPConfig_FieldPathSelectorEndpoint    MCPConfig_FieldPathSelector = 0
	MCPConfig_FieldPathSelectorArgs        MCPConfig_FieldPathSelector = 1
	MCPConfig_FieldPathSelectorEnvironment MCPConfig_FieldPathSelector = 2
)

func (s MCPConfig_FieldPathSelector) String() string {
	switch s {
	case MCPConfig_FieldPathSelectorEndpoint:
		return "endpoint"
	case MCPConfig_FieldPathSelectorArgs:
		return "args"
	case MCPConfig_FieldPathSelectorEnvironment:
		return "environment"
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", s))
	}
}

func BuildMCPConfig_FieldPath(fp gotenobject.RawFieldPath) (MCPConfig_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object MCPConfig")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "endpoint":
			return &MCPConfig_FieldTerminalPath{selector: MCPConfig_FieldPathSelectorEndpoint}, nil
		case "args":
			return &MCPConfig_FieldTerminalPath{selector: MCPConfig_FieldPathSelectorArgs}, nil
		case "environment":
			return &MCPConfig_FieldTerminalPath{selector: MCPConfig_FieldPathSelectorEnvironment}, nil
		}
	} else {
		switch fp[0] {
		case "environment":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object MCPConfig)", fp)
			}
			return &MCPConfig_FieldPathMap{selector: MCPConfig_FieldPathSelectorEnvironment, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object MCPConfig", fp)
}

func ParseMCPConfig_FieldPath(rawField string) (MCPConfig_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildMCPConfig_FieldPath(fp)
}

func MustParseMCPConfig_FieldPath(rawField string) MCPConfig_FieldPath {
	fp, err := ParseMCPConfig_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type MCPConfig_FieldTerminalPath struct {
	selector MCPConfig_FieldPathSelector
}

var _ MCPConfig_FieldPath = (*MCPConfig_FieldTerminalPath)(nil)

func (fp *MCPConfig_FieldTerminalPath) Selector() MCPConfig_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *MCPConfig_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *MCPConfig_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source MCPConfig
func (fp *MCPConfig_FieldTerminalPath) Get(source *MCPConfig) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case MCPConfig_FieldPathSelectorEndpoint:
			values = append(values, source.Endpoint)
		case MCPConfig_FieldPathSelectorArgs:
			for _, value := range source.GetArgs() {
				values = append(values, value)
			}
		case MCPConfig_FieldPathSelectorEnvironment:
			values = append(values, source.Environment)
		default:
			panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fp.selector))
		}
	}
	return
}

func (fp *MCPConfig_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*MCPConfig))
}

// GetSingle returns value pointed by specific field of from source MCPConfig
func (fp *MCPConfig_FieldTerminalPath) GetSingle(source *MCPConfig) (interface{}, bool) {
	switch fp.selector {
	case MCPConfig_FieldPathSelectorEndpoint:
		return source.GetEndpoint(), source != nil
	case MCPConfig_FieldPathSelectorArgs:
		res := source.GetArgs()
		return res, res != nil
	case MCPConfig_FieldPathSelectorEnvironment:
		res := source.GetEnvironment()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fp.selector))
	}
}

func (fp *MCPConfig_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*MCPConfig))
}

// GetDefault returns a default value of the field type
func (fp *MCPConfig_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case MCPConfig_FieldPathSelectorEndpoint:
		return ""
	case MCPConfig_FieldPathSelectorArgs:
		return ([]string)(nil)
	case MCPConfig_FieldPathSelectorEnvironment:
		return (map[string]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fp.selector))
	}
}

func (fp *MCPConfig_FieldTerminalPath) ClearValue(item *MCPConfig) {
	if item != nil {
		switch fp.selector {
		case MCPConfig_FieldPathSelectorEndpoint:
			item.Endpoint = ""
		case MCPConfig_FieldPathSelectorArgs:
			item.Args = nil
		case MCPConfig_FieldPathSelectorEnvironment:
			item.Environment = nil
		default:
			panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fp.selector))
		}
	}
}

func (fp *MCPConfig_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*MCPConfig))
}

// IsLeaf - whether field path is holds simple value
func (fp *MCPConfig_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == MCPConfig_FieldPathSelectorEndpoint ||
		fp.selector == MCPConfig_FieldPathSelectorArgs ||
		fp.selector == MCPConfig_FieldPathSelectorEnvironment
}

func (fp *MCPConfig_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *MCPConfig_FieldTerminalPath) WithIValue(value interface{}) MCPConfig_FieldPathValue {
	switch fp.selector {
	case MCPConfig_FieldPathSelectorEndpoint:
		return &MCPConfig_FieldTerminalPathValue{MCPConfig_FieldTerminalPath: *fp, value: value.(string)}
	case MCPConfig_FieldPathSelectorArgs:
		return &MCPConfig_FieldTerminalPathValue{MCPConfig_FieldTerminalPath: *fp, value: value.([]string)}
	case MCPConfig_FieldPathSelectorEnvironment:
		return &MCPConfig_FieldTerminalPathValue{MCPConfig_FieldTerminalPath: *fp, value: value.(map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fp.selector))
	}
}

func (fp *MCPConfig_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *MCPConfig_FieldTerminalPath) WithIArrayOfValues(values interface{}) MCPConfig_FieldPathArrayOfValues {
	fpaov := &MCPConfig_FieldTerminalPathArrayOfValues{MCPConfig_FieldTerminalPath: *fp}
	switch fp.selector {
	case MCPConfig_FieldPathSelectorEndpoint:
		return &MCPConfig_FieldTerminalPathArrayOfValues{MCPConfig_FieldTerminalPath: *fp, values: values.([]string)}
	case MCPConfig_FieldPathSelectorArgs:
		return &MCPConfig_FieldTerminalPathArrayOfValues{MCPConfig_FieldTerminalPath: *fp, values: values.([][]string)}
	case MCPConfig_FieldPathSelectorEnvironment:
		return &MCPConfig_FieldTerminalPathArrayOfValues{MCPConfig_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fp.selector))
	}
	return fpaov
}

func (fp *MCPConfig_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *MCPConfig_FieldTerminalPath) WithIArrayItemValue(value interface{}) MCPConfig_FieldPathArrayItemValue {
	switch fp.selector {
	case MCPConfig_FieldPathSelectorArgs:
		return &MCPConfig_FieldTerminalPathArrayItemValue{MCPConfig_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fp.selector))
	}
}

func (fp *MCPConfig_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type MCPConfig_FieldPathMap struct {
	key      string
	selector MCPConfig_FieldPathSelector
}

var _ MCPConfig_FieldPath = (*MCPConfig_FieldPathMap)(nil)

func (fpm *MCPConfig_FieldPathMap) Selector() MCPConfig_FieldPathSelector {
	return fpm.selector
}

func (fpm *MCPConfig_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *MCPConfig_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *MCPConfig_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source MCPConfig
func (fpm *MCPConfig_FieldPathMap) Get(source *MCPConfig) (values []interface{}) {
	switch fpm.selector {
	case MCPConfig_FieldPathSelectorEnvironment:
		if value, ok := source.GetEnvironment()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fpm.selector))
	}
	return
}

func (fpm *MCPConfig_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*MCPConfig))
}

// GetSingle returns value by selected field map key from source MCPConfig
func (fpm *MCPConfig_FieldPathMap) GetSingle(source *MCPConfig) (interface{}, bool) {
	switch fpm.selector {
	case MCPConfig_FieldPathSelectorEnvironment:
		res, ok := source.GetEnvironment()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fpm.selector))
	}
}

func (fpm *MCPConfig_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*MCPConfig))
}

// GetDefault returns a default value of the field type
func (fpm *MCPConfig_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case MCPConfig_FieldPathSelectorEnvironment:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fpm.selector))
	}
}

func (fpm *MCPConfig_FieldPathMap) ClearValue(item *MCPConfig) {
	if item != nil {
		switch fpm.selector {
		case MCPConfig_FieldPathSelectorEnvironment:
			delete(item.Environment, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fpm.selector))
		}
	}
}

func (fpm *MCPConfig_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*MCPConfig))
}

// IsLeaf - whether field path is holds simple value
func (fpm *MCPConfig_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case MCPConfig_FieldPathSelectorEnvironment:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fpm.selector))
	}
}

func (fpm *MCPConfig_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *MCPConfig_FieldPathMap) WithIValue(value interface{}) MCPConfig_FieldPathValue {
	switch fpm.selector {
	case MCPConfig_FieldPathSelectorEnvironment:
		return &MCPConfig_FieldPathMapValue{MCPConfig_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fpm.selector))
	}
}

func (fpm *MCPConfig_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *MCPConfig_FieldPathMap) WithIArrayOfValues(values interface{}) MCPConfig_FieldPathArrayOfValues {
	switch fpm.selector {
	case MCPConfig_FieldPathSelectorEnvironment:
		return &MCPConfig_FieldPathMapArrayOfValues{MCPConfig_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fpm.selector))
	}
}

func (fpm *MCPConfig_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *MCPConfig_FieldPathMap) WithIArrayItemValue(value interface{}) MCPConfig_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *MCPConfig_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// MCPConfig_FieldPathValue allows storing values for MCPConfig fields according to their type
type MCPConfig_FieldPathValue interface {
	MCPConfig_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **MCPConfig)
	CompareWith(*MCPConfig) (cmp int, comparable bool)
}

func ParseMCPConfig_FieldPathValue(pathStr, valueStr string) (MCPConfig_FieldPathValue, error) {
	fp, err := ParseMCPConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MCPConfig field path value from %s: %v", valueStr, err)
	}
	return fpv.(MCPConfig_FieldPathValue), nil
}

func MustParseMCPConfig_FieldPathValue(pathStr, valueStr string) MCPConfig_FieldPathValue {
	fpv, err := ParseMCPConfig_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type MCPConfig_FieldTerminalPathValue struct {
	MCPConfig_FieldTerminalPath
	value interface{}
}

var _ MCPConfig_FieldPathValue = (*MCPConfig_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'MCPConfig' as interface{}
func (fpv *MCPConfig_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *MCPConfig_FieldTerminalPathValue) AsEndpointValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *MCPConfig_FieldTerminalPathValue) AsArgsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *MCPConfig_FieldTerminalPathValue) AsEnvironmentValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}

// SetTo stores value for selected field for object MCPConfig
func (fpv *MCPConfig_FieldTerminalPathValue) SetTo(target **MCPConfig) {
	if *target == nil {
		*target = new(MCPConfig)
	}
	switch fpv.selector {
	case MCPConfig_FieldPathSelectorEndpoint:
		(*target).Endpoint = fpv.value.(string)
	case MCPConfig_FieldPathSelectorArgs:
		(*target).Args = fpv.value.([]string)
	case MCPConfig_FieldPathSelectorEnvironment:
		(*target).Environment = fpv.value.(map[string]string)
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fpv.selector))
	}
}

func (fpv *MCPConfig_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*MCPConfig)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'MCPConfig_FieldTerminalPathValue' with the value under path in 'MCPConfig'.
func (fpv *MCPConfig_FieldTerminalPathValue) CompareWith(source *MCPConfig) (int, bool) {
	switch fpv.selector {
	case MCPConfig_FieldPathSelectorEndpoint:
		leftValue := fpv.value.(string)
		rightValue := source.GetEndpoint()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case MCPConfig_FieldPathSelectorArgs:
		return 0, false
	case MCPConfig_FieldPathSelectorEnvironment:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fpv.selector))
	}
}

func (fpv *MCPConfig_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*MCPConfig))
}

type MCPConfig_FieldPathMapValue struct {
	MCPConfig_FieldPathMap
	value interface{}
}

var _ MCPConfig_FieldPathValue = (*MCPConfig_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in MCPConfig as interface{}
func (fpmv *MCPConfig_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *MCPConfig_FieldPathMapValue) AsEnvironmentElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in MCPConfig
func (fpmv *MCPConfig_FieldPathMapValue) SetTo(target **MCPConfig) {
	if *target == nil {
		*target = new(MCPConfig)
	}
	switch fpmv.selector {
	case MCPConfig_FieldPathSelectorEnvironment:
		if (*target).Environment == nil {
			(*target).Environment = make(map[string]string)
		}
		(*target).Environment[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fpmv.selector))
	}
}

func (fpmv *MCPConfig_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*MCPConfig)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'MCPConfig_FieldPathMapValue' with the value under path in 'MCPConfig'.
func (fpmv *MCPConfig_FieldPathMapValue) CompareWith(source *MCPConfig) (int, bool) {
	switch fpmv.selector {
	case MCPConfig_FieldPathSelectorEnvironment:
		leftValue := fpmv.value.(string)
		rightValue := source.GetEnvironment()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for MCPConfig: %d", fpmv.selector))
	}
}

func (fpmv *MCPConfig_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*MCPConfig))
}

// MCPConfig_FieldPathArrayItemValue allows storing single item in Path-specific values for MCPConfig according to their type
// Present only for array (repeated) types.
type MCPConfig_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	MCPConfig_FieldPath
	ContainsValue(*MCPConfig) bool
}

// ParseMCPConfig_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseMCPConfig_FieldPathArrayItemValue(pathStr, valueStr string) (MCPConfig_FieldPathArrayItemValue, error) {
	fp, err := ParseMCPConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MCPConfig field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(MCPConfig_FieldPathArrayItemValue), nil
}

func MustParseMCPConfig_FieldPathArrayItemValue(pathStr, valueStr string) MCPConfig_FieldPathArrayItemValue {
	fpaiv, err := ParseMCPConfig_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type MCPConfig_FieldTerminalPathArrayItemValue struct {
	MCPConfig_FieldTerminalPath
	value interface{}
}

var _ MCPConfig_FieldPathArrayItemValue = (*MCPConfig_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object MCPConfig as interface{}
func (fpaiv *MCPConfig_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *MCPConfig_FieldTerminalPathArrayItemValue) AsArgsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *MCPConfig_FieldTerminalPathArrayItemValue) GetSingle(source *MCPConfig) (interface{}, bool) {
	return nil, false
}

func (fpaiv *MCPConfig_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*MCPConfig))
}

// Contains returns a boolean indicating if value that is being held is present in given 'MCPConfig'
func (fpaiv *MCPConfig_FieldTerminalPathArrayItemValue) ContainsValue(source *MCPConfig) bool {
	slice := fpaiv.MCPConfig_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// MCPConfig_FieldPathArrayOfValues allows storing slice of values for MCPConfig fields according to their type
type MCPConfig_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	MCPConfig_FieldPath
}

func ParseMCPConfig_FieldPathArrayOfValues(pathStr, valuesStr string) (MCPConfig_FieldPathArrayOfValues, error) {
	fp, err := ParseMCPConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MCPConfig field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(MCPConfig_FieldPathArrayOfValues), nil
}

func MustParseMCPConfig_FieldPathArrayOfValues(pathStr, valuesStr string) MCPConfig_FieldPathArrayOfValues {
	fpaov, err := ParseMCPConfig_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type MCPConfig_FieldTerminalPathArrayOfValues struct {
	MCPConfig_FieldTerminalPath
	values interface{}
}

var _ MCPConfig_FieldPathArrayOfValues = (*MCPConfig_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *MCPConfig_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case MCPConfig_FieldPathSelectorEndpoint:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case MCPConfig_FieldPathSelectorArgs:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case MCPConfig_FieldPathSelectorEnvironment:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *MCPConfig_FieldTerminalPathArrayOfValues) AsEndpointArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *MCPConfig_FieldTerminalPathArrayOfValues) AsArgsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *MCPConfig_FieldTerminalPathArrayOfValues) AsEnvironmentArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}

type MCPConfig_FieldPathMapArrayOfValues struct {
	MCPConfig_FieldPathMap
	values interface{}
}

var _ MCPConfig_FieldPathArrayOfValues = (*MCPConfig_FieldPathMapArrayOfValues)(nil)

func (fpmaov *MCPConfig_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case MCPConfig_FieldPathSelectorEnvironment:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *MCPConfig_FieldPathMapArrayOfValues) AsEnvironmentArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type OAuthConfig_FieldPath interface {
	gotenobject.FieldPath
	Selector() OAuthConfig_FieldPathSelector
	Get(source *OAuthConfig) []interface{}
	GetSingle(source *OAuthConfig) (interface{}, bool)
	ClearValue(item *OAuthConfig)

	// Those methods build corresponding OAuthConfig_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) OAuthConfig_FieldPathValue
	WithIArrayOfValues(values interface{}) OAuthConfig_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) OAuthConfig_FieldPathArrayItemValue
}

type OAuthConfig_FieldPathSelector int32

const (
	OAuthConfig_FieldPathSelectorClientId              OAuthConfig_FieldPathSelector = 0
	OAuthConfig_FieldPathSelectorClientSecret          OAuthConfig_FieldPathSelector = 1
	OAuthConfig_FieldPathSelectorAuthorizationEndpoint OAuthConfig_FieldPathSelector = 2
	OAuthConfig_FieldPathSelectorTokenEndpoint         OAuthConfig_FieldPathSelector = 3
	OAuthConfig_FieldPathSelectorAdditionalScopes      OAuthConfig_FieldPathSelector = 4
)

func (s OAuthConfig_FieldPathSelector) String() string {
	switch s {
	case OAuthConfig_FieldPathSelectorClientId:
		return "client_id"
	case OAuthConfig_FieldPathSelectorClientSecret:
		return "client_secret"
	case OAuthConfig_FieldPathSelectorAuthorizationEndpoint:
		return "authorization_endpoint"
	case OAuthConfig_FieldPathSelectorTokenEndpoint:
		return "token_endpoint"
	case OAuthConfig_FieldPathSelectorAdditionalScopes:
		return "additional_scopes"
	default:
		panic(fmt.Sprintf("Invalid selector for OAuthConfig: %d", s))
	}
}

func BuildOAuthConfig_FieldPath(fp gotenobject.RawFieldPath) (OAuthConfig_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object OAuthConfig")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "client_id", "clientId", "client-id":
			return &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorClientId}, nil
		case "client_secret", "clientSecret", "client-secret":
			return &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorClientSecret}, nil
		case "authorization_endpoint", "authorizationEndpoint", "authorization-endpoint":
			return &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorAuthorizationEndpoint}, nil
		case "token_endpoint", "tokenEndpoint", "token-endpoint":
			return &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorTokenEndpoint}, nil
		case "additional_scopes", "additionalScopes", "additional-scopes":
			return &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorAdditionalScopes}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object OAuthConfig", fp)
}

func ParseOAuthConfig_FieldPath(rawField string) (OAuthConfig_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildOAuthConfig_FieldPath(fp)
}

func MustParseOAuthConfig_FieldPath(rawField string) OAuthConfig_FieldPath {
	fp, err := ParseOAuthConfig_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type OAuthConfig_FieldTerminalPath struct {
	selector OAuthConfig_FieldPathSelector
}

var _ OAuthConfig_FieldPath = (*OAuthConfig_FieldTerminalPath)(nil)

func (fp *OAuthConfig_FieldTerminalPath) Selector() OAuthConfig_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *OAuthConfig_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *OAuthConfig_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source OAuthConfig
func (fp *OAuthConfig_FieldTerminalPath) Get(source *OAuthConfig) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case OAuthConfig_FieldPathSelectorClientId:
			values = append(values, source.ClientId)
		case OAuthConfig_FieldPathSelectorClientSecret:
			values = append(values, source.ClientSecret)
		case OAuthConfig_FieldPathSelectorAuthorizationEndpoint:
			values = append(values, source.AuthorizationEndpoint)
		case OAuthConfig_FieldPathSelectorTokenEndpoint:
			values = append(values, source.TokenEndpoint)
		case OAuthConfig_FieldPathSelectorAdditionalScopes:
			for _, value := range source.GetAdditionalScopes() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for OAuthConfig: %d", fp.selector))
		}
	}
	return
}

func (fp *OAuthConfig_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*OAuthConfig))
}

// GetSingle returns value pointed by specific field of from source OAuthConfig
func (fp *OAuthConfig_FieldTerminalPath) GetSingle(source *OAuthConfig) (interface{}, bool) {
	switch fp.selector {
	case OAuthConfig_FieldPathSelectorClientId:
		return source.GetClientId(), source != nil
	case OAuthConfig_FieldPathSelectorClientSecret:
		return source.GetClientSecret(), source != nil
	case OAuthConfig_FieldPathSelectorAuthorizationEndpoint:
		return source.GetAuthorizationEndpoint(), source != nil
	case OAuthConfig_FieldPathSelectorTokenEndpoint:
		return source.GetTokenEndpoint(), source != nil
	case OAuthConfig_FieldPathSelectorAdditionalScopes:
		res := source.GetAdditionalScopes()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for OAuthConfig: %d", fp.selector))
	}
}

func (fp *OAuthConfig_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*OAuthConfig))
}

// GetDefault returns a default value of the field type
func (fp *OAuthConfig_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case OAuthConfig_FieldPathSelectorClientId:
		return ""
	case OAuthConfig_FieldPathSelectorClientSecret:
		return ""
	case OAuthConfig_FieldPathSelectorAuthorizationEndpoint:
		return ""
	case OAuthConfig_FieldPathSelectorTokenEndpoint:
		return ""
	case OAuthConfig_FieldPathSelectorAdditionalScopes:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for OAuthConfig: %d", fp.selector))
	}
}

func (fp *OAuthConfig_FieldTerminalPath) ClearValue(item *OAuthConfig) {
	if item != nil {
		switch fp.selector {
		case OAuthConfig_FieldPathSelectorClientId:
			item.ClientId = ""
		case OAuthConfig_FieldPathSelectorClientSecret:
			item.ClientSecret = ""
		case OAuthConfig_FieldPathSelectorAuthorizationEndpoint:
			item.AuthorizationEndpoint = ""
		case OAuthConfig_FieldPathSelectorTokenEndpoint:
			item.TokenEndpoint = ""
		case OAuthConfig_FieldPathSelectorAdditionalScopes:
			item.AdditionalScopes = nil
		default:
			panic(fmt.Sprintf("Invalid selector for OAuthConfig: %d", fp.selector))
		}
	}
}

func (fp *OAuthConfig_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*OAuthConfig))
}

// IsLeaf - whether field path is holds simple value
func (fp *OAuthConfig_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == OAuthConfig_FieldPathSelectorClientId ||
		fp.selector == OAuthConfig_FieldPathSelectorClientSecret ||
		fp.selector == OAuthConfig_FieldPathSelectorAuthorizationEndpoint ||
		fp.selector == OAuthConfig_FieldPathSelectorTokenEndpoint ||
		fp.selector == OAuthConfig_FieldPathSelectorAdditionalScopes
}

func (fp *OAuthConfig_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *OAuthConfig_FieldTerminalPath) WithIValue(value interface{}) OAuthConfig_FieldPathValue {
	switch fp.selector {
	case OAuthConfig_FieldPathSelectorClientId:
		return &OAuthConfig_FieldTerminalPathValue{OAuthConfig_FieldTerminalPath: *fp, value: value.(string)}
	case OAuthConfig_FieldPathSelectorClientSecret:
		return &OAuthConfig_FieldTerminalPathValue{OAuthConfig_FieldTerminalPath: *fp, value: value.(string)}
	case OAuthConfig_FieldPathSelectorAuthorizationEndpoint:
		return &OAuthConfig_FieldTerminalPathValue{OAuthConfig_FieldTerminalPath: *fp, value: value.(string)}
	case OAuthConfig_FieldPathSelectorTokenEndpoint:
		return &OAuthConfig_FieldTerminalPathValue{OAuthConfig_FieldTerminalPath: *fp, value: value.(string)}
	case OAuthConfig_FieldPathSelectorAdditionalScopes:
		return &OAuthConfig_FieldTerminalPathValue{OAuthConfig_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for OAuthConfig: %d", fp.selector))
	}
}

func (fp *OAuthConfig_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *OAuthConfig_FieldTerminalPath) WithIArrayOfValues(values interface{}) OAuthConfig_FieldPathArrayOfValues {
	fpaov := &OAuthConfig_FieldTerminalPathArrayOfValues{OAuthConfig_FieldTerminalPath: *fp}
	switch fp.selector {
	case OAuthConfig_FieldPathSelectorClientId:
		return &OAuthConfig_FieldTerminalPathArrayOfValues{OAuthConfig_FieldTerminalPath: *fp, values: values.([]string)}
	case OAuthConfig_FieldPathSelectorClientSecret:
		return &OAuthConfig_FieldTerminalPathArrayOfValues{OAuthConfig_FieldTerminalPath: *fp, values: values.([]string)}
	case OAuthConfig_FieldPathSelectorAuthorizationEndpoint:
		return &OAuthConfig_FieldTerminalPathArrayOfValues{OAuthConfig_FieldTerminalPath: *fp, values: values.([]string)}
	case OAuthConfig_FieldPathSelectorTokenEndpoint:
		return &OAuthConfig_FieldTerminalPathArrayOfValues{OAuthConfig_FieldTerminalPath: *fp, values: values.([]string)}
	case OAuthConfig_FieldPathSelectorAdditionalScopes:
		return &OAuthConfig_FieldTerminalPathArrayOfValues{OAuthConfig_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for OAuthConfig: %d", fp.selector))
	}
	return fpaov
}

func (fp *OAuthConfig_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *OAuthConfig_FieldTerminalPath) WithIArrayItemValue(value interface{}) OAuthConfig_FieldPathArrayItemValue {
	switch fp.selector {
	case OAuthConfig_FieldPathSelectorAdditionalScopes:
		return &OAuthConfig_FieldTerminalPathArrayItemValue{OAuthConfig_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for OAuthConfig: %d", fp.selector))
	}
}

func (fp *OAuthConfig_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// OAuthConfig_FieldPathValue allows storing values for OAuthConfig fields according to their type
type OAuthConfig_FieldPathValue interface {
	OAuthConfig_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **OAuthConfig)
	CompareWith(*OAuthConfig) (cmp int, comparable bool)
}

func ParseOAuthConfig_FieldPathValue(pathStr, valueStr string) (OAuthConfig_FieldPathValue, error) {
	fp, err := ParseOAuthConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OAuthConfig field path value from %s: %v", valueStr, err)
	}
	return fpv.(OAuthConfig_FieldPathValue), nil
}

func MustParseOAuthConfig_FieldPathValue(pathStr, valueStr string) OAuthConfig_FieldPathValue {
	fpv, err := ParseOAuthConfig_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type OAuthConfig_FieldTerminalPathValue struct {
	OAuthConfig_FieldTerminalPath
	value interface{}
}

var _ OAuthConfig_FieldPathValue = (*OAuthConfig_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'OAuthConfig' as interface{}
func (fpv *OAuthConfig_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *OAuthConfig_FieldTerminalPathValue) AsClientIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *OAuthConfig_FieldTerminalPathValue) AsClientSecretValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *OAuthConfig_FieldTerminalPathValue) AsAuthorizationEndpointValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *OAuthConfig_FieldTerminalPathValue) AsTokenEndpointValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *OAuthConfig_FieldTerminalPathValue) AsAdditionalScopesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object OAuthConfig
func (fpv *OAuthConfig_FieldTerminalPathValue) SetTo(target **OAuthConfig) {
	if *target == nil {
		*target = new(OAuthConfig)
	}
	switch fpv.selector {
	case OAuthConfig_FieldPathSelectorClientId:
		(*target).ClientId = fpv.value.(string)
	case OAuthConfig_FieldPathSelectorClientSecret:
		(*target).ClientSecret = fpv.value.(string)
	case OAuthConfig_FieldPathSelectorAuthorizationEndpoint:
		(*target).AuthorizationEndpoint = fpv.value.(string)
	case OAuthConfig_FieldPathSelectorTokenEndpoint:
		(*target).TokenEndpoint = fpv.value.(string)
	case OAuthConfig_FieldPathSelectorAdditionalScopes:
		(*target).AdditionalScopes = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for OAuthConfig: %d", fpv.selector))
	}
}

func (fpv *OAuthConfig_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*OAuthConfig)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'OAuthConfig_FieldTerminalPathValue' with the value under path in 'OAuthConfig'.
func (fpv *OAuthConfig_FieldTerminalPathValue) CompareWith(source *OAuthConfig) (int, bool) {
	switch fpv.selector {
	case OAuthConfig_FieldPathSelectorClientId:
		leftValue := fpv.value.(string)
		rightValue := source.GetClientId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case OAuthConfig_FieldPathSelectorClientSecret:
		leftValue := fpv.value.(string)
		rightValue := source.GetClientSecret()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case OAuthConfig_FieldPathSelectorAuthorizationEndpoint:
		leftValue := fpv.value.(string)
		rightValue := source.GetAuthorizationEndpoint()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case OAuthConfig_FieldPathSelectorTokenEndpoint:
		leftValue := fpv.value.(string)
		rightValue := source.GetTokenEndpoint()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case OAuthConfig_FieldPathSelectorAdditionalScopes:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for OAuthConfig: %d", fpv.selector))
	}
}

func (fpv *OAuthConfig_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*OAuthConfig))
}

// OAuthConfig_FieldPathArrayItemValue allows storing single item in Path-specific values for OAuthConfig according to their type
// Present only for array (repeated) types.
type OAuthConfig_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	OAuthConfig_FieldPath
	ContainsValue(*OAuthConfig) bool
}

// ParseOAuthConfig_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseOAuthConfig_FieldPathArrayItemValue(pathStr, valueStr string) (OAuthConfig_FieldPathArrayItemValue, error) {
	fp, err := ParseOAuthConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OAuthConfig field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(OAuthConfig_FieldPathArrayItemValue), nil
}

func MustParseOAuthConfig_FieldPathArrayItemValue(pathStr, valueStr string) OAuthConfig_FieldPathArrayItemValue {
	fpaiv, err := ParseOAuthConfig_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type OAuthConfig_FieldTerminalPathArrayItemValue struct {
	OAuthConfig_FieldTerminalPath
	value interface{}
}

var _ OAuthConfig_FieldPathArrayItemValue = (*OAuthConfig_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object OAuthConfig as interface{}
func (fpaiv *OAuthConfig_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *OAuthConfig_FieldTerminalPathArrayItemValue) AsAdditionalScopesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *OAuthConfig_FieldTerminalPathArrayItemValue) GetSingle(source *OAuthConfig) (interface{}, bool) {
	return nil, false
}

func (fpaiv *OAuthConfig_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*OAuthConfig))
}

// Contains returns a boolean indicating if value that is being held is present in given 'OAuthConfig'
func (fpaiv *OAuthConfig_FieldTerminalPathArrayItemValue) ContainsValue(source *OAuthConfig) bool {
	slice := fpaiv.OAuthConfig_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// OAuthConfig_FieldPathArrayOfValues allows storing slice of values for OAuthConfig fields according to their type
type OAuthConfig_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	OAuthConfig_FieldPath
}

func ParseOAuthConfig_FieldPathArrayOfValues(pathStr, valuesStr string) (OAuthConfig_FieldPathArrayOfValues, error) {
	fp, err := ParseOAuthConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OAuthConfig field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(OAuthConfig_FieldPathArrayOfValues), nil
}

func MustParseOAuthConfig_FieldPathArrayOfValues(pathStr, valuesStr string) OAuthConfig_FieldPathArrayOfValues {
	fpaov, err := ParseOAuthConfig_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type OAuthConfig_FieldTerminalPathArrayOfValues struct {
	OAuthConfig_FieldTerminalPath
	values interface{}
}

var _ OAuthConfig_FieldPathArrayOfValues = (*OAuthConfig_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *OAuthConfig_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case OAuthConfig_FieldPathSelectorClientId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case OAuthConfig_FieldPathSelectorClientSecret:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case OAuthConfig_FieldPathSelectorAuthorizationEndpoint:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case OAuthConfig_FieldPathSelectorTokenEndpoint:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case OAuthConfig_FieldPathSelectorAdditionalScopes:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *OAuthConfig_FieldTerminalPathArrayOfValues) AsClientIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *OAuthConfig_FieldTerminalPathArrayOfValues) AsClientSecretArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *OAuthConfig_FieldTerminalPathArrayOfValues) AsAuthorizationEndpointArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *OAuthConfig_FieldTerminalPathArrayOfValues) AsTokenEndpointArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *OAuthConfig_FieldTerminalPathArrayOfValues) AsAdditionalScopesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
