// Code generated by protoc-gen-goten-object
// File: edgelq/ai/proto/v1/connector.proto
// DO NOT EDIT!!!

package connector

import (
	"encoding/json"
	"strings"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

type Connector_FieldMask struct {
	Paths []Connector_FieldPath
}

func FullConnector_FieldMask() *Connector_FieldMask {
	res := &Connector_FieldMask{}
	res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorName})
	res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorType})
	res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorMcpConfig})
	res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorOauthConfig})
	res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorConnectTimeout})
	res.Paths = append(res.Paths, &Connector_FieldTerminalPath{selector: Connector_FieldPathSelectorRequestTimeout})
	return res
}

func (fieldMask *Connector_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Connector_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 9)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Connector_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Connector_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseConnector_FieldPath(raw)
	})
}

func (fieldMask *Connector_FieldMask) ProtoMessage() {}

func (fieldMask *Connector_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Connector_FieldMask) Subtract(other *Connector_FieldMask) *Connector_FieldMask {
	result := &Connector_FieldMask{}
	removedSelectors := make([]bool, 9)
	otherSubMasks := map[Connector_FieldPathSelector]gotenobject.FieldMask{
		Connector_FieldPathSelectorMetadata:    &meta.Meta_FieldMask{},
		Connector_FieldPathSelectorMcpConfig:   &MCPConfig_FieldMask{},
		Connector_FieldPathSelectorOauthConfig: &OAuthConfig_FieldMask{},
	}
	mySubMasks := map[Connector_FieldPathSelector]gotenobject.FieldMask{
		Connector_FieldPathSelectorMetadata:    &meta.Meta_FieldMask{},
		Connector_FieldPathSelectorMcpConfig:   &MCPConfig_FieldMask{},
		Connector_FieldPathSelectorOauthConfig: &OAuthConfig_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Connector_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Connector_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Connector_FieldTerminalPath); ok {
					switch tp.selector {
					case Connector_FieldPathSelectorMetadata:
						mySubMasks[Connector_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case Connector_FieldPathSelectorMcpConfig:
						mySubMasks[Connector_FieldPathSelectorMcpConfig] = FullMCPConfig_FieldMask()
					case Connector_FieldPathSelectorOauthConfig:
						mySubMasks[Connector_FieldPathSelectorOauthConfig] = FullOAuthConfig_FieldMask()
					}
				} else if tp, ok := path.(*Connector_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Connector_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Connector_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Connector_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Connector_FieldMask) FilterInputFields() *Connector_FieldMask {
	result := &Connector_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case Connector_FieldPathSelectorMetadata:
			if _, ok := path.(*Connector_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Connector_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Connector_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Connector_FieldSubPath{selector: Connector_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Connector_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Connector_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Connector_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseConnector_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Connector_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Connector_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Connector_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Connector_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Connector_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Connector_FieldMask) AppendPath(path Connector_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Connector_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Connector_FieldPath))
}

func (fieldMask *Connector_FieldMask) GetPaths() []Connector_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Connector_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Connector_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseConnector_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Connector_FieldMask) Set(target, source *Connector) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Connector_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Connector), source.(*Connector))
}

func (fieldMask *Connector_FieldMask) Project(source *Connector) *Connector {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Connector{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	mcpConfigMask := &MCPConfig_FieldMask{}
	wholeMcpConfigAccepted := false
	oauthConfigMask := &OAuthConfig_FieldMask{}
	wholeOauthConfigAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Connector_FieldTerminalPath:
			switch tp.selector {
			case Connector_FieldPathSelectorName:
				result.Name = source.Name
			case Connector_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case Connector_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case Connector_FieldPathSelectorDescription:
				result.Description = source.Description
			case Connector_FieldPathSelectorType:
				result.Type = source.Type
			case Connector_FieldPathSelectorMcpConfig:
				result.McpConfig = source.McpConfig
				wholeMcpConfigAccepted = true
			case Connector_FieldPathSelectorOauthConfig:
				result.OauthConfig = source.OauthConfig
				wholeOauthConfigAccepted = true
			case Connector_FieldPathSelectorConnectTimeout:
				result.ConnectTimeout = source.ConnectTimeout
			case Connector_FieldPathSelectorRequestTimeout:
				result.RequestTimeout = source.RequestTimeout
			}
		case *Connector_FieldSubPath:
			switch tp.selector {
			case Connector_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case Connector_FieldPathSelectorMcpConfig:
				mcpConfigMask.AppendPath(tp.subPath.(MCPConfig_FieldPath))
			case Connector_FieldPathSelectorOauthConfig:
				oauthConfigMask.AppendPath(tp.subPath.(OAuthConfig_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeMcpConfigAccepted == false && len(mcpConfigMask.Paths) > 0 {
		result.McpConfig = mcpConfigMask.Project(source.GetMcpConfig())
	}
	if wholeOauthConfigAccepted == false && len(oauthConfigMask.Paths) > 0 {
		result.OauthConfig = oauthConfigMask.Project(source.GetOauthConfig())
	}
	return result
}

func (fieldMask *Connector_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Connector))
}

func (fieldMask *Connector_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type MCPConfig_FieldMask struct {
	Paths []MCPConfig_FieldPath
}

func FullMCPConfig_FieldMask() *MCPConfig_FieldMask {
	res := &MCPConfig_FieldMask{}
	res.Paths = append(res.Paths, &MCPConfig_FieldTerminalPath{selector: MCPConfig_FieldPathSelectorEndpoint})
	res.Paths = append(res.Paths, &MCPConfig_FieldTerminalPath{selector: MCPConfig_FieldPathSelectorArgs})
	res.Paths = append(res.Paths, &MCPConfig_FieldTerminalPath{selector: MCPConfig_FieldPathSelectorEnvironment})
	return res
}

func (fieldMask *MCPConfig_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *MCPConfig_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*MCPConfig_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *MCPConfig_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseMCPConfig_FieldPath(raw)
	})
}

func (fieldMask *MCPConfig_FieldMask) ProtoMessage() {}

func (fieldMask *MCPConfig_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *MCPConfig_FieldMask) Subtract(other *MCPConfig_FieldMask) *MCPConfig_FieldMask {
	result := &MCPConfig_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *MCPConfig_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *MCPConfig_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*MCPConfig_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *MCPConfig_FieldMask) FilterInputFields() *MCPConfig_FieldMask {
	result := &MCPConfig_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *MCPConfig_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *MCPConfig_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]MCPConfig_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseMCPConfig_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask MCPConfig_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *MCPConfig_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *MCPConfig_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask MCPConfig_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *MCPConfig_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *MCPConfig_FieldMask) AppendPath(path MCPConfig_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *MCPConfig_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(MCPConfig_FieldPath))
}

func (fieldMask *MCPConfig_FieldMask) GetPaths() []MCPConfig_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *MCPConfig_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *MCPConfig_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseMCPConfig_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *MCPConfig_FieldMask) Set(target, source *MCPConfig) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *MCPConfig_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*MCPConfig), source.(*MCPConfig))
}

func (fieldMask *MCPConfig_FieldMask) Project(source *MCPConfig) *MCPConfig {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &MCPConfig{}
	var environmentMapKeys []string
	wholeEnvironmentAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *MCPConfig_FieldTerminalPath:
			switch tp.selector {
			case MCPConfig_FieldPathSelectorEndpoint:
				result.Endpoint = source.Endpoint
			case MCPConfig_FieldPathSelectorArgs:
				result.Args = source.Args
			case MCPConfig_FieldPathSelectorEnvironment:
				result.Environment = source.Environment
				wholeEnvironmentAccepted = true
			}
		case *MCPConfig_FieldPathMap:
			switch tp.selector {
			case MCPConfig_FieldPathSelectorEnvironment:
				environmentMapKeys = append(environmentMapKeys, tp.key)
			}
		}
	}
	if wholeEnvironmentAccepted == false && len(environmentMapKeys) > 0 && source.GetEnvironment() != nil {
		copiedMap := map[string]string{}
		sourceMap := source.GetEnvironment()
		for _, key := range environmentMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.Environment = copiedMap
	}
	return result
}

func (fieldMask *MCPConfig_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*MCPConfig))
}

func (fieldMask *MCPConfig_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type OAuthConfig_FieldMask struct {
	Paths []OAuthConfig_FieldPath
}

func FullOAuthConfig_FieldMask() *OAuthConfig_FieldMask {
	res := &OAuthConfig_FieldMask{}
	res.Paths = append(res.Paths, &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorClientId})
	res.Paths = append(res.Paths, &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorClientSecret})
	res.Paths = append(res.Paths, &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorAuthorizationEndpoint})
	res.Paths = append(res.Paths, &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorTokenEndpoint})
	res.Paths = append(res.Paths, &OAuthConfig_FieldTerminalPath{selector: OAuthConfig_FieldPathSelectorAdditionalScopes})
	return res
}

func (fieldMask *OAuthConfig_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *OAuthConfig_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*OAuthConfig_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *OAuthConfig_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseOAuthConfig_FieldPath(raw)
	})
}

func (fieldMask *OAuthConfig_FieldMask) ProtoMessage() {}

func (fieldMask *OAuthConfig_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *OAuthConfig_FieldMask) Subtract(other *OAuthConfig_FieldMask) *OAuthConfig_FieldMask {
	result := &OAuthConfig_FieldMask{}
	removedSelectors := make([]bool, 5)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *OAuthConfig_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *OAuthConfig_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*OAuthConfig_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *OAuthConfig_FieldMask) FilterInputFields() *OAuthConfig_FieldMask {
	result := &OAuthConfig_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *OAuthConfig_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *OAuthConfig_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]OAuthConfig_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseOAuthConfig_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask OAuthConfig_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *OAuthConfig_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *OAuthConfig_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask OAuthConfig_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *OAuthConfig_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *OAuthConfig_FieldMask) AppendPath(path OAuthConfig_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *OAuthConfig_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(OAuthConfig_FieldPath))
}

func (fieldMask *OAuthConfig_FieldMask) GetPaths() []OAuthConfig_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *OAuthConfig_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *OAuthConfig_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseOAuthConfig_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *OAuthConfig_FieldMask) Set(target, source *OAuthConfig) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *OAuthConfig_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*OAuthConfig), source.(*OAuthConfig))
}

func (fieldMask *OAuthConfig_FieldMask) Project(source *OAuthConfig) *OAuthConfig {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &OAuthConfig{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *OAuthConfig_FieldTerminalPath:
			switch tp.selector {
			case OAuthConfig_FieldPathSelectorClientId:
				result.ClientId = source.ClientId
			case OAuthConfig_FieldPathSelectorClientSecret:
				result.ClientSecret = source.ClientSecret
			case OAuthConfig_FieldPathSelectorAuthorizationEndpoint:
				result.AuthorizationEndpoint = source.AuthorizationEndpoint
			case OAuthConfig_FieldPathSelectorTokenEndpoint:
				result.TokenEndpoint = source.TokenEndpoint
			case OAuthConfig_FieldPathSelectorAdditionalScopes:
				result.AdditionalScopes = source.AdditionalScopes
			}
		}
	}
	return result
}

func (fieldMask *OAuthConfig_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*OAuthConfig))
}

func (fieldMask *OAuthConfig_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
