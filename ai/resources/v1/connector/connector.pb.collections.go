// Code generated by protoc-gen-goten-resource
// Resource: Connector
// DO NOT EDIT!!!

package connector

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

type ConnectorList []*Connector

func (l ConnectorList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Connector))
}

func (l ConnectorList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ConnectorList)...)
}

func (l ConnectorList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConnectorList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ConnectorList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Connector)
}

func (l ConnectorList) Length() int {
	return len(l)
}

type ConnectorChangeList []*ConnectorChange

func (l ConnectorChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ConnectorChange))
}

func (l ConnectorChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ConnectorChangeList)...)
}

func (l ConnectorChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConnectorChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ConnectorChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ConnectorChange)
}

func (l ConnectorChangeList) Length() int {
	return len(l)
}

type ConnectorNameList []*Name

func (l ConnectorNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ConnectorNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ConnectorNameList)...)
}

func (l ConnectorNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConnectorNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ConnectorNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ConnectorNameList) Length() int {
	return len(l)
}

type ConnectorReferenceList []*Reference

func (l ConnectorReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ConnectorReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ConnectorReferenceList)...)
}

func (l ConnectorReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConnectorReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ConnectorReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ConnectorReferenceList) Length() int {
	return len(l)
}

type ConnectorParentNameList []*ParentName

func (l ConnectorParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ConnectorParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ConnectorParentNameList)...)
}

func (l ConnectorParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConnectorParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ConnectorParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ConnectorParentNameList) Length() int {
	return len(l)
}

type ConnectorParentReferenceList []*ParentReference

func (l ConnectorParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ConnectorParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ConnectorParentReferenceList)...)
}

func (l ConnectorParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConnectorParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ConnectorParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ConnectorParentReferenceList) Length() int {
	return len(l)
}

type ConnectorMap map[Name]*Connector

func (m ConnectorMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ConnectorMap) Set(res gotenresource.Resource) {
	tRes := res.(*Connector)
	m[*tRes.Name] = tRes
}

func (m ConnectorMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ConnectorMap) Length() int {
	return len(m)
}

func (m ConnectorMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ConnectorChangeMap map[Name]*ConnectorChange

func (m ConnectorChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ConnectorChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ConnectorChange)
	m[*tChange.GetConnectorName()] = tChange
}

func (m ConnectorChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ConnectorChangeMap) Length() int {
	return len(m)
}

func (m ConnectorChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
