// Code generated by protoc-gen-goten-go
// File: edgelq/devices/proto/v1/ztp_provision_hardware_custom.proto
// DO NOT EDIT!!!

package ztp_provision_hardware_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1/provisioning_policy"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &api.DeviceIdentity{}
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &provisioning_policy.ProvisioningPolicy{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method
// [ProvisionHardware][ntt.devices.v1.ProvisionHardware]
type ProvisionHardwareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*ProvisionHardwareRequest_ProvisioningTarget_
	//	*ProvisionHardwareRequest_Identify
	//	*ProvisionHardwareRequest_ChallengeResponse
	Msg isProvisionHardwareRequest_Msg `protobuf_oneof:"msg"`
}

func (m *ProvisionHardwareRequest) Reset() {
	*m = ProvisionHardwareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProvisionHardwareRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProvisionHardwareRequest) ProtoMessage() {}

func (m *ProvisionHardwareRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProvisionHardwareRequest) GotenMessage() {}

// Deprecated, Use ProvisionHardwareRequest.ProtoReflect.Descriptor instead.
func (*ProvisionHardwareRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDescGZIP(), []int{0}
}

func (m *ProvisionHardwareRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProvisionHardwareRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProvisionHardwareRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProvisionHardwareRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isProvisionHardwareRequest_Msg interface {
	isProvisionHardwareRequest_Msg()
}

type ProvisionHardwareRequest_ProvisioningTarget_ struct {
	ProvisioningTarget *ProvisionHardwareRequest_ProvisioningTarget `protobuf:"bytes,1,opt,name=provisioning_target,json=provisioningTarget,proto3,oneof"`
}
type ProvisionHardwareRequest_Identify struct {
	Identify *api.DeviceIdentity `protobuf:"bytes,2,opt,name=identify,proto3,oneof"`
}
type ProvisionHardwareRequest_ChallengeResponse struct {
	ChallengeResponse *api.IdentityChallengeResponse `protobuf:"bytes,3,opt,name=challenge_response,json=challengeResponse,proto3,oneof"`
}

func (*ProvisionHardwareRequest_ProvisioningTarget_) isProvisionHardwareRequest_Msg() {}
func (*ProvisionHardwareRequest_Identify) isProvisionHardwareRequest_Msg()            {}
func (*ProvisionHardwareRequest_ChallengeResponse) isProvisionHardwareRequest_Msg()   {}
func (m *ProvisionHardwareRequest) GetMsg() isProvisionHardwareRequest_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *ProvisionHardwareRequest) GetProvisioningTarget() *ProvisionHardwareRequest_ProvisioningTarget {
	if x, ok := m.GetMsg().(*ProvisionHardwareRequest_ProvisioningTarget_); ok {
		return x.ProvisioningTarget
	}
	return nil
}
func (m *ProvisionHardwareRequest) GetIdentify() *api.DeviceIdentity {
	if x, ok := m.GetMsg().(*ProvisionHardwareRequest_Identify); ok {
		return x.Identify
	}
	return nil
}
func (m *ProvisionHardwareRequest) GetChallengeResponse() *api.IdentityChallengeResponse {
	if x, ok := m.GetMsg().(*ProvisionHardwareRequest_ChallengeResponse); ok {
		return x.ChallengeResponse
	}
	return nil
}
func (m *ProvisionHardwareRequest) SetMsg(ofv isProvisionHardwareRequest_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isProvisionHardwareRequest_Msg", "ProvisionHardwareRequest"))
	}
	m.Msg = ofv
}
func (m *ProvisionHardwareRequest) SetProvisioningTarget(fv *ProvisionHardwareRequest_ProvisioningTarget) {
	m.SetMsg(&ProvisionHardwareRequest_ProvisioningTarget_{ProvisioningTarget: fv})
}
func (m *ProvisionHardwareRequest) SetIdentify(fv *api.DeviceIdentity) {
	m.SetMsg(&ProvisionHardwareRequest_Identify{Identify: fv})
}
func (m *ProvisionHardwareRequest) SetChallengeResponse(fv *api.IdentityChallengeResponse) {
	m.SetMsg(&ProvisionHardwareRequest_ChallengeResponse{ChallengeResponse: fv})
}

// Response message for method
// [ProvisionHardware][ntt.devices.v1.ProvisionHardware]
type ProvisionHardwareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*ProvisionHardwareResponse_IdentityChallenge
	//	*ProvisionHardwareResponse_ProvisioningResponse_
	Msg isProvisionHardwareResponse_Msg `protobuf_oneof:"msg"`
}

func (m *ProvisionHardwareResponse) Reset() {
	*m = ProvisionHardwareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProvisionHardwareResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProvisionHardwareResponse) ProtoMessage() {}

func (m *ProvisionHardwareResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProvisionHardwareResponse) GotenMessage() {}

// Deprecated, Use ProvisionHardwareResponse.ProtoReflect.Descriptor instead.
func (*ProvisionHardwareResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDescGZIP(), []int{1}
}

func (m *ProvisionHardwareResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProvisionHardwareResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProvisionHardwareResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProvisionHardwareResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isProvisionHardwareResponse_Msg interface {
	isProvisionHardwareResponse_Msg()
}

type ProvisionHardwareResponse_IdentityChallenge struct {
	IdentityChallenge *api.IdentityChallenge `protobuf:"bytes,1,opt,name=identity_challenge,json=identityChallenge,proto3,oneof"`
}
type ProvisionHardwareResponse_ProvisioningResponse_ struct {
	ProvisioningResponse *ProvisionHardwareResponse_ProvisioningResponse `protobuf:"bytes,2,opt,name=provisioning_response,json=provisioningResponse,proto3,oneof"`
}

func (*ProvisionHardwareResponse_IdentityChallenge) isProvisionHardwareResponse_Msg()     {}
func (*ProvisionHardwareResponse_ProvisioningResponse_) isProvisionHardwareResponse_Msg() {}
func (m *ProvisionHardwareResponse) GetMsg() isProvisionHardwareResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *ProvisionHardwareResponse) GetIdentityChallenge() *api.IdentityChallenge {
	if x, ok := m.GetMsg().(*ProvisionHardwareResponse_IdentityChallenge); ok {
		return x.IdentityChallenge
	}
	return nil
}
func (m *ProvisionHardwareResponse) GetProvisioningResponse() *ProvisionHardwareResponse_ProvisioningResponse {
	if x, ok := m.GetMsg().(*ProvisionHardwareResponse_ProvisioningResponse_); ok {
		return x.ProvisioningResponse
	}
	return nil
}
func (m *ProvisionHardwareResponse) SetMsg(ofv isProvisionHardwareResponse_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isProvisionHardwareResponse_Msg", "ProvisionHardwareResponse"))
	}
	m.Msg = ofv
}
func (m *ProvisionHardwareResponse) SetIdentityChallenge(fv *api.IdentityChallenge) {
	m.SetMsg(&ProvisionHardwareResponse_IdentityChallenge{IdentityChallenge: fv})
}
func (m *ProvisionHardwareResponse) SetProvisioningResponse(fv *ProvisionHardwareResponse_ProvisioningResponse) {
	m.SetMsg(&ProvisionHardwareResponse_ProvisioningResponse_{ProvisioningResponse: fv})
}

// ProvisioningTarget is used to know the correct region to route the request
type ProvisionHardwareRequest_ProvisioningTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// one of provisioning_policy_name or device_name is required
	ProvisioningPolicyName *provisioning_policy.Name `protobuf:"bytes,1,opt,customtype=Name,name=provisioning_policy_name,json=provisioningPolicyName,proto3" json:"provisioning_policy_name,omitempty"`
	DeviceName             *device.Name              `protobuf:"bytes,2,opt,customtype=Name,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
}

func (m *ProvisionHardwareRequest_ProvisioningTarget) Reset() {
	*m = ProvisionHardwareRequest_ProvisioningTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProvisionHardwareRequest_ProvisioningTarget) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProvisionHardwareRequest_ProvisioningTarget) ProtoMessage() {}

func (m *ProvisionHardwareRequest_ProvisioningTarget) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProvisionHardwareRequest_ProvisioningTarget) GotenMessage() {}

// Deprecated, Use ProvisionHardwareRequest_ProvisioningTarget.ProtoReflect.Descriptor instead.
func (*ProvisionHardwareRequest_ProvisioningTarget) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ProvisionHardwareRequest_ProvisioningTarget) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProvisionHardwareRequest_ProvisioningTarget) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProvisionHardwareRequest_ProvisioningTarget) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProvisionHardwareRequest_ProvisioningTarget) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProvisionHardwareRequest_ProvisioningTarget) GetProvisioningPolicyName() *provisioning_policy.Name {
	if m != nil {
		return m.ProvisioningPolicyName
	}
	return nil
}

func (m *ProvisionHardwareRequest_ProvisioningTarget) GetDeviceName() *device.Name {
	if m != nil {
		return m.DeviceName
	}
	return nil
}

func (m *ProvisionHardwareRequest_ProvisioningTarget) SetProvisioningPolicyName(fv *provisioning_policy.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProvisioningPolicyName", "ProvisionHardwareRequest_ProvisioningTarget"))
	}
	m.ProvisioningPolicyName = fv
}

func (m *ProvisionHardwareRequest_ProvisioningTarget) SetDeviceName(fv *device.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceName", "ProvisionHardwareRequest_ProvisioningTarget"))
	}
	m.DeviceName = fv
}

// One of provisioning service_account and policy name or
// device service_account and device name will be returned.
type ProvisionHardwareResponse_ProvisioningResponse struct {
	state                  protoimpl.MessageState
	sizeCache              protoimpl.SizeCache
	unknownFields          protoimpl.UnknownFields
	ServiceAccount         *api.ServiceAccount       `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	ProvisioningPolicyName *provisioning_policy.Name `protobuf:"bytes,2,opt,customtype=Name,name=provisioning_policy_name,json=provisioningPolicyName,proto3" json:"provisioning_policy_name,omitempty"`
	DeviceName             *device.Name              `protobuf:"bytes,3,opt,customtype=Name,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
}

func (m *ProvisionHardwareResponse_ProvisioningResponse) Reset() {
	*m = ProvisionHardwareResponse_ProvisioningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProvisionHardwareResponse_ProvisioningResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProvisionHardwareResponse_ProvisioningResponse) ProtoMessage() {}

func (m *ProvisionHardwareResponse_ProvisioningResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProvisionHardwareResponse_ProvisioningResponse) GotenMessage() {}

// Deprecated, Use ProvisionHardwareResponse_ProvisioningResponse.ProtoReflect.Descriptor instead.
func (*ProvisionHardwareResponse_ProvisioningResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDescGZIP(), []int{1, 0}
}

func (m *ProvisionHardwareResponse_ProvisioningResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProvisionHardwareResponse_ProvisioningResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProvisionHardwareResponse_ProvisioningResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProvisionHardwareResponse_ProvisioningResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProvisionHardwareResponse_ProvisioningResponse) GetServiceAccount() *api.ServiceAccount {
	if m != nil {
		return m.ServiceAccount
	}
	return nil
}

func (m *ProvisionHardwareResponse_ProvisioningResponse) GetProvisioningPolicyName() *provisioning_policy.Name {
	if m != nil {
		return m.ProvisioningPolicyName
	}
	return nil
}

func (m *ProvisionHardwareResponse_ProvisioningResponse) GetDeviceName() *device.Name {
	if m != nil {
		return m.DeviceName
	}
	return nil
}

func (m *ProvisionHardwareResponse_ProvisioningResponse) SetServiceAccount(fv *api.ServiceAccount) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceAccount", "ProvisionHardwareResponse_ProvisioningResponse"))
	}
	m.ServiceAccount = fv
}

func (m *ProvisionHardwareResponse_ProvisioningResponse) SetProvisioningPolicyName(fv *provisioning_policy.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProvisioningPolicyName", "ProvisionHardwareResponse_ProvisioningResponse"))
	}
	m.ProvisioningPolicyName = fv
}

func (m *ProvisionHardwareResponse_ProvisioningResponse) SetDeviceName(fv *device.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceName", "ProvisionHardwareResponse_ProvisioningResponse"))
	}
	m.DeviceName = fv
}

var edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto preflect.FileDescriptor

var edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x7a, 0x74, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbb, 0x03, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x13,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x53, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x9b, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x54, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21, 0x16, 0x0a, 0x14, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x16, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a,
	0x0a, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xc8, 0x03,
	0x0a, 0x19, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x75, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a,
	0xdf, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x18, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda,
	0x21, 0x16, 0x0a, 0x14, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x42, 0xa1, 0x01, 0xe8, 0xde, 0x21, 0x00, 0x0a,
	0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x1f, 0x5a, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x61, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x7a, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x3b, 0x7a,
	0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDescOnce sync.Once
	edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDescData = edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDesc
)

func edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDescGZIP() []byte {
	edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDescOnce.Do(func() {
		edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDescData)
	})
	return edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDescData
}

var edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_goTypes = []interface{}{
	(*ProvisionHardwareRequest)(nil),                       // 0: ntt.devices.v1.ProvisionHardwareRequest
	(*ProvisionHardwareResponse)(nil),                      // 1: ntt.devices.v1.ProvisionHardwareResponse
	(*ProvisionHardwareRequest_ProvisioningTarget)(nil),    // 2: ntt.devices.v1.ProvisionHardwareRequest.ProvisioningTarget
	(*ProvisionHardwareResponse_ProvisioningResponse)(nil), // 3: ntt.devices.v1.ProvisionHardwareResponse.ProvisioningResponse
	(*api.DeviceIdentity)(nil),                             // 4: ntt.api.DeviceIdentity
	(*api.IdentityChallengeResponse)(nil),                  // 5: ntt.api.IdentityChallengeResponse
	(*api.IdentityChallenge)(nil),                          // 6: ntt.api.IdentityChallenge
	(*api.ServiceAccount)(nil),                             // 7: ntt.api.ServiceAccount
}
var edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_depIdxs = []int32{
	2, // 0: ntt.devices.v1.ProvisionHardwareRequest.provisioning_target:type_name -> ntt.devices.v1.ProvisionHardwareRequest.ProvisioningTarget
	4, // 1: ntt.devices.v1.ProvisionHardwareRequest.identify:type_name -> ntt.api.DeviceIdentity
	5, // 2: ntt.devices.v1.ProvisionHardwareRequest.challenge_response:type_name -> ntt.api.IdentityChallengeResponse
	6, // 3: ntt.devices.v1.ProvisionHardwareResponse.identity_challenge:type_name -> ntt.api.IdentityChallenge
	3, // 4: ntt.devices.v1.ProvisionHardwareResponse.provisioning_response:type_name -> ntt.devices.v1.ProvisionHardwareResponse.ProvisioningResponse
	7, // 5: ntt.devices.v1.ProvisionHardwareResponse.ProvisioningResponse.service_account:type_name -> ntt.api.ServiceAccount
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_init() }
func edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_init() {
	if edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionHardwareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionHardwareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionHardwareRequest_ProvisioningTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionHardwareResponse_ProvisioningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ProvisionHardwareRequest_ProvisioningTarget_)(nil),
		(*ProvisionHardwareRequest_Identify)(nil),
		(*ProvisionHardwareRequest_ChallengeResponse)(nil),
	}
	edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ProvisionHardwareResponse_IdentityChallenge)(nil),
		(*ProvisionHardwareResponse_ProvisioningResponse_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_goTypes,
		DependencyIndexes: edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_depIdxs,
		MessageInfos:      edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_msgTypes,
	}.Build()
	edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto = out.File
	edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_rawDesc = nil
	edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_goTypes = nil
	edgelq_devices_proto_v1_ztp_provision_hardware_custom_proto_depIdxs = nil
}
