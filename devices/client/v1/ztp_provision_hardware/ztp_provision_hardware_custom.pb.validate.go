// Code generated by protoc-gen-goten-validate
// File: edgelq/devices/proto/v1/ztp_provision_hardware_custom.proto
// DO NOT EDIT!!!

package ztp_provision_hardware_client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1/provisioning_policy"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &api.DeviceIdentity{}
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &provisioning_policy.ProvisioningPolicy{}
)

func (obj *ProvisionHardwareRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Msg.(type) {
	case *ProvisionHardwareRequest_ProvisioningTarget_:
		if subobj, ok := interface{}(opt.ProvisioningTarget).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProvisionHardwareRequest", "provisioningTarget", opt.ProvisioningTarget, "nested object validation failed", err)
			}
		}
	case *ProvisionHardwareRequest_Identify:
		if subobj, ok := interface{}(opt.Identify).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProvisionHardwareRequest", "identify", opt.Identify, "nested object validation failed", err)
			}
		}
	case *ProvisionHardwareRequest_ChallengeResponse:
		if subobj, ok := interface{}(opt.ChallengeResponse).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProvisionHardwareRequest", "challengeResponse", opt.ChallengeResponse, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ProvisionHardwareRequest_ProvisioningTarget) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ProvisionHardwareResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	switch opt := obj.Msg.(type) {
	case *ProvisionHardwareResponse_IdentityChallenge:
		if subobj, ok := interface{}(opt.IdentityChallenge).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProvisionHardwareResponse", "identityChallenge", opt.IdentityChallenge, "nested object validation failed", err)
			}
		}
	case *ProvisionHardwareResponse_ProvisioningResponse_:
		if subobj, ok := interface{}(opt.ProvisioningResponse).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ProvisionHardwareResponse", "provisioningResponse", opt.ProvisioningResponse, "nested object validation failed", err)
			}
		}
	default:
		_ = opt
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ProvisionHardwareResponse_ProvisioningResponse) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.ServiceAccount).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ProvisioningResponse", "serviceAccount", obj.ServiceAccount, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
