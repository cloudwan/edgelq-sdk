// Code generated by protoc-gen-goten-client
// API: ProvisioningPolicyService
// DO NOT EDIT!!!

package provisioning_policy_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1/provisioning_policy"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProvisioningPolicyServiceClient is the client API for ProvisioningPolicyService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProvisioningPolicyServiceClient interface {
	GetProvisioningPolicy(ctx context.Context, in *GetProvisioningPolicyRequest, opts ...grpc.CallOption) (*provisioning_policy.ProvisioningPolicy, error)
	BatchGetProvisioningPolicies(ctx context.Context, in *BatchGetProvisioningPoliciesRequest, opts ...grpc.CallOption) (*BatchGetProvisioningPoliciesResponse, error)
	ListProvisioningPolicies(ctx context.Context, in *ListProvisioningPoliciesRequest, opts ...grpc.CallOption) (*ListProvisioningPoliciesResponse, error)
	WatchProvisioningPolicy(ctx context.Context, in *WatchProvisioningPolicyRequest, opts ...grpc.CallOption) (WatchProvisioningPolicyClientStream, error)
	WatchProvisioningPolicies(ctx context.Context, in *WatchProvisioningPoliciesRequest, opts ...grpc.CallOption) (WatchProvisioningPoliciesClientStream, error)
	CreateProvisioningPolicy(ctx context.Context, in *CreateProvisioningPolicyRequest, opts ...grpc.CallOption) (*provisioning_policy.ProvisioningPolicy, error)
	UpdateProvisioningPolicy(ctx context.Context, in *UpdateProvisioningPolicyRequest, opts ...grpc.CallOption) (*provisioning_policy.ProvisioningPolicy, error)
	DeleteProvisioningPolicy(ctx context.Context, in *DeleteProvisioningPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProvisionServiceAccountToProvisioningPolicy(ctx context.Context, in *ProvisionServiceAccountToProvisioningPolicyRequest, opts ...grpc.CallOption) (*ProvisionServiceAccountToProvisioningPolicyResponse, error)
	RemoveServiceAccountFromProvisioningPolicy(ctx context.Context, in *RemoveServiceAccountFromProvisioningPolicyRequest, opts ...grpc.CallOption) (*RemoveServiceAccountFromProvisioningPolicyResponse, error)
	ProvisionDeviceViaPolicy(ctx context.Context, in *ProvisionDeviceViaPolicyRequest, opts ...grpc.CallOption) (*ProvisionDeviceViaPolicyResponse, error)
	RequestProvisioningApproval(ctx context.Context, in *RequestProvisioningApprovalRequest, opts ...grpc.CallOption) (*RequestProvisioningApprovalResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewProvisioningPolicyServiceClient(cc grpc.ClientConnInterface) ProvisioningPolicyServiceClient {
	return &client{cc}
}

func (c *client) GetProvisioningPolicy(ctx context.Context, in *GetProvisioningPolicyRequest, opts ...grpc.CallOption) (*provisioning_policy.ProvisioningPolicy, error) {
	out := new(provisioning_policy.ProvisioningPolicy)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.ProvisioningPolicyService/GetProvisioningPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetProvisioningPolicies(ctx context.Context, in *BatchGetProvisioningPoliciesRequest, opts ...grpc.CallOption) (*BatchGetProvisioningPoliciesResponse, error) {
	out := new(BatchGetProvisioningPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.ProvisioningPolicyService/BatchGetProvisioningPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListProvisioningPolicies(ctx context.Context, in *ListProvisioningPoliciesRequest, opts ...grpc.CallOption) (*ListProvisioningPoliciesResponse, error) {
	out := new(ListProvisioningPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.ProvisioningPolicyService/ListProvisioningPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchProvisioningPolicy(ctx context.Context, in *WatchProvisioningPolicyRequest, opts ...grpc.CallOption) (WatchProvisioningPolicyClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProvisioningPolicy",
			ServerStreams: true,
		},
		"/ntt.devices.v1.ProvisioningPolicyService/WatchProvisioningPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProvisioningPolicyWatchProvisioningPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProvisioningPolicyClientStream interface {
	Recv() (*WatchProvisioningPolicyResponse, error)
	grpc.ClientStream
}

type watchProvisioningPolicyWatchProvisioningPolicyClient struct {
	grpc.ClientStream
}

func (x *watchProvisioningPolicyWatchProvisioningPolicyClient) Recv() (*WatchProvisioningPolicyResponse, error) {
	m := new(WatchProvisioningPolicyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchProvisioningPolicies(ctx context.Context, in *WatchProvisioningPoliciesRequest, opts ...grpc.CallOption) (WatchProvisioningPoliciesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchProvisioningPolicies",
			ServerStreams: true,
		},
		"/ntt.devices.v1.ProvisioningPolicyService/WatchProvisioningPolicies", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchProvisioningPoliciesWatchProvisioningPoliciesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchProvisioningPoliciesClientStream interface {
	Recv() (*WatchProvisioningPoliciesResponse, error)
	grpc.ClientStream
}

type watchProvisioningPoliciesWatchProvisioningPoliciesClient struct {
	grpc.ClientStream
}

func (x *watchProvisioningPoliciesWatchProvisioningPoliciesClient) Recv() (*WatchProvisioningPoliciesResponse, error) {
	m := new(WatchProvisioningPoliciesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateProvisioningPolicy(ctx context.Context, in *CreateProvisioningPolicyRequest, opts ...grpc.CallOption) (*provisioning_policy.ProvisioningPolicy, error) {
	out := new(provisioning_policy.ProvisioningPolicy)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.ProvisioningPolicyService/CreateProvisioningPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateProvisioningPolicy(ctx context.Context, in *UpdateProvisioningPolicyRequest, opts ...grpc.CallOption) (*provisioning_policy.ProvisioningPolicy, error) {
	out := new(provisioning_policy.ProvisioningPolicy)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.ProvisioningPolicyService/UpdateProvisioningPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteProvisioningPolicy(ctx context.Context, in *DeleteProvisioningPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.ProvisioningPolicyService/DeleteProvisioningPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ProvisionServiceAccountToProvisioningPolicy(ctx context.Context, in *ProvisionServiceAccountToProvisioningPolicyRequest, opts ...grpc.CallOption) (*ProvisionServiceAccountToProvisioningPolicyResponse, error) {
	out := new(ProvisionServiceAccountToProvisioningPolicyResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.ProvisioningPolicyService/ProvisionServiceAccountToProvisioningPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) RemoveServiceAccountFromProvisioningPolicy(ctx context.Context, in *RemoveServiceAccountFromProvisioningPolicyRequest, opts ...grpc.CallOption) (*RemoveServiceAccountFromProvisioningPolicyResponse, error) {
	out := new(RemoveServiceAccountFromProvisioningPolicyResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.ProvisioningPolicyService/RemoveServiceAccountFromProvisioningPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ProvisionDeviceViaPolicy(ctx context.Context, in *ProvisionDeviceViaPolicyRequest, opts ...grpc.CallOption) (*ProvisionDeviceViaPolicyResponse, error) {
	out := new(ProvisionDeviceViaPolicyResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.ProvisioningPolicyService/ProvisionDeviceViaPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) RequestProvisioningApproval(ctx context.Context, in *RequestProvisioningApprovalRequest, opts ...grpc.CallOption) (*RequestProvisioningApprovalResponse, error) {
	out := new(RequestProvisioningApprovalResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.ProvisioningPolicyService/RequestProvisioningApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
