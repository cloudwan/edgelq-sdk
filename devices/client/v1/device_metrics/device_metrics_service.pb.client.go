// Code generated by protoc-gen-goten-client
// API: DeviceMetricsService
// DO NOT EDIT!!!

package device_metrics_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import ()

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var ()

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceMetricsServiceClient is the client API for DeviceMetricsService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceMetricsServiceClient interface {
	ReportDeviceMetrics(ctx context.Context, opts ...grpc.CallOption) (ReportDeviceMetricsClientStream, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewDeviceMetricsServiceClient(cc grpc.ClientConnInterface) DeviceMetricsServiceClient {
	return &client{cc}
}

func (c *client) ReportDeviceMetrics(ctx context.Context, opts ...grpc.CallOption) (ReportDeviceMetricsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "ReportDeviceMetrics",
			ServerStreams: true,
			ClientStreams: true,
		},
		"/ntt.devices.v1.DeviceMetricsService/ReportDeviceMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportDeviceMetricsReportDeviceMetricsClient{stream}
	return x, nil
}

type ReportDeviceMetricsClientStream interface {
	Send(*ReportDeviceMetricsRequest) error
	Recv() (*ReportDeviceMetricsResponse, error)
	grpc.ClientStream
}

type reportDeviceMetricsReportDeviceMetricsClient struct {
	grpc.ClientStream
}

func (x *reportDeviceMetricsReportDeviceMetricsClient) Send(m *ReportDeviceMetricsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reportDeviceMetricsReportDeviceMetricsClient) Recv() (*ReportDeviceMetricsResponse, error) {
	m := new(ReportDeviceMetricsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}
