// Code generated by protoc-gen-goten-go
// File: edgelq/devices/proto/v1/device_metrics_custom.proto
// DO NOT EDIT!!!

package device_metrics_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &timestamppb.Timestamp{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MobileNetworkType int32

const (
	MobileNetworkType_FiveGNR MobileNetworkType = 0
	MobileNetworkType_LTE     MobileNetworkType = 1
	MobileNetworkType_UMTS    MobileNetworkType = 2
)

var (
	MobileNetworkType_name = map[int32]string{
		0: "FiveGNR",
		1: "LTE",
		2: "UMTS",
	}

	MobileNetworkType_value = map[string]int32{
		"FiveGNR": 0,
		"LTE":     1,
		"UMTS":    2,
	}
)

func (x MobileNetworkType) Enum() *MobileNetworkType {
	p := new(MobileNetworkType)
	*p = x
	return p
}

func (x MobileNetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (MobileNetworkType) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_enumTypes[0].Descriptor()
}

func (MobileNetworkType) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1_device_metrics_custom_proto_enumTypes[0]
}

func (x MobileNetworkType) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use MobileNetworkType.ProtoReflect.Descriptor instead.
func (MobileNetworkType) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{0}
}

// A request message of the ReportDeviceMetrics method.
type ReportDeviceMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// only required in first message for streaming
	DeviceName                      *device.Name                     `protobuf:"bytes,1,opt,customtype=Name,name=device_name,json=deviceName,proto3" json:"device_name,omitempty" firestore:"deviceName"`
	RegionId                        string                           `protobuf:"bytes,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty" firestore:"regionId"`
	DeviceMetrics                   *DeviceMetrics                   `protobuf:"bytes,3,opt,name=device_metrics,json=deviceMetrics,proto3" json:"device_metrics,omitempty" firestore:"deviceMetrics"`
	DeviceMetricsNoFloat            *DeviceMetricsNoFloat            `protobuf:"bytes,4,opt,name=device_metrics_no_float,json=deviceMetricsNoFloat,proto3" json:"device_metrics_no_float,omitempty" firestore:"deviceMetricsNoFloat"`
	DeviceMetricsTimeSeriesDataType *DeviceMetricsTimeSeriesDataType `protobuf:"bytes,5,opt,name=device_metrics_time_series_data_type,json=deviceMetricsTimeSeriesDataType,proto3" json:"device_metrics_time_series_data_type,omitempty" firestore:"deviceMetricsTimeSeriesDataType"`
	Dummy                           float64                          `protobuf:"fixed64,20,opt,name=dummy,proto3" json:"dummy,omitempty" firestore:"dummy"`
	DummyUint64                     uint64                           `protobuf:"varint,21,opt,name=dummy_uint64,json=dummyUint64,proto3" json:"dummy_uint64,omitempty" firestore:"dummyUint64"`
	DummyInt64                      int64                            `protobuf:"varint,22,opt,name=dummy_int64,json=dummyInt64,proto3" json:"dummy_int64,omitempty" firestore:"dummyInt64"`
	DummyInt32                      int32                            `protobuf:"varint,23,opt,name=dummy_int32,json=dummyInt32,proto3" json:"dummy_int32,omitempty" firestore:"dummyInt32"`
	DummyUint32                     uint32                           `protobuf:"varint,24,opt,name=dummy_uint32,json=dummyUint32,proto3" json:"dummy_uint32,omitempty" firestore:"dummyUint32"`
	EnumValue                       MobileNetworkType                `protobuf:"varint,25,opt,name=enum_value,json=enumValue,proto3,enum=ntt.devices.v1.MobileNetworkType" json:"enum_value,omitempty" firestore:"enumValue"`
	DummyFloat32                    float32                          `protobuf:"fixed32,26,opt,name=dummy_float32,json=dummyFloat32,proto3" json:"dummy_float32,omitempty" firestore:"dummyFloat32"`
	DummySint32                     int32                            `protobuf:"zigzag32,27,opt,name=dummy_sint32,json=dummySint32,proto3" json:"dummy_sint32,omitempty" firestore:"dummySint32"`
}

func (m *ReportDeviceMetricsRequest) Reset() {
	*m = ReportDeviceMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ReportDeviceMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ReportDeviceMetricsRequest) ProtoMessage() {}

func (m *ReportDeviceMetricsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ReportDeviceMetricsRequest) GotenMessage() {}

// Deprecated, Use ReportDeviceMetricsRequest.ProtoReflect.Descriptor instead.
func (*ReportDeviceMetricsRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{0}
}

func (m *ReportDeviceMetricsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ReportDeviceMetricsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ReportDeviceMetricsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ReportDeviceMetricsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ReportDeviceMetricsRequest) GetDeviceName() *device.Name {
	if m != nil {
		return m.DeviceName
	}
	return nil
}

func (m *ReportDeviceMetricsRequest) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *ReportDeviceMetricsRequest) GetDeviceMetrics() *DeviceMetrics {
	if m != nil {
		return m.DeviceMetrics
	}
	return nil
}

func (m *ReportDeviceMetricsRequest) GetDeviceMetricsNoFloat() *DeviceMetricsNoFloat {
	if m != nil {
		return m.DeviceMetricsNoFloat
	}
	return nil
}

func (m *ReportDeviceMetricsRequest) GetDeviceMetricsTimeSeriesDataType() *DeviceMetricsTimeSeriesDataType {
	if m != nil {
		return m.DeviceMetricsTimeSeriesDataType
	}
	return nil
}

func (m *ReportDeviceMetricsRequest) GetDummy() float64 {
	if m != nil {
		return m.Dummy
	}
	return float64(0)
}

func (m *ReportDeviceMetricsRequest) GetDummyUint64() uint64 {
	if m != nil {
		return m.DummyUint64
	}
	return uint64(0)
}

func (m *ReportDeviceMetricsRequest) GetDummyInt64() int64 {
	if m != nil {
		return m.DummyInt64
	}
	return int64(0)
}

func (m *ReportDeviceMetricsRequest) GetDummyInt32() int32 {
	if m != nil {
		return m.DummyInt32
	}
	return int32(0)
}

func (m *ReportDeviceMetricsRequest) GetDummyUint32() uint32 {
	if m != nil {
		return m.DummyUint32
	}
	return uint32(0)
}

func (m *ReportDeviceMetricsRequest) GetEnumValue() MobileNetworkType {
	if m != nil {
		return m.EnumValue
	}
	return MobileNetworkType_FiveGNR
}

func (m *ReportDeviceMetricsRequest) GetDummyFloat32() float32 {
	if m != nil {
		return m.DummyFloat32
	}
	return float32(0)
}

func (m *ReportDeviceMetricsRequest) GetDummySint32() int32 {
	if m != nil {
		return m.DummySint32
	}
	return int32(0)
}

func (m *ReportDeviceMetricsRequest) SetDeviceName(fv *device.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceName", "ReportDeviceMetricsRequest"))
	}
	m.DeviceName = fv
}

func (m *ReportDeviceMetricsRequest) SetRegionId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionId", "ReportDeviceMetricsRequest"))
	}
	m.RegionId = fv
}

func (m *ReportDeviceMetricsRequest) SetDeviceMetrics(fv *DeviceMetrics) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceMetrics", "ReportDeviceMetricsRequest"))
	}
	m.DeviceMetrics = fv
}

func (m *ReportDeviceMetricsRequest) SetDeviceMetricsNoFloat(fv *DeviceMetricsNoFloat) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceMetricsNoFloat", "ReportDeviceMetricsRequest"))
	}
	m.DeviceMetricsNoFloat = fv
}

func (m *ReportDeviceMetricsRequest) SetDeviceMetricsTimeSeriesDataType(fv *DeviceMetricsTimeSeriesDataType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceMetricsTimeSeriesDataType", "ReportDeviceMetricsRequest"))
	}
	m.DeviceMetricsTimeSeriesDataType = fv
}

func (m *ReportDeviceMetricsRequest) SetDummy(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dummy", "ReportDeviceMetricsRequest"))
	}
	m.Dummy = fv
}

func (m *ReportDeviceMetricsRequest) SetDummyUint64(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DummyUint64", "ReportDeviceMetricsRequest"))
	}
	m.DummyUint64 = fv
}

func (m *ReportDeviceMetricsRequest) SetDummyInt64(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DummyInt64", "ReportDeviceMetricsRequest"))
	}
	m.DummyInt64 = fv
}

func (m *ReportDeviceMetricsRequest) SetDummyInt32(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DummyInt32", "ReportDeviceMetricsRequest"))
	}
	m.DummyInt32 = fv
}

func (m *ReportDeviceMetricsRequest) SetDummyUint32(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DummyUint32", "ReportDeviceMetricsRequest"))
	}
	m.DummyUint32 = fv
}

func (m *ReportDeviceMetricsRequest) SetEnumValue(fv MobileNetworkType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnumValue", "ReportDeviceMetricsRequest"))
	}
	m.EnumValue = fv
}

func (m *ReportDeviceMetricsRequest) SetDummyFloat32(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DummyFloat32", "ReportDeviceMetricsRequest"))
	}
	m.DummyFloat32 = fv
}

func (m *ReportDeviceMetricsRequest) SetDummySint32(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DummySint32", "ReportDeviceMetricsRequest"))
	}
	m.DummySint32 = fv
}

type DeviceMetrics struct {
	state                    protoimpl.MessageState
	sizeCache                protoimpl.SizeCache
	unknownFields            protoimpl.UnknownFields
	Uptime                   uint64                        `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty" firestore:"uptime"`
	MemoryUsageBytes         uint64                        `protobuf:"varint,2,opt,name=memory_usage_bytes,json=memoryUsageBytes,proto3" json:"memory_usage_bytes,omitempty" firestore:"memoryUsageBytes"`
	MemoryUtilizationPercent float32                       `protobuf:"fixed32,3,opt,name=memory_utilization_percent,json=memoryUtilizationPercent,proto3" json:"memory_utilization_percent,omitempty" firestore:"memoryUtilizationPercent"`
	LoadAverage_1M           float32                       `protobuf:"fixed32,4,opt,name=load_average_1m,json=loadAverage1m,proto3" json:"load_average_1m,omitempty" firestore:"loadAverage1m"`
	MemoryStats              *DeviceMetrics_MemoryStats    `protobuf:"bytes,5,opt,name=memory_stats,json=memoryStats,proto3" json:"memory_stats,omitempty" firestore:"memoryStats"`
	CpuStats                 []*DeviceMetrics_CpuCoreStats `protobuf:"bytes,6,rep,name=cpu_stats,json=cpuStats,proto3" json:"cpu_stats,omitempty" firestore:"cpuStats"`
	// should match order in repeated DiskMetricsLabel
	DiskMetrics []*DeviceMetrics_DiskMetric `protobuf:"bytes,8,rep,name=disk_metrics,json=diskMetrics,proto3" json:"disk_metrics,omitempty" firestore:"diskMetrics"`
	// should match order in repeated DiskMetricsLabel
	HardwareMetrics []*DeviceMetrics_HardwareMetric `protobuf:"bytes,10,rep,name=hardware_metrics,json=hardwareMetrics,proto3" json:"hardware_metrics,omitempty" firestore:"hardwareMetrics"`
	// should match order in repeated ModemMetricLabel
	ModemMetrics     map[uint32]*DeviceMetrics_ModemMetric `protobuf:"bytes,12,rep,name=modem_metrics,json=modemMetrics,proto3" json:"modem_metrics,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"modemMetrics"`
	PerAntennaSignal *DeviceMetrics_PerAntennaSignal       `protobuf:"bytes,13,opt,name=per_antenna_signal,json=perAntennaSignal,proto3" json:"per_antenna_signal,omitempty" firestore:"perAntennaSignal"`
	// should match order in repeated ContainerMetricLabel
	ContainerMetrics map[uint32]*DeviceMetrics_ContainerMetric `protobuf:"bytes,15,rep,name=container_metrics,json=containerMetrics,proto3" json:"container_metrics,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"containerMetrics"`
	// should match order in repeated PodMetricLabel
	PodMetrics  []*DeviceMetrics_PodMetric `protobuf:"bytes,17,rep,name=pod_metrics,json=podMetrics,proto3" json:"pod_metrics,omitempty" firestore:"podMetrics"`
	MetricsTime *timestamppb.Timestamp     `protobuf:"bytes,18,opt,name=metrics_time,json=metricsTime,proto3" json:"metrics_time,omitempty" firestore:"metricsTime"`
	// optional - only required when something changes or in first time the metric
	// is sent
	DiskLabels []*DeviceMetrics_DiskMetricsLabel `protobuf:"bytes,7,rep,name=disk_labels,json=diskLabels,proto3" json:"disk_labels,omitempty" firestore:"diskLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	HardwareMetricsLabels []*DeviceMetrics_HardwareMetricsLabel `protobuf:"bytes,9,rep,name=hardware_metrics_labels,json=hardwareMetricsLabels,proto3" json:"hardware_metrics_labels,omitempty" firestore:"hardwareMetricsLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	ModemMetricsLabels []*DeviceMetrics_ModemMetricLabel `protobuf:"bytes,11,rep,name=modem_metrics_labels,json=modemMetricsLabels,proto3" json:"modem_metrics_labels,omitempty" firestore:"modemMetricsLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	ContainerMetricsLabels []*DeviceMetrics_ContainerMetricLabel `protobuf:"bytes,14,rep,name=container_metrics_labels,json=containerMetricsLabels,proto3" json:"container_metrics_labels,omitempty" firestore:"containerMetricsLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	PodMetricsLabels []*DeviceMetrics_PodMetricLabel `protobuf:"bytes,16,rep,name=pod_metrics_labels,json=podMetricsLabels,proto3" json:"pod_metrics_labels,omitempty" firestore:"podMetricsLabels"`
}

func (m *DeviceMetrics) Reset() {
	*m = DeviceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics) ProtoMessage() {}

func (m *DeviceMetrics) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics) GotenMessage() {}

// Deprecated, Use DeviceMetrics.ProtoReflect.Descriptor instead.
func (*DeviceMetrics) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{1}
}

func (m *DeviceMetrics) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return uint64(0)
}

func (m *DeviceMetrics) GetMemoryUsageBytes() uint64 {
	if m != nil {
		return m.MemoryUsageBytes
	}
	return uint64(0)
}

func (m *DeviceMetrics) GetMemoryUtilizationPercent() float32 {
	if m != nil {
		return m.MemoryUtilizationPercent
	}
	return float32(0)
}

func (m *DeviceMetrics) GetLoadAverage_1M() float32 {
	if m != nil {
		return m.LoadAverage_1M
	}
	return float32(0)
}

func (m *DeviceMetrics) GetMemoryStats() *DeviceMetrics_MemoryStats {
	if m != nil {
		return m.MemoryStats
	}
	return nil
}

func (m *DeviceMetrics) GetCpuStats() []*DeviceMetrics_CpuCoreStats {
	if m != nil {
		return m.CpuStats
	}
	return nil
}

func (m *DeviceMetrics) GetDiskMetrics() []*DeviceMetrics_DiskMetric {
	if m != nil {
		return m.DiskMetrics
	}
	return nil
}

func (m *DeviceMetrics) GetHardwareMetrics() []*DeviceMetrics_HardwareMetric {
	if m != nil {
		return m.HardwareMetrics
	}
	return nil
}

func (m *DeviceMetrics) GetModemMetrics() map[uint32]*DeviceMetrics_ModemMetric {
	if m != nil {
		return m.ModemMetrics
	}
	return nil
}

func (m *DeviceMetrics) GetPerAntennaSignal() *DeviceMetrics_PerAntennaSignal {
	if m != nil {
		return m.PerAntennaSignal
	}
	return nil
}

func (m *DeviceMetrics) GetContainerMetrics() map[uint32]*DeviceMetrics_ContainerMetric {
	if m != nil {
		return m.ContainerMetrics
	}
	return nil
}

func (m *DeviceMetrics) GetPodMetrics() []*DeviceMetrics_PodMetric {
	if m != nil {
		return m.PodMetrics
	}
	return nil
}

func (m *DeviceMetrics) GetMetricsTime() *timestamppb.Timestamp {
	if m != nil {
		return m.MetricsTime
	}
	return nil
}

func (m *DeviceMetrics) GetDiskLabels() []*DeviceMetrics_DiskMetricsLabel {
	if m != nil {
		return m.DiskLabels
	}
	return nil
}

func (m *DeviceMetrics) GetHardwareMetricsLabels() []*DeviceMetrics_HardwareMetricsLabel {
	if m != nil {
		return m.HardwareMetricsLabels
	}
	return nil
}

func (m *DeviceMetrics) GetModemMetricsLabels() []*DeviceMetrics_ModemMetricLabel {
	if m != nil {
		return m.ModemMetricsLabels
	}
	return nil
}

func (m *DeviceMetrics) GetContainerMetricsLabels() []*DeviceMetrics_ContainerMetricLabel {
	if m != nil {
		return m.ContainerMetricsLabels
	}
	return nil
}

func (m *DeviceMetrics) GetPodMetricsLabels() []*DeviceMetrics_PodMetricLabel {
	if m != nil {
		return m.PodMetricsLabels
	}
	return nil
}

func (m *DeviceMetrics) SetUptime(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Uptime", "DeviceMetrics"))
	}
	m.Uptime = fv
}

func (m *DeviceMetrics) SetMemoryUsageBytes(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUsageBytes", "DeviceMetrics"))
	}
	m.MemoryUsageBytes = fv
}

func (m *DeviceMetrics) SetMemoryUtilizationPercent(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUtilizationPercent", "DeviceMetrics"))
	}
	m.MemoryUtilizationPercent = fv
}

func (m *DeviceMetrics) SetLoadAverage_1M(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LoadAverage_1M", "DeviceMetrics"))
	}
	m.LoadAverage_1M = fv
}

func (m *DeviceMetrics) SetMemoryStats(fv *DeviceMetrics_MemoryStats) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryStats", "DeviceMetrics"))
	}
	m.MemoryStats = fv
}

func (m *DeviceMetrics) SetCpuStats(fv []*DeviceMetrics_CpuCoreStats) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CpuStats", "DeviceMetrics"))
	}
	m.CpuStats = fv
}

func (m *DeviceMetrics) SetDiskMetrics(fv []*DeviceMetrics_DiskMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskMetrics", "DeviceMetrics"))
	}
	m.DiskMetrics = fv
}

func (m *DeviceMetrics) SetHardwareMetrics(fv []*DeviceMetrics_HardwareMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HardwareMetrics", "DeviceMetrics"))
	}
	m.HardwareMetrics = fv
}

func (m *DeviceMetrics) SetModemMetrics(fv map[uint32]*DeviceMetrics_ModemMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ModemMetrics", "DeviceMetrics"))
	}
	m.ModemMetrics = fv
}

func (m *DeviceMetrics) SetPerAntennaSignal(fv *DeviceMetrics_PerAntennaSignal) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PerAntennaSignal", "DeviceMetrics"))
	}
	m.PerAntennaSignal = fv
}

func (m *DeviceMetrics) SetContainerMetrics(fv map[uint32]*DeviceMetrics_ContainerMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerMetrics", "DeviceMetrics"))
	}
	m.ContainerMetrics = fv
}

func (m *DeviceMetrics) SetPodMetrics(fv []*DeviceMetrics_PodMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodMetrics", "DeviceMetrics"))
	}
	m.PodMetrics = fv
}

func (m *DeviceMetrics) SetMetricsTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricsTime", "DeviceMetrics"))
	}
	m.MetricsTime = fv
}

func (m *DeviceMetrics) SetDiskLabels(fv []*DeviceMetrics_DiskMetricsLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskLabels", "DeviceMetrics"))
	}
	m.DiskLabels = fv
}

func (m *DeviceMetrics) SetHardwareMetricsLabels(fv []*DeviceMetrics_HardwareMetricsLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HardwareMetricsLabels", "DeviceMetrics"))
	}
	m.HardwareMetricsLabels = fv
}

func (m *DeviceMetrics) SetModemMetricsLabels(fv []*DeviceMetrics_ModemMetricLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ModemMetricsLabels", "DeviceMetrics"))
	}
	m.ModemMetricsLabels = fv
}

func (m *DeviceMetrics) SetContainerMetricsLabels(fv []*DeviceMetrics_ContainerMetricLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerMetricsLabels", "DeviceMetrics"))
	}
	m.ContainerMetricsLabels = fv
}

func (m *DeviceMetrics) SetPodMetricsLabels(fv []*DeviceMetrics_PodMetricLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodMetricsLabels", "DeviceMetrics"))
	}
	m.PodMetricsLabels = fv
}

type DeviceMetricsTimeSeriesDataType struct {
	state                    protoimpl.MessageState
	sizeCache                protoimpl.SizeCache
	unknownFields            protoimpl.UnknownFields
	Uptime                   int64                                           `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty" firestore:"uptime"`
	MemoryUsageBytes         int64                                           `protobuf:"varint,2,opt,name=memory_usage_bytes,json=memoryUsageBytes,proto3" json:"memory_usage_bytes,omitempty" firestore:"memoryUsageBytes"`
	MemoryUtilizationPercent float64                                         `protobuf:"fixed64,3,opt,name=memory_utilization_percent,json=memoryUtilizationPercent,proto3" json:"memory_utilization_percent,omitempty" firestore:"memoryUtilizationPercent"`
	LoadAverage_1M           float64                                         `protobuf:"fixed64,4,opt,name=load_average_1m,json=loadAverage1m,proto3" json:"load_average_1m,omitempty" firestore:"loadAverage1m"`
	MemoryStats              *DeviceMetricsTimeSeriesDataType_MemoryStats    `protobuf:"bytes,5,opt,name=memory_stats,json=memoryStats,proto3" json:"memory_stats,omitempty" firestore:"memoryStats"`
	CpuStats                 []*DeviceMetricsTimeSeriesDataType_CpuCoreStats `protobuf:"bytes,6,rep,name=cpu_stats,json=cpuStats,proto3" json:"cpu_stats,omitempty" firestore:"cpuStats"`
	// should match order in repeated DiskMetricsLabel
	DiskMetrics []*DeviceMetricsTimeSeriesDataType_DiskMetric `protobuf:"bytes,8,rep,name=disk_metrics,json=diskMetrics,proto3" json:"disk_metrics,omitempty" firestore:"diskMetrics"`
	// should match order in repeated DiskMetricsLabel
	HardwareMetrics []*DeviceMetricsTimeSeriesDataType_HardwareMetric `protobuf:"bytes,10,rep,name=hardware_metrics,json=hardwareMetrics,proto3" json:"hardware_metrics,omitempty" firestore:"hardwareMetrics"`
	// should match order in repeated ModemMetricLabel
	ModemMetrics     map[uint32]*DeviceMetricsTimeSeriesDataType_ModemMetric `protobuf:"bytes,12,rep,name=modem_metrics,json=modemMetrics,proto3" json:"modem_metrics,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"modemMetrics"`
	PerAntennaSignal *DeviceMetricsTimeSeriesDataType_PerAntennaSignal       `protobuf:"bytes,13,opt,name=per_antenna_signal,json=perAntennaSignal,proto3" json:"per_antenna_signal,omitempty" firestore:"perAntennaSignal"`
	// should match order in repeated ContainerMetricLabel
	ContainerMetrics map[uint32]*DeviceMetricsTimeSeriesDataType_ContainerMetric `protobuf:"bytes,15,rep,name=container_metrics,json=containerMetrics,proto3" json:"container_metrics,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"containerMetrics"`
	// should match order in repeated PodMetricLabel
	PodMetrics  []*DeviceMetricsTimeSeriesDataType_PodMetric `protobuf:"bytes,17,rep,name=pod_metrics,json=podMetrics,proto3" json:"pod_metrics,omitempty" firestore:"podMetrics"`
	MetricsTime *timestamppb.Timestamp                       `protobuf:"bytes,18,opt,name=metrics_time,json=metricsTime,proto3" json:"metrics_time,omitempty" firestore:"metricsTime"`
	// optional - only required when something changes or in first time the metric
	// is sent
	DiskLabels []*DeviceMetricsTimeSeriesDataType_DiskMetricsLabel `protobuf:"bytes,7,rep,name=disk_labels,json=diskLabels,proto3" json:"disk_labels,omitempty" firestore:"diskLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	HardwareMetricsLabels []*DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel `protobuf:"bytes,9,rep,name=hardware_metrics_labels,json=hardwareMetricsLabels,proto3" json:"hardware_metrics_labels,omitempty" firestore:"hardwareMetricsLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	ModemMetricsLabels []*DeviceMetricsTimeSeriesDataType_ModemMetricLabel `protobuf:"bytes,11,rep,name=modem_metrics_labels,json=modemMetricsLabels,proto3" json:"modem_metrics_labels,omitempty" firestore:"modemMetricsLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	ContainerMetricsLabels []*DeviceMetricsTimeSeriesDataType_ContainerMetricLabel `protobuf:"bytes,14,rep,name=container_metrics_labels,json=containerMetricsLabels,proto3" json:"container_metrics_labels,omitempty" firestore:"containerMetricsLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	PodMetricsLabels []*DeviceMetricsTimeSeriesDataType_PodMetricLabel `protobuf:"bytes,16,rep,name=pod_metrics_labels,json=podMetricsLabels,proto3" json:"pod_metrics_labels,omitempty" firestore:"podMetricsLabels"`
}

func (m *DeviceMetricsTimeSeriesDataType) Reset() {
	*m = DeviceMetricsTimeSeriesDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsTimeSeriesDataType) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsTimeSeriesDataType) ProtoMessage() {}

func (m *DeviceMetricsTimeSeriesDataType) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsTimeSeriesDataType) GotenMessage() {}

// Deprecated, Use DeviceMetricsTimeSeriesDataType.ProtoReflect.Descriptor instead.
func (*DeviceMetricsTimeSeriesDataType) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{2}
}

func (m *DeviceMetricsTimeSeriesDataType) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsTimeSeriesDataType) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsTimeSeriesDataType) GetUptime() int64 {
	if m != nil {
		return m.Uptime
	}
	return int64(0)
}

func (m *DeviceMetricsTimeSeriesDataType) GetMemoryUsageBytes() int64 {
	if m != nil {
		return m.MemoryUsageBytes
	}
	return int64(0)
}

func (m *DeviceMetricsTimeSeriesDataType) GetMemoryUtilizationPercent() float64 {
	if m != nil {
		return m.MemoryUtilizationPercent
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType) GetLoadAverage_1M() float64 {
	if m != nil {
		return m.LoadAverage_1M
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType) GetMemoryStats() *DeviceMetricsTimeSeriesDataType_MemoryStats {
	if m != nil {
		return m.MemoryStats
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType) GetCpuStats() []*DeviceMetricsTimeSeriesDataType_CpuCoreStats {
	if m != nil {
		return m.CpuStats
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType) GetDiskMetrics() []*DeviceMetricsTimeSeriesDataType_DiskMetric {
	if m != nil {
		return m.DiskMetrics
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType) GetHardwareMetrics() []*DeviceMetricsTimeSeriesDataType_HardwareMetric {
	if m != nil {
		return m.HardwareMetrics
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType) GetModemMetrics() map[uint32]*DeviceMetricsTimeSeriesDataType_ModemMetric {
	if m != nil {
		return m.ModemMetrics
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType) GetPerAntennaSignal() *DeviceMetricsTimeSeriesDataType_PerAntennaSignal {
	if m != nil {
		return m.PerAntennaSignal
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType) GetContainerMetrics() map[uint32]*DeviceMetricsTimeSeriesDataType_ContainerMetric {
	if m != nil {
		return m.ContainerMetrics
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType) GetPodMetrics() []*DeviceMetricsTimeSeriesDataType_PodMetric {
	if m != nil {
		return m.PodMetrics
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType) GetMetricsTime() *timestamppb.Timestamp {
	if m != nil {
		return m.MetricsTime
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType) GetDiskLabels() []*DeviceMetricsTimeSeriesDataType_DiskMetricsLabel {
	if m != nil {
		return m.DiskLabels
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType) GetHardwareMetricsLabels() []*DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel {
	if m != nil {
		return m.HardwareMetricsLabels
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType) GetModemMetricsLabels() []*DeviceMetricsTimeSeriesDataType_ModemMetricLabel {
	if m != nil {
		return m.ModemMetricsLabels
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType) GetContainerMetricsLabels() []*DeviceMetricsTimeSeriesDataType_ContainerMetricLabel {
	if m != nil {
		return m.ContainerMetricsLabels
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType) GetPodMetricsLabels() []*DeviceMetricsTimeSeriesDataType_PodMetricLabel {
	if m != nil {
		return m.PodMetricsLabels
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType) SetUptime(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Uptime", "DeviceMetricsTimeSeriesDataType"))
	}
	m.Uptime = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetMemoryUsageBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUsageBytes", "DeviceMetricsTimeSeriesDataType"))
	}
	m.MemoryUsageBytes = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetMemoryUtilizationPercent(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUtilizationPercent", "DeviceMetricsTimeSeriesDataType"))
	}
	m.MemoryUtilizationPercent = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetLoadAverage_1M(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LoadAverage_1M", "DeviceMetricsTimeSeriesDataType"))
	}
	m.LoadAverage_1M = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetMemoryStats(fv *DeviceMetricsTimeSeriesDataType_MemoryStats) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryStats", "DeviceMetricsTimeSeriesDataType"))
	}
	m.MemoryStats = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetCpuStats(fv []*DeviceMetricsTimeSeriesDataType_CpuCoreStats) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CpuStats", "DeviceMetricsTimeSeriesDataType"))
	}
	m.CpuStats = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetDiskMetrics(fv []*DeviceMetricsTimeSeriesDataType_DiskMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskMetrics", "DeviceMetricsTimeSeriesDataType"))
	}
	m.DiskMetrics = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetHardwareMetrics(fv []*DeviceMetricsTimeSeriesDataType_HardwareMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HardwareMetrics", "DeviceMetricsTimeSeriesDataType"))
	}
	m.HardwareMetrics = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetModemMetrics(fv map[uint32]*DeviceMetricsTimeSeriesDataType_ModemMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ModemMetrics", "DeviceMetricsTimeSeriesDataType"))
	}
	m.ModemMetrics = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetPerAntennaSignal(fv *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PerAntennaSignal", "DeviceMetricsTimeSeriesDataType"))
	}
	m.PerAntennaSignal = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetContainerMetrics(fv map[uint32]*DeviceMetricsTimeSeriesDataType_ContainerMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerMetrics", "DeviceMetricsTimeSeriesDataType"))
	}
	m.ContainerMetrics = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetPodMetrics(fv []*DeviceMetricsTimeSeriesDataType_PodMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodMetrics", "DeviceMetricsTimeSeriesDataType"))
	}
	m.PodMetrics = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetMetricsTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricsTime", "DeviceMetricsTimeSeriesDataType"))
	}
	m.MetricsTime = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetDiskLabels(fv []*DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskLabels", "DeviceMetricsTimeSeriesDataType"))
	}
	m.DiskLabels = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetHardwareMetricsLabels(fv []*DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HardwareMetricsLabels", "DeviceMetricsTimeSeriesDataType"))
	}
	m.HardwareMetricsLabels = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetModemMetricsLabels(fv []*DeviceMetricsTimeSeriesDataType_ModemMetricLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ModemMetricsLabels", "DeviceMetricsTimeSeriesDataType"))
	}
	m.ModemMetricsLabels = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetContainerMetricsLabels(fv []*DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerMetricsLabels", "DeviceMetricsTimeSeriesDataType"))
	}
	m.ContainerMetricsLabels = fv
}

func (m *DeviceMetricsTimeSeriesDataType) SetPodMetricsLabels(fv []*DeviceMetricsTimeSeriesDataType_PodMetricLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodMetricsLabels", "DeviceMetricsTimeSeriesDataType"))
	}
	m.PodMetricsLabels = fv
}

type DeviceMetricsNoFloat struct {
	state                    protoimpl.MessageState
	sizeCache                protoimpl.SizeCache
	unknownFields            protoimpl.UnknownFields
	Uptime                   uint64                               `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty" firestore:"uptime"`
	MemoryUsageBytes         uint64                               `protobuf:"varint,2,opt,name=memory_usage_bytes,json=memoryUsageBytes,proto3" json:"memory_usage_bytes,omitempty" firestore:"memoryUsageBytes"`
	MemoryUtilizationPercent uint64                               `protobuf:"varint,3,opt,name=memory_utilization_percent,json=memoryUtilizationPercent,proto3" json:"memory_utilization_percent,omitempty" firestore:"memoryUtilizationPercent"`
	LoadAverage_1M           float32                              `protobuf:"fixed32,4,opt,name=load_average_1m,json=loadAverage1m,proto3" json:"load_average_1m,omitempty" firestore:"loadAverage1m"`
	MemoryStats              *DeviceMetricsNoFloat_MemoryStats    `protobuf:"bytes,5,opt,name=memory_stats,json=memoryStats,proto3" json:"memory_stats,omitempty" firestore:"memoryStats"`
	CpuStats                 []*DeviceMetricsNoFloat_CpuCoreStats `protobuf:"bytes,6,rep,name=cpu_stats,json=cpuStats,proto3" json:"cpu_stats,omitempty" firestore:"cpuStats"`
	// should match order in repeated DiskMetricsLabel
	DiskMetrics []*DeviceMetricsNoFloat_DiskMetric `protobuf:"bytes,8,rep,name=disk_metrics,json=diskMetrics,proto3" json:"disk_metrics,omitempty" firestore:"diskMetrics"`
	// should match order in repeated DiskMetricsLabel
	HardwareMetrics []*DeviceMetricsNoFloat_HardwareMetric `protobuf:"bytes,10,rep,name=hardware_metrics,json=hardwareMetrics,proto3" json:"hardware_metrics,omitempty" firestore:"hardwareMetrics"`
	// should match order in repeated ModemMetricLabel
	ModemMetrics     map[uint32]*DeviceMetricsNoFloat_ModemMetric `protobuf:"bytes,12,rep,name=modem_metrics,json=modemMetrics,proto3" json:"modem_metrics,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"modemMetrics"`
	PerAntennaSignal *DeviceMetricsNoFloat_PerAntennaSignal       `protobuf:"bytes,13,opt,name=per_antenna_signal,json=perAntennaSignal,proto3" json:"per_antenna_signal,omitempty" firestore:"perAntennaSignal"`
	// should match order in repeated ContainerMetricLabel
	ContainerMetrics map[uint32]*DeviceMetricsNoFloat_ContainerMetric `protobuf:"bytes,15,rep,name=container_metrics,json=containerMetrics,proto3" json:"container_metrics,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"containerMetrics"`
	// should match order in repeated PodMetricLabel
	PodMetrics  []*DeviceMetricsNoFloat_PodMetric `protobuf:"bytes,17,rep,name=pod_metrics,json=podMetrics,proto3" json:"pod_metrics,omitempty" firestore:"podMetrics"`
	MetricsTime *timestamppb.Timestamp            `protobuf:"bytes,18,opt,name=metrics_time,json=metricsTime,proto3" json:"metrics_time,omitempty" firestore:"metricsTime"`
	// optional - only required when something changes or in first time the metric
	// is sent
	DiskLabels []*DeviceMetricsNoFloat_DiskMetricsLabel `protobuf:"bytes,7,rep,name=disk_labels,json=diskLabels,proto3" json:"disk_labels,omitempty" firestore:"diskLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	HardwareMetricsLabels []*DeviceMetricsNoFloat_HardwareMetricsLabel `protobuf:"bytes,9,rep,name=hardware_metrics_labels,json=hardwareMetricsLabels,proto3" json:"hardware_metrics_labels,omitempty" firestore:"hardwareMetricsLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	ModemMetricsLabels []*DeviceMetricsNoFloat_ModemMetricLabel `protobuf:"bytes,11,rep,name=modem_metrics_labels,json=modemMetricsLabels,proto3" json:"modem_metrics_labels,omitempty" firestore:"modemMetricsLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	ContainerMetricsLabels []*DeviceMetricsNoFloat_ContainerMetricLabel `protobuf:"bytes,14,rep,name=container_metrics_labels,json=containerMetricsLabels,proto3" json:"container_metrics_labels,omitempty" firestore:"containerMetricsLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	PodMetricsLabels []*DeviceMetricsNoFloat_PodMetricLabel `protobuf:"bytes,16,rep,name=pod_metrics_labels,json=podMetricsLabels,proto3" json:"pod_metrics_labels,omitempty" firestore:"podMetricsLabels"`
	Dummy            float64                                `protobuf:"fixed64,20,opt,name=dummy,proto3" json:"dummy,omitempty" firestore:"dummy"`
	DummyUint64      uint64                                 `protobuf:"varint,21,opt,name=dummy_uint64,json=dummyUint64,proto3" json:"dummy_uint64,omitempty" firestore:"dummyUint64"`
	DummyInt64       int64                                  `protobuf:"varint,22,opt,name=dummy_int64,json=dummyInt64,proto3" json:"dummy_int64,omitempty" firestore:"dummyInt64"`
}

func (m *DeviceMetricsNoFloat) Reset() {
	*m = DeviceMetricsNoFloat{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsNoFloat) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsNoFloat) ProtoMessage() {}

func (m *DeviceMetricsNoFloat) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsNoFloat) GotenMessage() {}

// Deprecated, Use DeviceMetricsNoFloat.ProtoReflect.Descriptor instead.
func (*DeviceMetricsNoFloat) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{3}
}

func (m *DeviceMetricsNoFloat) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsNoFloat) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsNoFloat) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsNoFloat) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsNoFloat) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat) GetMemoryUsageBytes() uint64 {
	if m != nil {
		return m.MemoryUsageBytes
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat) GetMemoryUtilizationPercent() uint64 {
	if m != nil {
		return m.MemoryUtilizationPercent
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat) GetLoadAverage_1M() float32 {
	if m != nil {
		return m.LoadAverage_1M
	}
	return float32(0)
}

func (m *DeviceMetricsNoFloat) GetMemoryStats() *DeviceMetricsNoFloat_MemoryStats {
	if m != nil {
		return m.MemoryStats
	}
	return nil
}

func (m *DeviceMetricsNoFloat) GetCpuStats() []*DeviceMetricsNoFloat_CpuCoreStats {
	if m != nil {
		return m.CpuStats
	}
	return nil
}

func (m *DeviceMetricsNoFloat) GetDiskMetrics() []*DeviceMetricsNoFloat_DiskMetric {
	if m != nil {
		return m.DiskMetrics
	}
	return nil
}

func (m *DeviceMetricsNoFloat) GetHardwareMetrics() []*DeviceMetricsNoFloat_HardwareMetric {
	if m != nil {
		return m.HardwareMetrics
	}
	return nil
}

func (m *DeviceMetricsNoFloat) GetModemMetrics() map[uint32]*DeviceMetricsNoFloat_ModemMetric {
	if m != nil {
		return m.ModemMetrics
	}
	return nil
}

func (m *DeviceMetricsNoFloat) GetPerAntennaSignal() *DeviceMetricsNoFloat_PerAntennaSignal {
	if m != nil {
		return m.PerAntennaSignal
	}
	return nil
}

func (m *DeviceMetricsNoFloat) GetContainerMetrics() map[uint32]*DeviceMetricsNoFloat_ContainerMetric {
	if m != nil {
		return m.ContainerMetrics
	}
	return nil
}

func (m *DeviceMetricsNoFloat) GetPodMetrics() []*DeviceMetricsNoFloat_PodMetric {
	if m != nil {
		return m.PodMetrics
	}
	return nil
}

func (m *DeviceMetricsNoFloat) GetMetricsTime() *timestamppb.Timestamp {
	if m != nil {
		return m.MetricsTime
	}
	return nil
}

func (m *DeviceMetricsNoFloat) GetDiskLabels() []*DeviceMetricsNoFloat_DiskMetricsLabel {
	if m != nil {
		return m.DiskLabels
	}
	return nil
}

func (m *DeviceMetricsNoFloat) GetHardwareMetricsLabels() []*DeviceMetricsNoFloat_HardwareMetricsLabel {
	if m != nil {
		return m.HardwareMetricsLabels
	}
	return nil
}

func (m *DeviceMetricsNoFloat) GetModemMetricsLabels() []*DeviceMetricsNoFloat_ModemMetricLabel {
	if m != nil {
		return m.ModemMetricsLabels
	}
	return nil
}

func (m *DeviceMetricsNoFloat) GetContainerMetricsLabels() []*DeviceMetricsNoFloat_ContainerMetricLabel {
	if m != nil {
		return m.ContainerMetricsLabels
	}
	return nil
}

func (m *DeviceMetricsNoFloat) GetPodMetricsLabels() []*DeviceMetricsNoFloat_PodMetricLabel {
	if m != nil {
		return m.PodMetricsLabels
	}
	return nil
}

func (m *DeviceMetricsNoFloat) GetDummy() float64 {
	if m != nil {
		return m.Dummy
	}
	return float64(0)
}

func (m *DeviceMetricsNoFloat) GetDummyUint64() uint64 {
	if m != nil {
		return m.DummyUint64
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat) GetDummyInt64() int64 {
	if m != nil {
		return m.DummyInt64
	}
	return int64(0)
}

func (m *DeviceMetricsNoFloat) SetUptime(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Uptime", "DeviceMetricsNoFloat"))
	}
	m.Uptime = fv
}

func (m *DeviceMetricsNoFloat) SetMemoryUsageBytes(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUsageBytes", "DeviceMetricsNoFloat"))
	}
	m.MemoryUsageBytes = fv
}

func (m *DeviceMetricsNoFloat) SetMemoryUtilizationPercent(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUtilizationPercent", "DeviceMetricsNoFloat"))
	}
	m.MemoryUtilizationPercent = fv
}

func (m *DeviceMetricsNoFloat) SetLoadAverage_1M(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LoadAverage_1M", "DeviceMetricsNoFloat"))
	}
	m.LoadAverage_1M = fv
}

func (m *DeviceMetricsNoFloat) SetMemoryStats(fv *DeviceMetricsNoFloat_MemoryStats) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryStats", "DeviceMetricsNoFloat"))
	}
	m.MemoryStats = fv
}

func (m *DeviceMetricsNoFloat) SetCpuStats(fv []*DeviceMetricsNoFloat_CpuCoreStats) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CpuStats", "DeviceMetricsNoFloat"))
	}
	m.CpuStats = fv
}

func (m *DeviceMetricsNoFloat) SetDiskMetrics(fv []*DeviceMetricsNoFloat_DiskMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskMetrics", "DeviceMetricsNoFloat"))
	}
	m.DiskMetrics = fv
}

func (m *DeviceMetricsNoFloat) SetHardwareMetrics(fv []*DeviceMetricsNoFloat_HardwareMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HardwareMetrics", "DeviceMetricsNoFloat"))
	}
	m.HardwareMetrics = fv
}

func (m *DeviceMetricsNoFloat) SetModemMetrics(fv map[uint32]*DeviceMetricsNoFloat_ModemMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ModemMetrics", "DeviceMetricsNoFloat"))
	}
	m.ModemMetrics = fv
}

func (m *DeviceMetricsNoFloat) SetPerAntennaSignal(fv *DeviceMetricsNoFloat_PerAntennaSignal) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PerAntennaSignal", "DeviceMetricsNoFloat"))
	}
	m.PerAntennaSignal = fv
}

func (m *DeviceMetricsNoFloat) SetContainerMetrics(fv map[uint32]*DeviceMetricsNoFloat_ContainerMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerMetrics", "DeviceMetricsNoFloat"))
	}
	m.ContainerMetrics = fv
}

func (m *DeviceMetricsNoFloat) SetPodMetrics(fv []*DeviceMetricsNoFloat_PodMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodMetrics", "DeviceMetricsNoFloat"))
	}
	m.PodMetrics = fv
}

func (m *DeviceMetricsNoFloat) SetMetricsTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricsTime", "DeviceMetricsNoFloat"))
	}
	m.MetricsTime = fv
}

func (m *DeviceMetricsNoFloat) SetDiskLabels(fv []*DeviceMetricsNoFloat_DiskMetricsLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskLabels", "DeviceMetricsNoFloat"))
	}
	m.DiskLabels = fv
}

func (m *DeviceMetricsNoFloat) SetHardwareMetricsLabels(fv []*DeviceMetricsNoFloat_HardwareMetricsLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HardwareMetricsLabels", "DeviceMetricsNoFloat"))
	}
	m.HardwareMetricsLabels = fv
}

func (m *DeviceMetricsNoFloat) SetModemMetricsLabels(fv []*DeviceMetricsNoFloat_ModemMetricLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ModemMetricsLabels", "DeviceMetricsNoFloat"))
	}
	m.ModemMetricsLabels = fv
}

func (m *DeviceMetricsNoFloat) SetContainerMetricsLabels(fv []*DeviceMetricsNoFloat_ContainerMetricLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerMetricsLabels", "DeviceMetricsNoFloat"))
	}
	m.ContainerMetricsLabels = fv
}

func (m *DeviceMetricsNoFloat) SetPodMetricsLabels(fv []*DeviceMetricsNoFloat_PodMetricLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodMetricsLabels", "DeviceMetricsNoFloat"))
	}
	m.PodMetricsLabels = fv
}

func (m *DeviceMetricsNoFloat) SetDummy(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Dummy", "DeviceMetricsNoFloat"))
	}
	m.Dummy = fv
}

func (m *DeviceMetricsNoFloat) SetDummyUint64(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DummyUint64", "DeviceMetricsNoFloat"))
	}
	m.DummyUint64 = fv
}

func (m *DeviceMetricsNoFloat) SetDummyInt64(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DummyInt64", "DeviceMetricsNoFloat"))
	}
	m.DummyInt64 = fv
}

type ReportDeviceMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *ReportDeviceMetricsResponse) Reset() {
	*m = ReportDeviceMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ReportDeviceMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ReportDeviceMetricsResponse) ProtoMessage() {}

func (m *ReportDeviceMetricsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ReportDeviceMetricsResponse) GotenMessage() {}

// Deprecated, Use ReportDeviceMetricsResponse.ProtoReflect.Descriptor instead.
func (*ReportDeviceMetricsResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{4}
}

func (m *ReportDeviceMetricsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ReportDeviceMetricsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ReportDeviceMetricsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ReportDeviceMetricsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type DeviceMetrics_MemoryStats struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	BufferedMemory  uint64 `protobuf:"varint,1,opt,name=buffered_memory,json=bufferedMemory,proto3" json:"buffered_memory,omitempty" firestore:"bufferedMemory"`
	CachedMemory    uint64 `protobuf:"varint,2,opt,name=cached_memory,json=cachedMemory,proto3" json:"cached_memory,omitempty" firestore:"cachedMemory"`
	FreeMemory      uint64 `protobuf:"varint,3,opt,name=free_memory,json=freeMemory,proto3" json:"free_memory,omitempty" firestore:"freeMemory"`
	UsedMemory      uint64 `protobuf:"varint,4,opt,name=used_memory,json=usedMemory,proto3" json:"used_memory,omitempty" firestore:"usedMemory"`
	AvailableMemory uint64 `protobuf:"varint,5,opt,name=available_memory,json=availableMemory,proto3" json:"available_memory,omitempty" firestore:"availableMemory"`
	SharedMemory    uint64 `protobuf:"varint,6,opt,name=shared_memory,json=sharedMemory,proto3" json:"shared_memory,omitempty" firestore:"sharedMemory"`
}

func (m *DeviceMetrics_MemoryStats) Reset() {
	*m = DeviceMetrics_MemoryStats{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_MemoryStats) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_MemoryStats) ProtoMessage() {}

func (m *DeviceMetrics_MemoryStats) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_MemoryStats) GotenMessage() {}

// Deprecated, Use DeviceMetrics_MemoryStats.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_MemoryStats) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{1, 0}
}

func (m *DeviceMetrics_MemoryStats) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_MemoryStats) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_MemoryStats) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_MemoryStats) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_MemoryStats) GetBufferedMemory() uint64 {
	if m != nil {
		return m.BufferedMemory
	}
	return uint64(0)
}

func (m *DeviceMetrics_MemoryStats) GetCachedMemory() uint64 {
	if m != nil {
		return m.CachedMemory
	}
	return uint64(0)
}

func (m *DeviceMetrics_MemoryStats) GetFreeMemory() uint64 {
	if m != nil {
		return m.FreeMemory
	}
	return uint64(0)
}

func (m *DeviceMetrics_MemoryStats) GetUsedMemory() uint64 {
	if m != nil {
		return m.UsedMemory
	}
	return uint64(0)
}

func (m *DeviceMetrics_MemoryStats) GetAvailableMemory() uint64 {
	if m != nil {
		return m.AvailableMemory
	}
	return uint64(0)
}

func (m *DeviceMetrics_MemoryStats) GetSharedMemory() uint64 {
	if m != nil {
		return m.SharedMemory
	}
	return uint64(0)
}

func (m *DeviceMetrics_MemoryStats) SetBufferedMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BufferedMemory", "DeviceMetrics_MemoryStats"))
	}
	m.BufferedMemory = fv
}

func (m *DeviceMetrics_MemoryStats) SetCachedMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CachedMemory", "DeviceMetrics_MemoryStats"))
	}
	m.CachedMemory = fv
}

func (m *DeviceMetrics_MemoryStats) SetFreeMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FreeMemory", "DeviceMetrics_MemoryStats"))
	}
	m.FreeMemory = fv
}

func (m *DeviceMetrics_MemoryStats) SetUsedMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UsedMemory", "DeviceMetrics_MemoryStats"))
	}
	m.UsedMemory = fv
}

func (m *DeviceMetrics_MemoryStats) SetAvailableMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AvailableMemory", "DeviceMetrics_MemoryStats"))
	}
	m.AvailableMemory = fv
}

func (m *DeviceMetrics_MemoryStats) SetSharedMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SharedMemory", "DeviceMetrics_MemoryStats"))
	}
	m.SharedMemory = fv
}

type DeviceMetrics_CpuCoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	User          float32 `protobuf:"fixed32,1,opt,name=user,proto3" json:"user,omitempty" firestore:"user"`
	System        float32 `protobuf:"fixed32,2,opt,name=system,proto3" json:"system,omitempty" firestore:"system"`
	Idle          float32 `protobuf:"fixed32,3,opt,name=idle,proto3" json:"idle,omitempty" firestore:"idle"`
	Nice          float32 `protobuf:"fixed32,4,opt,name=nice,proto3" json:"nice,omitempty" firestore:"nice"`
	Iowait        float32 `protobuf:"fixed32,5,opt,name=iowait,proto3" json:"iowait,omitempty" firestore:"iowait"`
	Irq           float32 `protobuf:"fixed32,6,opt,name=irq,proto3" json:"irq,omitempty" firestore:"irq"`
	Softirq       float32 `protobuf:"fixed32,7,opt,name=softirq,proto3" json:"softirq,omitempty" firestore:"softirq"`
	Steal         float32 `protobuf:"fixed32,8,opt,name=steal,proto3" json:"steal,omitempty" firestore:"steal"`
}

func (m *DeviceMetrics_CpuCoreStats) Reset() {
	*m = DeviceMetrics_CpuCoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_CpuCoreStats) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_CpuCoreStats) ProtoMessage() {}

func (m *DeviceMetrics_CpuCoreStats) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_CpuCoreStats) GotenMessage() {}

// Deprecated, Use DeviceMetrics_CpuCoreStats.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_CpuCoreStats) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{1, 1}
}

func (m *DeviceMetrics_CpuCoreStats) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_CpuCoreStats) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_CpuCoreStats) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_CpuCoreStats) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_CpuCoreStats) GetUser() float32 {
	if m != nil {
		return m.User
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) GetSystem() float32 {
	if m != nil {
		return m.System
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) GetIdle() float32 {
	if m != nil {
		return m.Idle
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) GetNice() float32 {
	if m != nil {
		return m.Nice
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) GetIowait() float32 {
	if m != nil {
		return m.Iowait
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) GetIrq() float32 {
	if m != nil {
		return m.Irq
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) GetSoftirq() float32 {
	if m != nil {
		return m.Softirq
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) GetSteal() float32 {
	if m != nil {
		return m.Steal
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) SetUser(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "User", "DeviceMetrics_CpuCoreStats"))
	}
	m.User = fv
}

func (m *DeviceMetrics_CpuCoreStats) SetSystem(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "System", "DeviceMetrics_CpuCoreStats"))
	}
	m.System = fv
}

func (m *DeviceMetrics_CpuCoreStats) SetIdle(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Idle", "DeviceMetrics_CpuCoreStats"))
	}
	m.Idle = fv
}

func (m *DeviceMetrics_CpuCoreStats) SetNice(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nice", "DeviceMetrics_CpuCoreStats"))
	}
	m.Nice = fv
}

func (m *DeviceMetrics_CpuCoreStats) SetIowait(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Iowait", "DeviceMetrics_CpuCoreStats"))
	}
	m.Iowait = fv
}

func (m *DeviceMetrics_CpuCoreStats) SetIrq(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Irq", "DeviceMetrics_CpuCoreStats"))
	}
	m.Irq = fv
}

func (m *DeviceMetrics_CpuCoreStats) SetSoftirq(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Softirq", "DeviceMetrics_CpuCoreStats"))
	}
	m.Softirq = fv
}

func (m *DeviceMetrics_CpuCoreStats) SetSteal(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Steal", "DeviceMetrics_CpuCoreStats"))
	}
	m.Steal = fv
}

type DeviceMetrics_DiskMetricsLabel struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	MountPoint     string `protobuf:"bytes,1,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty" firestore:"mountPoint"`
	PartitionLabel string `protobuf:"bytes,2,opt,name=partition_label,json=partitionLabel,proto3" json:"partition_label,omitempty" firestore:"partitionLabel"`
	Partition      string `protobuf:"bytes,3,opt,name=partition,proto3" json:"partition,omitempty" firestore:"partition"`
}

func (m *DeviceMetrics_DiskMetricsLabel) Reset() {
	*m = DeviceMetrics_DiskMetricsLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_DiskMetricsLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_DiskMetricsLabel) ProtoMessage() {}

func (m *DeviceMetrics_DiskMetricsLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_DiskMetricsLabel) GotenMessage() {}

// Deprecated, Use DeviceMetrics_DiskMetricsLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_DiskMetricsLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{1, 2}
}

func (m *DeviceMetrics_DiskMetricsLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_DiskMetricsLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_DiskMetricsLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_DiskMetricsLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_DiskMetricsLabel) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

func (m *DeviceMetrics_DiskMetricsLabel) GetPartitionLabel() string {
	if m != nil {
		return m.PartitionLabel
	}
	return ""
}

func (m *DeviceMetrics_DiskMetricsLabel) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *DeviceMetrics_DiskMetricsLabel) SetMountPoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MountPoint", "DeviceMetrics_DiskMetricsLabel"))
	}
	m.MountPoint = fv
}

func (m *DeviceMetrics_DiskMetricsLabel) SetPartitionLabel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PartitionLabel", "DeviceMetrics_DiskMetricsLabel"))
	}
	m.PartitionLabel = fv
}

func (m *DeviceMetrics_DiskMetricsLabel) SetPartition(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Partition", "DeviceMetrics_DiskMetricsLabel"))
	}
	m.Partition = fv
}

type DeviceMetrics_HardwareMetricsLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	SensorTag     string `protobuf:"bytes,1,opt,name=sensor_tag,json=sensorTag,proto3" json:"sensor_tag,omitempty" firestore:"sensorTag"`
	ChipTag       string `protobuf:"bytes,2,opt,name=chip_tag,json=chipTag,proto3" json:"chip_tag,omitempty" firestore:"chipTag"`
}

func (m *DeviceMetrics_HardwareMetricsLabel) Reset() {
	*m = DeviceMetrics_HardwareMetricsLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_HardwareMetricsLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_HardwareMetricsLabel) ProtoMessage() {}

func (m *DeviceMetrics_HardwareMetricsLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_HardwareMetricsLabel) GotenMessage() {}

// Deprecated, Use DeviceMetrics_HardwareMetricsLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_HardwareMetricsLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{1, 3}
}

func (m *DeviceMetrics_HardwareMetricsLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_HardwareMetricsLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_HardwareMetricsLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_HardwareMetricsLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_HardwareMetricsLabel) GetSensorTag() string {
	if m != nil {
		return m.SensorTag
	}
	return ""
}

func (m *DeviceMetrics_HardwareMetricsLabel) GetChipTag() string {
	if m != nil {
		return m.ChipTag
	}
	return ""
}

func (m *DeviceMetrics_HardwareMetricsLabel) SetSensorTag(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SensorTag", "DeviceMetrics_HardwareMetricsLabel"))
	}
	m.SensorTag = fv
}

func (m *DeviceMetrics_HardwareMetricsLabel) SetChipTag(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChipTag", "DeviceMetrics_HardwareMetricsLabel"))
	}
	m.ChipTag = fv
}

type DeviceMetrics_DiskMetric struct {
	state                  protoimpl.MessageState
	sizeCache              protoimpl.SizeCache
	unknownFields          protoimpl.UnknownFields
	DiskUsageBytes         uint64  `protobuf:"varint,1,opt,name=disk_usage_bytes,json=diskUsageBytes,proto3" json:"disk_usage_bytes,omitempty" firestore:"diskUsageBytes"`
	DiskUtilizationPercent float32 `protobuf:"fixed32,2,opt,name=disk_utilization_percent,json=diskUtilizationPercent,proto3" json:"disk_utilization_percent,omitempty" firestore:"diskUtilizationPercent"`
}

func (m *DeviceMetrics_DiskMetric) Reset() {
	*m = DeviceMetrics_DiskMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_DiskMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_DiskMetric) ProtoMessage() {}

func (m *DeviceMetrics_DiskMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_DiskMetric) GotenMessage() {}

// Deprecated, Use DeviceMetrics_DiskMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_DiskMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{1, 4}
}

func (m *DeviceMetrics_DiskMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_DiskMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_DiskMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_DiskMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_DiskMetric) GetDiskUsageBytes() uint64 {
	if m != nil {
		return m.DiskUsageBytes
	}
	return uint64(0)
}

func (m *DeviceMetrics_DiskMetric) GetDiskUtilizationPercent() float32 {
	if m != nil {
		return m.DiskUtilizationPercent
	}
	return float32(0)
}

func (m *DeviceMetrics_DiskMetric) SetDiskUsageBytes(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskUsageBytes", "DeviceMetrics_DiskMetric"))
	}
	m.DiskUsageBytes = fv
}

func (m *DeviceMetrics_DiskMetric) SetDiskUtilizationPercent(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskUtilizationPercent", "DeviceMetrics_DiskMetric"))
	}
	m.DiskUtilizationPercent = fv
}

type DeviceMetrics_HardwareMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	FanSpeed      uint64  `protobuf:"varint,1,opt,name=fan_speed,json=fanSpeed,proto3" json:"fan_speed,omitempty" firestore:"fanSpeed"`
	Temperature   int64   `protobuf:"varint,2,opt,name=temperature,proto3" json:"temperature,omitempty" firestore:"temperature"`
	Voltage       float32 `protobuf:"fixed32,3,opt,name=voltage,proto3" json:"voltage,omitempty" firestore:"voltage"`
	Power         float32 `protobuf:"fixed32,4,opt,name=power,proto3" json:"power,omitempty" firestore:"power"`
}

func (m *DeviceMetrics_HardwareMetric) Reset() {
	*m = DeviceMetrics_HardwareMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_HardwareMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_HardwareMetric) ProtoMessage() {}

func (m *DeviceMetrics_HardwareMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_HardwareMetric) GotenMessage() {}

// Deprecated, Use DeviceMetrics_HardwareMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_HardwareMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{1, 5}
}

func (m *DeviceMetrics_HardwareMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_HardwareMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_HardwareMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_HardwareMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_HardwareMetric) GetFanSpeed() uint64 {
	if m != nil {
		return m.FanSpeed
	}
	return uint64(0)
}

func (m *DeviceMetrics_HardwareMetric) GetTemperature() int64 {
	if m != nil {
		return m.Temperature
	}
	return int64(0)
}

func (m *DeviceMetrics_HardwareMetric) GetVoltage() float32 {
	if m != nil {
		return m.Voltage
	}
	return float32(0)
}

func (m *DeviceMetrics_HardwareMetric) GetPower() float32 {
	if m != nil {
		return m.Power
	}
	return float32(0)
}

func (m *DeviceMetrics_HardwareMetric) SetFanSpeed(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FanSpeed", "DeviceMetrics_HardwareMetric"))
	}
	m.FanSpeed = fv
}

func (m *DeviceMetrics_HardwareMetric) SetTemperature(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Temperature", "DeviceMetrics_HardwareMetric"))
	}
	m.Temperature = fv
}

func (m *DeviceMetrics_HardwareMetric) SetVoltage(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Voltage", "DeviceMetrics_HardwareMetric"))
	}
	m.Voltage = fv
}

func (m *DeviceMetrics_HardwareMetric) SetPower(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Power", "DeviceMetrics_HardwareMetric"))
	}
	m.Power = fv
}

type DeviceMetrics_ModemMetricLabel struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	CellType       MobileNetworkType `protobuf:"varint,1,opt,name=cell_type,json=cellType,proto3,enum=ntt.devices.v1.MobileNetworkType" json:"cell_type,omitempty" firestore:"cellType"`
	CellId         uint64            `protobuf:"varint,2,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty" firestore:"cellId"`
	PhysicalCellId uint64            `protobuf:"varint,3,opt,name=physical_cell_id,json=physicalCellId,proto3" json:"physical_cell_id,omitempty" firestore:"physicalCellId"`
	Tac            uint64            `protobuf:"varint,4,opt,name=tac,proto3" json:"tac,omitempty" firestore:"tac"`
	Earfcn         uint64            `protobuf:"varint,5,opt,name=earfcn,proto3" json:"earfcn,omitempty" firestore:"earfcn"`
}

func (m *DeviceMetrics_ModemMetricLabel) Reset() {
	*m = DeviceMetrics_ModemMetricLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_ModemMetricLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_ModemMetricLabel) ProtoMessage() {}

func (m *DeviceMetrics_ModemMetricLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_ModemMetricLabel) GotenMessage() {}

// Deprecated, Use DeviceMetrics_ModemMetricLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_ModemMetricLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{1, 6}
}

func (m *DeviceMetrics_ModemMetricLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_ModemMetricLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_ModemMetricLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_ModemMetricLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_ModemMetricLabel) GetCellType() MobileNetworkType {
	if m != nil {
		return m.CellType
	}
	return MobileNetworkType_FiveGNR
}

func (m *DeviceMetrics_ModemMetricLabel) GetCellId() uint64 {
	if m != nil {
		return m.CellId
	}
	return uint64(0)
}

func (m *DeviceMetrics_ModemMetricLabel) GetPhysicalCellId() uint64 {
	if m != nil {
		return m.PhysicalCellId
	}
	return uint64(0)
}

func (m *DeviceMetrics_ModemMetricLabel) GetTac() uint64 {
	if m != nil {
		return m.Tac
	}
	return uint64(0)
}

func (m *DeviceMetrics_ModemMetricLabel) GetEarfcn() uint64 {
	if m != nil {
		return m.Earfcn
	}
	return uint64(0)
}

func (m *DeviceMetrics_ModemMetricLabel) SetCellType(fv MobileNetworkType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CellType", "DeviceMetrics_ModemMetricLabel"))
	}
	m.CellType = fv
}

func (m *DeviceMetrics_ModemMetricLabel) SetCellId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CellId", "DeviceMetrics_ModemMetricLabel"))
	}
	m.CellId = fv
}

func (m *DeviceMetrics_ModemMetricLabel) SetPhysicalCellId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PhysicalCellId", "DeviceMetrics_ModemMetricLabel"))
	}
	m.PhysicalCellId = fv
}

func (m *DeviceMetrics_ModemMetricLabel) SetTac(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tac", "DeviceMetrics_ModemMetricLabel"))
	}
	m.Tac = fv
}

func (m *DeviceMetrics_ModemMetricLabel) SetEarfcn(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Earfcn", "DeviceMetrics_ModemMetricLabel"))
	}
	m.Earfcn = fv
}

type DeviceMetrics_ModemMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Rssi          int32   `protobuf:"zigzag32,1,opt,name=rssi,proto3" json:"rssi,omitempty" firestore:"rssi"`
	Rsrp          int32   `protobuf:"zigzag32,2,opt,name=rsrp,proto3" json:"rsrp,omitempty" firestore:"rsrp"`
	Rsrq          float32 `protobuf:"fixed32,3,opt,name=rsrq,proto3" json:"rsrq,omitempty" firestore:"rsrq"`
	Snr           float32 `protobuf:"fixed32,4,opt,name=snr,proto3" json:"snr,omitempty" firestore:"snr"`
}

func (m *DeviceMetrics_ModemMetric) Reset() {
	*m = DeviceMetrics_ModemMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_ModemMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_ModemMetric) ProtoMessage() {}

func (m *DeviceMetrics_ModemMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_ModemMetric) GotenMessage() {}

// Deprecated, Use DeviceMetrics_ModemMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_ModemMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{1, 7}
}

func (m *DeviceMetrics_ModemMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_ModemMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_ModemMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_ModemMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_ModemMetric) GetRssi() int32 {
	if m != nil {
		return m.Rssi
	}
	return int32(0)
}

func (m *DeviceMetrics_ModemMetric) GetRsrp() int32 {
	if m != nil {
		return m.Rsrp
	}
	return int32(0)
}

func (m *DeviceMetrics_ModemMetric) GetRsrq() float32 {
	if m != nil {
		return m.Rsrq
	}
	return float32(0)
}

func (m *DeviceMetrics_ModemMetric) GetSnr() float32 {
	if m != nil {
		return m.Snr
	}
	return float32(0)
}

func (m *DeviceMetrics_ModemMetric) SetRssi(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rssi", "DeviceMetrics_ModemMetric"))
	}
	m.Rssi = fv
}

func (m *DeviceMetrics_ModemMetric) SetRsrp(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rsrp", "DeviceMetrics_ModemMetric"))
	}
	m.Rsrp = fv
}

func (m *DeviceMetrics_ModemMetric) SetRsrq(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rsrq", "DeviceMetrics_ModemMetric"))
	}
	m.Rsrq = fv
}

func (m *DeviceMetrics_ModemMetric) SetSnr(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Snr", "DeviceMetrics_ModemMetric"))
	}
	m.Snr = fv
}

type DeviceMetrics_PerAntennaSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	FivegRsrps    []int32   `protobuf:"zigzag32,1,rep,packed,name=fiveg_rsrps,json=fivegRsrps,proto3" json:"fiveg_rsrps,omitempty" firestore:"fivegRsrps"`
	FivegRsrqs    []float32 `protobuf:"fixed32,2,rep,packed,name=fiveg_rsrqs,json=fivegRsrqs,proto3" json:"fiveg_rsrqs,omitempty" firestore:"fivegRsrqs"`
	LteRsrps      []int32   `protobuf:"zigzag32,3,rep,packed,name=lte_rsrps,json=lteRsrps,proto3" json:"lte_rsrps,omitempty" firestore:"lteRsrps"`
	LteRsrqs      []float32 `protobuf:"fixed32,4,rep,packed,name=lte_rsrqs,json=lteRsrqs,proto3" json:"lte_rsrqs,omitempty" firestore:"lteRsrqs"`
}

func (m *DeviceMetrics_PerAntennaSignal) Reset() {
	*m = DeviceMetrics_PerAntennaSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_PerAntennaSignal) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_PerAntennaSignal) ProtoMessage() {}

func (m *DeviceMetrics_PerAntennaSignal) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_PerAntennaSignal) GotenMessage() {}

// Deprecated, Use DeviceMetrics_PerAntennaSignal.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_PerAntennaSignal) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{1, 9}
}

func (m *DeviceMetrics_PerAntennaSignal) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_PerAntennaSignal) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_PerAntennaSignal) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_PerAntennaSignal) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_PerAntennaSignal) GetFivegRsrps() []int32 {
	if m != nil {
		return m.FivegRsrps
	}
	return nil
}

func (m *DeviceMetrics_PerAntennaSignal) GetFivegRsrqs() []float32 {
	if m != nil {
		return m.FivegRsrqs
	}
	return nil
}

func (m *DeviceMetrics_PerAntennaSignal) GetLteRsrps() []int32 {
	if m != nil {
		return m.LteRsrps
	}
	return nil
}

func (m *DeviceMetrics_PerAntennaSignal) GetLteRsrqs() []float32 {
	if m != nil {
		return m.LteRsrqs
	}
	return nil
}

func (m *DeviceMetrics_PerAntennaSignal) SetFivegRsrps(fv []int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FivegRsrps", "DeviceMetrics_PerAntennaSignal"))
	}
	m.FivegRsrps = fv
}

func (m *DeviceMetrics_PerAntennaSignal) SetFivegRsrqs(fv []float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FivegRsrqs", "DeviceMetrics_PerAntennaSignal"))
	}
	m.FivegRsrqs = fv
}

func (m *DeviceMetrics_PerAntennaSignal) SetLteRsrps(fv []int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LteRsrps", "DeviceMetrics_PerAntennaSignal"))
	}
	m.LteRsrps = fv
}

func (m *DeviceMetrics_PerAntennaSignal) SetLteRsrqs(fv []float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LteRsrqs", "DeviceMetrics_PerAntennaSignal"))
	}
	m.LteRsrqs = fv
}

type DeviceMetrics_ContainerMetricLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	PodId         string `protobuf:"bytes,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty" firestore:"podId"`
	ContainerId   string `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty" firestore:"containerId"`
}

func (m *DeviceMetrics_ContainerMetricLabel) Reset() {
	*m = DeviceMetrics_ContainerMetricLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_ContainerMetricLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_ContainerMetricLabel) ProtoMessage() {}

func (m *DeviceMetrics_ContainerMetricLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_ContainerMetricLabel) GotenMessage() {}

// Deprecated, Use DeviceMetrics_ContainerMetricLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_ContainerMetricLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{1, 10}
}

func (m *DeviceMetrics_ContainerMetricLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_ContainerMetricLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_ContainerMetricLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_ContainerMetricLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_ContainerMetricLabel) GetPodId() string {
	if m != nil {
		return m.PodId
	}
	return ""
}

func (m *DeviceMetrics_ContainerMetricLabel) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *DeviceMetrics_ContainerMetricLabel) SetPodId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodId", "DeviceMetrics_ContainerMetricLabel"))
	}
	m.PodId = fv
}

func (m *DeviceMetrics_ContainerMetricLabel) SetContainerId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerId", "DeviceMetrics_ContainerMetricLabel"))
	}
	m.ContainerId = fv
}

type DeviceMetrics_ContainerMetric struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	CpuUtilization    float32 `protobuf:"fixed32,1,opt,name=cpu_utilization,json=cpuUtilization,proto3" json:"cpu_utilization,omitempty" firestore:"cpuUtilization"`
	MemoryUtilization float32 `protobuf:"fixed32,2,opt,name=memory_utilization,json=memoryUtilization,proto3" json:"memory_utilization,omitempty" firestore:"memoryUtilization"`
	MemoryUsageBytes  uint64  `protobuf:"varint,3,opt,name=memory_usage_bytes,json=memoryUsageBytes,proto3" json:"memory_usage_bytes,omitempty" firestore:"memoryUsageBytes"`
}

func (m *DeviceMetrics_ContainerMetric) Reset() {
	*m = DeviceMetrics_ContainerMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_ContainerMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_ContainerMetric) ProtoMessage() {}

func (m *DeviceMetrics_ContainerMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_ContainerMetric) GotenMessage() {}

// Deprecated, Use DeviceMetrics_ContainerMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_ContainerMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{1, 11}
}

func (m *DeviceMetrics_ContainerMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_ContainerMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_ContainerMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_ContainerMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_ContainerMetric) GetCpuUtilization() float32 {
	if m != nil {
		return m.CpuUtilization
	}
	return float32(0)
}

func (m *DeviceMetrics_ContainerMetric) GetMemoryUtilization() float32 {
	if m != nil {
		return m.MemoryUtilization
	}
	return float32(0)
}

func (m *DeviceMetrics_ContainerMetric) GetMemoryUsageBytes() uint64 {
	if m != nil {
		return m.MemoryUsageBytes
	}
	return uint64(0)
}

func (m *DeviceMetrics_ContainerMetric) SetCpuUtilization(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CpuUtilization", "DeviceMetrics_ContainerMetric"))
	}
	m.CpuUtilization = fv
}

func (m *DeviceMetrics_ContainerMetric) SetMemoryUtilization(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUtilization", "DeviceMetrics_ContainerMetric"))
	}
	m.MemoryUtilization = fv
}

func (m *DeviceMetrics_ContainerMetric) SetMemoryUsageBytes(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUsageBytes", "DeviceMetrics_ContainerMetric"))
	}
	m.MemoryUsageBytes = fv
}

type DeviceMetrics_PodMetricLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	PodId         string `protobuf:"bytes,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty" firestore:"podId"`
}

func (m *DeviceMetrics_PodMetricLabel) Reset() {
	*m = DeviceMetrics_PodMetricLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_PodMetricLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_PodMetricLabel) ProtoMessage() {}

func (m *DeviceMetrics_PodMetricLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_PodMetricLabel) GotenMessage() {}

// Deprecated, Use DeviceMetrics_PodMetricLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_PodMetricLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{1, 13}
}

func (m *DeviceMetrics_PodMetricLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_PodMetricLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_PodMetricLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_PodMetricLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_PodMetricLabel) GetPodId() string {
	if m != nil {
		return m.PodId
	}
	return ""
}

func (m *DeviceMetrics_PodMetricLabel) SetPodId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodId", "DeviceMetrics_PodMetricLabel"))
	}
	m.PodId = fv
}

type DeviceMetrics_PodMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	PodStatus     uint64 `protobuf:"varint,1,opt,name=pod_status,json=podStatus,proto3" json:"pod_status,omitempty" firestore:"podStatus"`
	IsHealthy     bool   `protobuf:"varint,2,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty" firestore:"isHealthy"`
}

func (m *DeviceMetrics_PodMetric) Reset() {
	*m = DeviceMetrics_PodMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_PodMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_PodMetric) ProtoMessage() {}

func (m *DeviceMetrics_PodMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_PodMetric) GotenMessage() {}

// Deprecated, Use DeviceMetrics_PodMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_PodMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{1, 14}
}

func (m *DeviceMetrics_PodMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_PodMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_PodMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_PodMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_PodMetric) GetPodStatus() uint64 {
	if m != nil {
		return m.PodStatus
	}
	return uint64(0)
}

func (m *DeviceMetrics_PodMetric) GetIsHealthy() bool {
	if m != nil {
		return m.IsHealthy
	}
	return false
}

func (m *DeviceMetrics_PodMetric) SetPodStatus(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodStatus", "DeviceMetrics_PodMetric"))
	}
	m.PodStatus = fv
}

func (m *DeviceMetrics_PodMetric) SetIsHealthy(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHealthy", "DeviceMetrics_PodMetric"))
	}
	m.IsHealthy = fv
}

type DeviceMetricsTimeSeriesDataType_MemoryStats struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	BufferedMemory  int64 `protobuf:"varint,1,opt,name=buffered_memory,json=bufferedMemory,proto3" json:"buffered_memory,omitempty" firestore:"bufferedMemory"`
	CachedMemory    int64 `protobuf:"varint,2,opt,name=cached_memory,json=cachedMemory,proto3" json:"cached_memory,omitempty" firestore:"cachedMemory"`
	FreeMemory      int64 `protobuf:"varint,3,opt,name=free_memory,json=freeMemory,proto3" json:"free_memory,omitempty" firestore:"freeMemory"`
	UsedMemory      int64 `protobuf:"varint,4,opt,name=used_memory,json=usedMemory,proto3" json:"used_memory,omitempty" firestore:"usedMemory"`
	AvailableMemory int64 `protobuf:"varint,5,opt,name=available_memory,json=availableMemory,proto3" json:"available_memory,omitempty" firestore:"availableMemory"`
	SharedMemory    int64 `protobuf:"varint,6,opt,name=shared_memory,json=sharedMemory,proto3" json:"shared_memory,omitempty" firestore:"sharedMemory"`
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) Reset() {
	*m = DeviceMetricsTimeSeriesDataType_MemoryStats{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_MemoryStats) ProtoMessage() {}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_MemoryStats) GotenMessage() {}

// Deprecated, Use DeviceMetricsTimeSeriesDataType_MemoryStats.ProtoReflect.Descriptor instead.
func (*DeviceMetricsTimeSeriesDataType_MemoryStats) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{2, 0}
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) GetBufferedMemory() int64 {
	if m != nil {
		return m.BufferedMemory
	}
	return int64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) GetCachedMemory() int64 {
	if m != nil {
		return m.CachedMemory
	}
	return int64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) GetFreeMemory() int64 {
	if m != nil {
		return m.FreeMemory
	}
	return int64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) GetUsedMemory() int64 {
	if m != nil {
		return m.UsedMemory
	}
	return int64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) GetAvailableMemory() int64 {
	if m != nil {
		return m.AvailableMemory
	}
	return int64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) GetSharedMemory() int64 {
	if m != nil {
		return m.SharedMemory
	}
	return int64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) SetBufferedMemory(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BufferedMemory", "DeviceMetricsTimeSeriesDataType_MemoryStats"))
	}
	m.BufferedMemory = fv
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) SetCachedMemory(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CachedMemory", "DeviceMetricsTimeSeriesDataType_MemoryStats"))
	}
	m.CachedMemory = fv
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) SetFreeMemory(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FreeMemory", "DeviceMetricsTimeSeriesDataType_MemoryStats"))
	}
	m.FreeMemory = fv
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) SetUsedMemory(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UsedMemory", "DeviceMetricsTimeSeriesDataType_MemoryStats"))
	}
	m.UsedMemory = fv
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) SetAvailableMemory(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AvailableMemory", "DeviceMetricsTimeSeriesDataType_MemoryStats"))
	}
	m.AvailableMemory = fv
}

func (m *DeviceMetricsTimeSeriesDataType_MemoryStats) SetSharedMemory(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SharedMemory", "DeviceMetricsTimeSeriesDataType_MemoryStats"))
	}
	m.SharedMemory = fv
}

type DeviceMetricsTimeSeriesDataType_CpuCoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	User          float64 `protobuf:"fixed64,1,opt,name=user,proto3" json:"user,omitempty" firestore:"user"`
	System        float64 `protobuf:"fixed64,2,opt,name=system,proto3" json:"system,omitempty" firestore:"system"`
	Idle          float64 `protobuf:"fixed64,3,opt,name=idle,proto3" json:"idle,omitempty" firestore:"idle"`
	Nice          float64 `protobuf:"fixed64,4,opt,name=nice,proto3" json:"nice,omitempty" firestore:"nice"`
	Iowait        float64 `protobuf:"fixed64,5,opt,name=iowait,proto3" json:"iowait,omitempty" firestore:"iowait"`
	Irq           float64 `protobuf:"fixed64,6,opt,name=irq,proto3" json:"irq,omitempty" firestore:"irq"`
	Softirq       float64 `protobuf:"fixed64,7,opt,name=softirq,proto3" json:"softirq,omitempty" firestore:"softirq"`
	Steal         float64 `protobuf:"fixed64,8,opt,name=steal,proto3" json:"steal,omitempty" firestore:"steal"`
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) Reset() {
	*m = DeviceMetricsTimeSeriesDataType_CpuCoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_CpuCoreStats) ProtoMessage() {}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_CpuCoreStats) GotenMessage() {}

// Deprecated, Use DeviceMetricsTimeSeriesDataType_CpuCoreStats.ProtoReflect.Descriptor instead.
func (*DeviceMetricsTimeSeriesDataType_CpuCoreStats) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{2, 1}
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) GetUser() float64 {
	if m != nil {
		return m.User
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) GetSystem() float64 {
	if m != nil {
		return m.System
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) GetIdle() float64 {
	if m != nil {
		return m.Idle
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) GetNice() float64 {
	if m != nil {
		return m.Nice
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) GetIowait() float64 {
	if m != nil {
		return m.Iowait
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) GetIrq() float64 {
	if m != nil {
		return m.Irq
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) GetSoftirq() float64 {
	if m != nil {
		return m.Softirq
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) GetSteal() float64 {
	if m != nil {
		return m.Steal
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) SetUser(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "User", "DeviceMetricsTimeSeriesDataType_CpuCoreStats"))
	}
	m.User = fv
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) SetSystem(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "System", "DeviceMetricsTimeSeriesDataType_CpuCoreStats"))
	}
	m.System = fv
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) SetIdle(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Idle", "DeviceMetricsTimeSeriesDataType_CpuCoreStats"))
	}
	m.Idle = fv
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) SetNice(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nice", "DeviceMetricsTimeSeriesDataType_CpuCoreStats"))
	}
	m.Nice = fv
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) SetIowait(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Iowait", "DeviceMetricsTimeSeriesDataType_CpuCoreStats"))
	}
	m.Iowait = fv
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) SetIrq(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Irq", "DeviceMetricsTimeSeriesDataType_CpuCoreStats"))
	}
	m.Irq = fv
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) SetSoftirq(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Softirq", "DeviceMetricsTimeSeriesDataType_CpuCoreStats"))
	}
	m.Softirq = fv
}

func (m *DeviceMetricsTimeSeriesDataType_CpuCoreStats) SetSteal(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Steal", "DeviceMetricsTimeSeriesDataType_CpuCoreStats"))
	}
	m.Steal = fv
}

type DeviceMetricsTimeSeriesDataType_DiskMetricsLabel struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	MountPoint     string `protobuf:"bytes,1,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty" firestore:"mountPoint"`
	PartitionLabel string `protobuf:"bytes,2,opt,name=partition_label,json=partitionLabel,proto3" json:"partition_label,omitempty" firestore:"partitionLabel"`
	Partition      string `protobuf:"bytes,3,opt,name=partition,proto3" json:"partition,omitempty" firestore:"partition"`
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) Reset() {
	*m = DeviceMetricsTimeSeriesDataType_DiskMetricsLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) ProtoMessage() {}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) GotenMessage() {}

// Deprecated, Use DeviceMetricsTimeSeriesDataType_DiskMetricsLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{2, 2}
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) GetPartitionLabel() string {
	if m != nil {
		return m.PartitionLabel
	}
	return ""
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) SetMountPoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MountPoint", "DeviceMetricsTimeSeriesDataType_DiskMetricsLabel"))
	}
	m.MountPoint = fv
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) SetPartitionLabel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PartitionLabel", "DeviceMetricsTimeSeriesDataType_DiskMetricsLabel"))
	}
	m.PartitionLabel = fv
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetricsLabel) SetPartition(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Partition", "DeviceMetricsTimeSeriesDataType_DiskMetricsLabel"))
	}
	m.Partition = fv
}

type DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	SensorTag     string `protobuf:"bytes,1,opt,name=sensor_tag,json=sensorTag,proto3" json:"sensor_tag,omitempty" firestore:"sensorTag"`
	ChipTag       string `protobuf:"bytes,2,opt,name=chip_tag,json=chipTag,proto3" json:"chip_tag,omitempty" firestore:"chipTag"`
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) Reset() {
	*m = DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) ProtoMessage() {}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) GotenMessage() {}

// Deprecated, Use DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{2, 3}
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) GetSensorTag() string {
	if m != nil {
		return m.SensorTag
	}
	return ""
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) GetChipTag() string {
	if m != nil {
		return m.ChipTag
	}
	return ""
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) SetSensorTag(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SensorTag", "DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel"))
	}
	m.SensorTag = fv
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel) SetChipTag(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChipTag", "DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel"))
	}
	m.ChipTag = fv
}

type DeviceMetricsTimeSeriesDataType_DiskMetric struct {
	state                  protoimpl.MessageState
	sizeCache              protoimpl.SizeCache
	unknownFields          protoimpl.UnknownFields
	DiskUsageBytes         int64   `protobuf:"varint,1,opt,name=disk_usage_bytes,json=diskUsageBytes,proto3" json:"disk_usage_bytes,omitempty" firestore:"diskUsageBytes"`
	DiskUtilizationPercent float64 `protobuf:"fixed64,2,opt,name=disk_utilization_percent,json=diskUtilizationPercent,proto3" json:"disk_utilization_percent,omitempty" firestore:"diskUtilizationPercent"`
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetric) Reset() {
	*m = DeviceMetricsTimeSeriesDataType_DiskMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_DiskMetric) ProtoMessage() {}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_DiskMetric) GotenMessage() {}

// Deprecated, Use DeviceMetricsTimeSeriesDataType_DiskMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetricsTimeSeriesDataType_DiskMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{2, 4}
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetric) GetDiskUsageBytes() int64 {
	if m != nil {
		return m.DiskUsageBytes
	}
	return int64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetric) GetDiskUtilizationPercent() float64 {
	if m != nil {
		return m.DiskUtilizationPercent
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetric) SetDiskUsageBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskUsageBytes", "DeviceMetricsTimeSeriesDataType_DiskMetric"))
	}
	m.DiskUsageBytes = fv
}

func (m *DeviceMetricsTimeSeriesDataType_DiskMetric) SetDiskUtilizationPercent(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskUtilizationPercent", "DeviceMetricsTimeSeriesDataType_DiskMetric"))
	}
	m.DiskUtilizationPercent = fv
}

type DeviceMetricsTimeSeriesDataType_HardwareMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	FanSpeed      int64   `protobuf:"varint,1,opt,name=fan_speed,json=fanSpeed,proto3" json:"fan_speed,omitempty" firestore:"fanSpeed"`
	Temperature   float64 `protobuf:"fixed64,2,opt,name=temperature,proto3" json:"temperature,omitempty" firestore:"temperature"`
	Voltage       float64 `protobuf:"fixed64,3,opt,name=voltage,proto3" json:"voltage,omitempty" firestore:"voltage"`
	Power         float64 `protobuf:"fixed64,4,opt,name=power,proto3" json:"power,omitempty" firestore:"power"`
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) Reset() {
	*m = DeviceMetricsTimeSeriesDataType_HardwareMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_HardwareMetric) ProtoMessage() {}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_HardwareMetric) GotenMessage() {}

// Deprecated, Use DeviceMetricsTimeSeriesDataType_HardwareMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetricsTimeSeriesDataType_HardwareMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{2, 5}
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) GetFanSpeed() int64 {
	if m != nil {
		return m.FanSpeed
	}
	return int64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) GetVoltage() float64 {
	if m != nil {
		return m.Voltage
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) GetPower() float64 {
	if m != nil {
		return m.Power
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) SetFanSpeed(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FanSpeed", "DeviceMetricsTimeSeriesDataType_HardwareMetric"))
	}
	m.FanSpeed = fv
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) SetTemperature(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Temperature", "DeviceMetricsTimeSeriesDataType_HardwareMetric"))
	}
	m.Temperature = fv
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) SetVoltage(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Voltage", "DeviceMetricsTimeSeriesDataType_HardwareMetric"))
	}
	m.Voltage = fv
}

func (m *DeviceMetricsTimeSeriesDataType_HardwareMetric) SetPower(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Power", "DeviceMetricsTimeSeriesDataType_HardwareMetric"))
	}
	m.Power = fv
}

type DeviceMetricsTimeSeriesDataType_ModemMetricLabel struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	CellType       MobileNetworkType `protobuf:"varint,1,opt,name=cell_type,json=cellType,proto3,enum=ntt.devices.v1.MobileNetworkType" json:"cell_type,omitempty" firestore:"cellType"`
	CellId         uint64            `protobuf:"varint,2,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty" firestore:"cellId"`
	PhysicalCellId uint64            `protobuf:"varint,3,opt,name=physical_cell_id,json=physicalCellId,proto3" json:"physical_cell_id,omitempty" firestore:"physicalCellId"`
	Tac            uint64            `protobuf:"varint,4,opt,name=tac,proto3" json:"tac,omitempty" firestore:"tac"`
	Earfcn         uint64            `protobuf:"varint,5,opt,name=earfcn,proto3" json:"earfcn,omitempty" firestore:"earfcn"`
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) Reset() {
	*m = DeviceMetricsTimeSeriesDataType_ModemMetricLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_ModemMetricLabel) ProtoMessage() {}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_ModemMetricLabel) GotenMessage() {}

// Deprecated, Use DeviceMetricsTimeSeriesDataType_ModemMetricLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetricsTimeSeriesDataType_ModemMetricLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{2, 6}
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) GetCellType() MobileNetworkType {
	if m != nil {
		return m.CellType
	}
	return MobileNetworkType_FiveGNR
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) GetCellId() uint64 {
	if m != nil {
		return m.CellId
	}
	return uint64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) GetPhysicalCellId() uint64 {
	if m != nil {
		return m.PhysicalCellId
	}
	return uint64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) GetTac() uint64 {
	if m != nil {
		return m.Tac
	}
	return uint64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) GetEarfcn() uint64 {
	if m != nil {
		return m.Earfcn
	}
	return uint64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) SetCellType(fv MobileNetworkType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CellType", "DeviceMetricsTimeSeriesDataType_ModemMetricLabel"))
	}
	m.CellType = fv
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) SetCellId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CellId", "DeviceMetricsTimeSeriesDataType_ModemMetricLabel"))
	}
	m.CellId = fv
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) SetPhysicalCellId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PhysicalCellId", "DeviceMetricsTimeSeriesDataType_ModemMetricLabel"))
	}
	m.PhysicalCellId = fv
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) SetTac(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tac", "DeviceMetricsTimeSeriesDataType_ModemMetricLabel"))
	}
	m.Tac = fv
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetricLabel) SetEarfcn(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Earfcn", "DeviceMetricsTimeSeriesDataType_ModemMetricLabel"))
	}
	m.Earfcn = fv
}

type DeviceMetricsTimeSeriesDataType_ModemMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Rssi          float64 `protobuf:"fixed64,1,opt,name=rssi,proto3" json:"rssi,omitempty" firestore:"rssi"`
	Rsrp          float64 `protobuf:"fixed64,2,opt,name=rsrp,proto3" json:"rsrp,omitempty" firestore:"rsrp"`
	Rsrq          float64 `protobuf:"fixed64,3,opt,name=rsrq,proto3" json:"rsrq,omitempty" firestore:"rsrq"`
	Snr           float64 `protobuf:"fixed64,4,opt,name=snr,proto3" json:"snr,omitempty" firestore:"snr"`
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) Reset() {
	*m = DeviceMetricsTimeSeriesDataType_ModemMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_ModemMetric) ProtoMessage() {}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_ModemMetric) GotenMessage() {}

// Deprecated, Use DeviceMetricsTimeSeriesDataType_ModemMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetricsTimeSeriesDataType_ModemMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{2, 7}
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) GetRssi() float64 {
	if m != nil {
		return m.Rssi
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) GetRsrp() float64 {
	if m != nil {
		return m.Rsrp
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) GetRsrq() float64 {
	if m != nil {
		return m.Rsrq
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) GetSnr() float64 {
	if m != nil {
		return m.Snr
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) SetRssi(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rssi", "DeviceMetricsTimeSeriesDataType_ModemMetric"))
	}
	m.Rssi = fv
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) SetRsrp(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rsrp", "DeviceMetricsTimeSeriesDataType_ModemMetric"))
	}
	m.Rsrp = fv
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) SetRsrq(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rsrq", "DeviceMetricsTimeSeriesDataType_ModemMetric"))
	}
	m.Rsrq = fv
}

func (m *DeviceMetricsTimeSeriesDataType_ModemMetric) SetSnr(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Snr", "DeviceMetricsTimeSeriesDataType_ModemMetric"))
	}
	m.Snr = fv
}

type DeviceMetricsTimeSeriesDataType_PerAntennaSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	FivegRsrps    []float64 `protobuf:"fixed64,1,rep,packed,name=fiveg_rsrps,json=fivegRsrps,proto3" json:"fiveg_rsrps,omitempty" firestore:"fivegRsrps"`
	FivegRsrqs    []float64 `protobuf:"fixed64,2,rep,packed,name=fiveg_rsrqs,json=fivegRsrqs,proto3" json:"fiveg_rsrqs,omitempty" firestore:"fivegRsrqs"`
	LteRsrps      []float64 `protobuf:"fixed64,3,rep,packed,name=lte_rsrps,json=lteRsrps,proto3" json:"lte_rsrps,omitempty" firestore:"lteRsrps"`
	LteRsrqs      []float64 `protobuf:"fixed64,4,rep,packed,name=lte_rsrqs,json=lteRsrqs,proto3" json:"lte_rsrqs,omitempty" firestore:"lteRsrqs"`
}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) Reset() {
	*m = DeviceMetricsTimeSeriesDataType_PerAntennaSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_PerAntennaSignal) ProtoMessage() {}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_PerAntennaSignal) GotenMessage() {}

// Deprecated, Use DeviceMetricsTimeSeriesDataType_PerAntennaSignal.ProtoReflect.Descriptor instead.
func (*DeviceMetricsTimeSeriesDataType_PerAntennaSignal) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{2, 9}
}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) GetFivegRsrps() []float64 {
	if m != nil {
		return m.FivegRsrps
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) GetFivegRsrqs() []float64 {
	if m != nil {
		return m.FivegRsrqs
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) GetLteRsrps() []float64 {
	if m != nil {
		return m.LteRsrps
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) GetLteRsrqs() []float64 {
	if m != nil {
		return m.LteRsrqs
	}
	return nil
}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) SetFivegRsrps(fv []float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FivegRsrps", "DeviceMetricsTimeSeriesDataType_PerAntennaSignal"))
	}
	m.FivegRsrps = fv
}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) SetFivegRsrqs(fv []float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FivegRsrqs", "DeviceMetricsTimeSeriesDataType_PerAntennaSignal"))
	}
	m.FivegRsrqs = fv
}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) SetLteRsrps(fv []float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LteRsrps", "DeviceMetricsTimeSeriesDataType_PerAntennaSignal"))
	}
	m.LteRsrps = fv
}

func (m *DeviceMetricsTimeSeriesDataType_PerAntennaSignal) SetLteRsrqs(fv []float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LteRsrqs", "DeviceMetricsTimeSeriesDataType_PerAntennaSignal"))
	}
	m.LteRsrqs = fv
}

type DeviceMetricsTimeSeriesDataType_ContainerMetricLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	PodId         string `protobuf:"bytes,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty" firestore:"podId"`
	ContainerId   string `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty" firestore:"containerId"`
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) Reset() {
	*m = DeviceMetricsTimeSeriesDataType_ContainerMetricLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) ProtoMessage() {}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) GotenMessage() {}

// Deprecated, Use DeviceMetricsTimeSeriesDataType_ContainerMetricLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{2, 10}
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) GetPodId() string {
	if m != nil {
		return m.PodId
	}
	return ""
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) SetPodId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodId", "DeviceMetricsTimeSeriesDataType_ContainerMetricLabel"))
	}
	m.PodId = fv
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetricLabel) SetContainerId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerId", "DeviceMetricsTimeSeriesDataType_ContainerMetricLabel"))
	}
	m.ContainerId = fv
}

type DeviceMetricsTimeSeriesDataType_ContainerMetric struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	CpuUtilization    float64 `protobuf:"fixed64,1,opt,name=cpu_utilization,json=cpuUtilization,proto3" json:"cpu_utilization,omitempty" firestore:"cpuUtilization"`
	MemoryUtilization float64 `protobuf:"fixed64,2,opt,name=memory_utilization,json=memoryUtilization,proto3" json:"memory_utilization,omitempty" firestore:"memoryUtilization"`
	MemoryUsageBytes  int64   `protobuf:"varint,3,opt,name=memory_usage_bytes,json=memoryUsageBytes,proto3" json:"memory_usage_bytes,omitempty" firestore:"memoryUsageBytes"`
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetric) Reset() {
	*m = DeviceMetricsTimeSeriesDataType_ContainerMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_ContainerMetric) ProtoMessage() {}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_ContainerMetric) GotenMessage() {}

// Deprecated, Use DeviceMetricsTimeSeriesDataType_ContainerMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetricsTimeSeriesDataType_ContainerMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{2, 11}
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetric) GetCpuUtilization() float64 {
	if m != nil {
		return m.CpuUtilization
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetric) GetMemoryUtilization() float64 {
	if m != nil {
		return m.MemoryUtilization
	}
	return float64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetric) GetMemoryUsageBytes() int64 {
	if m != nil {
		return m.MemoryUsageBytes
	}
	return int64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetric) SetCpuUtilization(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CpuUtilization", "DeviceMetricsTimeSeriesDataType_ContainerMetric"))
	}
	m.CpuUtilization = fv
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetric) SetMemoryUtilization(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUtilization", "DeviceMetricsTimeSeriesDataType_ContainerMetric"))
	}
	m.MemoryUtilization = fv
}

func (m *DeviceMetricsTimeSeriesDataType_ContainerMetric) SetMemoryUsageBytes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUsageBytes", "DeviceMetricsTimeSeriesDataType_ContainerMetric"))
	}
	m.MemoryUsageBytes = fv
}

type DeviceMetricsTimeSeriesDataType_PodMetricLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	PodId         string `protobuf:"bytes,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty" firestore:"podId"`
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetricLabel) Reset() {
	*m = DeviceMetricsTimeSeriesDataType_PodMetricLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetricLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_PodMetricLabel) ProtoMessage() {}

func (m *DeviceMetricsTimeSeriesDataType_PodMetricLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_PodMetricLabel) GotenMessage() {}

// Deprecated, Use DeviceMetricsTimeSeriesDataType_PodMetricLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetricsTimeSeriesDataType_PodMetricLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{2, 13}
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetricLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetricLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetricLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetricLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetricLabel) GetPodId() string {
	if m != nil {
		return m.PodId
	}
	return ""
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetricLabel) SetPodId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodId", "DeviceMetricsTimeSeriesDataType_PodMetricLabel"))
	}
	m.PodId = fv
}

type DeviceMetricsTimeSeriesDataType_PodMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	PodStatus     int64 `protobuf:"varint,1,opt,name=pod_status,json=podStatus,proto3" json:"pod_status,omitempty" firestore:"podStatus"`
	IsHealthy     bool  `protobuf:"varint,2,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty" firestore:"isHealthy"`
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetric) Reset() {
	*m = DeviceMetricsTimeSeriesDataType_PodMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_PodMetric) ProtoMessage() {}

func (m *DeviceMetricsTimeSeriesDataType_PodMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsTimeSeriesDataType_PodMetric) GotenMessage() {}

// Deprecated, Use DeviceMetricsTimeSeriesDataType_PodMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetricsTimeSeriesDataType_PodMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{2, 14}
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetric) GetPodStatus() int64 {
	if m != nil {
		return m.PodStatus
	}
	return int64(0)
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetric) GetIsHealthy() bool {
	if m != nil {
		return m.IsHealthy
	}
	return false
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetric) SetPodStatus(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodStatus", "DeviceMetricsTimeSeriesDataType_PodMetric"))
	}
	m.PodStatus = fv
}

func (m *DeviceMetricsTimeSeriesDataType_PodMetric) SetIsHealthy(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHealthy", "DeviceMetricsTimeSeriesDataType_PodMetric"))
	}
	m.IsHealthy = fv
}

type DeviceMetricsNoFloat_MemoryStats struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	BufferedMemory  uint64 `protobuf:"varint,1,opt,name=buffered_memory,json=bufferedMemory,proto3" json:"buffered_memory,omitempty" firestore:"bufferedMemory"`
	CachedMemory    uint64 `protobuf:"varint,2,opt,name=cached_memory,json=cachedMemory,proto3" json:"cached_memory,omitempty" firestore:"cachedMemory"`
	FreeMemory      uint64 `protobuf:"varint,3,opt,name=free_memory,json=freeMemory,proto3" json:"free_memory,omitempty" firestore:"freeMemory"`
	UsedMemory      uint64 `protobuf:"varint,4,opt,name=used_memory,json=usedMemory,proto3" json:"used_memory,omitempty" firestore:"usedMemory"`
	AvailableMemory uint64 `protobuf:"varint,5,opt,name=available_memory,json=availableMemory,proto3" json:"available_memory,omitempty" firestore:"availableMemory"`
	SharedMemory    uint64 `protobuf:"varint,6,opt,name=shared_memory,json=sharedMemory,proto3" json:"shared_memory,omitempty" firestore:"sharedMemory"`
}

func (m *DeviceMetricsNoFloat_MemoryStats) Reset() {
	*m = DeviceMetricsNoFloat_MemoryStats{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsNoFloat_MemoryStats) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsNoFloat_MemoryStats) ProtoMessage() {}

func (m *DeviceMetricsNoFloat_MemoryStats) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsNoFloat_MemoryStats) GotenMessage() {}

// Deprecated, Use DeviceMetricsNoFloat_MemoryStats.ProtoReflect.Descriptor instead.
func (*DeviceMetricsNoFloat_MemoryStats) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{3, 0}
}

func (m *DeviceMetricsNoFloat_MemoryStats) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsNoFloat_MemoryStats) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsNoFloat_MemoryStats) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsNoFloat_MemoryStats) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsNoFloat_MemoryStats) GetBufferedMemory() uint64 {
	if m != nil {
		return m.BufferedMemory
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_MemoryStats) GetCachedMemory() uint64 {
	if m != nil {
		return m.CachedMemory
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_MemoryStats) GetFreeMemory() uint64 {
	if m != nil {
		return m.FreeMemory
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_MemoryStats) GetUsedMemory() uint64 {
	if m != nil {
		return m.UsedMemory
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_MemoryStats) GetAvailableMemory() uint64 {
	if m != nil {
		return m.AvailableMemory
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_MemoryStats) GetSharedMemory() uint64 {
	if m != nil {
		return m.SharedMemory
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_MemoryStats) SetBufferedMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BufferedMemory", "DeviceMetricsNoFloat_MemoryStats"))
	}
	m.BufferedMemory = fv
}

func (m *DeviceMetricsNoFloat_MemoryStats) SetCachedMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CachedMemory", "DeviceMetricsNoFloat_MemoryStats"))
	}
	m.CachedMemory = fv
}

func (m *DeviceMetricsNoFloat_MemoryStats) SetFreeMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FreeMemory", "DeviceMetricsNoFloat_MemoryStats"))
	}
	m.FreeMemory = fv
}

func (m *DeviceMetricsNoFloat_MemoryStats) SetUsedMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UsedMemory", "DeviceMetricsNoFloat_MemoryStats"))
	}
	m.UsedMemory = fv
}

func (m *DeviceMetricsNoFloat_MemoryStats) SetAvailableMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AvailableMemory", "DeviceMetricsNoFloat_MemoryStats"))
	}
	m.AvailableMemory = fv
}

func (m *DeviceMetricsNoFloat_MemoryStats) SetSharedMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SharedMemory", "DeviceMetricsNoFloat_MemoryStats"))
	}
	m.SharedMemory = fv
}

type DeviceMetricsNoFloat_CpuCoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	User          uint64 `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty" firestore:"user"`
	System        uint64 `protobuf:"varint,2,opt,name=system,proto3" json:"system,omitempty" firestore:"system"`
	Idle          uint64 `protobuf:"varint,3,opt,name=idle,proto3" json:"idle,omitempty" firestore:"idle"`
	Nice          uint64 `protobuf:"varint,4,opt,name=nice,proto3" json:"nice,omitempty" firestore:"nice"`
	Iowait        uint64 `protobuf:"varint,5,opt,name=iowait,proto3" json:"iowait,omitempty" firestore:"iowait"`
	Irq           uint64 `protobuf:"varint,6,opt,name=irq,proto3" json:"irq,omitempty" firestore:"irq"`
	Softirq       uint64 `protobuf:"varint,7,opt,name=softirq,proto3" json:"softirq,omitempty" firestore:"softirq"`
	Steal         uint64 `protobuf:"varint,8,opt,name=steal,proto3" json:"steal,omitempty" firestore:"steal"`
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) Reset() {
	*m = DeviceMetricsNoFloat_CpuCoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsNoFloat_CpuCoreStats) ProtoMessage() {}

func (m *DeviceMetricsNoFloat_CpuCoreStats) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsNoFloat_CpuCoreStats) GotenMessage() {}

// Deprecated, Use DeviceMetricsNoFloat_CpuCoreStats.ProtoReflect.Descriptor instead.
func (*DeviceMetricsNoFloat_CpuCoreStats) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{3, 1}
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) GetUser() uint64 {
	if m != nil {
		return m.User
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) GetSystem() uint64 {
	if m != nil {
		return m.System
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) GetIdle() uint64 {
	if m != nil {
		return m.Idle
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) GetNice() uint64 {
	if m != nil {
		return m.Nice
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) GetIowait() uint64 {
	if m != nil {
		return m.Iowait
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) GetIrq() uint64 {
	if m != nil {
		return m.Irq
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) GetSoftirq() uint64 {
	if m != nil {
		return m.Softirq
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) GetSteal() uint64 {
	if m != nil {
		return m.Steal
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) SetUser(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "User", "DeviceMetricsNoFloat_CpuCoreStats"))
	}
	m.User = fv
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) SetSystem(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "System", "DeviceMetricsNoFloat_CpuCoreStats"))
	}
	m.System = fv
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) SetIdle(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Idle", "DeviceMetricsNoFloat_CpuCoreStats"))
	}
	m.Idle = fv
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) SetNice(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nice", "DeviceMetricsNoFloat_CpuCoreStats"))
	}
	m.Nice = fv
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) SetIowait(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Iowait", "DeviceMetricsNoFloat_CpuCoreStats"))
	}
	m.Iowait = fv
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) SetIrq(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Irq", "DeviceMetricsNoFloat_CpuCoreStats"))
	}
	m.Irq = fv
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) SetSoftirq(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Softirq", "DeviceMetricsNoFloat_CpuCoreStats"))
	}
	m.Softirq = fv
}

func (m *DeviceMetricsNoFloat_CpuCoreStats) SetSteal(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Steal", "DeviceMetricsNoFloat_CpuCoreStats"))
	}
	m.Steal = fv
}

type DeviceMetricsNoFloat_DiskMetricsLabel struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	MountPoint     string `protobuf:"bytes,1,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty" firestore:"mountPoint"`
	PartitionLabel string `protobuf:"bytes,2,opt,name=partition_label,json=partitionLabel,proto3" json:"partition_label,omitempty" firestore:"partitionLabel"`
	Partition      string `protobuf:"bytes,3,opt,name=partition,proto3" json:"partition,omitempty" firestore:"partition"`
}

func (m *DeviceMetricsNoFloat_DiskMetricsLabel) Reset() {
	*m = DeviceMetricsNoFloat_DiskMetricsLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsNoFloat_DiskMetricsLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsNoFloat_DiskMetricsLabel) ProtoMessage() {}

func (m *DeviceMetricsNoFloat_DiskMetricsLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsNoFloat_DiskMetricsLabel) GotenMessage() {}

// Deprecated, Use DeviceMetricsNoFloat_DiskMetricsLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetricsNoFloat_DiskMetricsLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{3, 2}
}

func (m *DeviceMetricsNoFloat_DiskMetricsLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsNoFloat_DiskMetricsLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsNoFloat_DiskMetricsLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsNoFloat_DiskMetricsLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsNoFloat_DiskMetricsLabel) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

func (m *DeviceMetricsNoFloat_DiskMetricsLabel) GetPartitionLabel() string {
	if m != nil {
		return m.PartitionLabel
	}
	return ""
}

func (m *DeviceMetricsNoFloat_DiskMetricsLabel) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *DeviceMetricsNoFloat_DiskMetricsLabel) SetMountPoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MountPoint", "DeviceMetricsNoFloat_DiskMetricsLabel"))
	}
	m.MountPoint = fv
}

func (m *DeviceMetricsNoFloat_DiskMetricsLabel) SetPartitionLabel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PartitionLabel", "DeviceMetricsNoFloat_DiskMetricsLabel"))
	}
	m.PartitionLabel = fv
}

func (m *DeviceMetricsNoFloat_DiskMetricsLabel) SetPartition(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Partition", "DeviceMetricsNoFloat_DiskMetricsLabel"))
	}
	m.Partition = fv
}

type DeviceMetricsNoFloat_HardwareMetricsLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	SensorTag     string `protobuf:"bytes,1,opt,name=sensor_tag,json=sensorTag,proto3" json:"sensor_tag,omitempty" firestore:"sensorTag"`
	ChipTag       string `protobuf:"bytes,2,opt,name=chip_tag,json=chipTag,proto3" json:"chip_tag,omitempty" firestore:"chipTag"`
}

func (m *DeviceMetricsNoFloat_HardwareMetricsLabel) Reset() {
	*m = DeviceMetricsNoFloat_HardwareMetricsLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsNoFloat_HardwareMetricsLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsNoFloat_HardwareMetricsLabel) ProtoMessage() {}

func (m *DeviceMetricsNoFloat_HardwareMetricsLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsNoFloat_HardwareMetricsLabel) GotenMessage() {}

// Deprecated, Use DeviceMetricsNoFloat_HardwareMetricsLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetricsNoFloat_HardwareMetricsLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{3, 3}
}

func (m *DeviceMetricsNoFloat_HardwareMetricsLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsNoFloat_HardwareMetricsLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsNoFloat_HardwareMetricsLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsNoFloat_HardwareMetricsLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsNoFloat_HardwareMetricsLabel) GetSensorTag() string {
	if m != nil {
		return m.SensorTag
	}
	return ""
}

func (m *DeviceMetricsNoFloat_HardwareMetricsLabel) GetChipTag() string {
	if m != nil {
		return m.ChipTag
	}
	return ""
}

func (m *DeviceMetricsNoFloat_HardwareMetricsLabel) SetSensorTag(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SensorTag", "DeviceMetricsNoFloat_HardwareMetricsLabel"))
	}
	m.SensorTag = fv
}

func (m *DeviceMetricsNoFloat_HardwareMetricsLabel) SetChipTag(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChipTag", "DeviceMetricsNoFloat_HardwareMetricsLabel"))
	}
	m.ChipTag = fv
}

type DeviceMetricsNoFloat_DiskMetric struct {
	state                  protoimpl.MessageState
	sizeCache              protoimpl.SizeCache
	unknownFields          protoimpl.UnknownFields
	DiskUsageBytes         uint64 `protobuf:"varint,1,opt,name=disk_usage_bytes,json=diskUsageBytes,proto3" json:"disk_usage_bytes,omitempty" firestore:"diskUsageBytes"`
	DiskUtilizationPercent uint64 `protobuf:"varint,2,opt,name=disk_utilization_percent,json=diskUtilizationPercent,proto3" json:"disk_utilization_percent,omitempty" firestore:"diskUtilizationPercent"`
}

func (m *DeviceMetricsNoFloat_DiskMetric) Reset() {
	*m = DeviceMetricsNoFloat_DiskMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsNoFloat_DiskMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsNoFloat_DiskMetric) ProtoMessage() {}

func (m *DeviceMetricsNoFloat_DiskMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsNoFloat_DiskMetric) GotenMessage() {}

// Deprecated, Use DeviceMetricsNoFloat_DiskMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetricsNoFloat_DiskMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{3, 4}
}

func (m *DeviceMetricsNoFloat_DiskMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsNoFloat_DiskMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsNoFloat_DiskMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsNoFloat_DiskMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsNoFloat_DiskMetric) GetDiskUsageBytes() uint64 {
	if m != nil {
		return m.DiskUsageBytes
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_DiskMetric) GetDiskUtilizationPercent() uint64 {
	if m != nil {
		return m.DiskUtilizationPercent
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_DiskMetric) SetDiskUsageBytes(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskUsageBytes", "DeviceMetricsNoFloat_DiskMetric"))
	}
	m.DiskUsageBytes = fv
}

func (m *DeviceMetricsNoFloat_DiskMetric) SetDiskUtilizationPercent(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskUtilizationPercent", "DeviceMetricsNoFloat_DiskMetric"))
	}
	m.DiskUtilizationPercent = fv
}

type DeviceMetricsNoFloat_HardwareMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	FanSpeed      uint64  `protobuf:"varint,1,opt,name=fan_speed,json=fanSpeed,proto3" json:"fan_speed,omitempty" firestore:"fanSpeed"`
	Temperature   uint64  `protobuf:"varint,2,opt,name=temperature,proto3" json:"temperature,omitempty" firestore:"temperature"`
	Voltage       float32 `protobuf:"fixed32,3,opt,name=voltage,proto3" json:"voltage,omitempty" firestore:"voltage"`
	Power         float32 `protobuf:"fixed32,4,opt,name=power,proto3" json:"power,omitempty" firestore:"power"`
}

func (m *DeviceMetricsNoFloat_HardwareMetric) Reset() {
	*m = DeviceMetricsNoFloat_HardwareMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsNoFloat_HardwareMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsNoFloat_HardwareMetric) ProtoMessage() {}

func (m *DeviceMetricsNoFloat_HardwareMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsNoFloat_HardwareMetric) GotenMessage() {}

// Deprecated, Use DeviceMetricsNoFloat_HardwareMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetricsNoFloat_HardwareMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{3, 5}
}

func (m *DeviceMetricsNoFloat_HardwareMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsNoFloat_HardwareMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsNoFloat_HardwareMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsNoFloat_HardwareMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsNoFloat_HardwareMetric) GetFanSpeed() uint64 {
	if m != nil {
		return m.FanSpeed
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_HardwareMetric) GetTemperature() uint64 {
	if m != nil {
		return m.Temperature
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_HardwareMetric) GetVoltage() float32 {
	if m != nil {
		return m.Voltage
	}
	return float32(0)
}

func (m *DeviceMetricsNoFloat_HardwareMetric) GetPower() float32 {
	if m != nil {
		return m.Power
	}
	return float32(0)
}

func (m *DeviceMetricsNoFloat_HardwareMetric) SetFanSpeed(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FanSpeed", "DeviceMetricsNoFloat_HardwareMetric"))
	}
	m.FanSpeed = fv
}

func (m *DeviceMetricsNoFloat_HardwareMetric) SetTemperature(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Temperature", "DeviceMetricsNoFloat_HardwareMetric"))
	}
	m.Temperature = fv
}

func (m *DeviceMetricsNoFloat_HardwareMetric) SetVoltage(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Voltage", "DeviceMetricsNoFloat_HardwareMetric"))
	}
	m.Voltage = fv
}

func (m *DeviceMetricsNoFloat_HardwareMetric) SetPower(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Power", "DeviceMetricsNoFloat_HardwareMetric"))
	}
	m.Power = fv
}

type DeviceMetricsNoFloat_ModemMetricLabel struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	CellType       MobileNetworkType `protobuf:"varint,1,opt,name=cell_type,json=cellType,proto3,enum=ntt.devices.v1.MobileNetworkType" json:"cell_type,omitempty" firestore:"cellType"`
	CellId         uint64            `protobuf:"varint,2,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty" firestore:"cellId"`
	PhysicalCellId uint64            `protobuf:"varint,3,opt,name=physical_cell_id,json=physicalCellId,proto3" json:"physical_cell_id,omitempty" firestore:"physicalCellId"`
	Tac            uint64            `protobuf:"varint,4,opt,name=tac,proto3" json:"tac,omitempty" firestore:"tac"`
	Earfcn         uint64            `protobuf:"varint,5,opt,name=earfcn,proto3" json:"earfcn,omitempty" firestore:"earfcn"`
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) Reset() {
	*m = DeviceMetricsNoFloat_ModemMetricLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsNoFloat_ModemMetricLabel) ProtoMessage() {}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsNoFloat_ModemMetricLabel) GotenMessage() {}

// Deprecated, Use DeviceMetricsNoFloat_ModemMetricLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetricsNoFloat_ModemMetricLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{3, 6}
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) GetCellType() MobileNetworkType {
	if m != nil {
		return m.CellType
	}
	return MobileNetworkType_FiveGNR
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) GetCellId() uint64 {
	if m != nil {
		return m.CellId
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) GetPhysicalCellId() uint64 {
	if m != nil {
		return m.PhysicalCellId
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) GetTac() uint64 {
	if m != nil {
		return m.Tac
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) GetEarfcn() uint64 {
	if m != nil {
		return m.Earfcn
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) SetCellType(fv MobileNetworkType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CellType", "DeviceMetricsNoFloat_ModemMetricLabel"))
	}
	m.CellType = fv
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) SetCellId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CellId", "DeviceMetricsNoFloat_ModemMetricLabel"))
	}
	m.CellId = fv
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) SetPhysicalCellId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PhysicalCellId", "DeviceMetricsNoFloat_ModemMetricLabel"))
	}
	m.PhysicalCellId = fv
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) SetTac(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tac", "DeviceMetricsNoFloat_ModemMetricLabel"))
	}
	m.Tac = fv
}

func (m *DeviceMetricsNoFloat_ModemMetricLabel) SetEarfcn(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Earfcn", "DeviceMetricsNoFloat_ModemMetricLabel"))
	}
	m.Earfcn = fv
}

type DeviceMetricsNoFloat_ModemMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Rssi          uint64 `protobuf:"varint,1,opt,name=rssi,proto3" json:"rssi,omitempty" firestore:"rssi"`
	Rsrp          uint64 `protobuf:"varint,2,opt,name=rsrp,proto3" json:"rsrp,omitempty" firestore:"rsrp"`
	Rsrq          uint64 `protobuf:"varint,3,opt,name=rsrq,proto3" json:"rsrq,omitempty" firestore:"rsrq"`
	Snr           uint64 `protobuf:"varint,4,opt,name=snr,proto3" json:"snr,omitempty" firestore:"snr"`
}

func (m *DeviceMetricsNoFloat_ModemMetric) Reset() {
	*m = DeviceMetricsNoFloat_ModemMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsNoFloat_ModemMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsNoFloat_ModemMetric) ProtoMessage() {}

func (m *DeviceMetricsNoFloat_ModemMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsNoFloat_ModemMetric) GotenMessage() {}

// Deprecated, Use DeviceMetricsNoFloat_ModemMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetricsNoFloat_ModemMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{3, 7}
}

func (m *DeviceMetricsNoFloat_ModemMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsNoFloat_ModemMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsNoFloat_ModemMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsNoFloat_ModemMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsNoFloat_ModemMetric) GetRssi() uint64 {
	if m != nil {
		return m.Rssi
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_ModemMetric) GetRsrp() uint64 {
	if m != nil {
		return m.Rsrp
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_ModemMetric) GetRsrq() uint64 {
	if m != nil {
		return m.Rsrq
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_ModemMetric) GetSnr() uint64 {
	if m != nil {
		return m.Snr
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_ModemMetric) SetRssi(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rssi", "DeviceMetricsNoFloat_ModemMetric"))
	}
	m.Rssi = fv
}

func (m *DeviceMetricsNoFloat_ModemMetric) SetRsrp(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rsrp", "DeviceMetricsNoFloat_ModemMetric"))
	}
	m.Rsrp = fv
}

func (m *DeviceMetricsNoFloat_ModemMetric) SetRsrq(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rsrq", "DeviceMetricsNoFloat_ModemMetric"))
	}
	m.Rsrq = fv
}

func (m *DeviceMetricsNoFloat_ModemMetric) SetSnr(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Snr", "DeviceMetricsNoFloat_ModemMetric"))
	}
	m.Snr = fv
}

type DeviceMetricsNoFloat_PerAntennaSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	FivegRsrps    []uint64 `protobuf:"varint,1,rep,packed,name=fiveg_rsrps,json=fivegRsrps,proto3" json:"fiveg_rsrps,omitempty" firestore:"fivegRsrps"`
	FivegRsrqs    []uint64 `protobuf:"varint,2,rep,packed,name=fiveg_rsrqs,json=fivegRsrqs,proto3" json:"fiveg_rsrqs,omitempty" firestore:"fivegRsrqs"`
	LteRsrps      []uint64 `protobuf:"varint,3,rep,packed,name=lte_rsrps,json=lteRsrps,proto3" json:"lte_rsrps,omitempty" firestore:"lteRsrps"`
	LteRsrqs      []uint64 `protobuf:"varint,4,rep,packed,name=lte_rsrqs,json=lteRsrqs,proto3" json:"lte_rsrqs,omitempty" firestore:"lteRsrqs"`
}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) Reset() {
	*m = DeviceMetricsNoFloat_PerAntennaSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsNoFloat_PerAntennaSignal) ProtoMessage() {}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsNoFloat_PerAntennaSignal) GotenMessage() {}

// Deprecated, Use DeviceMetricsNoFloat_PerAntennaSignal.ProtoReflect.Descriptor instead.
func (*DeviceMetricsNoFloat_PerAntennaSignal) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{3, 9}
}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) GetFivegRsrps() []uint64 {
	if m != nil {
		return m.FivegRsrps
	}
	return nil
}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) GetFivegRsrqs() []uint64 {
	if m != nil {
		return m.FivegRsrqs
	}
	return nil
}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) GetLteRsrps() []uint64 {
	if m != nil {
		return m.LteRsrps
	}
	return nil
}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) GetLteRsrqs() []uint64 {
	if m != nil {
		return m.LteRsrqs
	}
	return nil
}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) SetFivegRsrps(fv []uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FivegRsrps", "DeviceMetricsNoFloat_PerAntennaSignal"))
	}
	m.FivegRsrps = fv
}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) SetFivegRsrqs(fv []uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FivegRsrqs", "DeviceMetricsNoFloat_PerAntennaSignal"))
	}
	m.FivegRsrqs = fv
}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) SetLteRsrps(fv []uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LteRsrps", "DeviceMetricsNoFloat_PerAntennaSignal"))
	}
	m.LteRsrps = fv
}

func (m *DeviceMetricsNoFloat_PerAntennaSignal) SetLteRsrqs(fv []uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LteRsrqs", "DeviceMetricsNoFloat_PerAntennaSignal"))
	}
	m.LteRsrqs = fv
}

type DeviceMetricsNoFloat_ContainerMetricLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	PodId         string `protobuf:"bytes,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty" firestore:"podId"`
	ContainerId   string `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty" firestore:"containerId"`
}

func (m *DeviceMetricsNoFloat_ContainerMetricLabel) Reset() {
	*m = DeviceMetricsNoFloat_ContainerMetricLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsNoFloat_ContainerMetricLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsNoFloat_ContainerMetricLabel) ProtoMessage() {}

func (m *DeviceMetricsNoFloat_ContainerMetricLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsNoFloat_ContainerMetricLabel) GotenMessage() {}

// Deprecated, Use DeviceMetricsNoFloat_ContainerMetricLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetricsNoFloat_ContainerMetricLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{3, 10}
}

func (m *DeviceMetricsNoFloat_ContainerMetricLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsNoFloat_ContainerMetricLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsNoFloat_ContainerMetricLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsNoFloat_ContainerMetricLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsNoFloat_ContainerMetricLabel) GetPodId() string {
	if m != nil {
		return m.PodId
	}
	return ""
}

func (m *DeviceMetricsNoFloat_ContainerMetricLabel) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *DeviceMetricsNoFloat_ContainerMetricLabel) SetPodId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodId", "DeviceMetricsNoFloat_ContainerMetricLabel"))
	}
	m.PodId = fv
}

func (m *DeviceMetricsNoFloat_ContainerMetricLabel) SetContainerId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerId", "DeviceMetricsNoFloat_ContainerMetricLabel"))
	}
	m.ContainerId = fv
}

type DeviceMetricsNoFloat_ContainerMetric struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	CpuUtilization    uint64 `protobuf:"varint,1,opt,name=cpu_utilization,json=cpuUtilization,proto3" json:"cpu_utilization,omitempty" firestore:"cpuUtilization"`
	MemoryUtilization uint64 `protobuf:"varint,2,opt,name=memory_utilization,json=memoryUtilization,proto3" json:"memory_utilization,omitempty" firestore:"memoryUtilization"`
	MemoryUsageBytes  uint64 `protobuf:"varint,3,opt,name=memory_usage_bytes,json=memoryUsageBytes,proto3" json:"memory_usage_bytes,omitempty" firestore:"memoryUsageBytes"`
}

func (m *DeviceMetricsNoFloat_ContainerMetric) Reset() {
	*m = DeviceMetricsNoFloat_ContainerMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsNoFloat_ContainerMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsNoFloat_ContainerMetric) ProtoMessage() {}

func (m *DeviceMetricsNoFloat_ContainerMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsNoFloat_ContainerMetric) GotenMessage() {}

// Deprecated, Use DeviceMetricsNoFloat_ContainerMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetricsNoFloat_ContainerMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{3, 11}
}

func (m *DeviceMetricsNoFloat_ContainerMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsNoFloat_ContainerMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsNoFloat_ContainerMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsNoFloat_ContainerMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsNoFloat_ContainerMetric) GetCpuUtilization() uint64 {
	if m != nil {
		return m.CpuUtilization
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_ContainerMetric) GetMemoryUtilization() uint64 {
	if m != nil {
		return m.MemoryUtilization
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_ContainerMetric) GetMemoryUsageBytes() uint64 {
	if m != nil {
		return m.MemoryUsageBytes
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_ContainerMetric) SetCpuUtilization(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CpuUtilization", "DeviceMetricsNoFloat_ContainerMetric"))
	}
	m.CpuUtilization = fv
}

func (m *DeviceMetricsNoFloat_ContainerMetric) SetMemoryUtilization(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUtilization", "DeviceMetricsNoFloat_ContainerMetric"))
	}
	m.MemoryUtilization = fv
}

func (m *DeviceMetricsNoFloat_ContainerMetric) SetMemoryUsageBytes(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUsageBytes", "DeviceMetricsNoFloat_ContainerMetric"))
	}
	m.MemoryUsageBytes = fv
}

type DeviceMetricsNoFloat_PodMetricLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	PodId         string `protobuf:"bytes,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty" firestore:"podId"`
}

func (m *DeviceMetricsNoFloat_PodMetricLabel) Reset() {
	*m = DeviceMetricsNoFloat_PodMetricLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsNoFloat_PodMetricLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsNoFloat_PodMetricLabel) ProtoMessage() {}

func (m *DeviceMetricsNoFloat_PodMetricLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsNoFloat_PodMetricLabel) GotenMessage() {}

// Deprecated, Use DeviceMetricsNoFloat_PodMetricLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetricsNoFloat_PodMetricLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{3, 13}
}

func (m *DeviceMetricsNoFloat_PodMetricLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsNoFloat_PodMetricLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsNoFloat_PodMetricLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsNoFloat_PodMetricLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsNoFloat_PodMetricLabel) GetPodId() string {
	if m != nil {
		return m.PodId
	}
	return ""
}

func (m *DeviceMetricsNoFloat_PodMetricLabel) SetPodId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodId", "DeviceMetricsNoFloat_PodMetricLabel"))
	}
	m.PodId = fv
}

type DeviceMetricsNoFloat_PodMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	PodStatus     uint64 `protobuf:"varint,1,opt,name=pod_status,json=podStatus,proto3" json:"pod_status,omitempty" firestore:"podStatus"`
	IsHealthy     bool   `protobuf:"varint,2,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty" firestore:"isHealthy"`
}

func (m *DeviceMetricsNoFloat_PodMetric) Reset() {
	*m = DeviceMetricsNoFloat_PodMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetricsNoFloat_PodMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetricsNoFloat_PodMetric) ProtoMessage() {}

func (m *DeviceMetricsNoFloat_PodMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetricsNoFloat_PodMetric) GotenMessage() {}

// Deprecated, Use DeviceMetricsNoFloat_PodMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetricsNoFloat_PodMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP(), []int{3, 14}
}

func (m *DeviceMetricsNoFloat_PodMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetricsNoFloat_PodMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetricsNoFloat_PodMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetricsNoFloat_PodMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetricsNoFloat_PodMetric) GetPodStatus() uint64 {
	if m != nil {
		return m.PodStatus
	}
	return uint64(0)
}

func (m *DeviceMetricsNoFloat_PodMetric) GetIsHealthy() bool {
	if m != nil {
		return m.IsHealthy
	}
	return false
}

func (m *DeviceMetricsNoFloat_PodMetric) SetPodStatus(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodStatus", "DeviceMetricsNoFloat_PodMetric"))
	}
	m.PodStatus = fv
}

func (m *DeviceMetricsNoFloat_PodMetric) SetIsHealthy(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHealthy", "DeviceMetricsNoFloat_PodMetric"))
	}
	m.IsHealthy = fv
}

var edgelq_devices_proto_v1_device_metrics_custom_proto preflect.FileDescriptor

var edgelq_devices_proto_v1_device_metrics_custom_proto_rawDesc = []byte{
	0x0a, 0x33, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5,
	0x05, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x5b, 0x0a, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x7e,
	0x0a, 0x24, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64,
	0x75, 0x6d, 0x6d, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x75, 0x6d, 0x6d,
	0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x6d, 0x79,
	0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x75,
	0x6d, 0x6d, 0x79, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x6d,
	0x79, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64,
	0x75, 0x6d, 0x6d, 0x79, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6d,
	0x6d, 0x79, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x40, 0x0a, 0x0a,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x33, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x64, 0x75, 0x6d, 0x6d, 0x79,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x22, 0xe0, 0x19, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x31, 0x6d, 0x12, 0x4c, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x08, 0x63, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x54, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6d,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x5f, 0x61,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x52, 0x10, 0x70, 0x65, 0x72, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x60, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x70, 0x6f, 0x64, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x64, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x70, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x6a, 0x0a, 0x17, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x15, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x60, 0x0a,
	0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x12, 0x6d, 0x6f, 0x64,
	0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x6c, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5a, 0x0a,
	0x12, 0x70, 0x6f, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x10, 0x70, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0xed, 0x01, 0x0a, 0x0b, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x72,
	0x65, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x1a, 0xbc, 0x01, 0x0a, 0x0c, 0x43, 0x70,
	0x75, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x69, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x72, 0x71, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x69, 0x72, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x66, 0x74,
	0x69, 0x72, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x6f, 0x66, 0x74, 0x69,
	0x72, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x1a, 0x7a, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x6b,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x50, 0x0a, 0x14, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x70, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x69, 0x70, 0x54, 0x61, 0x67, 0x1a, 0x70, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x18, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x16, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0x7f, 0x0a, 0x0e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61,
	0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66,
	0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0xbf, 0x01, 0x0a, 0x10, 0x4d, 0x6f,
	0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3e,
	0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x74, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x1a, 0x5b, 0x0a, 0x0b, 0x4d,
	0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73,
	0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x73, 0x72, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x72, 0x73,
	0x72, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x72, 0x73, 0x72, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x1a, 0x6a, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65,
	0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8e, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x41, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x76,
	0x65, 0x67, 0x5f, 0x72, 0x73, 0x72, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x11, 0x52, 0x0a,
	0x66, 0x69, 0x76, 0x65, 0x67, 0x52, 0x73, 0x72, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x76, 0x65, 0x67, 0x5f, 0x72, 0x73, 0x72, 0x71, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x0a, 0x66, 0x69, 0x76, 0x65, 0x67, 0x52, 0x73, 0x72, 0x71, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x74, 0x65, 0x5f, 0x72, 0x73, 0x72, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x11, 0x52, 0x08,
	0x6c, 0x74, 0x65, 0x52, 0x73, 0x72, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x74, 0x65, 0x5f,
	0x72, 0x73, 0x72, 0x71, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x74, 0x65,
	0x52, 0x73, 0x72, 0x71, 0x73, 0x1a, 0x50, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x15, 0x0a,
	0x06, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x6f, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x97, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x70, 0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x1a, 0x72, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x27, 0x0a, 0x0e, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x1a, 0x49,
	0x0a, 0x09, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22, 0x81, 0x1c, 0x0a, 0x1f, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x31, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x31, 0x6d, 0x12, 0x5e, 0x0a, 0x0c, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x09, 0x63, 0x70, 0x75,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x70,
	0x75, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x63, 0x70, 0x75, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x69, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0f, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x66,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x6e, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x52, 0x10, 0x70, 0x65, 0x72, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x72, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x6f,
	0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x70, 0x6f, 0x64, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0a, 0x64, 0x69,
	0x73, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x7c, 0x0a, 0x17, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x15, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x72, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x7e, 0x0a, 0x18, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x6c, 0x0a, 0x12, 0x70, 0x6f,
	0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x10, 0x70, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0xed, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x72, 0x65,
	0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x1a, 0xbc, 0x01, 0x0a, 0x0c, 0x43, 0x70, 0x75,
	0x43, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x69,
	0x6f, 0x77, 0x61, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x72, 0x71, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x69, 0x72, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x66, 0x74, 0x69,
	0x72, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x1a, 0x7a, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x6b, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x50, 0x0a, 0x14, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x70, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x69, 0x70, 0x54, 0x61, 0x67, 0x1a, 0x70, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64,
	0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x18, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x16, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0x7f, 0x0a, 0x0e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x6e,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x61,
	0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0xbf, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x64,
	0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3e, 0x0a,
	0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74,
	0x61, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x1a, 0x5b, 0x0a, 0x0b, 0x4d, 0x6f,
	0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x73, 0x72, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x73, 0x72,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x72, 0x73, 0x72, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x1a, 0x7c, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x6d,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8e, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x41, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x76, 0x65, 0x67, 0x5f, 0x72, 0x73, 0x72, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52,
	0x0a, 0x66, 0x69, 0x76, 0x65, 0x67, 0x52, 0x73, 0x72, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x76, 0x65, 0x67, 0x5f, 0x72, 0x73, 0x72, 0x71, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x0a, 0x66, 0x69, 0x76, 0x65, 0x67, 0x52, 0x73, 0x72, 0x71, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x74, 0x65, 0x5f, 0x72, 0x73, 0x72, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52,
	0x08, 0x6c, 0x74, 0x65, 0x52, 0x73, 0x72, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x74, 0x65,
	0x5f, 0x72, 0x73, 0x72, 0x71, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x74,
	0x65, 0x52, 0x73, 0x72, 0x71, 0x73, 0x1a, 0x50, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x15,
	0x0a, 0x06, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x97, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x70, 0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x1a, 0x84, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x55,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x27, 0x0a, 0x0e, 0x50, 0x6f, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x70,
	0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64,
	0x49, 0x64, 0x1a, 0x49, 0x0a, 0x09, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22, 0xaa, 0x1b,
	0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4e,
	0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x18, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x31, 0x6d, 0x12, 0x53, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x2e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x2e, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x63,
	0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5e, 0x0a, 0x10, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5b, 0x0a, 0x0d, 0x6d,
	0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x63, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x5f,
	0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x41, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x10, 0x70, 0x65, 0x72,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x67, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x70, 0x6f, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x2e, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x70, 0x6f, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x71,
	0x0a, 0x17, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4e, 0x6f,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x15, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x67, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4e, 0x6f,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x73, 0x0a, 0x18, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x61, 0x0a, 0x12, 0x70, 0x6f, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x2e, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x10, 0x70, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6d, 0x6d,
	0x79, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x64, 0x75, 0x6d, 0x6d, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0xed, 0x01, 0x0a,
	0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x66, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x1a, 0xbc, 0x01, 0x0a,
	0x0c, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6e, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x69, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x72, 0x71,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x72, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x6f,
	0x66, 0x74, 0x69, 0x72, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x1a, 0x7a, 0x0a, 0x10, 0x44,
	0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x50, 0x0a, 0x14, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x61, 0x67, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x69, 0x70, 0x54, 0x61, 0x67, 0x1a, 0x70, 0x0a, 0x0a, 0x44, 0x69, 0x73,
	0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x16, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0x7f, 0x0a, 0x0e, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x66, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0xbf, 0x01, 0x0a,
	0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x1a, 0x5b,
	0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x72, 0x73, 0x73,
	0x69, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x72, 0x73, 0x72, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x71, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x72, 0x73, 0x72, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x1a, 0x71, 0x0a, 0x11, 0x4d,
	0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8e,
	0x01, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x76, 0x65, 0x67, 0x5f, 0x72, 0x73, 0x72,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x76, 0x65, 0x67, 0x52,
	0x73, 0x72, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x76, 0x65, 0x67, 0x5f, 0x72, 0x73,
	0x72, 0x71, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x76, 0x65, 0x67,
	0x52, 0x73, 0x72, 0x71, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x74, 0x65, 0x5f, 0x72, 0x73, 0x72,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x74, 0x65, 0x52, 0x73, 0x72,
	0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x74, 0x65, 0x5f, 0x72, 0x73, 0x72, 0x71, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x74, 0x65, 0x52, 0x73, 0x72, 0x71, 0x73, 0x1a,
	0x50, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x1a, 0x97, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x79, 0x0a, 0x15, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x27, 0x0a, 0x0e, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x1a,
	0x49, 0x0a, 0x09, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22, 0x1d, 0x0a, 0x1b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x33, 0x0a, 0x11, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x69, 0x76, 0x65, 0x47, 0x4e, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x4d, 0x54, 0x53, 0x10, 0x02, 0x42, 0x8a,
	0x01, 0xe8, 0xde, 0x21, 0x00, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x18, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescOnce sync.Once
	edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescData = edgelq_devices_proto_v1_device_metrics_custom_proto_rawDesc
)

func edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescGZIP() []byte {
	edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescOnce.Do(func() {
		edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescData)
	})
	return edgelq_devices_proto_v1_device_metrics_custom_proto_rawDescData
}

var edgelq_devices_proto_v1_device_metrics_custom_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var edgelq_devices_proto_v1_device_metrics_custom_proto_goTypes = []interface{}{
	(MobileNetworkType)(0),                                       // 0: ntt.devices.v1.MobileNetworkType
	(*ReportDeviceMetricsRequest)(nil),                           // 1: ntt.devices.v1.ReportDeviceMetricsRequest
	(*DeviceMetrics)(nil),                                        // 2: ntt.devices.v1.DeviceMetrics
	(*DeviceMetricsTimeSeriesDataType)(nil),                      // 3: ntt.devices.v1.DeviceMetricsTimeSeriesDataType
	(*DeviceMetricsNoFloat)(nil),                                 // 4: ntt.devices.v1.DeviceMetricsNoFloat
	(*ReportDeviceMetricsResponse)(nil),                          // 5: ntt.devices.v1.ReportDeviceMetricsResponse
	(*DeviceMetrics_MemoryStats)(nil),                            // 6: ntt.devices.v1.DeviceMetrics.MemoryStats
	(*DeviceMetrics_CpuCoreStats)(nil),                           // 7: ntt.devices.v1.DeviceMetrics.CpuCoreStats
	(*DeviceMetrics_DiskMetricsLabel)(nil),                       // 8: ntt.devices.v1.DeviceMetrics.DiskMetricsLabel
	(*DeviceMetrics_HardwareMetricsLabel)(nil),                   // 9: ntt.devices.v1.DeviceMetrics.HardwareMetricsLabel
	(*DeviceMetrics_DiskMetric)(nil),                             // 10: ntt.devices.v1.DeviceMetrics.DiskMetric
	(*DeviceMetrics_HardwareMetric)(nil),                         // 11: ntt.devices.v1.DeviceMetrics.HardwareMetric
	(*DeviceMetrics_ModemMetricLabel)(nil),                       // 12: ntt.devices.v1.DeviceMetrics.ModemMetricLabel
	(*DeviceMetrics_ModemMetric)(nil),                            // 13: ntt.devices.v1.DeviceMetrics.ModemMetric
	nil,                                                          // 14: ntt.devices.v1.DeviceMetrics.ModemMetricsEntry
	(*DeviceMetrics_PerAntennaSignal)(nil),                       // 15: ntt.devices.v1.DeviceMetrics.PerAntennaSignal
	(*DeviceMetrics_ContainerMetricLabel)(nil),                   // 16: ntt.devices.v1.DeviceMetrics.ContainerMetricLabel
	(*DeviceMetrics_ContainerMetric)(nil),                        // 17: ntt.devices.v1.DeviceMetrics.ContainerMetric
	nil,                                                          // 18: ntt.devices.v1.DeviceMetrics.ContainerMetricsEntry
	(*DeviceMetrics_PodMetricLabel)(nil),                         // 19: ntt.devices.v1.DeviceMetrics.PodMetricLabel
	(*DeviceMetrics_PodMetric)(nil),                              // 20: ntt.devices.v1.DeviceMetrics.PodMetric
	(*DeviceMetricsTimeSeriesDataType_MemoryStats)(nil),          // 21: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.MemoryStats
	(*DeviceMetricsTimeSeriesDataType_CpuCoreStats)(nil),         // 22: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.CpuCoreStats
	(*DeviceMetricsTimeSeriesDataType_DiskMetricsLabel)(nil),     // 23: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.DiskMetricsLabel
	(*DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel)(nil), // 24: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.HardwareMetricsLabel
	(*DeviceMetricsTimeSeriesDataType_DiskMetric)(nil),           // 25: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.DiskMetric
	(*DeviceMetricsTimeSeriesDataType_HardwareMetric)(nil),       // 26: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.HardwareMetric
	(*DeviceMetricsTimeSeriesDataType_ModemMetricLabel)(nil),     // 27: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ModemMetricLabel
	(*DeviceMetricsTimeSeriesDataType_ModemMetric)(nil),          // 28: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ModemMetric
	nil, // 29: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ModemMetricsEntry
	(*DeviceMetricsTimeSeriesDataType_PerAntennaSignal)(nil),     // 30: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.PerAntennaSignal
	(*DeviceMetricsTimeSeriesDataType_ContainerMetricLabel)(nil), // 31: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ContainerMetricLabel
	(*DeviceMetricsTimeSeriesDataType_ContainerMetric)(nil),      // 32: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ContainerMetric
	nil, // 33: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ContainerMetricsEntry
	(*DeviceMetricsTimeSeriesDataType_PodMetricLabel)(nil), // 34: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.PodMetricLabel
	(*DeviceMetricsTimeSeriesDataType_PodMetric)(nil),      // 35: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.PodMetric
	(*DeviceMetricsNoFloat_MemoryStats)(nil),               // 36: ntt.devices.v1.DeviceMetricsNoFloat.MemoryStats
	(*DeviceMetricsNoFloat_CpuCoreStats)(nil),              // 37: ntt.devices.v1.DeviceMetricsNoFloat.CpuCoreStats
	(*DeviceMetricsNoFloat_DiskMetricsLabel)(nil),          // 38: ntt.devices.v1.DeviceMetricsNoFloat.DiskMetricsLabel
	(*DeviceMetricsNoFloat_HardwareMetricsLabel)(nil),      // 39: ntt.devices.v1.DeviceMetricsNoFloat.HardwareMetricsLabel
	(*DeviceMetricsNoFloat_DiskMetric)(nil),                // 40: ntt.devices.v1.DeviceMetricsNoFloat.DiskMetric
	(*DeviceMetricsNoFloat_HardwareMetric)(nil),            // 41: ntt.devices.v1.DeviceMetricsNoFloat.HardwareMetric
	(*DeviceMetricsNoFloat_ModemMetricLabel)(nil),          // 42: ntt.devices.v1.DeviceMetricsNoFloat.ModemMetricLabel
	(*DeviceMetricsNoFloat_ModemMetric)(nil),               // 43: ntt.devices.v1.DeviceMetricsNoFloat.ModemMetric
	nil,                                                    // 44: ntt.devices.v1.DeviceMetricsNoFloat.ModemMetricsEntry
	(*DeviceMetricsNoFloat_PerAntennaSignal)(nil),          // 45: ntt.devices.v1.DeviceMetricsNoFloat.PerAntennaSignal
	(*DeviceMetricsNoFloat_ContainerMetricLabel)(nil),      // 46: ntt.devices.v1.DeviceMetricsNoFloat.ContainerMetricLabel
	(*DeviceMetricsNoFloat_ContainerMetric)(nil),           // 47: ntt.devices.v1.DeviceMetricsNoFloat.ContainerMetric
	nil, // 48: ntt.devices.v1.DeviceMetricsNoFloat.ContainerMetricsEntry
	(*DeviceMetricsNoFloat_PodMetricLabel)(nil), // 49: ntt.devices.v1.DeviceMetricsNoFloat.PodMetricLabel
	(*DeviceMetricsNoFloat_PodMetric)(nil),      // 50: ntt.devices.v1.DeviceMetricsNoFloat.PodMetric
	(*timestamppb.Timestamp)(nil),               // 51: google.protobuf.Timestamp
}
var edgelq_devices_proto_v1_device_metrics_custom_proto_depIdxs = []int32{
	2,  // 0: ntt.devices.v1.ReportDeviceMetricsRequest.device_metrics:type_name -> ntt.devices.v1.DeviceMetrics
	4,  // 1: ntt.devices.v1.ReportDeviceMetricsRequest.device_metrics_no_float:type_name -> ntt.devices.v1.DeviceMetricsNoFloat
	3,  // 2: ntt.devices.v1.ReportDeviceMetricsRequest.device_metrics_time_series_data_type:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType
	0,  // 3: ntt.devices.v1.ReportDeviceMetricsRequest.enum_value:type_name -> ntt.devices.v1.MobileNetworkType
	6,  // 4: ntt.devices.v1.DeviceMetrics.memory_stats:type_name -> ntt.devices.v1.DeviceMetrics.MemoryStats
	7,  // 5: ntt.devices.v1.DeviceMetrics.cpu_stats:type_name -> ntt.devices.v1.DeviceMetrics.CpuCoreStats
	10, // 6: ntt.devices.v1.DeviceMetrics.disk_metrics:type_name -> ntt.devices.v1.DeviceMetrics.DiskMetric
	11, // 7: ntt.devices.v1.DeviceMetrics.hardware_metrics:type_name -> ntt.devices.v1.DeviceMetrics.HardwareMetric
	14, // 8: ntt.devices.v1.DeviceMetrics.modem_metrics:type_name -> ntt.devices.v1.DeviceMetrics.ModemMetricsEntry
	15, // 9: ntt.devices.v1.DeviceMetrics.per_antenna_signal:type_name -> ntt.devices.v1.DeviceMetrics.PerAntennaSignal
	18, // 10: ntt.devices.v1.DeviceMetrics.container_metrics:type_name -> ntt.devices.v1.DeviceMetrics.ContainerMetricsEntry
	20, // 11: ntt.devices.v1.DeviceMetrics.pod_metrics:type_name -> ntt.devices.v1.DeviceMetrics.PodMetric
	51, // 12: ntt.devices.v1.DeviceMetrics.metrics_time:type_name -> google.protobuf.Timestamp
	8,  // 13: ntt.devices.v1.DeviceMetrics.disk_labels:type_name -> ntt.devices.v1.DeviceMetrics.DiskMetricsLabel
	9,  // 14: ntt.devices.v1.DeviceMetrics.hardware_metrics_labels:type_name -> ntt.devices.v1.DeviceMetrics.HardwareMetricsLabel
	12, // 15: ntt.devices.v1.DeviceMetrics.modem_metrics_labels:type_name -> ntt.devices.v1.DeviceMetrics.ModemMetricLabel
	16, // 16: ntt.devices.v1.DeviceMetrics.container_metrics_labels:type_name -> ntt.devices.v1.DeviceMetrics.ContainerMetricLabel
	19, // 17: ntt.devices.v1.DeviceMetrics.pod_metrics_labels:type_name -> ntt.devices.v1.DeviceMetrics.PodMetricLabel
	21, // 18: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.memory_stats:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.MemoryStats
	22, // 19: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.cpu_stats:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.CpuCoreStats
	25, // 20: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.disk_metrics:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.DiskMetric
	26, // 21: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.hardware_metrics:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.HardwareMetric
	29, // 22: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.modem_metrics:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ModemMetricsEntry
	30, // 23: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.per_antenna_signal:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.PerAntennaSignal
	33, // 24: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.container_metrics:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ContainerMetricsEntry
	35, // 25: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.pod_metrics:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.PodMetric
	51, // 26: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.metrics_time:type_name -> google.protobuf.Timestamp
	23, // 27: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.disk_labels:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.DiskMetricsLabel
	24, // 28: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.hardware_metrics_labels:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.HardwareMetricsLabel
	27, // 29: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.modem_metrics_labels:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ModemMetricLabel
	31, // 30: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.container_metrics_labels:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ContainerMetricLabel
	34, // 31: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.pod_metrics_labels:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.PodMetricLabel
	36, // 32: ntt.devices.v1.DeviceMetricsNoFloat.memory_stats:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.MemoryStats
	37, // 33: ntt.devices.v1.DeviceMetricsNoFloat.cpu_stats:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.CpuCoreStats
	40, // 34: ntt.devices.v1.DeviceMetricsNoFloat.disk_metrics:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.DiskMetric
	41, // 35: ntt.devices.v1.DeviceMetricsNoFloat.hardware_metrics:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.HardwareMetric
	44, // 36: ntt.devices.v1.DeviceMetricsNoFloat.modem_metrics:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.ModemMetricsEntry
	45, // 37: ntt.devices.v1.DeviceMetricsNoFloat.per_antenna_signal:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.PerAntennaSignal
	48, // 38: ntt.devices.v1.DeviceMetricsNoFloat.container_metrics:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.ContainerMetricsEntry
	50, // 39: ntt.devices.v1.DeviceMetricsNoFloat.pod_metrics:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.PodMetric
	51, // 40: ntt.devices.v1.DeviceMetricsNoFloat.metrics_time:type_name -> google.protobuf.Timestamp
	38, // 41: ntt.devices.v1.DeviceMetricsNoFloat.disk_labels:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.DiskMetricsLabel
	39, // 42: ntt.devices.v1.DeviceMetricsNoFloat.hardware_metrics_labels:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.HardwareMetricsLabel
	42, // 43: ntt.devices.v1.DeviceMetricsNoFloat.modem_metrics_labels:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.ModemMetricLabel
	46, // 44: ntt.devices.v1.DeviceMetricsNoFloat.container_metrics_labels:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.ContainerMetricLabel
	49, // 45: ntt.devices.v1.DeviceMetricsNoFloat.pod_metrics_labels:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.PodMetricLabel
	0,  // 46: ntt.devices.v1.DeviceMetrics.ModemMetricLabel.cell_type:type_name -> ntt.devices.v1.MobileNetworkType
	13, // 47: ntt.devices.v1.DeviceMetrics.ModemMetricsEntry.value:type_name -> ntt.devices.v1.DeviceMetrics.ModemMetric
	17, // 48: ntt.devices.v1.DeviceMetrics.ContainerMetricsEntry.value:type_name -> ntt.devices.v1.DeviceMetrics.ContainerMetric
	0,  // 49: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ModemMetricLabel.cell_type:type_name -> ntt.devices.v1.MobileNetworkType
	28, // 50: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ModemMetricsEntry.value:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ModemMetric
	32, // 51: ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ContainerMetricsEntry.value:type_name -> ntt.devices.v1.DeviceMetricsTimeSeriesDataType.ContainerMetric
	0,  // 52: ntt.devices.v1.DeviceMetricsNoFloat.ModemMetricLabel.cell_type:type_name -> ntt.devices.v1.MobileNetworkType
	43, // 53: ntt.devices.v1.DeviceMetricsNoFloat.ModemMetricsEntry.value:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.ModemMetric
	47, // 54: ntt.devices.v1.DeviceMetricsNoFloat.ContainerMetricsEntry.value:type_name -> ntt.devices.v1.DeviceMetricsNoFloat.ContainerMetric
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { edgelq_devices_proto_v1_device_metrics_custom_proto_init() }
func edgelq_devices_proto_v1_device_metrics_custom_proto_init() {
	if edgelq_devices_proto_v1_device_metrics_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDeviceMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsTimeSeriesDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsNoFloat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDeviceMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_MemoryStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_CpuCoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_DiskMetricsLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_HardwareMetricsLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_DiskMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_HardwareMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_ModemMetricLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_ModemMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_PerAntennaSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_ContainerMetricLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_ContainerMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_PodMetricLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_PodMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsTimeSeriesDataType_MemoryStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsTimeSeriesDataType_CpuCoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsTimeSeriesDataType_DiskMetricsLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsTimeSeriesDataType_HardwareMetricsLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsTimeSeriesDataType_DiskMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsTimeSeriesDataType_HardwareMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsTimeSeriesDataType_ModemMetricLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsTimeSeriesDataType_ModemMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsTimeSeriesDataType_PerAntennaSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsTimeSeriesDataType_ContainerMetricLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsTimeSeriesDataType_ContainerMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsTimeSeriesDataType_PodMetricLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsTimeSeriesDataType_PodMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsNoFloat_MemoryStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsNoFloat_CpuCoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsNoFloat_DiskMetricsLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsNoFloat_HardwareMetricsLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsNoFloat_DiskMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsNoFloat_HardwareMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsNoFloat_ModemMetricLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsNoFloat_ModemMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsNoFloat_PerAntennaSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsNoFloat_ContainerMetricLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsNoFloat_ContainerMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsNoFloat_PodMetricLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricsNoFloat_PodMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_devices_proto_v1_device_metrics_custom_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_devices_proto_v1_device_metrics_custom_proto_goTypes,
		DependencyIndexes: edgelq_devices_proto_v1_device_metrics_custom_proto_depIdxs,
		EnumInfos:         edgelq_devices_proto_v1_device_metrics_custom_proto_enumTypes,
		MessageInfos:      edgelq_devices_proto_v1_device_metrics_custom_proto_msgTypes,
	}.Build()
	edgelq_devices_proto_v1_device_metrics_custom_proto = out.File
	edgelq_devices_proto_v1_device_metrics_custom_proto_rawDesc = nil
	edgelq_devices_proto_v1_device_metrics_custom_proto_goTypes = nil
	edgelq_devices_proto_v1_device_metrics_custom_proto_depIdxs = nil
}
