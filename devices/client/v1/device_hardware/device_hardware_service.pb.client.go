// Code generated by protoc-gen-goten-client
// API: DeviceHardwareService
// DO NOT EDIT!!!

package device_hardware_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	device_hardware "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_hardware"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &device_hardware.DeviceHardware{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceHardwareServiceClient is the client API for DeviceHardwareService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceHardwareServiceClient interface {
	GetDeviceHardware(ctx context.Context, in *GetDeviceHardwareRequest, opts ...grpc.CallOption) (*device_hardware.DeviceHardware, error)
	BatchGetDeviceHardwares(ctx context.Context, in *BatchGetDeviceHardwaresRequest, opts ...grpc.CallOption) (*BatchGetDeviceHardwaresResponse, error)
	ListDeviceHardwares(ctx context.Context, in *ListDeviceHardwaresRequest, opts ...grpc.CallOption) (*ListDeviceHardwaresResponse, error)
	WatchDeviceHardware(ctx context.Context, in *WatchDeviceHardwareRequest, opts ...grpc.CallOption) (WatchDeviceHardwareClientStream, error)
	WatchDeviceHardwares(ctx context.Context, in *WatchDeviceHardwaresRequest, opts ...grpc.CallOption) (WatchDeviceHardwaresClientStream, error)
	CreateDeviceHardware(ctx context.Context, in *CreateDeviceHardwareRequest, opts ...grpc.CallOption) (*device_hardware.DeviceHardware, error)
	UpdateDeviceHardware(ctx context.Context, in *UpdateDeviceHardwareRequest, opts ...grpc.CallOption) (*device_hardware.DeviceHardware, error)
	DeleteDeviceHardware(ctx context.Context, in *DeleteDeviceHardwareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Deregister(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*DeregisterResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewDeviceHardwareServiceClient(cc grpc.ClientConnInterface) DeviceHardwareServiceClient {
	return &client{cc}
}

func (c *client) GetDeviceHardware(ctx context.Context, in *GetDeviceHardwareRequest, opts ...grpc.CallOption) (*device_hardware.DeviceHardware, error) {
	out := new(device_hardware.DeviceHardware)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareService/GetDeviceHardware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetDeviceHardwares(ctx context.Context, in *BatchGetDeviceHardwaresRequest, opts ...grpc.CallOption) (*BatchGetDeviceHardwaresResponse, error) {
	out := new(BatchGetDeviceHardwaresResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareService/BatchGetDeviceHardwares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListDeviceHardwares(ctx context.Context, in *ListDeviceHardwaresRequest, opts ...grpc.CallOption) (*ListDeviceHardwaresResponse, error) {
	out := new(ListDeviceHardwaresResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareService/ListDeviceHardwares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchDeviceHardware(ctx context.Context, in *WatchDeviceHardwareRequest, opts ...grpc.CallOption) (WatchDeviceHardwareClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchDeviceHardware",
			ServerStreams: true,
		},
		"/ntt.devices.v1.DeviceHardwareService/WatchDeviceHardware", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchDeviceHardwareWatchDeviceHardwareClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchDeviceHardwareClientStream interface {
	Recv() (*WatchDeviceHardwareResponse, error)
	grpc.ClientStream
}

type watchDeviceHardwareWatchDeviceHardwareClient struct {
	grpc.ClientStream
}

func (x *watchDeviceHardwareWatchDeviceHardwareClient) Recv() (*WatchDeviceHardwareResponse, error) {
	m := new(WatchDeviceHardwareResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchDeviceHardwares(ctx context.Context, in *WatchDeviceHardwaresRequest, opts ...grpc.CallOption) (WatchDeviceHardwaresClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchDeviceHardwares",
			ServerStreams: true,
		},
		"/ntt.devices.v1.DeviceHardwareService/WatchDeviceHardwares", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchDeviceHardwaresWatchDeviceHardwaresClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchDeviceHardwaresClientStream interface {
	Recv() (*WatchDeviceHardwaresResponse, error)
	grpc.ClientStream
}

type watchDeviceHardwaresWatchDeviceHardwaresClient struct {
	grpc.ClientStream
}

func (x *watchDeviceHardwaresWatchDeviceHardwaresClient) Recv() (*WatchDeviceHardwaresResponse, error) {
	m := new(WatchDeviceHardwaresResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateDeviceHardware(ctx context.Context, in *CreateDeviceHardwareRequest, opts ...grpc.CallOption) (*device_hardware.DeviceHardware, error) {
	out := new(device_hardware.DeviceHardware)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareService/CreateDeviceHardware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateDeviceHardware(ctx context.Context, in *UpdateDeviceHardwareRequest, opts ...grpc.CallOption) (*device_hardware.DeviceHardware, error) {
	out := new(device_hardware.DeviceHardware)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareService/UpdateDeviceHardware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteDeviceHardware(ctx context.Context, in *DeleteDeviceHardwareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareService/DeleteDeviceHardware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Deregister(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*DeregisterResponse, error) {
	out := new(DeregisterResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareService/Deregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
