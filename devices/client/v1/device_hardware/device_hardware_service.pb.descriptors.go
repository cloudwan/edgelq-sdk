// Code generated by protoc-gen-goten-client
// API: DeviceHardwareService
// DO NOT EDIT!!!

package device_hardware_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	device_hardware "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_hardware"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &device_hardware.DeviceHardware{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized            bool
	deviceHardwareServiceDescriptor   *DeviceHardwareServiceDescriptor
	getDeviceHardwareDescriptor       *GetDeviceHardwareDescriptor
	batchGetDeviceHardwaresDescriptor *BatchGetDeviceHardwaresDescriptor
	listDeviceHardwaresDescriptor     *ListDeviceHardwaresDescriptor
	watchDeviceHardwareDescriptor     *WatchDeviceHardwareDescriptor
	watchDeviceHardwaresDescriptor    *WatchDeviceHardwaresDescriptor
	createDeviceHardwareDescriptor    *CreateDeviceHardwareDescriptor
	updateDeviceHardwareDescriptor    *UpdateDeviceHardwareDescriptor
	deleteDeviceHardwareDescriptor    *DeleteDeviceHardwareDescriptor
	deregisterDescriptor              *DeregisterDescriptor
)

type GetDeviceHardwareDescriptor struct{}

type GetDeviceHardwareDescriptorClientMsgHandle struct{}

type GetDeviceHardwareDescriptorServerMsgHandle struct{}

func (d *GetDeviceHardwareDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetDeviceHardwareRequest{}
}

func (d *GetDeviceHardwareDescriptor) NewEmptyServerMsg() proto.Message {
	return &device_hardware.DeviceHardware{}
}

func (d *GetDeviceHardwareDescriptor) IsUnary() bool {
	return true
}

func (d *GetDeviceHardwareDescriptor) IsClientStream() bool {
	return false
}

func (d *GetDeviceHardwareDescriptor) IsServerStream() bool {
	return false
}

func (d *GetDeviceHardwareDescriptor) IsCollection() bool {
	return false
}

func (d *GetDeviceHardwareDescriptor) IsPlural() bool {
	return false
}

func (d *GetDeviceHardwareDescriptor) HasResource() bool {
	return true
}

func (d *GetDeviceHardwareDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetDeviceHardwareDescriptor) GetVerb() string {
	return "get"
}

func (d *GetDeviceHardwareDescriptor) GetMethodName() string {
	return "GetDeviceHardware"
}

func (d *GetDeviceHardwareDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareService/GetDeviceHardware"
}

func (d *GetDeviceHardwareDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *GetDeviceHardwareDescriptor) GetApiName() string {
	return "DeviceHardwareService"
}

func (d *GetDeviceHardwareDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *GetDeviceHardwareDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetDeviceHardwareDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareServiceDescriptor
}

func (d *GetDeviceHardwareDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware.GetDescriptor()
}

func (d *GetDeviceHardwareDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeviceHardwareDescriptorClientMsgHandle{}
}

func (d *GetDeviceHardwareDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeviceHardwareDescriptorServerMsgHandle{}
}

func (h *GetDeviceHardwareDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetDeviceHardwareRequest) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware.Name)(nil)
}

func (h *GetDeviceHardwareDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetDeviceHardwareRequest) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeviceHardwareDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetDeviceHardwareRequest) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDeviceHardwareDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetDeviceHardwareRequest) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetDeviceHardwareDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetDeviceHardwareRequest) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetDeviceHardwareDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_hardware.DeviceHardware)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*device_hardware.DeviceHardware) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware.Name)(nil)
}

func (h *GetDeviceHardwareDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device_hardware.DeviceHardware)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*device_hardware.DeviceHardware) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeviceHardwareDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_hardware.DeviceHardware)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*device_hardware.DeviceHardware) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDeviceHardwareDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*device_hardware.DeviceHardware)
}

func (h *GetDeviceHardwareDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*device_hardware.DeviceHardware)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*device_hardware.DeviceHardware) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetDeviceHardwareDescriptor() *GetDeviceHardwareDescriptor {
	return getDeviceHardwareDescriptor
}

type BatchGetDeviceHardwaresDescriptor struct{}

type BatchGetDeviceHardwaresDescriptorClientMsgHandle struct{}

type BatchGetDeviceHardwaresDescriptorServerMsgHandle struct{}

func (d *BatchGetDeviceHardwaresDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetDeviceHardwaresRequest{}
}

func (d *BatchGetDeviceHardwaresDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetDeviceHardwaresResponse{}
}

func (d *BatchGetDeviceHardwaresDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetDeviceHardwaresDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetDeviceHardwaresDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetDeviceHardwaresDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetDeviceHardwaresDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetDeviceHardwaresDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetDeviceHardwaresDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetDeviceHardwaresDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetDeviceHardwaresDescriptor) GetMethodName() string {
	return "BatchGetDeviceHardwares"
}

func (d *BatchGetDeviceHardwaresDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareService/BatchGetDeviceHardwares"
}

func (d *BatchGetDeviceHardwaresDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *BatchGetDeviceHardwaresDescriptor) GetApiName() string {
	return "DeviceHardwareService"
}

func (d *BatchGetDeviceHardwaresDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *BatchGetDeviceHardwaresDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetDeviceHardwaresDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareServiceDescriptor
}

func (d *BatchGetDeviceHardwaresDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware.GetDescriptor()
}

func (d *BatchGetDeviceHardwaresDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDeviceHardwaresDescriptorClientMsgHandle{}
}

func (d *BatchGetDeviceHardwaresDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDeviceHardwaresDescriptorServerMsgHandle{}
}

func (h *BatchGetDeviceHardwaresDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDeviceHardwaresRequest) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceHardwaresDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDeviceHardwaresRequest) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return device_hardware.DeviceHardwareNameList(names)
		}
	}
	return (device_hardware.DeviceHardwareNameList)(nil)
}

func (h *BatchGetDeviceHardwaresDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetDeviceHardwaresRequest) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceHardwaresDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetDeviceHardwaresRequest) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceHardwaresDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetDeviceHardwaresRequest) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetDeviceHardwaresDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDeviceHardwaresResponse) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceHardwaresDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDeviceHardwaresResponse) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceHardwares(); len(resources) > 0 {
			list := make(device_hardware.DeviceHardwareNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (device_hardware.DeviceHardwareNameList)(nil)
}

func (h *BatchGetDeviceHardwaresDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetDeviceHardwaresResponse) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceHardwaresDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetDeviceHardwaresResponse) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceHardwaresDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetDeviceHardwaresResponse) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceHardwares(); len(resources) > 0 {
			return device_hardware.DeviceHardwareList(resources)
		}
	}
	return (device_hardware.DeviceHardwareList)(nil)
}

func GetBatchGetDeviceHardwaresDescriptor() *BatchGetDeviceHardwaresDescriptor {
	return batchGetDeviceHardwaresDescriptor
}

type ListDeviceHardwaresDescriptor struct{}

type ListDeviceHardwaresDescriptorClientMsgHandle struct{}

type ListDeviceHardwaresDescriptorServerMsgHandle struct{}

func (d *ListDeviceHardwaresDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListDeviceHardwaresRequest{}
}

func (d *ListDeviceHardwaresDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListDeviceHardwaresResponse{}
}

func (d *ListDeviceHardwaresDescriptor) IsUnary() bool {
	return true
}

func (d *ListDeviceHardwaresDescriptor) IsClientStream() bool {
	return false
}

func (d *ListDeviceHardwaresDescriptor) IsServerStream() bool {
	return false
}

func (d *ListDeviceHardwaresDescriptor) IsCollection() bool {
	return true
}

func (d *ListDeviceHardwaresDescriptor) IsPlural() bool {
	return true
}

func (d *ListDeviceHardwaresDescriptor) HasResource() bool {
	return true
}

func (d *ListDeviceHardwaresDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListDeviceHardwaresDescriptor) GetVerb() string {
	return "list"
}

func (d *ListDeviceHardwaresDescriptor) GetMethodName() string {
	return "ListDeviceHardwares"
}

func (d *ListDeviceHardwaresDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareService/ListDeviceHardwares"
}

func (d *ListDeviceHardwaresDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *ListDeviceHardwaresDescriptor) GetApiName() string {
	return "DeviceHardwareService"
}

func (d *ListDeviceHardwaresDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *ListDeviceHardwaresDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListDeviceHardwaresDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareServiceDescriptor
}

func (d *ListDeviceHardwaresDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware.GetDescriptor()
}

func (d *ListDeviceHardwaresDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDeviceHardwaresDescriptorClientMsgHandle{}
}

func (d *ListDeviceHardwaresDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDeviceHardwaresDescriptorServerMsgHandle{}
}

func (h *ListDeviceHardwaresDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDeviceHardwaresRequest) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDeviceHardwaresDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDeviceHardwaresRequest) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListDeviceHardwaresDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListDeviceHardwaresRequest) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*device_hardware.ParentName)(nil)
}

func (h *ListDeviceHardwaresDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListDeviceHardwaresRequest) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListDeviceHardwaresDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListDeviceHardwaresRequest) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListDeviceHardwaresDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDeviceHardwaresResponse) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDeviceHardwaresDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDeviceHardwaresResponse) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceHardwares(); len(resources) > 0 {
			list := make(device_hardware.DeviceHardwareNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (device_hardware.DeviceHardwareNameList)(nil)
}

func (h *ListDeviceHardwaresDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListDeviceHardwaresResponse) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListDeviceHardwaresDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListDeviceHardwaresResponse) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListDeviceHardwaresDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListDeviceHardwaresResponse) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceHardwares(); len(resources) > 0 {
			return device_hardware.DeviceHardwareList(resources)
		}
	}
	return (device_hardware.DeviceHardwareList)(nil)
}

func GetListDeviceHardwaresDescriptor() *ListDeviceHardwaresDescriptor {
	return listDeviceHardwaresDescriptor
}

type WatchDeviceHardwareDescriptor struct{}

type WatchDeviceHardwareDescriptorClientMsgHandle struct{}

type WatchDeviceHardwareDescriptorServerMsgHandle struct{}

func (d *WatchDeviceHardwareDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeviceHardwareRequest{}
}

func (d *WatchDeviceHardwareDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeviceHardwareResponse{}
}

func (d *WatchDeviceHardwareDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeviceHardwareDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeviceHardwareDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeviceHardwareDescriptor) IsCollection() bool {
	return false
}

func (d *WatchDeviceHardwareDescriptor) IsPlural() bool {
	return false
}

func (d *WatchDeviceHardwareDescriptor) HasResource() bool {
	return true
}

func (d *WatchDeviceHardwareDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeviceHardwareDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeviceHardwareDescriptor) GetMethodName() string {
	return "WatchDeviceHardware"
}

func (d *WatchDeviceHardwareDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareService/WatchDeviceHardware"
}

func (d *WatchDeviceHardwareDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *WatchDeviceHardwareDescriptor) GetApiName() string {
	return "DeviceHardwareService"
}

func (d *WatchDeviceHardwareDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *WatchDeviceHardwareDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchDeviceHardwareDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareServiceDescriptor
}

func (d *WatchDeviceHardwareDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware.GetDescriptor()
}

func (d *WatchDeviceHardwareDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceHardwareDescriptorClientMsgHandle{}
}

func (d *WatchDeviceHardwareDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceHardwareDescriptorServerMsgHandle{}
}

func (h *WatchDeviceHardwareDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceHardwareRequest) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware.Name)(nil)
}

func (h *WatchDeviceHardwareDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceHardwareRequest) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceHardwareDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceHardwareRequest) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwareDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeviceHardwareRequest) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwareDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeviceHardwareRequest) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchDeviceHardwareDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceHardwareResponse) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *device_hardware.DeviceHardwareChange_Added_:
				return tResChange.Added.GetDeviceHardware().GetName()
			case *device_hardware.DeviceHardwareChange_Modified_:
				return tResChange.Modified.GetName()
			case *device_hardware.DeviceHardwareChange_Removed_:
				return tResChange.Removed.GetName()
			case *device_hardware.DeviceHardwareChange_Current_:
				return tResChange.Current.GetDeviceHardware().GetName()
			}
		}
	}
	return (*device_hardware.Name)(nil)
}

func (h *WatchDeviceHardwareDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceHardwareResponse) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceHardwareDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceHardwareResponse) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwareDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeviceHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeviceHardwareResponse) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *device_hardware.DeviceHardwareChange_Added_:
				return tResChange.Added.GetDeviceHardware()
			case *device_hardware.DeviceHardwareChange_Modified_:
				return tResChange.Modified.GetDeviceHardware()
			case *device_hardware.DeviceHardwareChange_Current_:
				return tResChange.Current.GetDeviceHardware()
			}
		}
	}
	return (*device_hardware.DeviceHardware)(nil)
}

func (h *WatchDeviceHardwareDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeviceHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeviceHardwareResponse) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchDeviceHardwareDescriptor() *WatchDeviceHardwareDescriptor {
	return watchDeviceHardwareDescriptor
}

type WatchDeviceHardwaresDescriptor struct{}

type WatchDeviceHardwaresDescriptorClientMsgHandle struct{}

type WatchDeviceHardwaresDescriptorServerMsgHandle struct{}

func (d *WatchDeviceHardwaresDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeviceHardwaresRequest{}
}

func (d *WatchDeviceHardwaresDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeviceHardwaresResponse{}
}

func (d *WatchDeviceHardwaresDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeviceHardwaresDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeviceHardwaresDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeviceHardwaresDescriptor) IsCollection() bool {
	return true
}

func (d *WatchDeviceHardwaresDescriptor) IsPlural() bool {
	return true
}

func (d *WatchDeviceHardwaresDescriptor) HasResource() bool {
	return true
}

func (d *WatchDeviceHardwaresDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeviceHardwaresDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeviceHardwaresDescriptor) GetMethodName() string {
	return "WatchDeviceHardwares"
}

func (d *WatchDeviceHardwaresDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareService/WatchDeviceHardwares"
}

func (d *WatchDeviceHardwaresDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *WatchDeviceHardwaresDescriptor) GetApiName() string {
	return "DeviceHardwareService"
}

func (d *WatchDeviceHardwaresDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *WatchDeviceHardwaresDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchDeviceHardwaresDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareServiceDescriptor
}

func (d *WatchDeviceHardwaresDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware.GetDescriptor()
}

func (d *WatchDeviceHardwaresDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceHardwaresDescriptorClientMsgHandle{}
}

func (d *WatchDeviceHardwaresDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceHardwaresDescriptorServerMsgHandle{}
}

func (h *WatchDeviceHardwaresDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceHardwaresRequest) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwaresDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceHardwaresRequest) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceHardwaresDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceHardwaresRequest) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*device_hardware.ParentName)(nil)
}

func (h *WatchDeviceHardwaresDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeviceHardwaresRequest) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwaresDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeviceHardwaresRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeviceHardwaresRequest) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchDeviceHardwaresDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceHardwaresResponse) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwaresDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceHardwaresResponse) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetDeviceHardwareChanges(); len(resChanges) > 0 {
			list := make(device_hardware.DeviceHardwareNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *device_hardware.DeviceHardwareChange_Added_:
					list = append(list, tResChange.Added.GetDeviceHardware().GetName())
				case *device_hardware.DeviceHardwareChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *device_hardware.DeviceHardwareChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *device_hardware.DeviceHardwareChange_Current_:
					list = append(list, tResChange.Current.GetDeviceHardware().GetName())
				}
			}
			return list
		}
	}
	return (device_hardware.DeviceHardwareNameList)(nil)
}

func (h *WatchDeviceHardwaresDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceHardwaresResponse) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwaresDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeviceHardwaresResponse) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwaresDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeviceHardwaresResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeviceHardwaresResponse) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetDeviceHardwareChanges(); len(resChanges) > 0 {
			list := make(device_hardware.DeviceHardwareList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *device_hardware.DeviceHardwareChange_Added_:
					list = append(list, tResChange.Added.GetDeviceHardware())
				case *device_hardware.DeviceHardwareChange_Modified_:
					list = append(list, tResChange.Modified.GetDeviceHardware())
				case *device_hardware.DeviceHardwareChange_Current_:
					list = append(list, tResChange.Current.GetDeviceHardware())
				}
			}
			return list
		}
	}
	return (device_hardware.DeviceHardwareList)(nil)
}

func GetWatchDeviceHardwaresDescriptor() *WatchDeviceHardwaresDescriptor {
	return watchDeviceHardwaresDescriptor
}

type CreateDeviceHardwareDescriptor struct{}

type CreateDeviceHardwareDescriptorClientMsgHandle struct{}

type CreateDeviceHardwareDescriptorServerMsgHandle struct{}

func (d *CreateDeviceHardwareDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateDeviceHardwareRequest{}
}

func (d *CreateDeviceHardwareDescriptor) NewEmptyServerMsg() proto.Message {
	return &device_hardware.DeviceHardware{}
}

func (d *CreateDeviceHardwareDescriptor) IsUnary() bool {
	return true
}

func (d *CreateDeviceHardwareDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateDeviceHardwareDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateDeviceHardwareDescriptor) IsCollection() bool {
	return true
}

func (d *CreateDeviceHardwareDescriptor) IsPlural() bool {
	return false
}

func (d *CreateDeviceHardwareDescriptor) HasResource() bool {
	return true
}

func (d *CreateDeviceHardwareDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateDeviceHardwareDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateDeviceHardwareDescriptor) GetMethodName() string {
	return "CreateDeviceHardware"
}

func (d *CreateDeviceHardwareDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareService/CreateDeviceHardware"
}

func (d *CreateDeviceHardwareDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *CreateDeviceHardwareDescriptor) GetApiName() string {
	return "DeviceHardwareService"
}

func (d *CreateDeviceHardwareDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *CreateDeviceHardwareDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateDeviceHardwareDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareServiceDescriptor
}

func (d *CreateDeviceHardwareDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware.GetDescriptor()
}

func (d *CreateDeviceHardwareDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDeviceHardwareDescriptorClientMsgHandle{}
}

func (d *CreateDeviceHardwareDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDeviceHardwareDescriptorServerMsgHandle{}
}

func (h *CreateDeviceHardwareDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateDeviceHardwareRequest) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetDeviceHardware()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware.Name)(nil)
}

func (h *CreateDeviceHardwareDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateDeviceHardwareRequest) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDeviceHardwareDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateDeviceHardwareRequest) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*device_hardware.ParentName)(nil)
}

func (h *CreateDeviceHardwareDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateDeviceHardwareRequest) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetDeviceHardware()
	}
	return (*device_hardware.DeviceHardware)(nil)
}

func (h *CreateDeviceHardwareDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateDeviceHardwareRequest) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateDeviceHardwareDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_hardware.DeviceHardware)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*device_hardware.DeviceHardware) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware.Name)(nil)
}

func (h *CreateDeviceHardwareDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device_hardware.DeviceHardware)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*device_hardware.DeviceHardware) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDeviceHardwareDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_hardware.DeviceHardware)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*device_hardware.DeviceHardware) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateDeviceHardwareDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*device_hardware.DeviceHardware)
}

func (h *CreateDeviceHardwareDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*device_hardware.DeviceHardware)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*device_hardware.DeviceHardware) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateDeviceHardwareDescriptor() *CreateDeviceHardwareDescriptor {
	return createDeviceHardwareDescriptor
}

type UpdateDeviceHardwareDescriptor struct{}

type UpdateDeviceHardwareDescriptorClientMsgHandle struct{}

type UpdateDeviceHardwareDescriptorServerMsgHandle struct{}

func (d *UpdateDeviceHardwareDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateDeviceHardwareRequest{}
}

func (d *UpdateDeviceHardwareDescriptor) NewEmptyServerMsg() proto.Message {
	return &device_hardware.DeviceHardware{}
}

func (d *UpdateDeviceHardwareDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateDeviceHardwareDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateDeviceHardwareDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateDeviceHardwareDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateDeviceHardwareDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateDeviceHardwareDescriptor) HasResource() bool {
	return true
}

func (d *UpdateDeviceHardwareDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateDeviceHardwareDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateDeviceHardwareDescriptor) GetMethodName() string {
	return "UpdateDeviceHardware"
}

func (d *UpdateDeviceHardwareDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareService/UpdateDeviceHardware"
}

func (d *UpdateDeviceHardwareDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *UpdateDeviceHardwareDescriptor) GetApiName() string {
	return "DeviceHardwareService"
}

func (d *UpdateDeviceHardwareDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *UpdateDeviceHardwareDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateDeviceHardwareDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareServiceDescriptor
}

func (d *UpdateDeviceHardwareDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware.GetDescriptor()
}

func (d *UpdateDeviceHardwareDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDeviceHardwareDescriptorClientMsgHandle{}
}

func (d *UpdateDeviceHardwareDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDeviceHardwareDescriptorServerMsgHandle{}
}

func (h *UpdateDeviceHardwareDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateDeviceHardwareRequest) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetDeviceHardware()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware.Name)(nil)
}

func (h *UpdateDeviceHardwareDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateDeviceHardwareRequest) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDeviceHardwareDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateDeviceHardwareRequest) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDeviceHardwareDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateDeviceHardwareRequest) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetDeviceHardware()
	}
	return (*device_hardware.DeviceHardware)(nil)
}

func (h *UpdateDeviceHardwareDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateDeviceHardwareRequest) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateDeviceHardwareDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_hardware.DeviceHardware)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*device_hardware.DeviceHardware) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware.Name)(nil)
}

func (h *UpdateDeviceHardwareDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device_hardware.DeviceHardware)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*device_hardware.DeviceHardware) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDeviceHardwareDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_hardware.DeviceHardware)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*device_hardware.DeviceHardware) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDeviceHardwareDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*device_hardware.DeviceHardware)
}

func (h *UpdateDeviceHardwareDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*device_hardware.DeviceHardware)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*device_hardware.DeviceHardware) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateDeviceHardwareDescriptor() *UpdateDeviceHardwareDescriptor {
	return updateDeviceHardwareDescriptor
}

type DeleteDeviceHardwareDescriptor struct{}

type DeleteDeviceHardwareDescriptorClientMsgHandle struct{}

type DeleteDeviceHardwareDescriptorServerMsgHandle struct{}

func (d *DeleteDeviceHardwareDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteDeviceHardwareRequest{}
}

func (d *DeleteDeviceHardwareDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteDeviceHardwareDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteDeviceHardwareDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteDeviceHardwareDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteDeviceHardwareDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteDeviceHardwareDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteDeviceHardwareDescriptor) HasResource() bool {
	return true
}

func (d *DeleteDeviceHardwareDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteDeviceHardwareDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteDeviceHardwareDescriptor) GetMethodName() string {
	return "DeleteDeviceHardware"
}

func (d *DeleteDeviceHardwareDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareService/DeleteDeviceHardware"
}

func (d *DeleteDeviceHardwareDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *DeleteDeviceHardwareDescriptor) GetApiName() string {
	return "DeviceHardwareService"
}

func (d *DeleteDeviceHardwareDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *DeleteDeviceHardwareDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteDeviceHardwareDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareServiceDescriptor
}

func (d *DeleteDeviceHardwareDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware.GetDescriptor()
}

func (d *DeleteDeviceHardwareDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDeviceHardwareDescriptorClientMsgHandle{}
}

func (d *DeleteDeviceHardwareDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDeviceHardwareDescriptorServerMsgHandle{}
}

func (h *DeleteDeviceHardwareDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteDeviceHardwareRequest) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware.Name)(nil)
}

func (h *DeleteDeviceHardwareDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteDeviceHardwareRequest) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDeviceHardwareDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteDeviceHardwareRequest) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceHardwareDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteDeviceHardwareRequest) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceHardwareDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteDeviceHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteDeviceHardwareRequest) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteDeviceHardwareDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceHardwareDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDeviceHardwareDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceHardwareDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceHardwareDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteDeviceHardwareDescriptor() *DeleteDeviceHardwareDescriptor {
	return deleteDeviceHardwareDescriptor
}

type DeregisterDescriptor struct{}

type DeregisterDescriptorClientMsgHandle struct{}

type DeregisterDescriptorServerMsgHandle struct{}

func (d *DeregisterDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeregisterRequest{}
}

func (d *DeregisterDescriptor) NewEmptyServerMsg() proto.Message {
	return &DeregisterResponse{}
}

func (d *DeregisterDescriptor) IsUnary() bool {
	return true
}

func (d *DeregisterDescriptor) IsClientStream() bool {
	return false
}

func (d *DeregisterDescriptor) IsServerStream() bool {
	return false
}

func (d *DeregisterDescriptor) IsCollection() bool {
	return false
}

func (d *DeregisterDescriptor) IsPlural() bool {
	return false
}

func (d *DeregisterDescriptor) HasResource() bool {
	return true
}

func (d *DeregisterDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeregisterDescriptor) GetVerb() string {
	return "deregister"
}

func (d *DeregisterDescriptor) GetMethodName() string {
	return "Deregister"
}

func (d *DeregisterDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareService/Deregister"
}

func (d *DeregisterDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *DeregisterDescriptor) GetApiName() string {
	return "DeviceHardwareService"
}

func (d *DeregisterDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *DeregisterDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeregisterDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareServiceDescriptor
}

func (d *DeregisterDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware.GetDescriptor()
}

func (d *DeregisterDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeregisterDescriptorClientMsgHandle{}
}

func (d *DeregisterDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeregisterDescriptorServerMsgHandle{}
}

func (h *DeregisterDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeregisterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeregisterRequest) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware.Name)(nil)
}

func (h *DeregisterDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeregisterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeregisterRequest) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeregisterDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeregisterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeregisterRequest) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeregisterDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeregisterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeregisterRequest) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeregisterDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeregisterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeregisterRequest) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeregisterDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeregisterResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeregisterResponse) *device_hardware.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeregisterDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeregisterResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeregisterResponse) []*device_hardware.Name
	})
	if ok {
		return device_hardware.DeviceHardwareNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeregisterDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeregisterResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeregisterResponse) *device_hardware.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeregisterDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeregisterResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeregisterResponse) *device_hardware.DeviceHardware
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeregisterDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeregisterResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeregisterResponse) []*device_hardware.DeviceHardware
	})
	if ok {
		return device_hardware.DeviceHardwareList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeregisterDescriptor() *DeregisterDescriptor {
	return deregisterDescriptor
}

type DeviceHardwareServiceDescriptor struct{}

func (d *DeviceHardwareServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getDeviceHardwareDescriptor,
		batchGetDeviceHardwaresDescriptor,
		listDeviceHardwaresDescriptor,
		watchDeviceHardwareDescriptor,
		watchDeviceHardwaresDescriptor,
		createDeviceHardwareDescriptor,
		updateDeviceHardwareDescriptor,
		deleteDeviceHardwareDescriptor,
		deregisterDescriptor,
	}
}

func (d *DeviceHardwareServiceDescriptor) GetFullAPIName() string {
	return "/ntt.devices.v1.DeviceHardwareService"
}

func (d *DeviceHardwareServiceDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *DeviceHardwareServiceDescriptor) GetApiName() string {
	return "DeviceHardwareService"
}

func (d *DeviceHardwareServiceDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *DeviceHardwareServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetDeviceHardwareServiceDescriptor() *DeviceHardwareServiceDescriptor {
	return deviceHardwareServiceDescriptor
}

func initDescriptors() {
	deviceHardwareServiceDescriptor = &DeviceHardwareServiceDescriptor{}
	getDeviceHardwareDescriptor = &GetDeviceHardwareDescriptor{}
	batchGetDeviceHardwaresDescriptor = &BatchGetDeviceHardwaresDescriptor{}
	listDeviceHardwaresDescriptor = &ListDeviceHardwaresDescriptor{}
	watchDeviceHardwareDescriptor = &WatchDeviceHardwareDescriptor{}
	watchDeviceHardwaresDescriptor = &WatchDeviceHardwaresDescriptor{}
	createDeviceHardwareDescriptor = &CreateDeviceHardwareDescriptor{}
	updateDeviceHardwareDescriptor = &UpdateDeviceHardwareDescriptor{}
	deleteDeviceHardwareDescriptor = &DeleteDeviceHardwareDescriptor{}
	deregisterDescriptor = &DeregisterDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(deviceHardwareServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getDeviceHardwareDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetDeviceHardwaresDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listDeviceHardwaresDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeviceHardwareDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeviceHardwaresDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createDeviceHardwareDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateDeviceHardwareDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteDeviceHardwareDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deregisterDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
