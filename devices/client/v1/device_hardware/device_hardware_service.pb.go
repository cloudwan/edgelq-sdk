// Code generated by protoc-gen-goten-go
// File: edgelq/devices/proto/v1/device_hardware_service.proto
// DO NOT EDIT!!!

package device_hardware_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	device_hardware "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_hardware"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	view "github.com/cloudwan/goten-sdk/types/view"
	watch_type "github.com/cloudwan/goten-sdk/types/watch_type"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &device_hardware.DeviceHardware{}
	_ = &project.Project{}
	_ = &emptypb.Empty{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method
// [GetDeviceHardware][ntt.devices.v1.GetDeviceHardware]
type GetDeviceHardwareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.devices.v1.DeviceHardware
	Name *device_hardware.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_hardware.DeviceHardware_FieldMask `protobuf:"bytes,3,opt,customtype=DeviceHardware_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetDeviceHardwareRequest) Reset() {
	*m = GetDeviceHardwareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetDeviceHardwareRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetDeviceHardwareRequest) ProtoMessage() {}

func (m *GetDeviceHardwareRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetDeviceHardwareRequest) GotenMessage() {}

// Deprecated, Use GetDeviceHardwareRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceHardwareRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetDeviceHardwareRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetDeviceHardwareRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetDeviceHardwareRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetDeviceHardwareRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetDeviceHardwareRequest) GetName() *device_hardware.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetDeviceHardwareRequest) GetFieldMask() *device_hardware.DeviceHardware_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetDeviceHardwareRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetDeviceHardwareRequest) SetName(fv *device_hardware.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetDeviceHardwareRequest"))
	}
	m.Name = fv
}

func (m *GetDeviceHardwareRequest) SetFieldMask(fv *device_hardware.DeviceHardware_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetDeviceHardwareRequest"))
	}
	m.FieldMask = fv
}

func (m *GetDeviceHardwareRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetDeviceHardwareRequest"))
	}
	m.View = fv
}

// Request message for method
// [BatchGetDeviceHardwares][ntt.devices.v1.BatchGetDeviceHardwares]
type BatchGetDeviceHardwaresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of DeviceHardwares
	Names []*device_hardware.Name `protobuf:"bytes,2,rep,customtype=Name,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_hardware.DeviceHardware_FieldMask `protobuf:"bytes,3,opt,customtype=DeviceHardware_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetDeviceHardwaresRequest) Reset() {
	*m = BatchGetDeviceHardwaresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetDeviceHardwaresRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetDeviceHardwaresRequest) ProtoMessage() {}

func (m *BatchGetDeviceHardwaresRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetDeviceHardwaresRequest) GotenMessage() {}

// Deprecated, Use BatchGetDeviceHardwaresRequest.ProtoReflect.Descriptor instead.
func (*BatchGetDeviceHardwaresRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetDeviceHardwaresRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetDeviceHardwaresRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetDeviceHardwaresRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetDeviceHardwaresRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetDeviceHardwaresRequest) GetNames() []*device_hardware.Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetDeviceHardwaresRequest) GetFieldMask() *device_hardware.DeviceHardware_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetDeviceHardwaresRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetDeviceHardwaresRequest) SetNames(fv []*device_hardware.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetDeviceHardwaresRequest"))
	}
	m.Names = fv
}

func (m *BatchGetDeviceHardwaresRequest) SetFieldMask(fv *device_hardware.DeviceHardware_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetDeviceHardwaresRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetDeviceHardwaresRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetDeviceHardwaresRequest"))
	}
	m.View = fv
}

// BatchGetDeviceHardwaresResponse
type BatchGetDeviceHardwaresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found DeviceHardwares
	DeviceHardwares []*device_hardware.DeviceHardware `protobuf:"bytes,1,rep,name=device_hardwares,json=deviceHardwares,proto3" json:"device_hardwares,omitempty" firestore:"deviceHardwares"`
	// list of not found DeviceHardwares
	Missing []*device_hardware.Name `protobuf:"bytes,2,rep,customtype=Name,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetDeviceHardwaresResponse) Reset() {
	*m = BatchGetDeviceHardwaresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetDeviceHardwaresResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetDeviceHardwaresResponse) ProtoMessage() {}

func (m *BatchGetDeviceHardwaresResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetDeviceHardwaresResponse) GotenMessage() {}

// Deprecated, Use BatchGetDeviceHardwaresResponse.ProtoReflect.Descriptor instead.
func (*BatchGetDeviceHardwaresResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetDeviceHardwaresResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetDeviceHardwaresResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetDeviceHardwaresResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetDeviceHardwaresResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetDeviceHardwaresResponse) GetDeviceHardwares() []*device_hardware.DeviceHardware {
	if m != nil {
		return m.DeviceHardwares
	}
	return nil
}

func (m *BatchGetDeviceHardwaresResponse) GetMissing() []*device_hardware.Name {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetDeviceHardwaresResponse) SetDeviceHardwares(fv []*device_hardware.DeviceHardware) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceHardwares", "BatchGetDeviceHardwaresResponse"))
	}
	m.DeviceHardwares = fv
}

func (m *BatchGetDeviceHardwaresResponse) SetMissing(fv []*device_hardware.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetDeviceHardwaresResponse"))
	}
	m.Missing = fv
}

// Request message for method
// [ListDeviceHardwares][ntt.devices.v1.ListDeviceHardwares]
type ListDeviceHardwaresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.devices.v1.DeviceHardware
	Parent *device_hardware.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer DeviceHardwares than
	// requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListDeviceHardwaresResponse.next_page_token][ntt.devices.v1.ListDeviceHardwaresResponse.next_page_token]
	PageToken *device_hardware.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *device_hardware.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *device_hardware.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_hardware.DeviceHardware_FieldMask `protobuf:"bytes,6,opt,customtype=DeviceHardware_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty" firestore:"includePagingInfo"`
}

func (m *ListDeviceHardwaresRequest) Reset() {
	*m = ListDeviceHardwaresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListDeviceHardwaresRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListDeviceHardwaresRequest) ProtoMessage() {}

func (m *ListDeviceHardwaresRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListDeviceHardwaresRequest) GotenMessage() {}

// Deprecated, Use ListDeviceHardwaresRequest.ProtoReflect.Descriptor instead.
func (*ListDeviceHardwaresRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListDeviceHardwaresRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListDeviceHardwaresRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListDeviceHardwaresRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListDeviceHardwaresRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListDeviceHardwaresRequest) GetParent() *device_hardware.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListDeviceHardwaresRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListDeviceHardwaresRequest) GetPageToken() *device_hardware.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListDeviceHardwaresRequest) GetOrderBy() *device_hardware.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListDeviceHardwaresRequest) GetFilter() *device_hardware.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListDeviceHardwaresRequest) GetFieldMask() *device_hardware.DeviceHardware_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListDeviceHardwaresRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListDeviceHardwaresRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListDeviceHardwaresRequest) SetParent(fv *device_hardware.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListDeviceHardwaresRequest"))
	}
	m.Parent = fv
}

func (m *ListDeviceHardwaresRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListDeviceHardwaresRequest"))
	}
	m.PageSize = fv
}

func (m *ListDeviceHardwaresRequest) SetPageToken(fv *device_hardware.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListDeviceHardwaresRequest"))
	}
	m.PageToken = fv
}

func (m *ListDeviceHardwaresRequest) SetOrderBy(fv *device_hardware.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListDeviceHardwaresRequest"))
	}
	m.OrderBy = fv
}

func (m *ListDeviceHardwaresRequest) SetFilter(fv *device_hardware.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListDeviceHardwaresRequest"))
	}
	m.Filter = fv
}

func (m *ListDeviceHardwaresRequest) SetFieldMask(fv *device_hardware.DeviceHardware_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListDeviceHardwaresRequest"))
	}
	m.FieldMask = fv
}

func (m *ListDeviceHardwaresRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListDeviceHardwaresRequest"))
	}
	m.View = fv
}

func (m *ListDeviceHardwaresRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListDeviceHardwaresRequest"))
	}
	m.IncludePagingInfo = fv
}

// Request message for method
// [ListDeviceHardwares][ntt.devices.v1.ListDeviceHardwares]
type ListDeviceHardwaresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of DeviceHardwares
	DeviceHardwares []*device_hardware.DeviceHardware `protobuf:"bytes,1,rep,name=device_hardwares,json=deviceHardwares,proto3" json:"device_hardwares,omitempty" firestore:"deviceHardwares"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListDeviceHardwaresRequest.page_token][ntt.devices.v1.ListDeviceHardwaresRequest.page_token]
	PrevPageToken *device_hardware.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListDeviceHardwaresRequest.page_token][ntt.devices.v1.ListDeviceHardwaresRequest.page_token]
	NextPageToken *device_hardware.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty" firestore:"currentOffset"`
	// Number of total DeviceHardwares across all pages or 0, if there are no
	// items, paging info was not requested or there was an error while trying to
	// get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty" firestore:"totalResultsCount"`
}

func (m *ListDeviceHardwaresResponse) Reset() {
	*m = ListDeviceHardwaresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListDeviceHardwaresResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListDeviceHardwaresResponse) ProtoMessage() {}

func (m *ListDeviceHardwaresResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListDeviceHardwaresResponse) GotenMessage() {}

// Deprecated, Use ListDeviceHardwaresResponse.ProtoReflect.Descriptor instead.
func (*ListDeviceHardwaresResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListDeviceHardwaresResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListDeviceHardwaresResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListDeviceHardwaresResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListDeviceHardwaresResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListDeviceHardwaresResponse) GetDeviceHardwares() []*device_hardware.DeviceHardware {
	if m != nil {
		return m.DeviceHardwares
	}
	return nil
}

func (m *ListDeviceHardwaresResponse) GetPrevPageToken() *device_hardware.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListDeviceHardwaresResponse) GetNextPageToken() *device_hardware.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListDeviceHardwaresResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListDeviceHardwaresResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListDeviceHardwaresResponse) SetDeviceHardwares(fv []*device_hardware.DeviceHardware) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceHardwares", "ListDeviceHardwaresResponse"))
	}
	m.DeviceHardwares = fv
}

func (m *ListDeviceHardwaresResponse) SetPrevPageToken(fv *device_hardware.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListDeviceHardwaresResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListDeviceHardwaresResponse) SetNextPageToken(fv *device_hardware.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListDeviceHardwaresResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListDeviceHardwaresResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListDeviceHardwaresResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListDeviceHardwaresResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListDeviceHardwaresResponse"))
	}
	m.TotalResultsCount = fv
}

// Request message for method
// [WatchDeviceHardware][ntt.devices.v1.WatchDeviceHardware]
type WatchDeviceHardwareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.devices.v1.DeviceHardware
	Name *device_hardware.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_hardware.DeviceHardware_FieldMask `protobuf:"bytes,2,opt,customtype=DeviceHardware_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchDeviceHardwareRequest) Reset() {
	*m = WatchDeviceHardwareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceHardwareRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceHardwareRequest) ProtoMessage() {}

func (m *WatchDeviceHardwareRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceHardwareRequest) GotenMessage() {}

// Deprecated, Use WatchDeviceHardwareRequest.ProtoReflect.Descriptor instead.
func (*WatchDeviceHardwareRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchDeviceHardwareRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceHardwareRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceHardwareRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceHardwareRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceHardwareRequest) GetName() *device_hardware.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchDeviceHardwareRequest) GetFieldMask() *device_hardware.DeviceHardware_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchDeviceHardwareRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchDeviceHardwareRequest) SetName(fv *device_hardware.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchDeviceHardwareRequest"))
	}
	m.Name = fv
}

func (m *WatchDeviceHardwareRequest) SetFieldMask(fv *device_hardware.DeviceHardware_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchDeviceHardwareRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchDeviceHardwareRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchDeviceHardwareRequest"))
	}
	m.View = fv
}

// WatchDeviceHardwareResponse
type WatchDeviceHardwareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *device_hardware.DeviceHardwareChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchDeviceHardwareResponse) Reset() {
	*m = WatchDeviceHardwareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceHardwareResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceHardwareResponse) ProtoMessage() {}

func (m *WatchDeviceHardwareResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceHardwareResponse) GotenMessage() {}

// Deprecated, Use WatchDeviceHardwareResponse.ProtoReflect.Descriptor instead.
func (*WatchDeviceHardwareResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchDeviceHardwareResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceHardwareResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceHardwareResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceHardwareResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceHardwareResponse) GetChange() *device_hardware.DeviceHardwareChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchDeviceHardwareResponse) SetChange(fv *device_hardware.DeviceHardwareChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchDeviceHardwareResponse"))
	}
	m.Change = fv
}

// Request message for method
// [WatchDeviceHardwares][ntt.devices.v1.WatchDeviceHardwares]
type WatchDeviceHardwaresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.types.WatchType" json:"type,omitempty" firestore:"type"`
	// Parent name of ntt.devices.v1.DeviceHardware
	Parent *device_hardware.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer DeviceHardwares than
	// requested. If unspecified, server will pick an appropriate default. Can be
	// populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *device_hardware.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *device_hardware.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty" firestore:"startingTime"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *device_hardware.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to DeviceHardware that don't
	// affect any of masked fields won't be sent back.
	FieldMask *device_hardware.DeviceHardware_FieldMask `protobuf:"bytes,6,opt,customtype=DeviceHardware_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// DeviceHardware that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchDeviceHardwaresRequest) Reset() {
	*m = WatchDeviceHardwaresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceHardwaresRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceHardwaresRequest) ProtoMessage() {}

func (m *WatchDeviceHardwaresRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceHardwaresRequest) GotenMessage() {}

// Deprecated, Use WatchDeviceHardwaresRequest.ProtoReflect.Descriptor instead.
func (*WatchDeviceHardwaresRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchDeviceHardwaresRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceHardwaresRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceHardwaresRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceHardwaresRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceHardwaresRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchDeviceHardwaresRequest) GetParent() *device_hardware.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchDeviceHardwaresRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchDeviceHardwaresRequest) GetPageToken() *device_hardware.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchDeviceHardwaresRequest) GetOrderBy() *device_hardware.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchDeviceHardwaresRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchDeviceHardwaresRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchDeviceHardwaresRequest) GetFilter() *device_hardware.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchDeviceHardwaresRequest) GetFieldMask() *device_hardware.DeviceHardware_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchDeviceHardwaresRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchDeviceHardwaresRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchDeviceHardwaresRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchDeviceHardwaresRequest"))
	}
	m.Type = fv
}

func (m *WatchDeviceHardwaresRequest) SetParent(fv *device_hardware.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchDeviceHardwaresRequest"))
	}
	m.Parent = fv
}

func (m *WatchDeviceHardwaresRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchDeviceHardwaresRequest"))
	}
	m.PageSize = fv
}

func (m *WatchDeviceHardwaresRequest) SetPageToken(fv *device_hardware.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchDeviceHardwaresRequest"))
	}
	m.PageToken = fv
}

func (m *WatchDeviceHardwaresRequest) SetOrderBy(fv *device_hardware.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchDeviceHardwaresRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchDeviceHardwaresRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchDeviceHardwaresRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchDeviceHardwaresRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchDeviceHardwaresRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchDeviceHardwaresRequest) SetFilter(fv *device_hardware.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchDeviceHardwaresRequest"))
	}
	m.Filter = fv
}

func (m *WatchDeviceHardwaresRequest) SetFieldMask(fv *device_hardware.DeviceHardware_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchDeviceHardwaresRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchDeviceHardwaresRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchDeviceHardwaresRequest"))
	}
	m.View = fv
}

func (m *WatchDeviceHardwaresRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchDeviceHardwaresRequest"))
	}
	m.MaxChunkSize = fv
}

// WatchDeviceHardwaresResponse
type WatchDeviceHardwaresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of DeviceHardwares
	DeviceHardwareChanges []*device_hardware.DeviceHardwareChange `protobuf:"bytes,2,rep,name=device_hardware_changes,json=deviceHardwareChanges,proto3" json:"device_hardware_changes,omitempty" firestore:"deviceHardwareChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All DeviceHardwares will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchDeviceHardwaresResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (DeviceHardwares will contains
	// changes of type Current only). Any resume tokens should be discarded as
	// well. This field should be checked only for stateless watch. In stateful
	// those kind of errors are handled by the server side. Will never be sent
	// along with is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchDeviceHardwaresResponse) Reset() {
	*m = WatchDeviceHardwaresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceHardwaresResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceHardwaresResponse) ProtoMessage() {}

func (m *WatchDeviceHardwaresResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceHardwaresResponse) GotenMessage() {}

// Deprecated, Use WatchDeviceHardwaresResponse.ProtoReflect.Descriptor instead.
func (*WatchDeviceHardwaresResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchDeviceHardwaresResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceHardwaresResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceHardwaresResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceHardwaresResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceHardwaresResponse) GetDeviceHardwareChanges() []*device_hardware.DeviceHardwareChange {
	if m != nil {
		return m.DeviceHardwareChanges
	}
	return nil
}

func (m *WatchDeviceHardwaresResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchDeviceHardwaresResponse) GetPageTokenChange() *WatchDeviceHardwaresResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchDeviceHardwaresResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchDeviceHardwaresResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchDeviceHardwaresResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchDeviceHardwaresResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchDeviceHardwaresResponse) SetDeviceHardwareChanges(fv []*device_hardware.DeviceHardwareChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceHardwareChanges", "WatchDeviceHardwaresResponse"))
	}
	m.DeviceHardwareChanges = fv
}

func (m *WatchDeviceHardwaresResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchDeviceHardwaresResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchDeviceHardwaresResponse) SetPageTokenChange(fv *WatchDeviceHardwaresResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchDeviceHardwaresResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchDeviceHardwaresResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchDeviceHardwaresResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchDeviceHardwaresResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchDeviceHardwaresResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchDeviceHardwaresResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchDeviceHardwaresResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchDeviceHardwaresResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchDeviceHardwaresResponse"))
	}
	m.IsHardReset = fv
}

// Request message for method
// [CreateDeviceHardware][ntt.devices.v1.CreateDeviceHardware]
type CreateDeviceHardwareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.devices.v1.DeviceHardware
	Parent *device_hardware.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// DeviceHardware resource body
	DeviceHardware *device_hardware.DeviceHardware `protobuf:"bytes,2,opt,name=device_hardware,json=deviceHardware,proto3" json:"device_hardware,omitempty" firestore:"deviceHardware"`
}

func (m *CreateDeviceHardwareRequest) Reset() {
	*m = CreateDeviceHardwareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateDeviceHardwareRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateDeviceHardwareRequest) ProtoMessage() {}

func (m *CreateDeviceHardwareRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateDeviceHardwareRequest) GotenMessage() {}

// Deprecated, Use CreateDeviceHardwareRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceHardwareRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateDeviceHardwareRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateDeviceHardwareRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateDeviceHardwareRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateDeviceHardwareRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateDeviceHardwareRequest) GetParent() *device_hardware.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *CreateDeviceHardwareRequest) GetDeviceHardware() *device_hardware.DeviceHardware {
	if m != nil {
		return m.DeviceHardware
	}
	return nil
}

func (m *CreateDeviceHardwareRequest) SetParent(fv *device_hardware.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "CreateDeviceHardwareRequest"))
	}
	m.Parent = fv
}

func (m *CreateDeviceHardwareRequest) SetDeviceHardware(fv *device_hardware.DeviceHardware) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceHardware", "CreateDeviceHardwareRequest"))
	}
	m.DeviceHardware = fv
}

// Request message for method
// [UpdateDeviceHardware][ntt.devices.v1.UpdateDeviceHardware]
type UpdateDeviceHardwareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// DeviceHardware resource body
	DeviceHardware *device_hardware.DeviceHardware `protobuf:"bytes,2,opt,name=device_hardware,json=deviceHardware,proto3" json:"device_hardware,omitempty" firestore:"deviceHardware"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *device_hardware.DeviceHardware_FieldMask `protobuf:"bytes,3,opt,customtype=DeviceHardware_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateDeviceHardwareRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
	// If set to true, and the resource is not found,
	// a new resource will be created.  In this situation,
	// 'field_mask' is ignored.
	//
	// https://google.aip.dev/134#create-or-update
	AllowMissing bool `protobuf:"varint,5,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty" firestore:"allowMissing"`
}

func (m *UpdateDeviceHardwareRequest) Reset() {
	*m = UpdateDeviceHardwareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateDeviceHardwareRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateDeviceHardwareRequest) ProtoMessage() {}

func (m *UpdateDeviceHardwareRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateDeviceHardwareRequest) GotenMessage() {}

// Deprecated, Use UpdateDeviceHardwareRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceHardwareRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateDeviceHardwareRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateDeviceHardwareRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateDeviceHardwareRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateDeviceHardwareRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateDeviceHardwareRequest) GetDeviceHardware() *device_hardware.DeviceHardware {
	if m != nil {
		return m.DeviceHardware
	}
	return nil
}

func (m *UpdateDeviceHardwareRequest) GetUpdateMask() *device_hardware.DeviceHardware_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateDeviceHardwareRequest) GetCas() *UpdateDeviceHardwareRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateDeviceHardwareRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *UpdateDeviceHardwareRequest) SetDeviceHardware(fv *device_hardware.DeviceHardware) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceHardware", "UpdateDeviceHardwareRequest"))
	}
	m.DeviceHardware = fv
}

func (m *UpdateDeviceHardwareRequest) SetUpdateMask(fv *device_hardware.DeviceHardware_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateDeviceHardwareRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateDeviceHardwareRequest) SetCas(fv *UpdateDeviceHardwareRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateDeviceHardwareRequest"))
	}
	m.Cas = fv
}

func (m *UpdateDeviceHardwareRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "UpdateDeviceHardwareRequest"))
	}
	m.AllowMissing = fv
}

// Request message for method
// [DeleteDeviceHardware][ntt.devices.v1.DeleteDeviceHardware]
type DeleteDeviceHardwareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.devices.v1.DeviceHardware
	Name *device_hardware.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeleteDeviceHardwareRequest) Reset() {
	*m = DeleteDeviceHardwareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteDeviceHardwareRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteDeviceHardwareRequest) ProtoMessage() {}

func (m *DeleteDeviceHardwareRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteDeviceHardwareRequest) GotenMessage() {}

// Deprecated, Use DeleteDeviceHardwareRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceHardwareRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteDeviceHardwareRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteDeviceHardwareRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteDeviceHardwareRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteDeviceHardwareRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteDeviceHardwareRequest) GetName() *device_hardware.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteDeviceHardwareRequest) SetName(fv *device_hardware.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteDeviceHardwareRequest"))
	}
	m.Name = fv
}

type WatchDeviceHardwaresResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *device_hardware.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *device_hardware.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchDeviceHardwaresResponse_PageTokenChange) Reset() {
	*m = WatchDeviceHardwaresResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceHardwaresResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceHardwaresResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchDeviceHardwaresResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceHardwaresResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchDeviceHardwaresResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchDeviceHardwaresResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchDeviceHardwaresResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceHardwaresResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceHardwaresResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceHardwaresResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceHardwaresResponse_PageTokenChange) GetPrevPageToken() *device_hardware.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchDeviceHardwaresResponse_PageTokenChange) GetNextPageToken() *device_hardware.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchDeviceHardwaresResponse_PageTokenChange) SetPrevPageToken(fv *device_hardware.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchDeviceHardwaresResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchDeviceHardwaresResponse_PageTokenChange) SetNextPageToken(fv *device_hardware.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchDeviceHardwaresResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateDeviceHardwareRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *device_hardware.DeviceHardware `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *device_hardware.DeviceHardware_FieldMask `protobuf:"bytes,2,opt,customtype=DeviceHardware_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdateDeviceHardwareRequest_CAS) Reset() {
	*m = UpdateDeviceHardwareRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateDeviceHardwareRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateDeviceHardwareRequest_CAS) ProtoMessage() {}

func (m *UpdateDeviceHardwareRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateDeviceHardwareRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateDeviceHardwareRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateDeviceHardwareRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateDeviceHardwareRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateDeviceHardwareRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateDeviceHardwareRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateDeviceHardwareRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateDeviceHardwareRequest_CAS) GetConditionalState() *device_hardware.DeviceHardware {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateDeviceHardwareRequest_CAS) GetFieldMask() *device_hardware.DeviceHardware_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateDeviceHardwareRequest_CAS) SetConditionalState(fv *device_hardware.DeviceHardware) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateDeviceHardwareRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateDeviceHardwareRequest_CAS) SetFieldMask(fv *device_hardware.DeviceHardware_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateDeviceHardwareRequest_CAS"))
	}
	m.FieldMask = fv
}

var edgelq_devices_proto_v1_device_hardware_service_proto preflect.FileDescriptor

var edgelq_devices_proto_v1_device_hardware_service_proto_rawDesc = []byte{
	0x0a, 0x35, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x0a, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x16,
	0xb2, 0xda, 0x21, 0x12, 0x32, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xce, 0x01, 0x0a, 0x1e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12,
	0x0a, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x32,
	0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x9e, 0x01, 0x0a, 0x1f, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x0a,
	0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xb7, 0x03, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x3a,
	0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6,
	0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x22, 0x10, 0x0a, 0x0e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x2a,
	0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12,
	0x1a, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12,
	0x32, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbf, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x0f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x22, 0x10,
	0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x3e, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x22, 0x10,
	0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x1a, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x0a, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x51, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x32, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x5b, 0x0a, 0x1b, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xcc, 0x04, 0x0a, 0x1b, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x3a, 0x10, 0x0a, 0x0e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0xb2, 0xda, 0x21, 0x12, 0x22, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x2a, 0x10, 0x0a, 0x0e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x1a,
	0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x32,
	0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xca, 0xc6, 0x27,
	0x08, 0x12, 0x06, 0x1a, 0x02, 0x08, 0x64, 0x2a, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa9, 0x04, 0x0a, 0x1c, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x17, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a,
	0x91, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda,
	0x21, 0x12, 0x22, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda,
	0x21, 0x12, 0x22, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x3a, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x42, 0x0c, 0xc8, 0xd5,
	0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x22, 0xd9, 0x03, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08,
	0x01, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x12, 0x53, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x32, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x41, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x41, 0x53, 0x52, 0x03, 0x63, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x1a, 0xa5,
	0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x32, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x49, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x0a, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x82, 0x11, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x12, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x22, 0x6c, 0x82, 0xdb, 0x21,
	0x25, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xe7, 0x01, 0x0a, 0x17, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x82, 0xdb, 0x21, 0x39, 0x0a, 0x0e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x08, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01, 0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x32, 0x12, 0x12, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x8a,
	0xcc, 0x26, 0x00, 0x12, 0xef, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x82, 0xdb, 0x21, 0x38, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x12,
	0x12, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x73, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xe8, 0x01, 0x0a, 0x13, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x2a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x82, 0xdb, 0x21, 0x29, 0x0a, 0x0e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x05, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x39, 0x22, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01,
	0x12, 0x83, 0x02, 0x0a, 0x14, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x82, 0xdb, 0x21, 0x40, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x05, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x32, 0x19, 0x12, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0xfd, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12,
	0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x22, 0x97, 0x01, 0x82,
	0xdb, 0x21, 0x3d, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x12, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x2a, 0x19, 0x12,
	0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x3a, 0x0f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x22, 0x31, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73,
	0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0x83, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12,
	0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x22, 0x9d, 0x01, 0x82,
	0xdb, 0x21, 0x33, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x11, 0x12, 0x0f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x32, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x54, 0x3a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x1a, 0x41, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xc6, 0x01, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x69, 0x82, 0xdb, 0x21, 0x20,
	0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x2a, 0x31, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x8a,
	0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xcd, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x82, 0xdb, 0x21,
	0x24, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x12, 0x0a, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2a, 0x06, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3e, 0x22, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x8a,
	0xcc, 0x26, 0x02, 0x10, 0x01, 0x1a, 0x2f, 0xca, 0x41, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0xc4, 0x02, 0xe8, 0xde, 0x21, 0x00, 0x82, 0xff, 0xd0,
	0x02, 0x56, 0x0a, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x8a, 0xff, 0xd0, 0x02, 0x56, 0x0a, 0x16, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x1a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_devices_proto_v1_device_hardware_service_proto_rawDescOnce sync.Once
	edgelq_devices_proto_v1_device_hardware_service_proto_rawDescData = edgelq_devices_proto_v1_device_hardware_service_proto_rawDesc
)

func edgelq_devices_proto_v1_device_hardware_service_proto_rawDescGZIP() []byte {
	edgelq_devices_proto_v1_device_hardware_service_proto_rawDescOnce.Do(func() {
		edgelq_devices_proto_v1_device_hardware_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_devices_proto_v1_device_hardware_service_proto_rawDescData)
	})
	return edgelq_devices_proto_v1_device_hardware_service_proto_rawDescData
}

var edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var edgelq_devices_proto_v1_device_hardware_service_proto_goTypes = []interface{}{
	(*GetDeviceHardwareRequest)(nil),                     // 0: ntt.devices.v1.GetDeviceHardwareRequest
	(*BatchGetDeviceHardwaresRequest)(nil),               // 1: ntt.devices.v1.BatchGetDeviceHardwaresRequest
	(*BatchGetDeviceHardwaresResponse)(nil),              // 2: ntt.devices.v1.BatchGetDeviceHardwaresResponse
	(*ListDeviceHardwaresRequest)(nil),                   // 3: ntt.devices.v1.ListDeviceHardwaresRequest
	(*ListDeviceHardwaresResponse)(nil),                  // 4: ntt.devices.v1.ListDeviceHardwaresResponse
	(*WatchDeviceHardwareRequest)(nil),                   // 5: ntt.devices.v1.WatchDeviceHardwareRequest
	(*WatchDeviceHardwareResponse)(nil),                  // 6: ntt.devices.v1.WatchDeviceHardwareResponse
	(*WatchDeviceHardwaresRequest)(nil),                  // 7: ntt.devices.v1.WatchDeviceHardwaresRequest
	(*WatchDeviceHardwaresResponse)(nil),                 // 8: ntt.devices.v1.WatchDeviceHardwaresResponse
	(*CreateDeviceHardwareRequest)(nil),                  // 9: ntt.devices.v1.CreateDeviceHardwareRequest
	(*UpdateDeviceHardwareRequest)(nil),                  // 10: ntt.devices.v1.UpdateDeviceHardwareRequest
	(*DeleteDeviceHardwareRequest)(nil),                  // 11: ntt.devices.v1.DeleteDeviceHardwareRequest
	(*WatchDeviceHardwaresResponse_PageTokenChange)(nil), // 12: ntt.devices.v1.WatchDeviceHardwaresResponse.PageTokenChange
	(*UpdateDeviceHardwareRequest_CAS)(nil),              // 13: ntt.devices.v1.UpdateDeviceHardwareRequest.CAS
	(*device_hardware.DeviceHardware_FieldMask)(nil),     // 14: ntt.devices.v1.DeviceHardware_FieldMask
	(view.View)(0),                               // 15: goten.types.View
	(*device_hardware.DeviceHardware)(nil),       // 16: ntt.devices.v1.DeviceHardware
	(*device_hardware.DeviceHardwareChange)(nil), // 17: ntt.devices.v1.DeviceHardwareChange
	(watch_type.WatchType)(0),                    // 18: goten.types.WatchType
	(*timestamppb.Timestamp)(nil),                // 19: google.protobuf.Timestamp
	(*DeregisterRequest)(nil),                    // 20: ntt.devices.v1.DeregisterRequest
	(*emptypb.Empty)(nil),                        // 21: google.protobuf.Empty
	(*DeregisterResponse)(nil),                   // 22: ntt.devices.v1.DeregisterResponse
}
var edgelq_devices_proto_v1_device_hardware_service_proto_depIdxs = []int32{
	14, // 0: ntt.devices.v1.GetDeviceHardwareRequest.field_mask:type_name -> ntt.devices.v1.DeviceHardware_FieldMask
	15, // 1: ntt.devices.v1.GetDeviceHardwareRequest.view:type_name -> goten.types.View
	14, // 2: ntt.devices.v1.BatchGetDeviceHardwaresRequest.field_mask:type_name -> ntt.devices.v1.DeviceHardware_FieldMask
	15, // 3: ntt.devices.v1.BatchGetDeviceHardwaresRequest.view:type_name -> goten.types.View
	16, // 4: ntt.devices.v1.BatchGetDeviceHardwaresResponse.device_hardwares:type_name -> ntt.devices.v1.DeviceHardware
	14, // 5: ntt.devices.v1.ListDeviceHardwaresRequest.field_mask:type_name -> ntt.devices.v1.DeviceHardware_FieldMask
	15, // 6: ntt.devices.v1.ListDeviceHardwaresRequest.view:type_name -> goten.types.View
	16, // 7: ntt.devices.v1.ListDeviceHardwaresResponse.device_hardwares:type_name -> ntt.devices.v1.DeviceHardware
	14, // 8: ntt.devices.v1.WatchDeviceHardwareRequest.field_mask:type_name -> ntt.devices.v1.DeviceHardware_FieldMask
	15, // 9: ntt.devices.v1.WatchDeviceHardwareRequest.view:type_name -> goten.types.View
	17, // 10: ntt.devices.v1.WatchDeviceHardwareResponse.change:type_name -> ntt.devices.v1.DeviceHardwareChange
	18, // 11: ntt.devices.v1.WatchDeviceHardwaresRequest.type:type_name -> goten.types.WatchType
	19, // 12: ntt.devices.v1.WatchDeviceHardwaresRequest.starting_time:type_name -> google.protobuf.Timestamp
	14, // 13: ntt.devices.v1.WatchDeviceHardwaresRequest.field_mask:type_name -> ntt.devices.v1.DeviceHardware_FieldMask
	15, // 14: ntt.devices.v1.WatchDeviceHardwaresRequest.view:type_name -> goten.types.View
	17, // 15: ntt.devices.v1.WatchDeviceHardwaresResponse.device_hardware_changes:type_name -> ntt.devices.v1.DeviceHardwareChange
	12, // 16: ntt.devices.v1.WatchDeviceHardwaresResponse.page_token_change:type_name -> ntt.devices.v1.WatchDeviceHardwaresResponse.PageTokenChange
	16, // 17: ntt.devices.v1.CreateDeviceHardwareRequest.device_hardware:type_name -> ntt.devices.v1.DeviceHardware
	16, // 18: ntt.devices.v1.UpdateDeviceHardwareRequest.device_hardware:type_name -> ntt.devices.v1.DeviceHardware
	14, // 19: ntt.devices.v1.UpdateDeviceHardwareRequest.update_mask:type_name -> ntt.devices.v1.DeviceHardware_FieldMask
	13, // 20: ntt.devices.v1.UpdateDeviceHardwareRequest.cas:type_name -> ntt.devices.v1.UpdateDeviceHardwareRequest.CAS
	16, // 21: ntt.devices.v1.UpdateDeviceHardwareRequest.CAS.conditional_state:type_name -> ntt.devices.v1.DeviceHardware
	14, // 22: ntt.devices.v1.UpdateDeviceHardwareRequest.CAS.field_mask:type_name -> ntt.devices.v1.DeviceHardware_FieldMask
	0,  // 23: ntt.devices.v1.DeviceHardwareService.GetDeviceHardware:input_type -> ntt.devices.v1.GetDeviceHardwareRequest
	1,  // 24: ntt.devices.v1.DeviceHardwareService.BatchGetDeviceHardwares:input_type -> ntt.devices.v1.BatchGetDeviceHardwaresRequest
	3,  // 25: ntt.devices.v1.DeviceHardwareService.ListDeviceHardwares:input_type -> ntt.devices.v1.ListDeviceHardwaresRequest
	5,  // 26: ntt.devices.v1.DeviceHardwareService.WatchDeviceHardware:input_type -> ntt.devices.v1.WatchDeviceHardwareRequest
	7,  // 27: ntt.devices.v1.DeviceHardwareService.WatchDeviceHardwares:input_type -> ntt.devices.v1.WatchDeviceHardwaresRequest
	9,  // 28: ntt.devices.v1.DeviceHardwareService.CreateDeviceHardware:input_type -> ntt.devices.v1.CreateDeviceHardwareRequest
	10, // 29: ntt.devices.v1.DeviceHardwareService.UpdateDeviceHardware:input_type -> ntt.devices.v1.UpdateDeviceHardwareRequest
	11, // 30: ntt.devices.v1.DeviceHardwareService.DeleteDeviceHardware:input_type -> ntt.devices.v1.DeleteDeviceHardwareRequest
	20, // 31: ntt.devices.v1.DeviceHardwareService.Deregister:input_type -> ntt.devices.v1.DeregisterRequest
	16, // 32: ntt.devices.v1.DeviceHardwareService.GetDeviceHardware:output_type -> ntt.devices.v1.DeviceHardware
	2,  // 33: ntt.devices.v1.DeviceHardwareService.BatchGetDeviceHardwares:output_type -> ntt.devices.v1.BatchGetDeviceHardwaresResponse
	4,  // 34: ntt.devices.v1.DeviceHardwareService.ListDeviceHardwares:output_type -> ntt.devices.v1.ListDeviceHardwaresResponse
	6,  // 35: ntt.devices.v1.DeviceHardwareService.WatchDeviceHardware:output_type -> ntt.devices.v1.WatchDeviceHardwareResponse
	8,  // 36: ntt.devices.v1.DeviceHardwareService.WatchDeviceHardwares:output_type -> ntt.devices.v1.WatchDeviceHardwaresResponse
	16, // 37: ntt.devices.v1.DeviceHardwareService.CreateDeviceHardware:output_type -> ntt.devices.v1.DeviceHardware
	16, // 38: ntt.devices.v1.DeviceHardwareService.UpdateDeviceHardware:output_type -> ntt.devices.v1.DeviceHardware
	21, // 39: ntt.devices.v1.DeviceHardwareService.DeleteDeviceHardware:output_type -> google.protobuf.Empty
	22, // 40: ntt.devices.v1.DeviceHardwareService.Deregister:output_type -> ntt.devices.v1.DeregisterResponse
	32, // [32:41] is the sub-list for method output_type
	23, // [23:32] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { edgelq_devices_proto_v1_device_hardware_service_proto_init() }
func edgelq_devices_proto_v1_device_hardware_service_proto_init() {
	if edgelq_devices_proto_v1_device_hardware_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceHardwareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDeviceHardwaresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDeviceHardwaresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceHardwaresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceHardwaresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceHardwareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceHardwareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceHardwaresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceHardwaresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceHardwareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceHardwareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceHardwareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceHardwaresResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceHardwareRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_devices_proto_v1_device_hardware_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_devices_proto_v1_device_hardware_service_proto_goTypes,
		DependencyIndexes: edgelq_devices_proto_v1_device_hardware_service_proto_depIdxs,
		MessageInfos:      edgelq_devices_proto_v1_device_hardware_service_proto_msgTypes,
	}.Build()
	edgelq_devices_proto_v1_device_hardware_service_proto = out.File
	edgelq_devices_proto_v1_device_hardware_service_proto_rawDesc = nil
	edgelq_devices_proto_v1_device_hardware_service_proto_goTypes = nil
	edgelq_devices_proto_v1_device_hardware_service_proto_depIdxs = nil
}
