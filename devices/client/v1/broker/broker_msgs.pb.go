// Code generated by protoc-gen-goten-go
// File: edgelq/devices/proto/v1/broker_msgs.proto
// DO NOT EDIT!!!

package broker

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import ()

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var ()

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Broker dedicated messages
type BrokerServiceType int32

const (
	// Service type not specified
	BrokerServiceType_BROKER_SERVICE_UNSPECIFIED BrokerServiceType = 0
	// SSH service
	BrokerServiceType_BROKER_SERVICE_SSH_LEGACY BrokerServiceType = 1
	BrokerServiceType_BROKER_SERVICE_SSH        BrokerServiceType = 3
	// TCP port forward service
	BrokerServiceType_BROKER_SERVICE_TCP_FORWARD_PORT BrokerServiceType = 2
	// Reboot service
	BrokerServiceType_BROKER_SERVICE_REBOOT BrokerServiceType = 4
	// Shutdown service
	BrokerServiceType_BROKER_SERVICE_SHUTDOWN BrokerServiceType = 5
	// SCP service
	BrokerServiceType_BROKER_SERVICE_SCP        BrokerServiceType = 6
	BrokerServiceType_BROKER_SERVICE_SCP_LEGACY BrokerServiceType = 7
	// System Logs service
	BrokerServiceType_BROKER_SYS_LOGS BrokerServiceType = 8
	// Application (Container) Logs service
	BrokerServiceType_BROKER_APP_LOGS BrokerServiceType = 9
	// Pod State Management service
	BrokerServiceType_BROKER_POD_MANAGEMENT BrokerServiceType = 10
)

var (
	BrokerServiceType_name = map[int32]string{
		0:  "BROKER_SERVICE_UNSPECIFIED",
		1:  "BROKER_SERVICE_SSH_LEGACY",
		3:  "BROKER_SERVICE_SSH",
		2:  "BROKER_SERVICE_TCP_FORWARD_PORT",
		4:  "BROKER_SERVICE_REBOOT",
		5:  "BROKER_SERVICE_SHUTDOWN",
		6:  "BROKER_SERVICE_SCP",
		7:  "BROKER_SERVICE_SCP_LEGACY",
		8:  "BROKER_SYS_LOGS",
		9:  "BROKER_APP_LOGS",
		10: "BROKER_POD_MANAGEMENT",
	}

	BrokerServiceType_value = map[string]int32{
		"BROKER_SERVICE_UNSPECIFIED":      0,
		"BROKER_SERVICE_SSH_LEGACY":       1,
		"BROKER_SERVICE_SSH":              3,
		"BROKER_SERVICE_TCP_FORWARD_PORT": 2,
		"BROKER_SERVICE_REBOOT":           4,
		"BROKER_SERVICE_SHUTDOWN":         5,
		"BROKER_SERVICE_SCP":              6,
		"BROKER_SERVICE_SCP_LEGACY":       7,
		"BROKER_SYS_LOGS":                 8,
		"BROKER_APP_LOGS":                 9,
		"BROKER_POD_MANAGEMENT":           10,
	}
)

func (x BrokerServiceType) Enum() *BrokerServiceType {
	p := new(BrokerServiceType)
	*p = x
	return p
}

func (x BrokerServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (BrokerServiceType) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1_broker_msgs_proto_enumTypes[0].Descriptor()
}

func (BrokerServiceType) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1_broker_msgs_proto_enumTypes[0]
}

func (x BrokerServiceType) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use BrokerServiceType.ProtoReflect.Descriptor instead.
func (BrokerServiceType) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{0}
}

type SCPService_Configure_Direction int32

const (
	SCPService_Configure_DOWNLOAD SCPService_Configure_Direction = 0
	SCPService_Configure_UPLOAD   SCPService_Configure_Direction = 1
)

var (
	SCPService_Configure_Direction_name = map[int32]string{
		0: "DOWNLOAD",
		1: "UPLOAD",
	}

	SCPService_Configure_Direction_value = map[string]int32{
		"DOWNLOAD": 0,
		"UPLOAD":   1,
	}
)

func (x SCPService_Configure_Direction) Enum() *SCPService_Configure_Direction {
	p := new(SCPService_Configure_Direction)
	*p = x
	return p
}

func (x SCPService_Configure_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (SCPService_Configure_Direction) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1_broker_msgs_proto_enumTypes[1].Descriptor()
}

func (SCPService_Configure_Direction) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1_broker_msgs_proto_enumTypes[1]
}

func (x SCPService_Configure_Direction) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use SCPService_Configure_Direction.ProtoReflect.Descriptor instead.
func (SCPService_Configure_Direction) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{1, 0, 0}
}

// Commands for pod state management
type PodManagementService_PodState int32

const (
	// Unspecified pod state
	PodManagementService_UNSPECIFIED PodManagementService_PodState = 0
	// Start the pod
	PodManagementService_START PodManagementService_PodState = 1
	// Stop the pod
	PodManagementService_STOP PodManagementService_PodState = 2
	// Restart the pod
	PodManagementService_RESTART PodManagementService_PodState = 3
)

var (
	PodManagementService_PodState_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "START",
		2: "STOP",
		3: "RESTART",
	}

	PodManagementService_PodState_value = map[string]int32{
		"UNSPECIFIED": 0,
		"START":       1,
		"STOP":        2,
		"RESTART":     3,
	}
)

func (x PodManagementService_PodState) Enum() *PodManagementService_PodState {
	p := new(PodManagementService_PodState)
	*p = x
	return p
}

func (x PodManagementService_PodState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (PodManagementService_PodState) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1_broker_msgs_proto_enumTypes[2].Descriptor()
}

func (PodManagementService_PodState) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1_broker_msgs_proto_enumTypes[2]
}

func (x PodManagementService_PodState) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use PodManagementService_PodState.ProtoReflect.Descriptor instead.
func (PodManagementService_PodState) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{3, 0}
}

// Commands for system state management
type SystemStateService_SystemState int32

const (
	// Unspecified system state
	SystemStateService_UNSPECIFIED SystemStateService_SystemState = 0
	// Shutdown the system
	SystemStateService_SHUTDOWN SystemStateService_SystemState = 1
	// Reboot the system
	SystemStateService_REBOOT SystemStateService_SystemState = 2
)

var (
	SystemStateService_SystemState_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SHUTDOWN",
		2: "REBOOT",
	}

	SystemStateService_SystemState_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SHUTDOWN":    1,
		"REBOOT":      2,
	}
)

func (x SystemStateService_SystemState) Enum() *SystemStateService_SystemState {
	p := new(SystemStateService_SystemState)
	*p = x
	return p
}

func (x SystemStateService_SystemState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (SystemStateService_SystemState) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1_broker_msgs_proto_enumTypes[3].Descriptor()
}

func (SystemStateService_SystemState) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1_broker_msgs_proto_enumTypes[3]
}

func (x SystemStateService_SystemState) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use SystemStateService_SystemState.ProtoReflect.Descriptor instead.
func (SystemStateService_SystemState) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{4, 0}
}

// Services on the device that the client connects to
type SSHService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *SSHService) Reset() {
	*m = SSHService{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SSHService) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SSHService) ProtoMessage() {}

func (m *SSHService) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SSHService) GotenMessage() {}

// Deprecated, Use SSHService.ProtoReflect.Descriptor instead.
func (*SSHService) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{0}
}

func (m *SSHService) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SSHService) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SSHService) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SSHService) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type SCPService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*SCPService_Dir
	//	*SCPService_File
	//	*SCPService_Eot
	//	*SCPService_Config
	Msg isSCPService_Msg `protobuf_oneof:"msg"`
}

func (m *SCPService) Reset() {
	*m = SCPService{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SCPService) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SCPService) ProtoMessage() {}

func (m *SCPService) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SCPService) GotenMessage() {}

// Deprecated, Use SCPService.ProtoReflect.Descriptor instead.
func (*SCPService) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{1}
}

func (m *SCPService) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SCPService) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SCPService) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SCPService) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isSCPService_Msg interface {
	isSCPService_Msg()
}

type SCPService_Dir struct {
	// Request to create a directory
	Dir *SCPService_CreateDirectory `protobuf:"bytes,1,opt,name=dir,proto3,oneof" firestore:"dir"`
}
type SCPService_File struct {
	// Request to create a file
	File *SCPService_CreateFile `protobuf:"bytes,2,opt,name=file,proto3,oneof" firestore:"file"`
}
type SCPService_Eot struct {
	// Request to end SCP transfer
	Eot bool `protobuf:"varint,3,opt,name=eot,proto3,oneof" firestore:"eot"`
}
type SCPService_Config struct {
	// Request SCP configuration
	Config *SCPService_Configure `protobuf:"bytes,4,opt,name=config,proto3,oneof" firestore:"config"`
}

func (*SCPService_Dir) isSCPService_Msg()    {}
func (*SCPService_File) isSCPService_Msg()   {}
func (*SCPService_Eot) isSCPService_Msg()    {}
func (*SCPService_Config) isSCPService_Msg() {}
func (m *SCPService) GetMsg() isSCPService_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *SCPService) GetDir() *SCPService_CreateDirectory {
	if x, ok := m.GetMsg().(*SCPService_Dir); ok {
		return x.Dir
	}
	return nil
}
func (m *SCPService) GetFile() *SCPService_CreateFile {
	if x, ok := m.GetMsg().(*SCPService_File); ok {
		return x.File
	}
	return nil
}
func (m *SCPService) GetEot() bool {
	if x, ok := m.GetMsg().(*SCPService_Eot); ok {
		return x.Eot
	}
	return false
}
func (m *SCPService) GetConfig() *SCPService_Configure {
	if x, ok := m.GetMsg().(*SCPService_Config); ok {
		return x.Config
	}
	return nil
}
func (m *SCPService) SetMsg(ofv isSCPService_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isSCPService_Msg", "SCPService"))
	}
	m.Msg = ofv
}
func (m *SCPService) SetDir(fv *SCPService_CreateDirectory) {
	m.SetMsg(&SCPService_Dir{Dir: fv})
}
func (m *SCPService) SetFile(fv *SCPService_CreateFile) {
	m.SetMsg(&SCPService_File{File: fv})
}
func (m *SCPService) SetEot(fv bool) {
	m.SetMsg(&SCPService_Eot{Eot: fv})
}
func (m *SCPService) SetConfig(fv *SCPService_Configure) {
	m.SetMsg(&SCPService_Config{Config: fv})
}

type LogsService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *LogsService) Reset() {
	*m = LogsService{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogsService) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogsService) ProtoMessage() {}

func (m *LogsService) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogsService) GotenMessage() {}

// Deprecated, Use LogsService.ProtoReflect.Descriptor instead.
func (*LogsService) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{2}
}

func (m *LogsService) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogsService) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogsService) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogsService) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type PodManagementService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Pod state command
	Command PodManagementService_PodState `protobuf:"varint,1,opt,name=command,proto3,enum=ntt.devices.v1.PodManagementService_PodState" json:"command,omitempty" firestore:"command"`
	// Pod to execute the command on
	Pod string `protobuf:"bytes,2,opt,name=pod,proto3" json:"pod,omitempty" firestore:"pod"`
	// Service (container) name to execute the command on (empty = acts on the
	// entire pod)
	Service string `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty" firestore:"service"`
}

func (m *PodManagementService) Reset() {
	*m = PodManagementService{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PodManagementService) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PodManagementService) ProtoMessage() {}

func (m *PodManagementService) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PodManagementService) GotenMessage() {}

// Deprecated, Use PodManagementService.ProtoReflect.Descriptor instead.
func (*PodManagementService) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{3}
}

func (m *PodManagementService) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PodManagementService) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PodManagementService) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PodManagementService) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PodManagementService) GetCommand() PodManagementService_PodState {
	if m != nil {
		return m.Command
	}
	return PodManagementService_UNSPECIFIED
}

func (m *PodManagementService) GetPod() string {
	if m != nil {
		return m.Pod
	}
	return ""
}

func (m *PodManagementService) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *PodManagementService) SetCommand(fv PodManagementService_PodState) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Command", "PodManagementService"))
	}
	m.Command = fv
}

func (m *PodManagementService) SetPod(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Pod", "PodManagementService"))
	}
	m.Pod = fv
}

func (m *PodManagementService) SetService(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "PodManagementService"))
	}
	m.Service = fv
}

type SystemStateService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *SystemStateService) Reset() {
	*m = SystemStateService{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SystemStateService) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SystemStateService) ProtoMessage() {}

func (m *SystemStateService) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SystemStateService) GotenMessage() {}

// Deprecated, Use SystemStateService.ProtoReflect.Descriptor instead.
func (*SystemStateService) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{4}
}

func (m *SystemStateService) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SystemStateService) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SystemStateService) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SystemStateService) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type SSHService_Hello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	User          string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" firestore:"user"`
	Command       []string `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty" firestore:"command"`
	// Environment (optional)
	Env map[string]string `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"env"`
}

func (m *SSHService_Hello) Reset() {
	*m = SSHService_Hello{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SSHService_Hello) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SSHService_Hello) ProtoMessage() {}

func (m *SSHService_Hello) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SSHService_Hello) GotenMessage() {}

// Deprecated, Use SSHService_Hello.ProtoReflect.Descriptor instead.
func (*SSHService_Hello) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{0, 0}
}

func (m *SSHService_Hello) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SSHService_Hello) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SSHService_Hello) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SSHService_Hello) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SSHService_Hello) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *SSHService_Hello) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *SSHService_Hello) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *SSHService_Hello) SetUser(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "User", "SSHService_Hello"))
	}
	m.User = fv
}

func (m *SSHService_Hello) SetCommand(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Command", "SSHService_Hello"))
	}
	m.Command = fv
}

func (m *SSHService_Hello) SetEnv(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Env", "SSHService_Hello"))
	}
	m.Env = fv
}

type SSHService_TerminalSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Width         uint32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty" firestore:"width"`
	Height        uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty" firestore:"height"`
}

func (m *SSHService_TerminalSize) Reset() {
	*m = SSHService_TerminalSize{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SSHService_TerminalSize) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SSHService_TerminalSize) ProtoMessage() {}

func (m *SSHService_TerminalSize) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SSHService_TerminalSize) GotenMessage() {}

// Deprecated, Use SSHService_TerminalSize.ProtoReflect.Descriptor instead.
func (*SSHService_TerminalSize) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{0, 1}
}

func (m *SSHService_TerminalSize) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SSHService_TerminalSize) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SSHService_TerminalSize) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SSHService_TerminalSize) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SSHService_TerminalSize) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return uint32(0)
}

func (m *SSHService_TerminalSize) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return uint32(0)
}

func (m *SSHService_TerminalSize) SetWidth(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Width", "SSHService_TerminalSize"))
	}
	m.Width = fv
}

func (m *SSHService_TerminalSize) SetHeight(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Height", "SSHService_TerminalSize"))
	}
	m.Height = fv
}

type SSHService_ClientOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*SSHService_ClientOut_Data
	//	*SSHService_ClientOut_SshHello
	//	*SSHService_ClientOut_SshResizeTerminal
	Msg isSSHService_ClientOut_Msg `protobuf_oneof:"msg"`
}

func (m *SSHService_ClientOut) Reset() {
	*m = SSHService_ClientOut{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SSHService_ClientOut) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SSHService_ClientOut) ProtoMessage() {}

func (m *SSHService_ClientOut) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SSHService_ClientOut) GotenMessage() {}

// Deprecated, Use SSHService_ClientOut.ProtoReflect.Descriptor instead.
func (*SSHService_ClientOut) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{0, 2}
}

func (m *SSHService_ClientOut) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SSHService_ClientOut) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SSHService_ClientOut) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SSHService_ClientOut) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isSSHService_ClientOut_Msg interface {
	isSSHService_ClientOut_Msg()
}

type SSHService_ClientOut_Data struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3,oneof" firestore:"data"`
}
type SSHService_ClientOut_SshHello struct {
	SshHello *SSHService_Hello `protobuf:"bytes,2,opt,name=ssh_hello,json=sshHello,proto3,oneof" firestore:"sshHello"`
}
type SSHService_ClientOut_SshResizeTerminal struct {
	SshResizeTerminal *SSHService_TerminalSize `protobuf:"bytes,3,opt,name=ssh_resize_terminal,json=sshResizeTerminal,proto3,oneof" firestore:"sshResizeTerminal"`
}

func (*SSHService_ClientOut_Data) isSSHService_ClientOut_Msg()              {}
func (*SSHService_ClientOut_SshHello) isSSHService_ClientOut_Msg()          {}
func (*SSHService_ClientOut_SshResizeTerminal) isSSHService_ClientOut_Msg() {}
func (m *SSHService_ClientOut) GetMsg() isSSHService_ClientOut_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *SSHService_ClientOut) GetData() []byte {
	if x, ok := m.GetMsg().(*SSHService_ClientOut_Data); ok {
		return x.Data
	}
	return nil
}
func (m *SSHService_ClientOut) GetSshHello() *SSHService_Hello {
	if x, ok := m.GetMsg().(*SSHService_ClientOut_SshHello); ok {
		return x.SshHello
	}
	return nil
}
func (m *SSHService_ClientOut) GetSshResizeTerminal() *SSHService_TerminalSize {
	if x, ok := m.GetMsg().(*SSHService_ClientOut_SshResizeTerminal); ok {
		return x.SshResizeTerminal
	}
	return nil
}
func (m *SSHService_ClientOut) SetMsg(ofv isSSHService_ClientOut_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isSSHService_ClientOut_Msg", "SSHService_ClientOut"))
	}
	m.Msg = ofv
}
func (m *SSHService_ClientOut) SetData(fv []byte) {
	m.SetMsg(&SSHService_ClientOut_Data{Data: fv})
}
func (m *SSHService_ClientOut) SetSshHello(fv *SSHService_Hello) {
	m.SetMsg(&SSHService_ClientOut_SshHello{SshHello: fv})
}
func (m *SSHService_ClientOut) SetSshResizeTerminal(fv *SSHService_TerminalSize) {
	m.SetMsg(&SSHService_ClientOut_SshResizeTerminal{SshResizeTerminal: fv})
}

type SSHService_ClientIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*SSHService_ClientIn_Data
	Msg isSSHService_ClientIn_Msg `protobuf_oneof:"msg"`
}

func (m *SSHService_ClientIn) Reset() {
	*m = SSHService_ClientIn{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SSHService_ClientIn) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SSHService_ClientIn) ProtoMessage() {}

func (m *SSHService_ClientIn) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SSHService_ClientIn) GotenMessage() {}

// Deprecated, Use SSHService_ClientIn.ProtoReflect.Descriptor instead.
func (*SSHService_ClientIn) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{0, 3}
}

func (m *SSHService_ClientIn) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SSHService_ClientIn) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SSHService_ClientIn) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SSHService_ClientIn) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isSSHService_ClientIn_Msg interface {
	isSSHService_ClientIn_Msg()
}

type SSHService_ClientIn_Data struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3,oneof" firestore:"data"`
}

func (*SSHService_ClientIn_Data) isSSHService_ClientIn_Msg() {}
func (m *SSHService_ClientIn) GetMsg() isSSHService_ClientIn_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *SSHService_ClientIn) GetData() []byte {
	if x, ok := m.GetMsg().(*SSHService_ClientIn_Data); ok {
		return x.Data
	}
	return nil
}
func (m *SSHService_ClientIn) SetMsg(ofv isSSHService_ClientIn_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isSSHService_ClientIn_Msg", "SSHService_ClientIn"))
	}
	m.Msg = ofv
}
func (m *SSHService_ClientIn) SetData(fv []byte) {
	m.SetMsg(&SSHService_ClientIn_Data{Data: fv})
}

type SCPService_Configure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Recursive     bool                           `protobuf:"varint,1,opt,name=recursive,proto3" json:"recursive,omitempty" firestore:"recursive"`
	Direction     SCPService_Configure_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=ntt.devices.v1.SCPService_Configure_Direction" json:"direction,omitempty" firestore:"direction"`
	Path          string                         `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty" firestore:"path"`
}

func (m *SCPService_Configure) Reset() {
	*m = SCPService_Configure{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SCPService_Configure) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SCPService_Configure) ProtoMessage() {}

func (m *SCPService_Configure) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SCPService_Configure) GotenMessage() {}

// Deprecated, Use SCPService_Configure.ProtoReflect.Descriptor instead.
func (*SCPService_Configure) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{1, 0}
}

func (m *SCPService_Configure) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SCPService_Configure) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SCPService_Configure) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SCPService_Configure) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SCPService_Configure) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

func (m *SCPService_Configure) GetDirection() SCPService_Configure_Direction {
	if m != nil {
		return m.Direction
	}
	return SCPService_Configure_DOWNLOAD
}

func (m *SCPService_Configure) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SCPService_Configure) SetRecursive(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Recursive", "SCPService_Configure"))
	}
	m.Recursive = fv
}

func (m *SCPService_Configure) SetDirection(fv SCPService_Configure_Direction) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Direction", "SCPService_Configure"))
	}
	m.Direction = fv
}

func (m *SCPService_Configure) SetPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Path", "SCPService_Configure"))
	}
	m.Path = fv
}

type SCPService_CreateDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty" firestore:"path"`
	Mode          uint32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty" firestore:"mode"`
}

func (m *SCPService_CreateDirectory) Reset() {
	*m = SCPService_CreateDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SCPService_CreateDirectory) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SCPService_CreateDirectory) ProtoMessage() {}

func (m *SCPService_CreateDirectory) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SCPService_CreateDirectory) GotenMessage() {}

// Deprecated, Use SCPService_CreateDirectory.ProtoReflect.Descriptor instead.
func (*SCPService_CreateDirectory) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{1, 1}
}

func (m *SCPService_CreateDirectory) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SCPService_CreateDirectory) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SCPService_CreateDirectory) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SCPService_CreateDirectory) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SCPService_CreateDirectory) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SCPService_CreateDirectory) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return uint32(0)
}

func (m *SCPService_CreateDirectory) SetPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Path", "SCPService_CreateDirectory"))
	}
	m.Path = fv
}

func (m *SCPService_CreateDirectory) SetMode(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "SCPService_CreateDirectory"))
	}
	m.Mode = fv
}

type SCPService_CreateFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*SCPService_CreateFile_Init
	//	*SCPService_CreateFile_Data
	//	*SCPService_CreateFile_Eof
	Msg isSCPService_CreateFile_Msg `protobuf_oneof:"msg"`
}

func (m *SCPService_CreateFile) Reset() {
	*m = SCPService_CreateFile{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SCPService_CreateFile) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SCPService_CreateFile) ProtoMessage() {}

func (m *SCPService_CreateFile) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SCPService_CreateFile) GotenMessage() {}

// Deprecated, Use SCPService_CreateFile.ProtoReflect.Descriptor instead.
func (*SCPService_CreateFile) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{1, 2}
}

func (m *SCPService_CreateFile) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SCPService_CreateFile) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SCPService_CreateFile) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SCPService_CreateFile) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isSCPService_CreateFile_Msg interface {
	isSCPService_CreateFile_Msg()
}

type SCPService_CreateFile_Init struct {
	// Request file initialization
	Init *SCPService_CreateFile_Initialize `protobuf:"bytes,1,opt,name=init,proto3,oneof" firestore:"init"`
}
type SCPService_CreateFile_Data struct {
	// Request file data
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof" firestore:"data"`
}
type SCPService_CreateFile_Eof struct {
	// Request to end file transfer
	Eof bool `protobuf:"varint,3,opt,name=eof,proto3,oneof" firestore:"eof"`
}

func (*SCPService_CreateFile_Init) isSCPService_CreateFile_Msg() {}
func (*SCPService_CreateFile_Data) isSCPService_CreateFile_Msg() {}
func (*SCPService_CreateFile_Eof) isSCPService_CreateFile_Msg()  {}
func (m *SCPService_CreateFile) GetMsg() isSCPService_CreateFile_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *SCPService_CreateFile) GetInit() *SCPService_CreateFile_Initialize {
	if x, ok := m.GetMsg().(*SCPService_CreateFile_Init); ok {
		return x.Init
	}
	return nil
}
func (m *SCPService_CreateFile) GetData() []byte {
	if x, ok := m.GetMsg().(*SCPService_CreateFile_Data); ok {
		return x.Data
	}
	return nil
}
func (m *SCPService_CreateFile) GetEof() bool {
	if x, ok := m.GetMsg().(*SCPService_CreateFile_Eof); ok {
		return x.Eof
	}
	return false
}
func (m *SCPService_CreateFile) SetMsg(ofv isSCPService_CreateFile_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isSCPService_CreateFile_Msg", "SCPService_CreateFile"))
	}
	m.Msg = ofv
}
func (m *SCPService_CreateFile) SetInit(fv *SCPService_CreateFile_Initialize) {
	m.SetMsg(&SCPService_CreateFile_Init{Init: fv})
}
func (m *SCPService_CreateFile) SetData(fv []byte) {
	m.SetMsg(&SCPService_CreateFile_Data{Data: fv})
}
func (m *SCPService_CreateFile) SetEof(fv bool) {
	m.SetMsg(&SCPService_CreateFile_Eof{Eof: fv})
}

type SCPService_CreateFile_Initialize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty" firestore:"path"`
	Mode          uint32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty" firestore:"mode"`
	Size          uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty" firestore:"size"`
}

func (m *SCPService_CreateFile_Initialize) Reset() {
	*m = SCPService_CreateFile_Initialize{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SCPService_CreateFile_Initialize) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SCPService_CreateFile_Initialize) ProtoMessage() {}

func (m *SCPService_CreateFile_Initialize) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SCPService_CreateFile_Initialize) GotenMessage() {}

// Deprecated, Use SCPService_CreateFile_Initialize.ProtoReflect.Descriptor instead.
func (*SCPService_CreateFile_Initialize) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (m *SCPService_CreateFile_Initialize) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SCPService_CreateFile_Initialize) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SCPService_CreateFile_Initialize) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SCPService_CreateFile_Initialize) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SCPService_CreateFile_Initialize) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SCPService_CreateFile_Initialize) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return uint32(0)
}

func (m *SCPService_CreateFile_Initialize) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return uint64(0)
}

func (m *SCPService_CreateFile_Initialize) SetPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Path", "SCPService_CreateFile_Initialize"))
	}
	m.Path = fv
}

func (m *SCPService_CreateFile_Initialize) SetMode(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "SCPService_CreateFile_Initialize"))
	}
	m.Mode = fv
}

func (m *SCPService_CreateFile_Initialize) SetSize(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Size", "SCPService_CreateFile_Initialize"))
	}
	m.Size = fv
}

// Messages sent only to a device
type LogsService_ToDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Live follow the logs service
	Follow bool `protobuf:"varint,1,opt,name=follow,proto3" json:"follow,omitempty" firestore:"follow"`
	// Number of lines to get from the logs service
	Lines uint32 `protobuf:"varint,2,opt,name=lines,proto3" json:"lines,omitempty" firestore:"lines"`
	// Source of the logs service (e.g. docker container ID)
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty" firestore:"source"`
}

func (m *LogsService_ToDevice) Reset() {
	*m = LogsService_ToDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogsService_ToDevice) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogsService_ToDevice) ProtoMessage() {}

func (m *LogsService_ToDevice) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogsService_ToDevice) GotenMessage() {}

// Deprecated, Use LogsService_ToDevice.ProtoReflect.Descriptor instead.
func (*LogsService_ToDevice) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{2, 0}
}

func (m *LogsService_ToDevice) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogsService_ToDevice) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogsService_ToDevice) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogsService_ToDevice) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogsService_ToDevice) GetFollow() bool {
	if m != nil {
		return m.Follow
	}
	return false
}

func (m *LogsService_ToDevice) GetLines() uint32 {
	if m != nil {
		return m.Lines
	}
	return uint32(0)
}

func (m *LogsService_ToDevice) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *LogsService_ToDevice) SetFollow(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Follow", "LogsService_ToDevice"))
	}
	m.Follow = fv
}

func (m *LogsService_ToDevice) SetLines(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Lines", "LogsService_ToDevice"))
	}
	m.Lines = fv
}

func (m *LogsService_ToDevice) SetSource(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Source", "LogsService_ToDevice"))
	}
	m.Source = fv
}

// Messages sent only to a client
type LogsService_ToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Logs data
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" firestore:"data"`
}

func (m *LogsService_ToClient) Reset() {
	*m = LogsService_ToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogsService_ToClient) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogsService_ToClient) ProtoMessage() {}

func (m *LogsService_ToClient) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogsService_ToClient) GotenMessage() {}

// Deprecated, Use LogsService_ToClient.ProtoReflect.Descriptor instead.
func (*LogsService_ToClient) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP(), []int{2, 1}
}

func (m *LogsService_ToClient) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogsService_ToClient) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogsService_ToClient) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogsService_ToClient) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogsService_ToClient) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LogsService_ToClient) SetData(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Data", "LogsService_ToClient"))
	}
	m.Data = fv
}

var edgelq_devices_proto_v1_broker_msgs_proto preflect.FileDescriptor

var edgelq_devices_proto_v1_broker_msgs_proto_rawDesc = []byte{
	0x0a, 0x29, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x03, 0x0a,
	0x0a, 0x53, 0x53, 0x48, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0xaa, 0x01, 0x0a, 0x05,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x53, 0x48, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76,
	0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0c, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xc4, 0x01, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x73,
	0x68, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x53, 0x48, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x73, 0x68, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x59, 0x0a, 0x13, 0x73,
	0x73, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x53, 0x48, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x73, 0x68, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x1a, 0x27, 0x0a,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xa6, 0x05, 0x0a, 0x0a, 0x53, 0x43, 0x50, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x3b, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x03, 0x65, 0x6f, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xb2, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x76, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x22, 0x25, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x1a, 0x39, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0xcf, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x03, 0x65, 0x6f, 0x66, 0x1a, 0x48, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x7f, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x50,
	0x0a, 0x08, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x1a, 0x1e, 0x0a, 0x08, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xca, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x3d,
	0x0a, 0x08, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x03, 0x22, 0x4e, 0x0a,
	0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x02, 0x2a, 0xc3, 0x02,
	0x0a, 0x11, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x53, 0x48, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x53, 0x48, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x52,
	0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x43, 0x50,
	0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x52,
	0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x48, 0x55,
	0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x4f, 0x4b, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x43, 0x50, 0x10, 0x06, 0x12,
	0x1d, 0x0a, 0x19, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x43, 0x50, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x10, 0x07, 0x12, 0x13,
	0x0a, 0x0f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x4c, 0x4f, 0x47,
	0x53, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x50,
	0x50, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x52, 0x4f, 0x4b,
	0x45, 0x52, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x0a, 0x42, 0x61, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x00, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_devices_proto_v1_broker_msgs_proto_rawDescOnce sync.Once
	edgelq_devices_proto_v1_broker_msgs_proto_rawDescData = edgelq_devices_proto_v1_broker_msgs_proto_rawDesc
)

func edgelq_devices_proto_v1_broker_msgs_proto_rawDescGZIP() []byte {
	edgelq_devices_proto_v1_broker_msgs_proto_rawDescOnce.Do(func() {
		edgelq_devices_proto_v1_broker_msgs_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_devices_proto_v1_broker_msgs_proto_rawDescData)
	})
	return edgelq_devices_proto_v1_broker_msgs_proto_rawDescData
}

var edgelq_devices_proto_v1_broker_msgs_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var edgelq_devices_proto_v1_broker_msgs_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var edgelq_devices_proto_v1_broker_msgs_proto_goTypes = []interface{}{
	(BrokerServiceType)(0),                   // 0: ntt.devices.v1.BrokerServiceType
	(SCPService_Configure_Direction)(0),      // 1: ntt.devices.v1.SCPService_Configure_Direction
	(PodManagementService_PodState)(0),       // 2: ntt.devices.v1.PodManagementService_PodState
	(SystemStateService_SystemState)(0),      // 3: ntt.devices.v1.SystemStateService_SystemState
	(*SSHService)(nil),                       // 4: ntt.devices.v1.SSHService
	(*SCPService)(nil),                       // 5: ntt.devices.v1.SCPService
	(*LogsService)(nil),                      // 6: ntt.devices.v1.LogsService
	(*PodManagementService)(nil),             // 7: ntt.devices.v1.PodManagementService
	(*SystemStateService)(nil),               // 8: ntt.devices.v1.SystemStateService
	(*SSHService_Hello)(nil),                 // 9: ntt.devices.v1.SSHService.Hello
	(*SSHService_TerminalSize)(nil),          // 10: ntt.devices.v1.SSHService.TerminalSize
	(*SSHService_ClientOut)(nil),             // 11: ntt.devices.v1.SSHService.ClientOut
	(*SSHService_ClientIn)(nil),              // 12: ntt.devices.v1.SSHService.ClientIn
	nil,                                      // 13: ntt.devices.v1.SSHService.Hello.EnvEntry
	(*SCPService_Configure)(nil),             // 14: ntt.devices.v1.SCPService.Configure
	(*SCPService_CreateDirectory)(nil),       // 15: ntt.devices.v1.SCPService.CreateDirectory
	(*SCPService_CreateFile)(nil),            // 16: ntt.devices.v1.SCPService.CreateFile
	(*SCPService_CreateFile_Initialize)(nil), // 17: ntt.devices.v1.SCPService.CreateFile.Initialize
	(*LogsService_ToDevice)(nil),             // 18: ntt.devices.v1.LogsService.ToDevice
	(*LogsService_ToClient)(nil),             // 19: ntt.devices.v1.LogsService.ToClient
}
var edgelq_devices_proto_v1_broker_msgs_proto_depIdxs = []int32{
	15, // 0: ntt.devices.v1.SCPService.dir:type_name -> ntt.devices.v1.SCPService.CreateDirectory
	16, // 1: ntt.devices.v1.SCPService.file:type_name -> ntt.devices.v1.SCPService.CreateFile
	14, // 2: ntt.devices.v1.SCPService.config:type_name -> ntt.devices.v1.SCPService.Configure
	2,  // 3: ntt.devices.v1.PodManagementService.command:type_name -> ntt.devices.v1.PodManagementService_PodState
	13, // 4: ntt.devices.v1.SSHService.Hello.env:type_name -> ntt.devices.v1.SSHService.Hello.EnvEntry
	9,  // 5: ntt.devices.v1.SSHService.ClientOut.ssh_hello:type_name -> ntt.devices.v1.SSHService.Hello
	10, // 6: ntt.devices.v1.SSHService.ClientOut.ssh_resize_terminal:type_name -> ntt.devices.v1.SSHService.TerminalSize
	1,  // 7: ntt.devices.v1.SCPService.Configure.direction:type_name -> ntt.devices.v1.SCPService_Configure_Direction
	17, // 8: ntt.devices.v1.SCPService.CreateFile.init:type_name -> ntt.devices.v1.SCPService.CreateFile.Initialize
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { edgelq_devices_proto_v1_broker_msgs_proto_init() }
func edgelq_devices_proto_v1_broker_msgs_proto_init() {
	if edgelq_devices_proto_v1_broker_msgs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCPService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodManagementService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStateService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHService_Hello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHService_TerminalSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHService_ClientOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHService_ClientIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCPService_Configure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCPService_CreateDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCPService_CreateFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCPService_CreateFile_Initialize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsService_ToDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsService_ToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SCPService_Dir)(nil),
		(*SCPService_File)(nil),
		(*SCPService_Eot)(nil),
		(*SCPService_Config)(nil),
	}
	edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SSHService_ClientOut_Data)(nil),
		(*SSHService_ClientOut_SshHello)(nil),
		(*SSHService_ClientOut_SshResizeTerminal)(nil),
	}
	edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SSHService_ClientIn_Data)(nil),
	}
	edgelq_devices_proto_v1_broker_msgs_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*SCPService_CreateFile_Init)(nil),
		(*SCPService_CreateFile_Data)(nil),
		(*SCPService_CreateFile_Eof)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_devices_proto_v1_broker_msgs_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_devices_proto_v1_broker_msgs_proto_goTypes,
		DependencyIndexes: edgelq_devices_proto_v1_broker_msgs_proto_depIdxs,
		EnumInfos:         edgelq_devices_proto_v1_broker_msgs_proto_enumTypes,
		MessageInfos:      edgelq_devices_proto_v1_broker_msgs_proto_msgTypes,
	}.Build()
	edgelq_devices_proto_v1_broker_msgs_proto = out.File
	edgelq_devices_proto_v1_broker_msgs_proto_rawDesc = nil
	edgelq_devices_proto_v1_broker_msgs_proto_goTypes = nil
	edgelq_devices_proto_v1_broker_msgs_proto_depIdxs = nil
}
