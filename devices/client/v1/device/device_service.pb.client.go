// Code generated by protoc-gen-goten-client
// API: DeviceService
// DO NOT EDIT!!!

package device_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceServiceClient is the client API for DeviceService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceServiceClient interface {
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*device.Device, error)
	BatchGetDevices(ctx context.Context, in *BatchGetDevicesRequest, opts ...grpc.CallOption) (*BatchGetDevicesResponse, error)
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	WatchDevice(ctx context.Context, in *WatchDeviceRequest, opts ...grpc.CallOption) (WatchDeviceClientStream, error)
	WatchDevices(ctx context.Context, in *WatchDevicesRequest, opts ...grpc.CallOption) (WatchDevicesClientStream, error)
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*device.Device, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*device.Device, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProvisionServiceAccountToDevice(ctx context.Context, in *ProvisionServiceAccountToDeviceRequest, opts ...grpc.CallOption) (*ProvisionServiceAccountToDeviceResponse, error)
	RemoveServiceAccountFromDevice(ctx context.Context, in *RemoveServiceAccountFromDeviceRequest, opts ...grpc.CallOption) (*RemoveServiceAccountFromDeviceResponse, error)
	Heartbeat(ctx context.Context, opts ...grpc.CallOption) (HeartbeatClientStream, error)
	ReportDeviceMetrics(ctx context.Context, opts ...grpc.CallOption) (ReportDeviceMetricsClientStream, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &client{cc}
}

func (c *client) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*device.Device, error) {
	out := new(device.Device)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceService/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetDevices(ctx context.Context, in *BatchGetDevicesRequest, opts ...grpc.CallOption) (*BatchGetDevicesResponse, error) {
	out := new(BatchGetDevicesResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceService/BatchGetDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceService/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchDevice(ctx context.Context, in *WatchDeviceRequest, opts ...grpc.CallOption) (WatchDeviceClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchDevice",
			ServerStreams: true,
		},
		"/ntt.devices.v1.DeviceService/WatchDevice", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchDeviceWatchDeviceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchDeviceClientStream interface {
	Recv() (*WatchDeviceResponse, error)
	grpc.ClientStream
}

type watchDeviceWatchDeviceClient struct {
	grpc.ClientStream
}

func (x *watchDeviceWatchDeviceClient) Recv() (*WatchDeviceResponse, error) {
	m := new(WatchDeviceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchDevices(ctx context.Context, in *WatchDevicesRequest, opts ...grpc.CallOption) (WatchDevicesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchDevices",
			ServerStreams: true,
		},
		"/ntt.devices.v1.DeviceService/WatchDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchDevicesWatchDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchDevicesClientStream interface {
	Recv() (*WatchDevicesResponse, error)
	grpc.ClientStream
}

type watchDevicesWatchDevicesClient struct {
	grpc.ClientStream
}

func (x *watchDevicesWatchDevicesClient) Recv() (*WatchDevicesResponse, error) {
	m := new(WatchDevicesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*device.Device, error) {
	out := new(device.Device)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceService/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*device.Device, error) {
	out := new(device.Device)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceService/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceService/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ProvisionServiceAccountToDevice(ctx context.Context, in *ProvisionServiceAccountToDeviceRequest, opts ...grpc.CallOption) (*ProvisionServiceAccountToDeviceResponse, error) {
	out := new(ProvisionServiceAccountToDeviceResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceService/ProvisionServiceAccountToDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) RemoveServiceAccountFromDevice(ctx context.Context, in *RemoveServiceAccountFromDeviceRequest, opts ...grpc.CallOption) (*RemoveServiceAccountFromDeviceResponse, error) {
	out := new(RemoveServiceAccountFromDeviceResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceService/RemoveServiceAccountFromDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (HeartbeatClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "Heartbeat",
			ServerStreams: true,
			ClientStreams: true,
		},
		"/ntt.devices.v1.DeviceService/Heartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &heartbeatHeartbeatClient{stream}
	return x, nil
}

type HeartbeatClientStream interface {
	Send(*HeartbeatMsg) error
	Recv() (*HeartbeatResponse, error)
	grpc.ClientStream
}

type heartbeatHeartbeatClient struct {
	grpc.ClientStream
}

func (x *heartbeatHeartbeatClient) Send(m *HeartbeatMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *heartbeatHeartbeatClient) Recv() (*HeartbeatResponse, error) {
	m := new(HeartbeatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) ReportDeviceMetrics(ctx context.Context, opts ...grpc.CallOption) (ReportDeviceMetricsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "ReportDeviceMetrics",
			ServerStreams: true,
			ClientStreams: true,
		},
		"/ntt.devices.v1.DeviceService/ReportDeviceMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportDeviceMetricsReportDeviceMetricsClient{stream}
	return x, nil
}

type ReportDeviceMetricsClientStream interface {
	Send(*ReportDeviceMetricsRequest) error
	Recv() (*ReportDeviceMetricsResponse, error)
	grpc.ClientStream
}

type reportDeviceMetricsReportDeviceMetricsClient struct {
	grpc.ClientStream
}

func (x *reportDeviceMetricsReportDeviceMetricsClient) Send(m *ReportDeviceMetricsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reportDeviceMetricsReportDeviceMetricsClient) Recv() (*ReportDeviceMetricsResponse, error) {
	m := new(ReportDeviceMetricsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}
