// Code generated by protoc-gen-goten-go
// File: edgelq/devices/proto/v1/device_custom.proto
// DO NOT EDIT!!!

package device_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &api.Account{}
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MobileNetworkType int32

const (
	MobileNetworkType_FiveGNR MobileNetworkType = 0
	MobileNetworkType_LTE     MobileNetworkType = 1
	MobileNetworkType_UMTS    MobileNetworkType = 2
)

var (
	MobileNetworkType_name = map[int32]string{
		0: "FiveGNR",
		1: "LTE",
		2: "UMTS",
	}

	MobileNetworkType_value = map[string]int32{
		"FiveGNR": 0,
		"LTE":     1,
		"UMTS":    2,
	}
)

func (x MobileNetworkType) Enum() *MobileNetworkType {
	p := new(MobileNetworkType)
	*p = x
	return p
}

func (x MobileNetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (MobileNetworkType) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1_device_custom_proto_enumTypes[0].Descriptor()
}

func (MobileNetworkType) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1_device_custom_proto_enumTypes[0]
}

func (x MobileNetworkType) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use MobileNetworkType.ProtoReflect.Descriptor instead.
func (MobileNetworkType) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{0}
}

// Request message for method
// [ProvisionServiceAccountToDevice][ntt.devices.v1.ProvisionServiceAccountToDevice]
type ProvisionServiceAccountToDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Device to provision service account.
	// This method automatically generates a service account and a key for the
	// device and assign the key to .Spec.ServiceAccount
	Name *device.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// external public key to use for service account for this device.
	// If not present, a keypair will be generated by the server.
	ExternalPubkey string `protobuf:"bytes,2,opt,name=external_pubkey,json=externalPubkey,proto3" json:"external_pubkey,omitempty" firestore:"externalPubkey"`
}

func (m *ProvisionServiceAccountToDeviceRequest) Reset() {
	*m = ProvisionServiceAccountToDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProvisionServiceAccountToDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProvisionServiceAccountToDeviceRequest) ProtoMessage() {}

func (m *ProvisionServiceAccountToDeviceRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProvisionServiceAccountToDeviceRequest) GotenMessage() {}

// Deprecated, Use ProvisionServiceAccountToDeviceRequest.ProtoReflect.Descriptor instead.
func (*ProvisionServiceAccountToDeviceRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{0}
}

func (m *ProvisionServiceAccountToDeviceRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProvisionServiceAccountToDeviceRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProvisionServiceAccountToDeviceRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProvisionServiceAccountToDeviceRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProvisionServiceAccountToDeviceRequest) GetName() *device.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ProvisionServiceAccountToDeviceRequest) GetExternalPubkey() string {
	if m != nil {
		return m.ExternalPubkey
	}
	return ""
}

func (m *ProvisionServiceAccountToDeviceRequest) SetName(fv *device.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ProvisionServiceAccountToDeviceRequest"))
	}
	m.Name = fv
}

func (m *ProvisionServiceAccountToDeviceRequest) SetExternalPubkey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExternalPubkey", "ProvisionServiceAccountToDeviceRequest"))
	}
	m.ExternalPubkey = fv
}

// Response message for method
// [ProvisionServiceAccountToDevice][ntt.devices.v1.ProvisionServiceAccountToDevice]
type ProvisionServiceAccountToDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The service account generated by the endpoint. Save the private key
	// included.
	ServiceAccount *api.ServiceAccount `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty" firestore:"serviceAccount"`
}

func (m *ProvisionServiceAccountToDeviceResponse) Reset() {
	*m = ProvisionServiceAccountToDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProvisionServiceAccountToDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProvisionServiceAccountToDeviceResponse) ProtoMessage() {}

func (m *ProvisionServiceAccountToDeviceResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProvisionServiceAccountToDeviceResponse) GotenMessage() {}

// Deprecated, Use ProvisionServiceAccountToDeviceResponse.ProtoReflect.Descriptor instead.
func (*ProvisionServiceAccountToDeviceResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{1}
}

func (m *ProvisionServiceAccountToDeviceResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProvisionServiceAccountToDeviceResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProvisionServiceAccountToDeviceResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProvisionServiceAccountToDeviceResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProvisionServiceAccountToDeviceResponse) GetServiceAccount() *api.ServiceAccount {
	if m != nil {
		return m.ServiceAccount
	}
	return nil
}

func (m *ProvisionServiceAccountToDeviceResponse) SetServiceAccount(fv *api.ServiceAccount) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceAccount", "ProvisionServiceAccountToDeviceResponse"))
	}
	m.ServiceAccount = fv
}

// Request message for method
// [RemoveServiceAccountFromDevice][ntt.devices.v1.RemoveServiceAccountFromDevice]
type RemoveServiceAccountFromDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of the Device to remove its service account
	// The service account and the key will be automatically deleted as well when
	// they have been generated automatically by `ProvisionServiceAccountToDevice`
	// action. Otherwise, the service account will be kept intact. The device will
	// lost the access to the resources in the project.
	Name *device.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *RemoveServiceAccountFromDeviceRequest) Reset() {
	*m = RemoveServiceAccountFromDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *RemoveServiceAccountFromDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*RemoveServiceAccountFromDeviceRequest) ProtoMessage() {}

func (m *RemoveServiceAccountFromDeviceRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*RemoveServiceAccountFromDeviceRequest) GotenMessage() {}

// Deprecated, Use RemoveServiceAccountFromDeviceRequest.ProtoReflect.Descriptor instead.
func (*RemoveServiceAccountFromDeviceRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{2}
}

func (m *RemoveServiceAccountFromDeviceRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *RemoveServiceAccountFromDeviceRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *RemoveServiceAccountFromDeviceRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *RemoveServiceAccountFromDeviceRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *RemoveServiceAccountFromDeviceRequest) GetName() *device.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *RemoveServiceAccountFromDeviceRequest) SetName(fv *device.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "RemoveServiceAccountFromDeviceRequest"))
	}
	m.Name = fv
}

// Response message for method
// [RemoveServiceAccountFromDevice][ntt.devices.v1.RemoveServiceAccountFromDevice]
type RemoveServiceAccountFromDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *RemoveServiceAccountFromDeviceResponse) Reset() {
	*m = RemoveServiceAccountFromDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *RemoveServiceAccountFromDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*RemoveServiceAccountFromDeviceResponse) ProtoMessage() {}

func (m *RemoveServiceAccountFromDeviceResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*RemoveServiceAccountFromDeviceResponse) GotenMessage() {}

// Deprecated, Use RemoveServiceAccountFromDeviceResponse.ProtoReflect.Descriptor instead.
func (*RemoveServiceAccountFromDeviceResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{3}
}

func (m *RemoveServiceAccountFromDeviceResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *RemoveServiceAccountFromDeviceResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *RemoveServiceAccountFromDeviceResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *RemoveServiceAccountFromDeviceResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type HeartbeatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          *device.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Types that are valid to be assigned to Msg:
	//	*HeartbeatMsg_Register_
	//	*HeartbeatMsg_Heartbeat_
	Msg isHeartbeatMsg_Msg `protobuf_oneof:"msg"`
}

func (m *HeartbeatMsg) Reset() {
	*m = HeartbeatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *HeartbeatMsg) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*HeartbeatMsg) ProtoMessage() {}

func (m *HeartbeatMsg) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*HeartbeatMsg) GotenMessage() {}

// Deprecated, Use HeartbeatMsg.ProtoReflect.Descriptor instead.
func (*HeartbeatMsg) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{4}
}

func (m *HeartbeatMsg) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *HeartbeatMsg) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *HeartbeatMsg) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *HeartbeatMsg) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isHeartbeatMsg_Msg interface {
	isHeartbeatMsg_Msg()
}

type HeartbeatMsg_Register_ struct {
	Register *HeartbeatMsg_Register `protobuf:"bytes,2,opt,name=register,proto3,oneof" firestore:"register"`
}
type HeartbeatMsg_Heartbeat_ struct {
	Heartbeat *HeartbeatMsg_Heartbeat `protobuf:"bytes,3,opt,name=heartbeat,proto3,oneof" firestore:"heartbeat"`
}

func (*HeartbeatMsg_Register_) isHeartbeatMsg_Msg()  {}
func (*HeartbeatMsg_Heartbeat_) isHeartbeatMsg_Msg() {}
func (m *HeartbeatMsg) GetName() *device.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *HeartbeatMsg) GetMsg() isHeartbeatMsg_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *HeartbeatMsg) GetRegister() *HeartbeatMsg_Register {
	if x, ok := m.GetMsg().(*HeartbeatMsg_Register_); ok {
		return x.Register
	}
	return nil
}
func (m *HeartbeatMsg) GetHeartbeat() *HeartbeatMsg_Heartbeat {
	if x, ok := m.GetMsg().(*HeartbeatMsg_Heartbeat_); ok {
		return x.Heartbeat
	}
	return nil
}
func (m *HeartbeatMsg) SetName(fv *device.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "HeartbeatMsg"))
	}
	m.Name = fv
}

func (m *HeartbeatMsg) SetMsg(ofv isHeartbeatMsg_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isHeartbeatMsg_Msg", "HeartbeatMsg"))
	}
	m.Msg = ofv
}
func (m *HeartbeatMsg) SetRegister(fv *HeartbeatMsg_Register) {
	m.SetMsg(&HeartbeatMsg_Register_{Register: fv})
}
func (m *HeartbeatMsg) SetHeartbeat(fv *HeartbeatMsg_Heartbeat) {
	m.SetMsg(&HeartbeatMsg_Heartbeat_{Heartbeat: fv})
}

type HeartbeatResponse struct {
	state                    protoimpl.MessageState
	sizeCache                protoimpl.SizeCache
	unknownFields            protoimpl.UnknownFields
	DesiredHeartbeatInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=desired_heartbeat_interval,json=desiredHeartbeatInterval,proto3" json:"desired_heartbeat_interval,omitempty" firestore:"desiredHeartbeatInterval"`
}

func (m *HeartbeatResponse) Reset() {
	*m = HeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (m *HeartbeatResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*HeartbeatResponse) GotenMessage() {}

// Deprecated, Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{5}
}

func (m *HeartbeatResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *HeartbeatResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *HeartbeatResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *HeartbeatResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *HeartbeatResponse) GetDesiredHeartbeatInterval() *durationpb.Duration {
	if m != nil {
		return m.DesiredHeartbeatInterval
	}
	return nil
}

func (m *HeartbeatResponse) SetDesiredHeartbeatInterval(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DesiredHeartbeatInterval", "HeartbeatResponse"))
	}
	m.DesiredHeartbeatInterval = fv
}

// A request message of the ReportDeviceMetrics method.
type ReportDeviceMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// device_name abd region_id are required in first message for streaming
	Name          *device.Name   `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	DeviceMetrics *DeviceMetrics `protobuf:"bytes,2,opt,name=device_metrics,json=deviceMetrics,proto3" json:"device_metrics,omitempty" firestore:"deviceMetrics"`
}

func (m *ReportDeviceMetricsRequest) Reset() {
	*m = ReportDeviceMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ReportDeviceMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ReportDeviceMetricsRequest) ProtoMessage() {}

func (m *ReportDeviceMetricsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ReportDeviceMetricsRequest) GotenMessage() {}

// Deprecated, Use ReportDeviceMetricsRequest.ProtoReflect.Descriptor instead.
func (*ReportDeviceMetricsRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{6}
}

func (m *ReportDeviceMetricsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ReportDeviceMetricsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ReportDeviceMetricsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ReportDeviceMetricsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ReportDeviceMetricsRequest) GetName() *device.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ReportDeviceMetricsRequest) GetDeviceMetrics() *DeviceMetrics {
	if m != nil {
		return m.DeviceMetrics
	}
	return nil
}

func (m *ReportDeviceMetricsRequest) SetName(fv *device.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ReportDeviceMetricsRequest"))
	}
	m.Name = fv
}

func (m *ReportDeviceMetricsRequest) SetDeviceMetrics(fv *DeviceMetrics) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceMetrics", "ReportDeviceMetricsRequest"))
	}
	m.DeviceMetrics = fv
}

type DeviceMetrics struct {
	state                    protoimpl.MessageState
	sizeCache                protoimpl.SizeCache
	unknownFields            protoimpl.UnknownFields
	Uptime                   uint64                        `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty" firestore:"uptime"`
	MemoryUsageBytes         uint64                        `protobuf:"varint,2,opt,name=memory_usage_bytes,json=memoryUsageBytes,proto3" json:"memory_usage_bytes,omitempty" firestore:"memoryUsageBytes"`
	MemoryUtilizationPercent float32                       `protobuf:"fixed32,3,opt,name=memory_utilization_percent,json=memoryUtilizationPercent,proto3" json:"memory_utilization_percent,omitempty" firestore:"memoryUtilizationPercent"`
	LoadAverage_1M           float32                       `protobuf:"fixed32,4,opt,name=load_average_1m,json=loadAverage1m,proto3" json:"load_average_1m,omitempty" firestore:"loadAverage1m"`
	MemoryStats              *DeviceMetrics_MemoryStats    `protobuf:"bytes,5,opt,name=memory_stats,json=memoryStats,proto3" json:"memory_stats,omitempty" firestore:"memoryStats"`
	CpuStats                 []*DeviceMetrics_CpuCoreStats `protobuf:"bytes,6,rep,name=cpu_stats,json=cpuStats,proto3" json:"cpu_stats,omitempty" firestore:"cpuStats"`
	// should match order in repeated DiskMetricsLabel
	DiskMetrics []*DeviceMetrics_DiskMetric `protobuf:"bytes,8,rep,name=disk_metrics,json=diskMetrics,proto3" json:"disk_metrics,omitempty" firestore:"diskMetrics"`
	// should match order in repeated DiskMetricsLabel
	HardwareMetrics []*DeviceMetrics_HardwareMetric `protobuf:"bytes,10,rep,name=hardware_metrics,json=hardwareMetrics,proto3" json:"hardware_metrics,omitempty" firestore:"hardwareMetrics"`
	// should match order in repeated ModemMetricLabel
	ModemMetrics     map[uint32]*DeviceMetrics_ModemMetric `protobuf:"bytes,12,rep,name=modem_metrics,json=modemMetrics,proto3" json:"modem_metrics,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"modemMetrics"`
	PerAntennaSignal *DeviceMetrics_PerAntennaSignal       `protobuf:"bytes,13,opt,name=per_antenna_signal,json=perAntennaSignal,proto3" json:"per_antenna_signal,omitempty" firestore:"perAntennaSignal"`
	// should match order in repeated ContainerMetricLabel
	ContainerMetrics map[uint32]*DeviceMetrics_ContainerMetric `protobuf:"bytes,15,rep,name=container_metrics,json=containerMetrics,proto3" json:"container_metrics,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"containerMetrics"`
	// should match order in repeated PodMetricLabel
	PodMetrics  []*DeviceMetrics_PodMetric `protobuf:"bytes,17,rep,name=pod_metrics,json=podMetrics,proto3" json:"pod_metrics,omitempty" firestore:"podMetrics"`
	MetricsTime *timestamppb.Timestamp     `protobuf:"bytes,18,opt,name=metrics_time,json=metricsTime,proto3" json:"metrics_time,omitempty" firestore:"metricsTime"`
	// optional - only required when something changes or in first time the metric
	// is sent
	DiskLabels []*DeviceMetrics_DiskMetricsLabel `protobuf:"bytes,7,rep,name=disk_labels,json=diskLabels,proto3" json:"disk_labels,omitempty" firestore:"diskLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	HardwareMetricsLabels []*DeviceMetrics_HardwareMetricsLabel `protobuf:"bytes,9,rep,name=hardware_metrics_labels,json=hardwareMetricsLabels,proto3" json:"hardware_metrics_labels,omitempty" firestore:"hardwareMetricsLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	ModemMetricsLabels []*DeviceMetrics_ModemMetricLabel `protobuf:"bytes,11,rep,name=modem_metrics_labels,json=modemMetricsLabels,proto3" json:"modem_metrics_labels,omitempty" firestore:"modemMetricsLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	ContainerMetricsLabels []*DeviceMetrics_ContainerMetricLabel `protobuf:"bytes,14,rep,name=container_metrics_labels,json=containerMetricsLabels,proto3" json:"container_metrics_labels,omitempty" firestore:"containerMetricsLabels"`
	// optional - only required when something changes or in first time the metric
	// is sent
	PodMetricsLabels []*DeviceMetrics_PodMetricLabel `protobuf:"bytes,16,rep,name=pod_metrics_labels,json=podMetricsLabels,proto3" json:"pod_metrics_labels,omitempty" firestore:"podMetricsLabels"`
}

func (m *DeviceMetrics) Reset() {
	*m = DeviceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics) ProtoMessage() {}

func (m *DeviceMetrics) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics) GotenMessage() {}

// Deprecated, Use DeviceMetrics.ProtoReflect.Descriptor instead.
func (*DeviceMetrics) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{7}
}

func (m *DeviceMetrics) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return uint64(0)
}

func (m *DeviceMetrics) GetMemoryUsageBytes() uint64 {
	if m != nil {
		return m.MemoryUsageBytes
	}
	return uint64(0)
}

func (m *DeviceMetrics) GetMemoryUtilizationPercent() float32 {
	if m != nil {
		return m.MemoryUtilizationPercent
	}
	return float32(0)
}

func (m *DeviceMetrics) GetLoadAverage_1M() float32 {
	if m != nil {
		return m.LoadAverage_1M
	}
	return float32(0)
}

func (m *DeviceMetrics) GetMemoryStats() *DeviceMetrics_MemoryStats {
	if m != nil {
		return m.MemoryStats
	}
	return nil
}

func (m *DeviceMetrics) GetCpuStats() []*DeviceMetrics_CpuCoreStats {
	if m != nil {
		return m.CpuStats
	}
	return nil
}

func (m *DeviceMetrics) GetDiskMetrics() []*DeviceMetrics_DiskMetric {
	if m != nil {
		return m.DiskMetrics
	}
	return nil
}

func (m *DeviceMetrics) GetHardwareMetrics() []*DeviceMetrics_HardwareMetric {
	if m != nil {
		return m.HardwareMetrics
	}
	return nil
}

func (m *DeviceMetrics) GetModemMetrics() map[uint32]*DeviceMetrics_ModemMetric {
	if m != nil {
		return m.ModemMetrics
	}
	return nil
}

func (m *DeviceMetrics) GetPerAntennaSignal() *DeviceMetrics_PerAntennaSignal {
	if m != nil {
		return m.PerAntennaSignal
	}
	return nil
}

func (m *DeviceMetrics) GetContainerMetrics() map[uint32]*DeviceMetrics_ContainerMetric {
	if m != nil {
		return m.ContainerMetrics
	}
	return nil
}

func (m *DeviceMetrics) GetPodMetrics() []*DeviceMetrics_PodMetric {
	if m != nil {
		return m.PodMetrics
	}
	return nil
}

func (m *DeviceMetrics) GetMetricsTime() *timestamppb.Timestamp {
	if m != nil {
		return m.MetricsTime
	}
	return nil
}

func (m *DeviceMetrics) GetDiskLabels() []*DeviceMetrics_DiskMetricsLabel {
	if m != nil {
		return m.DiskLabels
	}
	return nil
}

func (m *DeviceMetrics) GetHardwareMetricsLabels() []*DeviceMetrics_HardwareMetricsLabel {
	if m != nil {
		return m.HardwareMetricsLabels
	}
	return nil
}

func (m *DeviceMetrics) GetModemMetricsLabels() []*DeviceMetrics_ModemMetricLabel {
	if m != nil {
		return m.ModemMetricsLabels
	}
	return nil
}

func (m *DeviceMetrics) GetContainerMetricsLabels() []*DeviceMetrics_ContainerMetricLabel {
	if m != nil {
		return m.ContainerMetricsLabels
	}
	return nil
}

func (m *DeviceMetrics) GetPodMetricsLabels() []*DeviceMetrics_PodMetricLabel {
	if m != nil {
		return m.PodMetricsLabels
	}
	return nil
}

func (m *DeviceMetrics) SetUptime(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Uptime", "DeviceMetrics"))
	}
	m.Uptime = fv
}

func (m *DeviceMetrics) SetMemoryUsageBytes(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUsageBytes", "DeviceMetrics"))
	}
	m.MemoryUsageBytes = fv
}

func (m *DeviceMetrics) SetMemoryUtilizationPercent(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUtilizationPercent", "DeviceMetrics"))
	}
	m.MemoryUtilizationPercent = fv
}

func (m *DeviceMetrics) SetLoadAverage_1M(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LoadAverage_1M", "DeviceMetrics"))
	}
	m.LoadAverage_1M = fv
}

func (m *DeviceMetrics) SetMemoryStats(fv *DeviceMetrics_MemoryStats) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryStats", "DeviceMetrics"))
	}
	m.MemoryStats = fv
}

func (m *DeviceMetrics) SetCpuStats(fv []*DeviceMetrics_CpuCoreStats) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CpuStats", "DeviceMetrics"))
	}
	m.CpuStats = fv
}

func (m *DeviceMetrics) SetDiskMetrics(fv []*DeviceMetrics_DiskMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskMetrics", "DeviceMetrics"))
	}
	m.DiskMetrics = fv
}

func (m *DeviceMetrics) SetHardwareMetrics(fv []*DeviceMetrics_HardwareMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HardwareMetrics", "DeviceMetrics"))
	}
	m.HardwareMetrics = fv
}

func (m *DeviceMetrics) SetModemMetrics(fv map[uint32]*DeviceMetrics_ModemMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ModemMetrics", "DeviceMetrics"))
	}
	m.ModemMetrics = fv
}

func (m *DeviceMetrics) SetPerAntennaSignal(fv *DeviceMetrics_PerAntennaSignal) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PerAntennaSignal", "DeviceMetrics"))
	}
	m.PerAntennaSignal = fv
}

func (m *DeviceMetrics) SetContainerMetrics(fv map[uint32]*DeviceMetrics_ContainerMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerMetrics", "DeviceMetrics"))
	}
	m.ContainerMetrics = fv
}

func (m *DeviceMetrics) SetPodMetrics(fv []*DeviceMetrics_PodMetric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodMetrics", "DeviceMetrics"))
	}
	m.PodMetrics = fv
}

func (m *DeviceMetrics) SetMetricsTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricsTime", "DeviceMetrics"))
	}
	m.MetricsTime = fv
}

func (m *DeviceMetrics) SetDiskLabels(fv []*DeviceMetrics_DiskMetricsLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskLabels", "DeviceMetrics"))
	}
	m.DiskLabels = fv
}

func (m *DeviceMetrics) SetHardwareMetricsLabels(fv []*DeviceMetrics_HardwareMetricsLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HardwareMetricsLabels", "DeviceMetrics"))
	}
	m.HardwareMetricsLabels = fv
}

func (m *DeviceMetrics) SetModemMetricsLabels(fv []*DeviceMetrics_ModemMetricLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ModemMetricsLabels", "DeviceMetrics"))
	}
	m.ModemMetricsLabels = fv
}

func (m *DeviceMetrics) SetContainerMetricsLabels(fv []*DeviceMetrics_ContainerMetricLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerMetricsLabels", "DeviceMetrics"))
	}
	m.ContainerMetricsLabels = fv
}

func (m *DeviceMetrics) SetPodMetricsLabels(fv []*DeviceMetrics_PodMetricLabel) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodMetricsLabels", "DeviceMetrics"))
	}
	m.PodMetricsLabels = fv
}

type ReportDeviceMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// CreateTimeSeries call failed, likely a temporary issue.
	// droplet can retry without closing the stream
	TsCreateFailed bool `protobuf:"varint,1,opt,name=ts_create_failed,json=tsCreateFailed,proto3" json:"ts_create_failed,omitempty" firestore:"tsCreateFailed"`
}

func (m *ReportDeviceMetricsResponse) Reset() {
	*m = ReportDeviceMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ReportDeviceMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ReportDeviceMetricsResponse) ProtoMessage() {}

func (m *ReportDeviceMetricsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ReportDeviceMetricsResponse) GotenMessage() {}

// Deprecated, Use ReportDeviceMetricsResponse.ProtoReflect.Descriptor instead.
func (*ReportDeviceMetricsResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{8}
}

func (m *ReportDeviceMetricsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ReportDeviceMetricsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ReportDeviceMetricsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ReportDeviceMetricsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ReportDeviceMetricsResponse) GetTsCreateFailed() bool {
	if m != nil {
		return m.TsCreateFailed
	}
	return false
}

func (m *ReportDeviceMetricsResponse) SetTsCreateFailed(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TsCreateFailed", "ReportDeviceMetricsResponse"))
	}
	m.TsCreateFailed = fv
}

type HeartbeatMsg_Register struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *HeartbeatMsg_Register) Reset() {
	*m = HeartbeatMsg_Register{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *HeartbeatMsg_Register) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*HeartbeatMsg_Register) ProtoMessage() {}

func (m *HeartbeatMsg_Register) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*HeartbeatMsg_Register) GotenMessage() {}

// Deprecated, Use HeartbeatMsg_Register.ProtoReflect.Descriptor instead.
func (*HeartbeatMsg_Register) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{4, 0}
}

func (m *HeartbeatMsg_Register) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *HeartbeatMsg_Register) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *HeartbeatMsg_Register) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *HeartbeatMsg_Register) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type HeartbeatMsg_Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *HeartbeatMsg_Heartbeat) Reset() {
	*m = HeartbeatMsg_Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *HeartbeatMsg_Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*HeartbeatMsg_Heartbeat) ProtoMessage() {}

func (m *HeartbeatMsg_Heartbeat) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*HeartbeatMsg_Heartbeat) GotenMessage() {}

// Deprecated, Use HeartbeatMsg_Heartbeat.ProtoReflect.Descriptor instead.
func (*HeartbeatMsg_Heartbeat) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{4, 1}
}

func (m *HeartbeatMsg_Heartbeat) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *HeartbeatMsg_Heartbeat) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *HeartbeatMsg_Heartbeat) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *HeartbeatMsg_Heartbeat) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type DeviceMetrics_MemoryStats struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	BufferedMemory  uint64 `protobuf:"varint,1,opt,name=buffered_memory,json=bufferedMemory,proto3" json:"buffered_memory,omitempty" firestore:"bufferedMemory"`
	CachedMemory    uint64 `protobuf:"varint,2,opt,name=cached_memory,json=cachedMemory,proto3" json:"cached_memory,omitempty" firestore:"cachedMemory"`
	FreeMemory      uint64 `protobuf:"varint,3,opt,name=free_memory,json=freeMemory,proto3" json:"free_memory,omitempty" firestore:"freeMemory"`
	UsedMemory      uint64 `protobuf:"varint,4,opt,name=used_memory,json=usedMemory,proto3" json:"used_memory,omitempty" firestore:"usedMemory"`
	AvailableMemory uint64 `protobuf:"varint,5,opt,name=available_memory,json=availableMemory,proto3" json:"available_memory,omitempty" firestore:"availableMemory"`
	SharedMemory    uint64 `protobuf:"varint,6,opt,name=shared_memory,json=sharedMemory,proto3" json:"shared_memory,omitempty" firestore:"sharedMemory"`
}

func (m *DeviceMetrics_MemoryStats) Reset() {
	*m = DeviceMetrics_MemoryStats{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_MemoryStats) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_MemoryStats) ProtoMessage() {}

func (m *DeviceMetrics_MemoryStats) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_MemoryStats) GotenMessage() {}

// Deprecated, Use DeviceMetrics_MemoryStats.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_MemoryStats) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{7, 0}
}

func (m *DeviceMetrics_MemoryStats) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_MemoryStats) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_MemoryStats) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_MemoryStats) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_MemoryStats) GetBufferedMemory() uint64 {
	if m != nil {
		return m.BufferedMemory
	}
	return uint64(0)
}

func (m *DeviceMetrics_MemoryStats) GetCachedMemory() uint64 {
	if m != nil {
		return m.CachedMemory
	}
	return uint64(0)
}

func (m *DeviceMetrics_MemoryStats) GetFreeMemory() uint64 {
	if m != nil {
		return m.FreeMemory
	}
	return uint64(0)
}

func (m *DeviceMetrics_MemoryStats) GetUsedMemory() uint64 {
	if m != nil {
		return m.UsedMemory
	}
	return uint64(0)
}

func (m *DeviceMetrics_MemoryStats) GetAvailableMemory() uint64 {
	if m != nil {
		return m.AvailableMemory
	}
	return uint64(0)
}

func (m *DeviceMetrics_MemoryStats) GetSharedMemory() uint64 {
	if m != nil {
		return m.SharedMemory
	}
	return uint64(0)
}

func (m *DeviceMetrics_MemoryStats) SetBufferedMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BufferedMemory", "DeviceMetrics_MemoryStats"))
	}
	m.BufferedMemory = fv
}

func (m *DeviceMetrics_MemoryStats) SetCachedMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CachedMemory", "DeviceMetrics_MemoryStats"))
	}
	m.CachedMemory = fv
}

func (m *DeviceMetrics_MemoryStats) SetFreeMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FreeMemory", "DeviceMetrics_MemoryStats"))
	}
	m.FreeMemory = fv
}

func (m *DeviceMetrics_MemoryStats) SetUsedMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UsedMemory", "DeviceMetrics_MemoryStats"))
	}
	m.UsedMemory = fv
}

func (m *DeviceMetrics_MemoryStats) SetAvailableMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AvailableMemory", "DeviceMetrics_MemoryStats"))
	}
	m.AvailableMemory = fv
}

func (m *DeviceMetrics_MemoryStats) SetSharedMemory(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SharedMemory", "DeviceMetrics_MemoryStats"))
	}
	m.SharedMemory = fv
}

type DeviceMetrics_CpuCoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	User          float32 `protobuf:"fixed32,1,opt,name=user,proto3" json:"user,omitempty" firestore:"user"`
	System        float32 `protobuf:"fixed32,2,opt,name=system,proto3" json:"system,omitempty" firestore:"system"`
	Idle          float32 `protobuf:"fixed32,3,opt,name=idle,proto3" json:"idle,omitempty" firestore:"idle"`
	Nice          float32 `protobuf:"fixed32,4,opt,name=nice,proto3" json:"nice,omitempty" firestore:"nice"`
	Iowait        float32 `protobuf:"fixed32,5,opt,name=iowait,proto3" json:"iowait,omitempty" firestore:"iowait"`
	Irq           float32 `protobuf:"fixed32,6,opt,name=irq,proto3" json:"irq,omitempty" firestore:"irq"`
	Softirq       float32 `protobuf:"fixed32,7,opt,name=softirq,proto3" json:"softirq,omitempty" firestore:"softirq"`
	Steal         float32 `protobuf:"fixed32,8,opt,name=steal,proto3" json:"steal,omitempty" firestore:"steal"`
}

func (m *DeviceMetrics_CpuCoreStats) Reset() {
	*m = DeviceMetrics_CpuCoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_CpuCoreStats) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_CpuCoreStats) ProtoMessage() {}

func (m *DeviceMetrics_CpuCoreStats) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_CpuCoreStats) GotenMessage() {}

// Deprecated, Use DeviceMetrics_CpuCoreStats.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_CpuCoreStats) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{7, 1}
}

func (m *DeviceMetrics_CpuCoreStats) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_CpuCoreStats) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_CpuCoreStats) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_CpuCoreStats) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_CpuCoreStats) GetUser() float32 {
	if m != nil {
		return m.User
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) GetSystem() float32 {
	if m != nil {
		return m.System
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) GetIdle() float32 {
	if m != nil {
		return m.Idle
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) GetNice() float32 {
	if m != nil {
		return m.Nice
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) GetIowait() float32 {
	if m != nil {
		return m.Iowait
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) GetIrq() float32 {
	if m != nil {
		return m.Irq
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) GetSoftirq() float32 {
	if m != nil {
		return m.Softirq
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) GetSteal() float32 {
	if m != nil {
		return m.Steal
	}
	return float32(0)
}

func (m *DeviceMetrics_CpuCoreStats) SetUser(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "User", "DeviceMetrics_CpuCoreStats"))
	}
	m.User = fv
}

func (m *DeviceMetrics_CpuCoreStats) SetSystem(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "System", "DeviceMetrics_CpuCoreStats"))
	}
	m.System = fv
}

func (m *DeviceMetrics_CpuCoreStats) SetIdle(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Idle", "DeviceMetrics_CpuCoreStats"))
	}
	m.Idle = fv
}

func (m *DeviceMetrics_CpuCoreStats) SetNice(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Nice", "DeviceMetrics_CpuCoreStats"))
	}
	m.Nice = fv
}

func (m *DeviceMetrics_CpuCoreStats) SetIowait(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Iowait", "DeviceMetrics_CpuCoreStats"))
	}
	m.Iowait = fv
}

func (m *DeviceMetrics_CpuCoreStats) SetIrq(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Irq", "DeviceMetrics_CpuCoreStats"))
	}
	m.Irq = fv
}

func (m *DeviceMetrics_CpuCoreStats) SetSoftirq(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Softirq", "DeviceMetrics_CpuCoreStats"))
	}
	m.Softirq = fv
}

func (m *DeviceMetrics_CpuCoreStats) SetSteal(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Steal", "DeviceMetrics_CpuCoreStats"))
	}
	m.Steal = fv
}

type DeviceMetrics_DiskMetricsLabel struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	MountPoint     string `protobuf:"bytes,1,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty" firestore:"mountPoint"`
	PartitionLabel string `protobuf:"bytes,2,opt,name=partition_label,json=partitionLabel,proto3" json:"partition_label,omitempty" firestore:"partitionLabel"`
	Partition      string `protobuf:"bytes,3,opt,name=partition,proto3" json:"partition,omitempty" firestore:"partition"`
}

func (m *DeviceMetrics_DiskMetricsLabel) Reset() {
	*m = DeviceMetrics_DiskMetricsLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_DiskMetricsLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_DiskMetricsLabel) ProtoMessage() {}

func (m *DeviceMetrics_DiskMetricsLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_DiskMetricsLabel) GotenMessage() {}

// Deprecated, Use DeviceMetrics_DiskMetricsLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_DiskMetricsLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{7, 2}
}

func (m *DeviceMetrics_DiskMetricsLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_DiskMetricsLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_DiskMetricsLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_DiskMetricsLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_DiskMetricsLabel) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

func (m *DeviceMetrics_DiskMetricsLabel) GetPartitionLabel() string {
	if m != nil {
		return m.PartitionLabel
	}
	return ""
}

func (m *DeviceMetrics_DiskMetricsLabel) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *DeviceMetrics_DiskMetricsLabel) SetMountPoint(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MountPoint", "DeviceMetrics_DiskMetricsLabel"))
	}
	m.MountPoint = fv
}

func (m *DeviceMetrics_DiskMetricsLabel) SetPartitionLabel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PartitionLabel", "DeviceMetrics_DiskMetricsLabel"))
	}
	m.PartitionLabel = fv
}

func (m *DeviceMetrics_DiskMetricsLabel) SetPartition(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Partition", "DeviceMetrics_DiskMetricsLabel"))
	}
	m.Partition = fv
}

type DeviceMetrics_HardwareMetricsLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	SensorTag     string `protobuf:"bytes,1,opt,name=sensor_tag,json=sensorTag,proto3" json:"sensor_tag,omitempty" firestore:"sensorTag"`
	ChipTag       string `protobuf:"bytes,2,opt,name=chip_tag,json=chipTag,proto3" json:"chip_tag,omitempty" firestore:"chipTag"`
}

func (m *DeviceMetrics_HardwareMetricsLabel) Reset() {
	*m = DeviceMetrics_HardwareMetricsLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_HardwareMetricsLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_HardwareMetricsLabel) ProtoMessage() {}

func (m *DeviceMetrics_HardwareMetricsLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_HardwareMetricsLabel) GotenMessage() {}

// Deprecated, Use DeviceMetrics_HardwareMetricsLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_HardwareMetricsLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{7, 3}
}

func (m *DeviceMetrics_HardwareMetricsLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_HardwareMetricsLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_HardwareMetricsLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_HardwareMetricsLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_HardwareMetricsLabel) GetSensorTag() string {
	if m != nil {
		return m.SensorTag
	}
	return ""
}

func (m *DeviceMetrics_HardwareMetricsLabel) GetChipTag() string {
	if m != nil {
		return m.ChipTag
	}
	return ""
}

func (m *DeviceMetrics_HardwareMetricsLabel) SetSensorTag(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SensorTag", "DeviceMetrics_HardwareMetricsLabel"))
	}
	m.SensorTag = fv
}

func (m *DeviceMetrics_HardwareMetricsLabel) SetChipTag(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ChipTag", "DeviceMetrics_HardwareMetricsLabel"))
	}
	m.ChipTag = fv
}

type DeviceMetrics_DiskMetric struct {
	state                  protoimpl.MessageState
	sizeCache              protoimpl.SizeCache
	unknownFields          protoimpl.UnknownFields
	DiskUsageBytes         uint64  `protobuf:"varint,1,opt,name=disk_usage_bytes,json=diskUsageBytes,proto3" json:"disk_usage_bytes,omitempty" firestore:"diskUsageBytes"`
	DiskUtilizationPercent float32 `protobuf:"fixed32,2,opt,name=disk_utilization_percent,json=diskUtilizationPercent,proto3" json:"disk_utilization_percent,omitempty" firestore:"diskUtilizationPercent"`
}

func (m *DeviceMetrics_DiskMetric) Reset() {
	*m = DeviceMetrics_DiskMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_DiskMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_DiskMetric) ProtoMessage() {}

func (m *DeviceMetrics_DiskMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_DiskMetric) GotenMessage() {}

// Deprecated, Use DeviceMetrics_DiskMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_DiskMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{7, 4}
}

func (m *DeviceMetrics_DiskMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_DiskMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_DiskMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_DiskMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_DiskMetric) GetDiskUsageBytes() uint64 {
	if m != nil {
		return m.DiskUsageBytes
	}
	return uint64(0)
}

func (m *DeviceMetrics_DiskMetric) GetDiskUtilizationPercent() float32 {
	if m != nil {
		return m.DiskUtilizationPercent
	}
	return float32(0)
}

func (m *DeviceMetrics_DiskMetric) SetDiskUsageBytes(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskUsageBytes", "DeviceMetrics_DiskMetric"))
	}
	m.DiskUsageBytes = fv
}

func (m *DeviceMetrics_DiskMetric) SetDiskUtilizationPercent(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DiskUtilizationPercent", "DeviceMetrics_DiskMetric"))
	}
	m.DiskUtilizationPercent = fv
}

type DeviceMetrics_HardwareMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	FanSpeed      uint64  `protobuf:"varint,1,opt,name=fan_speed,json=fanSpeed,proto3" json:"fan_speed,omitempty" firestore:"fanSpeed"`
	Temperature   int64   `protobuf:"varint,2,opt,name=temperature,proto3" json:"temperature,omitempty" firestore:"temperature"`
	Voltage       float32 `protobuf:"fixed32,3,opt,name=voltage,proto3" json:"voltage,omitempty" firestore:"voltage"`
	Power         float32 `protobuf:"fixed32,4,opt,name=power,proto3" json:"power,omitempty" firestore:"power"`
}

func (m *DeviceMetrics_HardwareMetric) Reset() {
	*m = DeviceMetrics_HardwareMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_HardwareMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_HardwareMetric) ProtoMessage() {}

func (m *DeviceMetrics_HardwareMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_HardwareMetric) GotenMessage() {}

// Deprecated, Use DeviceMetrics_HardwareMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_HardwareMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{7, 5}
}

func (m *DeviceMetrics_HardwareMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_HardwareMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_HardwareMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_HardwareMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_HardwareMetric) GetFanSpeed() uint64 {
	if m != nil {
		return m.FanSpeed
	}
	return uint64(0)
}

func (m *DeviceMetrics_HardwareMetric) GetTemperature() int64 {
	if m != nil {
		return m.Temperature
	}
	return int64(0)
}

func (m *DeviceMetrics_HardwareMetric) GetVoltage() float32 {
	if m != nil {
		return m.Voltage
	}
	return float32(0)
}

func (m *DeviceMetrics_HardwareMetric) GetPower() float32 {
	if m != nil {
		return m.Power
	}
	return float32(0)
}

func (m *DeviceMetrics_HardwareMetric) SetFanSpeed(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FanSpeed", "DeviceMetrics_HardwareMetric"))
	}
	m.FanSpeed = fv
}

func (m *DeviceMetrics_HardwareMetric) SetTemperature(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Temperature", "DeviceMetrics_HardwareMetric"))
	}
	m.Temperature = fv
}

func (m *DeviceMetrics_HardwareMetric) SetVoltage(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Voltage", "DeviceMetrics_HardwareMetric"))
	}
	m.Voltage = fv
}

func (m *DeviceMetrics_HardwareMetric) SetPower(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Power", "DeviceMetrics_HardwareMetric"))
	}
	m.Power = fv
}

type DeviceMetrics_ModemMetricLabel struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	CellType       MobileNetworkType `protobuf:"varint,1,opt,name=cell_type,json=cellType,proto3,enum=ntt.devices.v1.MobileNetworkType" json:"cell_type,omitempty" firestore:"cellType"`
	CellId         uint64            `protobuf:"varint,2,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty" firestore:"cellId"`
	PhysicalCellId uint64            `protobuf:"varint,3,opt,name=physical_cell_id,json=physicalCellId,proto3" json:"physical_cell_id,omitempty" firestore:"physicalCellId"`
	Tac            uint64            `protobuf:"varint,4,opt,name=tac,proto3" json:"tac,omitempty" firestore:"tac"`
	Earfcn         uint64            `protobuf:"varint,5,opt,name=earfcn,proto3" json:"earfcn,omitempty" firestore:"earfcn"`
}

func (m *DeviceMetrics_ModemMetricLabel) Reset() {
	*m = DeviceMetrics_ModemMetricLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_ModemMetricLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_ModemMetricLabel) ProtoMessage() {}

func (m *DeviceMetrics_ModemMetricLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_ModemMetricLabel) GotenMessage() {}

// Deprecated, Use DeviceMetrics_ModemMetricLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_ModemMetricLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{7, 6}
}

func (m *DeviceMetrics_ModemMetricLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_ModemMetricLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_ModemMetricLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_ModemMetricLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_ModemMetricLabel) GetCellType() MobileNetworkType {
	if m != nil {
		return m.CellType
	}
	return MobileNetworkType_FiveGNR
}

func (m *DeviceMetrics_ModemMetricLabel) GetCellId() uint64 {
	if m != nil {
		return m.CellId
	}
	return uint64(0)
}

func (m *DeviceMetrics_ModemMetricLabel) GetPhysicalCellId() uint64 {
	if m != nil {
		return m.PhysicalCellId
	}
	return uint64(0)
}

func (m *DeviceMetrics_ModemMetricLabel) GetTac() uint64 {
	if m != nil {
		return m.Tac
	}
	return uint64(0)
}

func (m *DeviceMetrics_ModemMetricLabel) GetEarfcn() uint64 {
	if m != nil {
		return m.Earfcn
	}
	return uint64(0)
}

func (m *DeviceMetrics_ModemMetricLabel) SetCellType(fv MobileNetworkType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CellType", "DeviceMetrics_ModemMetricLabel"))
	}
	m.CellType = fv
}

func (m *DeviceMetrics_ModemMetricLabel) SetCellId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CellId", "DeviceMetrics_ModemMetricLabel"))
	}
	m.CellId = fv
}

func (m *DeviceMetrics_ModemMetricLabel) SetPhysicalCellId(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PhysicalCellId", "DeviceMetrics_ModemMetricLabel"))
	}
	m.PhysicalCellId = fv
}

func (m *DeviceMetrics_ModemMetricLabel) SetTac(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tac", "DeviceMetrics_ModemMetricLabel"))
	}
	m.Tac = fv
}

func (m *DeviceMetrics_ModemMetricLabel) SetEarfcn(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Earfcn", "DeviceMetrics_ModemMetricLabel"))
	}
	m.Earfcn = fv
}

type DeviceMetrics_ModemMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Rssi          int32   `protobuf:"zigzag32,1,opt,name=rssi,proto3" json:"rssi,omitempty" firestore:"rssi"`
	Rsrp          int32   `protobuf:"zigzag32,2,opt,name=rsrp,proto3" json:"rsrp,omitempty" firestore:"rsrp"`
	Rsrq          float32 `protobuf:"fixed32,3,opt,name=rsrq,proto3" json:"rsrq,omitempty" firestore:"rsrq"`
	Snr           float32 `protobuf:"fixed32,4,opt,name=snr,proto3" json:"snr,omitempty" firestore:"snr"`
}

func (m *DeviceMetrics_ModemMetric) Reset() {
	*m = DeviceMetrics_ModemMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_ModemMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_ModemMetric) ProtoMessage() {}

func (m *DeviceMetrics_ModemMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_ModemMetric) GotenMessage() {}

// Deprecated, Use DeviceMetrics_ModemMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_ModemMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{7, 7}
}

func (m *DeviceMetrics_ModemMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_ModemMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_ModemMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_ModemMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_ModemMetric) GetRssi() int32 {
	if m != nil {
		return m.Rssi
	}
	return int32(0)
}

func (m *DeviceMetrics_ModemMetric) GetRsrp() int32 {
	if m != nil {
		return m.Rsrp
	}
	return int32(0)
}

func (m *DeviceMetrics_ModemMetric) GetRsrq() float32 {
	if m != nil {
		return m.Rsrq
	}
	return float32(0)
}

func (m *DeviceMetrics_ModemMetric) GetSnr() float32 {
	if m != nil {
		return m.Snr
	}
	return float32(0)
}

func (m *DeviceMetrics_ModemMetric) SetRssi(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rssi", "DeviceMetrics_ModemMetric"))
	}
	m.Rssi = fv
}

func (m *DeviceMetrics_ModemMetric) SetRsrp(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rsrp", "DeviceMetrics_ModemMetric"))
	}
	m.Rsrp = fv
}

func (m *DeviceMetrics_ModemMetric) SetRsrq(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Rsrq", "DeviceMetrics_ModemMetric"))
	}
	m.Rsrq = fv
}

func (m *DeviceMetrics_ModemMetric) SetSnr(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Snr", "DeviceMetrics_ModemMetric"))
	}
	m.Snr = fv
}

type DeviceMetrics_PerAntennaSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	FivegRsrps    []int32   `protobuf:"zigzag32,1,rep,packed,name=fiveg_rsrps,json=fivegRsrps,proto3" json:"fiveg_rsrps,omitempty" firestore:"fivegRsrps"`
	FivegRsrqs    []float32 `protobuf:"fixed32,2,rep,packed,name=fiveg_rsrqs,json=fivegRsrqs,proto3" json:"fiveg_rsrqs,omitempty" firestore:"fivegRsrqs"`
	LteRsrps      []int32   `protobuf:"zigzag32,3,rep,packed,name=lte_rsrps,json=lteRsrps,proto3" json:"lte_rsrps,omitempty" firestore:"lteRsrps"`
	LteRsrqs      []float32 `protobuf:"fixed32,4,rep,packed,name=lte_rsrqs,json=lteRsrqs,proto3" json:"lte_rsrqs,omitempty" firestore:"lteRsrqs"`
}

func (m *DeviceMetrics_PerAntennaSignal) Reset() {
	*m = DeviceMetrics_PerAntennaSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_PerAntennaSignal) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_PerAntennaSignal) ProtoMessage() {}

func (m *DeviceMetrics_PerAntennaSignal) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_PerAntennaSignal) GotenMessage() {}

// Deprecated, Use DeviceMetrics_PerAntennaSignal.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_PerAntennaSignal) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{7, 9}
}

func (m *DeviceMetrics_PerAntennaSignal) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_PerAntennaSignal) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_PerAntennaSignal) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_PerAntennaSignal) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_PerAntennaSignal) GetFivegRsrps() []int32 {
	if m != nil {
		return m.FivegRsrps
	}
	return nil
}

func (m *DeviceMetrics_PerAntennaSignal) GetFivegRsrqs() []float32 {
	if m != nil {
		return m.FivegRsrqs
	}
	return nil
}

func (m *DeviceMetrics_PerAntennaSignal) GetLteRsrps() []int32 {
	if m != nil {
		return m.LteRsrps
	}
	return nil
}

func (m *DeviceMetrics_PerAntennaSignal) GetLteRsrqs() []float32 {
	if m != nil {
		return m.LteRsrqs
	}
	return nil
}

func (m *DeviceMetrics_PerAntennaSignal) SetFivegRsrps(fv []int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FivegRsrps", "DeviceMetrics_PerAntennaSignal"))
	}
	m.FivegRsrps = fv
}

func (m *DeviceMetrics_PerAntennaSignal) SetFivegRsrqs(fv []float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FivegRsrqs", "DeviceMetrics_PerAntennaSignal"))
	}
	m.FivegRsrqs = fv
}

func (m *DeviceMetrics_PerAntennaSignal) SetLteRsrps(fv []int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LteRsrps", "DeviceMetrics_PerAntennaSignal"))
	}
	m.LteRsrps = fv
}

func (m *DeviceMetrics_PerAntennaSignal) SetLteRsrqs(fv []float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LteRsrqs", "DeviceMetrics_PerAntennaSignal"))
	}
	m.LteRsrqs = fv
}

type DeviceMetrics_ContainerMetricLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	PodId         string `protobuf:"bytes,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty" firestore:"podId"`
	ContainerId   string `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty" firestore:"containerId"`
}

func (m *DeviceMetrics_ContainerMetricLabel) Reset() {
	*m = DeviceMetrics_ContainerMetricLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_ContainerMetricLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_ContainerMetricLabel) ProtoMessage() {}

func (m *DeviceMetrics_ContainerMetricLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_ContainerMetricLabel) GotenMessage() {}

// Deprecated, Use DeviceMetrics_ContainerMetricLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_ContainerMetricLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{7, 10}
}

func (m *DeviceMetrics_ContainerMetricLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_ContainerMetricLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_ContainerMetricLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_ContainerMetricLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_ContainerMetricLabel) GetPodId() string {
	if m != nil {
		return m.PodId
	}
	return ""
}

func (m *DeviceMetrics_ContainerMetricLabel) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *DeviceMetrics_ContainerMetricLabel) SetPodId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodId", "DeviceMetrics_ContainerMetricLabel"))
	}
	m.PodId = fv
}

func (m *DeviceMetrics_ContainerMetricLabel) SetContainerId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerId", "DeviceMetrics_ContainerMetricLabel"))
	}
	m.ContainerId = fv
}

type DeviceMetrics_ContainerMetric struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	CpuUtilization    float32 `protobuf:"fixed32,1,opt,name=cpu_utilization,json=cpuUtilization,proto3" json:"cpu_utilization,omitempty" firestore:"cpuUtilization"`
	MemoryUtilization float32 `protobuf:"fixed32,2,opt,name=memory_utilization,json=memoryUtilization,proto3" json:"memory_utilization,omitempty" firestore:"memoryUtilization"`
	MemoryUsageBytes  uint64  `protobuf:"varint,3,opt,name=memory_usage_bytes,json=memoryUsageBytes,proto3" json:"memory_usage_bytes,omitempty" firestore:"memoryUsageBytes"`
}

func (m *DeviceMetrics_ContainerMetric) Reset() {
	*m = DeviceMetrics_ContainerMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_ContainerMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_ContainerMetric) ProtoMessage() {}

func (m *DeviceMetrics_ContainerMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_ContainerMetric) GotenMessage() {}

// Deprecated, Use DeviceMetrics_ContainerMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_ContainerMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{7, 11}
}

func (m *DeviceMetrics_ContainerMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_ContainerMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_ContainerMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_ContainerMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_ContainerMetric) GetCpuUtilization() float32 {
	if m != nil {
		return m.CpuUtilization
	}
	return float32(0)
}

func (m *DeviceMetrics_ContainerMetric) GetMemoryUtilization() float32 {
	if m != nil {
		return m.MemoryUtilization
	}
	return float32(0)
}

func (m *DeviceMetrics_ContainerMetric) GetMemoryUsageBytes() uint64 {
	if m != nil {
		return m.MemoryUsageBytes
	}
	return uint64(0)
}

func (m *DeviceMetrics_ContainerMetric) SetCpuUtilization(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CpuUtilization", "DeviceMetrics_ContainerMetric"))
	}
	m.CpuUtilization = fv
}

func (m *DeviceMetrics_ContainerMetric) SetMemoryUtilization(fv float32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUtilization", "DeviceMetrics_ContainerMetric"))
	}
	m.MemoryUtilization = fv
}

func (m *DeviceMetrics_ContainerMetric) SetMemoryUsageBytes(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MemoryUsageBytes", "DeviceMetrics_ContainerMetric"))
	}
	m.MemoryUsageBytes = fv
}

type DeviceMetrics_PodMetricLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	PodId         string `protobuf:"bytes,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty" firestore:"podId"`
}

func (m *DeviceMetrics_PodMetricLabel) Reset() {
	*m = DeviceMetrics_PodMetricLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_PodMetricLabel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_PodMetricLabel) ProtoMessage() {}

func (m *DeviceMetrics_PodMetricLabel) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_PodMetricLabel) GotenMessage() {}

// Deprecated, Use DeviceMetrics_PodMetricLabel.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_PodMetricLabel) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{7, 13}
}

func (m *DeviceMetrics_PodMetricLabel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_PodMetricLabel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_PodMetricLabel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_PodMetricLabel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_PodMetricLabel) GetPodId() string {
	if m != nil {
		return m.PodId
	}
	return ""
}

func (m *DeviceMetrics_PodMetricLabel) SetPodId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodId", "DeviceMetrics_PodMetricLabel"))
	}
	m.PodId = fv
}

type DeviceMetrics_PodMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	PodStatus     uint64 `protobuf:"varint,1,opt,name=pod_status,json=podStatus,proto3" json:"pod_status,omitempty" firestore:"podStatus"`
	IsHealthy     bool   `protobuf:"varint,2,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty" firestore:"isHealthy"`
}

func (m *DeviceMetrics_PodMetric) Reset() {
	*m = DeviceMetrics_PodMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeviceMetrics_PodMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeviceMetrics_PodMetric) ProtoMessage() {}

func (m *DeviceMetrics_PodMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_custom_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeviceMetrics_PodMetric) GotenMessage() {}

// Deprecated, Use DeviceMetrics_PodMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetrics_PodMetric) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP(), []int{7, 14}
}

func (m *DeviceMetrics_PodMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeviceMetrics_PodMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeviceMetrics_PodMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeviceMetrics_PodMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeviceMetrics_PodMetric) GetPodStatus() uint64 {
	if m != nil {
		return m.PodStatus
	}
	return uint64(0)
}

func (m *DeviceMetrics_PodMetric) GetIsHealthy() bool {
	if m != nil {
		return m.IsHealthy
	}
	return false
}

func (m *DeviceMetrics_PodMetric) SetPodStatus(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PodStatus", "DeviceMetrics_PodMetric"))
	}
	m.PodStatus = fv
}

func (m *DeviceMetrics_PodMetric) SetIsHealthy(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHealthy", "DeviceMetrics_PodMetric"))
	}
	m.IsHealthy = fv
}

var edgelq_devices_proto_v1_device_custom_proto preflect.FileDescriptor

var edgelq_devices_proto_v1_device_custom_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x75, 0x0a, 0x26, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda,
	0x21, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x8e, 0x01, 0x0a, 0x27,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x21, 0xc2, 0x85, 0x2c, 0x1d, 0x1a,
	0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x4b, 0x0a, 0x25,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x26, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x2e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x1a, 0x0b, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x05,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x6c, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x1a, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xe0, 0x19, 0x0a,
	0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x31, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x31, 0x6d, 0x12, 0x4c, 0x0a, 0x0c, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x43, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x63, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x57,
	0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6d,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5c, 0x0a,
	0x12, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x41, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x10, 0x70, 0x65, 0x72, 0x41, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x60, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a,
	0x0b, 0x70, 0x6f, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x70, 0x6f, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0a, 0x64, 0x69, 0x73,
	0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x6a, 0x0a, 0x17, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x15, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x60, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x6c, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x16, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x12, 0x70, 0x6f, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x50,
	0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x10, 0x70,
	0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a,
	0xed, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x1a,
	0xbc, 0x01, 0x0a, 0x0c, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x6e, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x69, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x72, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x69, 0x72, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x1a, 0x7a,
	0x0a, 0x10, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x50, 0x0a, 0x14, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x61,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x69, 0x70, 0x54, 0x61, 0x67, 0x1a, 0x70, 0x0a, 0x0a,
	0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0x7f,
	0x0a, 0x0e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x1a,
	0xbf, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72,
	0x66, 0x63, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63,
	0x6e, 0x1a, 0x5b, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04,
	0x72, 0x73, 0x73, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x04, 0x72, 0x73, 0x72, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x71,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x73, 0x72, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x6e, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x1a, 0x6a,
	0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8e, 0x01, 0x0a, 0x10, 0x50,
	0x65, 0x72, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x76, 0x65, 0x67, 0x5f, 0x72, 0x73, 0x72, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x11, 0x52, 0x0a, 0x66, 0x69, 0x76, 0x65, 0x67, 0x52, 0x73, 0x72, 0x70, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x76, 0x65, 0x67, 0x5f, 0x72, 0x73, 0x72, 0x71, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x69, 0x76, 0x65, 0x67, 0x52, 0x73, 0x72, 0x71,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x74, 0x65, 0x5f, 0x72, 0x73, 0x72, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x74, 0x65, 0x52, 0x73, 0x72, 0x70, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x74, 0x65, 0x5f, 0x72, 0x73, 0x72, 0x71, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x08, 0x6c, 0x74, 0x65, 0x52, 0x73, 0x72, 0x71, 0x73, 0x1a, 0x50, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x97, 0x01,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x72, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x27, 0x0a, 0x0e, 0x50,
	0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x15, 0x0a,
	0x06, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x6f, 0x64, 0x49, 0x64, 0x1a, 0x49, 0x0a, 0x09, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22,
	0x47, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2a, 0x33, 0x0a, 0x11, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x69, 0x76, 0x65, 0x47, 0x4e, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x4d, 0x54, 0x53, 0x10, 0x02, 0x42, 0x73, 0xe8,
	0xde, 0x21, 0x00, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a,
	0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_devices_proto_v1_device_custom_proto_rawDescOnce sync.Once
	edgelq_devices_proto_v1_device_custom_proto_rawDescData = edgelq_devices_proto_v1_device_custom_proto_rawDesc
)

func edgelq_devices_proto_v1_device_custom_proto_rawDescGZIP() []byte {
	edgelq_devices_proto_v1_device_custom_proto_rawDescOnce.Do(func() {
		edgelq_devices_proto_v1_device_custom_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_devices_proto_v1_device_custom_proto_rawDescData)
	})
	return edgelq_devices_proto_v1_device_custom_proto_rawDescData
}

var edgelq_devices_proto_v1_device_custom_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_devices_proto_v1_device_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var edgelq_devices_proto_v1_device_custom_proto_goTypes = []interface{}{
	(MobileNetworkType)(0),                          // 0: ntt.devices.v1.MobileNetworkType
	(*ProvisionServiceAccountToDeviceRequest)(nil),  // 1: ntt.devices.v1.ProvisionServiceAccountToDeviceRequest
	(*ProvisionServiceAccountToDeviceResponse)(nil), // 2: ntt.devices.v1.ProvisionServiceAccountToDeviceResponse
	(*RemoveServiceAccountFromDeviceRequest)(nil),   // 3: ntt.devices.v1.RemoveServiceAccountFromDeviceRequest
	(*RemoveServiceAccountFromDeviceResponse)(nil),  // 4: ntt.devices.v1.RemoveServiceAccountFromDeviceResponse
	(*HeartbeatMsg)(nil),                            // 5: ntt.devices.v1.HeartbeatMsg
	(*HeartbeatResponse)(nil),                       // 6: ntt.devices.v1.HeartbeatResponse
	(*ReportDeviceMetricsRequest)(nil),              // 7: ntt.devices.v1.ReportDeviceMetricsRequest
	(*DeviceMetrics)(nil),                           // 8: ntt.devices.v1.DeviceMetrics
	(*ReportDeviceMetricsResponse)(nil),             // 9: ntt.devices.v1.ReportDeviceMetricsResponse
	(*HeartbeatMsg_Register)(nil),                   // 10: ntt.devices.v1.HeartbeatMsg.Register
	(*HeartbeatMsg_Heartbeat)(nil),                  // 11: ntt.devices.v1.HeartbeatMsg.Heartbeat
	(*DeviceMetrics_MemoryStats)(nil),               // 12: ntt.devices.v1.DeviceMetrics.MemoryStats
	(*DeviceMetrics_CpuCoreStats)(nil),              // 13: ntt.devices.v1.DeviceMetrics.CpuCoreStats
	(*DeviceMetrics_DiskMetricsLabel)(nil),          // 14: ntt.devices.v1.DeviceMetrics.DiskMetricsLabel
	(*DeviceMetrics_HardwareMetricsLabel)(nil),      // 15: ntt.devices.v1.DeviceMetrics.HardwareMetricsLabel
	(*DeviceMetrics_DiskMetric)(nil),                // 16: ntt.devices.v1.DeviceMetrics.DiskMetric
	(*DeviceMetrics_HardwareMetric)(nil),            // 17: ntt.devices.v1.DeviceMetrics.HardwareMetric
	(*DeviceMetrics_ModemMetricLabel)(nil),          // 18: ntt.devices.v1.DeviceMetrics.ModemMetricLabel
	(*DeviceMetrics_ModemMetric)(nil),               // 19: ntt.devices.v1.DeviceMetrics.ModemMetric
	nil,                                             // 20: ntt.devices.v1.DeviceMetrics.ModemMetricsEntry
	(*DeviceMetrics_PerAntennaSignal)(nil),          // 21: ntt.devices.v1.DeviceMetrics.PerAntennaSignal
	(*DeviceMetrics_ContainerMetricLabel)(nil),      // 22: ntt.devices.v1.DeviceMetrics.ContainerMetricLabel
	(*DeviceMetrics_ContainerMetric)(nil),           // 23: ntt.devices.v1.DeviceMetrics.ContainerMetric
	nil,                                             // 24: ntt.devices.v1.DeviceMetrics.ContainerMetricsEntry
	(*DeviceMetrics_PodMetricLabel)(nil),            // 25: ntt.devices.v1.DeviceMetrics.PodMetricLabel
	(*DeviceMetrics_PodMetric)(nil),                 // 26: ntt.devices.v1.DeviceMetrics.PodMetric
	(*api.ServiceAccount)(nil),                      // 27: ntt.api.ServiceAccount
	(*durationpb.Duration)(nil),                     // 28: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                   // 29: google.protobuf.Timestamp
}
var edgelq_devices_proto_v1_device_custom_proto_depIdxs = []int32{
	27, // 0: ntt.devices.v1.ProvisionServiceAccountToDeviceResponse.service_account:type_name -> ntt.api.ServiceAccount
	10, // 1: ntt.devices.v1.HeartbeatMsg.register:type_name -> ntt.devices.v1.HeartbeatMsg.Register
	11, // 2: ntt.devices.v1.HeartbeatMsg.heartbeat:type_name -> ntt.devices.v1.HeartbeatMsg.Heartbeat
	28, // 3: ntt.devices.v1.HeartbeatResponse.desired_heartbeat_interval:type_name -> google.protobuf.Duration
	8,  // 4: ntt.devices.v1.ReportDeviceMetricsRequest.device_metrics:type_name -> ntt.devices.v1.DeviceMetrics
	12, // 5: ntt.devices.v1.DeviceMetrics.memory_stats:type_name -> ntt.devices.v1.DeviceMetrics.MemoryStats
	13, // 6: ntt.devices.v1.DeviceMetrics.cpu_stats:type_name -> ntt.devices.v1.DeviceMetrics.CpuCoreStats
	16, // 7: ntt.devices.v1.DeviceMetrics.disk_metrics:type_name -> ntt.devices.v1.DeviceMetrics.DiskMetric
	17, // 8: ntt.devices.v1.DeviceMetrics.hardware_metrics:type_name -> ntt.devices.v1.DeviceMetrics.HardwareMetric
	20, // 9: ntt.devices.v1.DeviceMetrics.modem_metrics:type_name -> ntt.devices.v1.DeviceMetrics.ModemMetricsEntry
	21, // 10: ntt.devices.v1.DeviceMetrics.per_antenna_signal:type_name -> ntt.devices.v1.DeviceMetrics.PerAntennaSignal
	24, // 11: ntt.devices.v1.DeviceMetrics.container_metrics:type_name -> ntt.devices.v1.DeviceMetrics.ContainerMetricsEntry
	26, // 12: ntt.devices.v1.DeviceMetrics.pod_metrics:type_name -> ntt.devices.v1.DeviceMetrics.PodMetric
	29, // 13: ntt.devices.v1.DeviceMetrics.metrics_time:type_name -> google.protobuf.Timestamp
	14, // 14: ntt.devices.v1.DeviceMetrics.disk_labels:type_name -> ntt.devices.v1.DeviceMetrics.DiskMetricsLabel
	15, // 15: ntt.devices.v1.DeviceMetrics.hardware_metrics_labels:type_name -> ntt.devices.v1.DeviceMetrics.HardwareMetricsLabel
	18, // 16: ntt.devices.v1.DeviceMetrics.modem_metrics_labels:type_name -> ntt.devices.v1.DeviceMetrics.ModemMetricLabel
	22, // 17: ntt.devices.v1.DeviceMetrics.container_metrics_labels:type_name -> ntt.devices.v1.DeviceMetrics.ContainerMetricLabel
	25, // 18: ntt.devices.v1.DeviceMetrics.pod_metrics_labels:type_name -> ntt.devices.v1.DeviceMetrics.PodMetricLabel
	0,  // 19: ntt.devices.v1.DeviceMetrics.ModemMetricLabel.cell_type:type_name -> ntt.devices.v1.MobileNetworkType
	19, // 20: ntt.devices.v1.DeviceMetrics.ModemMetricsEntry.value:type_name -> ntt.devices.v1.DeviceMetrics.ModemMetric
	23, // 21: ntt.devices.v1.DeviceMetrics.ContainerMetricsEntry.value:type_name -> ntt.devices.v1.DeviceMetrics.ContainerMetric
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { edgelq_devices_proto_v1_device_custom_proto_init() }
func edgelq_devices_proto_v1_device_custom_proto_init() {
	if edgelq_devices_proto_v1_device_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_devices_proto_v1_device_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionServiceAccountToDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionServiceAccountToDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveServiceAccountFromDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveServiceAccountFromDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDeviceMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDeviceMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatMsg_Register); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatMsg_Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_MemoryStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_CpuCoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_DiskMetricsLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_HardwareMetricsLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_DiskMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_HardwareMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_ModemMetricLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_ModemMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_PerAntennaSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_ContainerMetricLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_ContainerMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_PodMetricLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_custom_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics_PodMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_devices_proto_v1_device_custom_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*HeartbeatMsg_Register_)(nil),
		(*HeartbeatMsg_Heartbeat_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_devices_proto_v1_device_custom_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_devices_proto_v1_device_custom_proto_goTypes,
		DependencyIndexes: edgelq_devices_proto_v1_device_custom_proto_depIdxs,
		EnumInfos:         edgelq_devices_proto_v1_device_custom_proto_enumTypes,
		MessageInfos:      edgelq_devices_proto_v1_device_custom_proto_msgTypes,
	}.Build()
	edgelq_devices_proto_v1_device_custom_proto = out.File
	edgelq_devices_proto_v1_device_custom_proto_rawDesc = nil
	edgelq_devices_proto_v1_device_custom_proto_goTypes = nil
	edgelq_devices_proto_v1_device_custom_proto_depIdxs = nil
}
