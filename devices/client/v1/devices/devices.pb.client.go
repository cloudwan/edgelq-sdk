// Code generated by protoc-gen-goten-client
// Service: Devices
// DO NOT EDIT!!!

package devices_client

import (
	"google.golang.org/grpc"
)

// proto imports
import (
	customized_image_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/customized_image"
	device_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/device"
	device_distribution_counter_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/device_distribution_counter"
	device_hardware_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/device_hardware"
	device_hardware_register_session_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/device_hardware_register_session"
	device_metrics_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/device_metrics"
	device_type_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/device_type"
	os_image_profile_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/os_image_profile"
	os_version_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/os_version"
	project_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/project"
	provisioning_approval_request_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/provisioning_approval_request"
	provisioning_policy_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/provisioning_policy"
	public_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/public"
	tpm_attestation_cert_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/tpm_attestation_cert"
	ztp_provision_hardware_client "github.com/cloudwan/edgelq-sdk/devices/client/v1/ztp_provision_hardware"
	customized_image "github.com/cloudwan/edgelq-sdk/devices/resources/v1/customized_image"
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	device_distribution_counter "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_distribution_counter"
	device_hardware "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_hardware"
	device_hardware_register_session "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_hardware_register_session"
	device_type "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_type"
	os_image_profile "github.com/cloudwan/edgelq-sdk/devices/resources/v1/os_image_profile"
	os_version "github.com/cloudwan/edgelq-sdk/devices/resources/v1/os_version"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	provisioning_approval_request "github.com/cloudwan/edgelq-sdk/devices/resources/v1/provisioning_approval_request"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1/provisioning_policy"
	tpm_attestation_cert "github.com/cloudwan/edgelq-sdk/devices/resources/v1/tpm_attestation_cert"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &customized_image.CustomizedImage{}
	_ = &customized_image_client.GetCustomizedImageRequest{}
	_ = &device.Device{}
	_ = &device_distribution_counter.DeviceDistributionCounter{}
	_ = &device_distribution_counter_client.GetDeviceDistributionCounterRequest{}
	_ = &device_hardware.DeviceHardware{}
	_ = &device_hardware_register_session.DeviceHardwareRegisterSession{}
	_ = &device_hardware_register_session_client.GetDeviceHardwareRegisterSessionRequest{}
	_ = &device_hardware_client.GetDeviceHardwareRequest{}
	_ = &device_client.GetDeviceRequest{}
	_ = &device_type.DeviceType{}
	_ = &device_type_client.GetDeviceTypeRequest{}
	_ = &os_image_profile.OsImageProfile{}
	_ = &os_image_profile_client.GetOsImageProfileRequest{}
	_ = &os_version.OsVersion{}
	_ = &os_version_client.GetOsVersionRequest{}
	_ = &project.Project{}
	_ = &project_client.GetProjectRequest{}
	_ = &provisioning_approval_request.ProvisioningApprovalRequest{}
	_ = &provisioning_approval_request_client.GetProvisioningApprovalRequestRequest{}
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &provisioning_policy_client.GetProvisioningPolicyRequest{}
	_ = &tpm_attestation_cert.TpmAttestationCert{}
	_ = &tpm_attestation_cert_client.GetTpmAttestationCertRequest{}
)

type DevicesClient interface {
	customized_image_client.CustomizedImageServiceClient
	device_distribution_counter_client.DeviceDistributionCounterServiceClient
	device_hardware_register_session_client.DeviceHardwareRegisterSessionServiceClient
	device_hardware_client.DeviceHardwareServiceClient
	device_metrics_client.DeviceMetricsServiceClient
	device_client.DeviceServiceClient
	device_type_client.DeviceTypeServiceClient
	os_image_profile_client.OsImageProfileServiceClient
	os_version_client.OsVersionServiceClient
	project_client.ProjectServiceClient
	provisioning_approval_request_client.ProvisioningApprovalRequestServiceClient
	provisioning_policy_client.ProvisioningPolicyServiceClient
	public_client.PublicServiceClient
	tpm_attestation_cert_client.TpmAttestationCertServiceClient
	ztp_provision_hardware_client.ZtpProvisionHardwareServiceClient
}

type devicesClient struct {
	customized_image_client.CustomizedImageServiceClient
	device_distribution_counter_client.DeviceDistributionCounterServiceClient
	device_hardware_register_session_client.DeviceHardwareRegisterSessionServiceClient
	device_hardware_client.DeviceHardwareServiceClient
	device_metrics_client.DeviceMetricsServiceClient
	device_client.DeviceServiceClient
	device_type_client.DeviceTypeServiceClient
	os_image_profile_client.OsImageProfileServiceClient
	os_version_client.OsVersionServiceClient
	project_client.ProjectServiceClient
	provisioning_approval_request_client.ProvisioningApprovalRequestServiceClient
	provisioning_policy_client.ProvisioningPolicyServiceClient
	public_client.PublicServiceClient
	tpm_attestation_cert_client.TpmAttestationCertServiceClient
	ztp_provision_hardware_client.ZtpProvisionHardwareServiceClient
}

func NewDevicesClient(cc grpc.ClientConnInterface) DevicesClient {
	return &devicesClient{
		CustomizedImageServiceClient:               customized_image_client.NewCustomizedImageServiceClient(cc),
		DeviceDistributionCounterServiceClient:     device_distribution_counter_client.NewDeviceDistributionCounterServiceClient(cc),
		DeviceHardwareRegisterSessionServiceClient: device_hardware_register_session_client.NewDeviceHardwareRegisterSessionServiceClient(cc),
		DeviceHardwareServiceClient:                device_hardware_client.NewDeviceHardwareServiceClient(cc),
		DeviceMetricsServiceClient:                 device_metrics_client.NewDeviceMetricsServiceClient(cc),
		DeviceServiceClient:                        device_client.NewDeviceServiceClient(cc),
		DeviceTypeServiceClient:                    device_type_client.NewDeviceTypeServiceClient(cc),
		OsImageProfileServiceClient:                os_image_profile_client.NewOsImageProfileServiceClient(cc),
		OsVersionServiceClient:                     os_version_client.NewOsVersionServiceClient(cc),
		ProjectServiceClient:                       project_client.NewProjectServiceClient(cc),
		ProvisioningApprovalRequestServiceClient:   provisioning_approval_request_client.NewProvisioningApprovalRequestServiceClient(cc),
		ProvisioningPolicyServiceClient:            provisioning_policy_client.NewProvisioningPolicyServiceClient(cc),
		PublicServiceClient:                        public_client.NewPublicServiceClient(cc),
		TpmAttestationCertServiceClient:            tpm_attestation_cert_client.NewTpmAttestationCertServiceClient(cc),
		ZtpProvisionHardwareServiceClient:          ztp_provision_hardware_client.NewZtpProvisionHardwareServiceClient(cc),
	}
}
