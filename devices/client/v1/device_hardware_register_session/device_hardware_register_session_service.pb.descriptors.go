// Code generated by protoc-gen-goten-client
// API: DeviceHardwareRegisterSessionService
// DO NOT EDIT!!!

package device_hardware_register_session_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	device_hardware_register_session "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_hardware_register_session"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &device_hardware_register_session.DeviceHardwareRegisterSession{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized                              bool
	deviceHardwareRegisterSessionServiceDescriptor      *DeviceHardwareRegisterSessionServiceDescriptor
	getDeviceHardwareRegisterSessionDescriptor          *GetDeviceHardwareRegisterSessionDescriptor
	batchGetDeviceHardwareRegisterSessionsDescriptor    *BatchGetDeviceHardwareRegisterSessionsDescriptor
	listDeviceHardwareRegisterSessionsDescriptor        *ListDeviceHardwareRegisterSessionsDescriptor
	watchDeviceHardwareRegisterSessionDescriptor        *WatchDeviceHardwareRegisterSessionDescriptor
	watchDeviceHardwareRegisterSessionsDescriptor       *WatchDeviceHardwareRegisterSessionsDescriptor
	createDeviceHardwareRegisterSessionDescriptor       *CreateDeviceHardwareRegisterSessionDescriptor
	updateDeviceHardwareRegisterSessionDescriptor       *UpdateDeviceHardwareRegisterSessionDescriptor
	deleteDeviceHardwareRegisterSessionDescriptor       *DeleteDeviceHardwareRegisterSessionDescriptor
	getDeviceHardwareRegisterSessionFromTokenDescriptor *GetDeviceHardwareRegisterSessionFromTokenDescriptor
	registerHardwareDescriptor                          *RegisterHardwareDescriptor
	hardwareStatusDescriptor                            *HardwareStatusDescriptor
)

type GetDeviceHardwareRegisterSessionDescriptor struct{}

type GetDeviceHardwareRegisterSessionDescriptorClientMsgHandle struct{}

type GetDeviceHardwareRegisterSessionDescriptorServerMsgHandle struct{}

func (d *GetDeviceHardwareRegisterSessionDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetDeviceHardwareRegisterSessionRequest{}
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) NewEmptyServerMsg() proto.Message {
	return &device_hardware_register_session.DeviceHardwareRegisterSession{}
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) IsUnary() bool {
	return true
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) IsClientStream() bool {
	return false
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) IsServerStream() bool {
	return false
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) IsCollection() bool {
	return false
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) IsPlural() bool {
	return false
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) HasResource() bool {
	return true
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) GetVerb() string {
	return "get"
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) GetMethodName() string {
	return "GetDeviceHardwareRegisterSession"
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareRegisterSessionService/GetDeviceHardwareRegisterSession"
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) GetApiName() string {
	return "DeviceHardwareRegisterSessionService"
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareRegisterSessionServiceDescriptor
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware_register_session.GetDescriptor()
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeviceHardwareRegisterSessionDescriptorClientMsgHandle{}
}

func (d *GetDeviceHardwareRegisterSessionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeviceHardwareRegisterSessionDescriptorServerMsgHandle{}
}

func (h *GetDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware_register_session.Name)(nil)
}

func (h *GetDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetDeviceHardwareRegisterSessionRequest) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetDeviceHardwareRegisterSessionRequest) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*device_hardware_register_session.DeviceHardwareRegisterSession) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware_register_session.Name)(nil)
}

func (h *GetDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*device_hardware_register_session.DeviceHardwareRegisterSession) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*device_hardware_register_session.DeviceHardwareRegisterSession) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
}

func (h *GetDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*device_hardware_register_session.DeviceHardwareRegisterSession) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetDeviceHardwareRegisterSessionDescriptor() *GetDeviceHardwareRegisterSessionDescriptor {
	return getDeviceHardwareRegisterSessionDescriptor
}

type BatchGetDeviceHardwareRegisterSessionsDescriptor struct{}

type BatchGetDeviceHardwareRegisterSessionsDescriptorClientMsgHandle struct{}

type BatchGetDeviceHardwareRegisterSessionsDescriptorServerMsgHandle struct{}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetDeviceHardwareRegisterSessionsRequest{}
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetDeviceHardwareRegisterSessionsResponse{}
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) GetMethodName() string {
	return "BatchGetDeviceHardwareRegisterSessions"
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareRegisterSessionService/BatchGetDeviceHardwareRegisterSessions"
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) GetApiName() string {
	return "DeviceHardwareRegisterSessionService"
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareRegisterSessionServiceDescriptor
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware_register_session.GetDescriptor()
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDeviceHardwareRegisterSessionsDescriptorClientMsgHandle{}
}

func (d *BatchGetDeviceHardwareRegisterSessionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDeviceHardwareRegisterSessionsDescriptorServerMsgHandle{}
}

func (h *BatchGetDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDeviceHardwareRegisterSessionsRequest) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDeviceHardwareRegisterSessionsRequest) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(names)
		}
	}
	return (device_hardware_register_session.DeviceHardwareRegisterSessionNameList)(nil)
}

func (h *BatchGetDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetDeviceHardwareRegisterSessionsRequest) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetDeviceHardwareRegisterSessionsRequest) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetDeviceHardwareRegisterSessionsRequest) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDeviceHardwareRegisterSessionsResponse) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDeviceHardwareRegisterSessionsResponse) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceHardwareRegisterSessions(); len(resources) > 0 {
			list := make(device_hardware_register_session.DeviceHardwareRegisterSessionNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (device_hardware_register_session.DeviceHardwareRegisterSessionNameList)(nil)
}

func (h *BatchGetDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetDeviceHardwareRegisterSessionsResponse) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetDeviceHardwareRegisterSessionsResponse) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetDeviceHardwareRegisterSessionsResponse) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceHardwareRegisterSessions(); len(resources) > 0 {
			return device_hardware_register_session.DeviceHardwareRegisterSessionList(resources)
		}
	}
	return (device_hardware_register_session.DeviceHardwareRegisterSessionList)(nil)
}

func GetBatchGetDeviceHardwareRegisterSessionsDescriptor() *BatchGetDeviceHardwareRegisterSessionsDescriptor {
	return batchGetDeviceHardwareRegisterSessionsDescriptor
}

type ListDeviceHardwareRegisterSessionsDescriptor struct{}

type ListDeviceHardwareRegisterSessionsDescriptorClientMsgHandle struct{}

type ListDeviceHardwareRegisterSessionsDescriptorServerMsgHandle struct{}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListDeviceHardwareRegisterSessionsRequest{}
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListDeviceHardwareRegisterSessionsResponse{}
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) IsUnary() bool {
	return true
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) IsCollection() bool {
	return true
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) IsPlural() bool {
	return true
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) HasResource() bool {
	return true
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) GetMethodName() string {
	return "ListDeviceHardwareRegisterSessions"
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareRegisterSessionService/ListDeviceHardwareRegisterSessions"
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) GetApiName() string {
	return "DeviceHardwareRegisterSessionService"
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareRegisterSessionServiceDescriptor
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware_register_session.GetDescriptor()
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDeviceHardwareRegisterSessionsDescriptorClientMsgHandle{}
}

func (d *ListDeviceHardwareRegisterSessionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDeviceHardwareRegisterSessionsDescriptorServerMsgHandle{}
}

func (h *ListDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDeviceHardwareRegisterSessionsRequest) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDeviceHardwareRegisterSessionsRequest) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListDeviceHardwareRegisterSessionsRequest) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*device_hardware_register_session.ParentName)(nil)
}

func (h *ListDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListDeviceHardwareRegisterSessionsRequest) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListDeviceHardwareRegisterSessionsRequest) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDeviceHardwareRegisterSessionsResponse) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDeviceHardwareRegisterSessionsResponse) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceHardwareRegisterSessions(); len(resources) > 0 {
			list := make(device_hardware_register_session.DeviceHardwareRegisterSessionNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (device_hardware_register_session.DeviceHardwareRegisterSessionNameList)(nil)
}

func (h *ListDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListDeviceHardwareRegisterSessionsResponse) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListDeviceHardwareRegisterSessionsResponse) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListDeviceHardwareRegisterSessionsResponse) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceHardwareRegisterSessions(); len(resources) > 0 {
			return device_hardware_register_session.DeviceHardwareRegisterSessionList(resources)
		}
	}
	return (device_hardware_register_session.DeviceHardwareRegisterSessionList)(nil)
}

func GetListDeviceHardwareRegisterSessionsDescriptor() *ListDeviceHardwareRegisterSessionsDescriptor {
	return listDeviceHardwareRegisterSessionsDescriptor
}

type WatchDeviceHardwareRegisterSessionDescriptor struct{}

type WatchDeviceHardwareRegisterSessionDescriptorClientMsgHandle struct{}

type WatchDeviceHardwareRegisterSessionDescriptorServerMsgHandle struct{}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeviceHardwareRegisterSessionRequest{}
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeviceHardwareRegisterSessionResponse{}
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) IsCollection() bool {
	return false
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) IsPlural() bool {
	return false
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) HasResource() bool {
	return true
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) GetMethodName() string {
	return "WatchDeviceHardwareRegisterSession"
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareRegisterSessionService/WatchDeviceHardwareRegisterSession"
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) GetApiName() string {
	return "DeviceHardwareRegisterSessionService"
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareRegisterSessionServiceDescriptor
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware_register_session.GetDescriptor()
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceHardwareRegisterSessionDescriptorClientMsgHandle{}
}

func (d *WatchDeviceHardwareRegisterSessionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceHardwareRegisterSessionDescriptorServerMsgHandle{}
}

func (h *WatchDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware_register_session.Name)(nil)
}

func (h *WatchDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceHardwareRegisterSessionRequest) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeviceHardwareRegisterSessionRequest) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceHardwareRegisterSessionResponse) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *device_hardware_register_session.DeviceHardwareRegisterSessionChange_Added_:
				return tResChange.Added.GetDeviceHardwareRegisterSession().GetName()
			case *device_hardware_register_session.DeviceHardwareRegisterSessionChange_Modified_:
				return tResChange.Modified.GetName()
			case *device_hardware_register_session.DeviceHardwareRegisterSessionChange_Removed_:
				return tResChange.Removed.GetName()
			case *device_hardware_register_session.DeviceHardwareRegisterSessionChange_Current_:
				return tResChange.Current.GetDeviceHardwareRegisterSession().GetName()
			}
		}
	}
	return (*device_hardware_register_session.Name)(nil)
}

func (h *WatchDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceHardwareRegisterSessionResponse) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceHardwareRegisterSessionResponse) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeviceHardwareRegisterSessionResponse) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *device_hardware_register_session.DeviceHardwareRegisterSessionChange_Added_:
				return tResChange.Added.GetDeviceHardwareRegisterSession()
			case *device_hardware_register_session.DeviceHardwareRegisterSessionChange_Modified_:
				return tResChange.Modified.GetDeviceHardwareRegisterSession()
			case *device_hardware_register_session.DeviceHardwareRegisterSessionChange_Current_:
				return tResChange.Current.GetDeviceHardwareRegisterSession()
			}
		}
	}
	return (*device_hardware_register_session.DeviceHardwareRegisterSession)(nil)
}

func (h *WatchDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeviceHardwareRegisterSessionResponse) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchDeviceHardwareRegisterSessionDescriptor() *WatchDeviceHardwareRegisterSessionDescriptor {
	return watchDeviceHardwareRegisterSessionDescriptor
}

type WatchDeviceHardwareRegisterSessionsDescriptor struct{}

type WatchDeviceHardwareRegisterSessionsDescriptorClientMsgHandle struct{}

type WatchDeviceHardwareRegisterSessionsDescriptorServerMsgHandle struct{}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeviceHardwareRegisterSessionsRequest{}
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeviceHardwareRegisterSessionsResponse{}
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) HasResource() bool {
	return true
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) GetMethodName() string {
	return "WatchDeviceHardwareRegisterSessions"
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareRegisterSessionService/WatchDeviceHardwareRegisterSessions"
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) GetApiName() string {
	return "DeviceHardwareRegisterSessionService"
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareRegisterSessionServiceDescriptor
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware_register_session.GetDescriptor()
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceHardwareRegisterSessionsDescriptorClientMsgHandle{}
}

func (d *WatchDeviceHardwareRegisterSessionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceHardwareRegisterSessionsDescriptorServerMsgHandle{}
}

func (h *WatchDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceHardwareRegisterSessionsRequest) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceHardwareRegisterSessionsRequest) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceHardwareRegisterSessionsRequest) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*device_hardware_register_session.ParentName)(nil)
}

func (h *WatchDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeviceHardwareRegisterSessionsRequest) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwareRegisterSessionsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeviceHardwareRegisterSessionsRequest) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceHardwareRegisterSessionsResponse) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceHardwareRegisterSessionsResponse) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetDeviceHardwareRegisterSessionChanges(); len(resChanges) > 0 {
			list := make(device_hardware_register_session.DeviceHardwareRegisterSessionNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *device_hardware_register_session.DeviceHardwareRegisterSessionChange_Added_:
					list = append(list, tResChange.Added.GetDeviceHardwareRegisterSession().GetName())
				case *device_hardware_register_session.DeviceHardwareRegisterSessionChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *device_hardware_register_session.DeviceHardwareRegisterSessionChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *device_hardware_register_session.DeviceHardwareRegisterSessionChange_Current_:
					list = append(list, tResChange.Current.GetDeviceHardwareRegisterSession().GetName())
				}
			}
			return list
		}
	}
	return (device_hardware_register_session.DeviceHardwareRegisterSessionNameList)(nil)
}

func (h *WatchDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceHardwareRegisterSessionsResponse) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeviceHardwareRegisterSessionsResponse) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDeviceHardwareRegisterSessionsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeviceHardwareRegisterSessionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeviceHardwareRegisterSessionsResponse) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetDeviceHardwareRegisterSessionChanges(); len(resChanges) > 0 {
			list := make(device_hardware_register_session.DeviceHardwareRegisterSessionList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *device_hardware_register_session.DeviceHardwareRegisterSessionChange_Added_:
					list = append(list, tResChange.Added.GetDeviceHardwareRegisterSession())
				case *device_hardware_register_session.DeviceHardwareRegisterSessionChange_Modified_:
					list = append(list, tResChange.Modified.GetDeviceHardwareRegisterSession())
				case *device_hardware_register_session.DeviceHardwareRegisterSessionChange_Current_:
					list = append(list, tResChange.Current.GetDeviceHardwareRegisterSession())
				}
			}
			return list
		}
	}
	return (device_hardware_register_session.DeviceHardwareRegisterSessionList)(nil)
}

func GetWatchDeviceHardwareRegisterSessionsDescriptor() *WatchDeviceHardwareRegisterSessionsDescriptor {
	return watchDeviceHardwareRegisterSessionsDescriptor
}

type CreateDeviceHardwareRegisterSessionDescriptor struct{}

type CreateDeviceHardwareRegisterSessionDescriptorClientMsgHandle struct{}

type CreateDeviceHardwareRegisterSessionDescriptorServerMsgHandle struct{}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateDeviceHardwareRegisterSessionRequest{}
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) NewEmptyServerMsg() proto.Message {
	return &device_hardware_register_session.DeviceHardwareRegisterSession{}
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) IsUnary() bool {
	return true
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) IsCollection() bool {
	return true
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) IsPlural() bool {
	return false
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) HasResource() bool {
	return true
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) GetMethodName() string {
	return "CreateDeviceHardwareRegisterSession"
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareRegisterSessionService/CreateDeviceHardwareRegisterSession"
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) GetApiName() string {
	return "DeviceHardwareRegisterSessionService"
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareRegisterSessionServiceDescriptor
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware_register_session.GetDescriptor()
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDeviceHardwareRegisterSessionDescriptorClientMsgHandle{}
}

func (d *CreateDeviceHardwareRegisterSessionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDeviceHardwareRegisterSessionDescriptorServerMsgHandle{}
}

func (h *CreateDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetDeviceHardwareRegisterSession()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware_register_session.Name)(nil)
}

func (h *CreateDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateDeviceHardwareRegisterSessionRequest) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*device_hardware_register_session.ParentName)(nil)
}

func (h *CreateDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetDeviceHardwareRegisterSession()
	}
	return (*device_hardware_register_session.DeviceHardwareRegisterSession)(nil)
}

func (h *CreateDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateDeviceHardwareRegisterSessionRequest) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*device_hardware_register_session.DeviceHardwareRegisterSession) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware_register_session.Name)(nil)
}

func (h *CreateDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*device_hardware_register_session.DeviceHardwareRegisterSession) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*device_hardware_register_session.DeviceHardwareRegisterSession) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
}

func (h *CreateDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*device_hardware_register_session.DeviceHardwareRegisterSession) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateDeviceHardwareRegisterSessionDescriptor() *CreateDeviceHardwareRegisterSessionDescriptor {
	return createDeviceHardwareRegisterSessionDescriptor
}

type UpdateDeviceHardwareRegisterSessionDescriptor struct{}

type UpdateDeviceHardwareRegisterSessionDescriptorClientMsgHandle struct{}

type UpdateDeviceHardwareRegisterSessionDescriptorServerMsgHandle struct{}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateDeviceHardwareRegisterSessionRequest{}
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) NewEmptyServerMsg() proto.Message {
	return &device_hardware_register_session.DeviceHardwareRegisterSession{}
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) HasResource() bool {
	return true
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) GetMethodName() string {
	return "UpdateDeviceHardwareRegisterSession"
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareRegisterSessionService/UpdateDeviceHardwareRegisterSession"
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) GetApiName() string {
	return "DeviceHardwareRegisterSessionService"
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareRegisterSessionServiceDescriptor
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware_register_session.GetDescriptor()
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDeviceHardwareRegisterSessionDescriptorClientMsgHandle{}
}

func (d *UpdateDeviceHardwareRegisterSessionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDeviceHardwareRegisterSessionDescriptorServerMsgHandle{}
}

func (h *UpdateDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetDeviceHardwareRegisterSession()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware_register_session.Name)(nil)
}

func (h *UpdateDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateDeviceHardwareRegisterSessionRequest) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetDeviceHardwareRegisterSession()
	}
	return (*device_hardware_register_session.DeviceHardwareRegisterSession)(nil)
}

func (h *UpdateDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateDeviceHardwareRegisterSessionRequest) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*device_hardware_register_session.DeviceHardwareRegisterSession) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware_register_session.Name)(nil)
}

func (h *UpdateDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*device_hardware_register_session.DeviceHardwareRegisterSession) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*device_hardware_register_session.DeviceHardwareRegisterSession) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
}

func (h *UpdateDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*device_hardware_register_session.DeviceHardwareRegisterSession)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*device_hardware_register_session.DeviceHardwareRegisterSession) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateDeviceHardwareRegisterSessionDescriptor() *UpdateDeviceHardwareRegisterSessionDescriptor {
	return updateDeviceHardwareRegisterSessionDescriptor
}

type DeleteDeviceHardwareRegisterSessionDescriptor struct{}

type DeleteDeviceHardwareRegisterSessionDescriptorClientMsgHandle struct{}

type DeleteDeviceHardwareRegisterSessionDescriptorServerMsgHandle struct{}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteDeviceHardwareRegisterSessionRequest{}
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) HasResource() bool {
	return true
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) GetMethodName() string {
	return "DeleteDeviceHardwareRegisterSession"
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareRegisterSessionService/DeleteDeviceHardwareRegisterSession"
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) GetApiName() string {
	return "DeviceHardwareRegisterSessionService"
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareRegisterSessionServiceDescriptor
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware_register_session.GetDescriptor()
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDeviceHardwareRegisterSessionDescriptorClientMsgHandle{}
}

func (d *DeleteDeviceHardwareRegisterSessionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDeviceHardwareRegisterSessionDescriptorServerMsgHandle{}
}

func (h *DeleteDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_hardware_register_session.Name)(nil)
}

func (h *DeleteDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteDeviceHardwareRegisterSessionRequest) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteDeviceHardwareRegisterSessionRequest) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceHardwareRegisterSessionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteDeviceHardwareRegisterSessionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteDeviceHardwareRegisterSessionRequest) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceHardwareRegisterSessionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteDeviceHardwareRegisterSessionDescriptor() *DeleteDeviceHardwareRegisterSessionDescriptor {
	return deleteDeviceHardwareRegisterSessionDescriptor
}

type GetDeviceHardwareRegisterSessionFromTokenDescriptor struct{}

type GetDeviceHardwareRegisterSessionFromTokenDescriptorClientMsgHandle struct{}

type GetDeviceHardwareRegisterSessionFromTokenDescriptorServerMsgHandle struct{}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetDeviceHardwareRegisterSessionFromTokenRequest{}
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) NewEmptyServerMsg() proto.Message {
	return &GetDeviceHardwareRegisterSessionFromTokenResponse{}
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) IsUnary() bool {
	return true
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) IsClientStream() bool {
	return false
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) IsServerStream() bool {
	return false
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) IsCollection() bool {
	return true
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) IsPlural() bool {
	return false
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) HasResource() bool {
	return true
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) GetVerb() string {
	return "getDeviceHardwareRegisterSessionFromToken"
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) GetMethodName() string {
	return "GetDeviceHardwareRegisterSessionFromToken"
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareRegisterSessionService/GetDeviceHardwareRegisterSessionFromToken"
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) GetApiName() string {
	return "DeviceHardwareRegisterSessionService"
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareRegisterSessionServiceDescriptor
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware_register_session.GetDescriptor()
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeviceHardwareRegisterSessionFromTokenDescriptorClientMsgHandle{}
}

func (d *GetDeviceHardwareRegisterSessionFromTokenDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeviceHardwareRegisterSessionFromTokenDescriptorServerMsgHandle{}
}

func (h *GetDeviceHardwareRegisterSessionFromTokenDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionFromTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetDeviceHardwareRegisterSessionFromTokenRequest) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionFromTokenDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionFromTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetDeviceHardwareRegisterSessionFromTokenRequest) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionFromTokenDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionFromTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetDeviceHardwareRegisterSessionFromTokenRequest) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionFromTokenDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionFromTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetDeviceHardwareRegisterSessionFromTokenRequest) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionFromTokenDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionFromTokenRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetDeviceHardwareRegisterSessionFromTokenRequest) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionFromTokenDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionFromTokenResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetDeviceHardwareRegisterSessionFromTokenResponse) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionFromTokenDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionFromTokenResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetDeviceHardwareRegisterSessionFromTokenResponse) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionFromTokenDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionFromTokenResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetDeviceHardwareRegisterSessionFromTokenResponse) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionFromTokenDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionFromTokenResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetDeviceHardwareRegisterSessionFromTokenResponse) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetDeviceHardwareRegisterSessionFromTokenDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetDeviceHardwareRegisterSessionFromTokenResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetDeviceHardwareRegisterSessionFromTokenResponse) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetDeviceHardwareRegisterSessionFromTokenDescriptor() *GetDeviceHardwareRegisterSessionFromTokenDescriptor {
	return getDeviceHardwareRegisterSessionFromTokenDescriptor
}

type RegisterHardwareDescriptor struct{}

type RegisterHardwareDescriptorClientMsgHandle struct{}

type RegisterHardwareDescriptorServerMsgHandle struct{}

func (d *RegisterHardwareDescriptor) NewEmptyClientMsg() proto.Message {
	return &RegisterHardwareRequest{}
}

func (d *RegisterHardwareDescriptor) NewEmptyServerMsg() proto.Message {
	return &RegisterHardwareResponse{}
}

func (d *RegisterHardwareDescriptor) IsUnary() bool {
	return true
}

func (d *RegisterHardwareDescriptor) IsClientStream() bool {
	return false
}

func (d *RegisterHardwareDescriptor) IsServerStream() bool {
	return false
}

func (d *RegisterHardwareDescriptor) IsCollection() bool {
	return true
}

func (d *RegisterHardwareDescriptor) IsPlural() bool {
	return false
}

func (d *RegisterHardwareDescriptor) HasResource() bool {
	return true
}

func (d *RegisterHardwareDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *RegisterHardwareDescriptor) GetVerb() string {
	return "registerHardware"
}

func (d *RegisterHardwareDescriptor) GetMethodName() string {
	return "RegisterHardware"
}

func (d *RegisterHardwareDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareRegisterSessionService/RegisterHardware"
}

func (d *RegisterHardwareDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *RegisterHardwareDescriptor) GetApiName() string {
	return "DeviceHardwareRegisterSessionService"
}

func (d *RegisterHardwareDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *RegisterHardwareDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *RegisterHardwareDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareRegisterSessionServiceDescriptor
}

func (d *RegisterHardwareDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware_register_session.GetDescriptor()
}

func (d *RegisterHardwareDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RegisterHardwareDescriptorClientMsgHandle{}
}

func (d *RegisterHardwareDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RegisterHardwareDescriptorServerMsgHandle{}
}

func (h *RegisterHardwareDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RegisterHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*RegisterHardwareRequest) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *RegisterHardwareDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RegisterHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*RegisterHardwareRequest) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *RegisterHardwareDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RegisterHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*RegisterHardwareRequest) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *RegisterHardwareDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*RegisterHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*RegisterHardwareRequest) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *RegisterHardwareDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*RegisterHardwareRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*RegisterHardwareRequest) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *RegisterHardwareDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RegisterHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*RegisterHardwareResponse) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *RegisterHardwareDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RegisterHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*RegisterHardwareResponse) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *RegisterHardwareDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RegisterHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*RegisterHardwareResponse) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *RegisterHardwareDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*RegisterHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*RegisterHardwareResponse) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *RegisterHardwareDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*RegisterHardwareResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*RegisterHardwareResponse) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetRegisterHardwareDescriptor() *RegisterHardwareDescriptor {
	return registerHardwareDescriptor
}

type HardwareStatusDescriptor struct{}

type HardwareStatusDescriptorClientMsgHandle struct{}

type HardwareStatusDescriptorServerMsgHandle struct{}

func (d *HardwareStatusDescriptor) NewEmptyClientMsg() proto.Message {
	return &HardwareStatusRequest{}
}

func (d *HardwareStatusDescriptor) NewEmptyServerMsg() proto.Message {
	return &HardwareStatusResponse{}
}

func (d *HardwareStatusDescriptor) IsUnary() bool {
	return true
}

func (d *HardwareStatusDescriptor) IsClientStream() bool {
	return false
}

func (d *HardwareStatusDescriptor) IsServerStream() bool {
	return false
}

func (d *HardwareStatusDescriptor) IsCollection() bool {
	return true
}

func (d *HardwareStatusDescriptor) IsPlural() bool {
	return false
}

func (d *HardwareStatusDescriptor) HasResource() bool {
	return true
}

func (d *HardwareStatusDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *HardwareStatusDescriptor) GetVerb() string {
	return "hardwareStatus"
}

func (d *HardwareStatusDescriptor) GetMethodName() string {
	return "HardwareStatus"
}

func (d *HardwareStatusDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceHardwareRegisterSessionService/HardwareStatus"
}

func (d *HardwareStatusDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *HardwareStatusDescriptor) GetApiName() string {
	return "DeviceHardwareRegisterSessionService"
}

func (d *HardwareStatusDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *HardwareStatusDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *HardwareStatusDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceHardwareRegisterSessionServiceDescriptor
}

func (d *HardwareStatusDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_hardware_register_session.GetDescriptor()
}

func (d *HardwareStatusDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &HardwareStatusDescriptorClientMsgHandle{}
}

func (d *HardwareStatusDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &HardwareStatusDescriptorServerMsgHandle{}
}

func (h *HardwareStatusDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*HardwareStatusRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*HardwareStatusRequest) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *HardwareStatusDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*HardwareStatusRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*HardwareStatusRequest) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *HardwareStatusDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*HardwareStatusRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*HardwareStatusRequest) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *HardwareStatusDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*HardwareStatusRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*HardwareStatusRequest) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *HardwareStatusDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*HardwareStatusRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*HardwareStatusRequest) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *HardwareStatusDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*HardwareStatusResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*HardwareStatusResponse) *device_hardware_register_session.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *HardwareStatusDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*HardwareStatusResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*HardwareStatusResponse) []*device_hardware_register_session.Name
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *HardwareStatusDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*HardwareStatusResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*HardwareStatusResponse) *device_hardware_register_session.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *HardwareStatusDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*HardwareStatusResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*HardwareStatusResponse) *device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *HardwareStatusDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*HardwareStatusResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*HardwareStatusResponse) []*device_hardware_register_session.DeviceHardwareRegisterSession
	})
	if ok {
		return device_hardware_register_session.DeviceHardwareRegisterSessionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetHardwareStatusDescriptor() *HardwareStatusDescriptor {
	return hardwareStatusDescriptor
}

type DeviceHardwareRegisterSessionServiceDescriptor struct{}

func (d *DeviceHardwareRegisterSessionServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getDeviceHardwareRegisterSessionDescriptor,
		batchGetDeviceHardwareRegisterSessionsDescriptor,
		listDeviceHardwareRegisterSessionsDescriptor,
		watchDeviceHardwareRegisterSessionDescriptor,
		watchDeviceHardwareRegisterSessionsDescriptor,
		createDeviceHardwareRegisterSessionDescriptor,
		updateDeviceHardwareRegisterSessionDescriptor,
		deleteDeviceHardwareRegisterSessionDescriptor,
		getDeviceHardwareRegisterSessionFromTokenDescriptor,
		registerHardwareDescriptor,
		hardwareStatusDescriptor,
	}
}

func (d *DeviceHardwareRegisterSessionServiceDescriptor) GetFullAPIName() string {
	return "/ntt.devices.v1.DeviceHardwareRegisterSessionService"
}

func (d *DeviceHardwareRegisterSessionServiceDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *DeviceHardwareRegisterSessionServiceDescriptor) GetApiName() string {
	return "DeviceHardwareRegisterSessionService"
}

func (d *DeviceHardwareRegisterSessionServiceDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *DeviceHardwareRegisterSessionServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetDeviceHardwareRegisterSessionServiceDescriptor() *DeviceHardwareRegisterSessionServiceDescriptor {
	return deviceHardwareRegisterSessionServiceDescriptor
}

func initDescriptors() {
	deviceHardwareRegisterSessionServiceDescriptor = &DeviceHardwareRegisterSessionServiceDescriptor{}
	getDeviceHardwareRegisterSessionDescriptor = &GetDeviceHardwareRegisterSessionDescriptor{}
	batchGetDeviceHardwareRegisterSessionsDescriptor = &BatchGetDeviceHardwareRegisterSessionsDescriptor{}
	listDeviceHardwareRegisterSessionsDescriptor = &ListDeviceHardwareRegisterSessionsDescriptor{}
	watchDeviceHardwareRegisterSessionDescriptor = &WatchDeviceHardwareRegisterSessionDescriptor{}
	watchDeviceHardwareRegisterSessionsDescriptor = &WatchDeviceHardwareRegisterSessionsDescriptor{}
	createDeviceHardwareRegisterSessionDescriptor = &CreateDeviceHardwareRegisterSessionDescriptor{}
	updateDeviceHardwareRegisterSessionDescriptor = &UpdateDeviceHardwareRegisterSessionDescriptor{}
	deleteDeviceHardwareRegisterSessionDescriptor = &DeleteDeviceHardwareRegisterSessionDescriptor{}
	getDeviceHardwareRegisterSessionFromTokenDescriptor = &GetDeviceHardwareRegisterSessionFromTokenDescriptor{}
	registerHardwareDescriptor = &RegisterHardwareDescriptor{}
	hardwareStatusDescriptor = &HardwareStatusDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(deviceHardwareRegisterSessionServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getDeviceHardwareRegisterSessionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetDeviceHardwareRegisterSessionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listDeviceHardwareRegisterSessionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeviceHardwareRegisterSessionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeviceHardwareRegisterSessionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createDeviceHardwareRegisterSessionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateDeviceHardwareRegisterSessionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteDeviceHardwareRegisterSessionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getDeviceHardwareRegisterSessionFromTokenDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(registerHardwareDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(hardwareStatusDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
