// Code generated by protoc-gen-goten-client
// API: DeviceHardwareRegisterSessionService
// DO NOT EDIT!!!

package device_hardware_register_session_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	device_hardware_register_session "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_hardware_register_session"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &device_hardware_register_session.DeviceHardwareRegisterSession{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceHardwareRegisterSessionServiceClient is the client API for DeviceHardwareRegisterSessionService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceHardwareRegisterSessionServiceClient interface {
	GetDeviceHardwareRegisterSession(ctx context.Context, in *GetDeviceHardwareRegisterSessionRequest, opts ...grpc.CallOption) (*device_hardware_register_session.DeviceHardwareRegisterSession, error)
	BatchGetDeviceHardwareRegisterSessions(ctx context.Context, in *BatchGetDeviceHardwareRegisterSessionsRequest, opts ...grpc.CallOption) (*BatchGetDeviceHardwareRegisterSessionsResponse, error)
	ListDeviceHardwareRegisterSessions(ctx context.Context, in *ListDeviceHardwareRegisterSessionsRequest, opts ...grpc.CallOption) (*ListDeviceHardwareRegisterSessionsResponse, error)
	WatchDeviceHardwareRegisterSession(ctx context.Context, in *WatchDeviceHardwareRegisterSessionRequest, opts ...grpc.CallOption) (WatchDeviceHardwareRegisterSessionClientStream, error)
	WatchDeviceHardwareRegisterSessions(ctx context.Context, in *WatchDeviceHardwareRegisterSessionsRequest, opts ...grpc.CallOption) (WatchDeviceHardwareRegisterSessionsClientStream, error)
	CreateDeviceHardwareRegisterSession(ctx context.Context, in *CreateDeviceHardwareRegisterSessionRequest, opts ...grpc.CallOption) (*device_hardware_register_session.DeviceHardwareRegisterSession, error)
	UpdateDeviceHardwareRegisterSession(ctx context.Context, in *UpdateDeviceHardwareRegisterSessionRequest, opts ...grpc.CallOption) (*device_hardware_register_session.DeviceHardwareRegisterSession, error)
	DeleteDeviceHardwareRegisterSession(ctx context.Context, in *DeleteDeviceHardwareRegisterSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDeviceHardwareRegisterSessionFromToken(ctx context.Context, in *GetDeviceHardwareRegisterSessionFromTokenRequest, opts ...grpc.CallOption) (*GetDeviceHardwareRegisterSessionFromTokenResponse, error)
	RegisterHardware(ctx context.Context, in *RegisterHardwareRequest, opts ...grpc.CallOption) (*RegisterHardwareResponse, error)
	HardwareStatus(ctx context.Context, in *HardwareStatusRequest, opts ...grpc.CallOption) (*HardwareStatusResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewDeviceHardwareRegisterSessionServiceClient(cc grpc.ClientConnInterface) DeviceHardwareRegisterSessionServiceClient {
	return &client{cc}
}

func (c *client) GetDeviceHardwareRegisterSession(ctx context.Context, in *GetDeviceHardwareRegisterSessionRequest, opts ...grpc.CallOption) (*device_hardware_register_session.DeviceHardwareRegisterSession, error) {
	out := new(device_hardware_register_session.DeviceHardwareRegisterSession)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareRegisterSessionService/GetDeviceHardwareRegisterSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetDeviceHardwareRegisterSessions(ctx context.Context, in *BatchGetDeviceHardwareRegisterSessionsRequest, opts ...grpc.CallOption) (*BatchGetDeviceHardwareRegisterSessionsResponse, error) {
	out := new(BatchGetDeviceHardwareRegisterSessionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareRegisterSessionService/BatchGetDeviceHardwareRegisterSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListDeviceHardwareRegisterSessions(ctx context.Context, in *ListDeviceHardwareRegisterSessionsRequest, opts ...grpc.CallOption) (*ListDeviceHardwareRegisterSessionsResponse, error) {
	out := new(ListDeviceHardwareRegisterSessionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareRegisterSessionService/ListDeviceHardwareRegisterSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchDeviceHardwareRegisterSession(ctx context.Context, in *WatchDeviceHardwareRegisterSessionRequest, opts ...grpc.CallOption) (WatchDeviceHardwareRegisterSessionClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchDeviceHardwareRegisterSession",
			ServerStreams: true,
		},
		"/ntt.devices.v1.DeviceHardwareRegisterSessionService/WatchDeviceHardwareRegisterSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchDeviceHardwareRegisterSessionWatchDeviceHardwareRegisterSessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchDeviceHardwareRegisterSessionClientStream interface {
	Recv() (*WatchDeviceHardwareRegisterSessionResponse, error)
	grpc.ClientStream
}

type watchDeviceHardwareRegisterSessionWatchDeviceHardwareRegisterSessionClient struct {
	grpc.ClientStream
}

func (x *watchDeviceHardwareRegisterSessionWatchDeviceHardwareRegisterSessionClient) Recv() (*WatchDeviceHardwareRegisterSessionResponse, error) {
	m := new(WatchDeviceHardwareRegisterSessionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchDeviceHardwareRegisterSessions(ctx context.Context, in *WatchDeviceHardwareRegisterSessionsRequest, opts ...grpc.CallOption) (WatchDeviceHardwareRegisterSessionsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchDeviceHardwareRegisterSessions",
			ServerStreams: true,
		},
		"/ntt.devices.v1.DeviceHardwareRegisterSessionService/WatchDeviceHardwareRegisterSessions", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchDeviceHardwareRegisterSessionsWatchDeviceHardwareRegisterSessionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchDeviceHardwareRegisterSessionsClientStream interface {
	Recv() (*WatchDeviceHardwareRegisterSessionsResponse, error)
	grpc.ClientStream
}

type watchDeviceHardwareRegisterSessionsWatchDeviceHardwareRegisterSessionsClient struct {
	grpc.ClientStream
}

func (x *watchDeviceHardwareRegisterSessionsWatchDeviceHardwareRegisterSessionsClient) Recv() (*WatchDeviceHardwareRegisterSessionsResponse, error) {
	m := new(WatchDeviceHardwareRegisterSessionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateDeviceHardwareRegisterSession(ctx context.Context, in *CreateDeviceHardwareRegisterSessionRequest, opts ...grpc.CallOption) (*device_hardware_register_session.DeviceHardwareRegisterSession, error) {
	out := new(device_hardware_register_session.DeviceHardwareRegisterSession)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareRegisterSessionService/CreateDeviceHardwareRegisterSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateDeviceHardwareRegisterSession(ctx context.Context, in *UpdateDeviceHardwareRegisterSessionRequest, opts ...grpc.CallOption) (*device_hardware_register_session.DeviceHardwareRegisterSession, error) {
	out := new(device_hardware_register_session.DeviceHardwareRegisterSession)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareRegisterSessionService/UpdateDeviceHardwareRegisterSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteDeviceHardwareRegisterSession(ctx context.Context, in *DeleteDeviceHardwareRegisterSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareRegisterSessionService/DeleteDeviceHardwareRegisterSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) GetDeviceHardwareRegisterSessionFromToken(ctx context.Context, in *GetDeviceHardwareRegisterSessionFromTokenRequest, opts ...grpc.CallOption) (*GetDeviceHardwareRegisterSessionFromTokenResponse, error) {
	out := new(GetDeviceHardwareRegisterSessionFromTokenResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareRegisterSessionService/GetDeviceHardwareRegisterSessionFromToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) RegisterHardware(ctx context.Context, in *RegisterHardwareRequest, opts ...grpc.CallOption) (*RegisterHardwareResponse, error) {
	out := new(RegisterHardwareResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareRegisterSessionService/RegisterHardware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) HardwareStatus(ctx context.Context, in *HardwareStatusRequest, opts ...grpc.CallOption) (*HardwareStatusResponse, error) {
	out := new(HardwareStatusResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceHardwareRegisterSessionService/HardwareStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
