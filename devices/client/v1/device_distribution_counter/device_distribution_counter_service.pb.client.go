// Code generated by protoc-gen-goten-client
// API: DeviceDistributionCounterService
// DO NOT EDIT!!!

package device_distribution_counter_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	device_distribution_counter "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_distribution_counter"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &device_distribution_counter.DeviceDistributionCounter{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceDistributionCounterServiceClient is the client API for DeviceDistributionCounterService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceDistributionCounterServiceClient interface {
	GetDeviceDistributionCounter(ctx context.Context, in *GetDeviceDistributionCounterRequest, opts ...grpc.CallOption) (*device_distribution_counter.DeviceDistributionCounter, error)
	BatchGetDeviceDistributionCounters(ctx context.Context, in *BatchGetDeviceDistributionCountersRequest, opts ...grpc.CallOption) (*BatchGetDeviceDistributionCountersResponse, error)
	ListDeviceDistributionCounters(ctx context.Context, in *ListDeviceDistributionCountersRequest, opts ...grpc.CallOption) (*ListDeviceDistributionCountersResponse, error)
	WatchDeviceDistributionCounter(ctx context.Context, in *WatchDeviceDistributionCounterRequest, opts ...grpc.CallOption) (WatchDeviceDistributionCounterClientStream, error)
	WatchDeviceDistributionCounters(ctx context.Context, in *WatchDeviceDistributionCountersRequest, opts ...grpc.CallOption) (WatchDeviceDistributionCountersClientStream, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewDeviceDistributionCounterServiceClient(cc grpc.ClientConnInterface) DeviceDistributionCounterServiceClient {
	return &client{cc}
}

func (c *client) GetDeviceDistributionCounter(ctx context.Context, in *GetDeviceDistributionCounterRequest, opts ...grpc.CallOption) (*device_distribution_counter.DeviceDistributionCounter, error) {
	out := new(device_distribution_counter.DeviceDistributionCounter)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceDistributionCounterService/GetDeviceDistributionCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetDeviceDistributionCounters(ctx context.Context, in *BatchGetDeviceDistributionCountersRequest, opts ...grpc.CallOption) (*BatchGetDeviceDistributionCountersResponse, error) {
	out := new(BatchGetDeviceDistributionCountersResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceDistributionCounterService/BatchGetDeviceDistributionCounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListDeviceDistributionCounters(ctx context.Context, in *ListDeviceDistributionCountersRequest, opts ...grpc.CallOption) (*ListDeviceDistributionCountersResponse, error) {
	out := new(ListDeviceDistributionCountersResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1.DeviceDistributionCounterService/ListDeviceDistributionCounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchDeviceDistributionCounter(ctx context.Context, in *WatchDeviceDistributionCounterRequest, opts ...grpc.CallOption) (WatchDeviceDistributionCounterClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchDeviceDistributionCounter",
			ServerStreams: true,
		},
		"/ntt.devices.v1.DeviceDistributionCounterService/WatchDeviceDistributionCounter", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchDeviceDistributionCounterWatchDeviceDistributionCounterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchDeviceDistributionCounterClientStream interface {
	Recv() (*WatchDeviceDistributionCounterResponse, error)
	grpc.ClientStream
}

type watchDeviceDistributionCounterWatchDeviceDistributionCounterClient struct {
	grpc.ClientStream
}

func (x *watchDeviceDistributionCounterWatchDeviceDistributionCounterClient) Recv() (*WatchDeviceDistributionCounterResponse, error) {
	m := new(WatchDeviceDistributionCounterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchDeviceDistributionCounters(ctx context.Context, in *WatchDeviceDistributionCountersRequest, opts ...grpc.CallOption) (WatchDeviceDistributionCountersClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchDeviceDistributionCounters",
			ServerStreams: true,
		},
		"/ntt.devices.v1.DeviceDistributionCounterService/WatchDeviceDistributionCounters", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchDeviceDistributionCountersWatchDeviceDistributionCountersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchDeviceDistributionCountersClientStream interface {
	Recv() (*WatchDeviceDistributionCountersResponse, error)
	grpc.ClientStream
}

type watchDeviceDistributionCountersWatchDeviceDistributionCountersClient struct {
	grpc.ClientStream
}

func (x *watchDeviceDistributionCountersWatchDeviceDistributionCountersClient) Recv() (*WatchDeviceDistributionCountersResponse, error) {
	m := new(WatchDeviceDistributionCountersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}
