// Code generated by protoc-gen-goten-client
// API: DeviceDistributionCounterService
// DO NOT EDIT!!!

package device_distribution_counter_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	device_distribution_counter "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_distribution_counter"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &device_distribution_counter.DeviceDistributionCounter{}
)

var (
	descriptorsInitialized                       bool
	deviceDistributionCounterServiceDescriptor   *DeviceDistributionCounterServiceDescriptor
	getDeviceDistributionCounterDescriptor       *GetDeviceDistributionCounterDescriptor
	batchGetDeviceDistributionCountersDescriptor *BatchGetDeviceDistributionCountersDescriptor
	listDeviceDistributionCountersDescriptor     *ListDeviceDistributionCountersDescriptor
	watchDeviceDistributionCounterDescriptor     *WatchDeviceDistributionCounterDescriptor
	watchDeviceDistributionCountersDescriptor    *WatchDeviceDistributionCountersDescriptor
)

type GetDeviceDistributionCounterDescriptor struct{}

type GetDeviceDistributionCounterDescriptorClientMsgHandle struct{}

type GetDeviceDistributionCounterDescriptorServerMsgHandle struct{}

func (d *GetDeviceDistributionCounterDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetDeviceDistributionCounterRequest{}
}

func (d *GetDeviceDistributionCounterDescriptor) NewEmptyServerMsg() proto.Message {
	return &device_distribution_counter.DeviceDistributionCounter{}
}

func (d *GetDeviceDistributionCounterDescriptor) IsUnary() bool {
	return true
}

func (d *GetDeviceDistributionCounterDescriptor) IsClientStream() bool {
	return false
}

func (d *GetDeviceDistributionCounterDescriptor) IsServerStream() bool {
	return false
}

func (d *GetDeviceDistributionCounterDescriptor) IsCollection() bool {
	return false
}

func (d *GetDeviceDistributionCounterDescriptor) IsPlural() bool {
	return false
}

func (d *GetDeviceDistributionCounterDescriptor) HasResource() bool {
	return true
}

func (d *GetDeviceDistributionCounterDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetDeviceDistributionCounterDescriptor) GetVerb() string {
	return "get"
}

func (d *GetDeviceDistributionCounterDescriptor) GetMethodName() string {
	return "GetDeviceDistributionCounter"
}

func (d *GetDeviceDistributionCounterDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceDistributionCounterService/GetDeviceDistributionCounter"
}

func (d *GetDeviceDistributionCounterDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *GetDeviceDistributionCounterDescriptor) GetApiName() string {
	return "DeviceDistributionCounterService"
}

func (d *GetDeviceDistributionCounterDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *GetDeviceDistributionCounterDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetDeviceDistributionCounterDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceDistributionCounterServiceDescriptor
}

func (d *GetDeviceDistributionCounterDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_distribution_counter.GetDescriptor()
}

func (d *GetDeviceDistributionCounterDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeviceDistributionCounterDescriptorClientMsgHandle{}
}

func (d *GetDeviceDistributionCounterDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeviceDistributionCounterDescriptorServerMsgHandle{}
}

func (h *GetDeviceDistributionCounterDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceDistributionCounterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetDeviceDistributionCounterRequest) *device_distribution_counter.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_distribution_counter.Name)(nil)
}

func (h *GetDeviceDistributionCounterDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetDeviceDistributionCounterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetDeviceDistributionCounterRequest) []*device_distribution_counter.Name
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeviceDistributionCounterDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceDistributionCounterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetDeviceDistributionCounterRequest) *device_distribution_counter.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDeviceDistributionCounterDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetDeviceDistributionCounterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetDeviceDistributionCounterRequest) *device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetDeviceDistributionCounterDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetDeviceDistributionCounterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetDeviceDistributionCounterRequest) []*device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetDeviceDistributionCounterDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_distribution_counter.DeviceDistributionCounter)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*device_distribution_counter.DeviceDistributionCounter) *device_distribution_counter.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_distribution_counter.Name)(nil)
}

func (h *GetDeviceDistributionCounterDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device_distribution_counter.DeviceDistributionCounter)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*device_distribution_counter.DeviceDistributionCounter) []*device_distribution_counter.Name
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeviceDistributionCounterDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_distribution_counter.DeviceDistributionCounter)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*device_distribution_counter.DeviceDistributionCounter) *device_distribution_counter.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDeviceDistributionCounterDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*device_distribution_counter.DeviceDistributionCounter)
}

func (h *GetDeviceDistributionCounterDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*device_distribution_counter.DeviceDistributionCounter)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*device_distribution_counter.DeviceDistributionCounter) []*device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetDeviceDistributionCounterDescriptor() *GetDeviceDistributionCounterDescriptor {
	return getDeviceDistributionCounterDescriptor
}

type BatchGetDeviceDistributionCountersDescriptor struct{}

type BatchGetDeviceDistributionCountersDescriptorClientMsgHandle struct{}

type BatchGetDeviceDistributionCountersDescriptorServerMsgHandle struct{}

func (d *BatchGetDeviceDistributionCountersDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetDeviceDistributionCountersRequest{}
}

func (d *BatchGetDeviceDistributionCountersDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetDeviceDistributionCountersResponse{}
}

func (d *BatchGetDeviceDistributionCountersDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetDeviceDistributionCountersDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetDeviceDistributionCountersDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetDeviceDistributionCountersDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetDeviceDistributionCountersDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetDeviceDistributionCountersDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetDeviceDistributionCountersDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetDeviceDistributionCountersDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetDeviceDistributionCountersDescriptor) GetMethodName() string {
	return "BatchGetDeviceDistributionCounters"
}

func (d *BatchGetDeviceDistributionCountersDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceDistributionCounterService/BatchGetDeviceDistributionCounters"
}

func (d *BatchGetDeviceDistributionCountersDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *BatchGetDeviceDistributionCountersDescriptor) GetApiName() string {
	return "DeviceDistributionCounterService"
}

func (d *BatchGetDeviceDistributionCountersDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *BatchGetDeviceDistributionCountersDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetDeviceDistributionCountersDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceDistributionCounterServiceDescriptor
}

func (d *BatchGetDeviceDistributionCountersDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_distribution_counter.GetDescriptor()
}

func (d *BatchGetDeviceDistributionCountersDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDeviceDistributionCountersDescriptorClientMsgHandle{}
}

func (d *BatchGetDeviceDistributionCountersDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDeviceDistributionCountersDescriptorServerMsgHandle{}
}

func (h *BatchGetDeviceDistributionCountersDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDeviceDistributionCountersRequest) *device_distribution_counter.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceDistributionCountersDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDeviceDistributionCountersRequest) []*device_distribution_counter.Name
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return device_distribution_counter.DeviceDistributionCounterNameList(names)
		}
	}
	return (device_distribution_counter.DeviceDistributionCounterNameList)(nil)
}

func (h *BatchGetDeviceDistributionCountersDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetDeviceDistributionCountersRequest) *device_distribution_counter.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceDistributionCountersDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetDeviceDistributionCountersRequest) *device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceDistributionCountersDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetDeviceDistributionCountersRequest) []*device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetDeviceDistributionCountersDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDeviceDistributionCountersResponse) *device_distribution_counter.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceDistributionCountersDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDeviceDistributionCountersResponse) []*device_distribution_counter.Name
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceDistributionCounters(); len(resources) > 0 {
			list := make(device_distribution_counter.DeviceDistributionCounterNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (device_distribution_counter.DeviceDistributionCounterNameList)(nil)
}

func (h *BatchGetDeviceDistributionCountersDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetDeviceDistributionCountersResponse) *device_distribution_counter.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceDistributionCountersDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetDeviceDistributionCountersResponse) *device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceDistributionCountersDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetDeviceDistributionCountersResponse) []*device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceDistributionCounters(); len(resources) > 0 {
			return device_distribution_counter.DeviceDistributionCounterList(resources)
		}
	}
	return (device_distribution_counter.DeviceDistributionCounterList)(nil)
}

func GetBatchGetDeviceDistributionCountersDescriptor() *BatchGetDeviceDistributionCountersDescriptor {
	return batchGetDeviceDistributionCountersDescriptor
}

type ListDeviceDistributionCountersDescriptor struct{}

type ListDeviceDistributionCountersDescriptorClientMsgHandle struct{}

type ListDeviceDistributionCountersDescriptorServerMsgHandle struct{}

func (d *ListDeviceDistributionCountersDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListDeviceDistributionCountersRequest{}
}

func (d *ListDeviceDistributionCountersDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListDeviceDistributionCountersResponse{}
}

func (d *ListDeviceDistributionCountersDescriptor) IsUnary() bool {
	return true
}

func (d *ListDeviceDistributionCountersDescriptor) IsClientStream() bool {
	return false
}

func (d *ListDeviceDistributionCountersDescriptor) IsServerStream() bool {
	return false
}

func (d *ListDeviceDistributionCountersDescriptor) IsCollection() bool {
	return true
}

func (d *ListDeviceDistributionCountersDescriptor) IsPlural() bool {
	return true
}

func (d *ListDeviceDistributionCountersDescriptor) HasResource() bool {
	return true
}

func (d *ListDeviceDistributionCountersDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListDeviceDistributionCountersDescriptor) GetVerb() string {
	return "list"
}

func (d *ListDeviceDistributionCountersDescriptor) GetMethodName() string {
	return "ListDeviceDistributionCounters"
}

func (d *ListDeviceDistributionCountersDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceDistributionCounterService/ListDeviceDistributionCounters"
}

func (d *ListDeviceDistributionCountersDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *ListDeviceDistributionCountersDescriptor) GetApiName() string {
	return "DeviceDistributionCounterService"
}

func (d *ListDeviceDistributionCountersDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *ListDeviceDistributionCountersDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListDeviceDistributionCountersDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceDistributionCounterServiceDescriptor
}

func (d *ListDeviceDistributionCountersDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_distribution_counter.GetDescriptor()
}

func (d *ListDeviceDistributionCountersDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDeviceDistributionCountersDescriptorClientMsgHandle{}
}

func (d *ListDeviceDistributionCountersDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDeviceDistributionCountersDescriptorServerMsgHandle{}
}

func (h *ListDeviceDistributionCountersDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDeviceDistributionCountersRequest) *device_distribution_counter.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDeviceDistributionCountersDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDeviceDistributionCountersRequest) []*device_distribution_counter.Name
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListDeviceDistributionCountersDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListDeviceDistributionCountersRequest) *device_distribution_counter.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*device_distribution_counter.ParentName)(nil)
}

func (h *ListDeviceDistributionCountersDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListDeviceDistributionCountersRequest) *device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListDeviceDistributionCountersDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListDeviceDistributionCountersRequest) []*device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListDeviceDistributionCountersDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDeviceDistributionCountersResponse) *device_distribution_counter.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDeviceDistributionCountersDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDeviceDistributionCountersResponse) []*device_distribution_counter.Name
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceDistributionCounters(); len(resources) > 0 {
			list := make(device_distribution_counter.DeviceDistributionCounterNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (device_distribution_counter.DeviceDistributionCounterNameList)(nil)
}

func (h *ListDeviceDistributionCountersDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListDeviceDistributionCountersResponse) *device_distribution_counter.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListDeviceDistributionCountersDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListDeviceDistributionCountersResponse) *device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListDeviceDistributionCountersDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListDeviceDistributionCountersResponse) []*device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceDistributionCounters(); len(resources) > 0 {
			return device_distribution_counter.DeviceDistributionCounterList(resources)
		}
	}
	return (device_distribution_counter.DeviceDistributionCounterList)(nil)
}

func GetListDeviceDistributionCountersDescriptor() *ListDeviceDistributionCountersDescriptor {
	return listDeviceDistributionCountersDescriptor
}

type WatchDeviceDistributionCounterDescriptor struct{}

type WatchDeviceDistributionCounterDescriptorClientMsgHandle struct{}

type WatchDeviceDistributionCounterDescriptorServerMsgHandle struct{}

func (d *WatchDeviceDistributionCounterDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeviceDistributionCounterRequest{}
}

func (d *WatchDeviceDistributionCounterDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeviceDistributionCounterResponse{}
}

func (d *WatchDeviceDistributionCounterDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeviceDistributionCounterDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeviceDistributionCounterDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeviceDistributionCounterDescriptor) IsCollection() bool {
	return false
}

func (d *WatchDeviceDistributionCounterDescriptor) IsPlural() bool {
	return false
}

func (d *WatchDeviceDistributionCounterDescriptor) HasResource() bool {
	return true
}

func (d *WatchDeviceDistributionCounterDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeviceDistributionCounterDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeviceDistributionCounterDescriptor) GetMethodName() string {
	return "WatchDeviceDistributionCounter"
}

func (d *WatchDeviceDistributionCounterDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceDistributionCounterService/WatchDeviceDistributionCounter"
}

func (d *WatchDeviceDistributionCounterDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *WatchDeviceDistributionCounterDescriptor) GetApiName() string {
	return "DeviceDistributionCounterService"
}

func (d *WatchDeviceDistributionCounterDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *WatchDeviceDistributionCounterDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchDeviceDistributionCounterDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceDistributionCounterServiceDescriptor
}

func (d *WatchDeviceDistributionCounterDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_distribution_counter.GetDescriptor()
}

func (d *WatchDeviceDistributionCounterDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceDistributionCounterDescriptorClientMsgHandle{}
}

func (d *WatchDeviceDistributionCounterDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceDistributionCounterDescriptorServerMsgHandle{}
}

func (h *WatchDeviceDistributionCounterDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceDistributionCounterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceDistributionCounterRequest) *device_distribution_counter.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_distribution_counter.Name)(nil)
}

func (h *WatchDeviceDistributionCounterDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceDistributionCounterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceDistributionCounterRequest) []*device_distribution_counter.Name
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceDistributionCounterDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceDistributionCounterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceDistributionCounterRequest) *device_distribution_counter.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceDistributionCounterDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeviceDistributionCounterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeviceDistributionCounterRequest) *device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDeviceDistributionCounterDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeviceDistributionCounterRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeviceDistributionCounterRequest) []*device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchDeviceDistributionCounterDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceDistributionCounterResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceDistributionCounterResponse) *device_distribution_counter.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *device_distribution_counter.DeviceDistributionCounterChange_Added_:
				return tResChange.Added.GetDeviceDistributionCounter().GetName()
			case *device_distribution_counter.DeviceDistributionCounterChange_Modified_:
				return tResChange.Modified.GetName()
			case *device_distribution_counter.DeviceDistributionCounterChange_Removed_:
				return tResChange.Removed.GetName()
			case *device_distribution_counter.DeviceDistributionCounterChange_Current_:
				return tResChange.Current.GetDeviceDistributionCounter().GetName()
			}
		}
	}
	return (*device_distribution_counter.Name)(nil)
}

func (h *WatchDeviceDistributionCounterDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceDistributionCounterResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceDistributionCounterResponse) []*device_distribution_counter.Name
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceDistributionCounterDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceDistributionCounterResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceDistributionCounterResponse) *device_distribution_counter.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceDistributionCounterDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeviceDistributionCounterResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeviceDistributionCounterResponse) *device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *device_distribution_counter.DeviceDistributionCounterChange_Added_:
				return tResChange.Added.GetDeviceDistributionCounter()
			case *device_distribution_counter.DeviceDistributionCounterChange_Modified_:
				return tResChange.Modified.GetDeviceDistributionCounter()
			case *device_distribution_counter.DeviceDistributionCounterChange_Current_:
				return tResChange.Current.GetDeviceDistributionCounter()
			}
		}
	}
	return (*device_distribution_counter.DeviceDistributionCounter)(nil)
}

func (h *WatchDeviceDistributionCounterDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeviceDistributionCounterResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeviceDistributionCounterResponse) []*device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchDeviceDistributionCounterDescriptor() *WatchDeviceDistributionCounterDescriptor {
	return watchDeviceDistributionCounterDescriptor
}

type WatchDeviceDistributionCountersDescriptor struct{}

type WatchDeviceDistributionCountersDescriptorClientMsgHandle struct{}

type WatchDeviceDistributionCountersDescriptorServerMsgHandle struct{}

func (d *WatchDeviceDistributionCountersDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeviceDistributionCountersRequest{}
}

func (d *WatchDeviceDistributionCountersDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeviceDistributionCountersResponse{}
}

func (d *WatchDeviceDistributionCountersDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeviceDistributionCountersDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeviceDistributionCountersDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeviceDistributionCountersDescriptor) IsCollection() bool {
	return true
}

func (d *WatchDeviceDistributionCountersDescriptor) IsPlural() bool {
	return true
}

func (d *WatchDeviceDistributionCountersDescriptor) HasResource() bool {
	return true
}

func (d *WatchDeviceDistributionCountersDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeviceDistributionCountersDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeviceDistributionCountersDescriptor) GetMethodName() string {
	return "WatchDeviceDistributionCounters"
}

func (d *WatchDeviceDistributionCountersDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1.DeviceDistributionCounterService/WatchDeviceDistributionCounters"
}

func (d *WatchDeviceDistributionCountersDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *WatchDeviceDistributionCountersDescriptor) GetApiName() string {
	return "DeviceDistributionCounterService"
}

func (d *WatchDeviceDistributionCountersDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *WatchDeviceDistributionCountersDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchDeviceDistributionCountersDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceDistributionCounterServiceDescriptor
}

func (d *WatchDeviceDistributionCountersDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_distribution_counter.GetDescriptor()
}

func (d *WatchDeviceDistributionCountersDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceDistributionCountersDescriptorClientMsgHandle{}
}

func (d *WatchDeviceDistributionCountersDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceDistributionCountersDescriptorServerMsgHandle{}
}

func (h *WatchDeviceDistributionCountersDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceDistributionCountersRequest) *device_distribution_counter.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceDistributionCountersDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceDistributionCountersRequest) []*device_distribution_counter.Name
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceDistributionCountersDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceDistributionCountersRequest) *device_distribution_counter.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*device_distribution_counter.ParentName)(nil)
}

func (h *WatchDeviceDistributionCountersDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeviceDistributionCountersRequest) *device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDeviceDistributionCountersDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeviceDistributionCountersRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeviceDistributionCountersRequest) []*device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchDeviceDistributionCountersDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceDistributionCountersResponse) *device_distribution_counter.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceDistributionCountersDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceDistributionCountersResponse) []*device_distribution_counter.Name
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetDeviceDistributionCounterChanges(); len(resChanges) > 0 {
			list := make(device_distribution_counter.DeviceDistributionCounterNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *device_distribution_counter.DeviceDistributionCounterChange_Added_:
					list = append(list, tResChange.Added.GetDeviceDistributionCounter().GetName())
				case *device_distribution_counter.DeviceDistributionCounterChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *device_distribution_counter.DeviceDistributionCounterChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *device_distribution_counter.DeviceDistributionCounterChange_Current_:
					list = append(list, tResChange.Current.GetDeviceDistributionCounter().GetName())
				}
			}
			return list
		}
	}
	return (device_distribution_counter.DeviceDistributionCounterNameList)(nil)
}

func (h *WatchDeviceDistributionCountersDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeviceDistributionCountersResponse) *device_distribution_counter.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceDistributionCountersDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeviceDistributionCountersResponse) *device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDeviceDistributionCountersDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeviceDistributionCountersResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeviceDistributionCountersResponse) []*device_distribution_counter.DeviceDistributionCounter
	})
	if ok {
		return device_distribution_counter.DeviceDistributionCounterList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetDeviceDistributionCounterChanges(); len(resChanges) > 0 {
			list := make(device_distribution_counter.DeviceDistributionCounterList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *device_distribution_counter.DeviceDistributionCounterChange_Added_:
					list = append(list, tResChange.Added.GetDeviceDistributionCounter())
				case *device_distribution_counter.DeviceDistributionCounterChange_Modified_:
					list = append(list, tResChange.Modified.GetDeviceDistributionCounter())
				case *device_distribution_counter.DeviceDistributionCounterChange_Current_:
					list = append(list, tResChange.Current.GetDeviceDistributionCounter())
				}
			}
			return list
		}
	}
	return (device_distribution_counter.DeviceDistributionCounterList)(nil)
}

func GetWatchDeviceDistributionCountersDescriptor() *WatchDeviceDistributionCountersDescriptor {
	return watchDeviceDistributionCountersDescriptor
}

type DeviceDistributionCounterServiceDescriptor struct{}

func (d *DeviceDistributionCounterServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getDeviceDistributionCounterDescriptor,
		batchGetDeviceDistributionCountersDescriptor,
		listDeviceDistributionCountersDescriptor,
		watchDeviceDistributionCounterDescriptor,
		watchDeviceDistributionCountersDescriptor,
	}
}

func (d *DeviceDistributionCounterServiceDescriptor) GetFullAPIName() string {
	return "/ntt.devices.v1.DeviceDistributionCounterService"
}

func (d *DeviceDistributionCounterServiceDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1"
}

func (d *DeviceDistributionCounterServiceDescriptor) GetApiName() string {
	return "DeviceDistributionCounterService"
}

func (d *DeviceDistributionCounterServiceDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *DeviceDistributionCounterServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetDeviceDistributionCounterServiceDescriptor() *DeviceDistributionCounterServiceDescriptor {
	return deviceDistributionCounterServiceDescriptor
}

func initDescriptors() {
	deviceDistributionCounterServiceDescriptor = &DeviceDistributionCounterServiceDescriptor{}
	getDeviceDistributionCounterDescriptor = &GetDeviceDistributionCounterDescriptor{}
	batchGetDeviceDistributionCountersDescriptor = &BatchGetDeviceDistributionCountersDescriptor{}
	listDeviceDistributionCountersDescriptor = &ListDeviceDistributionCountersDescriptor{}
	watchDeviceDistributionCounterDescriptor = &WatchDeviceDistributionCounterDescriptor{}
	watchDeviceDistributionCountersDescriptor = &WatchDeviceDistributionCountersDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(deviceDistributionCounterServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getDeviceDistributionCounterDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetDeviceDistributionCountersDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listDeviceDistributionCountersDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeviceDistributionCounterDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeviceDistributionCountersDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
