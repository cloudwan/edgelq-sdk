// Code generated by protoc-gen-goten-go
// File: edgelq/devices/proto/v1/device_distribution_counter_service.proto
// DO NOT EDIT!!!

package device_distribution_counter_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	device_distribution_counter "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device_distribution_counter"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1/project"
	view "github.com/cloudwan/goten-sdk/types/view"
	watch_type "github.com/cloudwan/goten-sdk/types/watch_type"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &device_distribution_counter.DeviceDistributionCounter{}
	_ = &project.Project{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message of the GetDeviceDistributionCounter method.
type GetDeviceDistributionCounterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.devices.v1.DeviceDistributionCounter
	Name *device_distribution_counter.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_distribution_counter.DeviceDistributionCounter_FieldMask `protobuf:"bytes,3,opt,customtype=DeviceDistributionCounter_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *GetDeviceDistributionCounterRequest) Reset() {
	*m = GetDeviceDistributionCounterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetDeviceDistributionCounterRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetDeviceDistributionCounterRequest) ProtoMessage() {}

func (m *GetDeviceDistributionCounterRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetDeviceDistributionCounterRequest) GotenMessage() {}

// Deprecated, Use GetDeviceDistributionCounterRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceDistributionCounterRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetDeviceDistributionCounterRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetDeviceDistributionCounterRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetDeviceDistributionCounterRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetDeviceDistributionCounterRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetDeviceDistributionCounterRequest) GetName() *device_distribution_counter.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetDeviceDistributionCounterRequest) GetFieldMask() *device_distribution_counter.DeviceDistributionCounter_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetDeviceDistributionCounterRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetDeviceDistributionCounterRequest) SetName(fv *device_distribution_counter.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetDeviceDistributionCounterRequest"))
	}
	m.Name = fv
}

func (m *GetDeviceDistributionCounterRequest) SetFieldMask(fv *device_distribution_counter.DeviceDistributionCounter_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetDeviceDistributionCounterRequest"))
	}
	m.FieldMask = fv
}

func (m *GetDeviceDistributionCounterRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetDeviceDistributionCounterRequest"))
	}
	m.View = fv
}

// A request message of the BatchGetDeviceDistributionCounters method.
type BatchGetDeviceDistributionCountersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of DeviceDistributionCounters
	Names []*device_distribution_counter.Name `protobuf:"bytes,2,rep,customtype=Name,name=names,proto3" json:"names,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_distribution_counter.DeviceDistributionCounter_FieldMask `protobuf:"bytes,3,opt,customtype=DeviceDistributionCounter_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *BatchGetDeviceDistributionCountersRequest) Reset() {
	*m = BatchGetDeviceDistributionCountersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetDeviceDistributionCountersRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetDeviceDistributionCountersRequest) ProtoMessage() {}

func (m *BatchGetDeviceDistributionCountersRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetDeviceDistributionCountersRequest) GotenMessage() {}

// Deprecated, Use BatchGetDeviceDistributionCountersRequest.ProtoReflect.Descriptor instead.
func (*BatchGetDeviceDistributionCountersRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetDeviceDistributionCountersRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetDeviceDistributionCountersRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetDeviceDistributionCountersRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetDeviceDistributionCountersRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetDeviceDistributionCountersRequest) GetNames() []*device_distribution_counter.Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetDeviceDistributionCountersRequest) GetFieldMask() *device_distribution_counter.DeviceDistributionCounter_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetDeviceDistributionCountersRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetDeviceDistributionCountersRequest) SetNames(fv []*device_distribution_counter.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetDeviceDistributionCountersRequest"))
	}
	m.Names = fv
}

func (m *BatchGetDeviceDistributionCountersRequest) SetFieldMask(fv *device_distribution_counter.DeviceDistributionCounter_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetDeviceDistributionCountersRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetDeviceDistributionCountersRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetDeviceDistributionCountersRequest"))
	}
	m.View = fv
}

// A response message of the BatchGetDeviceDistributionCounters method.
type BatchGetDeviceDistributionCountersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found DeviceDistributionCounters
	DeviceDistributionCounters []*device_distribution_counter.DeviceDistributionCounter `protobuf:"bytes,1,rep,name=device_distribution_counters,json=deviceDistributionCounters,proto3" json:"device_distribution_counters,omitempty"`
	// list of not found DeviceDistributionCounters
	Missing []*device_distribution_counter.Name `protobuf:"bytes,2,rep,customtype=Name,name=missing,proto3" json:"missing,omitempty"`
}

func (m *BatchGetDeviceDistributionCountersResponse) Reset() {
	*m = BatchGetDeviceDistributionCountersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetDeviceDistributionCountersResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetDeviceDistributionCountersResponse) ProtoMessage() {}

func (m *BatchGetDeviceDistributionCountersResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetDeviceDistributionCountersResponse) GotenMessage() {}

// Deprecated, Use BatchGetDeviceDistributionCountersResponse.ProtoReflect.Descriptor instead.
func (*BatchGetDeviceDistributionCountersResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetDeviceDistributionCountersResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetDeviceDistributionCountersResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetDeviceDistributionCountersResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetDeviceDistributionCountersResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetDeviceDistributionCountersResponse) GetDeviceDistributionCounters() []*device_distribution_counter.DeviceDistributionCounter {
	if m != nil {
		return m.DeviceDistributionCounters
	}
	return nil
}

func (m *BatchGetDeviceDistributionCountersResponse) GetMissing() []*device_distribution_counter.Name {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetDeviceDistributionCountersResponse) SetDeviceDistributionCounters(fv []*device_distribution_counter.DeviceDistributionCounter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceDistributionCounters", "BatchGetDeviceDistributionCountersResponse"))
	}
	m.DeviceDistributionCounters = fv
}

func (m *BatchGetDeviceDistributionCountersResponse) SetMissing(fv []*device_distribution_counter.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetDeviceDistributionCountersResponse"))
	}
	m.Missing = fv
}

// A request message of the ListDeviceDistributionCounters method.
type ListDeviceDistributionCountersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.devices.v1.DeviceDistributionCounter
	Parent *device_distribution_counter.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer DeviceDistributionCounters
	// than requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// ListDeviceDistributionCountersResponse.next_page_token.
	PageToken *device_distribution_counter.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *device_distribution_counter.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *device_distribution_counter.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_distribution_counter.DeviceDistributionCounter_FieldMask `protobuf:"bytes,6,opt,customtype=DeviceDistributionCounter_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty"`
}

func (m *ListDeviceDistributionCountersRequest) Reset() {
	*m = ListDeviceDistributionCountersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListDeviceDistributionCountersRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListDeviceDistributionCountersRequest) ProtoMessage() {}

func (m *ListDeviceDistributionCountersRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListDeviceDistributionCountersRequest) GotenMessage() {}

// Deprecated, Use ListDeviceDistributionCountersRequest.ProtoReflect.Descriptor instead.
func (*ListDeviceDistributionCountersRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListDeviceDistributionCountersRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListDeviceDistributionCountersRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListDeviceDistributionCountersRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListDeviceDistributionCountersRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListDeviceDistributionCountersRequest) GetParent() *device_distribution_counter.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListDeviceDistributionCountersRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListDeviceDistributionCountersRequest) GetPageToken() *device_distribution_counter.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListDeviceDistributionCountersRequest) GetOrderBy() *device_distribution_counter.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListDeviceDistributionCountersRequest) GetFilter() *device_distribution_counter.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListDeviceDistributionCountersRequest) GetFieldMask() *device_distribution_counter.DeviceDistributionCounter_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListDeviceDistributionCountersRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListDeviceDistributionCountersRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListDeviceDistributionCountersRequest) SetParent(fv *device_distribution_counter.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListDeviceDistributionCountersRequest"))
	}
	m.Parent = fv
}

func (m *ListDeviceDistributionCountersRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListDeviceDistributionCountersRequest"))
	}
	m.PageSize = fv
}

func (m *ListDeviceDistributionCountersRequest) SetPageToken(fv *device_distribution_counter.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListDeviceDistributionCountersRequest"))
	}
	m.PageToken = fv
}

func (m *ListDeviceDistributionCountersRequest) SetOrderBy(fv *device_distribution_counter.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListDeviceDistributionCountersRequest"))
	}
	m.OrderBy = fv
}

func (m *ListDeviceDistributionCountersRequest) SetFilter(fv *device_distribution_counter.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListDeviceDistributionCountersRequest"))
	}
	m.Filter = fv
}

func (m *ListDeviceDistributionCountersRequest) SetFieldMask(fv *device_distribution_counter.DeviceDistributionCounter_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListDeviceDistributionCountersRequest"))
	}
	m.FieldMask = fv
}

func (m *ListDeviceDistributionCountersRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListDeviceDistributionCountersRequest"))
	}
	m.View = fv
}

func (m *ListDeviceDistributionCountersRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListDeviceDistributionCountersRequest"))
	}
	m.IncludePagingInfo = fv
}

// A response message of the ListDeviceDistributionCounters method.
type ListDeviceDistributionCountersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of DeviceDistributionCounters
	DeviceDistributionCounters []*device_distribution_counter.DeviceDistributionCounter `protobuf:"bytes,1,rep,name=device_distribution_counters,json=deviceDistributionCounters,proto3" json:"device_distribution_counters,omitempty"`
	// A token to retrieve previous page of results.
	//
	// Pass this value in the ListDeviceDistributionCountersRequest.page_token.
	PrevPageToken *device_distribution_counter.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// A token to retrieve next page of results.
	//
	// Pass this value in the ListDeviceDistributionCountersRequest.page_token.
	NextPageToken *device_distribution_counter.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`
	// Number of total DeviceDistributionCounters across all pages or 0, if there
	// are no items, paging info was not requested or there was an error while
	// trying to get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty"`
}

func (m *ListDeviceDistributionCountersResponse) Reset() {
	*m = ListDeviceDistributionCountersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListDeviceDistributionCountersResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListDeviceDistributionCountersResponse) ProtoMessage() {}

func (m *ListDeviceDistributionCountersResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListDeviceDistributionCountersResponse) GotenMessage() {}

// Deprecated, Use ListDeviceDistributionCountersResponse.ProtoReflect.Descriptor instead.
func (*ListDeviceDistributionCountersResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListDeviceDistributionCountersResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListDeviceDistributionCountersResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListDeviceDistributionCountersResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListDeviceDistributionCountersResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListDeviceDistributionCountersResponse) GetDeviceDistributionCounters() []*device_distribution_counter.DeviceDistributionCounter {
	if m != nil {
		return m.DeviceDistributionCounters
	}
	return nil
}

func (m *ListDeviceDistributionCountersResponse) GetPrevPageToken() *device_distribution_counter.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListDeviceDistributionCountersResponse) GetNextPageToken() *device_distribution_counter.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListDeviceDistributionCountersResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListDeviceDistributionCountersResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListDeviceDistributionCountersResponse) SetDeviceDistributionCounters(fv []*device_distribution_counter.DeviceDistributionCounter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceDistributionCounters", "ListDeviceDistributionCountersResponse"))
	}
	m.DeviceDistributionCounters = fv
}

func (m *ListDeviceDistributionCountersResponse) SetPrevPageToken(fv *device_distribution_counter.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListDeviceDistributionCountersResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListDeviceDistributionCountersResponse) SetNextPageToken(fv *device_distribution_counter.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListDeviceDistributionCountersResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListDeviceDistributionCountersResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListDeviceDistributionCountersResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListDeviceDistributionCountersResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListDeviceDistributionCountersResponse"))
	}
	m.TotalResultsCount = fv
}

// A request message of the WatchDeviceDistributionCounter method.
type WatchDeviceDistributionCounterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.devices.v1.DeviceDistributionCounter
	Name *device_distribution_counter.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_distribution_counter.DeviceDistributionCounter_FieldMask `protobuf:"bytes,2,opt,customtype=DeviceDistributionCounter_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
}

func (m *WatchDeviceDistributionCounterRequest) Reset() {
	*m = WatchDeviceDistributionCounterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceDistributionCounterRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceDistributionCounterRequest) ProtoMessage() {}

func (m *WatchDeviceDistributionCounterRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceDistributionCounterRequest) GotenMessage() {}

// Deprecated, Use WatchDeviceDistributionCounterRequest.ProtoReflect.Descriptor instead.
func (*WatchDeviceDistributionCounterRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchDeviceDistributionCounterRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceDistributionCounterRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceDistributionCounterRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceDistributionCounterRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceDistributionCounterRequest) GetName() *device_distribution_counter.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchDeviceDistributionCounterRequest) GetFieldMask() *device_distribution_counter.DeviceDistributionCounter_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchDeviceDistributionCounterRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchDeviceDistributionCounterRequest) SetName(fv *device_distribution_counter.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchDeviceDistributionCounterRequest"))
	}
	m.Name = fv
}

func (m *WatchDeviceDistributionCounterRequest) SetFieldMask(fv *device_distribution_counter.DeviceDistributionCounter_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchDeviceDistributionCounterRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchDeviceDistributionCounterRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchDeviceDistributionCounterRequest"))
	}
	m.View = fv
}

// A response message of the WatchDeviceDistributionCounter method.
type WatchDeviceDistributionCounterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *device_distribution_counter.DeviceDistributionCounterChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
}

func (m *WatchDeviceDistributionCounterResponse) Reset() {
	*m = WatchDeviceDistributionCounterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceDistributionCounterResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceDistributionCounterResponse) ProtoMessage() {}

func (m *WatchDeviceDistributionCounterResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceDistributionCounterResponse) GotenMessage() {}

// Deprecated, Use WatchDeviceDistributionCounterResponse.ProtoReflect.Descriptor instead.
func (*WatchDeviceDistributionCounterResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchDeviceDistributionCounterResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceDistributionCounterResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceDistributionCounterResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceDistributionCounterResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceDistributionCounterResponse) GetChange() *device_distribution_counter.DeviceDistributionCounterChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchDeviceDistributionCounterResponse) SetChange(fv *device_distribution_counter.DeviceDistributionCounterChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchDeviceDistributionCounterResponse"))
	}
	m.Change = fv
}

// A request message of the WatchDeviceDistributionCounters method.
type WatchDeviceDistributionCountersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.types.WatchType" json:"type,omitempty"`
	// Parent name of ntt.devices.v1.DeviceDistributionCounter
	Parent *device_distribution_counter.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer DeviceDistributionCounters
	// than requested. If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *device_distribution_counter.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *device_distribution_counter.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *device_distribution_counter.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to DeviceDistributionCounter
	// that don't affect any of masked fields won't be sent back.
	FieldMask *device_distribution_counter.DeviceDistributionCounter_FieldMask `protobuf:"bytes,6,opt,customtype=DeviceDistributionCounter_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// DeviceDistributionCounter that don't affect any of masked fields won't be
	// sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty"`
}

func (m *WatchDeviceDistributionCountersRequest) Reset() {
	*m = WatchDeviceDistributionCountersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceDistributionCountersRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceDistributionCountersRequest) ProtoMessage() {}

func (m *WatchDeviceDistributionCountersRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceDistributionCountersRequest) GotenMessage() {}

// Deprecated, Use WatchDeviceDistributionCountersRequest.ProtoReflect.Descriptor instead.
func (*WatchDeviceDistributionCountersRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchDeviceDistributionCountersRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceDistributionCountersRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceDistributionCountersRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceDistributionCountersRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceDistributionCountersRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchDeviceDistributionCountersRequest) GetParent() *device_distribution_counter.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchDeviceDistributionCountersRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchDeviceDistributionCountersRequest) GetPageToken() *device_distribution_counter.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchDeviceDistributionCountersRequest) GetOrderBy() *device_distribution_counter.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchDeviceDistributionCountersRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchDeviceDistributionCountersRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchDeviceDistributionCountersRequest) GetFilter() *device_distribution_counter.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchDeviceDistributionCountersRequest) GetFieldMask() *device_distribution_counter.DeviceDistributionCounter_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchDeviceDistributionCountersRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchDeviceDistributionCountersRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchDeviceDistributionCountersRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchDeviceDistributionCountersRequest"))
	}
	m.Type = fv
}

func (m *WatchDeviceDistributionCountersRequest) SetParent(fv *device_distribution_counter.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchDeviceDistributionCountersRequest"))
	}
	m.Parent = fv
}

func (m *WatchDeviceDistributionCountersRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchDeviceDistributionCountersRequest"))
	}
	m.PageSize = fv
}

func (m *WatchDeviceDistributionCountersRequest) SetPageToken(fv *device_distribution_counter.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchDeviceDistributionCountersRequest"))
	}
	m.PageToken = fv
}

func (m *WatchDeviceDistributionCountersRequest) SetOrderBy(fv *device_distribution_counter.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchDeviceDistributionCountersRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchDeviceDistributionCountersRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchDeviceDistributionCountersRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchDeviceDistributionCountersRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchDeviceDistributionCountersRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchDeviceDistributionCountersRequest) SetFilter(fv *device_distribution_counter.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchDeviceDistributionCountersRequest"))
	}
	m.Filter = fv
}

func (m *WatchDeviceDistributionCountersRequest) SetFieldMask(fv *device_distribution_counter.DeviceDistributionCounter_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchDeviceDistributionCountersRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchDeviceDistributionCountersRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchDeviceDistributionCountersRequest"))
	}
	m.View = fv
}

func (m *WatchDeviceDistributionCountersRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchDeviceDistributionCountersRequest"))
	}
	m.MaxChunkSize = fv
}

// A response message of the WatchDeviceDistributionCounters method.
type WatchDeviceDistributionCountersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of DeviceDistributionCounters
	DeviceDistributionCounterChanges []*device_distribution_counter.DeviceDistributionCounterChange `protobuf:"bytes,2,rep,name=device_distribution_counter_changes,json=deviceDistributionCounterChanges,proto3" json:"device_distribution_counter_changes,omitempty"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All DeviceDistributionCounters will be
	// of type Added/Current (depending on watch_type specified in the request).
	// Further responses will be incremental - however messages may still be
	// chunked and is_current logic still applies. is_current is always true for
	// stateful watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchDeviceDistributionCountersResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (DeviceDistributionCounters will
	// contains changes of type Current only). Any resume tokens should be
	// discarded as well. This field should be checked only for stateless watch.
	// In stateful those kind of errors are handled by the server side. Will never
	// be sent along with is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty"`
}

func (m *WatchDeviceDistributionCountersResponse) Reset() {
	*m = WatchDeviceDistributionCountersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceDistributionCountersResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceDistributionCountersResponse) ProtoMessage() {}

func (m *WatchDeviceDistributionCountersResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceDistributionCountersResponse) GotenMessage() {}

// Deprecated, Use WatchDeviceDistributionCountersResponse.ProtoReflect.Descriptor instead.
func (*WatchDeviceDistributionCountersResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchDeviceDistributionCountersResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceDistributionCountersResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceDistributionCountersResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceDistributionCountersResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceDistributionCountersResponse) GetDeviceDistributionCounterChanges() []*device_distribution_counter.DeviceDistributionCounterChange {
	if m != nil {
		return m.DeviceDistributionCounterChanges
	}
	return nil
}

func (m *WatchDeviceDistributionCountersResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchDeviceDistributionCountersResponse) GetPageTokenChange() *WatchDeviceDistributionCountersResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchDeviceDistributionCountersResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchDeviceDistributionCountersResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchDeviceDistributionCountersResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchDeviceDistributionCountersResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchDeviceDistributionCountersResponse) SetDeviceDistributionCounterChanges(fv []*device_distribution_counter.DeviceDistributionCounterChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceDistributionCounterChanges", "WatchDeviceDistributionCountersResponse"))
	}
	m.DeviceDistributionCounterChanges = fv
}

func (m *WatchDeviceDistributionCountersResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchDeviceDistributionCountersResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchDeviceDistributionCountersResponse) SetPageTokenChange(fv *WatchDeviceDistributionCountersResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchDeviceDistributionCountersResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchDeviceDistributionCountersResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchDeviceDistributionCountersResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchDeviceDistributionCountersResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchDeviceDistributionCountersResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchDeviceDistributionCountersResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchDeviceDistributionCountersResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchDeviceDistributionCountersResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchDeviceDistributionCountersResponse"))
	}
	m.IsHardReset = fv
}

type WatchDeviceDistributionCountersResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *device_distribution_counter.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty"`
	// New token to retrieve next page of results.
	NextPageToken *device_distribution_counter.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *WatchDeviceDistributionCountersResponse_PageTokenChange) Reset() {
	*m = WatchDeviceDistributionCountersResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceDistributionCountersResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceDistributionCountersResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchDeviceDistributionCountersResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceDistributionCountersResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchDeviceDistributionCountersResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchDeviceDistributionCountersResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchDeviceDistributionCountersResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceDistributionCountersResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceDistributionCountersResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceDistributionCountersResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceDistributionCountersResponse_PageTokenChange) GetPrevPageToken() *device_distribution_counter.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchDeviceDistributionCountersResponse_PageTokenChange) GetNextPageToken() *device_distribution_counter.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchDeviceDistributionCountersResponse_PageTokenChange) SetPrevPageToken(fv *device_distribution_counter.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchDeviceDistributionCountersResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchDeviceDistributionCountersResponse_PageTokenChange) SetNextPageToken(fv *device_distribution_counter.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchDeviceDistributionCountersResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

var edgelq_devices_proto_v1_device_distribution_counter_service_proto preflect.FileDescriptor

var edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDesc = []byte{
	0x0a, 0x41, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x40, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x0a,
	0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xef, 0x01, 0x0a, 0x29, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x0a, 0x1b, 0x0a, 0x19, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x5c,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21,
	0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xd6, 0x01, 0x0a, 0x2a, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x0a, 0x1b, 0x0a, 0x19,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x22, 0xf9, 0x03, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda,
	0x21, 0x1d, 0x3a, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04,
	0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x40,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x3c, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x2a, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x39,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0xb2, 0xda, 0x21, 0x1d, 0x1a, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x32,
	0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x82,
	0x03, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0xb2, 0xda, 0x21, 0x1d, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x49, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d,
	0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x25, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21,
	0x1d, 0x0a, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x71, 0x0a, 0x26, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x8e, 0x05, 0x0a,
	0x26, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x3a, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x22,
	0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x2a,
	0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x1a,
	0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x32, 0x1b, 0x0a, 0x19, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x12, 0x06, 0x1a, 0x02, 0x08, 0x64, 0x2a, 0x00, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf7, 0x04,
	0x0a, 0x27, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x23, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0xa7, 0x01,
	0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d,
	0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x22, 0x1b, 0x0a, 0x19, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xa9, 0x0c, 0x0a, 0x20, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x83, 0x02, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x33, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x82, 0x01,
	0x82, 0xdb, 0x21, 0x30, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e,
	0x12, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc,
	0x26, 0x00, 0x12, 0xab, 0x02, 0x0a, 0x22, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8d, 0x01, 0x82, 0xdb, 0x21, 0x50, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01, 0x2a, 0x07,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x1e, 0x12, 0x1c, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x8a, 0xcc, 0x26, 0x00,
	0x12, 0xb3, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa1, 0x01, 0x82, 0xdb, 0x21, 0x4f, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08,
	0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x1e, 0x12, 0x1c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xa0, 0x02, 0x0a, 0x1e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x82, 0xdb, 0x21, 0x34, 0x0a,
	0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x22,
	0x42, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0xc6, 0x02, 0x0a, 0x1f, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x36, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf,
	0x01, 0x82, 0xdb, 0x21, 0x57, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x25, 0x12, 0x23, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02,
	0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x22, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00,
	0x30, 0x01, 0x1a, 0x2f, 0xca, 0x41, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e,
	0x63, 0x6f, 0x6d, 0x42, 0x97, 0x03, 0xe8, 0xde, 0x21, 0x00, 0x82, 0xff, 0xd0, 0x02, 0x6e, 0x0a,
	0x22, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x8a, 0xff, 0xd0,
	0x02, 0x6e, 0x0a, 0x22, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x25, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00,
	0x5a, 0x6b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescOnce sync.Once
	edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescData = edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDesc
)

func edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescGZIP() []byte {
	edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescOnce.Do(func() {
		edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescData)
	})
	return edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDescData
}

var edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var edgelq_devices_proto_v1_device_distribution_counter_service_proto_goTypes = []interface{}{
	(*GetDeviceDistributionCounterRequest)(nil),                             // 0: ntt.devices.v1.GetDeviceDistributionCounterRequest
	(*BatchGetDeviceDistributionCountersRequest)(nil),                       // 1: ntt.devices.v1.BatchGetDeviceDistributionCountersRequest
	(*BatchGetDeviceDistributionCountersResponse)(nil),                      // 2: ntt.devices.v1.BatchGetDeviceDistributionCountersResponse
	(*ListDeviceDistributionCountersRequest)(nil),                           // 3: ntt.devices.v1.ListDeviceDistributionCountersRequest
	(*ListDeviceDistributionCountersResponse)(nil),                          // 4: ntt.devices.v1.ListDeviceDistributionCountersResponse
	(*WatchDeviceDistributionCounterRequest)(nil),                           // 5: ntt.devices.v1.WatchDeviceDistributionCounterRequest
	(*WatchDeviceDistributionCounterResponse)(nil),                          // 6: ntt.devices.v1.WatchDeviceDistributionCounterResponse
	(*WatchDeviceDistributionCountersRequest)(nil),                          // 7: ntt.devices.v1.WatchDeviceDistributionCountersRequest
	(*WatchDeviceDistributionCountersResponse)(nil),                         // 8: ntt.devices.v1.WatchDeviceDistributionCountersResponse
	(*WatchDeviceDistributionCountersResponse_PageTokenChange)(nil),         // 9: ntt.devices.v1.WatchDeviceDistributionCountersResponse.PageTokenChange
	(*device_distribution_counter.DeviceDistributionCounter_FieldMask)(nil), // 10: ntt.devices.v1.DeviceDistributionCounter_FieldMask
	(view.View)(0), // 11: goten.types.View
	(*device_distribution_counter.DeviceDistributionCounter)(nil),       // 12: ntt.devices.v1.DeviceDistributionCounter
	(*device_distribution_counter.DeviceDistributionCounterChange)(nil), // 13: ntt.devices.v1.DeviceDistributionCounterChange
	(watch_type.WatchType)(0),     // 14: goten.types.WatchType
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
}
var edgelq_devices_proto_v1_device_distribution_counter_service_proto_depIdxs = []int32{
	10, // 0: ntt.devices.v1.GetDeviceDistributionCounterRequest.field_mask:type_name -> ntt.devices.v1.DeviceDistributionCounter_FieldMask
	11, // 1: ntt.devices.v1.GetDeviceDistributionCounterRequest.view:type_name -> goten.types.View
	10, // 2: ntt.devices.v1.BatchGetDeviceDistributionCountersRequest.field_mask:type_name -> ntt.devices.v1.DeviceDistributionCounter_FieldMask
	11, // 3: ntt.devices.v1.BatchGetDeviceDistributionCountersRequest.view:type_name -> goten.types.View
	12, // 4: ntt.devices.v1.BatchGetDeviceDistributionCountersResponse.device_distribution_counters:type_name -> ntt.devices.v1.DeviceDistributionCounter
	10, // 5: ntt.devices.v1.ListDeviceDistributionCountersRequest.field_mask:type_name -> ntt.devices.v1.DeviceDistributionCounter_FieldMask
	11, // 6: ntt.devices.v1.ListDeviceDistributionCountersRequest.view:type_name -> goten.types.View
	12, // 7: ntt.devices.v1.ListDeviceDistributionCountersResponse.device_distribution_counters:type_name -> ntt.devices.v1.DeviceDistributionCounter
	10, // 8: ntt.devices.v1.WatchDeviceDistributionCounterRequest.field_mask:type_name -> ntt.devices.v1.DeviceDistributionCounter_FieldMask
	11, // 9: ntt.devices.v1.WatchDeviceDistributionCounterRequest.view:type_name -> goten.types.View
	13, // 10: ntt.devices.v1.WatchDeviceDistributionCounterResponse.change:type_name -> ntt.devices.v1.DeviceDistributionCounterChange
	14, // 11: ntt.devices.v1.WatchDeviceDistributionCountersRequest.type:type_name -> goten.types.WatchType
	15, // 12: ntt.devices.v1.WatchDeviceDistributionCountersRequest.starting_time:type_name -> google.protobuf.Timestamp
	10, // 13: ntt.devices.v1.WatchDeviceDistributionCountersRequest.field_mask:type_name -> ntt.devices.v1.DeviceDistributionCounter_FieldMask
	11, // 14: ntt.devices.v1.WatchDeviceDistributionCountersRequest.view:type_name -> goten.types.View
	13, // 15: ntt.devices.v1.WatchDeviceDistributionCountersResponse.device_distribution_counter_changes:type_name -> ntt.devices.v1.DeviceDistributionCounterChange
	9,  // 16: ntt.devices.v1.WatchDeviceDistributionCountersResponse.page_token_change:type_name -> ntt.devices.v1.WatchDeviceDistributionCountersResponse.PageTokenChange
	0,  // 17: ntt.devices.v1.DeviceDistributionCounterService.GetDeviceDistributionCounter:input_type -> ntt.devices.v1.GetDeviceDistributionCounterRequest
	1,  // 18: ntt.devices.v1.DeviceDistributionCounterService.BatchGetDeviceDistributionCounters:input_type -> ntt.devices.v1.BatchGetDeviceDistributionCountersRequest
	3,  // 19: ntt.devices.v1.DeviceDistributionCounterService.ListDeviceDistributionCounters:input_type -> ntt.devices.v1.ListDeviceDistributionCountersRequest
	5,  // 20: ntt.devices.v1.DeviceDistributionCounterService.WatchDeviceDistributionCounter:input_type -> ntt.devices.v1.WatchDeviceDistributionCounterRequest
	7,  // 21: ntt.devices.v1.DeviceDistributionCounterService.WatchDeviceDistributionCounters:input_type -> ntt.devices.v1.WatchDeviceDistributionCountersRequest
	12, // 22: ntt.devices.v1.DeviceDistributionCounterService.GetDeviceDistributionCounter:output_type -> ntt.devices.v1.DeviceDistributionCounter
	2,  // 23: ntt.devices.v1.DeviceDistributionCounterService.BatchGetDeviceDistributionCounters:output_type -> ntt.devices.v1.BatchGetDeviceDistributionCountersResponse
	4,  // 24: ntt.devices.v1.DeviceDistributionCounterService.ListDeviceDistributionCounters:output_type -> ntt.devices.v1.ListDeviceDistributionCountersResponse
	6,  // 25: ntt.devices.v1.DeviceDistributionCounterService.WatchDeviceDistributionCounter:output_type -> ntt.devices.v1.WatchDeviceDistributionCounterResponse
	8,  // 26: ntt.devices.v1.DeviceDistributionCounterService.WatchDeviceDistributionCounters:output_type -> ntt.devices.v1.WatchDeviceDistributionCountersResponse
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { edgelq_devices_proto_v1_device_distribution_counter_service_proto_init() }
func edgelq_devices_proto_v1_device_distribution_counter_service_proto_init() {
	if edgelq_devices_proto_v1_device_distribution_counter_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceDistributionCounterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDeviceDistributionCountersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDeviceDistributionCountersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceDistributionCountersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceDistributionCountersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceDistributionCounterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceDistributionCounterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceDistributionCountersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceDistributionCountersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceDistributionCountersResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_devices_proto_v1_device_distribution_counter_service_proto_goTypes,
		DependencyIndexes: edgelq_devices_proto_v1_device_distribution_counter_service_proto_depIdxs,
		MessageInfos:      edgelq_devices_proto_v1_device_distribution_counter_service_proto_msgTypes,
	}.Build()
	edgelq_devices_proto_v1_device_distribution_counter_service_proto = out.File
	edgelq_devices_proto_v1_device_distribution_counter_service_proto_rawDesc = nil
	edgelq_devices_proto_v1_device_distribution_counter_service_proto_goTypes = nil
	edgelq_devices_proto_v1_device_distribution_counter_service_proto_depIdxs = nil
}
