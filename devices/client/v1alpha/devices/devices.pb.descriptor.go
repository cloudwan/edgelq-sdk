// Code generated by protoc-gen-goten-client
// Service: Devices
// DO NOT EDIT!!!

package devices_client

import (
	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	broker_client "github.com/cloudwan/edgelq-sdk/devices/client/v1alpha/broker"
	device_client "github.com/cloudwan/edgelq-sdk/devices/client/v1alpha/device"
	project_client "github.com/cloudwan/edgelq-sdk/devices/client/v1alpha/project"
	provisioning_approval_request_client "github.com/cloudwan/edgelq-sdk/devices/client/v1alpha/provisioning_approval_request"
	provisioning_policy_client "github.com/cloudwan/edgelq-sdk/devices/client/v1alpha/provisioning_policy"
	public_client "github.com/cloudwan/edgelq-sdk/devices/client/v1alpha/public"
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/project"
	provisioning_approval_request "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/provisioning_approval_request"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/provisioning_policy"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &device_client.GetDeviceRequest{}
	_ = &project.Project{}
	_ = &project_client.GetProjectRequest{}
	_ = &provisioning_approval_request.ProvisioningApprovalRequest{}
	_ = &provisioning_approval_request_client.GetProvisioningApprovalRequestRequest{}
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &provisioning_policy_client.GetProvisioningPolicyRequest{}
)

var (
	descriptorInitialized bool
	devicesDescriptor     *DevicesDescriptor
)

type DevicesDescriptor struct{}

func (d *DevicesDescriptor) GetServiceName() string {
	return "devices"
}

func (d *DevicesDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *DevicesDescriptor) GetVersion() string {
	return "v1alpha"
}

func (d *DevicesDescriptor) GetNextVersion() string {

	return "v1alpha2"
}

func (d *DevicesDescriptor) AllResourceDescriptors() []gotenresource.Descriptor {
	return []gotenresource.Descriptor{
		device.GetDescriptor(),
		project.GetDescriptor(),
		provisioning_approval_request.GetDescriptor(),
		provisioning_policy.GetDescriptor(),
	}
}

func (d *DevicesDescriptor) AllApiDescriptors() []gotenclient.ApiDescriptor {
	return []gotenclient.ApiDescriptor{
		broker_client.GetBrokerServiceDescriptor(),
		device_client.GetDeviceServiceDescriptor(),
		project_client.GetProjectServiceDescriptor(),
		provisioning_approval_request_client.GetProvisioningApprovalRequestServiceDescriptor(),
		provisioning_policy_client.GetProvisioningPolicyServiceDescriptor(),
		public_client.GetPublicServiceDescriptor(),
	}
}

func (d *DevicesDescriptor) AllImportedServiceInfos() []gotenclient.ServiceImportInfo {
	return []gotenclient.ServiceImportInfo{
		{
			Domain:  "iam.edgelq.com",
			Version: "v1alpha",
		},
	}
}

func GetDevicesDescriptor() *DevicesDescriptor {
	return devicesDescriptor
}

func initDescriptor() {
	devicesDescriptor = &DevicesDescriptor{}
	gotenclient.GetRegistry().RegisterSvcDescriptor(devicesDescriptor)
}

func init() {
	if !descriptorInitialized {
		initDescriptor()
		descriptorInitialized = true
	}
}
