// Code generated by protoc-gen-goten-go
// File: edgelq/devices/proto/v1alpha/broker_custom.proto
// DO NOT EDIT!!!

package broker_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/device"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Broker dedicated messages
type BrokerServiceType int32

const (
	// Service type not specified
	BrokerServiceType_BROKER_SERVICE_UNSPECIFIED BrokerServiceType = 0
	// SSH service
	BrokerServiceType_BROKER_SERVICE_SSH_LEGACY BrokerServiceType = 1
	BrokerServiceType_BROKER_SERVICE_SSH        BrokerServiceType = 3
	// TCP port forward service
	BrokerServiceType_BROKER_SERVICE_TCP_FORWARD_PORT BrokerServiceType = 2
	// Reboot service
	BrokerServiceType_BROKER_SERVICE_REBOOT BrokerServiceType = 4
	// Shutdown service
	BrokerServiceType_BROKER_SERVICE_SHUTDOWN BrokerServiceType = 5
	// SCP service
	BrokerServiceType_BROKER_SERVICE_SCP        BrokerServiceType = 6
	BrokerServiceType_BROKER_SERVICE_SCP_LEGACY BrokerServiceType = 7
	// System Logs service
	BrokerServiceType_BROKER_SYS_LOGS BrokerServiceType = 8
	// Application (Container) Logs service
	BrokerServiceType_BROKER_APP_LOGS BrokerServiceType = 9
	// Pod State Management service
	BrokerServiceType_BROKER_POD_MANAGEMENT BrokerServiceType = 10
)

var (
	BrokerServiceType_name = map[int32]string{
		0:  "BROKER_SERVICE_UNSPECIFIED",
		1:  "BROKER_SERVICE_SSH_LEGACY",
		3:  "BROKER_SERVICE_SSH",
		2:  "BROKER_SERVICE_TCP_FORWARD_PORT",
		4:  "BROKER_SERVICE_REBOOT",
		5:  "BROKER_SERVICE_SHUTDOWN",
		6:  "BROKER_SERVICE_SCP",
		7:  "BROKER_SERVICE_SCP_LEGACY",
		8:  "BROKER_SYS_LOGS",
		9:  "BROKER_APP_LOGS",
		10: "BROKER_POD_MANAGEMENT",
	}

	BrokerServiceType_value = map[string]int32{
		"BROKER_SERVICE_UNSPECIFIED":      0,
		"BROKER_SERVICE_SSH_LEGACY":       1,
		"BROKER_SERVICE_SSH":              3,
		"BROKER_SERVICE_TCP_FORWARD_PORT": 2,
		"BROKER_SERVICE_REBOOT":           4,
		"BROKER_SERVICE_SHUTDOWN":         5,
		"BROKER_SERVICE_SCP":              6,
		"BROKER_SERVICE_SCP_LEGACY":       7,
		"BROKER_SYS_LOGS":                 8,
		"BROKER_APP_LOGS":                 9,
		"BROKER_POD_MANAGEMENT":           10,
	}
)

func (x BrokerServiceType) Enum() *BrokerServiceType {
	p := new(BrokerServiceType)
	*p = x
	return p
}

func (x BrokerServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (BrokerServiceType) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_enumTypes[0].Descriptor()
}

func (BrokerServiceType) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1alpha_broker_custom_proto_enumTypes[0]
}

func (x BrokerServiceType) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use BrokerServiceType.ProtoReflect.Descriptor instead.
func (BrokerServiceType) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{0}
}

type SCPService_Configure_Direction int32

const (
	SCPService_Configure_DOWNLOAD SCPService_Configure_Direction = 0
	SCPService_Configure_UPLOAD   SCPService_Configure_Direction = 1
)

var (
	SCPService_Configure_Direction_name = map[int32]string{
		0: "DOWNLOAD",
		1: "UPLOAD",
	}

	SCPService_Configure_Direction_value = map[string]int32{
		"DOWNLOAD": 0,
		"UPLOAD":   1,
	}
)

func (x SCPService_Configure_Direction) Enum() *SCPService_Configure_Direction {
	p := new(SCPService_Configure_Direction)
	*p = x
	return p
}

func (x SCPService_Configure_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (SCPService_Configure_Direction) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_enumTypes[1].Descriptor()
}

func (SCPService_Configure_Direction) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1alpha_broker_custom_proto_enumTypes[1]
}

func (x SCPService_Configure_Direction) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use SCPService_Configure_Direction.ProtoReflect.Descriptor instead.
func (SCPService_Configure_Direction) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{8, 0, 0}
}

// Commands for pod state management
type PodManagementService_PodState int32

const (
	// Unspecified pod state
	PodManagementService_UNSPECIFIED PodManagementService_PodState = 0
	// Start the pod
	PodManagementService_START PodManagementService_PodState = 1
	// Stop the pod
	PodManagementService_STOP PodManagementService_PodState = 2
	// Restart the pod
	PodManagementService_RESTART PodManagementService_PodState = 3
)

var (
	PodManagementService_PodState_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "START",
		2: "STOP",
		3: "RESTART",
	}

	PodManagementService_PodState_value = map[string]int32{
		"UNSPECIFIED": 0,
		"START":       1,
		"STOP":        2,
		"RESTART":     3,
	}
)

func (x PodManagementService_PodState) Enum() *PodManagementService_PodState {
	p := new(PodManagementService_PodState)
	*p = x
	return p
}

func (x PodManagementService_PodState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (PodManagementService_PodState) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_enumTypes[2].Descriptor()
}

func (PodManagementService_PodState) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1alpha_broker_custom_proto_enumTypes[2]
}

func (x PodManagementService_PodState) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use PodManagementService_PodState.ProtoReflect.Descriptor instead.
func (PodManagementService_PodState) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{10, 0}
}

// Commands for system state management
type SystemStateService_SystemState int32

const (
	// Unspecified system state
	SystemStateService_UNSPECIFIED SystemStateService_SystemState = 0
	// Shutdown the system
	SystemStateService_SHUTDOWN SystemStateService_SystemState = 1
	// Reboot the system
	SystemStateService_REBOOT SystemStateService_SystemState = 2
)

var (
	SystemStateService_SystemState_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SHUTDOWN",
		2: "REBOOT",
	}

	SystemStateService_SystemState_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SHUTDOWN":    1,
		"REBOOT":      2,
	}
)

func (x SystemStateService_SystemState) Enum() *SystemStateService_SystemState {
	p := new(SystemStateService_SystemState)
	*p = x
	return p
}

func (x SystemStateService_SystemState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (SystemStateService_SystemState) Descriptor() preflect.EnumDescriptor {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_enumTypes[3].Descriptor()
}

func (SystemStateService_SystemState) Type() preflect.EnumType {
	return &edgelq_devices_proto_v1alpha_broker_custom_proto_enumTypes[3]
}

func (x SystemStateService_SystemState) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use SystemStateService_SystemState.ProtoReflect.Descriptor instead.
func (SystemStateService_SystemState) EnumDescriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{11, 0}
}

// Request message for method
// [ListenForConnectionsRequest][ntt.devices.v1alpha.ListenForConnectionsRequest]
// Registers a new session listener (agent) to the endpoint.
// This method is used by agents on the device and not meant for use of users.
type ListenForConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*ListenForConnectionsRequest_RegisterListener_
	//	*ListenForConnectionsRequest_ChannelOpenError_
	//	*ListenForConnectionsRequest_KeepAlive_
	Msg isListenForConnectionsRequest_Msg `protobuf_oneof:"msg"`
}

func (m *ListenForConnectionsRequest) Reset() {
	*m = ListenForConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListenForConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListenForConnectionsRequest) ProtoMessage() {}

func (m *ListenForConnectionsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListenForConnectionsRequest) GotenMessage() {}

// Deprecated, Use ListenForConnectionsRequest.ProtoReflect.Descriptor instead.
func (*ListenForConnectionsRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{0}
}

func (m *ListenForConnectionsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListenForConnectionsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListenForConnectionsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListenForConnectionsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isListenForConnectionsRequest_Msg interface {
	isListenForConnectionsRequest_Msg()
}

type ListenForConnectionsRequest_RegisterListener_ struct {
	// This is a hello message from the agent with its name.
	RegisterListener *ListenForConnectionsRequest_RegisterListener `protobuf:"bytes,1,opt,name=register_listener,json=registerListener,proto3,oneof" firestore:"registerListener"`
}
type ListenForConnectionsRequest_ChannelOpenError_ struct {
	// When the agent failed to open a requested channel, this message will be
	// sent from the agent to the endpoint.
	ChannelOpenError *ListenForConnectionsRequest_ChannelOpenError `protobuf:"bytes,2,opt,name=channel_open_error,json=channelOpenError,proto3,oneof" firestore:"channelOpenError"`
}
type ListenForConnectionsRequest_KeepAlive_ struct {
	// KeepAlive.
	KeepAlive *ListenForConnectionsRequest_KeepAlive `protobuf:"bytes,3,opt,name=keep_alive,json=keepAlive,proto3,oneof" firestore:"keepAlive"`
}

func (*ListenForConnectionsRequest_RegisterListener_) isListenForConnectionsRequest_Msg() {}
func (*ListenForConnectionsRequest_ChannelOpenError_) isListenForConnectionsRequest_Msg() {}
func (*ListenForConnectionsRequest_KeepAlive_) isListenForConnectionsRequest_Msg()        {}
func (m *ListenForConnectionsRequest) GetMsg() isListenForConnectionsRequest_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *ListenForConnectionsRequest) GetRegisterListener() *ListenForConnectionsRequest_RegisterListener {
	if x, ok := m.GetMsg().(*ListenForConnectionsRequest_RegisterListener_); ok {
		return x.RegisterListener
	}
	return nil
}
func (m *ListenForConnectionsRequest) GetChannelOpenError() *ListenForConnectionsRequest_ChannelOpenError {
	if x, ok := m.GetMsg().(*ListenForConnectionsRequest_ChannelOpenError_); ok {
		return x.ChannelOpenError
	}
	return nil
}
func (m *ListenForConnectionsRequest) GetKeepAlive() *ListenForConnectionsRequest_KeepAlive {
	if x, ok := m.GetMsg().(*ListenForConnectionsRequest_KeepAlive_); ok {
		return x.KeepAlive
	}
	return nil
}
func (m *ListenForConnectionsRequest) SetMsg(ofv isListenForConnectionsRequest_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isListenForConnectionsRequest_Msg", "ListenForConnectionsRequest"))
	}
	m.Msg = ofv
}
func (m *ListenForConnectionsRequest) SetRegisterListener(fv *ListenForConnectionsRequest_RegisterListener) {
	m.SetMsg(&ListenForConnectionsRequest_RegisterListener_{RegisterListener: fv})
}
func (m *ListenForConnectionsRequest) SetChannelOpenError(fv *ListenForConnectionsRequest_ChannelOpenError) {
	m.SetMsg(&ListenForConnectionsRequest_ChannelOpenError_{ChannelOpenError: fv})
}
func (m *ListenForConnectionsRequest) SetKeepAlive(fv *ListenForConnectionsRequest_KeepAlive) {
	m.SetMsg(&ListenForConnectionsRequest_KeepAlive_{KeepAlive: fv})
}

// Request message for method
// [ListenForConnectionsResponse][ntt.devices.v1alpha.ListenForConnectionsResponse]
// Responses from the endpoint to session agents.
type ListenForConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*ListenForConnectionsResponse_ChannelRequested_
	Msg isListenForConnectionsResponse_Msg `protobuf_oneof:"msg"`
}

func (m *ListenForConnectionsResponse) Reset() {
	*m = ListenForConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListenForConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListenForConnectionsResponse) ProtoMessage() {}

func (m *ListenForConnectionsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListenForConnectionsResponse) GotenMessage() {}

// Deprecated, Use ListenForConnectionsResponse.ProtoReflect.Descriptor instead.
func (*ListenForConnectionsResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{1}
}

func (m *ListenForConnectionsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListenForConnectionsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListenForConnectionsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListenForConnectionsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isListenForConnectionsResponse_Msg interface {
	isListenForConnectionsResponse_Msg()
}

type ListenForConnectionsResponse_ChannelRequested_ struct {
	// Notifies a new channel has been requested by a client.
	ChannelRequested *ListenForConnectionsResponse_ChannelRequested `protobuf:"bytes,1,opt,name=channel_requested,json=channelRequested,proto3,oneof" firestore:"channelRequested"`
}

func (*ListenForConnectionsResponse_ChannelRequested_) isListenForConnectionsResponse_Msg() {}
func (m *ListenForConnectionsResponse) GetMsg() isListenForConnectionsResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *ListenForConnectionsResponse) GetChannelRequested() *ListenForConnectionsResponse_ChannelRequested {
	if x, ok := m.GetMsg().(*ListenForConnectionsResponse_ChannelRequested_); ok {
		return x.ChannelRequested
	}
	return nil
}
func (m *ListenForConnectionsResponse) SetMsg(ofv isListenForConnectionsResponse_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isListenForConnectionsResponse_Msg", "ListenForConnectionsResponse"))
	}
	m.Msg = ofv
}
func (m *ListenForConnectionsResponse) SetChannelRequested(fv *ListenForConnectionsResponse_ChannelRequested) {
	m.SetMsg(&ListenForConnectionsResponse_ChannelRequested_{ChannelRequested: fv})
}

// Request message for method
// [OpenConnectionChannelSocketRequest][ntt.devices.v1alpha.OpenConnectionChannelSocketRequest]
// Opens a new socket for a session by agent at an endpoint. This session is
// usually initiated by the agent who received a `ChannelRequested` message on a
// ListenForConnection session. The session is used for data plane to transfer
// data for a channel between the endpoint and the agent.
type OpenConnectionChannelSocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*OpenConnectionChannelSocketRequest_RegisterSocket_
	//	*OpenConnectionChannelSocketRequest_Data
	//	*OpenConnectionChannelSocketRequest_Error
	//	*OpenConnectionChannelSocketRequest_Ack
	Msg isOpenConnectionChannelSocketRequest_Msg `protobuf_oneof:"msg"`
}

func (m *OpenConnectionChannelSocketRequest) Reset() {
	*m = OpenConnectionChannelSocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *OpenConnectionChannelSocketRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*OpenConnectionChannelSocketRequest) ProtoMessage() {}

func (m *OpenConnectionChannelSocketRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*OpenConnectionChannelSocketRequest) GotenMessage() {}

// Deprecated, Use OpenConnectionChannelSocketRequest.ProtoReflect.Descriptor instead.
func (*OpenConnectionChannelSocketRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{2}
}

func (m *OpenConnectionChannelSocketRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *OpenConnectionChannelSocketRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *OpenConnectionChannelSocketRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *OpenConnectionChannelSocketRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isOpenConnectionChannelSocketRequest_Msg interface {
	isOpenConnectionChannelSocketRequest_Msg()
}

type OpenConnectionChannelSocketRequest_RegisterSocket_ struct {
	// Registers a new socket on the endpoint.
	RegisterSocket *OpenConnectionChannelSocketRequest_RegisterSocket `protobuf:"bytes,1,opt,name=register_socket,json=registerSocket,proto3,oneof" firestore:"registerSocket"`
}
type OpenConnectionChannelSocketRequest_Data struct {
	// Data from the agent to the endpoint (client).
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3,oneof" firestore:"data"`
}
type OpenConnectionChannelSocketRequest_Error struct {
	// Error from the agent to the endpoint (client).
	Error []byte `protobuf:"bytes,4,opt,name=error,proto3,oneof" firestore:"error"`
}
type OpenConnectionChannelSocketRequest_Ack struct {
	// Ack from the agent to the endpoint (client)
	Ack *Ack `protobuf:"bytes,5,opt,name=ack,proto3,oneof" firestore:"ack"`
}

func (*OpenConnectionChannelSocketRequest_RegisterSocket_) isOpenConnectionChannelSocketRequest_Msg() {
}
func (*OpenConnectionChannelSocketRequest_Data) isOpenConnectionChannelSocketRequest_Msg()  {}
func (*OpenConnectionChannelSocketRequest_Error) isOpenConnectionChannelSocketRequest_Msg() {}
func (*OpenConnectionChannelSocketRequest_Ack) isOpenConnectionChannelSocketRequest_Msg()   {}
func (m *OpenConnectionChannelSocketRequest) GetMsg() isOpenConnectionChannelSocketRequest_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *OpenConnectionChannelSocketRequest) GetRegisterSocket() *OpenConnectionChannelSocketRequest_RegisterSocket {
	if x, ok := m.GetMsg().(*OpenConnectionChannelSocketRequest_RegisterSocket_); ok {
		return x.RegisterSocket
	}
	return nil
}
func (m *OpenConnectionChannelSocketRequest) GetData() []byte {
	if x, ok := m.GetMsg().(*OpenConnectionChannelSocketRequest_Data); ok {
		return x.Data
	}
	return nil
}
func (m *OpenConnectionChannelSocketRequest) GetError() []byte {
	if x, ok := m.GetMsg().(*OpenConnectionChannelSocketRequest_Error); ok {
		return x.Error
	}
	return nil
}
func (m *OpenConnectionChannelSocketRequest) GetAck() *Ack {
	if x, ok := m.GetMsg().(*OpenConnectionChannelSocketRequest_Ack); ok {
		return x.Ack
	}
	return nil
}
func (m *OpenConnectionChannelSocketRequest) SetMsg(ofv isOpenConnectionChannelSocketRequest_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isOpenConnectionChannelSocketRequest_Msg", "OpenConnectionChannelSocketRequest"))
	}
	m.Msg = ofv
}
func (m *OpenConnectionChannelSocketRequest) SetRegisterSocket(fv *OpenConnectionChannelSocketRequest_RegisterSocket) {
	m.SetMsg(&OpenConnectionChannelSocketRequest_RegisterSocket_{RegisterSocket: fv})
}
func (m *OpenConnectionChannelSocketRequest) SetData(fv []byte) {
	m.SetMsg(&OpenConnectionChannelSocketRequest_Data{Data: fv})
}
func (m *OpenConnectionChannelSocketRequest) SetError(fv []byte) {
	m.SetMsg(&OpenConnectionChannelSocketRequest_Error{Error: fv})
}
func (m *OpenConnectionChannelSocketRequest) SetAck(fv *Ack) {
	m.SetMsg(&OpenConnectionChannelSocketRequest_Ack{Ack: fv})
}

// Request message for method
// [OpenConnectionChannelSocketResponse][ntt.devices.v1alpha.OpenConnectionChannelSocketResponse]
type OpenConnectionChannelSocketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*OpenConnectionChannelSocketResponse_Data
	//	*OpenConnectionChannelSocketResponse_Ack
	Msg isOpenConnectionChannelSocketResponse_Msg `protobuf_oneof:"msg"`
}

func (m *OpenConnectionChannelSocketResponse) Reset() {
	*m = OpenConnectionChannelSocketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *OpenConnectionChannelSocketResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*OpenConnectionChannelSocketResponse) ProtoMessage() {}

func (m *OpenConnectionChannelSocketResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*OpenConnectionChannelSocketResponse) GotenMessage() {}

// Deprecated, Use OpenConnectionChannelSocketResponse.ProtoReflect.Descriptor instead.
func (*OpenConnectionChannelSocketResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{3}
}

func (m *OpenConnectionChannelSocketResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *OpenConnectionChannelSocketResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *OpenConnectionChannelSocketResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *OpenConnectionChannelSocketResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isOpenConnectionChannelSocketResponse_Msg interface {
	isOpenConnectionChannelSocketResponse_Msg()
}

type OpenConnectionChannelSocketResponse_Data struct {
	// Data from the endpoint (client) to the agent.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3,oneof" firestore:"data"`
}
type OpenConnectionChannelSocketResponse_Ack struct {
	// Ack from the client to the endpoint (device)
	Ack *Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof" firestore:"ack"`
}

func (*OpenConnectionChannelSocketResponse_Data) isOpenConnectionChannelSocketResponse_Msg() {}
func (*OpenConnectionChannelSocketResponse_Ack) isOpenConnectionChannelSocketResponse_Msg()  {}
func (m *OpenConnectionChannelSocketResponse) GetMsg() isOpenConnectionChannelSocketResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *OpenConnectionChannelSocketResponse) GetData() []byte {
	if x, ok := m.GetMsg().(*OpenConnectionChannelSocketResponse_Data); ok {
		return x.Data
	}
	return nil
}
func (m *OpenConnectionChannelSocketResponse) GetAck() *Ack {
	if x, ok := m.GetMsg().(*OpenConnectionChannelSocketResponse_Ack); ok {
		return x.Ack
	}
	return nil
}
func (m *OpenConnectionChannelSocketResponse) SetMsg(ofv isOpenConnectionChannelSocketResponse_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isOpenConnectionChannelSocketResponse_Msg", "OpenConnectionChannelSocketResponse"))
	}
	m.Msg = ofv
}
func (m *OpenConnectionChannelSocketResponse) SetData(fv []byte) {
	m.SetMsg(&OpenConnectionChannelSocketResponse_Data{Data: fv})
}
func (m *OpenConnectionChannelSocketResponse) SetAck(fv *Ack) {
	m.SetMsg(&OpenConnectionChannelSocketResponse_Ack{Ack: fv})
}

// Response message for method
// [ConnectToDeviceRequest][ntt.devices.v1alpha.ConnectToDeviceRequest]
// ConnectToDevice connects a local service provided by a Device.
type ConnectToDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*ConnectToDeviceRequest_OpenRequest_
	//	*ConnectToDeviceRequest_Data
	//	*ConnectToDeviceRequest_Ack
	//	*ConnectToDeviceRequest_KeepAlive_
	Msg isConnectToDeviceRequest_Msg `protobuf_oneof:"msg"`
}

func (m *ConnectToDeviceRequest) Reset() {
	*m = ConnectToDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConnectToDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConnectToDeviceRequest) ProtoMessage() {}

func (m *ConnectToDeviceRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConnectToDeviceRequest) GotenMessage() {}

// Deprecated, Use ConnectToDeviceRequest.ProtoReflect.Descriptor instead.
func (*ConnectToDeviceRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{4}
}

func (m *ConnectToDeviceRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConnectToDeviceRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConnectToDeviceRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConnectToDeviceRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isConnectToDeviceRequest_Msg interface {
	isConnectToDeviceRequest_Msg()
}

type ConnectToDeviceRequest_OpenRequest_ struct {
	// The initiation message to open a channel to a device.
	OpenRequest *ConnectToDeviceRequest_OpenRequest `protobuf:"bytes,1,opt,name=open_request,json=openRequest,proto3,oneof" firestore:"openRequest"`
}
type ConnectToDeviceRequest_Data struct {
	// Any data sent to the device through the endpoint.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3,oneof" firestore:"data"`
}
type ConnectToDeviceRequest_Ack struct {
	// Ack from the user to the endpoint (device)
	Ack *Ack `protobuf:"bytes,4,opt,name=ack,proto3,oneof" firestore:"ack"`
}
type ConnectToDeviceRequest_KeepAlive_ struct {
	KeepAlive *ConnectToDeviceRequest_KeepAlive `protobuf:"bytes,5,opt,name=keep_alive,json=keepAlive,proto3,oneof" firestore:"keepAlive"`
}

func (*ConnectToDeviceRequest_OpenRequest_) isConnectToDeviceRequest_Msg() {}
func (*ConnectToDeviceRequest_Data) isConnectToDeviceRequest_Msg()         {}
func (*ConnectToDeviceRequest_Ack) isConnectToDeviceRequest_Msg()          {}
func (*ConnectToDeviceRequest_KeepAlive_) isConnectToDeviceRequest_Msg()   {}
func (m *ConnectToDeviceRequest) GetMsg() isConnectToDeviceRequest_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *ConnectToDeviceRequest) GetOpenRequest() *ConnectToDeviceRequest_OpenRequest {
	if x, ok := m.GetMsg().(*ConnectToDeviceRequest_OpenRequest_); ok {
		return x.OpenRequest
	}
	return nil
}
func (m *ConnectToDeviceRequest) GetData() []byte {
	if x, ok := m.GetMsg().(*ConnectToDeviceRequest_Data); ok {
		return x.Data
	}
	return nil
}
func (m *ConnectToDeviceRequest) GetAck() *Ack {
	if x, ok := m.GetMsg().(*ConnectToDeviceRequest_Ack); ok {
		return x.Ack
	}
	return nil
}
func (m *ConnectToDeviceRequest) GetKeepAlive() *ConnectToDeviceRequest_KeepAlive {
	if x, ok := m.GetMsg().(*ConnectToDeviceRequest_KeepAlive_); ok {
		return x.KeepAlive
	}
	return nil
}
func (m *ConnectToDeviceRequest) SetMsg(ofv isConnectToDeviceRequest_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isConnectToDeviceRequest_Msg", "ConnectToDeviceRequest"))
	}
	m.Msg = ofv
}
func (m *ConnectToDeviceRequest) SetOpenRequest(fv *ConnectToDeviceRequest_OpenRequest) {
	m.SetMsg(&ConnectToDeviceRequest_OpenRequest_{OpenRequest: fv})
}
func (m *ConnectToDeviceRequest) SetData(fv []byte) {
	m.SetMsg(&ConnectToDeviceRequest_Data{Data: fv})
}
func (m *ConnectToDeviceRequest) SetAck(fv *Ack) {
	m.SetMsg(&ConnectToDeviceRequest_Ack{Ack: fv})
}
func (m *ConnectToDeviceRequest) SetKeepAlive(fv *ConnectToDeviceRequest_KeepAlive) {
	m.SetMsg(&ConnectToDeviceRequest_KeepAlive_{KeepAlive: fv})
}

// Response message for method
// [ConnectToDeviceResponse][ntt.devices.v1alpha.ConnectToDeviceResponse]
type ConnectToDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*ConnectToDeviceResponse_OpenResponse_
	//	*ConnectToDeviceResponse_Data
	//	*ConnectToDeviceResponse_Error
	//	*ConnectToDeviceResponse_Ack
	Msg isConnectToDeviceResponse_Msg `protobuf_oneof:"msg"`
}

func (m *ConnectToDeviceResponse) Reset() {
	*m = ConnectToDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConnectToDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConnectToDeviceResponse) ProtoMessage() {}

func (m *ConnectToDeviceResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConnectToDeviceResponse) GotenMessage() {}

// Deprecated, Use ConnectToDeviceResponse.ProtoReflect.Descriptor instead.
func (*ConnectToDeviceResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{5}
}

func (m *ConnectToDeviceResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConnectToDeviceResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConnectToDeviceResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConnectToDeviceResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isConnectToDeviceResponse_Msg interface {
	isConnectToDeviceResponse_Msg()
}

type ConnectToDeviceResponse_OpenResponse_ struct {
	// Notification from the agent (endpoint) to the channel has been opened.
	OpenResponse *ConnectToDeviceResponse_OpenResponse `protobuf:"bytes,1,opt,name=open_response,json=openResponse,proto3,oneof" firestore:"openResponse"`
}
type ConnectToDeviceResponse_Data struct {
	// Any data from the device (endpoint) to the client.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3,oneof" firestore:"data"`
}
type ConnectToDeviceResponse_Error struct {
	// Any error from the device (endpoint) to the client.
	Error []byte `protobuf:"bytes,4,opt,name=error,proto3,oneof" firestore:"error"`
}
type ConnectToDeviceResponse_Ack struct {
	// Ack from the device to the endpoint (client)
	Ack *Ack `protobuf:"bytes,5,opt,name=ack,proto3,oneof" firestore:"ack"`
}

func (*ConnectToDeviceResponse_OpenResponse_) isConnectToDeviceResponse_Msg() {}
func (*ConnectToDeviceResponse_Data) isConnectToDeviceResponse_Msg()          {}
func (*ConnectToDeviceResponse_Error) isConnectToDeviceResponse_Msg()         {}
func (*ConnectToDeviceResponse_Ack) isConnectToDeviceResponse_Msg()           {}
func (m *ConnectToDeviceResponse) GetMsg() isConnectToDeviceResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *ConnectToDeviceResponse) GetOpenResponse() *ConnectToDeviceResponse_OpenResponse {
	if x, ok := m.GetMsg().(*ConnectToDeviceResponse_OpenResponse_); ok {
		return x.OpenResponse
	}
	return nil
}
func (m *ConnectToDeviceResponse) GetData() []byte {
	if x, ok := m.GetMsg().(*ConnectToDeviceResponse_Data); ok {
		return x.Data
	}
	return nil
}
func (m *ConnectToDeviceResponse) GetError() []byte {
	if x, ok := m.GetMsg().(*ConnectToDeviceResponse_Error); ok {
		return x.Error
	}
	return nil
}
func (m *ConnectToDeviceResponse) GetAck() *Ack {
	if x, ok := m.GetMsg().(*ConnectToDeviceResponse_Ack); ok {
		return x.Ack
	}
	return nil
}
func (m *ConnectToDeviceResponse) SetMsg(ofv isConnectToDeviceResponse_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isConnectToDeviceResponse_Msg", "ConnectToDeviceResponse"))
	}
	m.Msg = ofv
}
func (m *ConnectToDeviceResponse) SetOpenResponse(fv *ConnectToDeviceResponse_OpenResponse) {
	m.SetMsg(&ConnectToDeviceResponse_OpenResponse_{OpenResponse: fv})
}
func (m *ConnectToDeviceResponse) SetData(fv []byte) {
	m.SetMsg(&ConnectToDeviceResponse_Data{Data: fv})
}
func (m *ConnectToDeviceResponse) SetError(fv []byte) {
	m.SetMsg(&ConnectToDeviceResponse_Error{Error: fv})
}
func (m *ConnectToDeviceResponse) SetAck(fv *Ack) {
	m.SetMsg(&ConnectToDeviceResponse_Ack{Ack: fv})
}

// Ack message that contains how much data should have been processed
type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Processed     uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty" firestore:"processed"`
}

func (m *Ack) Reset() {
	*m = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Ack) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Ack) ProtoMessage() {}

func (m *Ack) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Ack) GotenMessage() {}

// Deprecated, Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{6}
}

func (m *Ack) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Ack) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Ack) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Ack) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Ack) GetProcessed() uint64 {
	if m != nil {
		return m.Processed
	}
	return uint64(0)
}

func (m *Ack) SetProcessed(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Processed", "Ack"))
	}
	m.Processed = fv
}

// Services on the device that the client connects to
type SSHService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *SSHService) Reset() {
	*m = SSHService{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SSHService) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SSHService) ProtoMessage() {}

func (m *SSHService) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SSHService) GotenMessage() {}

// Deprecated, Use SSHService.ProtoReflect.Descriptor instead.
func (*SSHService) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{7}
}

func (m *SSHService) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SSHService) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SSHService) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SSHService) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type SCPService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*SCPService_Dir
	//	*SCPService_File
	//	*SCPService_Eot
	//	*SCPService_Config
	Msg isSCPService_Msg `protobuf_oneof:"msg"`
}

func (m *SCPService) Reset() {
	*m = SCPService{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SCPService) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SCPService) ProtoMessage() {}

func (m *SCPService) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SCPService) GotenMessage() {}

// Deprecated, Use SCPService.ProtoReflect.Descriptor instead.
func (*SCPService) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{8}
}

func (m *SCPService) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SCPService) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SCPService) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SCPService) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isSCPService_Msg interface {
	isSCPService_Msg()
}

type SCPService_Dir struct {
	// Request to create a directory
	Dir *SCPService_CreateDirectory `protobuf:"bytes,1,opt,name=dir,proto3,oneof" firestore:"dir"`
}
type SCPService_File struct {
	// Request to create a file
	File *SCPService_CreateFile `protobuf:"bytes,2,opt,name=file,proto3,oneof" firestore:"file"`
}
type SCPService_Eot struct {
	// Request to end SCP transfer
	Eot bool `protobuf:"varint,3,opt,name=eot,proto3,oneof" firestore:"eot"`
}
type SCPService_Config struct {
	// Request SCP configuration
	Config *SCPService_Configure `protobuf:"bytes,4,opt,name=config,proto3,oneof" firestore:"config"`
}

func (*SCPService_Dir) isSCPService_Msg()    {}
func (*SCPService_File) isSCPService_Msg()   {}
func (*SCPService_Eot) isSCPService_Msg()    {}
func (*SCPService_Config) isSCPService_Msg() {}
func (m *SCPService) GetMsg() isSCPService_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *SCPService) GetDir() *SCPService_CreateDirectory {
	if x, ok := m.GetMsg().(*SCPService_Dir); ok {
		return x.Dir
	}
	return nil
}
func (m *SCPService) GetFile() *SCPService_CreateFile {
	if x, ok := m.GetMsg().(*SCPService_File); ok {
		return x.File
	}
	return nil
}
func (m *SCPService) GetEot() bool {
	if x, ok := m.GetMsg().(*SCPService_Eot); ok {
		return x.Eot
	}
	return false
}
func (m *SCPService) GetConfig() *SCPService_Configure {
	if x, ok := m.GetMsg().(*SCPService_Config); ok {
		return x.Config
	}
	return nil
}
func (m *SCPService) SetMsg(ofv isSCPService_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isSCPService_Msg", "SCPService"))
	}
	m.Msg = ofv
}
func (m *SCPService) SetDir(fv *SCPService_CreateDirectory) {
	m.SetMsg(&SCPService_Dir{Dir: fv})
}
func (m *SCPService) SetFile(fv *SCPService_CreateFile) {
	m.SetMsg(&SCPService_File{File: fv})
}
func (m *SCPService) SetEot(fv bool) {
	m.SetMsg(&SCPService_Eot{Eot: fv})
}
func (m *SCPService) SetConfig(fv *SCPService_Configure) {
	m.SetMsg(&SCPService_Config{Config: fv})
}

type LogsService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *LogsService) Reset() {
	*m = LogsService{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogsService) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogsService) ProtoMessage() {}

func (m *LogsService) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogsService) GotenMessage() {}

// Deprecated, Use LogsService.ProtoReflect.Descriptor instead.
func (*LogsService) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{9}
}

func (m *LogsService) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogsService) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogsService) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogsService) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type PodManagementService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Pod state command
	Command PodManagementService_PodState `protobuf:"varint,1,opt,name=command,proto3,enum=ntt.devices.v1alpha.PodManagementService_PodState" json:"command,omitempty" firestore:"command"`
	// Pod to execute the command on
	Pod string `protobuf:"bytes,2,opt,name=pod,proto3" json:"pod,omitempty" firestore:"pod"`
}

func (m *PodManagementService) Reset() {
	*m = PodManagementService{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PodManagementService) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PodManagementService) ProtoMessage() {}

func (m *PodManagementService) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PodManagementService) GotenMessage() {}

// Deprecated, Use PodManagementService.ProtoReflect.Descriptor instead.
func (*PodManagementService) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{10}
}

func (m *PodManagementService) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PodManagementService) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PodManagementService) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PodManagementService) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PodManagementService) GetCommand() PodManagementService_PodState {
	if m != nil {
		return m.Command
	}
	return PodManagementService_UNSPECIFIED
}

func (m *PodManagementService) GetPod() string {
	if m != nil {
		return m.Pod
	}
	return ""
}

func (m *PodManagementService) SetCommand(fv PodManagementService_PodState) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Command", "PodManagementService"))
	}
	m.Command = fv
}

func (m *PodManagementService) SetPod(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Pod", "PodManagementService"))
	}
	m.Pod = fv
}

type SystemStateService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *SystemStateService) Reset() {
	*m = SystemStateService{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SystemStateService) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SystemStateService) ProtoMessage() {}

func (m *SystemStateService) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SystemStateService) GotenMessage() {}

// Deprecated, Use SystemStateService.ProtoReflect.Descriptor instead.
func (*SystemStateService) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{11}
}

func (m *SystemStateService) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SystemStateService) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SystemStateService) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SystemStateService) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type ListenForConnectionsRequest_RegisterListener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The self-declared device name, used for authentication/authorization.
	Device *device.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=device,proto3" json:"device,omitempty" firestore:"device"`
}

func (m *ListenForConnectionsRequest_RegisterListener) Reset() {
	*m = ListenForConnectionsRequest_RegisterListener{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListenForConnectionsRequest_RegisterListener) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListenForConnectionsRequest_RegisterListener) ProtoMessage() {}

func (m *ListenForConnectionsRequest_RegisterListener) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListenForConnectionsRequest_RegisterListener) GotenMessage() {}

// Deprecated, Use ListenForConnectionsRequest_RegisterListener.ProtoReflect.Descriptor instead.
func (*ListenForConnectionsRequest_RegisterListener) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ListenForConnectionsRequest_RegisterListener) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListenForConnectionsRequest_RegisterListener) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListenForConnectionsRequest_RegisterListener) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListenForConnectionsRequest_RegisterListener) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListenForConnectionsRequest_RegisterListener) GetDevice() *device.Reference {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *ListenForConnectionsRequest_RegisterListener) SetDevice(fv *device.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Device", "ListenForConnectionsRequest_RegisterListener"))
	}
	m.Device = fv
}

type ListenForConnectionsRequest_ChannelOpenError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// ID of the channel failed to open.
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty" firestore:"channel"`
	// Error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" firestore:"message"`
}

func (m *ListenForConnectionsRequest_ChannelOpenError) Reset() {
	*m = ListenForConnectionsRequest_ChannelOpenError{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListenForConnectionsRequest_ChannelOpenError) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListenForConnectionsRequest_ChannelOpenError) ProtoMessage() {}

func (m *ListenForConnectionsRequest_ChannelOpenError) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListenForConnectionsRequest_ChannelOpenError) GotenMessage() {}

// Deprecated, Use ListenForConnectionsRequest_ChannelOpenError.ProtoReflect.Descriptor instead.
func (*ListenForConnectionsRequest_ChannelOpenError) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ListenForConnectionsRequest_ChannelOpenError) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListenForConnectionsRequest_ChannelOpenError) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListenForConnectionsRequest_ChannelOpenError) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListenForConnectionsRequest_ChannelOpenError) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListenForConnectionsRequest_ChannelOpenError) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *ListenForConnectionsRequest_ChannelOpenError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ListenForConnectionsRequest_ChannelOpenError) SetChannel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Channel", "ListenForConnectionsRequest_ChannelOpenError"))
	}
	m.Channel = fv
}

func (m *ListenForConnectionsRequest_ChannelOpenError) SetMessage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Message", "ListenForConnectionsRequest_ChannelOpenError"))
	}
	m.Message = fv
}

type ListenForConnectionsRequest_KeepAlive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *ListenForConnectionsRequest_KeepAlive) Reset() {
	*m = ListenForConnectionsRequest_KeepAlive{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListenForConnectionsRequest_KeepAlive) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListenForConnectionsRequest_KeepAlive) ProtoMessage() {}

func (m *ListenForConnectionsRequest_KeepAlive) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListenForConnectionsRequest_KeepAlive) GotenMessage() {}

// Deprecated, Use ListenForConnectionsRequest_KeepAlive.ProtoReflect.Descriptor instead.
func (*ListenForConnectionsRequest_KeepAlive) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{0, 2}
}

func (m *ListenForConnectionsRequest_KeepAlive) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListenForConnectionsRequest_KeepAlive) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListenForConnectionsRequest_KeepAlive) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListenForConnectionsRequest_KeepAlive) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type ListenForConnectionsResponse_ChannelRequested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Channel ID
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty" firestore:"channel"`
	// Device service;
	Service BrokerServiceType `protobuf:"varint,2,opt,name=service,proto3,enum=ntt.devices.v1alpha.BrokerServiceType" json:"service,omitempty" firestore:"service"`
	// Initial argument (optional)
	Arg string `protobuf:"bytes,3,opt,name=arg,proto3" json:"arg,omitempty" firestore:"arg"`
}

func (m *ListenForConnectionsResponse_ChannelRequested) Reset() {
	*m = ListenForConnectionsResponse_ChannelRequested{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListenForConnectionsResponse_ChannelRequested) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListenForConnectionsResponse_ChannelRequested) ProtoMessage() {}

func (m *ListenForConnectionsResponse_ChannelRequested) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListenForConnectionsResponse_ChannelRequested) GotenMessage() {}

// Deprecated, Use ListenForConnectionsResponse_ChannelRequested.ProtoReflect.Descriptor instead.
func (*ListenForConnectionsResponse_ChannelRequested) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{1, 0}
}

func (m *ListenForConnectionsResponse_ChannelRequested) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListenForConnectionsResponse_ChannelRequested) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListenForConnectionsResponse_ChannelRequested) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListenForConnectionsResponse_ChannelRequested) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListenForConnectionsResponse_ChannelRequested) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *ListenForConnectionsResponse_ChannelRequested) GetService() BrokerServiceType {
	if m != nil {
		return m.Service
	}
	return BrokerServiceType_BROKER_SERVICE_UNSPECIFIED
}

func (m *ListenForConnectionsResponse_ChannelRequested) GetArg() string {
	if m != nil {
		return m.Arg
	}
	return ""
}

func (m *ListenForConnectionsResponse_ChannelRequested) SetChannel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Channel", "ListenForConnectionsResponse_ChannelRequested"))
	}
	m.Channel = fv
}

func (m *ListenForConnectionsResponse_ChannelRequested) SetService(fv BrokerServiceType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "ListenForConnectionsResponse_ChannelRequested"))
	}
	m.Service = fv
}

func (m *ListenForConnectionsResponse_ChannelRequested) SetArg(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Arg", "ListenForConnectionsResponse_ChannelRequested"))
	}
	m.Arg = fv
}

type OpenConnectionChannelSocketRequest_RegisterSocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Device name, to be authenticated/authorized.
	Device *device.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=device,proto3" json:"device,omitempty" firestore:"device"`
	// Channel ID, requested by the endpoint in the ChannelRequested message.
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty" firestore:"channel"`
}

func (m *OpenConnectionChannelSocketRequest_RegisterSocket) Reset() {
	*m = OpenConnectionChannelSocketRequest_RegisterSocket{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *OpenConnectionChannelSocketRequest_RegisterSocket) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*OpenConnectionChannelSocketRequest_RegisterSocket) ProtoMessage() {}

func (m *OpenConnectionChannelSocketRequest_RegisterSocket) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*OpenConnectionChannelSocketRequest_RegisterSocket) GotenMessage() {}

// Deprecated, Use OpenConnectionChannelSocketRequest_RegisterSocket.ProtoReflect.Descriptor instead.
func (*OpenConnectionChannelSocketRequest_RegisterSocket) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{2, 0}
}

func (m *OpenConnectionChannelSocketRequest_RegisterSocket) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *OpenConnectionChannelSocketRequest_RegisterSocket) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *OpenConnectionChannelSocketRequest_RegisterSocket) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *OpenConnectionChannelSocketRequest_RegisterSocket) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *OpenConnectionChannelSocketRequest_RegisterSocket) GetDevice() *device.Reference {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *OpenConnectionChannelSocketRequest_RegisterSocket) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *OpenConnectionChannelSocketRequest_RegisterSocket) SetDevice(fv *device.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Device", "OpenConnectionChannelSocketRequest_RegisterSocket"))
	}
	m.Device = fv
}

func (m *OpenConnectionChannelSocketRequest_RegisterSocket) SetChannel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Channel", "OpenConnectionChannelSocketRequest_RegisterSocket"))
	}
	m.Channel = fv
}

type ConnectToDeviceRequest_OpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Device name to connect.
	Device *device.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=device,proto3" json:"device,omitempty" firestore:"device"`
	// Device service
	Service BrokerServiceType `protobuf:"varint,2,opt,name=service,proto3,enum=ntt.devices.v1alpha.BrokerServiceType" json:"service,omitempty" firestore:"service"`
	// Initial argument (optional)
	Arg string `protobuf:"bytes,3,opt,name=arg,proto3" json:"arg,omitempty" firestore:"arg"`
}

func (m *ConnectToDeviceRequest_OpenRequest) Reset() {
	*m = ConnectToDeviceRequest_OpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConnectToDeviceRequest_OpenRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConnectToDeviceRequest_OpenRequest) ProtoMessage() {}

func (m *ConnectToDeviceRequest_OpenRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConnectToDeviceRequest_OpenRequest) GotenMessage() {}

// Deprecated, Use ConnectToDeviceRequest_OpenRequest.ProtoReflect.Descriptor instead.
func (*ConnectToDeviceRequest_OpenRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{4, 0}
}

func (m *ConnectToDeviceRequest_OpenRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConnectToDeviceRequest_OpenRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConnectToDeviceRequest_OpenRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConnectToDeviceRequest_OpenRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ConnectToDeviceRequest_OpenRequest) GetDevice() *device.Reference {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *ConnectToDeviceRequest_OpenRequest) GetService() BrokerServiceType {
	if m != nil {
		return m.Service
	}
	return BrokerServiceType_BROKER_SERVICE_UNSPECIFIED
}

func (m *ConnectToDeviceRequest_OpenRequest) GetArg() string {
	if m != nil {
		return m.Arg
	}
	return ""
}

func (m *ConnectToDeviceRequest_OpenRequest) SetDevice(fv *device.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Device", "ConnectToDeviceRequest_OpenRequest"))
	}
	m.Device = fv
}

func (m *ConnectToDeviceRequest_OpenRequest) SetService(fv BrokerServiceType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "ConnectToDeviceRequest_OpenRequest"))
	}
	m.Service = fv
}

func (m *ConnectToDeviceRequest_OpenRequest) SetArg(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Arg", "ConnectToDeviceRequest_OpenRequest"))
	}
	m.Arg = fv
}

type ConnectToDeviceRequest_KeepAlive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *ConnectToDeviceRequest_KeepAlive) Reset() {
	*m = ConnectToDeviceRequest_KeepAlive{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConnectToDeviceRequest_KeepAlive) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConnectToDeviceRequest_KeepAlive) ProtoMessage() {}

func (m *ConnectToDeviceRequest_KeepAlive) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConnectToDeviceRequest_KeepAlive) GotenMessage() {}

// Deprecated, Use ConnectToDeviceRequest_KeepAlive.ProtoReflect.Descriptor instead.
func (*ConnectToDeviceRequest_KeepAlive) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{4, 1}
}

func (m *ConnectToDeviceRequest_KeepAlive) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConnectToDeviceRequest_KeepAlive) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConnectToDeviceRequest_KeepAlive) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConnectToDeviceRequest_KeepAlive) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type ConnectToDeviceResponse_OpenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *ConnectToDeviceResponse_OpenResponse) Reset() {
	*m = ConnectToDeviceResponse_OpenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConnectToDeviceResponse_OpenResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConnectToDeviceResponse_OpenResponse) ProtoMessage() {}

func (m *ConnectToDeviceResponse_OpenResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConnectToDeviceResponse_OpenResponse) GotenMessage() {}

// Deprecated, Use ConnectToDeviceResponse_OpenResponse.ProtoReflect.Descriptor instead.
func (*ConnectToDeviceResponse_OpenResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{5, 0}
}

func (m *ConnectToDeviceResponse_OpenResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConnectToDeviceResponse_OpenResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConnectToDeviceResponse_OpenResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConnectToDeviceResponse_OpenResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type SSHService_Hello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	User          string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" firestore:"user"`
	Command       []string `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty" firestore:"command"`
}

func (m *SSHService_Hello) Reset() {
	*m = SSHService_Hello{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SSHService_Hello) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SSHService_Hello) ProtoMessage() {}

func (m *SSHService_Hello) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SSHService_Hello) GotenMessage() {}

// Deprecated, Use SSHService_Hello.ProtoReflect.Descriptor instead.
func (*SSHService_Hello) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{7, 0}
}

func (m *SSHService_Hello) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SSHService_Hello) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SSHService_Hello) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SSHService_Hello) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SSHService_Hello) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *SSHService_Hello) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *SSHService_Hello) SetUser(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "User", "SSHService_Hello"))
	}
	m.User = fv
}

func (m *SSHService_Hello) SetCommand(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Command", "SSHService_Hello"))
	}
	m.Command = fv
}

type SSHService_TerminalSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Width         uint32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty" firestore:"width"`
	Height        uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty" firestore:"height"`
}

func (m *SSHService_TerminalSize) Reset() {
	*m = SSHService_TerminalSize{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SSHService_TerminalSize) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SSHService_TerminalSize) ProtoMessage() {}

func (m *SSHService_TerminalSize) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SSHService_TerminalSize) GotenMessage() {}

// Deprecated, Use SSHService_TerminalSize.ProtoReflect.Descriptor instead.
func (*SSHService_TerminalSize) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{7, 1}
}

func (m *SSHService_TerminalSize) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SSHService_TerminalSize) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SSHService_TerminalSize) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SSHService_TerminalSize) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SSHService_TerminalSize) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return uint32(0)
}

func (m *SSHService_TerminalSize) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return uint32(0)
}

func (m *SSHService_TerminalSize) SetWidth(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Width", "SSHService_TerminalSize"))
	}
	m.Width = fv
}

func (m *SSHService_TerminalSize) SetHeight(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Height", "SSHService_TerminalSize"))
	}
	m.Height = fv
}

type SSHService_ClientOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*SSHService_ClientOut_Data
	//	*SSHService_ClientOut_SshHello
	//	*SSHService_ClientOut_SshResizeTerminal
	Msg isSSHService_ClientOut_Msg `protobuf_oneof:"msg"`
}

func (m *SSHService_ClientOut) Reset() {
	*m = SSHService_ClientOut{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SSHService_ClientOut) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SSHService_ClientOut) ProtoMessage() {}

func (m *SSHService_ClientOut) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SSHService_ClientOut) GotenMessage() {}

// Deprecated, Use SSHService_ClientOut.ProtoReflect.Descriptor instead.
func (*SSHService_ClientOut) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{7, 2}
}

func (m *SSHService_ClientOut) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SSHService_ClientOut) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SSHService_ClientOut) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SSHService_ClientOut) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isSSHService_ClientOut_Msg interface {
	isSSHService_ClientOut_Msg()
}

type SSHService_ClientOut_Data struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3,oneof" firestore:"data"`
}
type SSHService_ClientOut_SshHello struct {
	SshHello *SSHService_Hello `protobuf:"bytes,2,opt,name=ssh_hello,json=sshHello,proto3,oneof" firestore:"sshHello"`
}
type SSHService_ClientOut_SshResizeTerminal struct {
	SshResizeTerminal *SSHService_TerminalSize `protobuf:"bytes,3,opt,name=ssh_resize_terminal,json=sshResizeTerminal,proto3,oneof" firestore:"sshResizeTerminal"`
}

func (*SSHService_ClientOut_Data) isSSHService_ClientOut_Msg()              {}
func (*SSHService_ClientOut_SshHello) isSSHService_ClientOut_Msg()          {}
func (*SSHService_ClientOut_SshResizeTerminal) isSSHService_ClientOut_Msg() {}
func (m *SSHService_ClientOut) GetMsg() isSSHService_ClientOut_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *SSHService_ClientOut) GetData() []byte {
	if x, ok := m.GetMsg().(*SSHService_ClientOut_Data); ok {
		return x.Data
	}
	return nil
}
func (m *SSHService_ClientOut) GetSshHello() *SSHService_Hello {
	if x, ok := m.GetMsg().(*SSHService_ClientOut_SshHello); ok {
		return x.SshHello
	}
	return nil
}
func (m *SSHService_ClientOut) GetSshResizeTerminal() *SSHService_TerminalSize {
	if x, ok := m.GetMsg().(*SSHService_ClientOut_SshResizeTerminal); ok {
		return x.SshResizeTerminal
	}
	return nil
}
func (m *SSHService_ClientOut) SetMsg(ofv isSSHService_ClientOut_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isSSHService_ClientOut_Msg", "SSHService_ClientOut"))
	}
	m.Msg = ofv
}
func (m *SSHService_ClientOut) SetData(fv []byte) {
	m.SetMsg(&SSHService_ClientOut_Data{Data: fv})
}
func (m *SSHService_ClientOut) SetSshHello(fv *SSHService_Hello) {
	m.SetMsg(&SSHService_ClientOut_SshHello{SshHello: fv})
}
func (m *SSHService_ClientOut) SetSshResizeTerminal(fv *SSHService_TerminalSize) {
	m.SetMsg(&SSHService_ClientOut_SshResizeTerminal{SshResizeTerminal: fv})
}

type SSHService_ClientIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*SSHService_ClientIn_Data
	Msg isSSHService_ClientIn_Msg `protobuf_oneof:"msg"`
}

func (m *SSHService_ClientIn) Reset() {
	*m = SSHService_ClientIn{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SSHService_ClientIn) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SSHService_ClientIn) ProtoMessage() {}

func (m *SSHService_ClientIn) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SSHService_ClientIn) GotenMessage() {}

// Deprecated, Use SSHService_ClientIn.ProtoReflect.Descriptor instead.
func (*SSHService_ClientIn) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{7, 3}
}

func (m *SSHService_ClientIn) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SSHService_ClientIn) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SSHService_ClientIn) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SSHService_ClientIn) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isSSHService_ClientIn_Msg interface {
	isSSHService_ClientIn_Msg()
}

type SSHService_ClientIn_Data struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3,oneof" firestore:"data"`
}

func (*SSHService_ClientIn_Data) isSSHService_ClientIn_Msg() {}
func (m *SSHService_ClientIn) GetMsg() isSSHService_ClientIn_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *SSHService_ClientIn) GetData() []byte {
	if x, ok := m.GetMsg().(*SSHService_ClientIn_Data); ok {
		return x.Data
	}
	return nil
}
func (m *SSHService_ClientIn) SetMsg(ofv isSSHService_ClientIn_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isSSHService_ClientIn_Msg", "SSHService_ClientIn"))
	}
	m.Msg = ofv
}
func (m *SSHService_ClientIn) SetData(fv []byte) {
	m.SetMsg(&SSHService_ClientIn_Data{Data: fv})
}

type SCPService_Configure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Recursive     bool                           `protobuf:"varint,1,opt,name=recursive,proto3" json:"recursive,omitempty" firestore:"recursive"`
	Direction     SCPService_Configure_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=ntt.devices.v1alpha.SCPService_Configure_Direction" json:"direction,omitempty" firestore:"direction"`
	Path          string                         `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty" firestore:"path"`
}

func (m *SCPService_Configure) Reset() {
	*m = SCPService_Configure{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SCPService_Configure) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SCPService_Configure) ProtoMessage() {}

func (m *SCPService_Configure) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SCPService_Configure) GotenMessage() {}

// Deprecated, Use SCPService_Configure.ProtoReflect.Descriptor instead.
func (*SCPService_Configure) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{8, 0}
}

func (m *SCPService_Configure) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SCPService_Configure) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SCPService_Configure) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SCPService_Configure) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SCPService_Configure) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

func (m *SCPService_Configure) GetDirection() SCPService_Configure_Direction {
	if m != nil {
		return m.Direction
	}
	return SCPService_Configure_DOWNLOAD
}

func (m *SCPService_Configure) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SCPService_Configure) SetRecursive(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Recursive", "SCPService_Configure"))
	}
	m.Recursive = fv
}

func (m *SCPService_Configure) SetDirection(fv SCPService_Configure_Direction) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Direction", "SCPService_Configure"))
	}
	m.Direction = fv
}

func (m *SCPService_Configure) SetPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Path", "SCPService_Configure"))
	}
	m.Path = fv
}

type SCPService_CreateDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty" firestore:"path"`
	Mode          uint32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty" firestore:"mode"`
}

func (m *SCPService_CreateDirectory) Reset() {
	*m = SCPService_CreateDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SCPService_CreateDirectory) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SCPService_CreateDirectory) ProtoMessage() {}

func (m *SCPService_CreateDirectory) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SCPService_CreateDirectory) GotenMessage() {}

// Deprecated, Use SCPService_CreateDirectory.ProtoReflect.Descriptor instead.
func (*SCPService_CreateDirectory) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{8, 1}
}

func (m *SCPService_CreateDirectory) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SCPService_CreateDirectory) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SCPService_CreateDirectory) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SCPService_CreateDirectory) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SCPService_CreateDirectory) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SCPService_CreateDirectory) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return uint32(0)
}

func (m *SCPService_CreateDirectory) SetPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Path", "SCPService_CreateDirectory"))
	}
	m.Path = fv
}

func (m *SCPService_CreateDirectory) SetMode(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "SCPService_CreateDirectory"))
	}
	m.Mode = fv
}

type SCPService_CreateFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Msg:
	//	*SCPService_CreateFile_Init
	//	*SCPService_CreateFile_Data
	//	*SCPService_CreateFile_Eof
	Msg isSCPService_CreateFile_Msg `protobuf_oneof:"msg"`
}

func (m *SCPService_CreateFile) Reset() {
	*m = SCPService_CreateFile{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SCPService_CreateFile) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SCPService_CreateFile) ProtoMessage() {}

func (m *SCPService_CreateFile) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SCPService_CreateFile) GotenMessage() {}

// Deprecated, Use SCPService_CreateFile.ProtoReflect.Descriptor instead.
func (*SCPService_CreateFile) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{8, 2}
}

func (m *SCPService_CreateFile) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SCPService_CreateFile) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SCPService_CreateFile) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SCPService_CreateFile) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isSCPService_CreateFile_Msg interface {
	isSCPService_CreateFile_Msg()
}

type SCPService_CreateFile_Init struct {
	// Request file initialization
	Init *SCPService_CreateFile_Initialize `protobuf:"bytes,1,opt,name=init,proto3,oneof" firestore:"init"`
}
type SCPService_CreateFile_Data struct {
	// Request file data
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof" firestore:"data"`
}
type SCPService_CreateFile_Eof struct {
	// Request to end file transfer
	Eof bool `protobuf:"varint,3,opt,name=eof,proto3,oneof" firestore:"eof"`
}

func (*SCPService_CreateFile_Init) isSCPService_CreateFile_Msg() {}
func (*SCPService_CreateFile_Data) isSCPService_CreateFile_Msg() {}
func (*SCPService_CreateFile_Eof) isSCPService_CreateFile_Msg()  {}
func (m *SCPService_CreateFile) GetMsg() isSCPService_CreateFile_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}
func (m *SCPService_CreateFile) GetInit() *SCPService_CreateFile_Initialize {
	if x, ok := m.GetMsg().(*SCPService_CreateFile_Init); ok {
		return x.Init
	}
	return nil
}
func (m *SCPService_CreateFile) GetData() []byte {
	if x, ok := m.GetMsg().(*SCPService_CreateFile_Data); ok {
		return x.Data
	}
	return nil
}
func (m *SCPService_CreateFile) GetEof() bool {
	if x, ok := m.GetMsg().(*SCPService_CreateFile_Eof); ok {
		return x.Eof
	}
	return false
}
func (m *SCPService_CreateFile) SetMsg(ofv isSCPService_CreateFile_Msg) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isSCPService_CreateFile_Msg", "SCPService_CreateFile"))
	}
	m.Msg = ofv
}
func (m *SCPService_CreateFile) SetInit(fv *SCPService_CreateFile_Initialize) {
	m.SetMsg(&SCPService_CreateFile_Init{Init: fv})
}
func (m *SCPService_CreateFile) SetData(fv []byte) {
	m.SetMsg(&SCPService_CreateFile_Data{Data: fv})
}
func (m *SCPService_CreateFile) SetEof(fv bool) {
	m.SetMsg(&SCPService_CreateFile_Eof{Eof: fv})
}

type SCPService_CreateFile_Initialize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty" firestore:"path"`
	Mode          uint32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty" firestore:"mode"`
	Size          uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty" firestore:"size"`
}

func (m *SCPService_CreateFile_Initialize) Reset() {
	*m = SCPService_CreateFile_Initialize{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SCPService_CreateFile_Initialize) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SCPService_CreateFile_Initialize) ProtoMessage() {}

func (m *SCPService_CreateFile_Initialize) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SCPService_CreateFile_Initialize) GotenMessage() {}

// Deprecated, Use SCPService_CreateFile_Initialize.ProtoReflect.Descriptor instead.
func (*SCPService_CreateFile_Initialize) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{8, 2, 0}
}

func (m *SCPService_CreateFile_Initialize) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SCPService_CreateFile_Initialize) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SCPService_CreateFile_Initialize) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SCPService_CreateFile_Initialize) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SCPService_CreateFile_Initialize) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SCPService_CreateFile_Initialize) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return uint32(0)
}

func (m *SCPService_CreateFile_Initialize) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return uint64(0)
}

func (m *SCPService_CreateFile_Initialize) SetPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Path", "SCPService_CreateFile_Initialize"))
	}
	m.Path = fv
}

func (m *SCPService_CreateFile_Initialize) SetMode(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "SCPService_CreateFile_Initialize"))
	}
	m.Mode = fv
}

func (m *SCPService_CreateFile_Initialize) SetSize(fv uint64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Size", "SCPService_CreateFile_Initialize"))
	}
	m.Size = fv
}

// Messages sent only to a device
type LogsService_ToDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Live follow the logs service
	Follow bool `protobuf:"varint,1,opt,name=follow,proto3" json:"follow,omitempty" firestore:"follow"`
	// Number of lines to get from the logs service
	Lines uint32 `protobuf:"varint,2,opt,name=lines,proto3" json:"lines,omitempty" firestore:"lines"`
	// Source of the logs service (e.g. docker container ID)
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty" firestore:"source"`
}

func (m *LogsService_ToDevice) Reset() {
	*m = LogsService_ToDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogsService_ToDevice) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogsService_ToDevice) ProtoMessage() {}

func (m *LogsService_ToDevice) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogsService_ToDevice) GotenMessage() {}

// Deprecated, Use LogsService_ToDevice.ProtoReflect.Descriptor instead.
func (*LogsService_ToDevice) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{9, 0}
}

func (m *LogsService_ToDevice) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogsService_ToDevice) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogsService_ToDevice) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogsService_ToDevice) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogsService_ToDevice) GetFollow() bool {
	if m != nil {
		return m.Follow
	}
	return false
}

func (m *LogsService_ToDevice) GetLines() uint32 {
	if m != nil {
		return m.Lines
	}
	return uint32(0)
}

func (m *LogsService_ToDevice) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *LogsService_ToDevice) SetFollow(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Follow", "LogsService_ToDevice"))
	}
	m.Follow = fv
}

func (m *LogsService_ToDevice) SetLines(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Lines", "LogsService_ToDevice"))
	}
	m.Lines = fv
}

func (m *LogsService_ToDevice) SetSource(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Source", "LogsService_ToDevice"))
	}
	m.Source = fv
}

// Messages sent only to a client
type LogsService_ToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Logs data
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" firestore:"data"`
}

func (m *LogsService_ToClient) Reset() {
	*m = LogsService_ToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LogsService_ToClient) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LogsService_ToClient) ProtoMessage() {}

func (m *LogsService_ToClient) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LogsService_ToClient) GotenMessage() {}

// Deprecated, Use LogsService_ToClient.ProtoReflect.Descriptor instead.
func (*LogsService_ToClient) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP(), []int{9, 1}
}

func (m *LogsService_ToClient) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LogsService_ToClient) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LogsService_ToClient) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LogsService_ToClient) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LogsService_ToClient) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LogsService_ToClient) SetData(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Data", "LogsService_ToClient"))
	}
	m.Data = fv
}

var edgelq_devices_proto_v1alpha_broker_custom_proto preflect.FileDescriptor

var edgelq_devices_proto_v1alpha_broker_custom_proto_rawDesc = []byte{
	0x0a, 0x30, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd6, 0x04, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x70, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x1a, 0x3a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x12, 0x08, 0x0a,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x46, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0b, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x3a, 0x5d, 0xfa, 0xde, 0x21, 0x21, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x18, 0x02, 0xc2, 0x85, 0x2c, 0x34, 0x32,
	0x18, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x18, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xc3, 0x02, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x11, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x1a, 0x80,
	0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x40, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72,
	0x67, 0x3a, 0x26, 0xfa, 0xde, 0x21, 0x22, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x46,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x01, 0x18, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0xb0, 0x03, 0x0a, 0x22, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x1a, 0x52, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x12, 0x08,
	0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x60, 0xfa, 0xde, 0x21, 0x28,
	0x0a, 0x22, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x18, 0x02, 0xc2, 0x85, 0x2c, 0x30, 0x32, 0x16, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x3a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x05, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x9f, 0x01, 0x0a, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x3a,
	0x2d, 0xfa, 0xde, 0x21, 0x29, 0x0a, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x01, 0x18, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x82, 0x04, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5c, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61,
	0x63, 0x6b, 0x12, 0x56, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x1a, 0x89, 0x01, 0x0a, 0x0b, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a,
	0x12, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x72, 0x67, 0x1a, 0x0b, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x3a, 0x4e, 0xfa, 0xde, 0x21, 0x1c, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x10, 0x01, 0x18, 0x02, 0xc2, 0x85, 0x2c, 0x2a, 0x32, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x13,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x91, 0x02, 0x0a, 0x17, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x03, 0x61, 0x63, 0x6b, 0x1a, 0x0e, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x21, 0xfa, 0xde, 0x21, 0x1d, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x01, 0x18, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x2e,
	0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x3a, 0x09, 0xfa, 0xde, 0x21, 0x05, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x22, 0xab,
	0x03, 0x0a, 0x0a, 0x53, 0x53, 0x48, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x3b, 0x0a,
	0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x04, 0xe8, 0xde, 0x21, 0x00, 0x1a, 0x42, 0x0a, 0x0c, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x04, 0xe8, 0xde, 0x21, 0x00, 0x1a, 0xd4,
	0x01, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x44, 0x0a, 0x09, 0x73, 0x73, 0x68, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x53, 0x48, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x73, 0x68, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x5e, 0x0a, 0x13, 0x73, 0x73, 0x68, 0x5f,
	0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x53, 0x48, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x73, 0x68, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x3a, 0x04, 0xe8, 0xde, 0x21, 0x00, 0x42, 0x05,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x1a, 0x2d, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x04, 0xe8, 0xde, 0x21, 0x00, 0x42, 0x05, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x3a, 0x16, 0xe8, 0xde, 0x21, 0x00, 0xfa, 0xde, 0x21, 0x0e, 0x0a, 0x0a,
	0x53, 0x53, 0x48, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x01, 0x22, 0xef, 0x05, 0x0a,
	0x0a, 0x53, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x03, 0x64,
	0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x03, 0x64, 0x69, 0x72,
	0x12, 0x40, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x03, 0x65, 0x6f, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x43, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xbd, 0x01, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x25,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x4c,
	0x4f, 0x41, 0x44, 0x10, 0x01, 0x3a, 0x04, 0xe8, 0xde, 0x21, 0x00, 0x1a, 0x3f, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x3a, 0x04, 0xe8, 0xde, 0x21, 0x00, 0x1a, 0xe0, 0x01, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x69,
	0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x03, 0x65, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x65,
	0x6f, 0x66, 0x1a, 0x4e, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x04, 0xe8, 0xde,
	0x21, 0x00, 0x3a, 0x04, 0xe8, 0xde, 0x21, 0x00, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x3a,
	0x16, 0xe8, 0xde, 0x21, 0x00, 0xfa, 0xde, 0x21, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x50, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xa4,
	0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x56,
	0x0a, 0x08, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x3a, 0x04, 0xe8, 0xde, 0x21, 0x00, 0x1a, 0x24, 0x0a, 0x08, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x04, 0xe8, 0xde, 0x21, 0x00, 0x3a, 0x17, 0xe8, 0xde,
	0x21, 0x00, 0xfa, 0xde, 0x21, 0x0f, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x10, 0x01, 0x22, 0xd7, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x64, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x64, 0x22, 0x3d,
	0x0a, 0x08, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x03, 0x3a, 0x20, 0xe8,
	0xde, 0x21, 0x00, 0xfa, 0xde, 0x21, 0x18, 0x0a, 0x14, 0x50, 0x6f, 0x64, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x01, 0x22,
	0x6e, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x02, 0x3a,
	0x1e, 0xe8, 0xde, 0x21, 0x00, 0xfa, 0xde, 0x21, 0x16, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x01, 0x2a,
	0xc3, 0x02, 0x0a, 0x11, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x53, 0x48, 0x5f, 0x4c, 0x45, 0x47, 0x41,
	0x43, 0x59, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x53, 0x48, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f,
	0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x43, 0x50, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17,
	0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x4f,
	0x4b, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x43, 0x50, 0x10,
	0x06, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x43, 0x50, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x10, 0x07,
	0x12, 0x13, 0x0a, 0x0f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x4c,
	0x4f, 0x47, 0x53, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f,
	0x41, 0x50, 0x50, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x52,
	0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x0a, 0x42, 0xa1, 0x02, 0xe8, 0xde, 0x21, 0x01, 0x92, 0x8c, 0xd1, 0x02,
	0x51, 0x0a, 0x11, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x11,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x00, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x3b, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1, 0x02, 0x49,
	0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12,
	0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescOnce sync.Once
	edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescData = edgelq_devices_proto_v1alpha_broker_custom_proto_rawDesc
)

func edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescGZIP() []byte {
	edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescOnce.Do(func() {
		edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescData)
	})
	return edgelq_devices_proto_v1alpha_broker_custom_proto_rawDescData
}

var edgelq_devices_proto_v1alpha_broker_custom_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var edgelq_devices_proto_v1alpha_broker_custom_proto_goTypes = []interface{}{
	(BrokerServiceType)(0),                                    // 0: ntt.devices.v1alpha.BrokerServiceType
	(SCPService_Configure_Direction)(0),                       // 1: ntt.devices.v1alpha.SCPService_Configure_Direction
	(PodManagementService_PodState)(0),                        // 2: ntt.devices.v1alpha.PodManagementService_PodState
	(SystemStateService_SystemState)(0),                       // 3: ntt.devices.v1alpha.SystemStateService_SystemState
	(*ListenForConnectionsRequest)(nil),                       // 4: ntt.devices.v1alpha.ListenForConnectionsRequest
	(*ListenForConnectionsResponse)(nil),                      // 5: ntt.devices.v1alpha.ListenForConnectionsResponse
	(*OpenConnectionChannelSocketRequest)(nil),                // 6: ntt.devices.v1alpha.OpenConnectionChannelSocketRequest
	(*OpenConnectionChannelSocketResponse)(nil),               // 7: ntt.devices.v1alpha.OpenConnectionChannelSocketResponse
	(*ConnectToDeviceRequest)(nil),                            // 8: ntt.devices.v1alpha.ConnectToDeviceRequest
	(*ConnectToDeviceResponse)(nil),                           // 9: ntt.devices.v1alpha.ConnectToDeviceResponse
	(*Ack)(nil),                                               // 10: ntt.devices.v1alpha.Ack
	(*SSHService)(nil),                                        // 11: ntt.devices.v1alpha.SSHService
	(*SCPService)(nil),                                        // 12: ntt.devices.v1alpha.SCPService
	(*LogsService)(nil),                                       // 13: ntt.devices.v1alpha.LogsService
	(*PodManagementService)(nil),                              // 14: ntt.devices.v1alpha.PodManagementService
	(*SystemStateService)(nil),                                // 15: ntt.devices.v1alpha.SystemStateService
	(*ListenForConnectionsRequest_RegisterListener)(nil),      // 16: ntt.devices.v1alpha.ListenForConnectionsRequest.RegisterListener
	(*ListenForConnectionsRequest_ChannelOpenError)(nil),      // 17: ntt.devices.v1alpha.ListenForConnectionsRequest.ChannelOpenError
	(*ListenForConnectionsRequest_KeepAlive)(nil),             // 18: ntt.devices.v1alpha.ListenForConnectionsRequest.KeepAlive
	(*ListenForConnectionsResponse_ChannelRequested)(nil),     // 19: ntt.devices.v1alpha.ListenForConnectionsResponse.ChannelRequested
	(*OpenConnectionChannelSocketRequest_RegisterSocket)(nil), // 20: ntt.devices.v1alpha.OpenConnectionChannelSocketRequest.RegisterSocket
	(*ConnectToDeviceRequest_OpenRequest)(nil),                // 21: ntt.devices.v1alpha.ConnectToDeviceRequest.OpenRequest
	(*ConnectToDeviceRequest_KeepAlive)(nil),                  // 22: ntt.devices.v1alpha.ConnectToDeviceRequest.KeepAlive
	(*ConnectToDeviceResponse_OpenResponse)(nil),              // 23: ntt.devices.v1alpha.ConnectToDeviceResponse.OpenResponse
	(*SSHService_Hello)(nil),                                  // 24: ntt.devices.v1alpha.SSHService.Hello
	(*SSHService_TerminalSize)(nil),                           // 25: ntt.devices.v1alpha.SSHService.TerminalSize
	(*SSHService_ClientOut)(nil),                              // 26: ntt.devices.v1alpha.SSHService.ClientOut
	(*SSHService_ClientIn)(nil),                               // 27: ntt.devices.v1alpha.SSHService.ClientIn
	(*SCPService_Configure)(nil),                              // 28: ntt.devices.v1alpha.SCPService.Configure
	(*SCPService_CreateDirectory)(nil),                        // 29: ntt.devices.v1alpha.SCPService.CreateDirectory
	(*SCPService_CreateFile)(nil),                             // 30: ntt.devices.v1alpha.SCPService.CreateFile
	(*SCPService_CreateFile_Initialize)(nil),                  // 31: ntt.devices.v1alpha.SCPService.CreateFile.Initialize
	(*LogsService_ToDevice)(nil),                              // 32: ntt.devices.v1alpha.LogsService.ToDevice
	(*LogsService_ToClient)(nil),                              // 33: ntt.devices.v1alpha.LogsService.ToClient
}
var edgelq_devices_proto_v1alpha_broker_custom_proto_depIdxs = []int32{
	16, // 0: ntt.devices.v1alpha.ListenForConnectionsRequest.register_listener:type_name -> ntt.devices.v1alpha.ListenForConnectionsRequest.RegisterListener
	17, // 1: ntt.devices.v1alpha.ListenForConnectionsRequest.channel_open_error:type_name -> ntt.devices.v1alpha.ListenForConnectionsRequest.ChannelOpenError
	18, // 2: ntt.devices.v1alpha.ListenForConnectionsRequest.keep_alive:type_name -> ntt.devices.v1alpha.ListenForConnectionsRequest.KeepAlive
	19, // 3: ntt.devices.v1alpha.ListenForConnectionsResponse.channel_requested:type_name -> ntt.devices.v1alpha.ListenForConnectionsResponse.ChannelRequested
	20, // 4: ntt.devices.v1alpha.OpenConnectionChannelSocketRequest.register_socket:type_name -> ntt.devices.v1alpha.OpenConnectionChannelSocketRequest.RegisterSocket
	10, // 5: ntt.devices.v1alpha.OpenConnectionChannelSocketRequest.ack:type_name -> ntt.devices.v1alpha.Ack
	10, // 6: ntt.devices.v1alpha.OpenConnectionChannelSocketResponse.ack:type_name -> ntt.devices.v1alpha.Ack
	21, // 7: ntt.devices.v1alpha.ConnectToDeviceRequest.open_request:type_name -> ntt.devices.v1alpha.ConnectToDeviceRequest.OpenRequest
	10, // 8: ntt.devices.v1alpha.ConnectToDeviceRequest.ack:type_name -> ntt.devices.v1alpha.Ack
	22, // 9: ntt.devices.v1alpha.ConnectToDeviceRequest.keep_alive:type_name -> ntt.devices.v1alpha.ConnectToDeviceRequest.KeepAlive
	23, // 10: ntt.devices.v1alpha.ConnectToDeviceResponse.open_response:type_name -> ntt.devices.v1alpha.ConnectToDeviceResponse.OpenResponse
	10, // 11: ntt.devices.v1alpha.ConnectToDeviceResponse.ack:type_name -> ntt.devices.v1alpha.Ack
	29, // 12: ntt.devices.v1alpha.SCPService.dir:type_name -> ntt.devices.v1alpha.SCPService.CreateDirectory
	30, // 13: ntt.devices.v1alpha.SCPService.file:type_name -> ntt.devices.v1alpha.SCPService.CreateFile
	28, // 14: ntt.devices.v1alpha.SCPService.config:type_name -> ntt.devices.v1alpha.SCPService.Configure
	2,  // 15: ntt.devices.v1alpha.PodManagementService.command:type_name -> ntt.devices.v1alpha.PodManagementService_PodState
	0,  // 16: ntt.devices.v1alpha.ListenForConnectionsResponse.ChannelRequested.service:type_name -> ntt.devices.v1alpha.BrokerServiceType
	0,  // 17: ntt.devices.v1alpha.ConnectToDeviceRequest.OpenRequest.service:type_name -> ntt.devices.v1alpha.BrokerServiceType
	24, // 18: ntt.devices.v1alpha.SSHService.ClientOut.ssh_hello:type_name -> ntt.devices.v1alpha.SSHService.Hello
	25, // 19: ntt.devices.v1alpha.SSHService.ClientOut.ssh_resize_terminal:type_name -> ntt.devices.v1alpha.SSHService.TerminalSize
	1,  // 20: ntt.devices.v1alpha.SCPService.Configure.direction:type_name -> ntt.devices.v1alpha.SCPService_Configure_Direction
	31, // 21: ntt.devices.v1alpha.SCPService.CreateFile.init:type_name -> ntt.devices.v1alpha.SCPService.CreateFile.Initialize
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { edgelq_devices_proto_v1alpha_broker_custom_proto_init() }
func edgelq_devices_proto_v1alpha_broker_custom_proto_init() {
	if edgelq_devices_proto_v1alpha_broker_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenForConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenForConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenConnectionChannelSocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenConnectionChannelSocketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectToDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectToDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCPService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodManagementService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStateService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenForConnectionsRequest_RegisterListener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenForConnectionsRequest_ChannelOpenError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenForConnectionsRequest_KeepAlive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenForConnectionsResponse_ChannelRequested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenConnectionChannelSocketRequest_RegisterSocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectToDeviceRequest_OpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectToDeviceRequest_KeepAlive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectToDeviceResponse_OpenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHService_Hello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHService_TerminalSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHService_ClientOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHService_ClientIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCPService_Configure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCPService_CreateDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCPService_CreateFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCPService_CreateFile_Initialize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsService_ToDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsService_ToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ListenForConnectionsRequest_RegisterListener_)(nil),
		(*ListenForConnectionsRequest_ChannelOpenError_)(nil),
		(*ListenForConnectionsRequest_KeepAlive_)(nil),
	}
	edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ListenForConnectionsResponse_ChannelRequested_)(nil),
	}
	edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*OpenConnectionChannelSocketRequest_RegisterSocket_)(nil),
		(*OpenConnectionChannelSocketRequest_Data)(nil),
		(*OpenConnectionChannelSocketRequest_Error)(nil),
		(*OpenConnectionChannelSocketRequest_Ack)(nil),
	}
	edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*OpenConnectionChannelSocketResponse_Data)(nil),
		(*OpenConnectionChannelSocketResponse_Ack)(nil),
	}
	edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ConnectToDeviceRequest_OpenRequest_)(nil),
		(*ConnectToDeviceRequest_Data)(nil),
		(*ConnectToDeviceRequest_Ack)(nil),
		(*ConnectToDeviceRequest_KeepAlive_)(nil),
	}
	edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ConnectToDeviceResponse_OpenResponse_)(nil),
		(*ConnectToDeviceResponse_Data)(nil),
		(*ConnectToDeviceResponse_Error)(nil),
		(*ConnectToDeviceResponse_Ack)(nil),
	}
	edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SCPService_Dir)(nil),
		(*SCPService_File)(nil),
		(*SCPService_Eot)(nil),
		(*SCPService_Config)(nil),
	}
	edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*SSHService_ClientOut_Data)(nil),
		(*SSHService_ClientOut_SshHello)(nil),
		(*SSHService_ClientOut_SshResizeTerminal)(nil),
	}
	edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*SSHService_ClientIn_Data)(nil),
	}
	edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*SCPService_CreateFile_Init)(nil),
		(*SCPService_CreateFile_Data)(nil),
		(*SCPService_CreateFile_Eof)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_devices_proto_v1alpha_broker_custom_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_devices_proto_v1alpha_broker_custom_proto_goTypes,
		DependencyIndexes: edgelq_devices_proto_v1alpha_broker_custom_proto_depIdxs,
		EnumInfos:         edgelq_devices_proto_v1alpha_broker_custom_proto_enumTypes,
		MessageInfos:      edgelq_devices_proto_v1alpha_broker_custom_proto_msgTypes,
	}.Build()
	edgelq_devices_proto_v1alpha_broker_custom_proto = out.File
	edgelq_devices_proto_v1alpha_broker_custom_proto_rawDesc = nil
	edgelq_devices_proto_v1alpha_broker_custom_proto_goTypes = nil
	edgelq_devices_proto_v1alpha_broker_custom_proto_depIdxs = nil
}
