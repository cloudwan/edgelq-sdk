// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha/broker_custom.proto
// DO NOT EDIT!!!

package broker_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/device"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListenForConnectionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListenForConnectionsRequest_FieldPathSelector
	Get(source *ListenForConnectionsRequest) []interface{}
	GetSingle(source *ListenForConnectionsRequest) (interface{}, bool)
	ClearValue(item *ListenForConnectionsRequest)

	// Those methods build corresponding ListenForConnectionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListenForConnectionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListenForConnectionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListenForConnectionsRequest_FieldPathArrayItemValue
}

type ListenForConnectionsRequest_FieldPathSelector int32

const (
	ListenForConnectionsRequest_FieldPathSelectorRegisterListener ListenForConnectionsRequest_FieldPathSelector = 0
	ListenForConnectionsRequest_FieldPathSelectorChannelOpenError ListenForConnectionsRequest_FieldPathSelector = 1
	ListenForConnectionsRequest_FieldPathSelectorKeepAlive        ListenForConnectionsRequest_FieldPathSelector = 2
)

func (s ListenForConnectionsRequest_FieldPathSelector) String() string {
	switch s {
	case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
		return "register_listener"
	case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
		return "channel_open_error"
	case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
		return "keep_alive"
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", s))
	}
}

func BuildListenForConnectionsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListenForConnectionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListenForConnectionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "register_listener", "registerListener", "register-listener":
			return &ListenForConnectionsRequest_FieldTerminalPath{selector: ListenForConnectionsRequest_FieldPathSelectorRegisterListener}, nil
		case "channel_open_error", "channelOpenError", "channel-open-error":
			return &ListenForConnectionsRequest_FieldTerminalPath{selector: ListenForConnectionsRequest_FieldPathSelectorChannelOpenError}, nil
		case "keep_alive", "keepAlive", "keep-alive":
			return &ListenForConnectionsRequest_FieldTerminalPath{selector: ListenForConnectionsRequest_FieldPathSelectorKeepAlive}, nil
		}
	} else {
		switch fp[0] {
		case "register_listener", "registerListener", "register-listener":
			if subpath, err := BuildListenForConnectionsRequestRegisterListener_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListenForConnectionsRequest_FieldSubPath{selector: ListenForConnectionsRequest_FieldPathSelectorRegisterListener, subPath: subpath}, nil
			}
		case "channel_open_error", "channelOpenError", "channel-open-error":
			if subpath, err := BuildListenForConnectionsRequestChannelOpenError_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListenForConnectionsRequest_FieldSubPath{selector: ListenForConnectionsRequest_FieldPathSelectorChannelOpenError, subPath: subpath}, nil
			}
		case "keep_alive", "keepAlive", "keep-alive":
			if subpath, err := BuildListenForConnectionsRequestKeepAlive_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListenForConnectionsRequest_FieldSubPath{selector: ListenForConnectionsRequest_FieldPathSelectorKeepAlive, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListenForConnectionsRequest", fp)
}

func ParseListenForConnectionsRequest_FieldPath(rawField string) (ListenForConnectionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListenForConnectionsRequest_FieldPath(fp)
}

func MustParseListenForConnectionsRequest_FieldPath(rawField string) ListenForConnectionsRequest_FieldPath {
	fp, err := ParseListenForConnectionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListenForConnectionsRequest_FieldTerminalPath struct {
	selector ListenForConnectionsRequest_FieldPathSelector
}

var _ ListenForConnectionsRequest_FieldPath = (*ListenForConnectionsRequest_FieldTerminalPath)(nil)

func (fp *ListenForConnectionsRequest_FieldTerminalPath) Selector() ListenForConnectionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListenForConnectionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListenForConnectionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListenForConnectionsRequest
func (fp *ListenForConnectionsRequest_FieldTerminalPath) Get(source *ListenForConnectionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
			if source, ok := source.Msg.(*ListenForConnectionsRequest_RegisterListener_); ok && source != nil {
				if source.RegisterListener != nil {
					values = append(values, source.RegisterListener)
				}
			}
		case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
			if source, ok := source.Msg.(*ListenForConnectionsRequest_ChannelOpenError_); ok && source != nil {
				if source.ChannelOpenError != nil {
					values = append(values, source.ChannelOpenError)
				}
			}
		case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
			if source, ok := source.Msg.(*ListenForConnectionsRequest_KeepAlive_); ok && source != nil {
				if source.KeepAlive != nil {
					values = append(values, source.KeepAlive)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListenForConnectionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListenForConnectionsRequest))
}

// GetSingle returns value pointed by specific field of from source ListenForConnectionsRequest
func (fp *ListenForConnectionsRequest_FieldTerminalPath) GetSingle(source *ListenForConnectionsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
		res := source.GetRegisterListener()
		return res, res != nil
	case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
		res := source.GetChannelOpenError()
		return res, res != nil
	case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
		res := source.GetKeepAlive()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListenForConnectionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListenForConnectionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
		return (*ListenForConnectionsRequest_RegisterListener)(nil)
	case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
		return (*ListenForConnectionsRequest_ChannelOpenError)(nil)
	case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
		return (*ListenForConnectionsRequest_KeepAlive)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequest_FieldTerminalPath) ClearValue(item *ListenForConnectionsRequest) {
	if item != nil {
		switch fp.selector {
		case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
			if item, ok := item.Msg.(*ListenForConnectionsRequest_RegisterListener_); ok {
				item.RegisterListener = nil
			}
		case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
			if item, ok := item.Msg.(*ListenForConnectionsRequest_ChannelOpenError_); ok {
				item.ChannelOpenError = nil
			}
		case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
			if item, ok := item.Msg.(*ListenForConnectionsRequest_KeepAlive_); ok {
				item.KeepAlive = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListenForConnectionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListenForConnectionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListenForConnectionsRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ListenForConnectionsRequest_FieldTerminalPath) WithIValue(value interface{}) ListenForConnectionsRequest_FieldPathValue {
	switch fp.selector {
	case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
		return &ListenForConnectionsRequest_FieldTerminalPathValue{ListenForConnectionsRequest_FieldTerminalPath: *fp, value: value.(*ListenForConnectionsRequest_RegisterListener)}
	case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
		return &ListenForConnectionsRequest_FieldTerminalPathValue{ListenForConnectionsRequest_FieldTerminalPath: *fp, value: value.(*ListenForConnectionsRequest_ChannelOpenError)}
	case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
		return &ListenForConnectionsRequest_FieldTerminalPathValue{ListenForConnectionsRequest_FieldTerminalPath: *fp, value: value.(*ListenForConnectionsRequest_KeepAlive)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListenForConnectionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListenForConnectionsRequest_FieldPathArrayOfValues {
	fpaov := &ListenForConnectionsRequest_FieldTerminalPathArrayOfValues{ListenForConnectionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
		return &ListenForConnectionsRequest_FieldTerminalPathArrayOfValues{ListenForConnectionsRequest_FieldTerminalPath: *fp, values: values.([]*ListenForConnectionsRequest_RegisterListener)}
	case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
		return &ListenForConnectionsRequest_FieldTerminalPathArrayOfValues{ListenForConnectionsRequest_FieldTerminalPath: *fp, values: values.([]*ListenForConnectionsRequest_ChannelOpenError)}
	case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
		return &ListenForConnectionsRequest_FieldTerminalPathArrayOfValues{ListenForConnectionsRequest_FieldTerminalPath: *fp, values: values.([]*ListenForConnectionsRequest_KeepAlive)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListenForConnectionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListenForConnectionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListenForConnectionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListenForConnectionsRequest_FieldSubPath struct {
	selector ListenForConnectionsRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListenForConnectionsRequest_FieldPath = (*ListenForConnectionsRequest_FieldSubPath)(nil)

func (fps *ListenForConnectionsRequest_FieldSubPath) Selector() ListenForConnectionsRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ListenForConnectionsRequest_FieldSubPath) AsRegisterListenerSubPath() (ListenForConnectionsRequestRegisterListener_FieldPath, bool) {
	res, ok := fps.subPath.(ListenForConnectionsRequestRegisterListener_FieldPath)
	return res, ok
}
func (fps *ListenForConnectionsRequest_FieldSubPath) AsChannelOpenErrorSubPath() (ListenForConnectionsRequestChannelOpenError_FieldPath, bool) {
	res, ok := fps.subPath.(ListenForConnectionsRequestChannelOpenError_FieldPath)
	return res, ok
}
func (fps *ListenForConnectionsRequest_FieldSubPath) AsKeepAliveSubPath() (ListenForConnectionsRequestKeepAlive_FieldPath, bool) {
	res, ok := fps.subPath.(ListenForConnectionsRequestKeepAlive_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListenForConnectionsRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListenForConnectionsRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListenForConnectionsRequest
func (fps *ListenForConnectionsRequest_FieldSubPath) Get(source *ListenForConnectionsRequest) (values []interface{}) {
	if asRegisterListenerFieldPath, ok := fps.AsRegisterListenerSubPath(); ok {
		values = append(values, asRegisterListenerFieldPath.Get(source.GetRegisterListener())...)
	} else if asChannelOpenErrorFieldPath, ok := fps.AsChannelOpenErrorSubPath(); ok {
		values = append(values, asChannelOpenErrorFieldPath.Get(source.GetChannelOpenError())...)
	} else if asKeepAliveFieldPath, ok := fps.AsKeepAliveSubPath(); ok {
		values = append(values, asKeepAliveFieldPath.Get(source.GetKeepAlive())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fps.selector))
	}
	return
}

func (fps *ListenForConnectionsRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListenForConnectionsRequest))
}

// GetSingle returns value of selected field from source ListenForConnectionsRequest
func (fps *ListenForConnectionsRequest_FieldSubPath) GetSingle(source *ListenForConnectionsRequest) (interface{}, bool) {
	switch fps.selector {
	case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
		if source.GetRegisterListener() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRegisterListener())
	case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
		if source.GetChannelOpenError() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetChannelOpenError())
	case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
		if source.GetKeepAlive() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetKeepAlive())
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fps.selector))
	}
}

func (fps *ListenForConnectionsRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListenForConnectionsRequest))
}

// GetDefault returns a default value of the field type
func (fps *ListenForConnectionsRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListenForConnectionsRequest_FieldSubPath) ClearValue(item *ListenForConnectionsRequest) {
	if item != nil {
		switch fps.selector {
		case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
			if item.Msg != nil {
				if item, ok := item.Msg.(*ListenForConnectionsRequest_RegisterListener_); ok {
					fps.subPath.ClearValueRaw(item.RegisterListener)
				}
			}
		case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
			if item.Msg != nil {
				if item, ok := item.Msg.(*ListenForConnectionsRequest_ChannelOpenError_); ok {
					fps.subPath.ClearValueRaw(item.ChannelOpenError)
				}
			}
		case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
			if item.Msg != nil {
				if item, ok := item.Msg.(*ListenForConnectionsRequest_KeepAlive_); ok {
					fps.subPath.ClearValueRaw(item.KeepAlive)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fps.selector))
		}
	}
}

func (fps *ListenForConnectionsRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListenForConnectionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListenForConnectionsRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListenForConnectionsRequest_FieldSubPath) WithIValue(value interface{}) ListenForConnectionsRequest_FieldPathValue {
	return &ListenForConnectionsRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListenForConnectionsRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListenForConnectionsRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ListenForConnectionsRequest_FieldPathArrayOfValues {
	return &ListenForConnectionsRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListenForConnectionsRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListenForConnectionsRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ListenForConnectionsRequest_FieldPathArrayItemValue {
	return &ListenForConnectionsRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListenForConnectionsRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListenForConnectionsRequest_FieldPathValue allows storing values for ListenForConnectionsRequest fields according to their type
type ListenForConnectionsRequest_FieldPathValue interface {
	ListenForConnectionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListenForConnectionsRequest)
	CompareWith(*ListenForConnectionsRequest) (cmp int, comparable bool)
}

func ParseListenForConnectionsRequest_FieldPathValue(pathStr, valueStr string) (ListenForConnectionsRequest_FieldPathValue, error) {
	fp, err := ParseListenForConnectionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListenForConnectionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListenForConnectionsRequest_FieldPathValue), nil
}

func MustParseListenForConnectionsRequest_FieldPathValue(pathStr, valueStr string) ListenForConnectionsRequest_FieldPathValue {
	fpv, err := ParseListenForConnectionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListenForConnectionsRequest_FieldTerminalPathValue struct {
	ListenForConnectionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListenForConnectionsRequest_FieldPathValue = (*ListenForConnectionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListenForConnectionsRequest' as interface{}
func (fpv *ListenForConnectionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListenForConnectionsRequest_FieldTerminalPathValue) AsRegisterListenerValue() (*ListenForConnectionsRequest_RegisterListener, bool) {
	res, ok := fpv.value.(*ListenForConnectionsRequest_RegisterListener)
	return res, ok
}
func (fpv *ListenForConnectionsRequest_FieldTerminalPathValue) AsChannelOpenErrorValue() (*ListenForConnectionsRequest_ChannelOpenError, bool) {
	res, ok := fpv.value.(*ListenForConnectionsRequest_ChannelOpenError)
	return res, ok
}
func (fpv *ListenForConnectionsRequest_FieldTerminalPathValue) AsKeepAliveValue() (*ListenForConnectionsRequest_KeepAlive, bool) {
	res, ok := fpv.value.(*ListenForConnectionsRequest_KeepAlive)
	return res, ok
}

// SetTo stores value for selected field for object ListenForConnectionsRequest
func (fpv *ListenForConnectionsRequest_FieldTerminalPathValue) SetTo(target **ListenForConnectionsRequest) {
	if *target == nil {
		*target = new(ListenForConnectionsRequest)
	}
	switch fpv.selector {
	case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
		if _, ok := (*target).Msg.(*ListenForConnectionsRequest_RegisterListener_); !ok {
			(*target).Msg = &ListenForConnectionsRequest_RegisterListener_{}
		}
		(*target).Msg.(*ListenForConnectionsRequest_RegisterListener_).RegisterListener = fpv.value.(*ListenForConnectionsRequest_RegisterListener)
	case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
		if _, ok := (*target).Msg.(*ListenForConnectionsRequest_ChannelOpenError_); !ok {
			(*target).Msg = &ListenForConnectionsRequest_ChannelOpenError_{}
		}
		(*target).Msg.(*ListenForConnectionsRequest_ChannelOpenError_).ChannelOpenError = fpv.value.(*ListenForConnectionsRequest_ChannelOpenError)
	case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
		if _, ok := (*target).Msg.(*ListenForConnectionsRequest_KeepAlive_); !ok {
			(*target).Msg = &ListenForConnectionsRequest_KeepAlive_{}
		}
		(*target).Msg.(*ListenForConnectionsRequest_KeepAlive_).KeepAlive = fpv.value.(*ListenForConnectionsRequest_KeepAlive)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListenForConnectionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenForConnectionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListenForConnectionsRequest_FieldTerminalPathValue' with the value under path in 'ListenForConnectionsRequest'.
func (fpv *ListenForConnectionsRequest_FieldTerminalPathValue) CompareWith(source *ListenForConnectionsRequest) (int, bool) {
	switch fpv.selector {
	case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
		return 0, false
	case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
		return 0, false
	case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListenForConnectionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListenForConnectionsRequest))
}

type ListenForConnectionsRequest_FieldSubPathValue struct {
	ListenForConnectionsRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListenForConnectionsRequest_FieldPathValue = (*ListenForConnectionsRequest_FieldSubPathValue)(nil)

func (fpvs *ListenForConnectionsRequest_FieldSubPathValue) AsRegisterListenerPathValue() (ListenForConnectionsRequestRegisterListener_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ListenForConnectionsRequestRegisterListener_FieldPathValue)
	return res, ok
}
func (fpvs *ListenForConnectionsRequest_FieldSubPathValue) AsChannelOpenErrorPathValue() (ListenForConnectionsRequestChannelOpenError_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ListenForConnectionsRequestChannelOpenError_FieldPathValue)
	return res, ok
}
func (fpvs *ListenForConnectionsRequest_FieldSubPathValue) AsKeepAlivePathValue() (ListenForConnectionsRequestKeepAlive_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ListenForConnectionsRequestKeepAlive_FieldPathValue)
	return res, ok
}

func (fpvs *ListenForConnectionsRequest_FieldSubPathValue) SetTo(target **ListenForConnectionsRequest) {
	if *target == nil {
		*target = new(ListenForConnectionsRequest)
	}
	switch fpvs.Selector() {
	case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
		if _, ok := (*target).Msg.(*ListenForConnectionsRequest_RegisterListener_); !ok {
			(*target).Msg = &ListenForConnectionsRequest_RegisterListener_{}
		}
		fpvs.subPathValue.(ListenForConnectionsRequestRegisterListener_FieldPathValue).SetTo(&(*target).Msg.(*ListenForConnectionsRequest_RegisterListener_).RegisterListener)
	case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
		if _, ok := (*target).Msg.(*ListenForConnectionsRequest_ChannelOpenError_); !ok {
			(*target).Msg = &ListenForConnectionsRequest_ChannelOpenError_{}
		}
		fpvs.subPathValue.(ListenForConnectionsRequestChannelOpenError_FieldPathValue).SetTo(&(*target).Msg.(*ListenForConnectionsRequest_ChannelOpenError_).ChannelOpenError)
	case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
		if _, ok := (*target).Msg.(*ListenForConnectionsRequest_KeepAlive_); !ok {
			(*target).Msg = &ListenForConnectionsRequest_KeepAlive_{}
		}
		fpvs.subPathValue.(ListenForConnectionsRequestKeepAlive_FieldPathValue).SetTo(&(*target).Msg.(*ListenForConnectionsRequest_KeepAlive_).KeepAlive)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ListenForConnectionsRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenForConnectionsRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListenForConnectionsRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListenForConnectionsRequest_FieldSubPathValue) CompareWith(source *ListenForConnectionsRequest) (int, bool) {
	switch fpvs.Selector() {
	case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
		return fpvs.subPathValue.(ListenForConnectionsRequestRegisterListener_FieldPathValue).CompareWith(source.GetRegisterListener())
	case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
		return fpvs.subPathValue.(ListenForConnectionsRequestChannelOpenError_FieldPathValue).CompareWith(source.GetChannelOpenError())
	case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
		return fpvs.subPathValue.(ListenForConnectionsRequestKeepAlive_FieldPathValue).CompareWith(source.GetKeepAlive())
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ListenForConnectionsRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListenForConnectionsRequest))
}

// ListenForConnectionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListenForConnectionsRequest according to their type
// Present only for array (repeated) types.
type ListenForConnectionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListenForConnectionsRequest_FieldPath
	ContainsValue(*ListenForConnectionsRequest) bool
}

// ParseListenForConnectionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListenForConnectionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListenForConnectionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListenForConnectionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListenForConnectionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListenForConnectionsRequest_FieldPathArrayItemValue), nil
}

func MustParseListenForConnectionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListenForConnectionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListenForConnectionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListenForConnectionsRequest_FieldTerminalPathArrayItemValue struct {
	ListenForConnectionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListenForConnectionsRequest_FieldPathArrayItemValue = (*ListenForConnectionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListenForConnectionsRequest as interface{}
func (fpaiv *ListenForConnectionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListenForConnectionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListenForConnectionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListenForConnectionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListenForConnectionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListenForConnectionsRequest'
func (fpaiv *ListenForConnectionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListenForConnectionsRequest) bool {
	slice := fpaiv.ListenForConnectionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListenForConnectionsRequest_FieldSubPathArrayItemValue struct {
	ListenForConnectionsRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListenForConnectionsRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListenForConnectionsRequest_FieldSubPathArrayItemValue) AsRegisterListenerPathItemValue() (ListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ListenForConnectionsRequest_FieldSubPathArrayItemValue) AsChannelOpenErrorPathItemValue() (ListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ListenForConnectionsRequest_FieldSubPathArrayItemValue) AsKeepAlivePathItemValue() (ListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListenForConnectionsRequest'
func (fpaivs *ListenForConnectionsRequest_FieldSubPathArrayItemValue) ContainsValue(source *ListenForConnectionsRequest) bool {
	switch fpaivs.Selector() {
	case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
		return fpaivs.subPathItemValue.(ListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue).ContainsValue(source.GetRegisterListener())
	case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
		return fpaivs.subPathItemValue.(ListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue).ContainsValue(source.GetChannelOpenError())
	case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
		return fpaivs.subPathItemValue.(ListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue).ContainsValue(source.GetKeepAlive())
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest: %d", fpaivs.Selector()))
	}
}

// ListenForConnectionsRequest_FieldPathArrayOfValues allows storing slice of values for ListenForConnectionsRequest fields according to their type
type ListenForConnectionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListenForConnectionsRequest_FieldPath
}

func ParseListenForConnectionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListenForConnectionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListenForConnectionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListenForConnectionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListenForConnectionsRequest_FieldPathArrayOfValues), nil
}

func MustParseListenForConnectionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListenForConnectionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListenForConnectionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListenForConnectionsRequest_FieldTerminalPathArrayOfValues struct {
	ListenForConnectionsRequest_FieldTerminalPath
	values interface{}
}

var _ ListenForConnectionsRequest_FieldPathArrayOfValues = (*ListenForConnectionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListenForConnectionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListenForConnectionsRequest_FieldPathSelectorRegisterListener:
		for _, v := range fpaov.values.([]*ListenForConnectionsRequest_RegisterListener) {
			values = append(values, v)
		}
	case ListenForConnectionsRequest_FieldPathSelectorChannelOpenError:
		for _, v := range fpaov.values.([]*ListenForConnectionsRequest_ChannelOpenError) {
			values = append(values, v)
		}
	case ListenForConnectionsRequest_FieldPathSelectorKeepAlive:
		for _, v := range fpaov.values.([]*ListenForConnectionsRequest_KeepAlive) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListenForConnectionsRequest_FieldTerminalPathArrayOfValues) AsRegisterListenerArrayOfValues() ([]*ListenForConnectionsRequest_RegisterListener, bool) {
	res, ok := fpaov.values.([]*ListenForConnectionsRequest_RegisterListener)
	return res, ok
}
func (fpaov *ListenForConnectionsRequest_FieldTerminalPathArrayOfValues) AsChannelOpenErrorArrayOfValues() ([]*ListenForConnectionsRequest_ChannelOpenError, bool) {
	res, ok := fpaov.values.([]*ListenForConnectionsRequest_ChannelOpenError)
	return res, ok
}
func (fpaov *ListenForConnectionsRequest_FieldTerminalPathArrayOfValues) AsKeepAliveArrayOfValues() ([]*ListenForConnectionsRequest_KeepAlive, bool) {
	res, ok := fpaov.values.([]*ListenForConnectionsRequest_KeepAlive)
	return res, ok
}

type ListenForConnectionsRequest_FieldSubPathArrayOfValues struct {
	ListenForConnectionsRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListenForConnectionsRequest_FieldPathArrayOfValues = (*ListenForConnectionsRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListenForConnectionsRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListenForConnectionsRequest_FieldSubPathArrayOfValues) AsRegisterListenerPathArrayOfValues() (ListenForConnectionsRequestRegisterListener_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ListenForConnectionsRequestRegisterListener_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ListenForConnectionsRequest_FieldSubPathArrayOfValues) AsChannelOpenErrorPathArrayOfValues() (ListenForConnectionsRequestChannelOpenError_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ListenForConnectionsRequestChannelOpenError_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ListenForConnectionsRequest_FieldSubPathArrayOfValues) AsKeepAlivePathArrayOfValues() (ListenForConnectionsRequestKeepAlive_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ListenForConnectionsRequestKeepAlive_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListenForConnectionsRequestRegisterListener_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListenForConnectionsRequestRegisterListener_FieldPathSelector
	Get(source *ListenForConnectionsRequest_RegisterListener) []interface{}
	GetSingle(source *ListenForConnectionsRequest_RegisterListener) (interface{}, bool)
	ClearValue(item *ListenForConnectionsRequest_RegisterListener)

	// Those methods build corresponding ListenForConnectionsRequestRegisterListener_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListenForConnectionsRequestRegisterListener_FieldPathValue
	WithIArrayOfValues(values interface{}) ListenForConnectionsRequestRegisterListener_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue
}

type ListenForConnectionsRequestRegisterListener_FieldPathSelector int32

const (
	ListenForConnectionsRequestRegisterListener_FieldPathSelectorDevice ListenForConnectionsRequestRegisterListener_FieldPathSelector = 0
)

func (s ListenForConnectionsRequestRegisterListener_FieldPathSelector) String() string {
	switch s {
	case ListenForConnectionsRequestRegisterListener_FieldPathSelectorDevice:
		return "device"
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_RegisterListener: %d", s))
	}
}

func BuildListenForConnectionsRequestRegisterListener_FieldPath(fp gotenobject.RawFieldPath) (ListenForConnectionsRequestRegisterListener_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListenForConnectionsRequest_RegisterListener")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device":
			return &ListenForConnectionsRequestRegisterListener_FieldTerminalPath{selector: ListenForConnectionsRequestRegisterListener_FieldPathSelectorDevice}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListenForConnectionsRequest_RegisterListener", fp)
}

func ParseListenForConnectionsRequestRegisterListener_FieldPath(rawField string) (ListenForConnectionsRequestRegisterListener_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListenForConnectionsRequestRegisterListener_FieldPath(fp)
}

func MustParseListenForConnectionsRequestRegisterListener_FieldPath(rawField string) ListenForConnectionsRequestRegisterListener_FieldPath {
	fp, err := ParseListenForConnectionsRequestRegisterListener_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListenForConnectionsRequestRegisterListener_FieldTerminalPath struct {
	selector ListenForConnectionsRequestRegisterListener_FieldPathSelector
}

var _ ListenForConnectionsRequestRegisterListener_FieldPath = (*ListenForConnectionsRequestRegisterListener_FieldTerminalPath)(nil)

func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) Selector() ListenForConnectionsRequestRegisterListener_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListenForConnectionsRequest_RegisterListener
func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) Get(source *ListenForConnectionsRequest_RegisterListener) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListenForConnectionsRequestRegisterListener_FieldPathSelectorDevice:
			if source.Device != nil {
				values = append(values, source.Device)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_RegisterListener: %d", fp.selector))
		}
	}
	return
}

func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListenForConnectionsRequest_RegisterListener))
}

// GetSingle returns value pointed by specific field of from source ListenForConnectionsRequest_RegisterListener
func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) GetSingle(source *ListenForConnectionsRequest_RegisterListener) (interface{}, bool) {
	switch fp.selector {
	case ListenForConnectionsRequestRegisterListener_FieldPathSelectorDevice:
		res := source.GetDevice()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_RegisterListener: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListenForConnectionsRequest_RegisterListener))
}

// GetDefault returns a default value of the field type
func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListenForConnectionsRequestRegisterListener_FieldPathSelectorDevice:
		return (*device.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_RegisterListener: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) ClearValue(item *ListenForConnectionsRequest_RegisterListener) {
	if item != nil {
		switch fp.selector {
		case ListenForConnectionsRequestRegisterListener_FieldPathSelectorDevice:
			item.Device = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_RegisterListener: %d", fp.selector))
		}
	}
}

func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListenForConnectionsRequest_RegisterListener))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListenForConnectionsRequestRegisterListener_FieldPathSelectorDevice
}

func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) WithIValue(value interface{}) ListenForConnectionsRequestRegisterListener_FieldPathValue {
	switch fp.selector {
	case ListenForConnectionsRequestRegisterListener_FieldPathSelectorDevice:
		return &ListenForConnectionsRequestRegisterListener_FieldTerminalPathValue{ListenForConnectionsRequestRegisterListener_FieldTerminalPath: *fp, value: value.(*device.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_RegisterListener: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListenForConnectionsRequestRegisterListener_FieldPathArrayOfValues {
	fpaov := &ListenForConnectionsRequestRegisterListener_FieldTerminalPathArrayOfValues{ListenForConnectionsRequestRegisterListener_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListenForConnectionsRequestRegisterListener_FieldPathSelectorDevice:
		return &ListenForConnectionsRequestRegisterListener_FieldTerminalPathArrayOfValues{ListenForConnectionsRequestRegisterListener_FieldTerminalPath: *fp, values: values.([]*device.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_RegisterListener: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_RegisterListener: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequestRegisterListener_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListenForConnectionsRequestRegisterListener_FieldPathValue allows storing values for RegisterListener fields according to their type
type ListenForConnectionsRequestRegisterListener_FieldPathValue interface {
	ListenForConnectionsRequestRegisterListener_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListenForConnectionsRequest_RegisterListener)
	CompareWith(*ListenForConnectionsRequest_RegisterListener) (cmp int, comparable bool)
}

func ParseListenForConnectionsRequestRegisterListener_FieldPathValue(pathStr, valueStr string) (ListenForConnectionsRequestRegisterListener_FieldPathValue, error) {
	fp, err := ParseListenForConnectionsRequestRegisterListener_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegisterListener field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListenForConnectionsRequestRegisterListener_FieldPathValue), nil
}

func MustParseListenForConnectionsRequestRegisterListener_FieldPathValue(pathStr, valueStr string) ListenForConnectionsRequestRegisterListener_FieldPathValue {
	fpv, err := ParseListenForConnectionsRequestRegisterListener_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListenForConnectionsRequestRegisterListener_FieldTerminalPathValue struct {
	ListenForConnectionsRequestRegisterListener_FieldTerminalPath
	value interface{}
}

var _ ListenForConnectionsRequestRegisterListener_FieldPathValue = (*ListenForConnectionsRequestRegisterListener_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RegisterListener' as interface{}
func (fpv *ListenForConnectionsRequestRegisterListener_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListenForConnectionsRequestRegisterListener_FieldTerminalPathValue) AsDeviceValue() (*device.Reference, bool) {
	res, ok := fpv.value.(*device.Reference)
	return res, ok
}

// SetTo stores value for selected field for object RegisterListener
func (fpv *ListenForConnectionsRequestRegisterListener_FieldTerminalPathValue) SetTo(target **ListenForConnectionsRequest_RegisterListener) {
	if *target == nil {
		*target = new(ListenForConnectionsRequest_RegisterListener)
	}
	switch fpv.selector {
	case ListenForConnectionsRequestRegisterListener_FieldPathSelectorDevice:
		(*target).Device = fpv.value.(*device.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_RegisterListener: %d", fpv.selector))
	}
}

func (fpv *ListenForConnectionsRequestRegisterListener_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenForConnectionsRequest_RegisterListener)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListenForConnectionsRequestRegisterListener_FieldTerminalPathValue' with the value under path in 'ListenForConnectionsRequest_RegisterListener'.
func (fpv *ListenForConnectionsRequestRegisterListener_FieldTerminalPathValue) CompareWith(source *ListenForConnectionsRequest_RegisterListener) (int, bool) {
	switch fpv.selector {
	case ListenForConnectionsRequestRegisterListener_FieldPathSelectorDevice:
		leftValue := fpv.value.(*device.Reference)
		rightValue := source.GetDevice()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_RegisterListener: %d", fpv.selector))
	}
}

func (fpv *ListenForConnectionsRequestRegisterListener_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListenForConnectionsRequest_RegisterListener))
}

// ListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue allows storing single item in Path-specific values for RegisterListener according to their type
// Present only for array (repeated) types.
type ListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListenForConnectionsRequestRegisterListener_FieldPath
	ContainsValue(*ListenForConnectionsRequest_RegisterListener) bool
}

// ParseListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue(pathStr, valueStr string) (ListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue, error) {
	fp, err := ParseListenForConnectionsRequestRegisterListener_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegisterListener field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue), nil
}

func MustParseListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue(pathStr, valueStr string) ListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue {
	fpaiv, err := ParseListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListenForConnectionsRequestRegisterListener_FieldTerminalPathArrayItemValue struct {
	ListenForConnectionsRequestRegisterListener_FieldTerminalPath
	value interface{}
}

var _ ListenForConnectionsRequestRegisterListener_FieldPathArrayItemValue = (*ListenForConnectionsRequestRegisterListener_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListenForConnectionsRequest_RegisterListener as interface{}
func (fpaiv *ListenForConnectionsRequestRegisterListener_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListenForConnectionsRequestRegisterListener_FieldTerminalPathArrayItemValue) GetSingle(source *ListenForConnectionsRequest_RegisterListener) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListenForConnectionsRequestRegisterListener_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListenForConnectionsRequest_RegisterListener))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RegisterListener'
func (fpaiv *ListenForConnectionsRequestRegisterListener_FieldTerminalPathArrayItemValue) ContainsValue(source *ListenForConnectionsRequest_RegisterListener) bool {
	slice := fpaiv.ListenForConnectionsRequestRegisterListener_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListenForConnectionsRequestRegisterListener_FieldPathArrayOfValues allows storing slice of values for RegisterListener fields according to their type
type ListenForConnectionsRequestRegisterListener_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListenForConnectionsRequestRegisterListener_FieldPath
}

func ParseListenForConnectionsRequestRegisterListener_FieldPathArrayOfValues(pathStr, valuesStr string) (ListenForConnectionsRequestRegisterListener_FieldPathArrayOfValues, error) {
	fp, err := ParseListenForConnectionsRequestRegisterListener_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegisterListener field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListenForConnectionsRequestRegisterListener_FieldPathArrayOfValues), nil
}

func MustParseListenForConnectionsRequestRegisterListener_FieldPathArrayOfValues(pathStr, valuesStr string) ListenForConnectionsRequestRegisterListener_FieldPathArrayOfValues {
	fpaov, err := ParseListenForConnectionsRequestRegisterListener_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListenForConnectionsRequestRegisterListener_FieldTerminalPathArrayOfValues struct {
	ListenForConnectionsRequestRegisterListener_FieldTerminalPath
	values interface{}
}

var _ ListenForConnectionsRequestRegisterListener_FieldPathArrayOfValues = (*ListenForConnectionsRequestRegisterListener_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListenForConnectionsRequestRegisterListener_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListenForConnectionsRequestRegisterListener_FieldPathSelectorDevice:
		for _, v := range fpaov.values.([]*device.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListenForConnectionsRequestRegisterListener_FieldTerminalPathArrayOfValues) AsDeviceArrayOfValues() ([]*device.Reference, bool) {
	res, ok := fpaov.values.([]*device.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListenForConnectionsRequestChannelOpenError_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListenForConnectionsRequestChannelOpenError_FieldPathSelector
	Get(source *ListenForConnectionsRequest_ChannelOpenError) []interface{}
	GetSingle(source *ListenForConnectionsRequest_ChannelOpenError) (interface{}, bool)
	ClearValue(item *ListenForConnectionsRequest_ChannelOpenError)

	// Those methods build corresponding ListenForConnectionsRequestChannelOpenError_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListenForConnectionsRequestChannelOpenError_FieldPathValue
	WithIArrayOfValues(values interface{}) ListenForConnectionsRequestChannelOpenError_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue
}

type ListenForConnectionsRequestChannelOpenError_FieldPathSelector int32

const (
	ListenForConnectionsRequestChannelOpenError_FieldPathSelectorChannel ListenForConnectionsRequestChannelOpenError_FieldPathSelector = 0
	ListenForConnectionsRequestChannelOpenError_FieldPathSelectorMessage ListenForConnectionsRequestChannelOpenError_FieldPathSelector = 1
)

func (s ListenForConnectionsRequestChannelOpenError_FieldPathSelector) String() string {
	switch s {
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorChannel:
		return "channel"
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorMessage:
		return "message"
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_ChannelOpenError: %d", s))
	}
}

func BuildListenForConnectionsRequestChannelOpenError_FieldPath(fp gotenobject.RawFieldPath) (ListenForConnectionsRequestChannelOpenError_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListenForConnectionsRequest_ChannelOpenError")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "channel":
			return &ListenForConnectionsRequestChannelOpenError_FieldTerminalPath{selector: ListenForConnectionsRequestChannelOpenError_FieldPathSelectorChannel}, nil
		case "message":
			return &ListenForConnectionsRequestChannelOpenError_FieldTerminalPath{selector: ListenForConnectionsRequestChannelOpenError_FieldPathSelectorMessage}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListenForConnectionsRequest_ChannelOpenError", fp)
}

func ParseListenForConnectionsRequestChannelOpenError_FieldPath(rawField string) (ListenForConnectionsRequestChannelOpenError_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListenForConnectionsRequestChannelOpenError_FieldPath(fp)
}

func MustParseListenForConnectionsRequestChannelOpenError_FieldPath(rawField string) ListenForConnectionsRequestChannelOpenError_FieldPath {
	fp, err := ParseListenForConnectionsRequestChannelOpenError_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListenForConnectionsRequestChannelOpenError_FieldTerminalPath struct {
	selector ListenForConnectionsRequestChannelOpenError_FieldPathSelector
}

var _ ListenForConnectionsRequestChannelOpenError_FieldPath = (*ListenForConnectionsRequestChannelOpenError_FieldTerminalPath)(nil)

func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) Selector() ListenForConnectionsRequestChannelOpenError_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListenForConnectionsRequest_ChannelOpenError
func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) Get(source *ListenForConnectionsRequest_ChannelOpenError) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorChannel:
			values = append(values, source.Channel)
		case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorMessage:
			values = append(values, source.Message)
		default:
			panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_ChannelOpenError: %d", fp.selector))
		}
	}
	return
}

func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListenForConnectionsRequest_ChannelOpenError))
}

// GetSingle returns value pointed by specific field of from source ListenForConnectionsRequest_ChannelOpenError
func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) GetSingle(source *ListenForConnectionsRequest_ChannelOpenError) (interface{}, bool) {
	switch fp.selector {
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorChannel:
		return source.GetChannel(), source != nil
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorMessage:
		return source.GetMessage(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_ChannelOpenError: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListenForConnectionsRequest_ChannelOpenError))
}

// GetDefault returns a default value of the field type
func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorChannel:
		return ""
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorMessage:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_ChannelOpenError: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) ClearValue(item *ListenForConnectionsRequest_ChannelOpenError) {
	if item != nil {
		switch fp.selector {
		case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorChannel:
			item.Channel = ""
		case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorMessage:
			item.Message = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_ChannelOpenError: %d", fp.selector))
		}
	}
}

func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListenForConnectionsRequest_ChannelOpenError))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListenForConnectionsRequestChannelOpenError_FieldPathSelectorChannel ||
		fp.selector == ListenForConnectionsRequestChannelOpenError_FieldPathSelectorMessage
}

func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) WithIValue(value interface{}) ListenForConnectionsRequestChannelOpenError_FieldPathValue {
	switch fp.selector {
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorChannel:
		return &ListenForConnectionsRequestChannelOpenError_FieldTerminalPathValue{ListenForConnectionsRequestChannelOpenError_FieldTerminalPath: *fp, value: value.(string)}
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorMessage:
		return &ListenForConnectionsRequestChannelOpenError_FieldTerminalPathValue{ListenForConnectionsRequestChannelOpenError_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_ChannelOpenError: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListenForConnectionsRequestChannelOpenError_FieldPathArrayOfValues {
	fpaov := &ListenForConnectionsRequestChannelOpenError_FieldTerminalPathArrayOfValues{ListenForConnectionsRequestChannelOpenError_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorChannel:
		return &ListenForConnectionsRequestChannelOpenError_FieldTerminalPathArrayOfValues{ListenForConnectionsRequestChannelOpenError_FieldTerminalPath: *fp, values: values.([]string)}
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorMessage:
		return &ListenForConnectionsRequestChannelOpenError_FieldTerminalPathArrayOfValues{ListenForConnectionsRequestChannelOpenError_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_ChannelOpenError: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_ChannelOpenError: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequestChannelOpenError_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListenForConnectionsRequestChannelOpenError_FieldPathValue allows storing values for ChannelOpenError fields according to their type
type ListenForConnectionsRequestChannelOpenError_FieldPathValue interface {
	ListenForConnectionsRequestChannelOpenError_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListenForConnectionsRequest_ChannelOpenError)
	CompareWith(*ListenForConnectionsRequest_ChannelOpenError) (cmp int, comparable bool)
}

func ParseListenForConnectionsRequestChannelOpenError_FieldPathValue(pathStr, valueStr string) (ListenForConnectionsRequestChannelOpenError_FieldPathValue, error) {
	fp, err := ParseListenForConnectionsRequestChannelOpenError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChannelOpenError field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListenForConnectionsRequestChannelOpenError_FieldPathValue), nil
}

func MustParseListenForConnectionsRequestChannelOpenError_FieldPathValue(pathStr, valueStr string) ListenForConnectionsRequestChannelOpenError_FieldPathValue {
	fpv, err := ParseListenForConnectionsRequestChannelOpenError_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListenForConnectionsRequestChannelOpenError_FieldTerminalPathValue struct {
	ListenForConnectionsRequestChannelOpenError_FieldTerminalPath
	value interface{}
}

var _ ListenForConnectionsRequestChannelOpenError_FieldPathValue = (*ListenForConnectionsRequestChannelOpenError_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ChannelOpenError' as interface{}
func (fpv *ListenForConnectionsRequestChannelOpenError_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListenForConnectionsRequestChannelOpenError_FieldTerminalPathValue) AsChannelValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ListenForConnectionsRequestChannelOpenError_FieldTerminalPathValue) AsMessageValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ChannelOpenError
func (fpv *ListenForConnectionsRequestChannelOpenError_FieldTerminalPathValue) SetTo(target **ListenForConnectionsRequest_ChannelOpenError) {
	if *target == nil {
		*target = new(ListenForConnectionsRequest_ChannelOpenError)
	}
	switch fpv.selector {
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorChannel:
		(*target).Channel = fpv.value.(string)
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorMessage:
		(*target).Message = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_ChannelOpenError: %d", fpv.selector))
	}
}

func (fpv *ListenForConnectionsRequestChannelOpenError_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenForConnectionsRequest_ChannelOpenError)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListenForConnectionsRequestChannelOpenError_FieldTerminalPathValue' with the value under path in 'ListenForConnectionsRequest_ChannelOpenError'.
func (fpv *ListenForConnectionsRequestChannelOpenError_FieldTerminalPathValue) CompareWith(source *ListenForConnectionsRequest_ChannelOpenError) (int, bool) {
	switch fpv.selector {
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorChannel:
		leftValue := fpv.value.(string)
		rightValue := source.GetChannel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorMessage:
		leftValue := fpv.value.(string)
		rightValue := source.GetMessage()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_ChannelOpenError: %d", fpv.selector))
	}
}

func (fpv *ListenForConnectionsRequestChannelOpenError_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListenForConnectionsRequest_ChannelOpenError))
}

// ListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue allows storing single item in Path-specific values for ChannelOpenError according to their type
// Present only for array (repeated) types.
type ListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListenForConnectionsRequestChannelOpenError_FieldPath
	ContainsValue(*ListenForConnectionsRequest_ChannelOpenError) bool
}

// ParseListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue(pathStr, valueStr string) (ListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue, error) {
	fp, err := ParseListenForConnectionsRequestChannelOpenError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChannelOpenError field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue), nil
}

func MustParseListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue(pathStr, valueStr string) ListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue {
	fpaiv, err := ParseListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListenForConnectionsRequestChannelOpenError_FieldTerminalPathArrayItemValue struct {
	ListenForConnectionsRequestChannelOpenError_FieldTerminalPath
	value interface{}
}

var _ ListenForConnectionsRequestChannelOpenError_FieldPathArrayItemValue = (*ListenForConnectionsRequestChannelOpenError_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListenForConnectionsRequest_ChannelOpenError as interface{}
func (fpaiv *ListenForConnectionsRequestChannelOpenError_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListenForConnectionsRequestChannelOpenError_FieldTerminalPathArrayItemValue) GetSingle(source *ListenForConnectionsRequest_ChannelOpenError) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListenForConnectionsRequestChannelOpenError_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListenForConnectionsRequest_ChannelOpenError))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ChannelOpenError'
func (fpaiv *ListenForConnectionsRequestChannelOpenError_FieldTerminalPathArrayItemValue) ContainsValue(source *ListenForConnectionsRequest_ChannelOpenError) bool {
	slice := fpaiv.ListenForConnectionsRequestChannelOpenError_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListenForConnectionsRequestChannelOpenError_FieldPathArrayOfValues allows storing slice of values for ChannelOpenError fields according to their type
type ListenForConnectionsRequestChannelOpenError_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListenForConnectionsRequestChannelOpenError_FieldPath
}

func ParseListenForConnectionsRequestChannelOpenError_FieldPathArrayOfValues(pathStr, valuesStr string) (ListenForConnectionsRequestChannelOpenError_FieldPathArrayOfValues, error) {
	fp, err := ParseListenForConnectionsRequestChannelOpenError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChannelOpenError field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListenForConnectionsRequestChannelOpenError_FieldPathArrayOfValues), nil
}

func MustParseListenForConnectionsRequestChannelOpenError_FieldPathArrayOfValues(pathStr, valuesStr string) ListenForConnectionsRequestChannelOpenError_FieldPathArrayOfValues {
	fpaov, err := ParseListenForConnectionsRequestChannelOpenError_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListenForConnectionsRequestChannelOpenError_FieldTerminalPathArrayOfValues struct {
	ListenForConnectionsRequestChannelOpenError_FieldTerminalPath
	values interface{}
}

var _ ListenForConnectionsRequestChannelOpenError_FieldPathArrayOfValues = (*ListenForConnectionsRequestChannelOpenError_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListenForConnectionsRequestChannelOpenError_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorChannel:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ListenForConnectionsRequestChannelOpenError_FieldPathSelectorMessage:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListenForConnectionsRequestChannelOpenError_FieldTerminalPathArrayOfValues) AsChannelArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ListenForConnectionsRequestChannelOpenError_FieldTerminalPathArrayOfValues) AsMessageArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListenForConnectionsRequestKeepAlive_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListenForConnectionsRequestKeepAlive_FieldPathSelector
	Get(source *ListenForConnectionsRequest_KeepAlive) []interface{}
	GetSingle(source *ListenForConnectionsRequest_KeepAlive) (interface{}, bool)
	ClearValue(item *ListenForConnectionsRequest_KeepAlive)

	// Those methods build corresponding ListenForConnectionsRequestKeepAlive_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListenForConnectionsRequestKeepAlive_FieldPathValue
	WithIArrayOfValues(values interface{}) ListenForConnectionsRequestKeepAlive_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue
}

type ListenForConnectionsRequestKeepAlive_FieldPathSelector int32

func (s ListenForConnectionsRequestKeepAlive_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_KeepAlive: %d", s))
	}
}

func BuildListenForConnectionsRequestKeepAlive_FieldPath(fp gotenobject.RawFieldPath) (ListenForConnectionsRequestKeepAlive_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListenForConnectionsRequest_KeepAlive")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListenForConnectionsRequest_KeepAlive", fp)
}

func ParseListenForConnectionsRequestKeepAlive_FieldPath(rawField string) (ListenForConnectionsRequestKeepAlive_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListenForConnectionsRequestKeepAlive_FieldPath(fp)
}

func MustParseListenForConnectionsRequestKeepAlive_FieldPath(rawField string) ListenForConnectionsRequestKeepAlive_FieldPath {
	fp, err := ParseListenForConnectionsRequestKeepAlive_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListenForConnectionsRequestKeepAlive_FieldTerminalPath struct {
	selector ListenForConnectionsRequestKeepAlive_FieldPathSelector
}

var _ ListenForConnectionsRequestKeepAlive_FieldPath = (*ListenForConnectionsRequestKeepAlive_FieldTerminalPath)(nil)

func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) Selector() ListenForConnectionsRequestKeepAlive_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListenForConnectionsRequest_KeepAlive
func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) Get(source *ListenForConnectionsRequest_KeepAlive) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_KeepAlive: %d", fp.selector))
		}
	}
	return
}

func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListenForConnectionsRequest_KeepAlive))
}

// GetSingle returns value pointed by specific field of from source ListenForConnectionsRequest_KeepAlive
func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) GetSingle(source *ListenForConnectionsRequest_KeepAlive) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_KeepAlive: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListenForConnectionsRequest_KeepAlive))
}

// GetDefault returns a default value of the field type
func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_KeepAlive: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) ClearValue(item *ListenForConnectionsRequest_KeepAlive) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_KeepAlive: %d", fp.selector))
		}
	}
}

func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListenForConnectionsRequest_KeepAlive))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) WithIValue(value interface{}) ListenForConnectionsRequestKeepAlive_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_KeepAlive: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListenForConnectionsRequestKeepAlive_FieldPathArrayOfValues {
	fpaov := &ListenForConnectionsRequestKeepAlive_FieldTerminalPathArrayOfValues{ListenForConnectionsRequestKeepAlive_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_KeepAlive: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_KeepAlive: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsRequestKeepAlive_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListenForConnectionsRequestKeepAlive_FieldPathValue allows storing values for KeepAlive fields according to their type
type ListenForConnectionsRequestKeepAlive_FieldPathValue interface {
	ListenForConnectionsRequestKeepAlive_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListenForConnectionsRequest_KeepAlive)
	CompareWith(*ListenForConnectionsRequest_KeepAlive) (cmp int, comparable bool)
}

func ParseListenForConnectionsRequestKeepAlive_FieldPathValue(pathStr, valueStr string) (ListenForConnectionsRequestKeepAlive_FieldPathValue, error) {
	fp, err := ParseListenForConnectionsRequestKeepAlive_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing KeepAlive field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListenForConnectionsRequestKeepAlive_FieldPathValue), nil
}

func MustParseListenForConnectionsRequestKeepAlive_FieldPathValue(pathStr, valueStr string) ListenForConnectionsRequestKeepAlive_FieldPathValue {
	fpv, err := ParseListenForConnectionsRequestKeepAlive_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListenForConnectionsRequestKeepAlive_FieldTerminalPathValue struct {
	ListenForConnectionsRequestKeepAlive_FieldTerminalPath
	value interface{}
}

var _ ListenForConnectionsRequestKeepAlive_FieldPathValue = (*ListenForConnectionsRequestKeepAlive_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'KeepAlive' as interface{}
func (fpv *ListenForConnectionsRequestKeepAlive_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object KeepAlive
func (fpv *ListenForConnectionsRequestKeepAlive_FieldTerminalPathValue) SetTo(target **ListenForConnectionsRequest_KeepAlive) {
	if *target == nil {
		*target = new(ListenForConnectionsRequest_KeepAlive)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_KeepAlive: %d", fpv.selector))
	}
}

func (fpv *ListenForConnectionsRequestKeepAlive_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenForConnectionsRequest_KeepAlive)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListenForConnectionsRequestKeepAlive_FieldTerminalPathValue' with the value under path in 'ListenForConnectionsRequest_KeepAlive'.
func (fpv *ListenForConnectionsRequestKeepAlive_FieldTerminalPathValue) CompareWith(source *ListenForConnectionsRequest_KeepAlive) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsRequest_KeepAlive: %d", fpv.selector))
	}
}

func (fpv *ListenForConnectionsRequestKeepAlive_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListenForConnectionsRequest_KeepAlive))
}

// ListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue allows storing single item in Path-specific values for KeepAlive according to their type
// Present only for array (repeated) types.
type ListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListenForConnectionsRequestKeepAlive_FieldPath
	ContainsValue(*ListenForConnectionsRequest_KeepAlive) bool
}

// ParseListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue(pathStr, valueStr string) (ListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue, error) {
	fp, err := ParseListenForConnectionsRequestKeepAlive_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing KeepAlive field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue), nil
}

func MustParseListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue(pathStr, valueStr string) ListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue {
	fpaiv, err := ParseListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListenForConnectionsRequestKeepAlive_FieldTerminalPathArrayItemValue struct {
	ListenForConnectionsRequestKeepAlive_FieldTerminalPath
	value interface{}
}

var _ ListenForConnectionsRequestKeepAlive_FieldPathArrayItemValue = (*ListenForConnectionsRequestKeepAlive_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListenForConnectionsRequest_KeepAlive as interface{}
func (fpaiv *ListenForConnectionsRequestKeepAlive_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListenForConnectionsRequestKeepAlive_FieldTerminalPathArrayItemValue) GetSingle(source *ListenForConnectionsRequest_KeepAlive) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListenForConnectionsRequestKeepAlive_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListenForConnectionsRequest_KeepAlive))
}

// Contains returns a boolean indicating if value that is being held is present in given 'KeepAlive'
func (fpaiv *ListenForConnectionsRequestKeepAlive_FieldTerminalPathArrayItemValue) ContainsValue(source *ListenForConnectionsRequest_KeepAlive) bool {
	slice := fpaiv.ListenForConnectionsRequestKeepAlive_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListenForConnectionsRequestKeepAlive_FieldPathArrayOfValues allows storing slice of values for KeepAlive fields according to their type
type ListenForConnectionsRequestKeepAlive_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListenForConnectionsRequestKeepAlive_FieldPath
}

func ParseListenForConnectionsRequestKeepAlive_FieldPathArrayOfValues(pathStr, valuesStr string) (ListenForConnectionsRequestKeepAlive_FieldPathArrayOfValues, error) {
	fp, err := ParseListenForConnectionsRequestKeepAlive_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing KeepAlive field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListenForConnectionsRequestKeepAlive_FieldPathArrayOfValues), nil
}

func MustParseListenForConnectionsRequestKeepAlive_FieldPathArrayOfValues(pathStr, valuesStr string) ListenForConnectionsRequestKeepAlive_FieldPathArrayOfValues {
	fpaov, err := ParseListenForConnectionsRequestKeepAlive_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListenForConnectionsRequestKeepAlive_FieldTerminalPathArrayOfValues struct {
	ListenForConnectionsRequestKeepAlive_FieldTerminalPath
	values interface{}
}

var _ ListenForConnectionsRequestKeepAlive_FieldPathArrayOfValues = (*ListenForConnectionsRequestKeepAlive_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListenForConnectionsRequestKeepAlive_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListenForConnectionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListenForConnectionsResponse_FieldPathSelector
	Get(source *ListenForConnectionsResponse) []interface{}
	GetSingle(source *ListenForConnectionsResponse) (interface{}, bool)
	ClearValue(item *ListenForConnectionsResponse)

	// Those methods build corresponding ListenForConnectionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListenForConnectionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListenForConnectionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListenForConnectionsResponse_FieldPathArrayItemValue
}

type ListenForConnectionsResponse_FieldPathSelector int32

const (
	ListenForConnectionsResponse_FieldPathSelectorChannelRequested ListenForConnectionsResponse_FieldPathSelector = 0
)

func (s ListenForConnectionsResponse_FieldPathSelector) String() string {
	switch s {
	case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
		return "channel_requested"
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", s))
	}
}

func BuildListenForConnectionsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListenForConnectionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListenForConnectionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "channel_requested", "channelRequested", "channel-requested":
			return &ListenForConnectionsResponse_FieldTerminalPath{selector: ListenForConnectionsResponse_FieldPathSelectorChannelRequested}, nil
		}
	} else {
		switch fp[0] {
		case "channel_requested", "channelRequested", "channel-requested":
			if subpath, err := BuildListenForConnectionsResponseChannelRequested_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListenForConnectionsResponse_FieldSubPath{selector: ListenForConnectionsResponse_FieldPathSelectorChannelRequested, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListenForConnectionsResponse", fp)
}

func ParseListenForConnectionsResponse_FieldPath(rawField string) (ListenForConnectionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListenForConnectionsResponse_FieldPath(fp)
}

func MustParseListenForConnectionsResponse_FieldPath(rawField string) ListenForConnectionsResponse_FieldPath {
	fp, err := ParseListenForConnectionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListenForConnectionsResponse_FieldTerminalPath struct {
	selector ListenForConnectionsResponse_FieldPathSelector
}

var _ ListenForConnectionsResponse_FieldPath = (*ListenForConnectionsResponse_FieldTerminalPath)(nil)

func (fp *ListenForConnectionsResponse_FieldTerminalPath) Selector() ListenForConnectionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListenForConnectionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListenForConnectionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListenForConnectionsResponse
func (fp *ListenForConnectionsResponse_FieldTerminalPath) Get(source *ListenForConnectionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
			if source, ok := source.Msg.(*ListenForConnectionsResponse_ChannelRequested_); ok && source != nil {
				if source.ChannelRequested != nil {
					values = append(values, source.ChannelRequested)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListenForConnectionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListenForConnectionsResponse))
}

// GetSingle returns value pointed by specific field of from source ListenForConnectionsResponse
func (fp *ListenForConnectionsResponse_FieldTerminalPath) GetSingle(source *ListenForConnectionsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
		res := source.GetChannelRequested()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListenForConnectionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListenForConnectionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
		return (*ListenForConnectionsResponse_ChannelRequested)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsResponse_FieldTerminalPath) ClearValue(item *ListenForConnectionsResponse) {
	if item != nil {
		switch fp.selector {
		case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
			if item, ok := item.Msg.(*ListenForConnectionsResponse_ChannelRequested_); ok {
				item.ChannelRequested = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListenForConnectionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListenForConnectionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListenForConnectionsResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ListenForConnectionsResponse_FieldTerminalPath) WithIValue(value interface{}) ListenForConnectionsResponse_FieldPathValue {
	switch fp.selector {
	case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
		return &ListenForConnectionsResponse_FieldTerminalPathValue{ListenForConnectionsResponse_FieldTerminalPath: *fp, value: value.(*ListenForConnectionsResponse_ChannelRequested)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListenForConnectionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListenForConnectionsResponse_FieldPathArrayOfValues {
	fpaov := &ListenForConnectionsResponse_FieldTerminalPathArrayOfValues{ListenForConnectionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
		return &ListenForConnectionsResponse_FieldTerminalPathArrayOfValues{ListenForConnectionsResponse_FieldTerminalPath: *fp, values: values.([]*ListenForConnectionsResponse_ChannelRequested)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListenForConnectionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListenForConnectionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListenForConnectionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListenForConnectionsResponse_FieldSubPath struct {
	selector ListenForConnectionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListenForConnectionsResponse_FieldPath = (*ListenForConnectionsResponse_FieldSubPath)(nil)

func (fps *ListenForConnectionsResponse_FieldSubPath) Selector() ListenForConnectionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListenForConnectionsResponse_FieldSubPath) AsChannelRequestedSubPath() (ListenForConnectionsResponseChannelRequested_FieldPath, bool) {
	res, ok := fps.subPath.(ListenForConnectionsResponseChannelRequested_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListenForConnectionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListenForConnectionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListenForConnectionsResponse
func (fps *ListenForConnectionsResponse_FieldSubPath) Get(source *ListenForConnectionsResponse) (values []interface{}) {
	if asChannelRequestedFieldPath, ok := fps.AsChannelRequestedSubPath(); ok {
		values = append(values, asChannelRequestedFieldPath.Get(source.GetChannelRequested())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListenForConnectionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListenForConnectionsResponse))
}

// GetSingle returns value of selected field from source ListenForConnectionsResponse
func (fps *ListenForConnectionsResponse_FieldSubPath) GetSingle(source *ListenForConnectionsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
		if source.GetChannelRequested() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetChannelRequested())
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fps.selector))
	}
}

func (fps *ListenForConnectionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListenForConnectionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListenForConnectionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListenForConnectionsResponse_FieldSubPath) ClearValue(item *ListenForConnectionsResponse) {
	if item != nil {
		switch fps.selector {
		case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
			if item.Msg != nil {
				if item, ok := item.Msg.(*ListenForConnectionsResponse_ChannelRequested_); ok {
					fps.subPath.ClearValueRaw(item.ChannelRequested)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListenForConnectionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListenForConnectionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListenForConnectionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListenForConnectionsResponse_FieldSubPath) WithIValue(value interface{}) ListenForConnectionsResponse_FieldPathValue {
	return &ListenForConnectionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListenForConnectionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListenForConnectionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListenForConnectionsResponse_FieldPathArrayOfValues {
	return &ListenForConnectionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListenForConnectionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListenForConnectionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListenForConnectionsResponse_FieldPathArrayItemValue {
	return &ListenForConnectionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListenForConnectionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListenForConnectionsResponse_FieldPathValue allows storing values for ListenForConnectionsResponse fields according to their type
type ListenForConnectionsResponse_FieldPathValue interface {
	ListenForConnectionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListenForConnectionsResponse)
	CompareWith(*ListenForConnectionsResponse) (cmp int, comparable bool)
}

func ParseListenForConnectionsResponse_FieldPathValue(pathStr, valueStr string) (ListenForConnectionsResponse_FieldPathValue, error) {
	fp, err := ParseListenForConnectionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListenForConnectionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListenForConnectionsResponse_FieldPathValue), nil
}

func MustParseListenForConnectionsResponse_FieldPathValue(pathStr, valueStr string) ListenForConnectionsResponse_FieldPathValue {
	fpv, err := ParseListenForConnectionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListenForConnectionsResponse_FieldTerminalPathValue struct {
	ListenForConnectionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListenForConnectionsResponse_FieldPathValue = (*ListenForConnectionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListenForConnectionsResponse' as interface{}
func (fpv *ListenForConnectionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListenForConnectionsResponse_FieldTerminalPathValue) AsChannelRequestedValue() (*ListenForConnectionsResponse_ChannelRequested, bool) {
	res, ok := fpv.value.(*ListenForConnectionsResponse_ChannelRequested)
	return res, ok
}

// SetTo stores value for selected field for object ListenForConnectionsResponse
func (fpv *ListenForConnectionsResponse_FieldTerminalPathValue) SetTo(target **ListenForConnectionsResponse) {
	if *target == nil {
		*target = new(ListenForConnectionsResponse)
	}
	switch fpv.selector {
	case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
		if _, ok := (*target).Msg.(*ListenForConnectionsResponse_ChannelRequested_); !ok {
			(*target).Msg = &ListenForConnectionsResponse_ChannelRequested_{}
		}
		(*target).Msg.(*ListenForConnectionsResponse_ChannelRequested_).ChannelRequested = fpv.value.(*ListenForConnectionsResponse_ChannelRequested)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListenForConnectionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenForConnectionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListenForConnectionsResponse_FieldTerminalPathValue' with the value under path in 'ListenForConnectionsResponse'.
func (fpv *ListenForConnectionsResponse_FieldTerminalPathValue) CompareWith(source *ListenForConnectionsResponse) (int, bool) {
	switch fpv.selector {
	case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListenForConnectionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListenForConnectionsResponse))
}

type ListenForConnectionsResponse_FieldSubPathValue struct {
	ListenForConnectionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListenForConnectionsResponse_FieldPathValue = (*ListenForConnectionsResponse_FieldSubPathValue)(nil)

func (fpvs *ListenForConnectionsResponse_FieldSubPathValue) AsChannelRequestedPathValue() (ListenForConnectionsResponseChannelRequested_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ListenForConnectionsResponseChannelRequested_FieldPathValue)
	return res, ok
}

func (fpvs *ListenForConnectionsResponse_FieldSubPathValue) SetTo(target **ListenForConnectionsResponse) {
	if *target == nil {
		*target = new(ListenForConnectionsResponse)
	}
	switch fpvs.Selector() {
	case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
		if _, ok := (*target).Msg.(*ListenForConnectionsResponse_ChannelRequested_); !ok {
			(*target).Msg = &ListenForConnectionsResponse_ChannelRequested_{}
		}
		fpvs.subPathValue.(ListenForConnectionsResponseChannelRequested_FieldPathValue).SetTo(&(*target).Msg.(*ListenForConnectionsResponse_ChannelRequested_).ChannelRequested)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListenForConnectionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenForConnectionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListenForConnectionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListenForConnectionsResponse_FieldSubPathValue) CompareWith(source *ListenForConnectionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
		return fpvs.subPathValue.(ListenForConnectionsResponseChannelRequested_FieldPathValue).CompareWith(source.GetChannelRequested())
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListenForConnectionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListenForConnectionsResponse))
}

// ListenForConnectionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListenForConnectionsResponse according to their type
// Present only for array (repeated) types.
type ListenForConnectionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListenForConnectionsResponse_FieldPath
	ContainsValue(*ListenForConnectionsResponse) bool
}

// ParseListenForConnectionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListenForConnectionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListenForConnectionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListenForConnectionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListenForConnectionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListenForConnectionsResponse_FieldPathArrayItemValue), nil
}

func MustParseListenForConnectionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListenForConnectionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListenForConnectionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListenForConnectionsResponse_FieldTerminalPathArrayItemValue struct {
	ListenForConnectionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListenForConnectionsResponse_FieldPathArrayItemValue = (*ListenForConnectionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListenForConnectionsResponse as interface{}
func (fpaiv *ListenForConnectionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListenForConnectionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListenForConnectionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListenForConnectionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListenForConnectionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListenForConnectionsResponse'
func (fpaiv *ListenForConnectionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListenForConnectionsResponse) bool {
	slice := fpaiv.ListenForConnectionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListenForConnectionsResponse_FieldSubPathArrayItemValue struct {
	ListenForConnectionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListenForConnectionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListenForConnectionsResponse_FieldSubPathArrayItemValue) AsChannelRequestedPathItemValue() (ListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListenForConnectionsResponse'
func (fpaivs *ListenForConnectionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListenForConnectionsResponse) bool {
	switch fpaivs.Selector() {
	case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
		return fpaivs.subPathItemValue.(ListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue).ContainsValue(source.GetChannelRequested())
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse: %d", fpaivs.Selector()))
	}
}

// ListenForConnectionsResponse_FieldPathArrayOfValues allows storing slice of values for ListenForConnectionsResponse fields according to their type
type ListenForConnectionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListenForConnectionsResponse_FieldPath
}

func ParseListenForConnectionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListenForConnectionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListenForConnectionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListenForConnectionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListenForConnectionsResponse_FieldPathArrayOfValues), nil
}

func MustParseListenForConnectionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListenForConnectionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListenForConnectionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListenForConnectionsResponse_FieldTerminalPathArrayOfValues struct {
	ListenForConnectionsResponse_FieldTerminalPath
	values interface{}
}

var _ ListenForConnectionsResponse_FieldPathArrayOfValues = (*ListenForConnectionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListenForConnectionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListenForConnectionsResponse_FieldPathSelectorChannelRequested:
		for _, v := range fpaov.values.([]*ListenForConnectionsResponse_ChannelRequested) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListenForConnectionsResponse_FieldTerminalPathArrayOfValues) AsChannelRequestedArrayOfValues() ([]*ListenForConnectionsResponse_ChannelRequested, bool) {
	res, ok := fpaov.values.([]*ListenForConnectionsResponse_ChannelRequested)
	return res, ok
}

type ListenForConnectionsResponse_FieldSubPathArrayOfValues struct {
	ListenForConnectionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListenForConnectionsResponse_FieldPathArrayOfValues = (*ListenForConnectionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListenForConnectionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListenForConnectionsResponse_FieldSubPathArrayOfValues) AsChannelRequestedPathArrayOfValues() (ListenForConnectionsResponseChannelRequested_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ListenForConnectionsResponseChannelRequested_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListenForConnectionsResponseChannelRequested_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListenForConnectionsResponseChannelRequested_FieldPathSelector
	Get(source *ListenForConnectionsResponse_ChannelRequested) []interface{}
	GetSingle(source *ListenForConnectionsResponse_ChannelRequested) (interface{}, bool)
	ClearValue(item *ListenForConnectionsResponse_ChannelRequested)

	// Those methods build corresponding ListenForConnectionsResponseChannelRequested_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListenForConnectionsResponseChannelRequested_FieldPathValue
	WithIArrayOfValues(values interface{}) ListenForConnectionsResponseChannelRequested_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue
}

type ListenForConnectionsResponseChannelRequested_FieldPathSelector int32

const (
	ListenForConnectionsResponseChannelRequested_FieldPathSelectorChannel ListenForConnectionsResponseChannelRequested_FieldPathSelector = 0
	ListenForConnectionsResponseChannelRequested_FieldPathSelectorService ListenForConnectionsResponseChannelRequested_FieldPathSelector = 1
	ListenForConnectionsResponseChannelRequested_FieldPathSelectorArg     ListenForConnectionsResponseChannelRequested_FieldPathSelector = 2
)

func (s ListenForConnectionsResponseChannelRequested_FieldPathSelector) String() string {
	switch s {
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorChannel:
		return "channel"
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorService:
		return "service"
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorArg:
		return "arg"
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse_ChannelRequested: %d", s))
	}
}

func BuildListenForConnectionsResponseChannelRequested_FieldPath(fp gotenobject.RawFieldPath) (ListenForConnectionsResponseChannelRequested_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListenForConnectionsResponse_ChannelRequested")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "channel":
			return &ListenForConnectionsResponseChannelRequested_FieldTerminalPath{selector: ListenForConnectionsResponseChannelRequested_FieldPathSelectorChannel}, nil
		case "service":
			return &ListenForConnectionsResponseChannelRequested_FieldTerminalPath{selector: ListenForConnectionsResponseChannelRequested_FieldPathSelectorService}, nil
		case "arg":
			return &ListenForConnectionsResponseChannelRequested_FieldTerminalPath{selector: ListenForConnectionsResponseChannelRequested_FieldPathSelectorArg}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListenForConnectionsResponse_ChannelRequested", fp)
}

func ParseListenForConnectionsResponseChannelRequested_FieldPath(rawField string) (ListenForConnectionsResponseChannelRequested_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListenForConnectionsResponseChannelRequested_FieldPath(fp)
}

func MustParseListenForConnectionsResponseChannelRequested_FieldPath(rawField string) ListenForConnectionsResponseChannelRequested_FieldPath {
	fp, err := ParseListenForConnectionsResponseChannelRequested_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListenForConnectionsResponseChannelRequested_FieldTerminalPath struct {
	selector ListenForConnectionsResponseChannelRequested_FieldPathSelector
}

var _ ListenForConnectionsResponseChannelRequested_FieldPath = (*ListenForConnectionsResponseChannelRequested_FieldTerminalPath)(nil)

func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) Selector() ListenForConnectionsResponseChannelRequested_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListenForConnectionsResponse_ChannelRequested
func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) Get(source *ListenForConnectionsResponse_ChannelRequested) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListenForConnectionsResponseChannelRequested_FieldPathSelectorChannel:
			values = append(values, source.Channel)
		case ListenForConnectionsResponseChannelRequested_FieldPathSelectorService:
			values = append(values, source.Service)
		case ListenForConnectionsResponseChannelRequested_FieldPathSelectorArg:
			values = append(values, source.Arg)
		default:
			panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse_ChannelRequested: %d", fp.selector))
		}
	}
	return
}

func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListenForConnectionsResponse_ChannelRequested))
}

// GetSingle returns value pointed by specific field of from source ListenForConnectionsResponse_ChannelRequested
func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) GetSingle(source *ListenForConnectionsResponse_ChannelRequested) (interface{}, bool) {
	switch fp.selector {
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorChannel:
		return source.GetChannel(), source != nil
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorService:
		return source.GetService(), source != nil
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorArg:
		return source.GetArg(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse_ChannelRequested: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListenForConnectionsResponse_ChannelRequested))
}

// GetDefault returns a default value of the field type
func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorChannel:
		return ""
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorService:
		return BrokerServiceType_BROKER_SERVICE_UNSPECIFIED
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorArg:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse_ChannelRequested: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) ClearValue(item *ListenForConnectionsResponse_ChannelRequested) {
	if item != nil {
		switch fp.selector {
		case ListenForConnectionsResponseChannelRequested_FieldPathSelectorChannel:
			item.Channel = ""
		case ListenForConnectionsResponseChannelRequested_FieldPathSelectorService:
			item.Service = BrokerServiceType_BROKER_SERVICE_UNSPECIFIED
		case ListenForConnectionsResponseChannelRequested_FieldPathSelectorArg:
			item.Arg = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse_ChannelRequested: %d", fp.selector))
		}
	}
}

func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListenForConnectionsResponse_ChannelRequested))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListenForConnectionsResponseChannelRequested_FieldPathSelectorChannel ||
		fp.selector == ListenForConnectionsResponseChannelRequested_FieldPathSelectorService ||
		fp.selector == ListenForConnectionsResponseChannelRequested_FieldPathSelectorArg
}

func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) WithIValue(value interface{}) ListenForConnectionsResponseChannelRequested_FieldPathValue {
	switch fp.selector {
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorChannel:
		return &ListenForConnectionsResponseChannelRequested_FieldTerminalPathValue{ListenForConnectionsResponseChannelRequested_FieldTerminalPath: *fp, value: value.(string)}
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorService:
		return &ListenForConnectionsResponseChannelRequested_FieldTerminalPathValue{ListenForConnectionsResponseChannelRequested_FieldTerminalPath: *fp, value: value.(BrokerServiceType)}
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorArg:
		return &ListenForConnectionsResponseChannelRequested_FieldTerminalPathValue{ListenForConnectionsResponseChannelRequested_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse_ChannelRequested: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListenForConnectionsResponseChannelRequested_FieldPathArrayOfValues {
	fpaov := &ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayOfValues{ListenForConnectionsResponseChannelRequested_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorChannel:
		return &ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayOfValues{ListenForConnectionsResponseChannelRequested_FieldTerminalPath: *fp, values: values.([]string)}
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorService:
		return &ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayOfValues{ListenForConnectionsResponseChannelRequested_FieldTerminalPath: *fp, values: values.([]BrokerServiceType)}
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorArg:
		return &ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayOfValues{ListenForConnectionsResponseChannelRequested_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse_ChannelRequested: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse_ChannelRequested: %d", fp.selector))
	}
}

func (fp *ListenForConnectionsResponseChannelRequested_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListenForConnectionsResponseChannelRequested_FieldPathValue allows storing values for ChannelRequested fields according to their type
type ListenForConnectionsResponseChannelRequested_FieldPathValue interface {
	ListenForConnectionsResponseChannelRequested_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListenForConnectionsResponse_ChannelRequested)
	CompareWith(*ListenForConnectionsResponse_ChannelRequested) (cmp int, comparable bool)
}

func ParseListenForConnectionsResponseChannelRequested_FieldPathValue(pathStr, valueStr string) (ListenForConnectionsResponseChannelRequested_FieldPathValue, error) {
	fp, err := ParseListenForConnectionsResponseChannelRequested_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChannelRequested field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListenForConnectionsResponseChannelRequested_FieldPathValue), nil
}

func MustParseListenForConnectionsResponseChannelRequested_FieldPathValue(pathStr, valueStr string) ListenForConnectionsResponseChannelRequested_FieldPathValue {
	fpv, err := ParseListenForConnectionsResponseChannelRequested_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListenForConnectionsResponseChannelRequested_FieldTerminalPathValue struct {
	ListenForConnectionsResponseChannelRequested_FieldTerminalPath
	value interface{}
}

var _ ListenForConnectionsResponseChannelRequested_FieldPathValue = (*ListenForConnectionsResponseChannelRequested_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ChannelRequested' as interface{}
func (fpv *ListenForConnectionsResponseChannelRequested_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListenForConnectionsResponseChannelRequested_FieldTerminalPathValue) AsChannelValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ListenForConnectionsResponseChannelRequested_FieldTerminalPathValue) AsServiceValue() (BrokerServiceType, bool) {
	res, ok := fpv.value.(BrokerServiceType)
	return res, ok
}
func (fpv *ListenForConnectionsResponseChannelRequested_FieldTerminalPathValue) AsArgValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ChannelRequested
func (fpv *ListenForConnectionsResponseChannelRequested_FieldTerminalPathValue) SetTo(target **ListenForConnectionsResponse_ChannelRequested) {
	if *target == nil {
		*target = new(ListenForConnectionsResponse_ChannelRequested)
	}
	switch fpv.selector {
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorChannel:
		(*target).Channel = fpv.value.(string)
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorService:
		(*target).Service = fpv.value.(BrokerServiceType)
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorArg:
		(*target).Arg = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse_ChannelRequested: %d", fpv.selector))
	}
}

func (fpv *ListenForConnectionsResponseChannelRequested_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListenForConnectionsResponse_ChannelRequested)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListenForConnectionsResponseChannelRequested_FieldTerminalPathValue' with the value under path in 'ListenForConnectionsResponse_ChannelRequested'.
func (fpv *ListenForConnectionsResponseChannelRequested_FieldTerminalPathValue) CompareWith(source *ListenForConnectionsResponse_ChannelRequested) (int, bool) {
	switch fpv.selector {
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorChannel:
		leftValue := fpv.value.(string)
		rightValue := source.GetChannel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorService:
		leftValue := fpv.value.(BrokerServiceType)
		rightValue := source.GetService()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorArg:
		leftValue := fpv.value.(string)
		rightValue := source.GetArg()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListenForConnectionsResponse_ChannelRequested: %d", fpv.selector))
	}
}

func (fpv *ListenForConnectionsResponseChannelRequested_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListenForConnectionsResponse_ChannelRequested))
}

// ListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue allows storing single item in Path-specific values for ChannelRequested according to their type
// Present only for array (repeated) types.
type ListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListenForConnectionsResponseChannelRequested_FieldPath
	ContainsValue(*ListenForConnectionsResponse_ChannelRequested) bool
}

// ParseListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue(pathStr, valueStr string) (ListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue, error) {
	fp, err := ParseListenForConnectionsResponseChannelRequested_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChannelRequested field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue), nil
}

func MustParseListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue(pathStr, valueStr string) ListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue {
	fpaiv, err := ParseListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayItemValue struct {
	ListenForConnectionsResponseChannelRequested_FieldTerminalPath
	value interface{}
}

var _ ListenForConnectionsResponseChannelRequested_FieldPathArrayItemValue = (*ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListenForConnectionsResponse_ChannelRequested as interface{}
func (fpaiv *ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayItemValue) GetSingle(source *ListenForConnectionsResponse_ChannelRequested) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListenForConnectionsResponse_ChannelRequested))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ChannelRequested'
func (fpaiv *ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayItemValue) ContainsValue(source *ListenForConnectionsResponse_ChannelRequested) bool {
	slice := fpaiv.ListenForConnectionsResponseChannelRequested_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListenForConnectionsResponseChannelRequested_FieldPathArrayOfValues allows storing slice of values for ChannelRequested fields according to their type
type ListenForConnectionsResponseChannelRequested_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListenForConnectionsResponseChannelRequested_FieldPath
}

func ParseListenForConnectionsResponseChannelRequested_FieldPathArrayOfValues(pathStr, valuesStr string) (ListenForConnectionsResponseChannelRequested_FieldPathArrayOfValues, error) {
	fp, err := ParseListenForConnectionsResponseChannelRequested_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ChannelRequested field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListenForConnectionsResponseChannelRequested_FieldPathArrayOfValues), nil
}

func MustParseListenForConnectionsResponseChannelRequested_FieldPathArrayOfValues(pathStr, valuesStr string) ListenForConnectionsResponseChannelRequested_FieldPathArrayOfValues {
	fpaov, err := ParseListenForConnectionsResponseChannelRequested_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayOfValues struct {
	ListenForConnectionsResponseChannelRequested_FieldTerminalPath
	values interface{}
}

var _ ListenForConnectionsResponseChannelRequested_FieldPathArrayOfValues = (*ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorChannel:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorService:
		for _, v := range fpaov.values.([]BrokerServiceType) {
			values = append(values, v)
		}
	case ListenForConnectionsResponseChannelRequested_FieldPathSelectorArg:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayOfValues) AsChannelArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayOfValues) AsServiceArrayOfValues() ([]BrokerServiceType, bool) {
	res, ok := fpaov.values.([]BrokerServiceType)
	return res, ok
}
func (fpaov *ListenForConnectionsResponseChannelRequested_FieldTerminalPathArrayOfValues) AsArgArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type OpenConnectionChannelSocketRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() OpenConnectionChannelSocketRequest_FieldPathSelector
	Get(source *OpenConnectionChannelSocketRequest) []interface{}
	GetSingle(source *OpenConnectionChannelSocketRequest) (interface{}, bool)
	ClearValue(item *OpenConnectionChannelSocketRequest)

	// Those methods build corresponding OpenConnectionChannelSocketRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) OpenConnectionChannelSocketRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) OpenConnectionChannelSocketRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) OpenConnectionChannelSocketRequest_FieldPathArrayItemValue
}

type OpenConnectionChannelSocketRequest_FieldPathSelector int32

const (
	OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket OpenConnectionChannelSocketRequest_FieldPathSelector = 0
	OpenConnectionChannelSocketRequest_FieldPathSelectorData           OpenConnectionChannelSocketRequest_FieldPathSelector = 1
	OpenConnectionChannelSocketRequest_FieldPathSelectorError          OpenConnectionChannelSocketRequest_FieldPathSelector = 2
	OpenConnectionChannelSocketRequest_FieldPathSelectorAck            OpenConnectionChannelSocketRequest_FieldPathSelector = 3
)

func (s OpenConnectionChannelSocketRequest_FieldPathSelector) String() string {
	switch s {
	case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
		return "register_socket"
	case OpenConnectionChannelSocketRequest_FieldPathSelectorData:
		return "data"
	case OpenConnectionChannelSocketRequest_FieldPathSelectorError:
		return "error"
	case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
		return "ack"
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", s))
	}
}

func BuildOpenConnectionChannelSocketRequest_FieldPath(fp gotenobject.RawFieldPath) (OpenConnectionChannelSocketRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object OpenConnectionChannelSocketRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "register_socket", "registerSocket", "register-socket":
			return &OpenConnectionChannelSocketRequest_FieldTerminalPath{selector: OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket}, nil
		case "data":
			return &OpenConnectionChannelSocketRequest_FieldTerminalPath{selector: OpenConnectionChannelSocketRequest_FieldPathSelectorData}, nil
		case "error":
			return &OpenConnectionChannelSocketRequest_FieldTerminalPath{selector: OpenConnectionChannelSocketRequest_FieldPathSelectorError}, nil
		case "ack":
			return &OpenConnectionChannelSocketRequest_FieldTerminalPath{selector: OpenConnectionChannelSocketRequest_FieldPathSelectorAck}, nil
		}
	} else {
		switch fp[0] {
		case "register_socket", "registerSocket", "register-socket":
			if subpath, err := BuildOpenConnectionChannelSocketRequestRegisterSocket_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &OpenConnectionChannelSocketRequest_FieldSubPath{selector: OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket, subPath: subpath}, nil
			}
		case "ack":
			if subpath, err := BuildAck_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &OpenConnectionChannelSocketRequest_FieldSubPath{selector: OpenConnectionChannelSocketRequest_FieldPathSelectorAck, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object OpenConnectionChannelSocketRequest", fp)
}

func ParseOpenConnectionChannelSocketRequest_FieldPath(rawField string) (OpenConnectionChannelSocketRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildOpenConnectionChannelSocketRequest_FieldPath(fp)
}

func MustParseOpenConnectionChannelSocketRequest_FieldPath(rawField string) OpenConnectionChannelSocketRequest_FieldPath {
	fp, err := ParseOpenConnectionChannelSocketRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type OpenConnectionChannelSocketRequest_FieldTerminalPath struct {
	selector OpenConnectionChannelSocketRequest_FieldPathSelector
}

var _ OpenConnectionChannelSocketRequest_FieldPath = (*OpenConnectionChannelSocketRequest_FieldTerminalPath)(nil)

func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) Selector() OpenConnectionChannelSocketRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source OpenConnectionChannelSocketRequest
func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) Get(source *OpenConnectionChannelSocketRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
			if source, ok := source.Msg.(*OpenConnectionChannelSocketRequest_RegisterSocket_); ok && source != nil {
				if source.RegisterSocket != nil {
					values = append(values, source.RegisterSocket)
				}
			}
		case OpenConnectionChannelSocketRequest_FieldPathSelectorData:
			if source, ok := source.Msg.(*OpenConnectionChannelSocketRequest_Data); ok && source != nil {
				values = append(values, source.Data)
			}
		case OpenConnectionChannelSocketRequest_FieldPathSelectorError:
			if source, ok := source.Msg.(*OpenConnectionChannelSocketRequest_Error); ok && source != nil {
				values = append(values, source.Error)
			}
		case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
			if source, ok := source.Msg.(*OpenConnectionChannelSocketRequest_Ack); ok && source != nil {
				if source.Ack != nil {
					values = append(values, source.Ack)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*OpenConnectionChannelSocketRequest))
}

// GetSingle returns value pointed by specific field of from source OpenConnectionChannelSocketRequest
func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) GetSingle(source *OpenConnectionChannelSocketRequest) (interface{}, bool) {
	switch fp.selector {
	case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
		res := source.GetRegisterSocket()
		return res, res != nil
	case OpenConnectionChannelSocketRequest_FieldPathSelectorData:
		res := source.GetData()
		return res, res != nil
	case OpenConnectionChannelSocketRequest_FieldPathSelectorError:
		res := source.GetError()
		return res, res != nil
	case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
		res := source.GetAck()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fp.selector))
	}
}

func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*OpenConnectionChannelSocketRequest))
}

// GetDefault returns a default value of the field type
func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
		return (*OpenConnectionChannelSocketRequest_RegisterSocket)(nil)
	case OpenConnectionChannelSocketRequest_FieldPathSelectorData:
		return ([]byte)(nil)
	case OpenConnectionChannelSocketRequest_FieldPathSelectorError:
		return ([]byte)(nil)
	case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
		return (*Ack)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fp.selector))
	}
}

func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) ClearValue(item *OpenConnectionChannelSocketRequest) {
	if item != nil {
		switch fp.selector {
		case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
			if item, ok := item.Msg.(*OpenConnectionChannelSocketRequest_RegisterSocket_); ok {
				item.RegisterSocket = nil
			}
		case OpenConnectionChannelSocketRequest_FieldPathSelectorData:
			if item, ok := item.Msg.(*OpenConnectionChannelSocketRequest_Data); ok {
				item.Data = nil
			}
		case OpenConnectionChannelSocketRequest_FieldPathSelectorError:
			if item, ok := item.Msg.(*OpenConnectionChannelSocketRequest_Error); ok {
				item.Error = nil
			}
		case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
			if item, ok := item.Msg.(*OpenConnectionChannelSocketRequest_Ack); ok {
				item.Ack = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fp.selector))
		}
	}
}

func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*OpenConnectionChannelSocketRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == OpenConnectionChannelSocketRequest_FieldPathSelectorData ||
		fp.selector == OpenConnectionChannelSocketRequest_FieldPathSelectorError
}

func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) WithIValue(value interface{}) OpenConnectionChannelSocketRequest_FieldPathValue {
	switch fp.selector {
	case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
		return &OpenConnectionChannelSocketRequest_FieldTerminalPathValue{OpenConnectionChannelSocketRequest_FieldTerminalPath: *fp, value: value.(*OpenConnectionChannelSocketRequest_RegisterSocket)}
	case OpenConnectionChannelSocketRequest_FieldPathSelectorData:
		return &OpenConnectionChannelSocketRequest_FieldTerminalPathValue{OpenConnectionChannelSocketRequest_FieldTerminalPath: *fp, value: value.([]byte)}
	case OpenConnectionChannelSocketRequest_FieldPathSelectorError:
		return &OpenConnectionChannelSocketRequest_FieldTerminalPathValue{OpenConnectionChannelSocketRequest_FieldTerminalPath: *fp, value: value.([]byte)}
	case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
		return &OpenConnectionChannelSocketRequest_FieldTerminalPathValue{OpenConnectionChannelSocketRequest_FieldTerminalPath: *fp, value: value.(*Ack)}
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fp.selector))
	}
}

func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) OpenConnectionChannelSocketRequest_FieldPathArrayOfValues {
	fpaov := &OpenConnectionChannelSocketRequest_FieldTerminalPathArrayOfValues{OpenConnectionChannelSocketRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
		return &OpenConnectionChannelSocketRequest_FieldTerminalPathArrayOfValues{OpenConnectionChannelSocketRequest_FieldTerminalPath: *fp, values: values.([]*OpenConnectionChannelSocketRequest_RegisterSocket)}
	case OpenConnectionChannelSocketRequest_FieldPathSelectorData:
		return &OpenConnectionChannelSocketRequest_FieldTerminalPathArrayOfValues{OpenConnectionChannelSocketRequest_FieldTerminalPath: *fp, values: values.([][]byte)}
	case OpenConnectionChannelSocketRequest_FieldPathSelectorError:
		return &OpenConnectionChannelSocketRequest_FieldTerminalPathArrayOfValues{OpenConnectionChannelSocketRequest_FieldTerminalPath: *fp, values: values.([][]byte)}
	case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
		return &OpenConnectionChannelSocketRequest_FieldTerminalPathArrayOfValues{OpenConnectionChannelSocketRequest_FieldTerminalPath: *fp, values: values.([]*Ack)}
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) OpenConnectionChannelSocketRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fp.selector))
	}
}

func (fp *OpenConnectionChannelSocketRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type OpenConnectionChannelSocketRequest_FieldSubPath struct {
	selector OpenConnectionChannelSocketRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ OpenConnectionChannelSocketRequest_FieldPath = (*OpenConnectionChannelSocketRequest_FieldSubPath)(nil)

func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) Selector() OpenConnectionChannelSocketRequest_FieldPathSelector {
	return fps.selector
}
func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) AsRegisterSocketSubPath() (OpenConnectionChannelSocketRequestRegisterSocket_FieldPath, bool) {
	res, ok := fps.subPath.(OpenConnectionChannelSocketRequestRegisterSocket_FieldPath)
	return res, ok
}
func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) AsAckSubPath() (Ack_FieldPath, bool) {
	res, ok := fps.subPath.(Ack_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source OpenConnectionChannelSocketRequest
func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) Get(source *OpenConnectionChannelSocketRequest) (values []interface{}) {
	if asRegisterSocketFieldPath, ok := fps.AsRegisterSocketSubPath(); ok {
		values = append(values, asRegisterSocketFieldPath.Get(source.GetRegisterSocket())...)
	} else if asAckFieldPath, ok := fps.AsAckSubPath(); ok {
		values = append(values, asAckFieldPath.Get(source.GetAck())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fps.selector))
	}
	return
}

func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*OpenConnectionChannelSocketRequest))
}

// GetSingle returns value of selected field from source OpenConnectionChannelSocketRequest
func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) GetSingle(source *OpenConnectionChannelSocketRequest) (interface{}, bool) {
	switch fps.selector {
	case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
		if source.GetRegisterSocket() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRegisterSocket())
	case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
		if source.GetAck() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAck())
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fps.selector))
	}
}

func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*OpenConnectionChannelSocketRequest))
}

// GetDefault returns a default value of the field type
func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) ClearValue(item *OpenConnectionChannelSocketRequest) {
	if item != nil {
		switch fps.selector {
		case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
			if item.Msg != nil {
				if item, ok := item.Msg.(*OpenConnectionChannelSocketRequest_RegisterSocket_); ok {
					fps.subPath.ClearValueRaw(item.RegisterSocket)
				}
			}
		case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
			if item.Msg != nil {
				if item, ok := item.Msg.(*OpenConnectionChannelSocketRequest_Ack); ok {
					fps.subPath.ClearValueRaw(item.Ack)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fps.selector))
		}
	}
}

func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*OpenConnectionChannelSocketRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) WithIValue(value interface{}) OpenConnectionChannelSocketRequest_FieldPathValue {
	return &OpenConnectionChannelSocketRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) WithIArrayOfValues(values interface{}) OpenConnectionChannelSocketRequest_FieldPathArrayOfValues {
	return &OpenConnectionChannelSocketRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) WithIArrayItemValue(value interface{}) OpenConnectionChannelSocketRequest_FieldPathArrayItemValue {
	return &OpenConnectionChannelSocketRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *OpenConnectionChannelSocketRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// OpenConnectionChannelSocketRequest_FieldPathValue allows storing values for OpenConnectionChannelSocketRequest fields according to their type
type OpenConnectionChannelSocketRequest_FieldPathValue interface {
	OpenConnectionChannelSocketRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **OpenConnectionChannelSocketRequest)
	CompareWith(*OpenConnectionChannelSocketRequest) (cmp int, comparable bool)
}

func ParseOpenConnectionChannelSocketRequest_FieldPathValue(pathStr, valueStr string) (OpenConnectionChannelSocketRequest_FieldPathValue, error) {
	fp, err := ParseOpenConnectionChannelSocketRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenConnectionChannelSocketRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(OpenConnectionChannelSocketRequest_FieldPathValue), nil
}

func MustParseOpenConnectionChannelSocketRequest_FieldPathValue(pathStr, valueStr string) OpenConnectionChannelSocketRequest_FieldPathValue {
	fpv, err := ParseOpenConnectionChannelSocketRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type OpenConnectionChannelSocketRequest_FieldTerminalPathValue struct {
	OpenConnectionChannelSocketRequest_FieldTerminalPath
	value interface{}
}

var _ OpenConnectionChannelSocketRequest_FieldPathValue = (*OpenConnectionChannelSocketRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'OpenConnectionChannelSocketRequest' as interface{}
func (fpv *OpenConnectionChannelSocketRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *OpenConnectionChannelSocketRequest_FieldTerminalPathValue) AsRegisterSocketValue() (*OpenConnectionChannelSocketRequest_RegisterSocket, bool) {
	res, ok := fpv.value.(*OpenConnectionChannelSocketRequest_RegisterSocket)
	return res, ok
}
func (fpv *OpenConnectionChannelSocketRequest_FieldTerminalPathValue) AsDataValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *OpenConnectionChannelSocketRequest_FieldTerminalPathValue) AsErrorValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *OpenConnectionChannelSocketRequest_FieldTerminalPathValue) AsAckValue() (*Ack, bool) {
	res, ok := fpv.value.(*Ack)
	return res, ok
}

// SetTo stores value for selected field for object OpenConnectionChannelSocketRequest
func (fpv *OpenConnectionChannelSocketRequest_FieldTerminalPathValue) SetTo(target **OpenConnectionChannelSocketRequest) {
	if *target == nil {
		*target = new(OpenConnectionChannelSocketRequest)
	}
	switch fpv.selector {
	case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
		if _, ok := (*target).Msg.(*OpenConnectionChannelSocketRequest_RegisterSocket_); !ok {
			(*target).Msg = &OpenConnectionChannelSocketRequest_RegisterSocket_{}
		}
		(*target).Msg.(*OpenConnectionChannelSocketRequest_RegisterSocket_).RegisterSocket = fpv.value.(*OpenConnectionChannelSocketRequest_RegisterSocket)
	case OpenConnectionChannelSocketRequest_FieldPathSelectorData:
		if _, ok := (*target).Msg.(*OpenConnectionChannelSocketRequest_Data); !ok {
			(*target).Msg = &OpenConnectionChannelSocketRequest_Data{}
		}
		(*target).Msg.(*OpenConnectionChannelSocketRequest_Data).Data = fpv.value.([]byte)
	case OpenConnectionChannelSocketRequest_FieldPathSelectorError:
		if _, ok := (*target).Msg.(*OpenConnectionChannelSocketRequest_Error); !ok {
			(*target).Msg = &OpenConnectionChannelSocketRequest_Error{}
		}
		(*target).Msg.(*OpenConnectionChannelSocketRequest_Error).Error = fpv.value.([]byte)
	case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
		if _, ok := (*target).Msg.(*OpenConnectionChannelSocketRequest_Ack); !ok {
			(*target).Msg = &OpenConnectionChannelSocketRequest_Ack{}
		}
		(*target).Msg.(*OpenConnectionChannelSocketRequest_Ack).Ack = fpv.value.(*Ack)
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fpv.selector))
	}
}

func (fpv *OpenConnectionChannelSocketRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*OpenConnectionChannelSocketRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'OpenConnectionChannelSocketRequest_FieldTerminalPathValue' with the value under path in 'OpenConnectionChannelSocketRequest'.
func (fpv *OpenConnectionChannelSocketRequest_FieldTerminalPathValue) CompareWith(source *OpenConnectionChannelSocketRequest) (int, bool) {
	switch fpv.selector {
	case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
		return 0, false
	case OpenConnectionChannelSocketRequest_FieldPathSelectorData:
		return 0, false
	case OpenConnectionChannelSocketRequest_FieldPathSelectorError:
		return 0, false
	case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fpv.selector))
	}
}

func (fpv *OpenConnectionChannelSocketRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*OpenConnectionChannelSocketRequest))
}

type OpenConnectionChannelSocketRequest_FieldSubPathValue struct {
	OpenConnectionChannelSocketRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ OpenConnectionChannelSocketRequest_FieldPathValue = (*OpenConnectionChannelSocketRequest_FieldSubPathValue)(nil)

func (fpvs *OpenConnectionChannelSocketRequest_FieldSubPathValue) AsRegisterSocketPathValue() (OpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(OpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue)
	return res, ok
}
func (fpvs *OpenConnectionChannelSocketRequest_FieldSubPathValue) AsAckPathValue() (Ack_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Ack_FieldPathValue)
	return res, ok
}

func (fpvs *OpenConnectionChannelSocketRequest_FieldSubPathValue) SetTo(target **OpenConnectionChannelSocketRequest) {
	if *target == nil {
		*target = new(OpenConnectionChannelSocketRequest)
	}
	switch fpvs.Selector() {
	case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
		if _, ok := (*target).Msg.(*OpenConnectionChannelSocketRequest_RegisterSocket_); !ok {
			(*target).Msg = &OpenConnectionChannelSocketRequest_RegisterSocket_{}
		}
		fpvs.subPathValue.(OpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue).SetTo(&(*target).Msg.(*OpenConnectionChannelSocketRequest_RegisterSocket_).RegisterSocket)
	case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
		if _, ok := (*target).Msg.(*OpenConnectionChannelSocketRequest_Ack); !ok {
			(*target).Msg = &OpenConnectionChannelSocketRequest_Ack{}
		}
		fpvs.subPathValue.(Ack_FieldPathValue).SetTo(&(*target).Msg.(*OpenConnectionChannelSocketRequest_Ack).Ack)
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *OpenConnectionChannelSocketRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*OpenConnectionChannelSocketRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *OpenConnectionChannelSocketRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *OpenConnectionChannelSocketRequest_FieldSubPathValue) CompareWith(source *OpenConnectionChannelSocketRequest) (int, bool) {
	switch fpvs.Selector() {
	case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
		return fpvs.subPathValue.(OpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue).CompareWith(source.GetRegisterSocket())
	case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
		return fpvs.subPathValue.(Ack_FieldPathValue).CompareWith(source.GetAck())
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *OpenConnectionChannelSocketRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*OpenConnectionChannelSocketRequest))
}

// OpenConnectionChannelSocketRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for OpenConnectionChannelSocketRequest according to their type
// Present only for array (repeated) types.
type OpenConnectionChannelSocketRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	OpenConnectionChannelSocketRequest_FieldPath
	ContainsValue(*OpenConnectionChannelSocketRequest) bool
}

// ParseOpenConnectionChannelSocketRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseOpenConnectionChannelSocketRequest_FieldPathArrayItemValue(pathStr, valueStr string) (OpenConnectionChannelSocketRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseOpenConnectionChannelSocketRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenConnectionChannelSocketRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(OpenConnectionChannelSocketRequest_FieldPathArrayItemValue), nil
}

func MustParseOpenConnectionChannelSocketRequest_FieldPathArrayItemValue(pathStr, valueStr string) OpenConnectionChannelSocketRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseOpenConnectionChannelSocketRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type OpenConnectionChannelSocketRequest_FieldTerminalPathArrayItemValue struct {
	OpenConnectionChannelSocketRequest_FieldTerminalPath
	value interface{}
}

var _ OpenConnectionChannelSocketRequest_FieldPathArrayItemValue = (*OpenConnectionChannelSocketRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object OpenConnectionChannelSocketRequest as interface{}
func (fpaiv *OpenConnectionChannelSocketRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *OpenConnectionChannelSocketRequest_FieldTerminalPathArrayItemValue) GetSingle(source *OpenConnectionChannelSocketRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *OpenConnectionChannelSocketRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*OpenConnectionChannelSocketRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'OpenConnectionChannelSocketRequest'
func (fpaiv *OpenConnectionChannelSocketRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *OpenConnectionChannelSocketRequest) bool {
	slice := fpaiv.OpenConnectionChannelSocketRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type OpenConnectionChannelSocketRequest_FieldSubPathArrayItemValue struct {
	OpenConnectionChannelSocketRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *OpenConnectionChannelSocketRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *OpenConnectionChannelSocketRequest_FieldSubPathArrayItemValue) AsRegisterSocketPathItemValue() (OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *OpenConnectionChannelSocketRequest_FieldSubPathArrayItemValue) AsAckPathItemValue() (Ack_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'OpenConnectionChannelSocketRequest'
func (fpaivs *OpenConnectionChannelSocketRequest_FieldSubPathArrayItemValue) ContainsValue(source *OpenConnectionChannelSocketRequest) bool {
	switch fpaivs.Selector() {
	case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
		return fpaivs.subPathItemValue.(OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue).ContainsValue(source.GetRegisterSocket())
	case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
		return fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue).ContainsValue(source.GetAck())
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest: %d", fpaivs.Selector()))
	}
}

// OpenConnectionChannelSocketRequest_FieldPathArrayOfValues allows storing slice of values for OpenConnectionChannelSocketRequest fields according to their type
type OpenConnectionChannelSocketRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	OpenConnectionChannelSocketRequest_FieldPath
}

func ParseOpenConnectionChannelSocketRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (OpenConnectionChannelSocketRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseOpenConnectionChannelSocketRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenConnectionChannelSocketRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(OpenConnectionChannelSocketRequest_FieldPathArrayOfValues), nil
}

func MustParseOpenConnectionChannelSocketRequest_FieldPathArrayOfValues(pathStr, valuesStr string) OpenConnectionChannelSocketRequest_FieldPathArrayOfValues {
	fpaov, err := ParseOpenConnectionChannelSocketRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type OpenConnectionChannelSocketRequest_FieldTerminalPathArrayOfValues struct {
	OpenConnectionChannelSocketRequest_FieldTerminalPath
	values interface{}
}

var _ OpenConnectionChannelSocketRequest_FieldPathArrayOfValues = (*OpenConnectionChannelSocketRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *OpenConnectionChannelSocketRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket:
		for _, v := range fpaov.values.([]*OpenConnectionChannelSocketRequest_RegisterSocket) {
			values = append(values, v)
		}
	case OpenConnectionChannelSocketRequest_FieldPathSelectorData:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case OpenConnectionChannelSocketRequest_FieldPathSelectorError:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case OpenConnectionChannelSocketRequest_FieldPathSelectorAck:
		for _, v := range fpaov.values.([]*Ack) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *OpenConnectionChannelSocketRequest_FieldTerminalPathArrayOfValues) AsRegisterSocketArrayOfValues() ([]*OpenConnectionChannelSocketRequest_RegisterSocket, bool) {
	res, ok := fpaov.values.([]*OpenConnectionChannelSocketRequest_RegisterSocket)
	return res, ok
}
func (fpaov *OpenConnectionChannelSocketRequest_FieldTerminalPathArrayOfValues) AsDataArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *OpenConnectionChannelSocketRequest_FieldTerminalPathArrayOfValues) AsErrorArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *OpenConnectionChannelSocketRequest_FieldTerminalPathArrayOfValues) AsAckArrayOfValues() ([]*Ack, bool) {
	res, ok := fpaov.values.([]*Ack)
	return res, ok
}

type OpenConnectionChannelSocketRequest_FieldSubPathArrayOfValues struct {
	OpenConnectionChannelSocketRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ OpenConnectionChannelSocketRequest_FieldPathArrayOfValues = (*OpenConnectionChannelSocketRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *OpenConnectionChannelSocketRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *OpenConnectionChannelSocketRequest_FieldSubPathArrayOfValues) AsRegisterSocketPathArrayOfValues() (OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *OpenConnectionChannelSocketRequest_FieldSubPathArrayOfValues) AsAckPathArrayOfValues() (Ack_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Ack_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type OpenConnectionChannelSocketRequestRegisterSocket_FieldPath interface {
	gotenobject.FieldPath
	Selector() OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelector
	Get(source *OpenConnectionChannelSocketRequest_RegisterSocket) []interface{}
	GetSingle(source *OpenConnectionChannelSocketRequest_RegisterSocket) (interface{}, bool)
	ClearValue(item *OpenConnectionChannelSocketRequest_RegisterSocket)

	// Those methods build corresponding OpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) OpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue
	WithIArrayOfValues(values interface{}) OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue
}

type OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelector int32

const (
	OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorDevice  OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelector = 0
	OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorChannel OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelector = 1
)

func (s OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelector) String() string {
	switch s {
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorDevice:
		return "device"
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorChannel:
		return "channel"
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest_RegisterSocket: %d", s))
	}
}

func BuildOpenConnectionChannelSocketRequestRegisterSocket_FieldPath(fp gotenobject.RawFieldPath) (OpenConnectionChannelSocketRequestRegisterSocket_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object OpenConnectionChannelSocketRequest_RegisterSocket")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device":
			return &OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath{selector: OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorDevice}, nil
		case "channel":
			return &OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath{selector: OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorChannel}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object OpenConnectionChannelSocketRequest_RegisterSocket", fp)
}

func ParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPath(rawField string) (OpenConnectionChannelSocketRequestRegisterSocket_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildOpenConnectionChannelSocketRequestRegisterSocket_FieldPath(fp)
}

func MustParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPath(rawField string) OpenConnectionChannelSocketRequestRegisterSocket_FieldPath {
	fp, err := ParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath struct {
	selector OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelector
}

var _ OpenConnectionChannelSocketRequestRegisterSocket_FieldPath = (*OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath)(nil)

func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) Selector() OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source OpenConnectionChannelSocketRequest_RegisterSocket
func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) Get(source *OpenConnectionChannelSocketRequest_RegisterSocket) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorDevice:
			if source.Device != nil {
				values = append(values, source.Device)
			}
		case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorChannel:
			values = append(values, source.Channel)
		default:
			panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest_RegisterSocket: %d", fp.selector))
		}
	}
	return
}

func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*OpenConnectionChannelSocketRequest_RegisterSocket))
}

// GetSingle returns value pointed by specific field of from source OpenConnectionChannelSocketRequest_RegisterSocket
func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) GetSingle(source *OpenConnectionChannelSocketRequest_RegisterSocket) (interface{}, bool) {
	switch fp.selector {
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorDevice:
		res := source.GetDevice()
		return res, res != nil
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorChannel:
		return source.GetChannel(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest_RegisterSocket: %d", fp.selector))
	}
}

func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*OpenConnectionChannelSocketRequest_RegisterSocket))
}

// GetDefault returns a default value of the field type
func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorDevice:
		return (*device.Reference)(nil)
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorChannel:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest_RegisterSocket: %d", fp.selector))
	}
}

func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) ClearValue(item *OpenConnectionChannelSocketRequest_RegisterSocket) {
	if item != nil {
		switch fp.selector {
		case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorDevice:
			item.Device = nil
		case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorChannel:
			item.Channel = ""
		default:
			panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest_RegisterSocket: %d", fp.selector))
		}
	}
}

func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*OpenConnectionChannelSocketRequest_RegisterSocket))
}

// IsLeaf - whether field path is holds simple value
func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorDevice ||
		fp.selector == OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorChannel
}

func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) WithIValue(value interface{}) OpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue {
	switch fp.selector {
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorDevice:
		return &OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathValue{OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath: *fp, value: value.(*device.Reference)}
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorChannel:
		return &OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathValue{OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest_RegisterSocket: %d", fp.selector))
	}
}

func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) WithIArrayOfValues(values interface{}) OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayOfValues {
	fpaov := &OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathArrayOfValues{OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath: *fp}
	switch fp.selector {
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorDevice:
		return &OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathArrayOfValues{OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath: *fp, values: values.([]*device.Reference)}
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorChannel:
		return &OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathArrayOfValues{OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest_RegisterSocket: %d", fp.selector))
	}
	return fpaov
}

func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) WithIArrayItemValue(value interface{}) OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest_RegisterSocket: %d", fp.selector))
	}
}

func (fp *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// OpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue allows storing values for RegisterSocket fields according to their type
type OpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue interface {
	OpenConnectionChannelSocketRequestRegisterSocket_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **OpenConnectionChannelSocketRequest_RegisterSocket)
	CompareWith(*OpenConnectionChannelSocketRequest_RegisterSocket) (cmp int, comparable bool)
}

func ParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue(pathStr, valueStr string) (OpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue, error) {
	fp, err := ParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegisterSocket field path value from %s: %v", valueStr, err)
	}
	return fpv.(OpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue), nil
}

func MustParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue(pathStr, valueStr string) OpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue {
	fpv, err := ParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathValue struct {
	OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath
	value interface{}
}

var _ OpenConnectionChannelSocketRequestRegisterSocket_FieldPathValue = (*OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RegisterSocket' as interface{}
func (fpv *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathValue) AsDeviceValue() (*device.Reference, bool) {
	res, ok := fpv.value.(*device.Reference)
	return res, ok
}
func (fpv *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathValue) AsChannelValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object RegisterSocket
func (fpv *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathValue) SetTo(target **OpenConnectionChannelSocketRequest_RegisterSocket) {
	if *target == nil {
		*target = new(OpenConnectionChannelSocketRequest_RegisterSocket)
	}
	switch fpv.selector {
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorDevice:
		(*target).Device = fpv.value.(*device.Reference)
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorChannel:
		(*target).Channel = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest_RegisterSocket: %d", fpv.selector))
	}
}

func (fpv *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*OpenConnectionChannelSocketRequest_RegisterSocket)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathValue' with the value under path in 'OpenConnectionChannelSocketRequest_RegisterSocket'.
func (fpv *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathValue) CompareWith(source *OpenConnectionChannelSocketRequest_RegisterSocket) (int, bool) {
	switch fpv.selector {
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorDevice:
		leftValue := fpv.value.(*device.Reference)
		rightValue := source.GetDevice()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorChannel:
		leftValue := fpv.value.(string)
		rightValue := source.GetChannel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketRequest_RegisterSocket: %d", fpv.selector))
	}
}

func (fpv *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*OpenConnectionChannelSocketRequest_RegisterSocket))
}

// OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue allows storing single item in Path-specific values for RegisterSocket according to their type
// Present only for array (repeated) types.
type OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	OpenConnectionChannelSocketRequestRegisterSocket_FieldPath
	ContainsValue(*OpenConnectionChannelSocketRequest_RegisterSocket) bool
}

// ParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue(pathStr, valueStr string) (OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue, error) {
	fp, err := ParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegisterSocket field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue), nil
}

func MustParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue(pathStr, valueStr string) OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue {
	fpaiv, err := ParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathArrayItemValue struct {
	OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath
	value interface{}
}

var _ OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayItemValue = (*OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object OpenConnectionChannelSocketRequest_RegisterSocket as interface{}
func (fpaiv *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathArrayItemValue) GetSingle(source *OpenConnectionChannelSocketRequest_RegisterSocket) (interface{}, bool) {
	return nil, false
}

func (fpaiv *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*OpenConnectionChannelSocketRequest_RegisterSocket))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RegisterSocket'
func (fpaiv *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathArrayItemValue) ContainsValue(source *OpenConnectionChannelSocketRequest_RegisterSocket) bool {
	slice := fpaiv.OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayOfValues allows storing slice of values for RegisterSocket fields according to their type
type OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	OpenConnectionChannelSocketRequestRegisterSocket_FieldPath
}

func ParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayOfValues(pathStr, valuesStr string) (OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayOfValues, error) {
	fp, err := ParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RegisterSocket field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayOfValues), nil
}

func MustParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayOfValues(pathStr, valuesStr string) OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayOfValues {
	fpaov, err := ParseOpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathArrayOfValues struct {
	OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath
	values interface{}
}

var _ OpenConnectionChannelSocketRequestRegisterSocket_FieldPathArrayOfValues = (*OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorDevice:
		for _, v := range fpaov.values.([]*device.Reference) {
			values = append(values, v)
		}
	case OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorChannel:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathArrayOfValues) AsDeviceArrayOfValues() ([]*device.Reference, bool) {
	res, ok := fpaov.values.([]*device.Reference)
	return res, ok
}
func (fpaov *OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPathArrayOfValues) AsChannelArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type OpenConnectionChannelSocketResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() OpenConnectionChannelSocketResponse_FieldPathSelector
	Get(source *OpenConnectionChannelSocketResponse) []interface{}
	GetSingle(source *OpenConnectionChannelSocketResponse) (interface{}, bool)
	ClearValue(item *OpenConnectionChannelSocketResponse)

	// Those methods build corresponding OpenConnectionChannelSocketResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) OpenConnectionChannelSocketResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) OpenConnectionChannelSocketResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) OpenConnectionChannelSocketResponse_FieldPathArrayItemValue
}

type OpenConnectionChannelSocketResponse_FieldPathSelector int32

const (
	OpenConnectionChannelSocketResponse_FieldPathSelectorData OpenConnectionChannelSocketResponse_FieldPathSelector = 0
	OpenConnectionChannelSocketResponse_FieldPathSelectorAck  OpenConnectionChannelSocketResponse_FieldPathSelector = 1
)

func (s OpenConnectionChannelSocketResponse_FieldPathSelector) String() string {
	switch s {
	case OpenConnectionChannelSocketResponse_FieldPathSelectorData:
		return "data"
	case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
		return "ack"
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", s))
	}
}

func BuildOpenConnectionChannelSocketResponse_FieldPath(fp gotenobject.RawFieldPath) (OpenConnectionChannelSocketResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object OpenConnectionChannelSocketResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "data":
			return &OpenConnectionChannelSocketResponse_FieldTerminalPath{selector: OpenConnectionChannelSocketResponse_FieldPathSelectorData}, nil
		case "ack":
			return &OpenConnectionChannelSocketResponse_FieldTerminalPath{selector: OpenConnectionChannelSocketResponse_FieldPathSelectorAck}, nil
		}
	} else {
		switch fp[0] {
		case "ack":
			if subpath, err := BuildAck_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &OpenConnectionChannelSocketResponse_FieldSubPath{selector: OpenConnectionChannelSocketResponse_FieldPathSelectorAck, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object OpenConnectionChannelSocketResponse", fp)
}

func ParseOpenConnectionChannelSocketResponse_FieldPath(rawField string) (OpenConnectionChannelSocketResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildOpenConnectionChannelSocketResponse_FieldPath(fp)
}

func MustParseOpenConnectionChannelSocketResponse_FieldPath(rawField string) OpenConnectionChannelSocketResponse_FieldPath {
	fp, err := ParseOpenConnectionChannelSocketResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type OpenConnectionChannelSocketResponse_FieldTerminalPath struct {
	selector OpenConnectionChannelSocketResponse_FieldPathSelector
}

var _ OpenConnectionChannelSocketResponse_FieldPath = (*OpenConnectionChannelSocketResponse_FieldTerminalPath)(nil)

func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) Selector() OpenConnectionChannelSocketResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source OpenConnectionChannelSocketResponse
func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) Get(source *OpenConnectionChannelSocketResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case OpenConnectionChannelSocketResponse_FieldPathSelectorData:
			if source, ok := source.Msg.(*OpenConnectionChannelSocketResponse_Data); ok && source != nil {
				values = append(values, source.Data)
			}
		case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
			if source, ok := source.Msg.(*OpenConnectionChannelSocketResponse_Ack); ok && source != nil {
				if source.Ack != nil {
					values = append(values, source.Ack)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*OpenConnectionChannelSocketResponse))
}

// GetSingle returns value pointed by specific field of from source OpenConnectionChannelSocketResponse
func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) GetSingle(source *OpenConnectionChannelSocketResponse) (interface{}, bool) {
	switch fp.selector {
	case OpenConnectionChannelSocketResponse_FieldPathSelectorData:
		res := source.GetData()
		return res, res != nil
	case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
		res := source.GetAck()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fp.selector))
	}
}

func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*OpenConnectionChannelSocketResponse))
}

// GetDefault returns a default value of the field type
func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case OpenConnectionChannelSocketResponse_FieldPathSelectorData:
		return ([]byte)(nil)
	case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
		return (*Ack)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fp.selector))
	}
}

func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) ClearValue(item *OpenConnectionChannelSocketResponse) {
	if item != nil {
		switch fp.selector {
		case OpenConnectionChannelSocketResponse_FieldPathSelectorData:
			if item, ok := item.Msg.(*OpenConnectionChannelSocketResponse_Data); ok {
				item.Data = nil
			}
		case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
			if item, ok := item.Msg.(*OpenConnectionChannelSocketResponse_Ack); ok {
				item.Ack = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fp.selector))
		}
	}
}

func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*OpenConnectionChannelSocketResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == OpenConnectionChannelSocketResponse_FieldPathSelectorData
}

func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) WithIValue(value interface{}) OpenConnectionChannelSocketResponse_FieldPathValue {
	switch fp.selector {
	case OpenConnectionChannelSocketResponse_FieldPathSelectorData:
		return &OpenConnectionChannelSocketResponse_FieldTerminalPathValue{OpenConnectionChannelSocketResponse_FieldTerminalPath: *fp, value: value.([]byte)}
	case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
		return &OpenConnectionChannelSocketResponse_FieldTerminalPathValue{OpenConnectionChannelSocketResponse_FieldTerminalPath: *fp, value: value.(*Ack)}
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fp.selector))
	}
}

func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) OpenConnectionChannelSocketResponse_FieldPathArrayOfValues {
	fpaov := &OpenConnectionChannelSocketResponse_FieldTerminalPathArrayOfValues{OpenConnectionChannelSocketResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case OpenConnectionChannelSocketResponse_FieldPathSelectorData:
		return &OpenConnectionChannelSocketResponse_FieldTerminalPathArrayOfValues{OpenConnectionChannelSocketResponse_FieldTerminalPath: *fp, values: values.([][]byte)}
	case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
		return &OpenConnectionChannelSocketResponse_FieldTerminalPathArrayOfValues{OpenConnectionChannelSocketResponse_FieldTerminalPath: *fp, values: values.([]*Ack)}
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) OpenConnectionChannelSocketResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fp.selector))
	}
}

func (fp *OpenConnectionChannelSocketResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type OpenConnectionChannelSocketResponse_FieldSubPath struct {
	selector OpenConnectionChannelSocketResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ OpenConnectionChannelSocketResponse_FieldPath = (*OpenConnectionChannelSocketResponse_FieldSubPath)(nil)

func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) Selector() OpenConnectionChannelSocketResponse_FieldPathSelector {
	return fps.selector
}
func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) AsAckSubPath() (Ack_FieldPath, bool) {
	res, ok := fps.subPath.(Ack_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source OpenConnectionChannelSocketResponse
func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) Get(source *OpenConnectionChannelSocketResponse) (values []interface{}) {
	if asAckFieldPath, ok := fps.AsAckSubPath(); ok {
		values = append(values, asAckFieldPath.Get(source.GetAck())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fps.selector))
	}
	return
}

func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*OpenConnectionChannelSocketResponse))
}

// GetSingle returns value of selected field from source OpenConnectionChannelSocketResponse
func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) GetSingle(source *OpenConnectionChannelSocketResponse) (interface{}, bool) {
	switch fps.selector {
	case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
		if source.GetAck() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAck())
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fps.selector))
	}
}

func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*OpenConnectionChannelSocketResponse))
}

// GetDefault returns a default value of the field type
func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) ClearValue(item *OpenConnectionChannelSocketResponse) {
	if item != nil {
		switch fps.selector {
		case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
			if item.Msg != nil {
				if item, ok := item.Msg.(*OpenConnectionChannelSocketResponse_Ack); ok {
					fps.subPath.ClearValueRaw(item.Ack)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fps.selector))
		}
	}
}

func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*OpenConnectionChannelSocketResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) WithIValue(value interface{}) OpenConnectionChannelSocketResponse_FieldPathValue {
	return &OpenConnectionChannelSocketResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) WithIArrayOfValues(values interface{}) OpenConnectionChannelSocketResponse_FieldPathArrayOfValues {
	return &OpenConnectionChannelSocketResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) WithIArrayItemValue(value interface{}) OpenConnectionChannelSocketResponse_FieldPathArrayItemValue {
	return &OpenConnectionChannelSocketResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *OpenConnectionChannelSocketResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// OpenConnectionChannelSocketResponse_FieldPathValue allows storing values for OpenConnectionChannelSocketResponse fields according to their type
type OpenConnectionChannelSocketResponse_FieldPathValue interface {
	OpenConnectionChannelSocketResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **OpenConnectionChannelSocketResponse)
	CompareWith(*OpenConnectionChannelSocketResponse) (cmp int, comparable bool)
}

func ParseOpenConnectionChannelSocketResponse_FieldPathValue(pathStr, valueStr string) (OpenConnectionChannelSocketResponse_FieldPathValue, error) {
	fp, err := ParseOpenConnectionChannelSocketResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenConnectionChannelSocketResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(OpenConnectionChannelSocketResponse_FieldPathValue), nil
}

func MustParseOpenConnectionChannelSocketResponse_FieldPathValue(pathStr, valueStr string) OpenConnectionChannelSocketResponse_FieldPathValue {
	fpv, err := ParseOpenConnectionChannelSocketResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type OpenConnectionChannelSocketResponse_FieldTerminalPathValue struct {
	OpenConnectionChannelSocketResponse_FieldTerminalPath
	value interface{}
}

var _ OpenConnectionChannelSocketResponse_FieldPathValue = (*OpenConnectionChannelSocketResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'OpenConnectionChannelSocketResponse' as interface{}
func (fpv *OpenConnectionChannelSocketResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *OpenConnectionChannelSocketResponse_FieldTerminalPathValue) AsDataValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *OpenConnectionChannelSocketResponse_FieldTerminalPathValue) AsAckValue() (*Ack, bool) {
	res, ok := fpv.value.(*Ack)
	return res, ok
}

// SetTo stores value for selected field for object OpenConnectionChannelSocketResponse
func (fpv *OpenConnectionChannelSocketResponse_FieldTerminalPathValue) SetTo(target **OpenConnectionChannelSocketResponse) {
	if *target == nil {
		*target = new(OpenConnectionChannelSocketResponse)
	}
	switch fpv.selector {
	case OpenConnectionChannelSocketResponse_FieldPathSelectorData:
		if _, ok := (*target).Msg.(*OpenConnectionChannelSocketResponse_Data); !ok {
			(*target).Msg = &OpenConnectionChannelSocketResponse_Data{}
		}
		(*target).Msg.(*OpenConnectionChannelSocketResponse_Data).Data = fpv.value.([]byte)
	case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
		if _, ok := (*target).Msg.(*OpenConnectionChannelSocketResponse_Ack); !ok {
			(*target).Msg = &OpenConnectionChannelSocketResponse_Ack{}
		}
		(*target).Msg.(*OpenConnectionChannelSocketResponse_Ack).Ack = fpv.value.(*Ack)
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fpv.selector))
	}
}

func (fpv *OpenConnectionChannelSocketResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*OpenConnectionChannelSocketResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'OpenConnectionChannelSocketResponse_FieldTerminalPathValue' with the value under path in 'OpenConnectionChannelSocketResponse'.
func (fpv *OpenConnectionChannelSocketResponse_FieldTerminalPathValue) CompareWith(source *OpenConnectionChannelSocketResponse) (int, bool) {
	switch fpv.selector {
	case OpenConnectionChannelSocketResponse_FieldPathSelectorData:
		return 0, false
	case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fpv.selector))
	}
}

func (fpv *OpenConnectionChannelSocketResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*OpenConnectionChannelSocketResponse))
}

type OpenConnectionChannelSocketResponse_FieldSubPathValue struct {
	OpenConnectionChannelSocketResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ OpenConnectionChannelSocketResponse_FieldPathValue = (*OpenConnectionChannelSocketResponse_FieldSubPathValue)(nil)

func (fpvs *OpenConnectionChannelSocketResponse_FieldSubPathValue) AsAckPathValue() (Ack_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Ack_FieldPathValue)
	return res, ok
}

func (fpvs *OpenConnectionChannelSocketResponse_FieldSubPathValue) SetTo(target **OpenConnectionChannelSocketResponse) {
	if *target == nil {
		*target = new(OpenConnectionChannelSocketResponse)
	}
	switch fpvs.Selector() {
	case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
		if _, ok := (*target).Msg.(*OpenConnectionChannelSocketResponse_Ack); !ok {
			(*target).Msg = &OpenConnectionChannelSocketResponse_Ack{}
		}
		fpvs.subPathValue.(Ack_FieldPathValue).SetTo(&(*target).Msg.(*OpenConnectionChannelSocketResponse_Ack).Ack)
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *OpenConnectionChannelSocketResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*OpenConnectionChannelSocketResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *OpenConnectionChannelSocketResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *OpenConnectionChannelSocketResponse_FieldSubPathValue) CompareWith(source *OpenConnectionChannelSocketResponse) (int, bool) {
	switch fpvs.Selector() {
	case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
		return fpvs.subPathValue.(Ack_FieldPathValue).CompareWith(source.GetAck())
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *OpenConnectionChannelSocketResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*OpenConnectionChannelSocketResponse))
}

// OpenConnectionChannelSocketResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for OpenConnectionChannelSocketResponse according to their type
// Present only for array (repeated) types.
type OpenConnectionChannelSocketResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	OpenConnectionChannelSocketResponse_FieldPath
	ContainsValue(*OpenConnectionChannelSocketResponse) bool
}

// ParseOpenConnectionChannelSocketResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseOpenConnectionChannelSocketResponse_FieldPathArrayItemValue(pathStr, valueStr string) (OpenConnectionChannelSocketResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseOpenConnectionChannelSocketResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenConnectionChannelSocketResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(OpenConnectionChannelSocketResponse_FieldPathArrayItemValue), nil
}

func MustParseOpenConnectionChannelSocketResponse_FieldPathArrayItemValue(pathStr, valueStr string) OpenConnectionChannelSocketResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseOpenConnectionChannelSocketResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type OpenConnectionChannelSocketResponse_FieldTerminalPathArrayItemValue struct {
	OpenConnectionChannelSocketResponse_FieldTerminalPath
	value interface{}
}

var _ OpenConnectionChannelSocketResponse_FieldPathArrayItemValue = (*OpenConnectionChannelSocketResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object OpenConnectionChannelSocketResponse as interface{}
func (fpaiv *OpenConnectionChannelSocketResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *OpenConnectionChannelSocketResponse_FieldTerminalPathArrayItemValue) GetSingle(source *OpenConnectionChannelSocketResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *OpenConnectionChannelSocketResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*OpenConnectionChannelSocketResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'OpenConnectionChannelSocketResponse'
func (fpaiv *OpenConnectionChannelSocketResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *OpenConnectionChannelSocketResponse) bool {
	slice := fpaiv.OpenConnectionChannelSocketResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type OpenConnectionChannelSocketResponse_FieldSubPathArrayItemValue struct {
	OpenConnectionChannelSocketResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *OpenConnectionChannelSocketResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *OpenConnectionChannelSocketResponse_FieldSubPathArrayItemValue) AsAckPathItemValue() (Ack_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'OpenConnectionChannelSocketResponse'
func (fpaivs *OpenConnectionChannelSocketResponse_FieldSubPathArrayItemValue) ContainsValue(source *OpenConnectionChannelSocketResponse) bool {
	switch fpaivs.Selector() {
	case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
		return fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue).ContainsValue(source.GetAck())
	default:
		panic(fmt.Sprintf("Invalid selector for OpenConnectionChannelSocketResponse: %d", fpaivs.Selector()))
	}
}

// OpenConnectionChannelSocketResponse_FieldPathArrayOfValues allows storing slice of values for OpenConnectionChannelSocketResponse fields according to their type
type OpenConnectionChannelSocketResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	OpenConnectionChannelSocketResponse_FieldPath
}

func ParseOpenConnectionChannelSocketResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (OpenConnectionChannelSocketResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseOpenConnectionChannelSocketResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenConnectionChannelSocketResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(OpenConnectionChannelSocketResponse_FieldPathArrayOfValues), nil
}

func MustParseOpenConnectionChannelSocketResponse_FieldPathArrayOfValues(pathStr, valuesStr string) OpenConnectionChannelSocketResponse_FieldPathArrayOfValues {
	fpaov, err := ParseOpenConnectionChannelSocketResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type OpenConnectionChannelSocketResponse_FieldTerminalPathArrayOfValues struct {
	OpenConnectionChannelSocketResponse_FieldTerminalPath
	values interface{}
}

var _ OpenConnectionChannelSocketResponse_FieldPathArrayOfValues = (*OpenConnectionChannelSocketResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *OpenConnectionChannelSocketResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case OpenConnectionChannelSocketResponse_FieldPathSelectorData:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case OpenConnectionChannelSocketResponse_FieldPathSelectorAck:
		for _, v := range fpaov.values.([]*Ack) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *OpenConnectionChannelSocketResponse_FieldTerminalPathArrayOfValues) AsDataArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *OpenConnectionChannelSocketResponse_FieldTerminalPathArrayOfValues) AsAckArrayOfValues() ([]*Ack, bool) {
	res, ok := fpaov.values.([]*Ack)
	return res, ok
}

type OpenConnectionChannelSocketResponse_FieldSubPathArrayOfValues struct {
	OpenConnectionChannelSocketResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ OpenConnectionChannelSocketResponse_FieldPathArrayOfValues = (*OpenConnectionChannelSocketResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *OpenConnectionChannelSocketResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *OpenConnectionChannelSocketResponse_FieldSubPathArrayOfValues) AsAckPathArrayOfValues() (Ack_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Ack_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConnectToDeviceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConnectToDeviceRequest_FieldPathSelector
	Get(source *ConnectToDeviceRequest) []interface{}
	GetSingle(source *ConnectToDeviceRequest) (interface{}, bool)
	ClearValue(item *ConnectToDeviceRequest)

	// Those methods build corresponding ConnectToDeviceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConnectToDeviceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ConnectToDeviceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConnectToDeviceRequest_FieldPathArrayItemValue
}

type ConnectToDeviceRequest_FieldPathSelector int32

const (
	ConnectToDeviceRequest_FieldPathSelectorOpenRequest ConnectToDeviceRequest_FieldPathSelector = 0
	ConnectToDeviceRequest_FieldPathSelectorData        ConnectToDeviceRequest_FieldPathSelector = 1
	ConnectToDeviceRequest_FieldPathSelectorAck         ConnectToDeviceRequest_FieldPathSelector = 2
	ConnectToDeviceRequest_FieldPathSelectorKeepAlive   ConnectToDeviceRequest_FieldPathSelector = 3
)

func (s ConnectToDeviceRequest_FieldPathSelector) String() string {
	switch s {
	case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
		return "open_request"
	case ConnectToDeviceRequest_FieldPathSelectorData:
		return "data"
	case ConnectToDeviceRequest_FieldPathSelectorAck:
		return "ack"
	case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
		return "keep_alive"
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", s))
	}
}

func BuildConnectToDeviceRequest_FieldPath(fp gotenobject.RawFieldPath) (ConnectToDeviceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ConnectToDeviceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "open_request", "openRequest", "open-request":
			return &ConnectToDeviceRequest_FieldTerminalPath{selector: ConnectToDeviceRequest_FieldPathSelectorOpenRequest}, nil
		case "data":
			return &ConnectToDeviceRequest_FieldTerminalPath{selector: ConnectToDeviceRequest_FieldPathSelectorData}, nil
		case "ack":
			return &ConnectToDeviceRequest_FieldTerminalPath{selector: ConnectToDeviceRequest_FieldPathSelectorAck}, nil
		case "keep_alive", "keepAlive", "keep-alive":
			return &ConnectToDeviceRequest_FieldTerminalPath{selector: ConnectToDeviceRequest_FieldPathSelectorKeepAlive}, nil
		}
	} else {
		switch fp[0] {
		case "open_request", "openRequest", "open-request":
			if subpath, err := BuildConnectToDeviceRequestOpenRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectToDeviceRequest_FieldSubPath{selector: ConnectToDeviceRequest_FieldPathSelectorOpenRequest, subPath: subpath}, nil
			}
		case "ack":
			if subpath, err := BuildAck_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectToDeviceRequest_FieldSubPath{selector: ConnectToDeviceRequest_FieldPathSelectorAck, subPath: subpath}, nil
			}
		case "keep_alive", "keepAlive", "keep-alive":
			if subpath, err := BuildConnectToDeviceRequestKeepAlive_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectToDeviceRequest_FieldSubPath{selector: ConnectToDeviceRequest_FieldPathSelectorKeepAlive, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ConnectToDeviceRequest", fp)
}

func ParseConnectToDeviceRequest_FieldPath(rawField string) (ConnectToDeviceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConnectToDeviceRequest_FieldPath(fp)
}

func MustParseConnectToDeviceRequest_FieldPath(rawField string) ConnectToDeviceRequest_FieldPath {
	fp, err := ParseConnectToDeviceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConnectToDeviceRequest_FieldTerminalPath struct {
	selector ConnectToDeviceRequest_FieldPathSelector
}

var _ ConnectToDeviceRequest_FieldPath = (*ConnectToDeviceRequest_FieldTerminalPath)(nil)

func (fp *ConnectToDeviceRequest_FieldTerminalPath) Selector() ConnectToDeviceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConnectToDeviceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConnectToDeviceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ConnectToDeviceRequest
func (fp *ConnectToDeviceRequest_FieldTerminalPath) Get(source *ConnectToDeviceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
			if source, ok := source.Msg.(*ConnectToDeviceRequest_OpenRequest_); ok && source != nil {
				if source.OpenRequest != nil {
					values = append(values, source.OpenRequest)
				}
			}
		case ConnectToDeviceRequest_FieldPathSelectorData:
			if source, ok := source.Msg.(*ConnectToDeviceRequest_Data); ok && source != nil {
				values = append(values, source.Data)
			}
		case ConnectToDeviceRequest_FieldPathSelectorAck:
			if source, ok := source.Msg.(*ConnectToDeviceRequest_Ack); ok && source != nil {
				if source.Ack != nil {
					values = append(values, source.Ack)
				}
			}
		case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
			if source, ok := source.Msg.(*ConnectToDeviceRequest_KeepAlive_); ok && source != nil {
				if source.KeepAlive != nil {
					values = append(values, source.KeepAlive)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ConnectToDeviceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ConnectToDeviceRequest))
}

// GetSingle returns value pointed by specific field of from source ConnectToDeviceRequest
func (fp *ConnectToDeviceRequest_FieldTerminalPath) GetSingle(source *ConnectToDeviceRequest) (interface{}, bool) {
	switch fp.selector {
	case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
		res := source.GetOpenRequest()
		return res, res != nil
	case ConnectToDeviceRequest_FieldPathSelectorData:
		res := source.GetData()
		return res, res != nil
	case ConnectToDeviceRequest_FieldPathSelectorAck:
		res := source.GetAck()
		return res, res != nil
	case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
		res := source.GetKeepAlive()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ConnectToDeviceRequest))
}

// GetDefault returns a default value of the field type
func (fp *ConnectToDeviceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
		return (*ConnectToDeviceRequest_OpenRequest)(nil)
	case ConnectToDeviceRequest_FieldPathSelectorData:
		return ([]byte)(nil)
	case ConnectToDeviceRequest_FieldPathSelectorAck:
		return (*Ack)(nil)
	case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
		return (*ConnectToDeviceRequest_KeepAlive)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceRequest_FieldTerminalPath) ClearValue(item *ConnectToDeviceRequest) {
	if item != nil {
		switch fp.selector {
		case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
			if item, ok := item.Msg.(*ConnectToDeviceRequest_OpenRequest_); ok {
				item.OpenRequest = nil
			}
		case ConnectToDeviceRequest_FieldPathSelectorData:
			if item, ok := item.Msg.(*ConnectToDeviceRequest_Data); ok {
				item.Data = nil
			}
		case ConnectToDeviceRequest_FieldPathSelectorAck:
			if item, ok := item.Msg.(*ConnectToDeviceRequest_Ack); ok {
				item.Ack = nil
			}
		case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
			if item, ok := item.Msg.(*ConnectToDeviceRequest_KeepAlive_); ok {
				item.KeepAlive = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fp.selector))
		}
	}
}

func (fp *ConnectToDeviceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ConnectToDeviceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConnectToDeviceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConnectToDeviceRequest_FieldPathSelectorData
}

func (fp *ConnectToDeviceRequest_FieldTerminalPath) WithIValue(value interface{}) ConnectToDeviceRequest_FieldPathValue {
	switch fp.selector {
	case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
		return &ConnectToDeviceRequest_FieldTerminalPathValue{ConnectToDeviceRequest_FieldTerminalPath: *fp, value: value.(*ConnectToDeviceRequest_OpenRequest)}
	case ConnectToDeviceRequest_FieldPathSelectorData:
		return &ConnectToDeviceRequest_FieldTerminalPathValue{ConnectToDeviceRequest_FieldTerminalPath: *fp, value: value.([]byte)}
	case ConnectToDeviceRequest_FieldPathSelectorAck:
		return &ConnectToDeviceRequest_FieldTerminalPathValue{ConnectToDeviceRequest_FieldTerminalPath: *fp, value: value.(*Ack)}
	case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
		return &ConnectToDeviceRequest_FieldTerminalPathValue{ConnectToDeviceRequest_FieldTerminalPath: *fp, value: value.(*ConnectToDeviceRequest_KeepAlive)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConnectToDeviceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConnectToDeviceRequest_FieldPathArrayOfValues {
	fpaov := &ConnectToDeviceRequest_FieldTerminalPathArrayOfValues{ConnectToDeviceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
		return &ConnectToDeviceRequest_FieldTerminalPathArrayOfValues{ConnectToDeviceRequest_FieldTerminalPath: *fp, values: values.([]*ConnectToDeviceRequest_OpenRequest)}
	case ConnectToDeviceRequest_FieldPathSelectorData:
		return &ConnectToDeviceRequest_FieldTerminalPathArrayOfValues{ConnectToDeviceRequest_FieldTerminalPath: *fp, values: values.([][]byte)}
	case ConnectToDeviceRequest_FieldPathSelectorAck:
		return &ConnectToDeviceRequest_FieldTerminalPathArrayOfValues{ConnectToDeviceRequest_FieldTerminalPath: *fp, values: values.([]*Ack)}
	case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
		return &ConnectToDeviceRequest_FieldTerminalPathArrayOfValues{ConnectToDeviceRequest_FieldTerminalPath: *fp, values: values.([]*ConnectToDeviceRequest_KeepAlive)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConnectToDeviceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConnectToDeviceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConnectToDeviceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ConnectToDeviceRequest_FieldSubPath struct {
	selector ConnectToDeviceRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ConnectToDeviceRequest_FieldPath = (*ConnectToDeviceRequest_FieldSubPath)(nil)

func (fps *ConnectToDeviceRequest_FieldSubPath) Selector() ConnectToDeviceRequest_FieldPathSelector {
	return fps.selector
}
func (fps *ConnectToDeviceRequest_FieldSubPath) AsOpenRequestSubPath() (ConnectToDeviceRequestOpenRequest_FieldPath, bool) {
	res, ok := fps.subPath.(ConnectToDeviceRequestOpenRequest_FieldPath)
	return res, ok
}
func (fps *ConnectToDeviceRequest_FieldSubPath) AsAckSubPath() (Ack_FieldPath, bool) {
	res, ok := fps.subPath.(Ack_FieldPath)
	return res, ok
}
func (fps *ConnectToDeviceRequest_FieldSubPath) AsKeepAliveSubPath() (ConnectToDeviceRequestKeepAlive_FieldPath, bool) {
	res, ok := fps.subPath.(ConnectToDeviceRequestKeepAlive_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ConnectToDeviceRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ConnectToDeviceRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ConnectToDeviceRequest
func (fps *ConnectToDeviceRequest_FieldSubPath) Get(source *ConnectToDeviceRequest) (values []interface{}) {
	if asOpenRequestFieldPath, ok := fps.AsOpenRequestSubPath(); ok {
		values = append(values, asOpenRequestFieldPath.Get(source.GetOpenRequest())...)
	} else if asAckFieldPath, ok := fps.AsAckSubPath(); ok {
		values = append(values, asAckFieldPath.Get(source.GetAck())...)
	} else if asKeepAliveFieldPath, ok := fps.AsKeepAliveSubPath(); ok {
		values = append(values, asKeepAliveFieldPath.Get(source.GetKeepAlive())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fps.selector))
	}
	return
}

func (fps *ConnectToDeviceRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ConnectToDeviceRequest))
}

// GetSingle returns value of selected field from source ConnectToDeviceRequest
func (fps *ConnectToDeviceRequest_FieldSubPath) GetSingle(source *ConnectToDeviceRequest) (interface{}, bool) {
	switch fps.selector {
	case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
		if source.GetOpenRequest() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOpenRequest())
	case ConnectToDeviceRequest_FieldPathSelectorAck:
		if source.GetAck() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAck())
	case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
		if source.GetKeepAlive() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetKeepAlive())
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fps.selector))
	}
}

func (fps *ConnectToDeviceRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ConnectToDeviceRequest))
}

// GetDefault returns a default value of the field type
func (fps *ConnectToDeviceRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ConnectToDeviceRequest_FieldSubPath) ClearValue(item *ConnectToDeviceRequest) {
	if item != nil {
		switch fps.selector {
		case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
			if item.Msg != nil {
				if item, ok := item.Msg.(*ConnectToDeviceRequest_OpenRequest_); ok {
					fps.subPath.ClearValueRaw(item.OpenRequest)
				}
			}
		case ConnectToDeviceRequest_FieldPathSelectorAck:
			if item.Msg != nil {
				if item, ok := item.Msg.(*ConnectToDeviceRequest_Ack); ok {
					fps.subPath.ClearValueRaw(item.Ack)
				}
			}
		case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
			if item.Msg != nil {
				if item, ok := item.Msg.(*ConnectToDeviceRequest_KeepAlive_); ok {
					fps.subPath.ClearValueRaw(item.KeepAlive)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fps.selector))
		}
	}
}

func (fps *ConnectToDeviceRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ConnectToDeviceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ConnectToDeviceRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ConnectToDeviceRequest_FieldSubPath) WithIValue(value interface{}) ConnectToDeviceRequest_FieldPathValue {
	return &ConnectToDeviceRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ConnectToDeviceRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ConnectToDeviceRequest_FieldSubPath) WithIArrayOfValues(values interface{}) ConnectToDeviceRequest_FieldPathArrayOfValues {
	return &ConnectToDeviceRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ConnectToDeviceRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ConnectToDeviceRequest_FieldSubPath) WithIArrayItemValue(value interface{}) ConnectToDeviceRequest_FieldPathArrayItemValue {
	return &ConnectToDeviceRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ConnectToDeviceRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ConnectToDeviceRequest_FieldPathValue allows storing values for ConnectToDeviceRequest fields according to their type
type ConnectToDeviceRequest_FieldPathValue interface {
	ConnectToDeviceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ConnectToDeviceRequest)
	CompareWith(*ConnectToDeviceRequest) (cmp int, comparable bool)
}

func ParseConnectToDeviceRequest_FieldPathValue(pathStr, valueStr string) (ConnectToDeviceRequest_FieldPathValue, error) {
	fp, err := ParseConnectToDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConnectToDeviceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConnectToDeviceRequest_FieldPathValue), nil
}

func MustParseConnectToDeviceRequest_FieldPathValue(pathStr, valueStr string) ConnectToDeviceRequest_FieldPathValue {
	fpv, err := ParseConnectToDeviceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConnectToDeviceRequest_FieldTerminalPathValue struct {
	ConnectToDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ ConnectToDeviceRequest_FieldPathValue = (*ConnectToDeviceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ConnectToDeviceRequest' as interface{}
func (fpv *ConnectToDeviceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConnectToDeviceRequest_FieldTerminalPathValue) AsOpenRequestValue() (*ConnectToDeviceRequest_OpenRequest, bool) {
	res, ok := fpv.value.(*ConnectToDeviceRequest_OpenRequest)
	return res, ok
}
func (fpv *ConnectToDeviceRequest_FieldTerminalPathValue) AsDataValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *ConnectToDeviceRequest_FieldTerminalPathValue) AsAckValue() (*Ack, bool) {
	res, ok := fpv.value.(*Ack)
	return res, ok
}
func (fpv *ConnectToDeviceRequest_FieldTerminalPathValue) AsKeepAliveValue() (*ConnectToDeviceRequest_KeepAlive, bool) {
	res, ok := fpv.value.(*ConnectToDeviceRequest_KeepAlive)
	return res, ok
}

// SetTo stores value for selected field for object ConnectToDeviceRequest
func (fpv *ConnectToDeviceRequest_FieldTerminalPathValue) SetTo(target **ConnectToDeviceRequest) {
	if *target == nil {
		*target = new(ConnectToDeviceRequest)
	}
	switch fpv.selector {
	case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
		if _, ok := (*target).Msg.(*ConnectToDeviceRequest_OpenRequest_); !ok {
			(*target).Msg = &ConnectToDeviceRequest_OpenRequest_{}
		}
		(*target).Msg.(*ConnectToDeviceRequest_OpenRequest_).OpenRequest = fpv.value.(*ConnectToDeviceRequest_OpenRequest)
	case ConnectToDeviceRequest_FieldPathSelectorData:
		if _, ok := (*target).Msg.(*ConnectToDeviceRequest_Data); !ok {
			(*target).Msg = &ConnectToDeviceRequest_Data{}
		}
		(*target).Msg.(*ConnectToDeviceRequest_Data).Data = fpv.value.([]byte)
	case ConnectToDeviceRequest_FieldPathSelectorAck:
		if _, ok := (*target).Msg.(*ConnectToDeviceRequest_Ack); !ok {
			(*target).Msg = &ConnectToDeviceRequest_Ack{}
		}
		(*target).Msg.(*ConnectToDeviceRequest_Ack).Ack = fpv.value.(*Ack)
	case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
		if _, ok := (*target).Msg.(*ConnectToDeviceRequest_KeepAlive_); !ok {
			(*target).Msg = &ConnectToDeviceRequest_KeepAlive_{}
		}
		(*target).Msg.(*ConnectToDeviceRequest_KeepAlive_).KeepAlive = fpv.value.(*ConnectToDeviceRequest_KeepAlive)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *ConnectToDeviceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectToDeviceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConnectToDeviceRequest_FieldTerminalPathValue' with the value under path in 'ConnectToDeviceRequest'.
func (fpv *ConnectToDeviceRequest_FieldTerminalPathValue) CompareWith(source *ConnectToDeviceRequest) (int, bool) {
	switch fpv.selector {
	case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
		return 0, false
	case ConnectToDeviceRequest_FieldPathSelectorData:
		return 0, false
	case ConnectToDeviceRequest_FieldPathSelectorAck:
		return 0, false
	case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *ConnectToDeviceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ConnectToDeviceRequest))
}

type ConnectToDeviceRequest_FieldSubPathValue struct {
	ConnectToDeviceRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ConnectToDeviceRequest_FieldPathValue = (*ConnectToDeviceRequest_FieldSubPathValue)(nil)

func (fpvs *ConnectToDeviceRequest_FieldSubPathValue) AsOpenRequestPathValue() (ConnectToDeviceRequestOpenRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConnectToDeviceRequestOpenRequest_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectToDeviceRequest_FieldSubPathValue) AsAckPathValue() (Ack_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Ack_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectToDeviceRequest_FieldSubPathValue) AsKeepAlivePathValue() (ConnectToDeviceRequestKeepAlive_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConnectToDeviceRequestKeepAlive_FieldPathValue)
	return res, ok
}

func (fpvs *ConnectToDeviceRequest_FieldSubPathValue) SetTo(target **ConnectToDeviceRequest) {
	if *target == nil {
		*target = new(ConnectToDeviceRequest)
	}
	switch fpvs.Selector() {
	case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
		if _, ok := (*target).Msg.(*ConnectToDeviceRequest_OpenRequest_); !ok {
			(*target).Msg = &ConnectToDeviceRequest_OpenRequest_{}
		}
		fpvs.subPathValue.(ConnectToDeviceRequestOpenRequest_FieldPathValue).SetTo(&(*target).Msg.(*ConnectToDeviceRequest_OpenRequest_).OpenRequest)
	case ConnectToDeviceRequest_FieldPathSelectorAck:
		if _, ok := (*target).Msg.(*ConnectToDeviceRequest_Ack); !ok {
			(*target).Msg = &ConnectToDeviceRequest_Ack{}
		}
		fpvs.subPathValue.(Ack_FieldPathValue).SetTo(&(*target).Msg.(*ConnectToDeviceRequest_Ack).Ack)
	case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
		if _, ok := (*target).Msg.(*ConnectToDeviceRequest_KeepAlive_); !ok {
			(*target).Msg = &ConnectToDeviceRequest_KeepAlive_{}
		}
		fpvs.subPathValue.(ConnectToDeviceRequestKeepAlive_FieldPathValue).SetTo(&(*target).Msg.(*ConnectToDeviceRequest_KeepAlive_).KeepAlive)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ConnectToDeviceRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectToDeviceRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ConnectToDeviceRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ConnectToDeviceRequest_FieldSubPathValue) CompareWith(source *ConnectToDeviceRequest) (int, bool) {
	switch fpvs.Selector() {
	case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
		return fpvs.subPathValue.(ConnectToDeviceRequestOpenRequest_FieldPathValue).CompareWith(source.GetOpenRequest())
	case ConnectToDeviceRequest_FieldPathSelectorAck:
		return fpvs.subPathValue.(Ack_FieldPathValue).CompareWith(source.GetAck())
	case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
		return fpvs.subPathValue.(ConnectToDeviceRequestKeepAlive_FieldPathValue).CompareWith(source.GetKeepAlive())
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *ConnectToDeviceRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ConnectToDeviceRequest))
}

// ConnectToDeviceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ConnectToDeviceRequest according to their type
// Present only for array (repeated) types.
type ConnectToDeviceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConnectToDeviceRequest_FieldPath
	ContainsValue(*ConnectToDeviceRequest) bool
}

// ParseConnectToDeviceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConnectToDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ConnectToDeviceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseConnectToDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConnectToDeviceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConnectToDeviceRequest_FieldPathArrayItemValue), nil
}

func MustParseConnectToDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) ConnectToDeviceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseConnectToDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConnectToDeviceRequest_FieldTerminalPathArrayItemValue struct {
	ConnectToDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ ConnectToDeviceRequest_FieldPathArrayItemValue = (*ConnectToDeviceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ConnectToDeviceRequest as interface{}
func (fpaiv *ConnectToDeviceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConnectToDeviceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ConnectToDeviceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConnectToDeviceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ConnectToDeviceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ConnectToDeviceRequest'
func (fpaiv *ConnectToDeviceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ConnectToDeviceRequest) bool {
	slice := fpaiv.ConnectToDeviceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ConnectToDeviceRequest_FieldSubPathArrayItemValue struct {
	ConnectToDeviceRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ConnectToDeviceRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ConnectToDeviceRequest_FieldSubPathArrayItemValue) AsOpenRequestPathItemValue() (ConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectToDeviceRequest_FieldSubPathArrayItemValue) AsAckPathItemValue() (Ack_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectToDeviceRequest_FieldSubPathArrayItemValue) AsKeepAlivePathItemValue() (ConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ConnectToDeviceRequest'
func (fpaivs *ConnectToDeviceRequest_FieldSubPathArrayItemValue) ContainsValue(source *ConnectToDeviceRequest) bool {
	switch fpaivs.Selector() {
	case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
		return fpaivs.subPathItemValue.(ConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue).ContainsValue(source.GetOpenRequest())
	case ConnectToDeviceRequest_FieldPathSelectorAck:
		return fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue).ContainsValue(source.GetAck())
	case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
		return fpaivs.subPathItemValue.(ConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue).ContainsValue(source.GetKeepAlive())
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest: %d", fpaivs.Selector()))
	}
}

// ConnectToDeviceRequest_FieldPathArrayOfValues allows storing slice of values for ConnectToDeviceRequest fields according to their type
type ConnectToDeviceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConnectToDeviceRequest_FieldPath
}

func ParseConnectToDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ConnectToDeviceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseConnectToDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConnectToDeviceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConnectToDeviceRequest_FieldPathArrayOfValues), nil
}

func MustParseConnectToDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ConnectToDeviceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseConnectToDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConnectToDeviceRequest_FieldTerminalPathArrayOfValues struct {
	ConnectToDeviceRequest_FieldTerminalPath
	values interface{}
}

var _ ConnectToDeviceRequest_FieldPathArrayOfValues = (*ConnectToDeviceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConnectToDeviceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConnectToDeviceRequest_FieldPathSelectorOpenRequest:
		for _, v := range fpaov.values.([]*ConnectToDeviceRequest_OpenRequest) {
			values = append(values, v)
		}
	case ConnectToDeviceRequest_FieldPathSelectorData:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case ConnectToDeviceRequest_FieldPathSelectorAck:
		for _, v := range fpaov.values.([]*Ack) {
			values = append(values, v)
		}
	case ConnectToDeviceRequest_FieldPathSelectorKeepAlive:
		for _, v := range fpaov.values.([]*ConnectToDeviceRequest_KeepAlive) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConnectToDeviceRequest_FieldTerminalPathArrayOfValues) AsOpenRequestArrayOfValues() ([]*ConnectToDeviceRequest_OpenRequest, bool) {
	res, ok := fpaov.values.([]*ConnectToDeviceRequest_OpenRequest)
	return res, ok
}
func (fpaov *ConnectToDeviceRequest_FieldTerminalPathArrayOfValues) AsDataArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *ConnectToDeviceRequest_FieldTerminalPathArrayOfValues) AsAckArrayOfValues() ([]*Ack, bool) {
	res, ok := fpaov.values.([]*Ack)
	return res, ok
}
func (fpaov *ConnectToDeviceRequest_FieldTerminalPathArrayOfValues) AsKeepAliveArrayOfValues() ([]*ConnectToDeviceRequest_KeepAlive, bool) {
	res, ok := fpaov.values.([]*ConnectToDeviceRequest_KeepAlive)
	return res, ok
}

type ConnectToDeviceRequest_FieldSubPathArrayOfValues struct {
	ConnectToDeviceRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ConnectToDeviceRequest_FieldPathArrayOfValues = (*ConnectToDeviceRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ConnectToDeviceRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ConnectToDeviceRequest_FieldSubPathArrayOfValues) AsOpenRequestPathArrayOfValues() (ConnectToDeviceRequestOpenRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConnectToDeviceRequestOpenRequest_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectToDeviceRequest_FieldSubPathArrayOfValues) AsAckPathArrayOfValues() (Ack_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Ack_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectToDeviceRequest_FieldSubPathArrayOfValues) AsKeepAlivePathArrayOfValues() (ConnectToDeviceRequestKeepAlive_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConnectToDeviceRequestKeepAlive_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConnectToDeviceRequestOpenRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConnectToDeviceRequestOpenRequest_FieldPathSelector
	Get(source *ConnectToDeviceRequest_OpenRequest) []interface{}
	GetSingle(source *ConnectToDeviceRequest_OpenRequest) (interface{}, bool)
	ClearValue(item *ConnectToDeviceRequest_OpenRequest)

	// Those methods build corresponding ConnectToDeviceRequestOpenRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConnectToDeviceRequestOpenRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ConnectToDeviceRequestOpenRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue
}

type ConnectToDeviceRequestOpenRequest_FieldPathSelector int32

const (
	ConnectToDeviceRequestOpenRequest_FieldPathSelectorDevice  ConnectToDeviceRequestOpenRequest_FieldPathSelector = 0
	ConnectToDeviceRequestOpenRequest_FieldPathSelectorService ConnectToDeviceRequestOpenRequest_FieldPathSelector = 1
	ConnectToDeviceRequestOpenRequest_FieldPathSelectorArg     ConnectToDeviceRequestOpenRequest_FieldPathSelector = 2
)

func (s ConnectToDeviceRequestOpenRequest_FieldPathSelector) String() string {
	switch s {
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorDevice:
		return "device"
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorService:
		return "service"
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorArg:
		return "arg"
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_OpenRequest: %d", s))
	}
}

func BuildConnectToDeviceRequestOpenRequest_FieldPath(fp gotenobject.RawFieldPath) (ConnectToDeviceRequestOpenRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ConnectToDeviceRequest_OpenRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device":
			return &ConnectToDeviceRequestOpenRequest_FieldTerminalPath{selector: ConnectToDeviceRequestOpenRequest_FieldPathSelectorDevice}, nil
		case "service":
			return &ConnectToDeviceRequestOpenRequest_FieldTerminalPath{selector: ConnectToDeviceRequestOpenRequest_FieldPathSelectorService}, nil
		case "arg":
			return &ConnectToDeviceRequestOpenRequest_FieldTerminalPath{selector: ConnectToDeviceRequestOpenRequest_FieldPathSelectorArg}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ConnectToDeviceRequest_OpenRequest", fp)
}

func ParseConnectToDeviceRequestOpenRequest_FieldPath(rawField string) (ConnectToDeviceRequestOpenRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConnectToDeviceRequestOpenRequest_FieldPath(fp)
}

func MustParseConnectToDeviceRequestOpenRequest_FieldPath(rawField string) ConnectToDeviceRequestOpenRequest_FieldPath {
	fp, err := ParseConnectToDeviceRequestOpenRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConnectToDeviceRequestOpenRequest_FieldTerminalPath struct {
	selector ConnectToDeviceRequestOpenRequest_FieldPathSelector
}

var _ ConnectToDeviceRequestOpenRequest_FieldPath = (*ConnectToDeviceRequestOpenRequest_FieldTerminalPath)(nil)

func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) Selector() ConnectToDeviceRequestOpenRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ConnectToDeviceRequest_OpenRequest
func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) Get(source *ConnectToDeviceRequest_OpenRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConnectToDeviceRequestOpenRequest_FieldPathSelectorDevice:
			if source.Device != nil {
				values = append(values, source.Device)
			}
		case ConnectToDeviceRequestOpenRequest_FieldPathSelectorService:
			values = append(values, source.Service)
		case ConnectToDeviceRequestOpenRequest_FieldPathSelectorArg:
			values = append(values, source.Arg)
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_OpenRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ConnectToDeviceRequest_OpenRequest))
}

// GetSingle returns value pointed by specific field of from source ConnectToDeviceRequest_OpenRequest
func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) GetSingle(source *ConnectToDeviceRequest_OpenRequest) (interface{}, bool) {
	switch fp.selector {
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorDevice:
		res := source.GetDevice()
		return res, res != nil
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorService:
		return source.GetService(), source != nil
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorArg:
		return source.GetArg(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ConnectToDeviceRequest_OpenRequest))
}

// GetDefault returns a default value of the field type
func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorDevice:
		return (*device.Reference)(nil)
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorService:
		return BrokerServiceType_BROKER_SERVICE_UNSPECIFIED
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorArg:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) ClearValue(item *ConnectToDeviceRequest_OpenRequest) {
	if item != nil {
		switch fp.selector {
		case ConnectToDeviceRequestOpenRequest_FieldPathSelectorDevice:
			item.Device = nil
		case ConnectToDeviceRequestOpenRequest_FieldPathSelectorService:
			item.Service = BrokerServiceType_BROKER_SERVICE_UNSPECIFIED
		case ConnectToDeviceRequestOpenRequest_FieldPathSelectorArg:
			item.Arg = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_OpenRequest: %d", fp.selector))
		}
	}
}

func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ConnectToDeviceRequest_OpenRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConnectToDeviceRequestOpenRequest_FieldPathSelectorDevice ||
		fp.selector == ConnectToDeviceRequestOpenRequest_FieldPathSelectorService ||
		fp.selector == ConnectToDeviceRequestOpenRequest_FieldPathSelectorArg
}

func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) WithIValue(value interface{}) ConnectToDeviceRequestOpenRequest_FieldPathValue {
	switch fp.selector {
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorDevice:
		return &ConnectToDeviceRequestOpenRequest_FieldTerminalPathValue{ConnectToDeviceRequestOpenRequest_FieldTerminalPath: *fp, value: value.(*device.Reference)}
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorService:
		return &ConnectToDeviceRequestOpenRequest_FieldTerminalPathValue{ConnectToDeviceRequestOpenRequest_FieldTerminalPath: *fp, value: value.(BrokerServiceType)}
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorArg:
		return &ConnectToDeviceRequestOpenRequest_FieldTerminalPathValue{ConnectToDeviceRequestOpenRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConnectToDeviceRequestOpenRequest_FieldPathArrayOfValues {
	fpaov := &ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayOfValues{ConnectToDeviceRequestOpenRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorDevice:
		return &ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayOfValues{ConnectToDeviceRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]*device.Reference)}
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorService:
		return &ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayOfValues{ConnectToDeviceRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]BrokerServiceType)}
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorArg:
		return &ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayOfValues{ConnectToDeviceRequestOpenRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_OpenRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_OpenRequest: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceRequestOpenRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ConnectToDeviceRequestOpenRequest_FieldPathValue allows storing values for OpenRequest fields according to their type
type ConnectToDeviceRequestOpenRequest_FieldPathValue interface {
	ConnectToDeviceRequestOpenRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ConnectToDeviceRequest_OpenRequest)
	CompareWith(*ConnectToDeviceRequest_OpenRequest) (cmp int, comparable bool)
}

func ParseConnectToDeviceRequestOpenRequest_FieldPathValue(pathStr, valueStr string) (ConnectToDeviceRequestOpenRequest_FieldPathValue, error) {
	fp, err := ParseConnectToDeviceRequestOpenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConnectToDeviceRequestOpenRequest_FieldPathValue), nil
}

func MustParseConnectToDeviceRequestOpenRequest_FieldPathValue(pathStr, valueStr string) ConnectToDeviceRequestOpenRequest_FieldPathValue {
	fpv, err := ParseConnectToDeviceRequestOpenRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConnectToDeviceRequestOpenRequest_FieldTerminalPathValue struct {
	ConnectToDeviceRequestOpenRequest_FieldTerminalPath
	value interface{}
}

var _ ConnectToDeviceRequestOpenRequest_FieldPathValue = (*ConnectToDeviceRequestOpenRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'OpenRequest' as interface{}
func (fpv *ConnectToDeviceRequestOpenRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConnectToDeviceRequestOpenRequest_FieldTerminalPathValue) AsDeviceValue() (*device.Reference, bool) {
	res, ok := fpv.value.(*device.Reference)
	return res, ok
}
func (fpv *ConnectToDeviceRequestOpenRequest_FieldTerminalPathValue) AsServiceValue() (BrokerServiceType, bool) {
	res, ok := fpv.value.(BrokerServiceType)
	return res, ok
}
func (fpv *ConnectToDeviceRequestOpenRequest_FieldTerminalPathValue) AsArgValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object OpenRequest
func (fpv *ConnectToDeviceRequestOpenRequest_FieldTerminalPathValue) SetTo(target **ConnectToDeviceRequest_OpenRequest) {
	if *target == nil {
		*target = new(ConnectToDeviceRequest_OpenRequest)
	}
	switch fpv.selector {
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorDevice:
		(*target).Device = fpv.value.(*device.Reference)
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorService:
		(*target).Service = fpv.value.(BrokerServiceType)
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorArg:
		(*target).Arg = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_OpenRequest: %d", fpv.selector))
	}
}

func (fpv *ConnectToDeviceRequestOpenRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectToDeviceRequest_OpenRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConnectToDeviceRequestOpenRequest_FieldTerminalPathValue' with the value under path in 'ConnectToDeviceRequest_OpenRequest'.
func (fpv *ConnectToDeviceRequestOpenRequest_FieldTerminalPathValue) CompareWith(source *ConnectToDeviceRequest_OpenRequest) (int, bool) {
	switch fpv.selector {
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorDevice:
		leftValue := fpv.value.(*device.Reference)
		rightValue := source.GetDevice()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorService:
		leftValue := fpv.value.(BrokerServiceType)
		rightValue := source.GetService()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorArg:
		leftValue := fpv.value.(string)
		rightValue := source.GetArg()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_OpenRequest: %d", fpv.selector))
	}
}

func (fpv *ConnectToDeviceRequestOpenRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ConnectToDeviceRequest_OpenRequest))
}

// ConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for OpenRequest according to their type
// Present only for array (repeated) types.
type ConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConnectToDeviceRequestOpenRequest_FieldPath
	ContainsValue(*ConnectToDeviceRequest_OpenRequest) bool
}

// ParseConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseConnectToDeviceRequestOpenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue), nil
}

func MustParseConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue(pathStr, valueStr string) ConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayItemValue struct {
	ConnectToDeviceRequestOpenRequest_FieldTerminalPath
	value interface{}
}

var _ ConnectToDeviceRequestOpenRequest_FieldPathArrayItemValue = (*ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ConnectToDeviceRequest_OpenRequest as interface{}
func (fpaiv *ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ConnectToDeviceRequest_OpenRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ConnectToDeviceRequest_OpenRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'OpenRequest'
func (fpaiv *ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ConnectToDeviceRequest_OpenRequest) bool {
	slice := fpaiv.ConnectToDeviceRequestOpenRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConnectToDeviceRequestOpenRequest_FieldPathArrayOfValues allows storing slice of values for OpenRequest fields according to their type
type ConnectToDeviceRequestOpenRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConnectToDeviceRequestOpenRequest_FieldPath
}

func ParseConnectToDeviceRequestOpenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ConnectToDeviceRequestOpenRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseConnectToDeviceRequestOpenRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConnectToDeviceRequestOpenRequest_FieldPathArrayOfValues), nil
}

func MustParseConnectToDeviceRequestOpenRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ConnectToDeviceRequestOpenRequest_FieldPathArrayOfValues {
	fpaov, err := ParseConnectToDeviceRequestOpenRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayOfValues struct {
	ConnectToDeviceRequestOpenRequest_FieldTerminalPath
	values interface{}
}

var _ ConnectToDeviceRequestOpenRequest_FieldPathArrayOfValues = (*ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorDevice:
		for _, v := range fpaov.values.([]*device.Reference) {
			values = append(values, v)
		}
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorService:
		for _, v := range fpaov.values.([]BrokerServiceType) {
			values = append(values, v)
		}
	case ConnectToDeviceRequestOpenRequest_FieldPathSelectorArg:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayOfValues) AsDeviceArrayOfValues() ([]*device.Reference, bool) {
	res, ok := fpaov.values.([]*device.Reference)
	return res, ok
}
func (fpaov *ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayOfValues) AsServiceArrayOfValues() ([]BrokerServiceType, bool) {
	res, ok := fpaov.values.([]BrokerServiceType)
	return res, ok
}
func (fpaov *ConnectToDeviceRequestOpenRequest_FieldTerminalPathArrayOfValues) AsArgArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConnectToDeviceRequestKeepAlive_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConnectToDeviceRequestKeepAlive_FieldPathSelector
	Get(source *ConnectToDeviceRequest_KeepAlive) []interface{}
	GetSingle(source *ConnectToDeviceRequest_KeepAlive) (interface{}, bool)
	ClearValue(item *ConnectToDeviceRequest_KeepAlive)

	// Those methods build corresponding ConnectToDeviceRequestKeepAlive_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConnectToDeviceRequestKeepAlive_FieldPathValue
	WithIArrayOfValues(values interface{}) ConnectToDeviceRequestKeepAlive_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue
}

type ConnectToDeviceRequestKeepAlive_FieldPathSelector int32

func (s ConnectToDeviceRequestKeepAlive_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_KeepAlive: %d", s))
	}
}

func BuildConnectToDeviceRequestKeepAlive_FieldPath(fp gotenobject.RawFieldPath) (ConnectToDeviceRequestKeepAlive_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ConnectToDeviceRequest_KeepAlive")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ConnectToDeviceRequest_KeepAlive", fp)
}

func ParseConnectToDeviceRequestKeepAlive_FieldPath(rawField string) (ConnectToDeviceRequestKeepAlive_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConnectToDeviceRequestKeepAlive_FieldPath(fp)
}

func MustParseConnectToDeviceRequestKeepAlive_FieldPath(rawField string) ConnectToDeviceRequestKeepAlive_FieldPath {
	fp, err := ParseConnectToDeviceRequestKeepAlive_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConnectToDeviceRequestKeepAlive_FieldTerminalPath struct {
	selector ConnectToDeviceRequestKeepAlive_FieldPathSelector
}

var _ ConnectToDeviceRequestKeepAlive_FieldPath = (*ConnectToDeviceRequestKeepAlive_FieldTerminalPath)(nil)

func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) Selector() ConnectToDeviceRequestKeepAlive_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ConnectToDeviceRequest_KeepAlive
func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) Get(source *ConnectToDeviceRequest_KeepAlive) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_KeepAlive: %d", fp.selector))
		}
	}
	return
}

func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ConnectToDeviceRequest_KeepAlive))
}

// GetSingle returns value pointed by specific field of from source ConnectToDeviceRequest_KeepAlive
func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) GetSingle(source *ConnectToDeviceRequest_KeepAlive) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_KeepAlive: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ConnectToDeviceRequest_KeepAlive))
}

// GetDefault returns a default value of the field type
func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_KeepAlive: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) ClearValue(item *ConnectToDeviceRequest_KeepAlive) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_KeepAlive: %d", fp.selector))
		}
	}
}

func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ConnectToDeviceRequest_KeepAlive))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) WithIValue(value interface{}) ConnectToDeviceRequestKeepAlive_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_KeepAlive: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConnectToDeviceRequestKeepAlive_FieldPathArrayOfValues {
	fpaov := &ConnectToDeviceRequestKeepAlive_FieldTerminalPathArrayOfValues{ConnectToDeviceRequestKeepAlive_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_KeepAlive: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_KeepAlive: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceRequestKeepAlive_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ConnectToDeviceRequestKeepAlive_FieldPathValue allows storing values for KeepAlive fields according to their type
type ConnectToDeviceRequestKeepAlive_FieldPathValue interface {
	ConnectToDeviceRequestKeepAlive_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ConnectToDeviceRequest_KeepAlive)
	CompareWith(*ConnectToDeviceRequest_KeepAlive) (cmp int, comparable bool)
}

func ParseConnectToDeviceRequestKeepAlive_FieldPathValue(pathStr, valueStr string) (ConnectToDeviceRequestKeepAlive_FieldPathValue, error) {
	fp, err := ParseConnectToDeviceRequestKeepAlive_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing KeepAlive field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConnectToDeviceRequestKeepAlive_FieldPathValue), nil
}

func MustParseConnectToDeviceRequestKeepAlive_FieldPathValue(pathStr, valueStr string) ConnectToDeviceRequestKeepAlive_FieldPathValue {
	fpv, err := ParseConnectToDeviceRequestKeepAlive_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConnectToDeviceRequestKeepAlive_FieldTerminalPathValue struct {
	ConnectToDeviceRequestKeepAlive_FieldTerminalPath
	value interface{}
}

var _ ConnectToDeviceRequestKeepAlive_FieldPathValue = (*ConnectToDeviceRequestKeepAlive_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'KeepAlive' as interface{}
func (fpv *ConnectToDeviceRequestKeepAlive_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object KeepAlive
func (fpv *ConnectToDeviceRequestKeepAlive_FieldTerminalPathValue) SetTo(target **ConnectToDeviceRequest_KeepAlive) {
	if *target == nil {
		*target = new(ConnectToDeviceRequest_KeepAlive)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_KeepAlive: %d", fpv.selector))
	}
}

func (fpv *ConnectToDeviceRequestKeepAlive_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectToDeviceRequest_KeepAlive)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConnectToDeviceRequestKeepAlive_FieldTerminalPathValue' with the value under path in 'ConnectToDeviceRequest_KeepAlive'.
func (fpv *ConnectToDeviceRequestKeepAlive_FieldTerminalPathValue) CompareWith(source *ConnectToDeviceRequest_KeepAlive) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceRequest_KeepAlive: %d", fpv.selector))
	}
}

func (fpv *ConnectToDeviceRequestKeepAlive_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ConnectToDeviceRequest_KeepAlive))
}

// ConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue allows storing single item in Path-specific values for KeepAlive according to their type
// Present only for array (repeated) types.
type ConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConnectToDeviceRequestKeepAlive_FieldPath
	ContainsValue(*ConnectToDeviceRequest_KeepAlive) bool
}

// ParseConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue(pathStr, valueStr string) (ConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue, error) {
	fp, err := ParseConnectToDeviceRequestKeepAlive_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing KeepAlive field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue), nil
}

func MustParseConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue(pathStr, valueStr string) ConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue {
	fpaiv, err := ParseConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConnectToDeviceRequestKeepAlive_FieldTerminalPathArrayItemValue struct {
	ConnectToDeviceRequestKeepAlive_FieldTerminalPath
	value interface{}
}

var _ ConnectToDeviceRequestKeepAlive_FieldPathArrayItemValue = (*ConnectToDeviceRequestKeepAlive_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ConnectToDeviceRequest_KeepAlive as interface{}
func (fpaiv *ConnectToDeviceRequestKeepAlive_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConnectToDeviceRequestKeepAlive_FieldTerminalPathArrayItemValue) GetSingle(source *ConnectToDeviceRequest_KeepAlive) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConnectToDeviceRequestKeepAlive_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ConnectToDeviceRequest_KeepAlive))
}

// Contains returns a boolean indicating if value that is being held is present in given 'KeepAlive'
func (fpaiv *ConnectToDeviceRequestKeepAlive_FieldTerminalPathArrayItemValue) ContainsValue(source *ConnectToDeviceRequest_KeepAlive) bool {
	slice := fpaiv.ConnectToDeviceRequestKeepAlive_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConnectToDeviceRequestKeepAlive_FieldPathArrayOfValues allows storing slice of values for KeepAlive fields according to their type
type ConnectToDeviceRequestKeepAlive_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConnectToDeviceRequestKeepAlive_FieldPath
}

func ParseConnectToDeviceRequestKeepAlive_FieldPathArrayOfValues(pathStr, valuesStr string) (ConnectToDeviceRequestKeepAlive_FieldPathArrayOfValues, error) {
	fp, err := ParseConnectToDeviceRequestKeepAlive_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing KeepAlive field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConnectToDeviceRequestKeepAlive_FieldPathArrayOfValues), nil
}

func MustParseConnectToDeviceRequestKeepAlive_FieldPathArrayOfValues(pathStr, valuesStr string) ConnectToDeviceRequestKeepAlive_FieldPathArrayOfValues {
	fpaov, err := ParseConnectToDeviceRequestKeepAlive_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConnectToDeviceRequestKeepAlive_FieldTerminalPathArrayOfValues struct {
	ConnectToDeviceRequestKeepAlive_FieldTerminalPath
	values interface{}
}

var _ ConnectToDeviceRequestKeepAlive_FieldPathArrayOfValues = (*ConnectToDeviceRequestKeepAlive_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConnectToDeviceRequestKeepAlive_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConnectToDeviceResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConnectToDeviceResponse_FieldPathSelector
	Get(source *ConnectToDeviceResponse) []interface{}
	GetSingle(source *ConnectToDeviceResponse) (interface{}, bool)
	ClearValue(item *ConnectToDeviceResponse)

	// Those methods build corresponding ConnectToDeviceResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConnectToDeviceResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ConnectToDeviceResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConnectToDeviceResponse_FieldPathArrayItemValue
}

type ConnectToDeviceResponse_FieldPathSelector int32

const (
	ConnectToDeviceResponse_FieldPathSelectorOpenResponse ConnectToDeviceResponse_FieldPathSelector = 0
	ConnectToDeviceResponse_FieldPathSelectorData         ConnectToDeviceResponse_FieldPathSelector = 1
	ConnectToDeviceResponse_FieldPathSelectorError        ConnectToDeviceResponse_FieldPathSelector = 2
	ConnectToDeviceResponse_FieldPathSelectorAck          ConnectToDeviceResponse_FieldPathSelector = 3
)

func (s ConnectToDeviceResponse_FieldPathSelector) String() string {
	switch s {
	case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
		return "open_response"
	case ConnectToDeviceResponse_FieldPathSelectorData:
		return "data"
	case ConnectToDeviceResponse_FieldPathSelectorError:
		return "error"
	case ConnectToDeviceResponse_FieldPathSelectorAck:
		return "ack"
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", s))
	}
}

func BuildConnectToDeviceResponse_FieldPath(fp gotenobject.RawFieldPath) (ConnectToDeviceResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ConnectToDeviceResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "open_response", "openResponse", "open-response":
			return &ConnectToDeviceResponse_FieldTerminalPath{selector: ConnectToDeviceResponse_FieldPathSelectorOpenResponse}, nil
		case "data":
			return &ConnectToDeviceResponse_FieldTerminalPath{selector: ConnectToDeviceResponse_FieldPathSelectorData}, nil
		case "error":
			return &ConnectToDeviceResponse_FieldTerminalPath{selector: ConnectToDeviceResponse_FieldPathSelectorError}, nil
		case "ack":
			return &ConnectToDeviceResponse_FieldTerminalPath{selector: ConnectToDeviceResponse_FieldPathSelectorAck}, nil
		}
	} else {
		switch fp[0] {
		case "open_response", "openResponse", "open-response":
			if subpath, err := BuildConnectToDeviceResponseOpenResponse_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectToDeviceResponse_FieldSubPath{selector: ConnectToDeviceResponse_FieldPathSelectorOpenResponse, subPath: subpath}, nil
			}
		case "ack":
			if subpath, err := BuildAck_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ConnectToDeviceResponse_FieldSubPath{selector: ConnectToDeviceResponse_FieldPathSelectorAck, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ConnectToDeviceResponse", fp)
}

func ParseConnectToDeviceResponse_FieldPath(rawField string) (ConnectToDeviceResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConnectToDeviceResponse_FieldPath(fp)
}

func MustParseConnectToDeviceResponse_FieldPath(rawField string) ConnectToDeviceResponse_FieldPath {
	fp, err := ParseConnectToDeviceResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConnectToDeviceResponse_FieldTerminalPath struct {
	selector ConnectToDeviceResponse_FieldPathSelector
}

var _ ConnectToDeviceResponse_FieldPath = (*ConnectToDeviceResponse_FieldTerminalPath)(nil)

func (fp *ConnectToDeviceResponse_FieldTerminalPath) Selector() ConnectToDeviceResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConnectToDeviceResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConnectToDeviceResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ConnectToDeviceResponse
func (fp *ConnectToDeviceResponse_FieldTerminalPath) Get(source *ConnectToDeviceResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
			if source, ok := source.Msg.(*ConnectToDeviceResponse_OpenResponse_); ok && source != nil {
				if source.OpenResponse != nil {
					values = append(values, source.OpenResponse)
				}
			}
		case ConnectToDeviceResponse_FieldPathSelectorData:
			if source, ok := source.Msg.(*ConnectToDeviceResponse_Data); ok && source != nil {
				values = append(values, source.Data)
			}
		case ConnectToDeviceResponse_FieldPathSelectorError:
			if source, ok := source.Msg.(*ConnectToDeviceResponse_Error); ok && source != nil {
				values = append(values, source.Error)
			}
		case ConnectToDeviceResponse_FieldPathSelectorAck:
			if source, ok := source.Msg.(*ConnectToDeviceResponse_Ack); ok && source != nil {
				if source.Ack != nil {
					values = append(values, source.Ack)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ConnectToDeviceResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ConnectToDeviceResponse))
}

// GetSingle returns value pointed by specific field of from source ConnectToDeviceResponse
func (fp *ConnectToDeviceResponse_FieldTerminalPath) GetSingle(source *ConnectToDeviceResponse) (interface{}, bool) {
	switch fp.selector {
	case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
		res := source.GetOpenResponse()
		return res, res != nil
	case ConnectToDeviceResponse_FieldPathSelectorData:
		res := source.GetData()
		return res, res != nil
	case ConnectToDeviceResponse_FieldPathSelectorError:
		res := source.GetError()
		return res, res != nil
	case ConnectToDeviceResponse_FieldPathSelectorAck:
		res := source.GetAck()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ConnectToDeviceResponse))
}

// GetDefault returns a default value of the field type
func (fp *ConnectToDeviceResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
		return (*ConnectToDeviceResponse_OpenResponse)(nil)
	case ConnectToDeviceResponse_FieldPathSelectorData:
		return ([]byte)(nil)
	case ConnectToDeviceResponse_FieldPathSelectorError:
		return ([]byte)(nil)
	case ConnectToDeviceResponse_FieldPathSelectorAck:
		return (*Ack)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceResponse_FieldTerminalPath) ClearValue(item *ConnectToDeviceResponse) {
	if item != nil {
		switch fp.selector {
		case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
			if item, ok := item.Msg.(*ConnectToDeviceResponse_OpenResponse_); ok {
				item.OpenResponse = nil
			}
		case ConnectToDeviceResponse_FieldPathSelectorData:
			if item, ok := item.Msg.(*ConnectToDeviceResponse_Data); ok {
				item.Data = nil
			}
		case ConnectToDeviceResponse_FieldPathSelectorError:
			if item, ok := item.Msg.(*ConnectToDeviceResponse_Error); ok {
				item.Error = nil
			}
		case ConnectToDeviceResponse_FieldPathSelectorAck:
			if item, ok := item.Msg.(*ConnectToDeviceResponse_Ack); ok {
				item.Ack = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fp.selector))
		}
	}
}

func (fp *ConnectToDeviceResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ConnectToDeviceResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConnectToDeviceResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ConnectToDeviceResponse_FieldPathSelectorData ||
		fp.selector == ConnectToDeviceResponse_FieldPathSelectorError
}

func (fp *ConnectToDeviceResponse_FieldTerminalPath) WithIValue(value interface{}) ConnectToDeviceResponse_FieldPathValue {
	switch fp.selector {
	case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
		return &ConnectToDeviceResponse_FieldTerminalPathValue{ConnectToDeviceResponse_FieldTerminalPath: *fp, value: value.(*ConnectToDeviceResponse_OpenResponse)}
	case ConnectToDeviceResponse_FieldPathSelectorData:
		return &ConnectToDeviceResponse_FieldTerminalPathValue{ConnectToDeviceResponse_FieldTerminalPath: *fp, value: value.([]byte)}
	case ConnectToDeviceResponse_FieldPathSelectorError:
		return &ConnectToDeviceResponse_FieldTerminalPathValue{ConnectToDeviceResponse_FieldTerminalPath: *fp, value: value.([]byte)}
	case ConnectToDeviceResponse_FieldPathSelectorAck:
		return &ConnectToDeviceResponse_FieldTerminalPathValue{ConnectToDeviceResponse_FieldTerminalPath: *fp, value: value.(*Ack)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConnectToDeviceResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConnectToDeviceResponse_FieldPathArrayOfValues {
	fpaov := &ConnectToDeviceResponse_FieldTerminalPathArrayOfValues{ConnectToDeviceResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
		return &ConnectToDeviceResponse_FieldTerminalPathArrayOfValues{ConnectToDeviceResponse_FieldTerminalPath: *fp, values: values.([]*ConnectToDeviceResponse_OpenResponse)}
	case ConnectToDeviceResponse_FieldPathSelectorData:
		return &ConnectToDeviceResponse_FieldTerminalPathArrayOfValues{ConnectToDeviceResponse_FieldTerminalPath: *fp, values: values.([][]byte)}
	case ConnectToDeviceResponse_FieldPathSelectorError:
		return &ConnectToDeviceResponse_FieldTerminalPathArrayOfValues{ConnectToDeviceResponse_FieldTerminalPath: *fp, values: values.([][]byte)}
	case ConnectToDeviceResponse_FieldPathSelectorAck:
		return &ConnectToDeviceResponse_FieldTerminalPathArrayOfValues{ConnectToDeviceResponse_FieldTerminalPath: *fp, values: values.([]*Ack)}
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConnectToDeviceResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConnectToDeviceResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConnectToDeviceResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ConnectToDeviceResponse_FieldSubPath struct {
	selector ConnectToDeviceResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ConnectToDeviceResponse_FieldPath = (*ConnectToDeviceResponse_FieldSubPath)(nil)

func (fps *ConnectToDeviceResponse_FieldSubPath) Selector() ConnectToDeviceResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ConnectToDeviceResponse_FieldSubPath) AsOpenResponseSubPath() (ConnectToDeviceResponseOpenResponse_FieldPath, bool) {
	res, ok := fps.subPath.(ConnectToDeviceResponseOpenResponse_FieldPath)
	return res, ok
}
func (fps *ConnectToDeviceResponse_FieldSubPath) AsAckSubPath() (Ack_FieldPath, bool) {
	res, ok := fps.subPath.(Ack_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ConnectToDeviceResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ConnectToDeviceResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ConnectToDeviceResponse
func (fps *ConnectToDeviceResponse_FieldSubPath) Get(source *ConnectToDeviceResponse) (values []interface{}) {
	if asOpenResponseFieldPath, ok := fps.AsOpenResponseSubPath(); ok {
		values = append(values, asOpenResponseFieldPath.Get(source.GetOpenResponse())...)
	} else if asAckFieldPath, ok := fps.AsAckSubPath(); ok {
		values = append(values, asAckFieldPath.Get(source.GetAck())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fps.selector))
	}
	return
}

func (fps *ConnectToDeviceResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ConnectToDeviceResponse))
}

// GetSingle returns value of selected field from source ConnectToDeviceResponse
func (fps *ConnectToDeviceResponse_FieldSubPath) GetSingle(source *ConnectToDeviceResponse) (interface{}, bool) {
	switch fps.selector {
	case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
		if source.GetOpenResponse() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOpenResponse())
	case ConnectToDeviceResponse_FieldPathSelectorAck:
		if source.GetAck() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAck())
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fps.selector))
	}
}

func (fps *ConnectToDeviceResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ConnectToDeviceResponse))
}

// GetDefault returns a default value of the field type
func (fps *ConnectToDeviceResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ConnectToDeviceResponse_FieldSubPath) ClearValue(item *ConnectToDeviceResponse) {
	if item != nil {
		switch fps.selector {
		case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
			if item.Msg != nil {
				if item, ok := item.Msg.(*ConnectToDeviceResponse_OpenResponse_); ok {
					fps.subPath.ClearValueRaw(item.OpenResponse)
				}
			}
		case ConnectToDeviceResponse_FieldPathSelectorAck:
			if item.Msg != nil {
				if item, ok := item.Msg.(*ConnectToDeviceResponse_Ack); ok {
					fps.subPath.ClearValueRaw(item.Ack)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fps.selector))
		}
	}
}

func (fps *ConnectToDeviceResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ConnectToDeviceResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ConnectToDeviceResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ConnectToDeviceResponse_FieldSubPath) WithIValue(value interface{}) ConnectToDeviceResponse_FieldPathValue {
	return &ConnectToDeviceResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ConnectToDeviceResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ConnectToDeviceResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ConnectToDeviceResponse_FieldPathArrayOfValues {
	return &ConnectToDeviceResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ConnectToDeviceResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ConnectToDeviceResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ConnectToDeviceResponse_FieldPathArrayItemValue {
	return &ConnectToDeviceResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ConnectToDeviceResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ConnectToDeviceResponse_FieldPathValue allows storing values for ConnectToDeviceResponse fields according to their type
type ConnectToDeviceResponse_FieldPathValue interface {
	ConnectToDeviceResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ConnectToDeviceResponse)
	CompareWith(*ConnectToDeviceResponse) (cmp int, comparable bool)
}

func ParseConnectToDeviceResponse_FieldPathValue(pathStr, valueStr string) (ConnectToDeviceResponse_FieldPathValue, error) {
	fp, err := ParseConnectToDeviceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConnectToDeviceResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConnectToDeviceResponse_FieldPathValue), nil
}

func MustParseConnectToDeviceResponse_FieldPathValue(pathStr, valueStr string) ConnectToDeviceResponse_FieldPathValue {
	fpv, err := ParseConnectToDeviceResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConnectToDeviceResponse_FieldTerminalPathValue struct {
	ConnectToDeviceResponse_FieldTerminalPath
	value interface{}
}

var _ ConnectToDeviceResponse_FieldPathValue = (*ConnectToDeviceResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ConnectToDeviceResponse' as interface{}
func (fpv *ConnectToDeviceResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ConnectToDeviceResponse_FieldTerminalPathValue) AsOpenResponseValue() (*ConnectToDeviceResponse_OpenResponse, bool) {
	res, ok := fpv.value.(*ConnectToDeviceResponse_OpenResponse)
	return res, ok
}
func (fpv *ConnectToDeviceResponse_FieldTerminalPathValue) AsDataValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *ConnectToDeviceResponse_FieldTerminalPathValue) AsErrorValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *ConnectToDeviceResponse_FieldTerminalPathValue) AsAckValue() (*Ack, bool) {
	res, ok := fpv.value.(*Ack)
	return res, ok
}

// SetTo stores value for selected field for object ConnectToDeviceResponse
func (fpv *ConnectToDeviceResponse_FieldTerminalPathValue) SetTo(target **ConnectToDeviceResponse) {
	if *target == nil {
		*target = new(ConnectToDeviceResponse)
	}
	switch fpv.selector {
	case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
		if _, ok := (*target).Msg.(*ConnectToDeviceResponse_OpenResponse_); !ok {
			(*target).Msg = &ConnectToDeviceResponse_OpenResponse_{}
		}
		(*target).Msg.(*ConnectToDeviceResponse_OpenResponse_).OpenResponse = fpv.value.(*ConnectToDeviceResponse_OpenResponse)
	case ConnectToDeviceResponse_FieldPathSelectorData:
		if _, ok := (*target).Msg.(*ConnectToDeviceResponse_Data); !ok {
			(*target).Msg = &ConnectToDeviceResponse_Data{}
		}
		(*target).Msg.(*ConnectToDeviceResponse_Data).Data = fpv.value.([]byte)
	case ConnectToDeviceResponse_FieldPathSelectorError:
		if _, ok := (*target).Msg.(*ConnectToDeviceResponse_Error); !ok {
			(*target).Msg = &ConnectToDeviceResponse_Error{}
		}
		(*target).Msg.(*ConnectToDeviceResponse_Error).Error = fpv.value.([]byte)
	case ConnectToDeviceResponse_FieldPathSelectorAck:
		if _, ok := (*target).Msg.(*ConnectToDeviceResponse_Ack); !ok {
			(*target).Msg = &ConnectToDeviceResponse_Ack{}
		}
		(*target).Msg.(*ConnectToDeviceResponse_Ack).Ack = fpv.value.(*Ack)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fpv.selector))
	}
}

func (fpv *ConnectToDeviceResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectToDeviceResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConnectToDeviceResponse_FieldTerminalPathValue' with the value under path in 'ConnectToDeviceResponse'.
func (fpv *ConnectToDeviceResponse_FieldTerminalPathValue) CompareWith(source *ConnectToDeviceResponse) (int, bool) {
	switch fpv.selector {
	case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
		return 0, false
	case ConnectToDeviceResponse_FieldPathSelectorData:
		return 0, false
	case ConnectToDeviceResponse_FieldPathSelectorError:
		return 0, false
	case ConnectToDeviceResponse_FieldPathSelectorAck:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fpv.selector))
	}
}

func (fpv *ConnectToDeviceResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ConnectToDeviceResponse))
}

type ConnectToDeviceResponse_FieldSubPathValue struct {
	ConnectToDeviceResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ConnectToDeviceResponse_FieldPathValue = (*ConnectToDeviceResponse_FieldSubPathValue)(nil)

func (fpvs *ConnectToDeviceResponse_FieldSubPathValue) AsOpenResponsePathValue() (ConnectToDeviceResponseOpenResponse_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ConnectToDeviceResponseOpenResponse_FieldPathValue)
	return res, ok
}
func (fpvs *ConnectToDeviceResponse_FieldSubPathValue) AsAckPathValue() (Ack_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Ack_FieldPathValue)
	return res, ok
}

func (fpvs *ConnectToDeviceResponse_FieldSubPathValue) SetTo(target **ConnectToDeviceResponse) {
	if *target == nil {
		*target = new(ConnectToDeviceResponse)
	}
	switch fpvs.Selector() {
	case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
		if _, ok := (*target).Msg.(*ConnectToDeviceResponse_OpenResponse_); !ok {
			(*target).Msg = &ConnectToDeviceResponse_OpenResponse_{}
		}
		fpvs.subPathValue.(ConnectToDeviceResponseOpenResponse_FieldPathValue).SetTo(&(*target).Msg.(*ConnectToDeviceResponse_OpenResponse_).OpenResponse)
	case ConnectToDeviceResponse_FieldPathSelectorAck:
		if _, ok := (*target).Msg.(*ConnectToDeviceResponse_Ack); !ok {
			(*target).Msg = &ConnectToDeviceResponse_Ack{}
		}
		fpvs.subPathValue.(Ack_FieldPathValue).SetTo(&(*target).Msg.(*ConnectToDeviceResponse_Ack).Ack)
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ConnectToDeviceResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectToDeviceResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ConnectToDeviceResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ConnectToDeviceResponse_FieldSubPathValue) CompareWith(source *ConnectToDeviceResponse) (int, bool) {
	switch fpvs.Selector() {
	case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
		return fpvs.subPathValue.(ConnectToDeviceResponseOpenResponse_FieldPathValue).CompareWith(source.GetOpenResponse())
	case ConnectToDeviceResponse_FieldPathSelectorAck:
		return fpvs.subPathValue.(Ack_FieldPathValue).CompareWith(source.GetAck())
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ConnectToDeviceResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ConnectToDeviceResponse))
}

// ConnectToDeviceResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ConnectToDeviceResponse according to their type
// Present only for array (repeated) types.
type ConnectToDeviceResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConnectToDeviceResponse_FieldPath
	ContainsValue(*ConnectToDeviceResponse) bool
}

// ParseConnectToDeviceResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConnectToDeviceResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ConnectToDeviceResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseConnectToDeviceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConnectToDeviceResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConnectToDeviceResponse_FieldPathArrayItemValue), nil
}

func MustParseConnectToDeviceResponse_FieldPathArrayItemValue(pathStr, valueStr string) ConnectToDeviceResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseConnectToDeviceResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConnectToDeviceResponse_FieldTerminalPathArrayItemValue struct {
	ConnectToDeviceResponse_FieldTerminalPath
	value interface{}
}

var _ ConnectToDeviceResponse_FieldPathArrayItemValue = (*ConnectToDeviceResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ConnectToDeviceResponse as interface{}
func (fpaiv *ConnectToDeviceResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConnectToDeviceResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ConnectToDeviceResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConnectToDeviceResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ConnectToDeviceResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ConnectToDeviceResponse'
func (fpaiv *ConnectToDeviceResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ConnectToDeviceResponse) bool {
	slice := fpaiv.ConnectToDeviceResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ConnectToDeviceResponse_FieldSubPathArrayItemValue struct {
	ConnectToDeviceResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ConnectToDeviceResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ConnectToDeviceResponse_FieldSubPathArrayItemValue) AsOpenResponsePathItemValue() (ConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ConnectToDeviceResponse_FieldSubPathArrayItemValue) AsAckPathItemValue() (Ack_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ConnectToDeviceResponse'
func (fpaivs *ConnectToDeviceResponse_FieldSubPathArrayItemValue) ContainsValue(source *ConnectToDeviceResponse) bool {
	switch fpaivs.Selector() {
	case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
		return fpaivs.subPathItemValue.(ConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue).ContainsValue(source.GetOpenResponse())
	case ConnectToDeviceResponse_FieldPathSelectorAck:
		return fpaivs.subPathItemValue.(Ack_FieldPathArrayItemValue).ContainsValue(source.GetAck())
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse: %d", fpaivs.Selector()))
	}
}

// ConnectToDeviceResponse_FieldPathArrayOfValues allows storing slice of values for ConnectToDeviceResponse fields according to their type
type ConnectToDeviceResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConnectToDeviceResponse_FieldPath
}

func ParseConnectToDeviceResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ConnectToDeviceResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseConnectToDeviceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ConnectToDeviceResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConnectToDeviceResponse_FieldPathArrayOfValues), nil
}

func MustParseConnectToDeviceResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ConnectToDeviceResponse_FieldPathArrayOfValues {
	fpaov, err := ParseConnectToDeviceResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConnectToDeviceResponse_FieldTerminalPathArrayOfValues struct {
	ConnectToDeviceResponse_FieldTerminalPath
	values interface{}
}

var _ ConnectToDeviceResponse_FieldPathArrayOfValues = (*ConnectToDeviceResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConnectToDeviceResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ConnectToDeviceResponse_FieldPathSelectorOpenResponse:
		for _, v := range fpaov.values.([]*ConnectToDeviceResponse_OpenResponse) {
			values = append(values, v)
		}
	case ConnectToDeviceResponse_FieldPathSelectorData:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case ConnectToDeviceResponse_FieldPathSelectorError:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case ConnectToDeviceResponse_FieldPathSelectorAck:
		for _, v := range fpaov.values.([]*Ack) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ConnectToDeviceResponse_FieldTerminalPathArrayOfValues) AsOpenResponseArrayOfValues() ([]*ConnectToDeviceResponse_OpenResponse, bool) {
	res, ok := fpaov.values.([]*ConnectToDeviceResponse_OpenResponse)
	return res, ok
}
func (fpaov *ConnectToDeviceResponse_FieldTerminalPathArrayOfValues) AsDataArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *ConnectToDeviceResponse_FieldTerminalPathArrayOfValues) AsErrorArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *ConnectToDeviceResponse_FieldTerminalPathArrayOfValues) AsAckArrayOfValues() ([]*Ack, bool) {
	res, ok := fpaov.values.([]*Ack)
	return res, ok
}

type ConnectToDeviceResponse_FieldSubPathArrayOfValues struct {
	ConnectToDeviceResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ConnectToDeviceResponse_FieldPathArrayOfValues = (*ConnectToDeviceResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ConnectToDeviceResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ConnectToDeviceResponse_FieldSubPathArrayOfValues) AsOpenResponsePathArrayOfValues() (ConnectToDeviceResponseOpenResponse_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ConnectToDeviceResponseOpenResponse_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ConnectToDeviceResponse_FieldSubPathArrayOfValues) AsAckPathArrayOfValues() (Ack_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Ack_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ConnectToDeviceResponseOpenResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ConnectToDeviceResponseOpenResponse_FieldPathSelector
	Get(source *ConnectToDeviceResponse_OpenResponse) []interface{}
	GetSingle(source *ConnectToDeviceResponse_OpenResponse) (interface{}, bool)
	ClearValue(item *ConnectToDeviceResponse_OpenResponse)

	// Those methods build corresponding ConnectToDeviceResponseOpenResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ConnectToDeviceResponseOpenResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ConnectToDeviceResponseOpenResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue
}

type ConnectToDeviceResponseOpenResponse_FieldPathSelector int32

func (s ConnectToDeviceResponseOpenResponse_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse_OpenResponse: %d", s))
	}
}

func BuildConnectToDeviceResponseOpenResponse_FieldPath(fp gotenobject.RawFieldPath) (ConnectToDeviceResponseOpenResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ConnectToDeviceResponse_OpenResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ConnectToDeviceResponse_OpenResponse", fp)
}

func ParseConnectToDeviceResponseOpenResponse_FieldPath(rawField string) (ConnectToDeviceResponseOpenResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildConnectToDeviceResponseOpenResponse_FieldPath(fp)
}

func MustParseConnectToDeviceResponseOpenResponse_FieldPath(rawField string) ConnectToDeviceResponseOpenResponse_FieldPath {
	fp, err := ParseConnectToDeviceResponseOpenResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ConnectToDeviceResponseOpenResponse_FieldTerminalPath struct {
	selector ConnectToDeviceResponseOpenResponse_FieldPathSelector
}

var _ ConnectToDeviceResponseOpenResponse_FieldPath = (*ConnectToDeviceResponseOpenResponse_FieldTerminalPath)(nil)

func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) Selector() ConnectToDeviceResponseOpenResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ConnectToDeviceResponse_OpenResponse
func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) Get(source *ConnectToDeviceResponse_OpenResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse_OpenResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ConnectToDeviceResponse_OpenResponse))
}

// GetSingle returns value pointed by specific field of from source ConnectToDeviceResponse_OpenResponse
func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) GetSingle(source *ConnectToDeviceResponse_OpenResponse) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse_OpenResponse: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ConnectToDeviceResponse_OpenResponse))
}

// GetDefault returns a default value of the field type
func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse_OpenResponse: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) ClearValue(item *ConnectToDeviceResponse_OpenResponse) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse_OpenResponse: %d", fp.selector))
		}
	}
}

func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ConnectToDeviceResponse_OpenResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) WithIValue(value interface{}) ConnectToDeviceResponseOpenResponse_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse_OpenResponse: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ConnectToDeviceResponseOpenResponse_FieldPathArrayOfValues {
	fpaov := &ConnectToDeviceResponseOpenResponse_FieldTerminalPathArrayOfValues{ConnectToDeviceResponseOpenResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse_OpenResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse_OpenResponse: %d", fp.selector))
	}
}

func (fp *ConnectToDeviceResponseOpenResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ConnectToDeviceResponseOpenResponse_FieldPathValue allows storing values for OpenResponse fields according to their type
type ConnectToDeviceResponseOpenResponse_FieldPathValue interface {
	ConnectToDeviceResponseOpenResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ConnectToDeviceResponse_OpenResponse)
	CompareWith(*ConnectToDeviceResponse_OpenResponse) (cmp int, comparable bool)
}

func ParseConnectToDeviceResponseOpenResponse_FieldPathValue(pathStr, valueStr string) (ConnectToDeviceResponseOpenResponse_FieldPathValue, error) {
	fp, err := ParseConnectToDeviceResponseOpenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ConnectToDeviceResponseOpenResponse_FieldPathValue), nil
}

func MustParseConnectToDeviceResponseOpenResponse_FieldPathValue(pathStr, valueStr string) ConnectToDeviceResponseOpenResponse_FieldPathValue {
	fpv, err := ParseConnectToDeviceResponseOpenResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ConnectToDeviceResponseOpenResponse_FieldTerminalPathValue struct {
	ConnectToDeviceResponseOpenResponse_FieldTerminalPath
	value interface{}
}

var _ ConnectToDeviceResponseOpenResponse_FieldPathValue = (*ConnectToDeviceResponseOpenResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'OpenResponse' as interface{}
func (fpv *ConnectToDeviceResponseOpenResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object OpenResponse
func (fpv *ConnectToDeviceResponseOpenResponse_FieldTerminalPathValue) SetTo(target **ConnectToDeviceResponse_OpenResponse) {
	if *target == nil {
		*target = new(ConnectToDeviceResponse_OpenResponse)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse_OpenResponse: %d", fpv.selector))
	}
}

func (fpv *ConnectToDeviceResponseOpenResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ConnectToDeviceResponse_OpenResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ConnectToDeviceResponseOpenResponse_FieldTerminalPathValue' with the value under path in 'ConnectToDeviceResponse_OpenResponse'.
func (fpv *ConnectToDeviceResponseOpenResponse_FieldTerminalPathValue) CompareWith(source *ConnectToDeviceResponse_OpenResponse) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ConnectToDeviceResponse_OpenResponse: %d", fpv.selector))
	}
}

func (fpv *ConnectToDeviceResponseOpenResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ConnectToDeviceResponse_OpenResponse))
}

// ConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for OpenResponse according to their type
// Present only for array (repeated) types.
type ConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ConnectToDeviceResponseOpenResponse_FieldPath
	ContainsValue(*ConnectToDeviceResponse_OpenResponse) bool
}

// ParseConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseConnectToDeviceResponseOpenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue), nil
}

func MustParseConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue(pathStr, valueStr string) ConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ConnectToDeviceResponseOpenResponse_FieldTerminalPathArrayItemValue struct {
	ConnectToDeviceResponseOpenResponse_FieldTerminalPath
	value interface{}
}

var _ ConnectToDeviceResponseOpenResponse_FieldPathArrayItemValue = (*ConnectToDeviceResponseOpenResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ConnectToDeviceResponse_OpenResponse as interface{}
func (fpaiv *ConnectToDeviceResponseOpenResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ConnectToDeviceResponseOpenResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ConnectToDeviceResponse_OpenResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ConnectToDeviceResponseOpenResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ConnectToDeviceResponse_OpenResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'OpenResponse'
func (fpaiv *ConnectToDeviceResponseOpenResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ConnectToDeviceResponse_OpenResponse) bool {
	slice := fpaiv.ConnectToDeviceResponseOpenResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ConnectToDeviceResponseOpenResponse_FieldPathArrayOfValues allows storing slice of values for OpenResponse fields according to their type
type ConnectToDeviceResponseOpenResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ConnectToDeviceResponseOpenResponse_FieldPath
}

func ParseConnectToDeviceResponseOpenResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ConnectToDeviceResponseOpenResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseConnectToDeviceResponseOpenResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OpenResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ConnectToDeviceResponseOpenResponse_FieldPathArrayOfValues), nil
}

func MustParseConnectToDeviceResponseOpenResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ConnectToDeviceResponseOpenResponse_FieldPathArrayOfValues {
	fpaov, err := ParseConnectToDeviceResponseOpenResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ConnectToDeviceResponseOpenResponse_FieldTerminalPathArrayOfValues struct {
	ConnectToDeviceResponseOpenResponse_FieldTerminalPath
	values interface{}
}

var _ ConnectToDeviceResponseOpenResponse_FieldPathArrayOfValues = (*ConnectToDeviceResponseOpenResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ConnectToDeviceResponseOpenResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Ack_FieldPath interface {
	gotenobject.FieldPath
	Selector() Ack_FieldPathSelector
	Get(source *Ack) []interface{}
	GetSingle(source *Ack) (interface{}, bool)
	ClearValue(item *Ack)

	// Those methods build corresponding Ack_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Ack_FieldPathValue
	WithIArrayOfValues(values interface{}) Ack_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Ack_FieldPathArrayItemValue
}

type Ack_FieldPathSelector int32

const (
	Ack_FieldPathSelectorProcessed Ack_FieldPathSelector = 0
)

func (s Ack_FieldPathSelector) String() string {
	switch s {
	case Ack_FieldPathSelectorProcessed:
		return "processed"
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", s))
	}
}

func BuildAck_FieldPath(fp gotenobject.RawFieldPath) (Ack_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Ack")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "processed":
			return &Ack_FieldTerminalPath{selector: Ack_FieldPathSelectorProcessed}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Ack", fp)
}

func ParseAck_FieldPath(rawField string) (Ack_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAck_FieldPath(fp)
}

func MustParseAck_FieldPath(rawField string) Ack_FieldPath {
	fp, err := ParseAck_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Ack_FieldTerminalPath struct {
	selector Ack_FieldPathSelector
}

var _ Ack_FieldPath = (*Ack_FieldTerminalPath)(nil)

func (fp *Ack_FieldTerminalPath) Selector() Ack_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Ack_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Ack_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Ack
func (fp *Ack_FieldTerminalPath) Get(source *Ack) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Ack_FieldPathSelectorProcessed:
			values = append(values, source.Processed)
		default:
			panic(fmt.Sprintf("Invalid selector for Ack: %d", fp.selector))
		}
	}
	return
}

func (fp *Ack_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Ack))
}

// GetSingle returns value pointed by specific field of from source Ack
func (fp *Ack_FieldTerminalPath) GetSingle(source *Ack) (interface{}, bool) {
	switch fp.selector {
	case Ack_FieldPathSelectorProcessed:
		return source.GetProcessed(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", fp.selector))
	}
}

func (fp *Ack_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Ack))
}

// GetDefault returns a default value of the field type
func (fp *Ack_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Ack_FieldPathSelectorProcessed:
		return uint64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", fp.selector))
	}
}

func (fp *Ack_FieldTerminalPath) ClearValue(item *Ack) {
	if item != nil {
		switch fp.selector {
		case Ack_FieldPathSelectorProcessed:
			item.Processed = uint64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Ack: %d", fp.selector))
		}
	}
}

func (fp *Ack_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Ack))
}

// IsLeaf - whether field path is holds simple value
func (fp *Ack_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Ack_FieldPathSelectorProcessed
}

func (fp *Ack_FieldTerminalPath) WithIValue(value interface{}) Ack_FieldPathValue {
	switch fp.selector {
	case Ack_FieldPathSelectorProcessed:
		return &Ack_FieldTerminalPathValue{Ack_FieldTerminalPath: *fp, value: value.(uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", fp.selector))
	}
}

func (fp *Ack_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Ack_FieldTerminalPath) WithIArrayOfValues(values interface{}) Ack_FieldPathArrayOfValues {
	fpaov := &Ack_FieldTerminalPathArrayOfValues{Ack_FieldTerminalPath: *fp}
	switch fp.selector {
	case Ack_FieldPathSelectorProcessed:
		return &Ack_FieldTerminalPathArrayOfValues{Ack_FieldTerminalPath: *fp, values: values.([]uint64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", fp.selector))
	}
	return fpaov
}

func (fp *Ack_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Ack_FieldTerminalPath) WithIArrayItemValue(value interface{}) Ack_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", fp.selector))
	}
}

func (fp *Ack_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// Ack_FieldPathValue allows storing values for Ack fields according to their type
type Ack_FieldPathValue interface {
	Ack_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Ack)
	CompareWith(*Ack) (cmp int, comparable bool)
}

func ParseAck_FieldPathValue(pathStr, valueStr string) (Ack_FieldPathValue, error) {
	fp, err := ParseAck_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Ack field path value from %s: %v", valueStr, err)
	}
	return fpv.(Ack_FieldPathValue), nil
}

func MustParseAck_FieldPathValue(pathStr, valueStr string) Ack_FieldPathValue {
	fpv, err := ParseAck_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Ack_FieldTerminalPathValue struct {
	Ack_FieldTerminalPath
	value interface{}
}

var _ Ack_FieldPathValue = (*Ack_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Ack' as interface{}
func (fpv *Ack_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Ack_FieldTerminalPathValue) AsProcessedValue() (uint64, bool) {
	res, ok := fpv.value.(uint64)
	return res, ok
}

// SetTo stores value for selected field for object Ack
func (fpv *Ack_FieldTerminalPathValue) SetTo(target **Ack) {
	if *target == nil {
		*target = new(Ack)
	}
	switch fpv.selector {
	case Ack_FieldPathSelectorProcessed:
		(*target).Processed = fpv.value.(uint64)
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", fpv.selector))
	}
}

func (fpv *Ack_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Ack)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Ack_FieldTerminalPathValue' with the value under path in 'Ack'.
func (fpv *Ack_FieldTerminalPathValue) CompareWith(source *Ack) (int, bool) {
	switch fpv.selector {
	case Ack_FieldPathSelectorProcessed:
		leftValue := fpv.value.(uint64)
		rightValue := source.GetProcessed()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Ack: %d", fpv.selector))
	}
}

func (fpv *Ack_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Ack))
}

// Ack_FieldPathArrayItemValue allows storing single item in Path-specific values for Ack according to their type
// Present only for array (repeated) types.
type Ack_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Ack_FieldPath
	ContainsValue(*Ack) bool
}

// ParseAck_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAck_FieldPathArrayItemValue(pathStr, valueStr string) (Ack_FieldPathArrayItemValue, error) {
	fp, err := ParseAck_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Ack field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Ack_FieldPathArrayItemValue), nil
}

func MustParseAck_FieldPathArrayItemValue(pathStr, valueStr string) Ack_FieldPathArrayItemValue {
	fpaiv, err := ParseAck_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Ack_FieldTerminalPathArrayItemValue struct {
	Ack_FieldTerminalPath
	value interface{}
}

var _ Ack_FieldPathArrayItemValue = (*Ack_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Ack as interface{}
func (fpaiv *Ack_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Ack_FieldTerminalPathArrayItemValue) GetSingle(source *Ack) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Ack_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Ack))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Ack'
func (fpaiv *Ack_FieldTerminalPathArrayItemValue) ContainsValue(source *Ack) bool {
	slice := fpaiv.Ack_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// Ack_FieldPathArrayOfValues allows storing slice of values for Ack fields according to their type
type Ack_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Ack_FieldPath
}

func ParseAck_FieldPathArrayOfValues(pathStr, valuesStr string) (Ack_FieldPathArrayOfValues, error) {
	fp, err := ParseAck_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Ack field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Ack_FieldPathArrayOfValues), nil
}

func MustParseAck_FieldPathArrayOfValues(pathStr, valuesStr string) Ack_FieldPathArrayOfValues {
	fpaov, err := ParseAck_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Ack_FieldTerminalPathArrayOfValues struct {
	Ack_FieldTerminalPath
	values interface{}
}

var _ Ack_FieldPathArrayOfValues = (*Ack_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Ack_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Ack_FieldPathSelectorProcessed:
		for _, v := range fpaov.values.([]uint64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Ack_FieldTerminalPathArrayOfValues) AsProcessedArrayOfValues() ([]uint64, bool) {
	res, ok := fpaov.values.([]uint64)
	return res, ok
}
