// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha/provisioning_policy_custom.proto
// DO NOT EDIT!!!

package provisioning_policy_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/device"
	provisioning_approval_request "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/provisioning_approval_request"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/provisioning_policy"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &api.Account{}
	_ = &device.Device{}
	_ = &provisioning_approval_request.ProvisioningApprovalRequest{}
	_ = &provisioning_policy.ProvisioningPolicy{}
)

func (o *ProvisionDeviceViaPolicyRequest) GotenObjectExt() {}

func (o *ProvisionDeviceViaPolicyRequest) MakeFullFieldMask() *ProvisionDeviceViaPolicyRequest_FieldMask {
	return FullProvisionDeviceViaPolicyRequest_FieldMask()
}

func (o *ProvisionDeviceViaPolicyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProvisionDeviceViaPolicyRequest_FieldMask()
}

func (o *ProvisionDeviceViaPolicyRequest) MakeDiffFieldMask(other *ProvisionDeviceViaPolicyRequest) *ProvisionDeviceViaPolicyRequest_FieldMask {
	if o == nil && other == nil {
		return &ProvisionDeviceViaPolicyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProvisionDeviceViaPolicyRequest_FieldMask()
	}

	res := &ProvisionDeviceViaPolicyRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &ProvisionDeviceViaPolicyRequest_FieldTerminalPath{selector: ProvisionDeviceViaPolicyRequest_FieldPathSelectorName})
	}
	{
		subMask := o.GetDeviceStatus().MakeDiffFieldMask(other.GetDeviceStatus())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProvisionDeviceViaPolicyRequest_FieldTerminalPath{selector: ProvisionDeviceViaPolicyRequest_FieldPathSelectorDeviceStatus})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProvisionDeviceViaPolicyRequest_FieldSubPath{selector: ProvisionDeviceViaPolicyRequest_FieldPathSelectorDeviceStatus, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ProvisionDeviceViaPolicyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProvisionDeviceViaPolicyRequest))
}

func (o *ProvisionDeviceViaPolicyRequest) Clone() *ProvisionDeviceViaPolicyRequest {
	if o == nil {
		return nil
	}
	result := &ProvisionDeviceViaPolicyRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &provisioning_policy.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DeviceStatus = o.DeviceStatus.Clone()
	return result
}

func (o *ProvisionDeviceViaPolicyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProvisionDeviceViaPolicyRequest) Merge(source *ProvisionDeviceViaPolicyRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &provisioning_policy.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetDeviceStatus() != nil {
		if o.DeviceStatus == nil {
			o.DeviceStatus = new(device.Device_Status)
		}
		o.DeviceStatus.Merge(source.GetDeviceStatus())
	}
}

func (o *ProvisionDeviceViaPolicyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProvisionDeviceViaPolicyRequest))
}

func (o *ProvisionDeviceViaPolicyResponse) GotenObjectExt() {}

func (o *ProvisionDeviceViaPolicyResponse) MakeFullFieldMask() *ProvisionDeviceViaPolicyResponse_FieldMask {
	return FullProvisionDeviceViaPolicyResponse_FieldMask()
}

func (o *ProvisionDeviceViaPolicyResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProvisionDeviceViaPolicyResponse_FieldMask()
}

func (o *ProvisionDeviceViaPolicyResponse) MakeDiffFieldMask(other *ProvisionDeviceViaPolicyResponse) *ProvisionDeviceViaPolicyResponse_FieldMask {
	if o == nil && other == nil {
		return &ProvisionDeviceViaPolicyResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProvisionDeviceViaPolicyResponse_FieldMask()
	}

	res := &ProvisionDeviceViaPolicyResponse_FieldMask{}
	{
		subMask := o.GetDevice().MakeDiffFieldMask(other.GetDevice())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProvisionDeviceViaPolicyResponse_FieldTerminalPath{selector: ProvisionDeviceViaPolicyResponse_FieldPathSelectorDevice})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProvisionDeviceViaPolicyResponse_FieldSubPath{selector: ProvisionDeviceViaPolicyResponse_FieldPathSelectorDevice, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetServiceAccount().MakeDiffFieldMask(other.GetServiceAccount())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProvisionDeviceViaPolicyResponse_FieldTerminalPath{selector: ProvisionDeviceViaPolicyResponse_FieldPathSelectorServiceAccount})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProvisionDeviceViaPolicyResponse_FieldSubPath{selector: ProvisionDeviceViaPolicyResponse_FieldPathSelectorServiceAccount, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ProvisionDeviceViaPolicyResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProvisionDeviceViaPolicyResponse))
}

func (o *ProvisionDeviceViaPolicyResponse) Clone() *ProvisionDeviceViaPolicyResponse {
	if o == nil {
		return nil
	}
	result := &ProvisionDeviceViaPolicyResponse{}
	result.Device = o.Device.Clone()
	result.ServiceAccount = o.ServiceAccount.Clone()
	return result
}

func (o *ProvisionDeviceViaPolicyResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProvisionDeviceViaPolicyResponse) Merge(source *ProvisionDeviceViaPolicyResponse) {
	if source.GetDevice() != nil {
		if o.Device == nil {
			o.Device = new(device.Device)
		}
		o.Device.Merge(source.GetDevice())
	}
	if source.GetServiceAccount() != nil {
		if o.ServiceAccount == nil {
			o.ServiceAccount = new(api.ServiceAccount)
		}
		o.ServiceAccount.Merge(source.GetServiceAccount())
	}
}

func (o *ProvisionDeviceViaPolicyResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProvisionDeviceViaPolicyResponse))
}

func (o *RequestProvisioningApprovalRequest) GotenObjectExt() {}

func (o *RequestProvisioningApprovalRequest) MakeFullFieldMask() *RequestProvisioningApprovalRequest_FieldMask {
	return FullRequestProvisioningApprovalRequest_FieldMask()
}

func (o *RequestProvisioningApprovalRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRequestProvisioningApprovalRequest_FieldMask()
}

func (o *RequestProvisioningApprovalRequest) MakeDiffFieldMask(other *RequestProvisioningApprovalRequest) *RequestProvisioningApprovalRequest_FieldMask {
	if o == nil && other == nil {
		return &RequestProvisioningApprovalRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRequestProvisioningApprovalRequest_FieldMask()
	}

	res := &RequestProvisioningApprovalRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &RequestProvisioningApprovalRequest_FieldTerminalPath{selector: RequestProvisioningApprovalRequest_FieldPathSelectorName})
	}
	return res
}

func (o *RequestProvisioningApprovalRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RequestProvisioningApprovalRequest))
}

func (o *RequestProvisioningApprovalRequest) Clone() *RequestProvisioningApprovalRequest {
	if o == nil {
		return nil
	}
	result := &RequestProvisioningApprovalRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &provisioning_policy.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *RequestProvisioningApprovalRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RequestProvisioningApprovalRequest) Merge(source *RequestProvisioningApprovalRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &provisioning_policy.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *RequestProvisioningApprovalRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RequestProvisioningApprovalRequest))
}

func (o *RequestProvisioningApprovalResponse) GotenObjectExt() {}

func (o *RequestProvisioningApprovalResponse) MakeFullFieldMask() *RequestProvisioningApprovalResponse_FieldMask {
	return FullRequestProvisioningApprovalResponse_FieldMask()
}

func (o *RequestProvisioningApprovalResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRequestProvisioningApprovalResponse_FieldMask()
}

func (o *RequestProvisioningApprovalResponse) MakeDiffFieldMask(other *RequestProvisioningApprovalResponse) *RequestProvisioningApprovalResponse_FieldMask {
	if o == nil && other == nil {
		return &RequestProvisioningApprovalResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRequestProvisioningApprovalResponse_FieldMask()
	}

	res := &RequestProvisioningApprovalResponse_FieldMask{}
	{
		subMask := o.GetRequest().MakeDiffFieldMask(other.GetRequest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &RequestProvisioningApprovalResponse_FieldTerminalPath{selector: RequestProvisioningApprovalResponse_FieldPathSelectorRequest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &RequestProvisioningApprovalResponse_FieldSubPath{selector: RequestProvisioningApprovalResponse_FieldPathSelectorRequest, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetServiceAccount().MakeDiffFieldMask(other.GetServiceAccount())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &RequestProvisioningApprovalResponse_FieldTerminalPath{selector: RequestProvisioningApprovalResponse_FieldPathSelectorServiceAccount})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &RequestProvisioningApprovalResponse_FieldSubPath{selector: RequestProvisioningApprovalResponse_FieldPathSelectorServiceAccount, subPath: subpath})
			}
		}
	}
	return res
}

func (o *RequestProvisioningApprovalResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RequestProvisioningApprovalResponse))
}

func (o *RequestProvisioningApprovalResponse) Clone() *RequestProvisioningApprovalResponse {
	if o == nil {
		return nil
	}
	result := &RequestProvisioningApprovalResponse{}
	result.Request = o.Request.Clone()
	result.ServiceAccount = o.ServiceAccount.Clone()
	return result
}

func (o *RequestProvisioningApprovalResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RequestProvisioningApprovalResponse) Merge(source *RequestProvisioningApprovalResponse) {
	if source.GetRequest() != nil {
		if o.Request == nil {
			o.Request = new(provisioning_approval_request.ProvisioningApprovalRequest)
		}
		o.Request.Merge(source.GetRequest())
	}
	if source.GetServiceAccount() != nil {
		if o.ServiceAccount == nil {
			o.ServiceAccount = new(api.ServiceAccount)
		}
		o.ServiceAccount.Merge(source.GetServiceAccount())
	}
}

func (o *RequestProvisioningApprovalResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RequestProvisioningApprovalResponse))
}

func (o *ProvisionServiceAccountToProvisioningPolicyRequest) GotenObjectExt() {}

func (o *ProvisionServiceAccountToProvisioningPolicyRequest) MakeFullFieldMask() *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask {
	return FullProvisionServiceAccountToProvisioningPolicyRequest_FieldMask()
}

func (o *ProvisionServiceAccountToProvisioningPolicyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProvisionServiceAccountToProvisioningPolicyRequest_FieldMask()
}

func (o *ProvisionServiceAccountToProvisioningPolicyRequest) MakeDiffFieldMask(other *ProvisionServiceAccountToProvisioningPolicyRequest) *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask {
	if o == nil && other == nil {
		return &ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProvisionServiceAccountToProvisioningPolicyRequest_FieldMask()
	}

	res := &ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &ProvisionServiceAccountToProvisioningPolicyRequest_FieldTerminalPath{selector: ProvisionServiceAccountToProvisioningPolicyRequest_FieldPathSelectorName})
	}
	return res
}

func (o *ProvisionServiceAccountToProvisioningPolicyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProvisionServiceAccountToProvisioningPolicyRequest))
}

func (o *ProvisionServiceAccountToProvisioningPolicyRequest) Clone() *ProvisionServiceAccountToProvisioningPolicyRequest {
	if o == nil {
		return nil
	}
	result := &ProvisionServiceAccountToProvisioningPolicyRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &provisioning_policy.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ProvisionServiceAccountToProvisioningPolicyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProvisionServiceAccountToProvisioningPolicyRequest) Merge(source *ProvisionServiceAccountToProvisioningPolicyRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &provisioning_policy.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *ProvisionServiceAccountToProvisioningPolicyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProvisionServiceAccountToProvisioningPolicyRequest))
}

func (o *ProvisionServiceAccountToProvisioningPolicyResponse) GotenObjectExt() {}

func (o *ProvisionServiceAccountToProvisioningPolicyResponse) MakeFullFieldMask() *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask {
	return FullProvisionServiceAccountToProvisioningPolicyResponse_FieldMask()
}

func (o *ProvisionServiceAccountToProvisioningPolicyResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProvisionServiceAccountToProvisioningPolicyResponse_FieldMask()
}

func (o *ProvisionServiceAccountToProvisioningPolicyResponse) MakeDiffFieldMask(other *ProvisionServiceAccountToProvisioningPolicyResponse) *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask {
	if o == nil && other == nil {
		return &ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProvisionServiceAccountToProvisioningPolicyResponse_FieldMask()
	}

	res := &ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask{}
	{
		subMask := o.GetServiceAccount().MakeDiffFieldMask(other.GetServiceAccount())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProvisionServiceAccountToProvisioningPolicyResponse_FieldTerminalPath{selector: ProvisionServiceAccountToProvisioningPolicyResponse_FieldPathSelectorServiceAccount})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProvisionServiceAccountToProvisioningPolicyResponse_FieldSubPath{selector: ProvisionServiceAccountToProvisioningPolicyResponse_FieldPathSelectorServiceAccount, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ProvisionServiceAccountToProvisioningPolicyResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProvisionServiceAccountToProvisioningPolicyResponse))
}

func (o *ProvisionServiceAccountToProvisioningPolicyResponse) Clone() *ProvisionServiceAccountToProvisioningPolicyResponse {
	if o == nil {
		return nil
	}
	result := &ProvisionServiceAccountToProvisioningPolicyResponse{}
	result.ServiceAccount = o.ServiceAccount.Clone()
	return result
}

func (o *ProvisionServiceAccountToProvisioningPolicyResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProvisionServiceAccountToProvisioningPolicyResponse) Merge(source *ProvisionServiceAccountToProvisioningPolicyResponse) {
	if source.GetServiceAccount() != nil {
		if o.ServiceAccount == nil {
			o.ServiceAccount = new(api.ServiceAccount)
		}
		o.ServiceAccount.Merge(source.GetServiceAccount())
	}
}

func (o *ProvisionServiceAccountToProvisioningPolicyResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProvisionServiceAccountToProvisioningPolicyResponse))
}

func (o *RemoveServiceAccountFromProvisioningPolicyRequest) GotenObjectExt() {}

func (o *RemoveServiceAccountFromProvisioningPolicyRequest) MakeFullFieldMask() *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask {
	return FullRemoveServiceAccountFromProvisioningPolicyRequest_FieldMask()
}

func (o *RemoveServiceAccountFromProvisioningPolicyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRemoveServiceAccountFromProvisioningPolicyRequest_FieldMask()
}

func (o *RemoveServiceAccountFromProvisioningPolicyRequest) MakeDiffFieldMask(other *RemoveServiceAccountFromProvisioningPolicyRequest) *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask {
	if o == nil && other == nil {
		return &RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRemoveServiceAccountFromProvisioningPolicyRequest_FieldMask()
	}

	res := &RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &RemoveServiceAccountFromProvisioningPolicyRequest_FieldTerminalPath{selector: RemoveServiceAccountFromProvisioningPolicyRequest_FieldPathSelectorName})
	}
	return res
}

func (o *RemoveServiceAccountFromProvisioningPolicyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RemoveServiceAccountFromProvisioningPolicyRequest))
}

func (o *RemoveServiceAccountFromProvisioningPolicyRequest) Clone() *RemoveServiceAccountFromProvisioningPolicyRequest {
	if o == nil {
		return nil
	}
	result := &RemoveServiceAccountFromProvisioningPolicyRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &provisioning_policy.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *RemoveServiceAccountFromProvisioningPolicyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RemoveServiceAccountFromProvisioningPolicyRequest) Merge(source *RemoveServiceAccountFromProvisioningPolicyRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &provisioning_policy.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *RemoveServiceAccountFromProvisioningPolicyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RemoveServiceAccountFromProvisioningPolicyRequest))
}

func (o *RemoveServiceAccountFromProvisioningPolicyResponse) GotenObjectExt() {}

func (o *RemoveServiceAccountFromProvisioningPolicyResponse) MakeFullFieldMask() *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask {
	return FullRemoveServiceAccountFromProvisioningPolicyResponse_FieldMask()
}

func (o *RemoveServiceAccountFromProvisioningPolicyResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRemoveServiceAccountFromProvisioningPolicyResponse_FieldMask()
}

func (o *RemoveServiceAccountFromProvisioningPolicyResponse) MakeDiffFieldMask(other *RemoveServiceAccountFromProvisioningPolicyResponse) *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask {
	if o == nil && other == nil {
		return &RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRemoveServiceAccountFromProvisioningPolicyResponse_FieldMask()
	}

	res := &RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask{}
	if o.GetRemoved() != other.GetRemoved() {
		res.Paths = append(res.Paths, &RemoveServiceAccountFromProvisioningPolicyResponse_FieldTerminalPath{selector: RemoveServiceAccountFromProvisioningPolicyResponse_FieldPathSelectorRemoved})
	}
	return res
}

func (o *RemoveServiceAccountFromProvisioningPolicyResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RemoveServiceAccountFromProvisioningPolicyResponse))
}

func (o *RemoveServiceAccountFromProvisioningPolicyResponse) Clone() *RemoveServiceAccountFromProvisioningPolicyResponse {
	if o == nil {
		return nil
	}
	result := &RemoveServiceAccountFromProvisioningPolicyResponse{}
	result.Removed = o.Removed
	return result
}

func (o *RemoveServiceAccountFromProvisioningPolicyResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RemoveServiceAccountFromProvisioningPolicyResponse) Merge(source *RemoveServiceAccountFromProvisioningPolicyResponse) {
	o.Removed = source.GetRemoved()
}

func (o *RemoveServiceAccountFromProvisioningPolicyResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RemoveServiceAccountFromProvisioningPolicyResponse))
}
