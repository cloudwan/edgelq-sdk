// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha/provisioning_policy_custom.proto
// DO NOT EDIT!!!

package provisioning_policy_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/device"
	provisioning_approval_request "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/provisioning_approval_request"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/provisioning_policy"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &api.Account{}
	_ = &device.Device{}
	_ = &provisioning_approval_request.ProvisioningApprovalRequest{}
	_ = &provisioning_policy.ProvisioningPolicy{}
)

type ProvisionDeviceViaPolicyRequest_FieldMask struct {
	Paths []ProvisionDeviceViaPolicyRequest_FieldPath
}

func FullProvisionDeviceViaPolicyRequest_FieldMask() *ProvisionDeviceViaPolicyRequest_FieldMask {
	res := &ProvisionDeviceViaPolicyRequest_FieldMask{}
	res.Paths = append(res.Paths, &ProvisionDeviceViaPolicyRequest_FieldTerminalPath{selector: ProvisionDeviceViaPolicyRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &ProvisionDeviceViaPolicyRequest_FieldTerminalPath{selector: ProvisionDeviceViaPolicyRequest_FieldPathSelectorDeviceStatus})
	return res
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProvisionDeviceViaPolicyRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProvisionDeviceViaPolicyRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProvisionDeviceViaPolicyRequest_FieldPath(raw)
	})
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) Subtract(other *ProvisionDeviceViaPolicyRequest_FieldMask) *ProvisionDeviceViaPolicyRequest_FieldMask {
	result := &ProvisionDeviceViaPolicyRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[ProvisionDeviceViaPolicyRequest_FieldPathSelector]gotenobject.FieldMask{
		ProvisionDeviceViaPolicyRequest_FieldPathSelectorDeviceStatus: &device.Device_Status_FieldMask{},
	}
	mySubMasks := map[ProvisionDeviceViaPolicyRequest_FieldPathSelector]gotenobject.FieldMask{
		ProvisionDeviceViaPolicyRequest_FieldPathSelectorDeviceStatus: &device.Device_Status_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProvisionDeviceViaPolicyRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ProvisionDeviceViaPolicyRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ProvisionDeviceViaPolicyRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case ProvisionDeviceViaPolicyRequest_FieldPathSelectorDeviceStatus:
						mySubMasks[ProvisionDeviceViaPolicyRequest_FieldPathSelectorDeviceStatus] = device.FullDevice_Status_FieldMask()
					}
				} else if tp, ok := path.(*ProvisionDeviceViaPolicyRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ProvisionDeviceViaPolicyRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProvisionDeviceViaPolicyRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) FilterInputFields() *ProvisionDeviceViaPolicyRequest_FieldMask {
	result := &ProvisionDeviceViaPolicyRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProvisionDeviceViaPolicyRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProvisionDeviceViaPolicyRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProvisionDeviceViaPolicyRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProvisionDeviceViaPolicyRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) AppendPath(path ProvisionDeviceViaPolicyRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProvisionDeviceViaPolicyRequest_FieldPath))
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) GetPaths() []ProvisionDeviceViaPolicyRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProvisionDeviceViaPolicyRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) Set(target, source *ProvisionDeviceViaPolicyRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProvisionDeviceViaPolicyRequest), source.(*ProvisionDeviceViaPolicyRequest))
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) Project(source *ProvisionDeviceViaPolicyRequest) *ProvisionDeviceViaPolicyRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProvisionDeviceViaPolicyRequest{}
	deviceStatusMask := &device.Device_Status_FieldMask{}
	wholeDeviceStatusAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProvisionDeviceViaPolicyRequest_FieldTerminalPath:
			switch tp.selector {
			case ProvisionDeviceViaPolicyRequest_FieldPathSelectorName:
				result.Name = source.Name
			case ProvisionDeviceViaPolicyRequest_FieldPathSelectorDeviceStatus:
				result.DeviceStatus = source.DeviceStatus
				wholeDeviceStatusAccepted = true
			}
		case *ProvisionDeviceViaPolicyRequest_FieldSubPath:
			switch tp.selector {
			case ProvisionDeviceViaPolicyRequest_FieldPathSelectorDeviceStatus:
				deviceStatusMask.AppendPath(tp.subPath.(device.DeviceStatus_FieldPath))
			}
		}
	}
	if wholeDeviceStatusAccepted == false && len(deviceStatusMask.Paths) > 0 {
		result.DeviceStatus = deviceStatusMask.Project(source.GetDeviceStatus())
	}
	return result
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProvisionDeviceViaPolicyRequest))
}

func (fieldMask *ProvisionDeviceViaPolicyRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProvisionDeviceViaPolicyResponse_FieldMask struct {
	Paths []ProvisionDeviceViaPolicyResponse_FieldPath
}

func FullProvisionDeviceViaPolicyResponse_FieldMask() *ProvisionDeviceViaPolicyResponse_FieldMask {
	res := &ProvisionDeviceViaPolicyResponse_FieldMask{}
	res.Paths = append(res.Paths, &ProvisionDeviceViaPolicyResponse_FieldTerminalPath{selector: ProvisionDeviceViaPolicyResponse_FieldPathSelectorDevice})
	res.Paths = append(res.Paths, &ProvisionDeviceViaPolicyResponse_FieldTerminalPath{selector: ProvisionDeviceViaPolicyResponse_FieldPathSelectorServiceAccount})
	return res
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProvisionDeviceViaPolicyResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProvisionDeviceViaPolicyResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProvisionDeviceViaPolicyResponse_FieldPath(raw)
	})
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) Subtract(other *ProvisionDeviceViaPolicyResponse_FieldMask) *ProvisionDeviceViaPolicyResponse_FieldMask {
	result := &ProvisionDeviceViaPolicyResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[ProvisionDeviceViaPolicyResponse_FieldPathSelector]gotenobject.FieldMask{
		ProvisionDeviceViaPolicyResponse_FieldPathSelectorDevice:         &device.Device_FieldMask{},
		ProvisionDeviceViaPolicyResponse_FieldPathSelectorServiceAccount: &api.ServiceAccount_FieldMask{},
	}
	mySubMasks := map[ProvisionDeviceViaPolicyResponse_FieldPathSelector]gotenobject.FieldMask{
		ProvisionDeviceViaPolicyResponse_FieldPathSelectorDevice:         &device.Device_FieldMask{},
		ProvisionDeviceViaPolicyResponse_FieldPathSelectorServiceAccount: &api.ServiceAccount_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProvisionDeviceViaPolicyResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ProvisionDeviceViaPolicyResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ProvisionDeviceViaPolicyResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ProvisionDeviceViaPolicyResponse_FieldPathSelectorDevice:
						mySubMasks[ProvisionDeviceViaPolicyResponse_FieldPathSelectorDevice] = device.FullDevice_FieldMask()
					case ProvisionDeviceViaPolicyResponse_FieldPathSelectorServiceAccount:
						mySubMasks[ProvisionDeviceViaPolicyResponse_FieldPathSelectorServiceAccount] = api.FullServiceAccount_FieldMask()
					}
				} else if tp, ok := path.(*ProvisionDeviceViaPolicyResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ProvisionDeviceViaPolicyResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProvisionDeviceViaPolicyResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) FilterInputFields() *ProvisionDeviceViaPolicyResponse_FieldMask {
	result := &ProvisionDeviceViaPolicyResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ProvisionDeviceViaPolicyResponse_FieldPathSelectorDevice:
			if _, ok := path.(*ProvisionDeviceViaPolicyResponse_FieldTerminalPath); ok {
				for _, subpath := range device.FullDevice_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ProvisionDeviceViaPolicyResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ProvisionDeviceViaPolicyResponse_FieldSubPath); ok {
				selectedMask := &device.Device_FieldMask{
					Paths: []device.Device_FieldPath{sub.subPath.(device.Device_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ProvisionDeviceViaPolicyResponse_FieldSubPath{selector: ProvisionDeviceViaPolicyResponse_FieldPathSelectorDevice, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProvisionDeviceViaPolicyResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProvisionDeviceViaPolicyResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProvisionDeviceViaPolicyResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProvisionDeviceViaPolicyResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) AppendPath(path ProvisionDeviceViaPolicyResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProvisionDeviceViaPolicyResponse_FieldPath))
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) GetPaths() []ProvisionDeviceViaPolicyResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProvisionDeviceViaPolicyResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) Set(target, source *ProvisionDeviceViaPolicyResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProvisionDeviceViaPolicyResponse), source.(*ProvisionDeviceViaPolicyResponse))
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) Project(source *ProvisionDeviceViaPolicyResponse) *ProvisionDeviceViaPolicyResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProvisionDeviceViaPolicyResponse{}
	deviceMask := &device.Device_FieldMask{}
	wholeDeviceAccepted := false
	serviceAccountMask := &api.ServiceAccount_FieldMask{}
	wholeServiceAccountAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProvisionDeviceViaPolicyResponse_FieldTerminalPath:
			switch tp.selector {
			case ProvisionDeviceViaPolicyResponse_FieldPathSelectorDevice:
				result.Device = source.Device
				wholeDeviceAccepted = true
			case ProvisionDeviceViaPolicyResponse_FieldPathSelectorServiceAccount:
				result.ServiceAccount = source.ServiceAccount
				wholeServiceAccountAccepted = true
			}
		case *ProvisionDeviceViaPolicyResponse_FieldSubPath:
			switch tp.selector {
			case ProvisionDeviceViaPolicyResponse_FieldPathSelectorDevice:
				deviceMask.AppendPath(tp.subPath.(device.Device_FieldPath))
			case ProvisionDeviceViaPolicyResponse_FieldPathSelectorServiceAccount:
				serviceAccountMask.AppendPath(tp.subPath.(api.ServiceAccount_FieldPath))
			}
		}
	}
	if wholeDeviceAccepted == false && len(deviceMask.Paths) > 0 {
		result.Device = deviceMask.Project(source.GetDevice())
	}
	if wholeServiceAccountAccepted == false && len(serviceAccountMask.Paths) > 0 {
		result.ServiceAccount = serviceAccountMask.Project(source.GetServiceAccount())
	}
	return result
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProvisionDeviceViaPolicyResponse))
}

func (fieldMask *ProvisionDeviceViaPolicyResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type RequestProvisioningApprovalRequest_FieldMask struct {
	Paths []RequestProvisioningApprovalRequest_FieldPath
}

func FullRequestProvisioningApprovalRequest_FieldMask() *RequestProvisioningApprovalRequest_FieldMask {
	res := &RequestProvisioningApprovalRequest_FieldMask{}
	res.Paths = append(res.Paths, &RequestProvisioningApprovalRequest_FieldTerminalPath{selector: RequestProvisioningApprovalRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRequestProvisioningApprovalRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RequestProvisioningApprovalRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRequestProvisioningApprovalRequest_FieldPath(raw)
	})
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) ProtoMessage() {}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) Subtract(other *RequestProvisioningApprovalRequest_FieldMask) *RequestProvisioningApprovalRequest_FieldMask {
	result := &RequestProvisioningApprovalRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RequestProvisioningApprovalRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RequestProvisioningApprovalRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) FilterInputFields() *RequestProvisioningApprovalRequest_FieldMask {
	result := &RequestProvisioningApprovalRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RequestProvisioningApprovalRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRequestProvisioningApprovalRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RequestProvisioningApprovalRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RequestProvisioningApprovalRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) AppendPath(path RequestProvisioningApprovalRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RequestProvisioningApprovalRequest_FieldPath))
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) GetPaths() []RequestProvisioningApprovalRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRequestProvisioningApprovalRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) Set(target, source *RequestProvisioningApprovalRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RequestProvisioningApprovalRequest), source.(*RequestProvisioningApprovalRequest))
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) Project(source *RequestProvisioningApprovalRequest) *RequestProvisioningApprovalRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RequestProvisioningApprovalRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RequestProvisioningApprovalRequest_FieldTerminalPath:
			switch tp.selector {
			case RequestProvisioningApprovalRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RequestProvisioningApprovalRequest))
}

func (fieldMask *RequestProvisioningApprovalRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type RequestProvisioningApprovalResponse_FieldMask struct {
	Paths []RequestProvisioningApprovalResponse_FieldPath
}

func FullRequestProvisioningApprovalResponse_FieldMask() *RequestProvisioningApprovalResponse_FieldMask {
	res := &RequestProvisioningApprovalResponse_FieldMask{}
	res.Paths = append(res.Paths, &RequestProvisioningApprovalResponse_FieldTerminalPath{selector: RequestProvisioningApprovalResponse_FieldPathSelectorRequest})
	res.Paths = append(res.Paths, &RequestProvisioningApprovalResponse_FieldTerminalPath{selector: RequestProvisioningApprovalResponse_FieldPathSelectorServiceAccount})
	return res
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRequestProvisioningApprovalResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RequestProvisioningApprovalResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRequestProvisioningApprovalResponse_FieldPath(raw)
	})
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) ProtoMessage() {}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) Subtract(other *RequestProvisioningApprovalResponse_FieldMask) *RequestProvisioningApprovalResponse_FieldMask {
	result := &RequestProvisioningApprovalResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[RequestProvisioningApprovalResponse_FieldPathSelector]gotenobject.FieldMask{
		RequestProvisioningApprovalResponse_FieldPathSelectorRequest:        &provisioning_approval_request.ProvisioningApprovalRequest_FieldMask{},
		RequestProvisioningApprovalResponse_FieldPathSelectorServiceAccount: &api.ServiceAccount_FieldMask{},
	}
	mySubMasks := map[RequestProvisioningApprovalResponse_FieldPathSelector]gotenobject.FieldMask{
		RequestProvisioningApprovalResponse_FieldPathSelectorRequest:        &provisioning_approval_request.ProvisioningApprovalRequest_FieldMask{},
		RequestProvisioningApprovalResponse_FieldPathSelectorServiceAccount: &api.ServiceAccount_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RequestProvisioningApprovalResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *RequestProvisioningApprovalResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*RequestProvisioningApprovalResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case RequestProvisioningApprovalResponse_FieldPathSelectorRequest:
						mySubMasks[RequestProvisioningApprovalResponse_FieldPathSelectorRequest] = provisioning_approval_request.FullProvisioningApprovalRequest_FieldMask()
					case RequestProvisioningApprovalResponse_FieldPathSelectorServiceAccount:
						mySubMasks[RequestProvisioningApprovalResponse_FieldPathSelectorServiceAccount] = api.FullServiceAccount_FieldMask()
					}
				} else if tp, ok := path.(*RequestProvisioningApprovalResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &RequestProvisioningApprovalResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RequestProvisioningApprovalResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) FilterInputFields() *RequestProvisioningApprovalResponse_FieldMask {
	result := &RequestProvisioningApprovalResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case RequestProvisioningApprovalResponse_FieldPathSelectorRequest:
			if _, ok := path.(*RequestProvisioningApprovalResponse_FieldTerminalPath); ok {
				for _, subpath := range provisioning_approval_request.FullProvisioningApprovalRequest_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &RequestProvisioningApprovalResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*RequestProvisioningApprovalResponse_FieldSubPath); ok {
				selectedMask := &provisioning_approval_request.ProvisioningApprovalRequest_FieldMask{
					Paths: []provisioning_approval_request.ProvisioningApprovalRequest_FieldPath{sub.subPath.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &RequestProvisioningApprovalResponse_FieldSubPath{selector: RequestProvisioningApprovalResponse_FieldPathSelectorRequest, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RequestProvisioningApprovalResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRequestProvisioningApprovalResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RequestProvisioningApprovalResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RequestProvisioningApprovalResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) AppendPath(path RequestProvisioningApprovalResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RequestProvisioningApprovalResponse_FieldPath))
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) GetPaths() []RequestProvisioningApprovalResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRequestProvisioningApprovalResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) Set(target, source *RequestProvisioningApprovalResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RequestProvisioningApprovalResponse), source.(*RequestProvisioningApprovalResponse))
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) Project(source *RequestProvisioningApprovalResponse) *RequestProvisioningApprovalResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RequestProvisioningApprovalResponse{}
	requestMask := &provisioning_approval_request.ProvisioningApprovalRequest_FieldMask{}
	wholeRequestAccepted := false
	serviceAccountMask := &api.ServiceAccount_FieldMask{}
	wholeServiceAccountAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RequestProvisioningApprovalResponse_FieldTerminalPath:
			switch tp.selector {
			case RequestProvisioningApprovalResponse_FieldPathSelectorRequest:
				result.Request = source.Request
				wholeRequestAccepted = true
			case RequestProvisioningApprovalResponse_FieldPathSelectorServiceAccount:
				result.ServiceAccount = source.ServiceAccount
				wholeServiceAccountAccepted = true
			}
		case *RequestProvisioningApprovalResponse_FieldSubPath:
			switch tp.selector {
			case RequestProvisioningApprovalResponse_FieldPathSelectorRequest:
				requestMask.AppendPath(tp.subPath.(provisioning_approval_request.ProvisioningApprovalRequest_FieldPath))
			case RequestProvisioningApprovalResponse_FieldPathSelectorServiceAccount:
				serviceAccountMask.AppendPath(tp.subPath.(api.ServiceAccount_FieldPath))
			}
		}
	}
	if wholeRequestAccepted == false && len(requestMask.Paths) > 0 {
		result.Request = requestMask.Project(source.GetRequest())
	}
	if wholeServiceAccountAccepted == false && len(serviceAccountMask.Paths) > 0 {
		result.ServiceAccount = serviceAccountMask.Project(source.GetServiceAccount())
	}
	return result
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RequestProvisioningApprovalResponse))
}

func (fieldMask *RequestProvisioningApprovalResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask struct {
	Paths []ProvisionServiceAccountToProvisioningPolicyRequest_FieldPath
}

func FullProvisionServiceAccountToProvisioningPolicyRequest_FieldMask() *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask {
	res := &ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask{}
	res.Paths = append(res.Paths, &ProvisionServiceAccountToProvisioningPolicyRequest_FieldTerminalPath{selector: ProvisionServiceAccountToProvisioningPolicyRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProvisionServiceAccountToProvisioningPolicyRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProvisionServiceAccountToProvisioningPolicyRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProvisionServiceAccountToProvisioningPolicyRequest_FieldPath(raw)
	})
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) Subtract(other *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask {
	result := &ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProvisionServiceAccountToProvisioningPolicyRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) FilterInputFields() *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask {
	result := &ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProvisionServiceAccountToProvisioningPolicyRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProvisionServiceAccountToProvisioningPolicyRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) AppendPath(path ProvisionServiceAccountToProvisioningPolicyRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProvisionServiceAccountToProvisioningPolicyRequest_FieldPath))
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) GetPaths() []ProvisionServiceAccountToProvisioningPolicyRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProvisionServiceAccountToProvisioningPolicyRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) Set(target, source *ProvisionServiceAccountToProvisioningPolicyRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProvisionServiceAccountToProvisioningPolicyRequest), source.(*ProvisionServiceAccountToProvisioningPolicyRequest))
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) Project(source *ProvisionServiceAccountToProvisioningPolicyRequest) *ProvisionServiceAccountToProvisioningPolicyRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProvisionServiceAccountToProvisioningPolicyRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProvisionServiceAccountToProvisioningPolicyRequest_FieldTerminalPath:
			switch tp.selector {
			case ProvisionServiceAccountToProvisioningPolicyRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProvisionServiceAccountToProvisioningPolicyRequest))
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask struct {
	Paths []ProvisionServiceAccountToProvisioningPolicyResponse_FieldPath
}

func FullProvisionServiceAccountToProvisioningPolicyResponse_FieldMask() *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask {
	res := &ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask{}
	res.Paths = append(res.Paths, &ProvisionServiceAccountToProvisioningPolicyResponse_FieldTerminalPath{selector: ProvisionServiceAccountToProvisioningPolicyResponse_FieldPathSelectorServiceAccount})
	return res
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProvisionServiceAccountToProvisioningPolicyResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProvisionServiceAccountToProvisioningPolicyResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProvisionServiceAccountToProvisioningPolicyResponse_FieldPath(raw)
	})
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) Subtract(other *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask {
	result := &ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[ProvisionServiceAccountToProvisioningPolicyResponse_FieldPathSelector]gotenobject.FieldMask{
		ProvisionServiceAccountToProvisioningPolicyResponse_FieldPathSelectorServiceAccount: &api.ServiceAccount_FieldMask{},
	}
	mySubMasks := map[ProvisionServiceAccountToProvisioningPolicyResponse_FieldPathSelector]gotenobject.FieldMask{
		ProvisionServiceAccountToProvisioningPolicyResponse_FieldPathSelectorServiceAccount: &api.ServiceAccount_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProvisionServiceAccountToProvisioningPolicyResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ProvisionServiceAccountToProvisioningPolicyResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ProvisionServiceAccountToProvisioningPolicyResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ProvisionServiceAccountToProvisioningPolicyResponse_FieldPathSelectorServiceAccount:
						mySubMasks[ProvisionServiceAccountToProvisioningPolicyResponse_FieldPathSelectorServiceAccount] = api.FullServiceAccount_FieldMask()
					}
				} else if tp, ok := path.(*ProvisionServiceAccountToProvisioningPolicyResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ProvisionServiceAccountToProvisioningPolicyResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) FilterInputFields() *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask {
	result := &ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProvisionServiceAccountToProvisioningPolicyResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProvisionServiceAccountToProvisioningPolicyResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) AppendPath(path ProvisionServiceAccountToProvisioningPolicyResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProvisionServiceAccountToProvisioningPolicyResponse_FieldPath))
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) GetPaths() []ProvisionServiceAccountToProvisioningPolicyResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProvisionServiceAccountToProvisioningPolicyResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) Set(target, source *ProvisionServiceAccountToProvisioningPolicyResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProvisionServiceAccountToProvisioningPolicyResponse), source.(*ProvisionServiceAccountToProvisioningPolicyResponse))
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) Project(source *ProvisionServiceAccountToProvisioningPolicyResponse) *ProvisionServiceAccountToProvisioningPolicyResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProvisionServiceAccountToProvisioningPolicyResponse{}
	serviceAccountMask := &api.ServiceAccount_FieldMask{}
	wholeServiceAccountAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProvisionServiceAccountToProvisioningPolicyResponse_FieldTerminalPath:
			switch tp.selector {
			case ProvisionServiceAccountToProvisioningPolicyResponse_FieldPathSelectorServiceAccount:
				result.ServiceAccount = source.ServiceAccount
				wholeServiceAccountAccepted = true
			}
		case *ProvisionServiceAccountToProvisioningPolicyResponse_FieldSubPath:
			switch tp.selector {
			case ProvisionServiceAccountToProvisioningPolicyResponse_FieldPathSelectorServiceAccount:
				serviceAccountMask.AppendPath(tp.subPath.(api.ServiceAccount_FieldPath))
			}
		}
	}
	if wholeServiceAccountAccepted == false && len(serviceAccountMask.Paths) > 0 {
		result.ServiceAccount = serviceAccountMask.Project(source.GetServiceAccount())
	}
	return result
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProvisionServiceAccountToProvisioningPolicyResponse))
}

func (fieldMask *ProvisionServiceAccountToProvisioningPolicyResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask struct {
	Paths []RemoveServiceAccountFromProvisioningPolicyRequest_FieldPath
}

func FullRemoveServiceAccountFromProvisioningPolicyRequest_FieldMask() *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask {
	res := &RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask{}
	res.Paths = append(res.Paths, &RemoveServiceAccountFromProvisioningPolicyRequest_FieldTerminalPath{selector: RemoveServiceAccountFromProvisioningPolicyRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRemoveServiceAccountFromProvisioningPolicyRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RemoveServiceAccountFromProvisioningPolicyRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRemoveServiceAccountFromProvisioningPolicyRequest_FieldPath(raw)
	})
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) ProtoMessage() {}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) Subtract(other *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask {
	result := &RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RemoveServiceAccountFromProvisioningPolicyRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) FilterInputFields() *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask {
	result := &RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RemoveServiceAccountFromProvisioningPolicyRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRemoveServiceAccountFromProvisioningPolicyRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) AppendPath(path RemoveServiceAccountFromProvisioningPolicyRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RemoveServiceAccountFromProvisioningPolicyRequest_FieldPath))
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) GetPaths() []RemoveServiceAccountFromProvisioningPolicyRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRemoveServiceAccountFromProvisioningPolicyRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) Set(target, source *RemoveServiceAccountFromProvisioningPolicyRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RemoveServiceAccountFromProvisioningPolicyRequest), source.(*RemoveServiceAccountFromProvisioningPolicyRequest))
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) Project(source *RemoveServiceAccountFromProvisioningPolicyRequest) *RemoveServiceAccountFromProvisioningPolicyRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RemoveServiceAccountFromProvisioningPolicyRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RemoveServiceAccountFromProvisioningPolicyRequest_FieldTerminalPath:
			switch tp.selector {
			case RemoveServiceAccountFromProvisioningPolicyRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RemoveServiceAccountFromProvisioningPolicyRequest))
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask struct {
	Paths []RemoveServiceAccountFromProvisioningPolicyResponse_FieldPath
}

func FullRemoveServiceAccountFromProvisioningPolicyResponse_FieldMask() *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask {
	res := &RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask{}
	res.Paths = append(res.Paths, &RemoveServiceAccountFromProvisioningPolicyResponse_FieldTerminalPath{selector: RemoveServiceAccountFromProvisioningPolicyResponse_FieldPathSelectorRemoved})
	return res
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseRemoveServiceAccountFromProvisioningPolicyResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*RemoveServiceAccountFromProvisioningPolicyResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseRemoveServiceAccountFromProvisioningPolicyResponse_FieldPath(raw)
	})
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) ProtoMessage() {}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) Subtract(other *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask {
	result := &RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *RemoveServiceAccountFromProvisioningPolicyResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) FilterInputFields() *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask {
	result := &RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]RemoveServiceAccountFromProvisioningPolicyResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseRemoveServiceAccountFromProvisioningPolicyResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) AppendPath(path RemoveServiceAccountFromProvisioningPolicyResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(RemoveServiceAccountFromProvisioningPolicyResponse_FieldPath))
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) GetPaths() []RemoveServiceAccountFromProvisioningPolicyResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseRemoveServiceAccountFromProvisioningPolicyResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) Set(target, source *RemoveServiceAccountFromProvisioningPolicyResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*RemoveServiceAccountFromProvisioningPolicyResponse), source.(*RemoveServiceAccountFromProvisioningPolicyResponse))
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) Project(source *RemoveServiceAccountFromProvisioningPolicyResponse) *RemoveServiceAccountFromProvisioningPolicyResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &RemoveServiceAccountFromProvisioningPolicyResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *RemoveServiceAccountFromProvisioningPolicyResponse_FieldTerminalPath:
			switch tp.selector {
			case RemoveServiceAccountFromProvisioningPolicyResponse_FieldPathSelectorRemoved:
				result.Removed = source.Removed
			}
		}
	}
	return result
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*RemoveServiceAccountFromProvisioningPolicyResponse))
}

func (fieldMask *RemoveServiceAccountFromProvisioningPolicyResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
