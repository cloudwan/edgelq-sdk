// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha/provisioning_policy_service.proto
// DO NOT EDIT!!!

package provisioning_policy_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/project"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/provisioning_policy"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetProvisioningPolicyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetProvisioningPolicyRequest_FieldPathSelector
	Get(source *GetProvisioningPolicyRequest) []interface{}
	GetSingle(source *GetProvisioningPolicyRequest) (interface{}, bool)
	ClearValue(item *GetProvisioningPolicyRequest)

	// Those methods build corresponding GetProvisioningPolicyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetProvisioningPolicyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetProvisioningPolicyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetProvisioningPolicyRequest_FieldPathArrayItemValue
}

type GetProvisioningPolicyRequest_FieldPathSelector int32

const (
	GetProvisioningPolicyRequest_FieldPathSelectorName      GetProvisioningPolicyRequest_FieldPathSelector = 0
	GetProvisioningPolicyRequest_FieldPathSelectorFieldMask GetProvisioningPolicyRequest_FieldPathSelector = 1
	GetProvisioningPolicyRequest_FieldPathSelectorView      GetProvisioningPolicyRequest_FieldPathSelector = 2
)

func (s GetProvisioningPolicyRequest_FieldPathSelector) String() string {
	switch s {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		return "name"
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", s))
	}
}

func BuildGetProvisioningPolicyRequest_FieldPath(fp gotenobject.RawFieldPath) (GetProvisioningPolicyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetProvisioningPolicyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetProvisioningPolicyRequest_FieldTerminalPath{selector: GetProvisioningPolicyRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetProvisioningPolicyRequest_FieldTerminalPath{selector: GetProvisioningPolicyRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetProvisioningPolicyRequest_FieldTerminalPath{selector: GetProvisioningPolicyRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetProvisioningPolicyRequest", fp)
}

func ParseGetProvisioningPolicyRequest_FieldPath(rawField string) (GetProvisioningPolicyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetProvisioningPolicyRequest_FieldPath(fp)
}

func MustParseGetProvisioningPolicyRequest_FieldPath(rawField string) GetProvisioningPolicyRequest_FieldPath {
	fp, err := ParseGetProvisioningPolicyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetProvisioningPolicyRequest_FieldTerminalPath struct {
	selector GetProvisioningPolicyRequest_FieldPathSelector
}

var _ GetProvisioningPolicyRequest_FieldPath = (*GetProvisioningPolicyRequest_FieldTerminalPath)(nil)

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) Selector() GetProvisioningPolicyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetProvisioningPolicyRequest
func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) Get(source *GetProvisioningPolicyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetProvisioningPolicyRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetProvisioningPolicyRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetProvisioningPolicyRequest))
}

// GetSingle returns value pointed by specific field of from source GetProvisioningPolicyRequest
func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) GetSingle(source *GetProvisioningPolicyRequest) (interface{}, bool) {
	switch fp.selector {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetProvisioningPolicyRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		return (*provisioning_policy.Reference)(nil)
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return (*provisioning_policy.ProvisioningPolicy_FieldMask)(nil)
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) ClearValue(item *GetProvisioningPolicyRequest) {
	if item != nil {
		switch fp.selector {
		case GetProvisioningPolicyRequest_FieldPathSelectorName:
			item.Name = nil
		case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetProvisioningPolicyRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fp.selector))
		}
	}
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetProvisioningPolicyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetProvisioningPolicyRequest_FieldPathSelectorName ||
		fp.selector == GetProvisioningPolicyRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetProvisioningPolicyRequest_FieldPathSelectorView
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) WithIValue(value interface{}) GetProvisioningPolicyRequest_FieldPathValue {
	switch fp.selector {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		return &GetProvisioningPolicyRequest_FieldTerminalPathValue{GetProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Reference)}
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return &GetProvisioningPolicyRequest_FieldTerminalPathValue{GetProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		return &GetProvisioningPolicyRequest_FieldTerminalPathValue{GetProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov := &GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{GetProvisioningPolicyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		return &GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{GetProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.Reference)}
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return &GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{GetProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		return &GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{GetProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetProvisioningPolicyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *GetProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetProvisioningPolicyRequest_FieldPathValue allows storing values for GetProvisioningPolicyRequest fields according to their type
type GetProvisioningPolicyRequest_FieldPathValue interface {
	GetProvisioningPolicyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetProvisioningPolicyRequest)
	CompareWith(*GetProvisioningPolicyRequest) (cmp int, comparable bool)
}

func ParseGetProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) (GetProvisioningPolicyRequest_FieldPathValue, error) {
	fp, err := ParseGetProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProvisioningPolicyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetProvisioningPolicyRequest_FieldPathValue), nil
}

func MustParseGetProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) GetProvisioningPolicyRequest_FieldPathValue {
	fpv, err := ParseGetProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetProvisioningPolicyRequest_FieldTerminalPathValue struct {
	GetProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ GetProvisioningPolicyRequest_FieldPathValue = (*GetProvisioningPolicyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetProvisioningPolicyRequest' as interface{}
func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) AsNameValue() (*provisioning_policy.Reference, bool) {
	res, ok := fpv.value.(*provisioning_policy.Reference)
	return res, ok
}
func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetProvisioningPolicyRequest
func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) SetTo(target **GetProvisioningPolicyRequest) {
	if *target == nil {
		*target = new(GetProvisioningPolicyRequest)
	}
	switch fpv.selector {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*provisioning_policy.Reference)
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetProvisioningPolicyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetProvisioningPolicyRequest_FieldTerminalPathValue' with the value under path in 'GetProvisioningPolicyRequest'.
func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) CompareWith(source *GetProvisioningPolicyRequest) (int, bool) {
	switch fpv.selector {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*provisioning_policy.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *GetProvisioningPolicyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetProvisioningPolicyRequest))
}

// GetProvisioningPolicyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetProvisioningPolicyRequest according to their type
// Present only for array (repeated) types.
type GetProvisioningPolicyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetProvisioningPolicyRequest_FieldPath
	ContainsValue(*GetProvisioningPolicyRequest) bool
}

// ParseGetProvisioningPolicyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetProvisioningPolicyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProvisioningPolicyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetProvisioningPolicyRequest_FieldPathArrayItemValue), nil
}

func MustParseGetProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetProvisioningPolicyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetProvisioningPolicyRequest_FieldTerminalPathArrayItemValue struct {
	GetProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ GetProvisioningPolicyRequest_FieldPathArrayItemValue = (*GetProvisioningPolicyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetProvisioningPolicyRequest as interface{}
func (fpaiv *GetProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetProvisioningPolicyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetProvisioningPolicyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetProvisioningPolicyRequest'
func (fpaiv *GetProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetProvisioningPolicyRequest) bool {
	slice := fpaiv.GetProvisioningPolicyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetProvisioningPolicyRequest_FieldPathArrayOfValues allows storing slice of values for GetProvisioningPolicyRequest fields according to their type
type GetProvisioningPolicyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetProvisioningPolicyRequest_FieldPath
}

func ParseGetProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetProvisioningPolicyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetProvisioningPolicyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetProvisioningPolicyRequest_FieldPathArrayOfValues), nil
}

func MustParseGetProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues struct {
	GetProvisioningPolicyRequest_FieldTerminalPath
	values interface{}
}

var _ GetProvisioningPolicyRequest_FieldPathArrayOfValues = (*GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetProvisioningPolicyRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*provisioning_policy.Reference) {
			values = append(values, v)
		}
	case GetProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask) {
			values = append(values, v)
		}
	case GetProvisioningPolicyRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*provisioning_policy.Reference, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.Reference)
	return res, ok
}
func (fpaov *GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpaov *GetProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProvisioningPolicysRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProvisioningPolicysRequest_FieldPathSelector
	Get(source *BatchGetProvisioningPolicysRequest) []interface{}
	GetSingle(source *BatchGetProvisioningPolicysRequest) (interface{}, bool)
	ClearValue(item *BatchGetProvisioningPolicysRequest)

	// Those methods build corresponding BatchGetProvisioningPolicysRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProvisioningPolicysRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProvisioningPolicysRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProvisioningPolicysRequest_FieldPathArrayItemValue
}

type BatchGetProvisioningPolicysRequest_FieldPathSelector int32

const (
	BatchGetProvisioningPolicysRequest_FieldPathSelectorParent    BatchGetProvisioningPolicysRequest_FieldPathSelector = 0
	BatchGetProvisioningPolicysRequest_FieldPathSelectorNames     BatchGetProvisioningPolicysRequest_FieldPathSelector = 1
	BatchGetProvisioningPolicysRequest_FieldPathSelectorFieldMask BatchGetProvisioningPolicysRequest_FieldPathSelector = 2
	BatchGetProvisioningPolicysRequest_FieldPathSelectorView      BatchGetProvisioningPolicysRequest_FieldPathSelector = 3
)

func (s BatchGetProvisioningPolicysRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysRequest: %d", s))
	}
}

func BuildBatchGetProvisioningPolicysRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProvisioningPolicysRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProvisioningPolicysRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetProvisioningPolicysRequest_FieldTerminalPath{selector: BatchGetProvisioningPolicysRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetProvisioningPolicysRequest_FieldTerminalPath{selector: BatchGetProvisioningPolicysRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetProvisioningPolicysRequest_FieldTerminalPath{selector: BatchGetProvisioningPolicysRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetProvisioningPolicysRequest_FieldTerminalPath{selector: BatchGetProvisioningPolicysRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProvisioningPolicysRequest", fp)
}

func ParseBatchGetProvisioningPolicysRequest_FieldPath(rawField string) (BatchGetProvisioningPolicysRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProvisioningPolicysRequest_FieldPath(fp)
}

func MustParseBatchGetProvisioningPolicysRequest_FieldPath(rawField string) BatchGetProvisioningPolicysRequest_FieldPath {
	fp, err := ParseBatchGetProvisioningPolicysRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProvisioningPolicysRequest_FieldTerminalPath struct {
	selector BatchGetProvisioningPolicysRequest_FieldPathSelector
}

var _ BatchGetProvisioningPolicysRequest_FieldPath = (*BatchGetProvisioningPolicysRequest_FieldTerminalPath)(nil)

func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) Selector() BatchGetProvisioningPolicysRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProvisioningPolicysRequest
func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) Get(source *BatchGetProvisioningPolicysRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProvisioningPolicysRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetProvisioningPolicysRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetProvisioningPolicysRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetProvisioningPolicysRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProvisioningPolicysRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetProvisioningPolicysRequest
func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) GetSingle(source *BatchGetProvisioningPolicysRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProvisioningPolicysRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorParent:
		return (*provisioning_policy.Reference)(nil)
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorNames:
		return ([]*provisioning_policy.Reference)(nil)
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return (*provisioning_policy.ProvisioningPolicy_FieldMask)(nil)
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) ClearValue(item *BatchGetProvisioningPolicysRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetProvisioningPolicysRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetProvisioningPolicysRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetProvisioningPolicysRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetProvisioningPolicysRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProvisioningPolicysRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProvisioningPolicysRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetProvisioningPolicysRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetProvisioningPolicysRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetProvisioningPolicysRequest_FieldPathSelectorView
}

func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetProvisioningPolicysRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorParent:
		return &BatchGetProvisioningPolicysRequest_FieldTerminalPathValue{BatchGetProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Reference)}
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorNames:
		return &BatchGetProvisioningPolicysRequest_FieldTerminalPathValue{BatchGetProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.([]*provisioning_policy.Reference)}
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return &BatchGetProvisioningPolicysRequest_FieldTerminalPathValue{BatchGetProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorView:
		return &BatchGetProvisioningPolicysRequest_FieldTerminalPathValue{BatchGetProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProvisioningPolicysRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{BatchGetProvisioningPolicysRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorParent:
		return &BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{BatchGetProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.Reference)}
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorNames:
		return &BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{BatchGetProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([][]*provisioning_policy.Reference)}
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return &BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{BatchGetProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorView:
		return &BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{BatchGetProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProvisioningPolicysRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorNames:
		return &BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayItemValue{BatchGetProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysRequest: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPolicysRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetProvisioningPolicysRequest_FieldPathValue allows storing values for BatchGetProvisioningPolicysRequest fields according to their type
type BatchGetProvisioningPolicysRequest_FieldPathValue interface {
	BatchGetProvisioningPolicysRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProvisioningPolicysRequest)
	CompareWith(*BatchGetProvisioningPolicysRequest) (cmp int, comparable bool)
}

func ParseBatchGetProvisioningPolicysRequest_FieldPathValue(pathStr, valueStr string) (BatchGetProvisioningPolicysRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetProvisioningPolicysRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningPolicysRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProvisioningPolicysRequest_FieldPathValue), nil
}

func MustParseBatchGetProvisioningPolicysRequest_FieldPathValue(pathStr, valueStr string) BatchGetProvisioningPolicysRequest_FieldPathValue {
	fpv, err := ParseBatchGetProvisioningPolicysRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProvisioningPolicysRequest_FieldTerminalPathValue struct {
	BatchGetProvisioningPolicysRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProvisioningPolicysRequest_FieldPathValue = (*BatchGetProvisioningPolicysRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProvisioningPolicysRequest' as interface{}
func (fpv *BatchGetProvisioningPolicysRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProvisioningPolicysRequest_FieldTerminalPathValue) AsParentValue() (*provisioning_policy.Reference, bool) {
	res, ok := fpv.value.(*provisioning_policy.Reference)
	return res, ok
}
func (fpv *BatchGetProvisioningPolicysRequest_FieldTerminalPathValue) AsNamesValue() ([]*provisioning_policy.Reference, bool) {
	res, ok := fpv.value.([]*provisioning_policy.Reference)
	return res, ok
}
func (fpv *BatchGetProvisioningPolicysRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpv *BatchGetProvisioningPolicysRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProvisioningPolicysRequest
func (fpv *BatchGetProvisioningPolicysRequest_FieldTerminalPathValue) SetTo(target **BatchGetProvisioningPolicysRequest) {
	if *target == nil {
		*target = new(BatchGetProvisioningPolicysRequest)
	}
	switch fpv.selector {
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*provisioning_policy.Reference)
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*provisioning_policy.Reference)
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProvisioningPolicysRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProvisioningPolicysRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProvisioningPolicysRequest_FieldTerminalPathValue' with the value under path in 'BatchGetProvisioningPolicysRequest'.
func (fpv *BatchGetProvisioningPolicysRequest_FieldTerminalPathValue) CompareWith(source *BatchGetProvisioningPolicysRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*provisioning_policy.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetProvisioningPolicysRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProvisioningPolicysRequest))
}

// BatchGetProvisioningPolicysRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProvisioningPolicysRequest according to their type
// Present only for array (repeated) types.
type BatchGetProvisioningPolicysRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProvisioningPolicysRequest_FieldPath
	ContainsValue(*BatchGetProvisioningPolicysRequest) bool
}

// ParseBatchGetProvisioningPolicysRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProvisioningPolicysRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProvisioningPolicysRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProvisioningPolicysRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningPolicysRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProvisioningPolicysRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProvisioningPolicysRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProvisioningPolicysRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProvisioningPolicysRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetProvisioningPolicysRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetProvisioningPolicysRequest_FieldPathArrayItemValue = (*BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProvisioningPolicysRequest as interface{}
func (fpaiv *BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*provisioning_policy.Reference, bool) {
	res, ok := fpaiv.value.(*provisioning_policy.Reference)
	return res, ok
}

func (fpaiv *BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProvisioningPolicysRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProvisioningPolicysRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProvisioningPolicysRequest'
func (fpaiv *BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProvisioningPolicysRequest) bool {
	slice := fpaiv.BatchGetProvisioningPolicysRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetProvisioningPolicysRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetProvisioningPolicysRequest fields according to their type
type BatchGetProvisioningPolicysRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProvisioningPolicysRequest_FieldPath
}

func ParseBatchGetProvisioningPolicysRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProvisioningPolicysRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProvisioningPolicysRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningPolicysRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProvisioningPolicysRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProvisioningPolicysRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProvisioningPolicysRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProvisioningPolicysRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetProvisioningPolicysRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetProvisioningPolicysRequest_FieldPathArrayOfValues = (*BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*provisioning_policy.Reference) {
			values = append(values, v)
		}
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*provisioning_policy.Reference) {
			values = append(values, v)
		}
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask) {
			values = append(values, v)
		}
	case BatchGetProvisioningPolicysRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*provisioning_policy.Reference, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.Reference)
	return res, ok
}
func (fpaov *BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*provisioning_policy.Reference, bool) {
	res, ok := fpaov.values.([][]*provisioning_policy.Reference)
	return res, ok
}
func (fpaov *BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpaov *BatchGetProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetProvisioningPolicysResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetProvisioningPolicysResponse_FieldPathSelector
	Get(source *BatchGetProvisioningPolicysResponse) []interface{}
	GetSingle(source *BatchGetProvisioningPolicysResponse) (interface{}, bool)
	ClearValue(item *BatchGetProvisioningPolicysResponse)

	// Those methods build corresponding BatchGetProvisioningPolicysResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetProvisioningPolicysResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetProvisioningPolicysResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetProvisioningPolicysResponse_FieldPathArrayItemValue
}

type BatchGetProvisioningPolicysResponse_FieldPathSelector int32

const (
	BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys BatchGetProvisioningPolicysResponse_FieldPathSelector = 0
	BatchGetProvisioningPolicysResponse_FieldPathSelectorMissing             BatchGetProvisioningPolicysResponse_FieldPathSelector = 1
)

func (s BatchGetProvisioningPolicysResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return "provisioning_policys"
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", s))
	}
}

func BuildBatchGetProvisioningPolicysResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetProvisioningPolicysResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetProvisioningPolicysResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "provisioning_policys", "provisioningPolicys", "provisioning-policys":
			return &BatchGetProvisioningPolicysResponse_FieldTerminalPath{selector: BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys}, nil
		case "missing":
			return &BatchGetProvisioningPolicysResponse_FieldTerminalPath{selector: BatchGetProvisioningPolicysResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "provisioning_policys", "provisioningPolicys", "provisioning-policys":
			if subpath, err := provisioning_policy.BuildProvisioningPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetProvisioningPolicysResponse_FieldSubPath{selector: BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetProvisioningPolicysResponse", fp)
}

func ParseBatchGetProvisioningPolicysResponse_FieldPath(rawField string) (BatchGetProvisioningPolicysResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetProvisioningPolicysResponse_FieldPath(fp)
}

func MustParseBatchGetProvisioningPolicysResponse_FieldPath(rawField string) BatchGetProvisioningPolicysResponse_FieldPath {
	fp, err := ParseBatchGetProvisioningPolicysResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetProvisioningPolicysResponse_FieldTerminalPath struct {
	selector BatchGetProvisioningPolicysResponse_FieldPathSelector
}

var _ BatchGetProvisioningPolicysResponse_FieldPath = (*BatchGetProvisioningPolicysResponse_FieldTerminalPath)(nil)

func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) Selector() BatchGetProvisioningPolicysResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetProvisioningPolicysResponse
func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) Get(source *BatchGetProvisioningPolicysResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
			for _, value := range source.GetProvisioningPolicys() {
				values = append(values, value)
			}
		case BatchGetProvisioningPolicysResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetProvisioningPolicysResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetProvisioningPolicysResponse
func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) GetSingle(source *BatchGetProvisioningPolicysResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		res := source.GetProvisioningPolicys()
		return res, res != nil
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetProvisioningPolicysResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return ([]*provisioning_policy.ProvisioningPolicy)(nil)
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorMissing:
		return ([]*provisioning_policy.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) ClearValue(item *BatchGetProvisioningPolicysResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
			item.ProvisioningPolicys = nil
		case BatchGetProvisioningPolicysResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetProvisioningPolicysResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetProvisioningPolicysResponse_FieldPathSelectorMissing
}

func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetProvisioningPolicysResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return &BatchGetProvisioningPolicysResponse_FieldTerminalPathValue{BatchGetProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.([]*provisioning_policy.ProvisioningPolicy)}
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorMissing:
		return &BatchGetProvisioningPolicysResponse_FieldTerminalPathValue{BatchGetProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.([]*provisioning_policy.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetProvisioningPolicysResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{BatchGetProvisioningPolicysResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return &BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{BatchGetProvisioningPolicysResponse_FieldTerminalPath: *fp, values: values.([][]*provisioning_policy.ProvisioningPolicy)}
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorMissing:
		return &BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{BatchGetProvisioningPolicysResponse_FieldTerminalPath: *fp, values: values.([][]*provisioning_policy.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetProvisioningPolicysResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return &BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayItemValue{BatchGetProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy)}
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorMissing:
		return &BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayItemValue{BatchGetProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fp.selector))
	}
}

func (fp *BatchGetProvisioningPolicysResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetProvisioningPolicysResponse_FieldSubPath struct {
	selector BatchGetProvisioningPolicysResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetProvisioningPolicysResponse_FieldPath = (*BatchGetProvisioningPolicysResponse_FieldSubPath)(nil)

func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) Selector() BatchGetProvisioningPolicysResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) AsProvisioningPolicysSubPath() (provisioning_policy.ProvisioningPolicy_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_policy.ProvisioningPolicy_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetProvisioningPolicysResponse
func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) Get(source *BatchGetProvisioningPolicysResponse) (values []interface{}) {
	if asProvisioningPolicyFieldPath, ok := fps.AsProvisioningPolicysSubPath(); ok {
		for _, item := range source.GetProvisioningPolicys() {
			values = append(values, asProvisioningPolicyFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetProvisioningPolicysResponse))
}

// GetSingle returns value of selected field from source BatchGetProvisioningPolicysResponse
func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) GetSingle(source *BatchGetProvisioningPolicysResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		if len(source.GetProvisioningPolicys()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProvisioningPolicys()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fps.selector))
	}
}

func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetProvisioningPolicysResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) ClearValue(item *BatchGetProvisioningPolicysResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
			for _, subItem := range item.ProvisioningPolicys {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetProvisioningPolicysResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) WithIValue(value interface{}) BatchGetProvisioningPolicysResponse_FieldPathValue {
	return &BatchGetProvisioningPolicysResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetProvisioningPolicysResponse_FieldPathArrayOfValues {
	return &BatchGetProvisioningPolicysResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetProvisioningPolicysResponse_FieldPathArrayItemValue {
	return &BatchGetProvisioningPolicysResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetProvisioningPolicysResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetProvisioningPolicysResponse_FieldPathValue allows storing values for BatchGetProvisioningPolicysResponse fields according to their type
type BatchGetProvisioningPolicysResponse_FieldPathValue interface {
	BatchGetProvisioningPolicysResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetProvisioningPolicysResponse)
	CompareWith(*BatchGetProvisioningPolicysResponse) (cmp int, comparable bool)
}

func ParseBatchGetProvisioningPolicysResponse_FieldPathValue(pathStr, valueStr string) (BatchGetProvisioningPolicysResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetProvisioningPolicysResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningPolicysResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetProvisioningPolicysResponse_FieldPathValue), nil
}

func MustParseBatchGetProvisioningPolicysResponse_FieldPathValue(pathStr, valueStr string) BatchGetProvisioningPolicysResponse_FieldPathValue {
	fpv, err := ParseBatchGetProvisioningPolicysResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetProvisioningPolicysResponse_FieldTerminalPathValue struct {
	BatchGetProvisioningPolicysResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProvisioningPolicysResponse_FieldPathValue = (*BatchGetProvisioningPolicysResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetProvisioningPolicysResponse' as interface{}
func (fpv *BatchGetProvisioningPolicysResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetProvisioningPolicysResponse_FieldTerminalPathValue) AsProvisioningPolicysValue() ([]*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpv.value.([]*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpv *BatchGetProvisioningPolicysResponse_FieldTerminalPathValue) AsMissingValue() ([]*provisioning_policy.Reference, bool) {
	res, ok := fpv.value.([]*provisioning_policy.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetProvisioningPolicysResponse
func (fpv *BatchGetProvisioningPolicysResponse_FieldTerminalPathValue) SetTo(target **BatchGetProvisioningPolicysResponse) {
	if *target == nil {
		*target = new(BatchGetProvisioningPolicysResponse)
	}
	switch fpv.selector {
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		(*target).ProvisioningPolicys = fpv.value.([]*provisioning_policy.ProvisioningPolicy)
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*provisioning_policy.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProvisioningPolicysResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProvisioningPolicysResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetProvisioningPolicysResponse_FieldTerminalPathValue' with the value under path in 'BatchGetProvisioningPolicysResponse'.
func (fpv *BatchGetProvisioningPolicysResponse_FieldTerminalPathValue) CompareWith(source *BatchGetProvisioningPolicysResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return 0, false
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetProvisioningPolicysResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetProvisioningPolicysResponse))
}

type BatchGetProvisioningPolicysResponse_FieldSubPathValue struct {
	BatchGetProvisioningPolicysResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetProvisioningPolicysResponse_FieldPathValue = (*BatchGetProvisioningPolicysResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetProvisioningPolicysResponse_FieldSubPathValue) AsProvisioningPolicysPathValue() (provisioning_policy.ProvisioningPolicy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetProvisioningPolicysResponse_FieldSubPathValue) SetTo(target **BatchGetProvisioningPolicysResponse) {
	if *target == nil {
		*target = new(BatchGetProvisioningPolicysResponse)
	}
	switch fpvs.Selector() {
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProvisioningPolicysResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetProvisioningPolicysResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetProvisioningPolicysResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetProvisioningPolicysResponse_FieldSubPathValue) CompareWith(source *BatchGetProvisioningPolicysResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetProvisioningPolicysResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetProvisioningPolicysResponse))
}

// BatchGetProvisioningPolicysResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetProvisioningPolicysResponse according to their type
// Present only for array (repeated) types.
type BatchGetProvisioningPolicysResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetProvisioningPolicysResponse_FieldPath
	ContainsValue(*BatchGetProvisioningPolicysResponse) bool
}

// ParseBatchGetProvisioningPolicysResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetProvisioningPolicysResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetProvisioningPolicysResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetProvisioningPolicysResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningPolicysResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetProvisioningPolicysResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetProvisioningPolicysResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetProvisioningPolicysResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetProvisioningPolicysResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetProvisioningPolicysResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetProvisioningPolicysResponse_FieldPathArrayItemValue = (*BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetProvisioningPolicysResponse as interface{}
func (fpaiv *BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) AsProvisioningPolicysItemValue() (*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpaiv.value.(*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpaiv *BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*provisioning_policy.Reference, bool) {
	res, ok := fpaiv.value.(*provisioning_policy.Reference)
	return res, ok
}

func (fpaiv *BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetProvisioningPolicysResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetProvisioningPolicysResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProvisioningPolicysResponse'
func (fpaiv *BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetProvisioningPolicysResponse) bool {
	slice := fpaiv.BatchGetProvisioningPolicysResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetProvisioningPolicysResponse_FieldSubPathArrayItemValue struct {
	BatchGetProvisioningPolicysResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetProvisioningPolicysResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetProvisioningPolicysResponse_FieldSubPathArrayItemValue) AsProvisioningPolicysPathItemValue() (provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetProvisioningPolicysResponse'
func (fpaivs *BatchGetProvisioningPolicysResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetProvisioningPolicysResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetProvisioningPolicysResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetProvisioningPolicysResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetProvisioningPolicysResponse fields according to their type
type BatchGetProvisioningPolicysResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetProvisioningPolicysResponse_FieldPath
}

func ParseBatchGetProvisioningPolicysResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetProvisioningPolicysResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetProvisioningPolicysResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetProvisioningPolicysResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetProvisioningPolicysResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetProvisioningPolicysResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetProvisioningPolicysResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetProvisioningPolicysResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetProvisioningPolicysResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetProvisioningPolicysResponse_FieldPathArrayOfValues = (*BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		for _, v := range fpaov.values.([][]*provisioning_policy.ProvisioningPolicy) {
			values = append(values, v)
		}
	case BatchGetProvisioningPolicysResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*provisioning_policy.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) AsProvisioningPolicysArrayOfValues() ([][]*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpaov.values.([][]*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpaov *BatchGetProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*provisioning_policy.Reference, bool) {
	res, ok := fpaov.values.([][]*provisioning_policy.Reference)
	return res, ok
}

type BatchGetProvisioningPolicysResponse_FieldSubPathArrayOfValues struct {
	BatchGetProvisioningPolicysResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetProvisioningPolicysResponse_FieldPathArrayOfValues = (*BatchGetProvisioningPolicysResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetProvisioningPolicysResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetProvisioningPolicysResponse_FieldSubPathArrayOfValues) AsProvisioningPolicysPathArrayOfValues() (provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProvisioningPolicysRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProvisioningPolicysRequest_FieldPathSelector
	Get(source *ListProvisioningPolicysRequest) []interface{}
	GetSingle(source *ListProvisioningPolicysRequest) (interface{}, bool)
	ClearValue(item *ListProvisioningPolicysRequest)

	// Those methods build corresponding ListProvisioningPolicysRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProvisioningPolicysRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProvisioningPolicysRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProvisioningPolicysRequest_FieldPathArrayItemValue
}

type ListProvisioningPolicysRequest_FieldPathSelector int32

const (
	ListProvisioningPolicysRequest_FieldPathSelectorParent    ListProvisioningPolicysRequest_FieldPathSelector = 0
	ListProvisioningPolicysRequest_FieldPathSelectorPageSize  ListProvisioningPolicysRequest_FieldPathSelector = 1
	ListProvisioningPolicysRequest_FieldPathSelectorPageToken ListProvisioningPolicysRequest_FieldPathSelector = 2
	ListProvisioningPolicysRequest_FieldPathSelectorOrderBy   ListProvisioningPolicysRequest_FieldPathSelector = 3
	ListProvisioningPolicysRequest_FieldPathSelectorFilter    ListProvisioningPolicysRequest_FieldPathSelector = 4
	ListProvisioningPolicysRequest_FieldPathSelectorFieldMask ListProvisioningPolicysRequest_FieldPathSelector = 5
	ListProvisioningPolicysRequest_FieldPathSelectorView      ListProvisioningPolicysRequest_FieldPathSelector = 6
)

func (s ListProvisioningPolicysRequest_FieldPathSelector) String() string {
	switch s {
	case ListProvisioningPolicysRequest_FieldPathSelectorParent:
		return "parent"
	case ListProvisioningPolicysRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListProvisioningPolicysRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListProvisioningPolicysRequest_FieldPathSelectorFilter:
		return "filter"
	case ListProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListProvisioningPolicysRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysRequest: %d", s))
	}
}

func BuildListProvisioningPolicysRequest_FieldPath(fp gotenobject.RawFieldPath) (ListProvisioningPolicysRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProvisioningPolicysRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListProvisioningPolicysRequest_FieldTerminalPath{selector: ListProvisioningPolicysRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListProvisioningPolicysRequest_FieldTerminalPath{selector: ListProvisioningPolicysRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListProvisioningPolicysRequest_FieldTerminalPath{selector: ListProvisioningPolicysRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListProvisioningPolicysRequest_FieldTerminalPath{selector: ListProvisioningPolicysRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListProvisioningPolicysRequest_FieldTerminalPath{selector: ListProvisioningPolicysRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListProvisioningPolicysRequest_FieldTerminalPath{selector: ListProvisioningPolicysRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListProvisioningPolicysRequest_FieldTerminalPath{selector: ListProvisioningPolicysRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProvisioningPolicysRequest", fp)
}

func ParseListProvisioningPolicysRequest_FieldPath(rawField string) (ListProvisioningPolicysRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProvisioningPolicysRequest_FieldPath(fp)
}

func MustParseListProvisioningPolicysRequest_FieldPath(rawField string) ListProvisioningPolicysRequest_FieldPath {
	fp, err := ParseListProvisioningPolicysRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProvisioningPolicysRequest_FieldTerminalPath struct {
	selector ListProvisioningPolicysRequest_FieldPathSelector
}

var _ ListProvisioningPolicysRequest_FieldPath = (*ListProvisioningPolicysRequest_FieldTerminalPath)(nil)

func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) Selector() ListProvisioningPolicysRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProvisioningPolicysRequest
func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) Get(source *ListProvisioningPolicysRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProvisioningPolicysRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListProvisioningPolicysRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListProvisioningPolicysRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListProvisioningPolicysRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListProvisioningPolicysRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListProvisioningPolicysRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListProvisioningPolicysRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProvisioningPolicysRequest))
}

// GetSingle returns value pointed by specific field of from source ListProvisioningPolicysRequest
func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) GetSingle(source *ListProvisioningPolicysRequest) (interface{}, bool) {
	switch fp.selector {
	case ListProvisioningPolicysRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListProvisioningPolicysRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListProvisioningPolicysRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListProvisioningPolicysRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListProvisioningPolicysRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysRequest: %d", fp.selector))
	}
}

func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProvisioningPolicysRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProvisioningPolicysRequest_FieldPathSelectorParent:
		return (*provisioning_policy.ParentName)(nil)
	case ListProvisioningPolicysRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListProvisioningPolicysRequest_FieldPathSelectorPageToken:
		return (*provisioning_policy.PagerCursor)(nil)
	case ListProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		return (*provisioning_policy.OrderBy)(nil)
	case ListProvisioningPolicysRequest_FieldPathSelectorFilter:
		return (*provisioning_policy.Filter)(nil)
	case ListProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return (*provisioning_policy.ProvisioningPolicy_FieldMask)(nil)
	case ListProvisioningPolicysRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysRequest: %d", fp.selector))
	}
}

func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) ClearValue(item *ListProvisioningPolicysRequest) {
	if item != nil {
		switch fp.selector {
		case ListProvisioningPolicysRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListProvisioningPolicysRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListProvisioningPolicysRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListProvisioningPolicysRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListProvisioningPolicysRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListProvisioningPolicysRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListProvisioningPolicysRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysRequest: %d", fp.selector))
		}
	}
}

func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProvisioningPolicysRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProvisioningPolicysRequest_FieldPathSelectorParent ||
		fp.selector == ListProvisioningPolicysRequest_FieldPathSelectorPageSize ||
		fp.selector == ListProvisioningPolicysRequest_FieldPathSelectorPageToken ||
		fp.selector == ListProvisioningPolicysRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListProvisioningPolicysRequest_FieldPathSelectorFilter ||
		fp.selector == ListProvisioningPolicysRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListProvisioningPolicysRequest_FieldPathSelectorView
}

func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) WithIValue(value interface{}) ListProvisioningPolicysRequest_FieldPathValue {
	switch fp.selector {
	case ListProvisioningPolicysRequest_FieldPathSelectorParent:
		return &ListProvisioningPolicysRequest_FieldTerminalPathValue{ListProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ParentName)}
	case ListProvisioningPolicysRequest_FieldPathSelectorPageSize:
		return &ListProvisioningPolicysRequest_FieldTerminalPathValue{ListProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListProvisioningPolicysRequest_FieldPathSelectorPageToken:
		return &ListProvisioningPolicysRequest_FieldTerminalPathValue{ListProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.PagerCursor)}
	case ListProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		return &ListProvisioningPolicysRequest_FieldTerminalPathValue{ListProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.OrderBy)}
	case ListProvisioningPolicysRequest_FieldPathSelectorFilter:
		return &ListProvisioningPolicysRequest_FieldTerminalPathValue{ListProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Filter)}
	case ListProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return &ListProvisioningPolicysRequest_FieldTerminalPathValue{ListProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case ListProvisioningPolicysRequest_FieldPathSelectorView:
		return &ListProvisioningPolicysRequest_FieldTerminalPathValue{ListProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysRequest: %d", fp.selector))
	}
}

func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProvisioningPolicysRequest_FieldPathArrayOfValues {
	fpaov := &ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{ListProvisioningPolicysRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProvisioningPolicysRequest_FieldPathSelectorParent:
		return &ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{ListProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ParentName)}
	case ListProvisioningPolicysRequest_FieldPathSelectorPageSize:
		return &ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{ListProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListProvisioningPolicysRequest_FieldPathSelectorPageToken:
		return &ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{ListProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.PagerCursor)}
	case ListProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		return &ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{ListProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.OrderBy)}
	case ListProvisioningPolicysRequest_FieldPathSelectorFilter:
		return &ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{ListProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.Filter)}
	case ListProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return &ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{ListProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case ListProvisioningPolicysRequest_FieldPathSelectorView:
		return &ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{ListProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProvisioningPolicysRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysRequest: %d", fp.selector))
	}
}

func (fp *ListProvisioningPolicysRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListProvisioningPolicysRequest_FieldPathValue allows storing values for ListProvisioningPolicysRequest fields according to their type
type ListProvisioningPolicysRequest_FieldPathValue interface {
	ListProvisioningPolicysRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProvisioningPolicysRequest)
	CompareWith(*ListProvisioningPolicysRequest) (cmp int, comparable bool)
}

func ParseListProvisioningPolicysRequest_FieldPathValue(pathStr, valueStr string) (ListProvisioningPolicysRequest_FieldPathValue, error) {
	fp, err := ParseListProvisioningPolicysRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningPolicysRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProvisioningPolicysRequest_FieldPathValue), nil
}

func MustParseListProvisioningPolicysRequest_FieldPathValue(pathStr, valueStr string) ListProvisioningPolicysRequest_FieldPathValue {
	fpv, err := ParseListProvisioningPolicysRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProvisioningPolicysRequest_FieldTerminalPathValue struct {
	ListProvisioningPolicysRequest_FieldTerminalPath
	value interface{}
}

var _ ListProvisioningPolicysRequest_FieldPathValue = (*ListProvisioningPolicysRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProvisioningPolicysRequest' as interface{}
func (fpv *ListProvisioningPolicysRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProvisioningPolicysRequest_FieldTerminalPathValue) AsParentValue() (*provisioning_policy.ParentName, bool) {
	res, ok := fpv.value.(*provisioning_policy.ParentName)
	return res, ok
}
func (fpv *ListProvisioningPolicysRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListProvisioningPolicysRequest_FieldTerminalPathValue) AsPageTokenValue() (*provisioning_policy.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpv *ListProvisioningPolicysRequest_FieldTerminalPathValue) AsOrderByValue() (*provisioning_policy.OrderBy, bool) {
	res, ok := fpv.value.(*provisioning_policy.OrderBy)
	return res, ok
}
func (fpv *ListProvisioningPolicysRequest_FieldTerminalPathValue) AsFilterValue() (*provisioning_policy.Filter, bool) {
	res, ok := fpv.value.(*provisioning_policy.Filter)
	return res, ok
}
func (fpv *ListProvisioningPolicysRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpv *ListProvisioningPolicysRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListProvisioningPolicysRequest
func (fpv *ListProvisioningPolicysRequest_FieldTerminalPathValue) SetTo(target **ListProvisioningPolicysRequest) {
	if *target == nil {
		*target = new(ListProvisioningPolicysRequest)
	}
	switch fpv.selector {
	case ListProvisioningPolicysRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*provisioning_policy.ParentName)
	case ListProvisioningPolicysRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListProvisioningPolicysRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*provisioning_policy.PagerCursor)
	case ListProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*provisioning_policy.OrderBy)
	case ListProvisioningPolicysRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*provisioning_policy.Filter)
	case ListProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	case ListProvisioningPolicysRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysRequest: %d", fpv.selector))
	}
}

func (fpv *ListProvisioningPolicysRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProvisioningPolicysRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProvisioningPolicysRequest_FieldTerminalPathValue' with the value under path in 'ListProvisioningPolicysRequest'.
func (fpv *ListProvisioningPolicysRequest_FieldTerminalPathValue) CompareWith(source *ListProvisioningPolicysRequest) (int, bool) {
	switch fpv.selector {
	case ListProvisioningPolicysRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*provisioning_policy.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListProvisioningPolicysRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListProvisioningPolicysRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListProvisioningPolicysRequest_FieldPathSelectorFilter:
		return 0, false
	case ListProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListProvisioningPolicysRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysRequest: %d", fpv.selector))
	}
}

func (fpv *ListProvisioningPolicysRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProvisioningPolicysRequest))
}

// ListProvisioningPolicysRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProvisioningPolicysRequest according to their type
// Present only for array (repeated) types.
type ListProvisioningPolicysRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProvisioningPolicysRequest_FieldPath
	ContainsValue(*ListProvisioningPolicysRequest) bool
}

// ParseListProvisioningPolicysRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProvisioningPolicysRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListProvisioningPolicysRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListProvisioningPolicysRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningPolicysRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProvisioningPolicysRequest_FieldPathArrayItemValue), nil
}

func MustParseListProvisioningPolicysRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListProvisioningPolicysRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListProvisioningPolicysRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProvisioningPolicysRequest_FieldTerminalPathArrayItemValue struct {
	ListProvisioningPolicysRequest_FieldTerminalPath
	value interface{}
}

var _ ListProvisioningPolicysRequest_FieldPathArrayItemValue = (*ListProvisioningPolicysRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProvisioningPolicysRequest as interface{}
func (fpaiv *ListProvisioningPolicysRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListProvisioningPolicysRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListProvisioningPolicysRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProvisioningPolicysRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProvisioningPolicysRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProvisioningPolicysRequest'
func (fpaiv *ListProvisioningPolicysRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProvisioningPolicysRequest) bool {
	slice := fpaiv.ListProvisioningPolicysRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListProvisioningPolicysRequest_FieldPathArrayOfValues allows storing slice of values for ListProvisioningPolicysRequest fields according to their type
type ListProvisioningPolicysRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProvisioningPolicysRequest_FieldPath
}

func ParseListProvisioningPolicysRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProvisioningPolicysRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListProvisioningPolicysRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningPolicysRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProvisioningPolicysRequest_FieldPathArrayOfValues), nil
}

func MustParseListProvisioningPolicysRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListProvisioningPolicysRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListProvisioningPolicysRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues struct {
	ListProvisioningPolicysRequest_FieldTerminalPath
	values interface{}
}

var _ ListProvisioningPolicysRequest_FieldPathArrayOfValues = (*ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProvisioningPolicysRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*provisioning_policy.ParentName) {
			values = append(values, v)
		}
	case ListProvisioningPolicysRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListProvisioningPolicysRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*provisioning_policy.PagerCursor) {
			values = append(values, v)
		}
	case ListProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*provisioning_policy.OrderBy) {
			values = append(values, v)
		}
	case ListProvisioningPolicysRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*provisioning_policy.Filter) {
			values = append(values, v)
		}
	case ListProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask) {
			values = append(values, v)
		}
	case ListProvisioningPolicysRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*provisioning_policy.ParentName, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ParentName)
	return res, ok
}
func (fpaov *ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*provisioning_policy.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpaov *ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*provisioning_policy.OrderBy, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.OrderBy)
	return res, ok
}
func (fpaov *ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*provisioning_policy.Filter, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.Filter)
	return res, ok
}
func (fpaov *ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpaov *ListProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListProvisioningPolicysResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListProvisioningPolicysResponse_FieldPathSelector
	Get(source *ListProvisioningPolicysResponse) []interface{}
	GetSingle(source *ListProvisioningPolicysResponse) (interface{}, bool)
	ClearValue(item *ListProvisioningPolicysResponse)

	// Those methods build corresponding ListProvisioningPolicysResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListProvisioningPolicysResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListProvisioningPolicysResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListProvisioningPolicysResponse_FieldPathArrayItemValue
}

type ListProvisioningPolicysResponse_FieldPathSelector int32

const (
	ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys ListProvisioningPolicysResponse_FieldPathSelector = 0
	ListProvisioningPolicysResponse_FieldPathSelectorPrevPageToken       ListProvisioningPolicysResponse_FieldPathSelector = 1
	ListProvisioningPolicysResponse_FieldPathSelectorNextPageToken       ListProvisioningPolicysResponse_FieldPathSelector = 2
)

func (s ListProvisioningPolicysResponse_FieldPathSelector) String() string {
	switch s {
	case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return "provisioning_policys"
	case ListProvisioningPolicysResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListProvisioningPolicysResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", s))
	}
}

func BuildListProvisioningPolicysResponse_FieldPath(fp gotenobject.RawFieldPath) (ListProvisioningPolicysResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListProvisioningPolicysResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "provisioning_policys", "provisioningPolicys", "provisioning-policys":
			return &ListProvisioningPolicysResponse_FieldTerminalPath{selector: ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListProvisioningPolicysResponse_FieldTerminalPath{selector: ListProvisioningPolicysResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListProvisioningPolicysResponse_FieldTerminalPath{selector: ListProvisioningPolicysResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "provisioning_policys", "provisioningPolicys", "provisioning-policys":
			if subpath, err := provisioning_policy.BuildProvisioningPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListProvisioningPolicysResponse_FieldSubPath{selector: ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListProvisioningPolicysResponse", fp)
}

func ParseListProvisioningPolicysResponse_FieldPath(rawField string) (ListProvisioningPolicysResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListProvisioningPolicysResponse_FieldPath(fp)
}

func MustParseListProvisioningPolicysResponse_FieldPath(rawField string) ListProvisioningPolicysResponse_FieldPath {
	fp, err := ParseListProvisioningPolicysResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListProvisioningPolicysResponse_FieldTerminalPath struct {
	selector ListProvisioningPolicysResponse_FieldPathSelector
}

var _ ListProvisioningPolicysResponse_FieldPath = (*ListProvisioningPolicysResponse_FieldTerminalPath)(nil)

func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) Selector() ListProvisioningPolicysResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListProvisioningPolicysResponse
func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) Get(source *ListProvisioningPolicysResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
			for _, value := range source.GetProvisioningPolicys() {
				values = append(values, value)
			}
		case ListProvisioningPolicysResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListProvisioningPolicysResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListProvisioningPolicysResponse))
}

// GetSingle returns value pointed by specific field of from source ListProvisioningPolicysResponse
func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) GetSingle(source *ListProvisioningPolicysResponse) (interface{}, bool) {
	switch fp.selector {
	case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		res := source.GetProvisioningPolicys()
		return res, res != nil
	case ListProvisioningPolicysResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListProvisioningPolicysResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fp.selector))
	}
}

func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListProvisioningPolicysResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return ([]*provisioning_policy.ProvisioningPolicy)(nil)
	case ListProvisioningPolicysResponse_FieldPathSelectorPrevPageToken:
		return (*provisioning_policy.PagerCursor)(nil)
	case ListProvisioningPolicysResponse_FieldPathSelectorNextPageToken:
		return (*provisioning_policy.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fp.selector))
	}
}

func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) ClearValue(item *ListProvisioningPolicysResponse) {
	if item != nil {
		switch fp.selector {
		case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
			item.ProvisioningPolicys = nil
		case ListProvisioningPolicysResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListProvisioningPolicysResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fp.selector))
		}
	}
}

func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListProvisioningPolicysResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListProvisioningPolicysResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListProvisioningPolicysResponse_FieldPathSelectorNextPageToken
}

func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) WithIValue(value interface{}) ListProvisioningPolicysResponse_FieldPathValue {
	switch fp.selector {
	case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return &ListProvisioningPolicysResponse_FieldTerminalPathValue{ListProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.([]*provisioning_policy.ProvisioningPolicy)}
	case ListProvisioningPolicysResponse_FieldPathSelectorPrevPageToken:
		return &ListProvisioningPolicysResponse_FieldTerminalPathValue{ListProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.(*provisioning_policy.PagerCursor)}
	case ListProvisioningPolicysResponse_FieldPathSelectorNextPageToken:
		return &ListProvisioningPolicysResponse_FieldTerminalPathValue{ListProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.(*provisioning_policy.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fp.selector))
	}
}

func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListProvisioningPolicysResponse_FieldPathArrayOfValues {
	fpaov := &ListProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{ListProvisioningPolicysResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return &ListProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{ListProvisioningPolicysResponse_FieldTerminalPath: *fp, values: values.([][]*provisioning_policy.ProvisioningPolicy)}
	case ListProvisioningPolicysResponse_FieldPathSelectorPrevPageToken:
		return &ListProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{ListProvisioningPolicysResponse_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.PagerCursor)}
	case ListProvisioningPolicysResponse_FieldPathSelectorNextPageToken:
		return &ListProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{ListProvisioningPolicysResponse_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListProvisioningPolicysResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return &ListProvisioningPolicysResponse_FieldTerminalPathArrayItemValue{ListProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fp.selector))
	}
}

func (fp *ListProvisioningPolicysResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListProvisioningPolicysResponse_FieldSubPath struct {
	selector ListProvisioningPolicysResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListProvisioningPolicysResponse_FieldPath = (*ListProvisioningPolicysResponse_FieldSubPath)(nil)

func (fps *ListProvisioningPolicysResponse_FieldSubPath) Selector() ListProvisioningPolicysResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListProvisioningPolicysResponse_FieldSubPath) AsProvisioningPolicysSubPath() (provisioning_policy.ProvisioningPolicy_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_policy.ProvisioningPolicy_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListProvisioningPolicysResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListProvisioningPolicysResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListProvisioningPolicysResponse
func (fps *ListProvisioningPolicysResponse_FieldSubPath) Get(source *ListProvisioningPolicysResponse) (values []interface{}) {
	if asProvisioningPolicyFieldPath, ok := fps.AsProvisioningPolicysSubPath(); ok {
		for _, item := range source.GetProvisioningPolicys() {
			values = append(values, asProvisioningPolicyFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fps.selector))
	}
	return
}

func (fps *ListProvisioningPolicysResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListProvisioningPolicysResponse))
}

// GetSingle returns value of selected field from source ListProvisioningPolicysResponse
func (fps *ListProvisioningPolicysResponse_FieldSubPath) GetSingle(source *ListProvisioningPolicysResponse) (interface{}, bool) {
	switch fps.selector {
	case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		if len(source.GetProvisioningPolicys()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProvisioningPolicys()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fps.selector))
	}
}

func (fps *ListProvisioningPolicysResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListProvisioningPolicysResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListProvisioningPolicysResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListProvisioningPolicysResponse_FieldSubPath) ClearValue(item *ListProvisioningPolicysResponse) {
	if item != nil {
		switch fps.selector {
		case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
			for _, subItem := range item.ProvisioningPolicys {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fps.selector))
		}
	}
}

func (fps *ListProvisioningPolicysResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListProvisioningPolicysResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListProvisioningPolicysResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListProvisioningPolicysResponse_FieldSubPath) WithIValue(value interface{}) ListProvisioningPolicysResponse_FieldPathValue {
	return &ListProvisioningPolicysResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListProvisioningPolicysResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListProvisioningPolicysResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListProvisioningPolicysResponse_FieldPathArrayOfValues {
	return &ListProvisioningPolicysResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListProvisioningPolicysResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListProvisioningPolicysResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListProvisioningPolicysResponse_FieldPathArrayItemValue {
	return &ListProvisioningPolicysResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListProvisioningPolicysResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListProvisioningPolicysResponse_FieldPathValue allows storing values for ListProvisioningPolicysResponse fields according to their type
type ListProvisioningPolicysResponse_FieldPathValue interface {
	ListProvisioningPolicysResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListProvisioningPolicysResponse)
	CompareWith(*ListProvisioningPolicysResponse) (cmp int, comparable bool)
}

func ParseListProvisioningPolicysResponse_FieldPathValue(pathStr, valueStr string) (ListProvisioningPolicysResponse_FieldPathValue, error) {
	fp, err := ParseListProvisioningPolicysResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningPolicysResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListProvisioningPolicysResponse_FieldPathValue), nil
}

func MustParseListProvisioningPolicysResponse_FieldPathValue(pathStr, valueStr string) ListProvisioningPolicysResponse_FieldPathValue {
	fpv, err := ParseListProvisioningPolicysResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListProvisioningPolicysResponse_FieldTerminalPathValue struct {
	ListProvisioningPolicysResponse_FieldTerminalPath
	value interface{}
}

var _ ListProvisioningPolicysResponse_FieldPathValue = (*ListProvisioningPolicysResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListProvisioningPolicysResponse' as interface{}
func (fpv *ListProvisioningPolicysResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListProvisioningPolicysResponse_FieldTerminalPathValue) AsProvisioningPolicysValue() ([]*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpv.value.([]*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpv *ListProvisioningPolicysResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*provisioning_policy.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpv *ListProvisioningPolicysResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*provisioning_policy.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_policy.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListProvisioningPolicysResponse
func (fpv *ListProvisioningPolicysResponse_FieldTerminalPathValue) SetTo(target **ListProvisioningPolicysResponse) {
	if *target == nil {
		*target = new(ListProvisioningPolicysResponse)
	}
	switch fpv.selector {
	case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		(*target).ProvisioningPolicys = fpv.value.([]*provisioning_policy.ProvisioningPolicy)
	case ListProvisioningPolicysResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*provisioning_policy.PagerCursor)
	case ListProvisioningPolicysResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*provisioning_policy.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fpv.selector))
	}
}

func (fpv *ListProvisioningPolicysResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProvisioningPolicysResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListProvisioningPolicysResponse_FieldTerminalPathValue' with the value under path in 'ListProvisioningPolicysResponse'.
func (fpv *ListProvisioningPolicysResponse_FieldTerminalPathValue) CompareWith(source *ListProvisioningPolicysResponse) (int, bool) {
	switch fpv.selector {
	case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return 0, false
	case ListProvisioningPolicysResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListProvisioningPolicysResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fpv.selector))
	}
}

func (fpv *ListProvisioningPolicysResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListProvisioningPolicysResponse))
}

type ListProvisioningPolicysResponse_FieldSubPathValue struct {
	ListProvisioningPolicysResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListProvisioningPolicysResponse_FieldPathValue = (*ListProvisioningPolicysResponse_FieldSubPathValue)(nil)

func (fpvs *ListProvisioningPolicysResponse_FieldSubPathValue) AsProvisioningPolicysPathValue() (provisioning_policy.ProvisioningPolicy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue)
	return res, ok
}

func (fpvs *ListProvisioningPolicysResponse_FieldSubPathValue) SetTo(target **ListProvisioningPolicysResponse) {
	if *target == nil {
		*target = new(ListProvisioningPolicysResponse)
	}
	switch fpvs.Selector() {
	case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProvisioningPolicysResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListProvisioningPolicysResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListProvisioningPolicysResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListProvisioningPolicysResponse_FieldSubPathValue) CompareWith(source *ListProvisioningPolicysResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListProvisioningPolicysResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListProvisioningPolicysResponse))
}

// ListProvisioningPolicysResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListProvisioningPolicysResponse according to their type
// Present only for array (repeated) types.
type ListProvisioningPolicysResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListProvisioningPolicysResponse_FieldPath
	ContainsValue(*ListProvisioningPolicysResponse) bool
}

// ParseListProvisioningPolicysResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListProvisioningPolicysResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListProvisioningPolicysResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListProvisioningPolicysResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningPolicysResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListProvisioningPolicysResponse_FieldPathArrayItemValue), nil
}

func MustParseListProvisioningPolicysResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListProvisioningPolicysResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListProvisioningPolicysResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListProvisioningPolicysResponse_FieldTerminalPathArrayItemValue struct {
	ListProvisioningPolicysResponse_FieldTerminalPath
	value interface{}
}

var _ ListProvisioningPolicysResponse_FieldPathArrayItemValue = (*ListProvisioningPolicysResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListProvisioningPolicysResponse as interface{}
func (fpaiv *ListProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) AsProvisioningPolicysItemValue() (*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpaiv.value.(*provisioning_policy.ProvisioningPolicy)
	return res, ok
}

func (fpaiv *ListProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListProvisioningPolicysResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListProvisioningPolicysResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProvisioningPolicysResponse'
func (fpaiv *ListProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListProvisioningPolicysResponse) bool {
	slice := fpaiv.ListProvisioningPolicysResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListProvisioningPolicysResponse_FieldSubPathArrayItemValue struct {
	ListProvisioningPolicysResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListProvisioningPolicysResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListProvisioningPolicysResponse_FieldSubPathArrayItemValue) AsProvisioningPolicysPathItemValue() (provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListProvisioningPolicysResponse'
func (fpaivs *ListProvisioningPolicysResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListProvisioningPolicysResponse) bool {
	switch fpaivs.Selector() {
	case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListProvisioningPolicysResponse: %d", fpaivs.Selector()))
	}
}

// ListProvisioningPolicysResponse_FieldPathArrayOfValues allows storing slice of values for ListProvisioningPolicysResponse fields according to their type
type ListProvisioningPolicysResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListProvisioningPolicysResponse_FieldPath
}

func ParseListProvisioningPolicysResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListProvisioningPolicysResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListProvisioningPolicysResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListProvisioningPolicysResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListProvisioningPolicysResponse_FieldPathArrayOfValues), nil
}

func MustParseListProvisioningPolicysResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListProvisioningPolicysResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListProvisioningPolicysResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListProvisioningPolicysResponse_FieldTerminalPathArrayOfValues struct {
	ListProvisioningPolicysResponse_FieldTerminalPath
	values interface{}
}

var _ ListProvisioningPolicysResponse_FieldPathArrayOfValues = (*ListProvisioningPolicysResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicys:
		for _, v := range fpaov.values.([][]*provisioning_policy.ProvisioningPolicy) {
			values = append(values, v)
		}
	case ListProvisioningPolicysResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*provisioning_policy.PagerCursor) {
			values = append(values, v)
		}
	case ListProvisioningPolicysResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*provisioning_policy.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) AsProvisioningPolicysArrayOfValues() ([][]*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpaov.values.([][]*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpaov *ListProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*provisioning_policy.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpaov *ListProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*provisioning_policy.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.PagerCursor)
	return res, ok
}

type ListProvisioningPolicysResponse_FieldSubPathArrayOfValues struct {
	ListProvisioningPolicysResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListProvisioningPolicysResponse_FieldPathArrayOfValues = (*ListProvisioningPolicysResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListProvisioningPolicysResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListProvisioningPolicysResponse_FieldSubPathArrayOfValues) AsProvisioningPolicysPathArrayOfValues() (provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningPolicyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningPolicyRequest_FieldPathSelector
	Get(source *WatchProvisioningPolicyRequest) []interface{}
	GetSingle(source *WatchProvisioningPolicyRequest) (interface{}, bool)
	ClearValue(item *WatchProvisioningPolicyRequest)

	// Those methods build corresponding WatchProvisioningPolicyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningPolicyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningPolicyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningPolicyRequest_FieldPathArrayItemValue
}

type WatchProvisioningPolicyRequest_FieldPathSelector int32

const (
	WatchProvisioningPolicyRequest_FieldPathSelectorName      WatchProvisioningPolicyRequest_FieldPathSelector = 0
	WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask WatchProvisioningPolicyRequest_FieldPathSelector = 1
	WatchProvisioningPolicyRequest_FieldPathSelectorView      WatchProvisioningPolicyRequest_FieldPathSelector = 2
)

func (s WatchProvisioningPolicyRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		return "name"
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", s))
	}
}

func BuildWatchProvisioningPolicyRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningPolicyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningPolicyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchProvisioningPolicyRequest_FieldTerminalPath{selector: WatchProvisioningPolicyRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProvisioningPolicyRequest_FieldTerminalPath{selector: WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProvisioningPolicyRequest_FieldTerminalPath{selector: WatchProvisioningPolicyRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningPolicyRequest", fp)
}

func ParseWatchProvisioningPolicyRequest_FieldPath(rawField string) (WatchProvisioningPolicyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningPolicyRequest_FieldPath(fp)
}

func MustParseWatchProvisioningPolicyRequest_FieldPath(rawField string) WatchProvisioningPolicyRequest_FieldPath {
	fp, err := ParseWatchProvisioningPolicyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningPolicyRequest_FieldTerminalPath struct {
	selector WatchProvisioningPolicyRequest_FieldPathSelector
}

var _ WatchProvisioningPolicyRequest_FieldPath = (*WatchProvisioningPolicyRequest_FieldTerminalPath)(nil)

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) Selector() WatchProvisioningPolicyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningPolicyRequest
func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) Get(source *WatchProvisioningPolicyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningPolicyRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProvisioningPolicyRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningPolicyRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningPolicyRequest
func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) GetSingle(source *WatchProvisioningPolicyRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningPolicyRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		return (*provisioning_policy.Reference)(nil)
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return (*provisioning_policy.ProvisioningPolicy_FieldMask)(nil)
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) ClearValue(item *WatchProvisioningPolicyRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningPolicyRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProvisioningPolicyRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningPolicyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningPolicyRequest_FieldPathSelectorName ||
		fp.selector == WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProvisioningPolicyRequest_FieldPathSelectorView
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningPolicyRequest_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		return &WatchProvisioningPolicyRequest_FieldTerminalPathValue{WatchProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Reference)}
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return &WatchProvisioningPolicyRequest_FieldTerminalPathValue{WatchProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		return &WatchProvisioningPolicyRequest_FieldTerminalPathValue{WatchProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		return &WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.Reference)}
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return &WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		return &WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningPolicyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProvisioningPolicyRequest_FieldPathValue allows storing values for WatchProvisioningPolicyRequest fields according to their type
type WatchProvisioningPolicyRequest_FieldPathValue interface {
	WatchProvisioningPolicyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningPolicyRequest)
	CompareWith(*WatchProvisioningPolicyRequest) (cmp int, comparable bool)
}

func ParseWatchProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) (WatchProvisioningPolicyRequest_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningPolicyRequest_FieldPathValue), nil
}

func MustParseWatchProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) WatchProvisioningPolicyRequest_FieldPathValue {
	fpv, err := ParseWatchProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningPolicyRequest_FieldTerminalPathValue struct {
	WatchProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPolicyRequest_FieldPathValue = (*WatchProvisioningPolicyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProvisioningPolicyRequest' as interface{}
func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) AsNameValue() (*provisioning_policy.Reference, bool) {
	res, ok := fpv.value.(*provisioning_policy.Reference)
	return res, ok
}
func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchProvisioningPolicyRequest
func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) SetTo(target **WatchProvisioningPolicyRequest) {
	if *target == nil {
		*target = new(WatchProvisioningPolicyRequest)
	}
	switch fpv.selector {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*provisioning_policy.Reference)
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningPolicyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningPolicyRequest_FieldTerminalPathValue' with the value under path in 'WatchProvisioningPolicyRequest'.
func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) CompareWith(source *WatchProvisioningPolicyRequest) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*provisioning_policy.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPolicyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningPolicyRequest))
}

// WatchProvisioningPolicyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProvisioningPolicyRequest according to their type
// Present only for array (repeated) types.
type WatchProvisioningPolicyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningPolicyRequest_FieldPath
	ContainsValue(*WatchProvisioningPolicyRequest) bool
}

// ParseWatchProvisioningPolicyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningPolicyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningPolicyRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningPolicyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningPolicyRequest_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPolicyRequest_FieldPathArrayItemValue = (*WatchProvisioningPolicyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningPolicyRequest as interface{}
func (fpaiv *WatchProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningPolicyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningPolicyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningPolicyRequest'
func (fpaiv *WatchProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningPolicyRequest) bool {
	slice := fpaiv.WatchProvisioningPolicyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProvisioningPolicyRequest_FieldPathArrayOfValues allows storing slice of values for WatchProvisioningPolicyRequest fields according to their type
type WatchProvisioningPolicyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningPolicyRequest_FieldPath
}

func ParseWatchProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningPolicyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningPolicyRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningPolicyRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningPolicyRequest_FieldPathArrayOfValues = (*WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningPolicyRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*provisioning_policy.Reference) {
			values = append(values, v)
		}
	case WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask) {
			values = append(values, v)
		}
	case WatchProvisioningPolicyRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*provisioning_policy.Reference, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.Reference)
	return res, ok
}
func (fpaov *WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpaov *WatchProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningPolicyResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningPolicyResponse_FieldPathSelector
	Get(source *WatchProvisioningPolicyResponse) []interface{}
	GetSingle(source *WatchProvisioningPolicyResponse) (interface{}, bool)
	ClearValue(item *WatchProvisioningPolicyResponse)

	// Those methods build corresponding WatchProvisioningPolicyResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningPolicyResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningPolicyResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningPolicyResponse_FieldPathArrayItemValue
}

type WatchProvisioningPolicyResponse_FieldPathSelector int32

const (
	WatchProvisioningPolicyResponse_FieldPathSelectorChange WatchProvisioningPolicyResponse_FieldPathSelector = 0
)

func (s WatchProvisioningPolicyResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", s))
	}
}

func BuildWatchProvisioningPolicyResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningPolicyResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningPolicyResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchProvisioningPolicyResponse_FieldTerminalPath{selector: WatchProvisioningPolicyResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningPolicyResponse", fp)
}

func ParseWatchProvisioningPolicyResponse_FieldPath(rawField string) (WatchProvisioningPolicyResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningPolicyResponse_FieldPath(fp)
}

func MustParseWatchProvisioningPolicyResponse_FieldPath(rawField string) WatchProvisioningPolicyResponse_FieldPath {
	fp, err := ParseWatchProvisioningPolicyResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningPolicyResponse_FieldTerminalPath struct {
	selector WatchProvisioningPolicyResponse_FieldPathSelector
}

var _ WatchProvisioningPolicyResponse_FieldPath = (*WatchProvisioningPolicyResponse_FieldTerminalPath)(nil)

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) Selector() WatchProvisioningPolicyResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningPolicyResponse
func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) Get(source *WatchProvisioningPolicyResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningPolicyResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningPolicyResponse
func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) GetSingle(source *WatchProvisioningPolicyResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningPolicyResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		return (*provisioning_policy.ProvisioningPolicyChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) ClearValue(item *WatchProvisioningPolicyResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningPolicyResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningPolicyResponse_FieldPathSelectorChange
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningPolicyResponse_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		return &WatchProvisioningPolicyResponse_FieldTerminalPathValue{WatchProvisioningPolicyResponse_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicyChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningPolicyResponse_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningPolicyResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPolicyResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		return &WatchProvisioningPolicyResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPolicyResponse_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicyChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningPolicyResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicyResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProvisioningPolicyResponse_FieldPathValue allows storing values for WatchProvisioningPolicyResponse fields according to their type
type WatchProvisioningPolicyResponse_FieldPathValue interface {
	WatchProvisioningPolicyResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningPolicyResponse)
	CompareWith(*WatchProvisioningPolicyResponse) (cmp int, comparable bool)
}

func ParseWatchProvisioningPolicyResponse_FieldPathValue(pathStr, valueStr string) (WatchProvisioningPolicyResponse_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningPolicyResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicyResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningPolicyResponse_FieldPathValue), nil
}

func MustParseWatchProvisioningPolicyResponse_FieldPathValue(pathStr, valueStr string) WatchProvisioningPolicyResponse_FieldPathValue {
	fpv, err := ParseWatchProvisioningPolicyResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningPolicyResponse_FieldTerminalPathValue struct {
	WatchProvisioningPolicyResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPolicyResponse_FieldPathValue = (*WatchProvisioningPolicyResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProvisioningPolicyResponse' as interface{}
func (fpv *WatchProvisioningPolicyResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningPolicyResponse_FieldTerminalPathValue) AsChangeValue() (*provisioning_policy.ProvisioningPolicyChange, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicyChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchProvisioningPolicyResponse
func (fpv *WatchProvisioningPolicyResponse_FieldTerminalPathValue) SetTo(target **WatchProvisioningPolicyResponse) {
	if *target == nil {
		*target = new(WatchProvisioningPolicyResponse)
	}
	switch fpv.selector {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*provisioning_policy.ProvisioningPolicyChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPolicyResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningPolicyResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningPolicyResponse_FieldTerminalPathValue' with the value under path in 'WatchProvisioningPolicyResponse'.
func (fpv *WatchProvisioningPolicyResponse_FieldTerminalPathValue) CompareWith(source *WatchProvisioningPolicyResponse) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicyResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPolicyResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningPolicyResponse))
}

// WatchProvisioningPolicyResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProvisioningPolicyResponse according to their type
// Present only for array (repeated) types.
type WatchProvisioningPolicyResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningPolicyResponse_FieldPath
	ContainsValue(*WatchProvisioningPolicyResponse) bool
}

// ParseWatchProvisioningPolicyResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningPolicyResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningPolicyResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningPolicyResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicyResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningPolicyResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningPolicyResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningPolicyResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningPolicyResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningPolicyResponse_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningPolicyResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPolicyResponse_FieldPathArrayItemValue = (*WatchProvisioningPolicyResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningPolicyResponse as interface{}
func (fpaiv *WatchProvisioningPolicyResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProvisioningPolicyResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningPolicyResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningPolicyResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningPolicyResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningPolicyResponse'
func (fpaiv *WatchProvisioningPolicyResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningPolicyResponse) bool {
	slice := fpaiv.WatchProvisioningPolicyResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProvisioningPolicyResponse_FieldPathArrayOfValues allows storing slice of values for WatchProvisioningPolicyResponse fields according to their type
type WatchProvisioningPolicyResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningPolicyResponse_FieldPath
}

func ParseWatchProvisioningPolicyResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningPolicyResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningPolicyResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicyResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningPolicyResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningPolicyResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningPolicyResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningPolicyResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningPolicyResponse_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningPolicyResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningPolicyResponse_FieldPathArrayOfValues = (*WatchProvisioningPolicyResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningPolicyResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningPolicyResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicyChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningPolicyResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*provisioning_policy.ProvisioningPolicyChange, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicyChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningPolicysRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningPolicysRequest_FieldPathSelector
	Get(source *WatchProvisioningPolicysRequest) []interface{}
	GetSingle(source *WatchProvisioningPolicysRequest) (interface{}, bool)
	ClearValue(item *WatchProvisioningPolicysRequest)

	// Those methods build corresponding WatchProvisioningPolicysRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningPolicysRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningPolicysRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningPolicysRequest_FieldPathArrayItemValue
}

type WatchProvisioningPolicysRequest_FieldPathSelector int32

const (
	WatchProvisioningPolicysRequest_FieldPathSelectorType         WatchProvisioningPolicysRequest_FieldPathSelector = 0
	WatchProvisioningPolicysRequest_FieldPathSelectorParent       WatchProvisioningPolicysRequest_FieldPathSelector = 1
	WatchProvisioningPolicysRequest_FieldPathSelectorPageSize     WatchProvisioningPolicysRequest_FieldPathSelector = 2
	WatchProvisioningPolicysRequest_FieldPathSelectorPageToken    WatchProvisioningPolicysRequest_FieldPathSelector = 3
	WatchProvisioningPolicysRequest_FieldPathSelectorOrderBy      WatchProvisioningPolicysRequest_FieldPathSelector = 4
	WatchProvisioningPolicysRequest_FieldPathSelectorResumeToken  WatchProvisioningPolicysRequest_FieldPathSelector = 5
	WatchProvisioningPolicysRequest_FieldPathSelectorFilter       WatchProvisioningPolicysRequest_FieldPathSelector = 6
	WatchProvisioningPolicysRequest_FieldPathSelectorFieldMask    WatchProvisioningPolicysRequest_FieldPathSelector = 7
	WatchProvisioningPolicysRequest_FieldPathSelectorView         WatchProvisioningPolicysRequest_FieldPathSelector = 8
	WatchProvisioningPolicysRequest_FieldPathSelectorMaxChunkSize WatchProvisioningPolicysRequest_FieldPathSelector = 9
)

func (s WatchProvisioningPolicysRequest_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningPolicysRequest_FieldPathSelectorType:
		return "type"
	case WatchProvisioningPolicysRequest_FieldPathSelectorParent:
		return "parent"
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchProvisioningPolicysRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProvisioningPolicysRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchProvisioningPolicysRequest_FieldPathSelectorView:
		return "view"
	case WatchProvisioningPolicysRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysRequest: %d", s))
	}
}

func BuildWatchProvisioningPolicysRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningPolicysRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningPolicysRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchProvisioningPolicysRequest_FieldTerminalPath{selector: WatchProvisioningPolicysRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchProvisioningPolicysRequest_FieldTerminalPath{selector: WatchProvisioningPolicysRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchProvisioningPolicysRequest_FieldTerminalPath{selector: WatchProvisioningPolicysRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchProvisioningPolicysRequest_FieldTerminalPath{selector: WatchProvisioningPolicysRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchProvisioningPolicysRequest_FieldTerminalPath{selector: WatchProvisioningPolicysRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProvisioningPolicysRequest_FieldTerminalPath{selector: WatchProvisioningPolicysRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchProvisioningPolicysRequest_FieldTerminalPath{selector: WatchProvisioningPolicysRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchProvisioningPolicysRequest_FieldTerminalPath{selector: WatchProvisioningPolicysRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchProvisioningPolicysRequest_FieldTerminalPath{selector: WatchProvisioningPolicysRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchProvisioningPolicysRequest_FieldTerminalPath{selector: WatchProvisioningPolicysRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningPolicysRequest", fp)
}

func ParseWatchProvisioningPolicysRequest_FieldPath(rawField string) (WatchProvisioningPolicysRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningPolicysRequest_FieldPath(fp)
}

func MustParseWatchProvisioningPolicysRequest_FieldPath(rawField string) WatchProvisioningPolicysRequest_FieldPath {
	fp, err := ParseWatchProvisioningPolicysRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningPolicysRequest_FieldTerminalPath struct {
	selector WatchProvisioningPolicysRequest_FieldPathSelector
}

var _ WatchProvisioningPolicysRequest_FieldPath = (*WatchProvisioningPolicysRequest_FieldTerminalPath)(nil)

func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) Selector() WatchProvisioningPolicysRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningPolicysRequest
func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) Get(source *WatchProvisioningPolicysRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningPolicysRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchProvisioningPolicysRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchProvisioningPolicysRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchProvisioningPolicysRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchProvisioningPolicysRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchProvisioningPolicysRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProvisioningPolicysRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchProvisioningPolicysRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchProvisioningPolicysRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchProvisioningPolicysRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningPolicysRequest))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningPolicysRequest
func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) GetSingle(source *WatchProvisioningPolicysRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningPolicysRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchProvisioningPolicysRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchProvisioningPolicysRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProvisioningPolicysRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchProvisioningPolicysRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchProvisioningPolicysRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningPolicysRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningPolicysRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchProvisioningPolicysRequest_FieldPathSelectorParent:
		return (*provisioning_policy.ParentReference)(nil)
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageToken:
		return (*provisioning_policy.PagerCursor)(nil)
	case WatchProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		return (*provisioning_policy.OrderBy)(nil)
	case WatchProvisioningPolicysRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchProvisioningPolicysRequest_FieldPathSelectorFilter:
		return (*provisioning_policy.Filter)(nil)
	case WatchProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return (*provisioning_policy.ProvisioningPolicy_FieldMask)(nil)
	case WatchProvisioningPolicysRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchProvisioningPolicysRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) ClearValue(item *WatchProvisioningPolicysRequest) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningPolicysRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchProvisioningPolicysRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchProvisioningPolicysRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchProvisioningPolicysRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchProvisioningPolicysRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchProvisioningPolicysRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProvisioningPolicysRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchProvisioningPolicysRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchProvisioningPolicysRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchProvisioningPolicysRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningPolicysRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningPolicysRequest_FieldPathSelectorType ||
		fp.selector == WatchProvisioningPolicysRequest_FieldPathSelectorParent ||
		fp.selector == WatchProvisioningPolicysRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchProvisioningPolicysRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchProvisioningPolicysRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchProvisioningPolicysRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchProvisioningPolicysRequest_FieldPathSelectorFilter ||
		fp.selector == WatchProvisioningPolicysRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchProvisioningPolicysRequest_FieldPathSelectorView ||
		fp.selector == WatchProvisioningPolicysRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningPolicysRequest_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningPolicysRequest_FieldPathSelectorType:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathValue{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorParent:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathValue{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ParentReference)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageSize:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathValue{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageToken:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathValue{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.PagerCursor)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathValue{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.OrderBy)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorResumeToken:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathValue{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorFilter:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathValue{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Filter)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathValue{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorView:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathValue{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathValue{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningPolicysRequest_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningPolicysRequest_FieldPathSelectorType:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorParent:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ParentReference)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageSize:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageToken:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.PagerCursor)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.OrderBy)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorResumeToken:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorFilter:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.Filter)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorView:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchProvisioningPolicysRequest_FieldPathSelectorMaxChunkSize:
		return &WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningPolicysRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysRequest: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicysRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProvisioningPolicysRequest_FieldPathValue allows storing values for WatchProvisioningPolicysRequest fields according to their type
type WatchProvisioningPolicysRequest_FieldPathValue interface {
	WatchProvisioningPolicysRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningPolicysRequest)
	CompareWith(*WatchProvisioningPolicysRequest) (cmp int, comparable bool)
}

func ParseWatchProvisioningPolicysRequest_FieldPathValue(pathStr, valueStr string) (WatchProvisioningPolicysRequest_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningPolicysRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicysRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningPolicysRequest_FieldPathValue), nil
}

func MustParseWatchProvisioningPolicysRequest_FieldPathValue(pathStr, valueStr string) WatchProvisioningPolicysRequest_FieldPathValue {
	fpv, err := ParseWatchProvisioningPolicysRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningPolicysRequest_FieldTerminalPathValue struct {
	WatchProvisioningPolicysRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPolicysRequest_FieldPathValue = (*WatchProvisioningPolicysRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProvisioningPolicysRequest' as interface{}
func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) AsParentValue() (*provisioning_policy.ParentReference, bool) {
	res, ok := fpv.value.(*provisioning_policy.ParentReference)
	return res, ok
}
func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) AsPageTokenValue() (*provisioning_policy.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) AsOrderByValue() (*provisioning_policy.OrderBy, bool) {
	res, ok := fpv.value.(*provisioning_policy.OrderBy)
	return res, ok
}
func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) AsFilterValue() (*provisioning_policy.Filter, bool) {
	res, ok := fpv.value.(*provisioning_policy.Filter)
	return res, ok
}
func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchProvisioningPolicysRequest
func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) SetTo(target **WatchProvisioningPolicysRequest) {
	if *target == nil {
		*target = new(WatchProvisioningPolicysRequest)
	}
	switch fpv.selector {
	case WatchProvisioningPolicysRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchProvisioningPolicysRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*provisioning_policy.ParentReference)
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*provisioning_policy.PagerCursor)
	case WatchProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*provisioning_policy.OrderBy)
	case WatchProvisioningPolicysRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProvisioningPolicysRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*provisioning_policy.Filter)
	case WatchProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	case WatchProvisioningPolicysRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchProvisioningPolicysRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningPolicysRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningPolicysRequest_FieldTerminalPathValue' with the value under path in 'WatchProvisioningPolicysRequest'.
func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) CompareWith(source *WatchProvisioningPolicysRequest) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningPolicysRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPolicysRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*provisioning_policy.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchProvisioningPolicysRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPolicysRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchProvisioningPolicysRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPolicysRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysRequest: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPolicysRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningPolicysRequest))
}

// WatchProvisioningPolicysRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProvisioningPolicysRequest according to their type
// Present only for array (repeated) types.
type WatchProvisioningPolicysRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningPolicysRequest_FieldPath
	ContainsValue(*WatchProvisioningPolicysRequest) bool
}

// ParseWatchProvisioningPolicysRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningPolicysRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningPolicysRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningPolicysRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicysRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningPolicysRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningPolicysRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningPolicysRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningPolicysRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningPolicysRequest_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningPolicysRequest_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPolicysRequest_FieldPathArrayItemValue = (*WatchProvisioningPolicysRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningPolicysRequest as interface{}
func (fpaiv *WatchProvisioningPolicysRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProvisioningPolicysRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningPolicysRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningPolicysRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningPolicysRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningPolicysRequest'
func (fpaiv *WatchProvisioningPolicysRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningPolicysRequest) bool {
	slice := fpaiv.WatchProvisioningPolicysRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProvisioningPolicysRequest_FieldPathArrayOfValues allows storing slice of values for WatchProvisioningPolicysRequest fields according to their type
type WatchProvisioningPolicysRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningPolicysRequest_FieldPath
}

func ParseWatchProvisioningPolicysRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningPolicysRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningPolicysRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicysRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningPolicysRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningPolicysRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningPolicysRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningPolicysRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningPolicysRequest_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningPolicysRequest_FieldPathArrayOfValues = (*WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningPolicysRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*provisioning_policy.ParentReference) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*provisioning_policy.PagerCursor) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*provisioning_policy.OrderBy) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*provisioning_policy.Filter) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*provisioning_policy.ParentReference, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ParentReference)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*provisioning_policy.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*provisioning_policy.OrderBy, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.OrderBy)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*provisioning_policy.Filter, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.Filter)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningPolicysResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningPolicysResponse_FieldPathSelector
	Get(source *WatchProvisioningPolicysResponse) []interface{}
	GetSingle(source *WatchProvisioningPolicysResponse) (interface{}, bool)
	ClearValue(item *WatchProvisioningPolicysResponse)

	// Those methods build corresponding WatchProvisioningPolicysResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningPolicysResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningPolicysResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningPolicysResponse_FieldPathArrayItemValue
}

type WatchProvisioningPolicysResponse_FieldPathSelector int32

const (
	WatchProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicyChanges WatchProvisioningPolicysResponse_FieldPathSelector = 0
	WatchProvisioningPolicysResponse_FieldPathSelectorIsCurrent                 WatchProvisioningPolicysResponse_FieldPathSelector = 1
	WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange           WatchProvisioningPolicysResponse_FieldPathSelector = 2
	WatchProvisioningPolicysResponse_FieldPathSelectorResumeToken               WatchProvisioningPolicysResponse_FieldPathSelector = 3
	WatchProvisioningPolicysResponse_FieldPathSelectorSnapshotSize              WatchProvisioningPolicysResponse_FieldPathSelector = 4
	WatchProvisioningPolicysResponse_FieldPathSelectorIsSoftReset               WatchProvisioningPolicysResponse_FieldPathSelector = 5
	WatchProvisioningPolicysResponse_FieldPathSelectorIsHardReset               WatchProvisioningPolicysResponse_FieldPathSelector = 6
)

func (s WatchProvisioningPolicysResponse_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicyChanges:
		return "provisioning_policy_changes"
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchProvisioningPolicysResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchProvisioningPolicysResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", s))
	}
}

func BuildWatchProvisioningPolicysResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningPolicysResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningPolicysResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "provisioning_policy_changes", "provisioningPolicyChanges", "provisioning-policy-changes":
			return &WatchProvisioningPolicysResponse_FieldTerminalPath{selector: WatchProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicyChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchProvisioningPolicysResponse_FieldTerminalPath{selector: WatchProvisioningPolicysResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchProvisioningPolicysResponse_FieldTerminalPath{selector: WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchProvisioningPolicysResponse_FieldTerminalPath{selector: WatchProvisioningPolicysResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchProvisioningPolicysResponse_FieldTerminalPath{selector: WatchProvisioningPolicysResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchProvisioningPolicysResponse_FieldTerminalPath{selector: WatchProvisioningPolicysResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchProvisioningPolicysResponse_FieldTerminalPath{selector: WatchProvisioningPolicysResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchProvisioningPolicysResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchProvisioningPolicysResponse_FieldSubPath{selector: WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningPolicysResponse", fp)
}

func ParseWatchProvisioningPolicysResponse_FieldPath(rawField string) (WatchProvisioningPolicysResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningPolicysResponse_FieldPath(fp)
}

func MustParseWatchProvisioningPolicysResponse_FieldPath(rawField string) WatchProvisioningPolicysResponse_FieldPath {
	fp, err := ParseWatchProvisioningPolicysResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningPolicysResponse_FieldTerminalPath struct {
	selector WatchProvisioningPolicysResponse_FieldPathSelector
}

var _ WatchProvisioningPolicysResponse_FieldPath = (*WatchProvisioningPolicysResponse_FieldTerminalPath)(nil)

func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) Selector() WatchProvisioningPolicysResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningPolicysResponse
func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) Get(source *WatchProvisioningPolicysResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicyChanges:
			for _, value := range source.GetProvisioningPolicyChanges() {
				values = append(values, value)
			}
		case WatchProvisioningPolicysResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchProvisioningPolicysResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchProvisioningPolicysResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchProvisioningPolicysResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchProvisioningPolicysResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningPolicysResponse))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningPolicysResponse
func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) GetSingle(source *WatchProvisioningPolicysResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicyChanges:
		res := source.GetProvisioningPolicyChanges()
		return res, res != nil
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchProvisioningPolicysResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchProvisioningPolicysResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningPolicysResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicyChanges:
		return ([]*provisioning_policy.ProvisioningPolicyChange)(nil)
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
		return (*WatchProvisioningPolicysResponse_PageTokenChange)(nil)
	case WatchProvisioningPolicysResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchProvisioningPolicysResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) ClearValue(item *WatchProvisioningPolicysResponse) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicyChanges:
			item.ProvisioningPolicyChanges = nil
		case WatchProvisioningPolicysResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchProvisioningPolicysResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchProvisioningPolicysResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchProvisioningPolicysResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchProvisioningPolicysResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningPolicysResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicyChanges ||
		fp.selector == WatchProvisioningPolicysResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchProvisioningPolicysResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchProvisioningPolicysResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchProvisioningPolicysResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchProvisioningPolicysResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningPolicysResponse_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicyChanges:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathValue{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.([]*provisioning_policy.ProvisioningPolicyChange)}
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsCurrent:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathValue{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathValue{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.(*WatchProvisioningPolicysResponse_PageTokenChange)}
	case WatchProvisioningPolicysResponse_FieldPathSelectorResumeToken:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathValue{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchProvisioningPolicysResponse_FieldPathSelectorSnapshotSize:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathValue{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsSoftReset:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathValue{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsHardReset:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathValue{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningPolicysResponse_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicyChanges:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, values: values.([][]*provisioning_policy.ProvisioningPolicyChange)}
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsCurrent:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, values: values.([]*WatchProvisioningPolicysResponse_PageTokenChange)}
	case WatchProvisioningPolicysResponse_FieldPathSelectorResumeToken:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchProvisioningPolicysResponse_FieldPathSelectorSnapshotSize:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsSoftReset:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsHardReset:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningPolicysResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicyChanges:
		return &WatchProvisioningPolicysResponse_FieldTerminalPathArrayItemValue{WatchProvisioningPolicysResponse_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicyChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicysResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchProvisioningPolicysResponse_FieldSubPath struct {
	selector WatchProvisioningPolicysResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchProvisioningPolicysResponse_FieldPath = (*WatchProvisioningPolicysResponse_FieldSubPath)(nil)

func (fps *WatchProvisioningPolicysResponse_FieldSubPath) Selector() WatchProvisioningPolicysResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchProvisioningPolicysResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchProvisioningPolicysResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchProvisioningPolicysResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchProvisioningPolicysResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchProvisioningPolicysResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchProvisioningPolicysResponse
func (fps *WatchProvisioningPolicysResponse_FieldSubPath) Get(source *WatchProvisioningPolicysResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchProvisioningPolicysResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchProvisioningPolicysResponse))
}

// GetSingle returns value of selected field from source WatchProvisioningPolicysResponse
func (fps *WatchProvisioningPolicysResponse_FieldSubPath) GetSingle(source *WatchProvisioningPolicysResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fps.selector))
	}
}

func (fps *WatchProvisioningPolicysResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchProvisioningPolicysResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchProvisioningPolicysResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchProvisioningPolicysResponse_FieldSubPath) ClearValue(item *WatchProvisioningPolicysResponse) {
	if item != nil {
		switch fps.selector {
		case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchProvisioningPolicysResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchProvisioningPolicysResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchProvisioningPolicysResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchProvisioningPolicysResponse_FieldSubPath) WithIValue(value interface{}) WatchProvisioningPolicysResponse_FieldPathValue {
	return &WatchProvisioningPolicysResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchProvisioningPolicysResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchProvisioningPolicysResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchProvisioningPolicysResponse_FieldPathArrayOfValues {
	return &WatchProvisioningPolicysResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchProvisioningPolicysResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchProvisioningPolicysResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchProvisioningPolicysResponse_FieldPathArrayItemValue {
	return &WatchProvisioningPolicysResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchProvisioningPolicysResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchProvisioningPolicysResponse_FieldPathValue allows storing values for WatchProvisioningPolicysResponse fields according to their type
type WatchProvisioningPolicysResponse_FieldPathValue interface {
	WatchProvisioningPolicysResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningPolicysResponse)
	CompareWith(*WatchProvisioningPolicysResponse) (cmp int, comparable bool)
}

func ParseWatchProvisioningPolicysResponse_FieldPathValue(pathStr, valueStr string) (WatchProvisioningPolicysResponse_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningPolicysResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicysResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningPolicysResponse_FieldPathValue), nil
}

func MustParseWatchProvisioningPolicysResponse_FieldPathValue(pathStr, valueStr string) WatchProvisioningPolicysResponse_FieldPathValue {
	fpv, err := ParseWatchProvisioningPolicysResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningPolicysResponse_FieldTerminalPathValue struct {
	WatchProvisioningPolicysResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPolicysResponse_FieldPathValue = (*WatchProvisioningPolicysResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchProvisioningPolicysResponse' as interface{}
func (fpv *WatchProvisioningPolicysResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningPolicysResponse_FieldTerminalPathValue) AsProvisioningPolicyChangesValue() ([]*provisioning_policy.ProvisioningPolicyChange, bool) {
	res, ok := fpv.value.([]*provisioning_policy.ProvisioningPolicyChange)
	return res, ok
}
func (fpv *WatchProvisioningPolicysResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProvisioningPolicysResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchProvisioningPolicysResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchProvisioningPolicysResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchProvisioningPolicysResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchProvisioningPolicysResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchProvisioningPolicysResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchProvisioningPolicysResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchProvisioningPolicysResponse
func (fpv *WatchProvisioningPolicysResponse_FieldTerminalPathValue) SetTo(target **WatchProvisioningPolicysResponse) {
	if *target == nil {
		*target = new(WatchProvisioningPolicysResponse)
	}
	switch fpv.selector {
	case WatchProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicyChanges:
		(*target).ProvisioningPolicyChanges = fpv.value.([]*provisioning_policy.ProvisioningPolicyChange)
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchProvisioningPolicysResponse_PageTokenChange)
	case WatchProvisioningPolicysResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchProvisioningPolicysResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPolicysResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningPolicysResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningPolicysResponse_FieldTerminalPathValue' with the value under path in 'WatchProvisioningPolicysResponse'.
func (fpv *WatchProvisioningPolicysResponse_FieldTerminalPathValue) CompareWith(source *WatchProvisioningPolicysResponse) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicyChanges:
		return 0, false
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchProvisioningPolicysResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPolicysResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPolicysResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningPolicysResponse))
}

type WatchProvisioningPolicysResponse_FieldSubPathValue struct {
	WatchProvisioningPolicysResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchProvisioningPolicysResponse_FieldPathValue = (*WatchProvisioningPolicysResponse_FieldSubPathValue)(nil)

func (fpvs *WatchProvisioningPolicysResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchProvisioningPolicysResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchProvisioningPolicysResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchProvisioningPolicysResponse_FieldSubPathValue) SetTo(target **WatchProvisioningPolicysResponse) {
	if *target == nil {
		*target = new(WatchProvisioningPolicysResponse)
	}
	switch fpvs.Selector() {
	case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchProvisioningPolicysResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProvisioningPolicysResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningPolicysResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchProvisioningPolicysResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchProvisioningPolicysResponse_FieldSubPathValue) CompareWith(source *WatchProvisioningPolicysResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchProvisioningPolicysResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchProvisioningPolicysResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchProvisioningPolicysResponse))
}

// WatchProvisioningPolicysResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchProvisioningPolicysResponse according to their type
// Present only for array (repeated) types.
type WatchProvisioningPolicysResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningPolicysResponse_FieldPath
	ContainsValue(*WatchProvisioningPolicysResponse) bool
}

// ParseWatchProvisioningPolicysResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningPolicysResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningPolicysResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningPolicysResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicysResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningPolicysResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningPolicysResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningPolicysResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningPolicysResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningPolicysResponse_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningPolicysResponse_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPolicysResponse_FieldPathArrayItemValue = (*WatchProvisioningPolicysResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningPolicysResponse as interface{}
func (fpaiv *WatchProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) AsProvisioningPolicyChangesItemValue() (*provisioning_policy.ProvisioningPolicyChange, bool) {
	res, ok := fpaiv.value.(*provisioning_policy.ProvisioningPolicyChange)
	return res, ok
}

func (fpaiv *WatchProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningPolicysResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningPolicysResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningPolicysResponse'
func (fpaiv *WatchProvisioningPolicysResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningPolicysResponse) bool {
	slice := fpaiv.WatchProvisioningPolicysResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchProvisioningPolicysResponse_FieldSubPathArrayItemValue struct {
	WatchProvisioningPolicysResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchProvisioningPolicysResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchProvisioningPolicysResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchProvisioningPolicysResponse'
func (fpaivs *WatchProvisioningPolicysResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchProvisioningPolicysResponse) bool {
	switch fpaivs.Selector() {
	case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse: %d", fpaivs.Selector()))
	}
}

// WatchProvisioningPolicysResponse_FieldPathArrayOfValues allows storing slice of values for WatchProvisioningPolicysResponse fields according to their type
type WatchProvisioningPolicysResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningPolicysResponse_FieldPath
}

func ParseWatchProvisioningPolicysResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningPolicysResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningPolicysResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchProvisioningPolicysResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningPolicysResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningPolicysResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningPolicysResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningPolicysResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningPolicysResponse_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningPolicysResponse_FieldPathArrayOfValues = (*WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningPolicysResponse_FieldPathSelectorProvisioningPolicyChanges:
		for _, v := range fpaov.values.([][]*provisioning_policy.ProvisioningPolicyChange) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchProvisioningPolicysResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) AsProvisioningPolicyChangesArrayOfValues() ([][]*provisioning_policy.ProvisioningPolicyChange, bool) {
	res, ok := fpaov.values.([][]*provisioning_policy.ProvisioningPolicyChange)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchProvisioningPolicysResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchProvisioningPolicysResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchProvisioningPolicysResponse_FieldSubPathArrayOfValues struct {
	WatchProvisioningPolicysResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchProvisioningPolicysResponse_FieldPathArrayOfValues = (*WatchProvisioningPolicysResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchProvisioningPolicysResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchProvisioningPolicysResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchProvisioningPolicysResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelector
	Get(source *WatchProvisioningPolicysResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchProvisioningPolicysResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchProvisioningPolicysResponse_PageTokenChange)

	// Those methods build corresponding WatchProvisioningPolicysResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchProvisioningPolicysResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelector int32

const (
	WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelector = 0
	WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorNextPageToken WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchProvisioningPolicysResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchProvisioningPolicysResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchProvisioningPolicysResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath{selector: WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath{selector: WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchProvisioningPolicysResponse_PageTokenChange", fp)
}

func ParseWatchProvisioningPolicysResponsePageTokenChange_FieldPath(rawField string) (WatchProvisioningPolicysResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchProvisioningPolicysResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchProvisioningPolicysResponsePageTokenChange_FieldPath(rawField string) WatchProvisioningPolicysResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchProvisioningPolicysResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelector
}

var _ WatchProvisioningPolicysResponsePageTokenChange_FieldPath = (*WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) Selector() WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchProvisioningPolicysResponse_PageTokenChange
func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) Get(source *WatchProvisioningPolicysResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchProvisioningPolicysResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchProvisioningPolicysResponse_PageTokenChange
func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchProvisioningPolicysResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchProvisioningPolicysResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*provisioning_policy.PagerCursor)(nil)
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*provisioning_policy.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchProvisioningPolicysResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchProvisioningPolicysResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchProvisioningPolicysResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathValue{WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*provisioning_policy.PagerCursor)}
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathValue{WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*provisioning_policy.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.PagerCursor)}
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchProvisioningPolicysResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchProvisioningPolicysResponsePageTokenChange_FieldPathValue interface {
	WatchProvisioningPolicysResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchProvisioningPolicysResponse_PageTokenChange)
	CompareWith(*WatchProvisioningPolicysResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchProvisioningPolicysResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchProvisioningPolicysResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchProvisioningPolicysResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchProvisioningPolicysResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchProvisioningPolicysResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchProvisioningPolicysResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchProvisioningPolicysResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPolicysResponsePageTokenChange_FieldPathValue = (*WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*provisioning_policy.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpv *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*provisioning_policy.PagerCursor, bool) {
	res, ok := fpv.value.(*provisioning_policy.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchProvisioningPolicysResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchProvisioningPolicysResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*provisioning_policy.PagerCursor)
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*provisioning_policy.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchProvisioningPolicysResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchProvisioningPolicysResponse_PageTokenChange'.
func (fpv *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchProvisioningPolicysResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchProvisioningPolicysResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchProvisioningPolicysResponse_PageTokenChange))
}

// WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchProvisioningPolicysResponsePageTokenChange_FieldPath
	ContainsValue(*WatchProvisioningPolicysResponse_PageTokenChange) bool
}

// ParseWatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchProvisioningPolicysResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayItemValue = (*WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchProvisioningPolicysResponse_PageTokenChange as interface{}
func (fpaiv *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchProvisioningPolicysResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchProvisioningPolicysResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchProvisioningPolicysResponse_PageTokenChange) bool {
	slice := fpaiv.WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchProvisioningPolicysResponsePageTokenChange_FieldPath
}

func ParseWatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchProvisioningPolicysResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchProvisioningPolicysResponsePageTokenChange_FieldPathArrayOfValues = (*WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*provisioning_policy.PagerCursor) {
			values = append(values, v)
		}
	case WatchProvisioningPolicysResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*provisioning_policy.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*provisioning_policy.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.PagerCursor)
	return res, ok
}
func (fpaov *WatchProvisioningPolicysResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*provisioning_policy.PagerCursor, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateProvisioningPolicyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateProvisioningPolicyRequest_FieldPathSelector
	Get(source *CreateProvisioningPolicyRequest) []interface{}
	GetSingle(source *CreateProvisioningPolicyRequest) (interface{}, bool)
	ClearValue(item *CreateProvisioningPolicyRequest)

	// Those methods build corresponding CreateProvisioningPolicyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateProvisioningPolicyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateProvisioningPolicyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateProvisioningPolicyRequest_FieldPathArrayItemValue
}

type CreateProvisioningPolicyRequest_FieldPathSelector int32

const (
	CreateProvisioningPolicyRequest_FieldPathSelectorParent             CreateProvisioningPolicyRequest_FieldPathSelector = 0
	CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy CreateProvisioningPolicyRequest_FieldPathSelector = 1
)

func (s CreateProvisioningPolicyRequest_FieldPathSelector) String() string {
	switch s {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		return "parent"
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return "provisioning_policy"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", s))
	}
}

func BuildCreateProvisioningPolicyRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateProvisioningPolicyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateProvisioningPolicyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateProvisioningPolicyRequest_FieldTerminalPath{selector: CreateProvisioningPolicyRequest_FieldPathSelectorParent}, nil
		case "provisioning_policy", "provisioningPolicy", "provisioning-policy":
			return &CreateProvisioningPolicyRequest_FieldTerminalPath{selector: CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy}, nil
		}
	} else {
		switch fp[0] {
		case "provisioning_policy", "provisioningPolicy", "provisioning-policy":
			if subpath, err := provisioning_policy.BuildProvisioningPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateProvisioningPolicyRequest_FieldSubPath{selector: CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateProvisioningPolicyRequest", fp)
}

func ParseCreateProvisioningPolicyRequest_FieldPath(rawField string) (CreateProvisioningPolicyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateProvisioningPolicyRequest_FieldPath(fp)
}

func MustParseCreateProvisioningPolicyRequest_FieldPath(rawField string) CreateProvisioningPolicyRequest_FieldPath {
	fp, err := ParseCreateProvisioningPolicyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateProvisioningPolicyRequest_FieldTerminalPath struct {
	selector CreateProvisioningPolicyRequest_FieldPathSelector
}

var _ CreateProvisioningPolicyRequest_FieldPath = (*CreateProvisioningPolicyRequest_FieldTerminalPath)(nil)

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) Selector() CreateProvisioningPolicyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateProvisioningPolicyRequest
func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) Get(source *CreateProvisioningPolicyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
			if source.ProvisioningPolicy != nil {
				values = append(values, source.ProvisioningPolicy)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateProvisioningPolicyRequest))
}

// GetSingle returns value pointed by specific field of from source CreateProvisioningPolicyRequest
func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) GetSingle(source *CreateProvisioningPolicyRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		res := source.GetProvisioningPolicy()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateProvisioningPolicyRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		return (*provisioning_policy.ParentReference)(nil)
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return (*provisioning_policy.ProvisioningPolicy)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) ClearValue(item *CreateProvisioningPolicyRequest) {
	if item != nil {
		switch fp.selector {
		case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
			item.ProvisioningPolicy = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateProvisioningPolicyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateProvisioningPolicyRequest_FieldPathSelectorParent
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) WithIValue(value interface{}) CreateProvisioningPolicyRequest_FieldPathValue {
	switch fp.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		return &CreateProvisioningPolicyRequest_FieldTerminalPathValue{CreateProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ParentReference)}
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return &CreateProvisioningPolicyRequest_FieldTerminalPathValue{CreateProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov := &CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{CreateProvisioningPolicyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		return &CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{CreateProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ParentReference)}
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return &CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{CreateProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateProvisioningPolicyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *CreateProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateProvisioningPolicyRequest_FieldSubPath struct {
	selector CreateProvisioningPolicyRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateProvisioningPolicyRequest_FieldPath = (*CreateProvisioningPolicyRequest_FieldSubPath)(nil)

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) Selector() CreateProvisioningPolicyRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateProvisioningPolicyRequest_FieldSubPath) AsProvisioningPolicySubPath() (provisioning_policy.ProvisioningPolicy_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_policy.ProvisioningPolicy_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateProvisioningPolicyRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateProvisioningPolicyRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateProvisioningPolicyRequest
func (fps *CreateProvisioningPolicyRequest_FieldSubPath) Get(source *CreateProvisioningPolicyRequest) (values []interface{}) {
	if asProvisioningPolicyFieldPath, ok := fps.AsProvisioningPolicySubPath(); ok {
		values = append(values, asProvisioningPolicyFieldPath.Get(source.GetProvisioningPolicy())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateProvisioningPolicyRequest))
}

// GetSingle returns value of selected field from source CreateProvisioningPolicyRequest
func (fps *CreateProvisioningPolicyRequest_FieldSubPath) GetSingle(source *CreateProvisioningPolicyRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		if source.GetProvisioningPolicy() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProvisioningPolicy())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fps.selector))
	}
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateProvisioningPolicyRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateProvisioningPolicyRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) ClearValue(item *CreateProvisioningPolicyRequest) {
	if item != nil {
		switch fps.selector {
		case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
			fps.subPath.ClearValueRaw(item.ProvisioningPolicy)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateProvisioningPolicyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateProvisioningPolicyRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) WithIValue(value interface{}) CreateProvisioningPolicyRequest_FieldPathValue {
	return &CreateProvisioningPolicyRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateProvisioningPolicyRequest_FieldPathArrayOfValues {
	return &CreateProvisioningPolicyRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateProvisioningPolicyRequest_FieldPathArrayItemValue {
	return &CreateProvisioningPolicyRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateProvisioningPolicyRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateProvisioningPolicyRequest_FieldPathValue allows storing values for CreateProvisioningPolicyRequest fields according to their type
type CreateProvisioningPolicyRequest_FieldPathValue interface {
	CreateProvisioningPolicyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateProvisioningPolicyRequest)
	CompareWith(*CreateProvisioningPolicyRequest) (cmp int, comparable bool)
}

func ParseCreateProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) (CreateProvisioningPolicyRequest_FieldPathValue, error) {
	fp, err := ParseCreateProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProvisioningPolicyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateProvisioningPolicyRequest_FieldPathValue), nil
}

func MustParseCreateProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) CreateProvisioningPolicyRequest_FieldPathValue {
	fpv, err := ParseCreateProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateProvisioningPolicyRequest_FieldTerminalPathValue struct {
	CreateProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProvisioningPolicyRequest_FieldPathValue = (*CreateProvisioningPolicyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateProvisioningPolicyRequest' as interface{}
func (fpv *CreateProvisioningPolicyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateProvisioningPolicyRequest_FieldTerminalPathValue) AsParentValue() (*provisioning_policy.ParentReference, bool) {
	res, ok := fpv.value.(*provisioning_policy.ParentReference)
	return res, ok
}
func (fpv *CreateProvisioningPolicyRequest_FieldTerminalPathValue) AsProvisioningPolicyValue() (*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy)
	return res, ok
}

// SetTo stores value for selected field for object CreateProvisioningPolicyRequest
func (fpv *CreateProvisioningPolicyRequest_FieldTerminalPathValue) SetTo(target **CreateProvisioningPolicyRequest) {
	if *target == nil {
		*target = new(CreateProvisioningPolicyRequest)
	}
	switch fpv.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*provisioning_policy.ParentReference)
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		(*target).ProvisioningPolicy = fpv.value.(*provisioning_policy.ProvisioningPolicy)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProvisioningPolicyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProvisioningPolicyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateProvisioningPolicyRequest_FieldTerminalPathValue' with the value under path in 'CreateProvisioningPolicyRequest'.
func (fpv *CreateProvisioningPolicyRequest_FieldTerminalPathValue) CompareWith(source *CreateProvisioningPolicyRequest) (int, bool) {
	switch fpv.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*provisioning_policy.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *CreateProvisioningPolicyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateProvisioningPolicyRequest))
}

type CreateProvisioningPolicyRequest_FieldSubPathValue struct {
	CreateProvisioningPolicyRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateProvisioningPolicyRequest_FieldPathValue = (*CreateProvisioningPolicyRequest_FieldSubPathValue)(nil)

func (fpvs *CreateProvisioningPolicyRequest_FieldSubPathValue) AsProvisioningPolicyPathValue() (provisioning_policy.ProvisioningPolicy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue)
	return res, ok
}

func (fpvs *CreateProvisioningPolicyRequest_FieldSubPathValue) SetTo(target **CreateProvisioningPolicyRequest) {
	if *target == nil {
		*target = new(CreateProvisioningPolicyRequest)
	}
	switch fpvs.Selector() {
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue).SetTo(&(*target).ProvisioningPolicy)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProvisioningPolicyRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateProvisioningPolicyRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateProvisioningPolicyRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateProvisioningPolicyRequest_FieldSubPathValue) CompareWith(source *CreateProvisioningPolicyRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue).CompareWith(source.GetProvisioningPolicy())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateProvisioningPolicyRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateProvisioningPolicyRequest))
}

// CreateProvisioningPolicyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateProvisioningPolicyRequest according to their type
// Present only for array (repeated) types.
type CreateProvisioningPolicyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateProvisioningPolicyRequest_FieldPath
	ContainsValue(*CreateProvisioningPolicyRequest) bool
}

// ParseCreateProvisioningPolicyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateProvisioningPolicyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProvisioningPolicyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateProvisioningPolicyRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateProvisioningPolicyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue struct {
	CreateProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ CreateProvisioningPolicyRequest_FieldPathArrayItemValue = (*CreateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateProvisioningPolicyRequest as interface{}
func (fpaiv *CreateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateProvisioningPolicyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateProvisioningPolicyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProvisioningPolicyRequest'
func (fpaiv *CreateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateProvisioningPolicyRequest) bool {
	slice := fpaiv.CreateProvisioningPolicyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateProvisioningPolicyRequest_FieldSubPathArrayItemValue struct {
	CreateProvisioningPolicyRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateProvisioningPolicyRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateProvisioningPolicyRequest_FieldSubPathArrayItemValue) AsProvisioningPolicyPathItemValue() (provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateProvisioningPolicyRequest'
func (fpaivs *CreateProvisioningPolicyRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateProvisioningPolicyRequest) bool {
	switch fpaivs.Selector() {
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue).ContainsValue(source.GetProvisioningPolicy())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateProvisioningPolicyRequest: %d", fpaivs.Selector()))
	}
}

// CreateProvisioningPolicyRequest_FieldPathArrayOfValues allows storing slice of values for CreateProvisioningPolicyRequest fields according to their type
type CreateProvisioningPolicyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateProvisioningPolicyRequest_FieldPath
}

func ParseCreateProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateProvisioningPolicyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateProvisioningPolicyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateProvisioningPolicyRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues struct {
	CreateProvisioningPolicyRequest_FieldTerminalPath
	values interface{}
}

var _ CreateProvisioningPolicyRequest_FieldPathArrayOfValues = (*CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateProvisioningPolicyRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*provisioning_policy.ParentReference) {
			values = append(values, v)
		}
	case CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*provisioning_policy.ParentReference, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ParentReference)
	return res, ok
}
func (fpaov *CreateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsProvisioningPolicyArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy)
	return res, ok
}

type CreateProvisioningPolicyRequest_FieldSubPathArrayOfValues struct {
	CreateProvisioningPolicyRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateProvisioningPolicyRequest_FieldPathArrayOfValues = (*CreateProvisioningPolicyRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateProvisioningPolicyRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateProvisioningPolicyRequest_FieldSubPathArrayOfValues) AsProvisioningPolicyPathArrayOfValues() (provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProvisioningPolicyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProvisioningPolicyRequest_FieldPathSelector
	Get(source *UpdateProvisioningPolicyRequest) []interface{}
	GetSingle(source *UpdateProvisioningPolicyRequest) (interface{}, bool)
	ClearValue(item *UpdateProvisioningPolicyRequest)

	// Those methods build corresponding UpdateProvisioningPolicyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProvisioningPolicyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProvisioningPolicyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProvisioningPolicyRequest_FieldPathArrayItemValue
}

type UpdateProvisioningPolicyRequest_FieldPathSelector int32

const (
	UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy UpdateProvisioningPolicyRequest_FieldPathSelector = 0
	UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask         UpdateProvisioningPolicyRequest_FieldPathSelector = 1
	UpdateProvisioningPolicyRequest_FieldPathSelectorCas                UpdateProvisioningPolicyRequest_FieldPathSelector = 2
)

func (s UpdateProvisioningPolicyRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return "provisioning_policy"
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", s))
	}
}

func BuildUpdateProvisioningPolicyRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateProvisioningPolicyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProvisioningPolicyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "provisioning_policy", "provisioningPolicy", "provisioning-policy":
			return &UpdateProvisioningPolicyRequest_FieldTerminalPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateProvisioningPolicyRequest_FieldTerminalPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateProvisioningPolicyRequest_FieldTerminalPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "provisioning_policy", "provisioningPolicy", "provisioning-policy":
			if subpath, err := provisioning_policy.BuildProvisioningPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProvisioningPolicyRequest_FieldSubPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateProvisioningPolicyRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProvisioningPolicyRequest_FieldSubPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProvisioningPolicyRequest", fp)
}

func ParseUpdateProvisioningPolicyRequest_FieldPath(rawField string) (UpdateProvisioningPolicyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProvisioningPolicyRequest_FieldPath(fp)
}

func MustParseUpdateProvisioningPolicyRequest_FieldPath(rawField string) UpdateProvisioningPolicyRequest_FieldPath {
	fp, err := ParseUpdateProvisioningPolicyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProvisioningPolicyRequest_FieldTerminalPath struct {
	selector UpdateProvisioningPolicyRequest_FieldPathSelector
}

var _ UpdateProvisioningPolicyRequest_FieldPath = (*UpdateProvisioningPolicyRequest_FieldTerminalPath)(nil)

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) Selector() UpdateProvisioningPolicyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProvisioningPolicyRequest
func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) Get(source *UpdateProvisioningPolicyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
			if source.ProvisioningPolicy != nil {
				values = append(values, source.ProvisioningPolicy)
			}
		case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProvisioningPolicyRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateProvisioningPolicyRequest
func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) GetSingle(source *UpdateProvisioningPolicyRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		res := source.GetProvisioningPolicy()
		return res, res != nil
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProvisioningPolicyRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return (*provisioning_policy.ProvisioningPolicy)(nil)
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		return (*provisioning_policy.ProvisioningPolicy_FieldMask)(nil)
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		return (*UpdateProvisioningPolicyRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) ClearValue(item *UpdateProvisioningPolicyRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
			item.ProvisioningPolicy = nil
		case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProvisioningPolicyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateProvisioningPolicyRequest_FieldPathValue {
	switch fp.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return &UpdateProvisioningPolicyRequest_FieldTerminalPathValue{UpdateProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy)}
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		return &UpdateProvisioningPolicyRequest_FieldTerminalPathValue{UpdateProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		return &UpdateProvisioningPolicyRequest_FieldTerminalPathValue{UpdateProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*UpdateProvisioningPolicyRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov := &UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{UpdateProvisioningPolicyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return &UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{UpdateProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy)}
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		return &UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{UpdateProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)}
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		return &UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{UpdateProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*UpdateProvisioningPolicyRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProvisioningPolicyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProvisioningPolicyRequest_FieldSubPath struct {
	selector UpdateProvisioningPolicyRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProvisioningPolicyRequest_FieldPath = (*UpdateProvisioningPolicyRequest_FieldSubPath)(nil)

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) Selector() UpdateProvisioningPolicyRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) AsProvisioningPolicySubPath() (provisioning_policy.ProvisioningPolicy_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_policy.ProvisioningPolicy_FieldPath)
	return res, ok
}
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) AsCasSubPath() (UpdateProvisioningPolicyRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateProvisioningPolicyRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProvisioningPolicyRequest
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) Get(source *UpdateProvisioningPolicyRequest) (values []interface{}) {
	if asProvisioningPolicyFieldPath, ok := fps.AsProvisioningPolicySubPath(); ok {
		values = append(values, asProvisioningPolicyFieldPath.Get(source.GetProvisioningPolicy())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProvisioningPolicyRequest))
}

// GetSingle returns value of selected field from source UpdateProvisioningPolicyRequest
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) GetSingle(source *UpdateProvisioningPolicyRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		if source.GetProvisioningPolicy() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProvisioningPolicy())
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fps.selector))
	}
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProvisioningPolicyRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) ClearValue(item *UpdateProvisioningPolicyRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
			fps.subPath.ClearValueRaw(item.ProvisioningPolicy)
		case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProvisioningPolicyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) WithIValue(value interface{}) UpdateProvisioningPolicyRequest_FieldPathValue {
	return &UpdateProvisioningPolicyRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProvisioningPolicyRequest_FieldPathArrayOfValues {
	return &UpdateProvisioningPolicyRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProvisioningPolicyRequest_FieldPathArrayItemValue {
	return &UpdateProvisioningPolicyRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProvisioningPolicyRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProvisioningPolicyRequest_FieldPathValue allows storing values for UpdateProvisioningPolicyRequest fields according to their type
type UpdateProvisioningPolicyRequest_FieldPathValue interface {
	UpdateProvisioningPolicyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProvisioningPolicyRequest)
	CompareWith(*UpdateProvisioningPolicyRequest) (cmp int, comparable bool)
}

func ParseUpdateProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) (UpdateProvisioningPolicyRequest_FieldPathValue, error) {
	fp, err := ParseUpdateProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProvisioningPolicyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProvisioningPolicyRequest_FieldPathValue), nil
}

func MustParseUpdateProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) UpdateProvisioningPolicyRequest_FieldPathValue {
	fpv, err := ParseUpdateProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProvisioningPolicyRequest_FieldTerminalPathValue struct {
	UpdateProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProvisioningPolicyRequest_FieldPathValue = (*UpdateProvisioningPolicyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateProvisioningPolicyRequest' as interface{}
func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) AsProvisioningPolicyValue() (*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) AsCasValue() (*UpdateProvisioningPolicyRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateProvisioningPolicyRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateProvisioningPolicyRequest
func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) SetTo(target **UpdateProvisioningPolicyRequest) {
	if *target == nil {
		*target = new(UpdateProvisioningPolicyRequest)
	}
	switch fpv.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		(*target).ProvisioningPolicy = fpv.value.(*provisioning_policy.ProvisioningPolicy)
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateProvisioningPolicyRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProvisioningPolicyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProvisioningPolicyRequest_FieldTerminalPathValue' with the value under path in 'UpdateProvisioningPolicyRequest'.
func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) CompareWith(source *UpdateProvisioningPolicyRequest) (int, bool) {
	switch fpv.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return 0, false
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateProvisioningPolicyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProvisioningPolicyRequest))
}

type UpdateProvisioningPolicyRequest_FieldSubPathValue struct {
	UpdateProvisioningPolicyRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProvisioningPolicyRequest_FieldPathValue = (*UpdateProvisioningPolicyRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateProvisioningPolicyRequest_FieldSubPathValue) AsProvisioningPolicyPathValue() (provisioning_policy.ProvisioningPolicy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateProvisioningPolicyRequest_FieldSubPathValue) AsCasPathValue() (UpdateProvisioningPolicyRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateProvisioningPolicyRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProvisioningPolicyRequest_FieldSubPathValue) SetTo(target **UpdateProvisioningPolicyRequest) {
	if *target == nil {
		*target = new(UpdateProvisioningPolicyRequest)
	}
	switch fpvs.Selector() {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue).SetTo(&(*target).ProvisioningPolicy)
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateProvisioningPolicyRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProvisioningPolicyRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProvisioningPolicyRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProvisioningPolicyRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProvisioningPolicyRequest_FieldSubPathValue) CompareWith(source *UpdateProvisioningPolicyRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue).CompareWith(source.GetProvisioningPolicy())
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateProvisioningPolicyRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProvisioningPolicyRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProvisioningPolicyRequest))
}

// UpdateProvisioningPolicyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateProvisioningPolicyRequest according to their type
// Present only for array (repeated) types.
type UpdateProvisioningPolicyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProvisioningPolicyRequest_FieldPath
	ContainsValue(*UpdateProvisioningPolicyRequest) bool
}

// ParseUpdateProvisioningPolicyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProvisioningPolicyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProvisioningPolicyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProvisioningPolicyRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProvisioningPolicyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue struct {
	UpdateProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateProvisioningPolicyRequest_FieldPathArrayItemValue = (*UpdateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProvisioningPolicyRequest as interface{}
func (fpaiv *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProvisioningPolicyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProvisioningPolicyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProvisioningPolicyRequest'
func (fpaiv *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProvisioningPolicyRequest) bool {
	slice := fpaiv.UpdateProvisioningPolicyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProvisioningPolicyRequest_FieldSubPathArrayItemValue struct {
	UpdateProvisioningPolicyRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProvisioningPolicyRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProvisioningPolicyRequest_FieldSubPathArrayItemValue) AsProvisioningPolicyPathItemValue() (provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateProvisioningPolicyRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateProvisioningPolicyRequest'
func (fpaivs *UpdateProvisioningPolicyRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProvisioningPolicyRequest) bool {
	switch fpaivs.Selector() {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		return fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue).ContainsValue(source.GetProvisioningPolicy())
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest: %d", fpaivs.Selector()))
	}
}

// UpdateProvisioningPolicyRequest_FieldPathArrayOfValues allows storing slice of values for UpdateProvisioningPolicyRequest fields according to their type
type UpdateProvisioningPolicyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProvisioningPolicyRequest_FieldPath
}

func ParseUpdateProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProvisioningPolicyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateProvisioningPolicyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProvisioningPolicyRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues struct {
	UpdateProvisioningPolicyRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateProvisioningPolicyRequest_FieldPathArrayOfValues = (*UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy) {
			values = append(values, v)
		}
	case UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask) {
			values = append(values, v)
		}
	case UpdateProvisioningPolicyRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateProvisioningPolicyRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsProvisioningPolicyArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpaov *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}
func (fpaov *UpdateProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateProvisioningPolicyRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateProvisioningPolicyRequest_CAS)
	return res, ok
}

type UpdateProvisioningPolicyRequest_FieldSubPathArrayOfValues struct {
	UpdateProvisioningPolicyRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProvisioningPolicyRequest_FieldPathArrayOfValues = (*UpdateProvisioningPolicyRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProvisioningPolicyRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProvisioningPolicyRequest_FieldSubPathArrayOfValues) AsProvisioningPolicyPathArrayOfValues() (provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateProvisioningPolicyRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateProvisioningPolicyRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateProvisioningPolicyRequestCAS_FieldPathSelector
	Get(source *UpdateProvisioningPolicyRequest_CAS) []interface{}
	GetSingle(source *UpdateProvisioningPolicyRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateProvisioningPolicyRequest_CAS)

	// Those methods build corresponding UpdateProvisioningPolicyRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue
}

type UpdateProvisioningPolicyRequestCAS_FieldPathSelector int32

const (
	UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState UpdateProvisioningPolicyRequestCAS_FieldPathSelector = 0
	UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask        UpdateProvisioningPolicyRequestCAS_FieldPathSelector = 1
)

func (s UpdateProvisioningPolicyRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", s))
	}
}

func BuildUpdateProvisioningPolicyRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateProvisioningPolicyRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateProvisioningPolicyRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateProvisioningPolicyRequestCAS_FieldTerminalPath{selector: UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateProvisioningPolicyRequestCAS_FieldTerminalPath{selector: UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := provisioning_policy.BuildProvisioningPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateProvisioningPolicyRequestCAS_FieldSubPath{selector: UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateProvisioningPolicyRequest_CAS", fp)
}

func ParseUpdateProvisioningPolicyRequestCAS_FieldPath(rawField string) (UpdateProvisioningPolicyRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateProvisioningPolicyRequestCAS_FieldPath(fp)
}

func MustParseUpdateProvisioningPolicyRequestCAS_FieldPath(rawField string) UpdateProvisioningPolicyRequestCAS_FieldPath {
	fp, err := ParseUpdateProvisioningPolicyRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateProvisioningPolicyRequestCAS_FieldTerminalPath struct {
	selector UpdateProvisioningPolicyRequestCAS_FieldPathSelector
}

var _ UpdateProvisioningPolicyRequestCAS_FieldPath = (*UpdateProvisioningPolicyRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) Selector() UpdateProvisioningPolicyRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateProvisioningPolicyRequest_CAS
func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) Get(source *UpdateProvisioningPolicyRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateProvisioningPolicyRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateProvisioningPolicyRequest_CAS
func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) GetSingle(source *UpdateProvisioningPolicyRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateProvisioningPolicyRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		return (*provisioning_policy.ProvisioningPolicy)(nil)
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		return (*provisioning_policy.ProvisioningPolicy_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) ClearValue(item *UpdateProvisioningPolicyRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateProvisioningPolicyRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue{UpdateProvisioningPolicyRequestCAS_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy)}
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue{UpdateProvisioningPolicyRequestCAS_FieldTerminalPath: *fp, value: value.(*provisioning_policy.ProvisioningPolicy_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues{UpdateProvisioningPolicyRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues{UpdateProvisioningPolicyRequestCAS_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy)}
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues{UpdateProvisioningPolicyRequestCAS_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateProvisioningPolicyRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateProvisioningPolicyRequestCAS_FieldSubPath struct {
	selector UpdateProvisioningPolicyRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateProvisioningPolicyRequestCAS_FieldPath = (*UpdateProvisioningPolicyRequestCAS_FieldSubPath)(nil)

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) Selector() UpdateProvisioningPolicyRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) AsConditionalStateSubPath() (provisioning_policy.ProvisioningPolicy_FieldPath, bool) {
	res, ok := fps.subPath.(provisioning_policy.ProvisioningPolicy_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateProvisioningPolicyRequest_CAS
func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) Get(source *UpdateProvisioningPolicyRequest_CAS) (values []interface{}) {
	if asProvisioningPolicyFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asProvisioningPolicyFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateProvisioningPolicyRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateProvisioningPolicyRequest_CAS
func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) GetSingle(source *UpdateProvisioningPolicyRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateProvisioningPolicyRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) ClearValue(item *UpdateProvisioningPolicyRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateProvisioningPolicyRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathValue {
	return &UpdateProvisioningPolicyRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues {
	return &UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue {
	return &UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateProvisioningPolicyRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateProvisioningPolicyRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateProvisioningPolicyRequestCAS_FieldPathValue interface {
	UpdateProvisioningPolicyRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateProvisioningPolicyRequest_CAS)
	CompareWith(*UpdateProvisioningPolicyRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateProvisioningPolicyRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateProvisioningPolicyRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateProvisioningPolicyRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateProvisioningPolicyRequestCAS_FieldPathValue), nil
}

func MustParseUpdateProvisioningPolicyRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateProvisioningPolicyRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateProvisioningPolicyRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue struct {
	UpdateProvisioningPolicyRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProvisioningPolicyRequestCAS_FieldPathValue = (*UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateProvisioningPolicyRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProvisioningPolicyRequest_CAS)
	}
	switch fpv.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*provisioning_policy.ProvisioningPolicy)
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*provisioning_policy.ProvisioningPolicy_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProvisioningPolicyRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateProvisioningPolicyRequest_CAS'.
func (fpv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateProvisioningPolicyRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateProvisioningPolicyRequest_CAS))
}

type UpdateProvisioningPolicyRequestCAS_FieldSubPathValue struct {
	UpdateProvisioningPolicyRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateProvisioningPolicyRequestCAS_FieldPathValue = (*UpdateProvisioningPolicyRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateProvisioningPolicyRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (provisioning_policy.ProvisioningPolicy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateProvisioningPolicyRequestCAS_FieldSubPathValue) SetTo(target **UpdateProvisioningPolicyRequest_CAS) {
	if *target == nil {
		*target = new(UpdateProvisioningPolicyRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProvisioningPolicyRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateProvisioningPolicyRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateProvisioningPolicyRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateProvisioningPolicyRequestCAS_FieldSubPathValue) CompareWith(source *UpdateProvisioningPolicyRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(provisioning_policy.ProvisioningPolicy_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateProvisioningPolicyRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateProvisioningPolicyRequest_CAS))
}

// UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateProvisioningPolicyRequestCAS_FieldPath
	ContainsValue(*UpdateProvisioningPolicyRequest_CAS) bool
}

// ParseUpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateProvisioningPolicyRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateProvisioningPolicyRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateProvisioningPolicyRequestCAS_FieldPathArrayItemValue = (*UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateProvisioningPolicyRequest_CAS as interface{}
func (fpaiv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateProvisioningPolicyRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateProvisioningPolicyRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateProvisioningPolicyRequest_CAS) bool {
	slice := fpaiv.UpdateProvisioningPolicyRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateProvisioningPolicyRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateProvisioningPolicyRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(provisioning_policy.ProvisioningPolicy_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateProvisioningPolicyRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateProvisioningPolicyRequestCAS_FieldPath
}

func ParseUpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateProvisioningPolicyRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateProvisioningPolicyRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues = (*UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy) {
			values = append(values, v)
		}
	case UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy)
	return res, ok
}
func (fpaov *UpdateProvisioningPolicyRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*provisioning_policy.ProvisioningPolicy_FieldMask, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.ProvisioningPolicy_FieldMask)
	return res, ok
}

type UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateProvisioningPolicyRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateProvisioningPolicyRequestCAS_FieldPathArrayOfValues = (*UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateProvisioningPolicyRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(provisioning_policy.ProvisioningPolicy_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteProvisioningPolicyRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteProvisioningPolicyRequest_FieldPathSelector
	Get(source *DeleteProvisioningPolicyRequest) []interface{}
	GetSingle(source *DeleteProvisioningPolicyRequest) (interface{}, bool)
	ClearValue(item *DeleteProvisioningPolicyRequest)

	// Those methods build corresponding DeleteProvisioningPolicyRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteProvisioningPolicyRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteProvisioningPolicyRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteProvisioningPolicyRequest_FieldPathArrayItemValue
}

type DeleteProvisioningPolicyRequest_FieldPathSelector int32

const (
	DeleteProvisioningPolicyRequest_FieldPathSelectorName DeleteProvisioningPolicyRequest_FieldPathSelector = 0
)

func (s DeleteProvisioningPolicyRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", s))
	}
}

func BuildDeleteProvisioningPolicyRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteProvisioningPolicyRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteProvisioningPolicyRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteProvisioningPolicyRequest_FieldTerminalPath{selector: DeleteProvisioningPolicyRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteProvisioningPolicyRequest", fp)
}

func ParseDeleteProvisioningPolicyRequest_FieldPath(rawField string) (DeleteProvisioningPolicyRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteProvisioningPolicyRequest_FieldPath(fp)
}

func MustParseDeleteProvisioningPolicyRequest_FieldPath(rawField string) DeleteProvisioningPolicyRequest_FieldPath {
	fp, err := ParseDeleteProvisioningPolicyRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteProvisioningPolicyRequest_FieldTerminalPath struct {
	selector DeleteProvisioningPolicyRequest_FieldPathSelector
}

var _ DeleteProvisioningPolicyRequest_FieldPath = (*DeleteProvisioningPolicyRequest_FieldTerminalPath)(nil)

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) Selector() DeleteProvisioningPolicyRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteProvisioningPolicyRequest
func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) Get(source *DeleteProvisioningPolicyRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteProvisioningPolicyRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteProvisioningPolicyRequest
func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) GetSingle(source *DeleteProvisioningPolicyRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteProvisioningPolicyRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		return (*provisioning_policy.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) ClearValue(item *DeleteProvisioningPolicyRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteProvisioningPolicyRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteProvisioningPolicyRequest_FieldPathSelectorName
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteProvisioningPolicyRequest_FieldPathValue {
	switch fp.selector {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		return &DeleteProvisioningPolicyRequest_FieldTerminalPathValue{DeleteProvisioningPolicyRequest_FieldTerminalPath: *fp, value: value.(*provisioning_policy.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov := &DeleteProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{DeleteProvisioningPolicyRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		return &DeleteProvisioningPolicyRequest_FieldTerminalPathArrayOfValues{DeleteProvisioningPolicyRequest_FieldTerminalPath: *fp, values: values.([]*provisioning_policy.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteProvisioningPolicyRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fp.selector))
	}
}

func (fp *DeleteProvisioningPolicyRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteProvisioningPolicyRequest_FieldPathValue allows storing values for DeleteProvisioningPolicyRequest fields according to their type
type DeleteProvisioningPolicyRequest_FieldPathValue interface {
	DeleteProvisioningPolicyRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteProvisioningPolicyRequest)
	CompareWith(*DeleteProvisioningPolicyRequest) (cmp int, comparable bool)
}

func ParseDeleteProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) (DeleteProvisioningPolicyRequest_FieldPathValue, error) {
	fp, err := ParseDeleteProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProvisioningPolicyRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteProvisioningPolicyRequest_FieldPathValue), nil
}

func MustParseDeleteProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr string) DeleteProvisioningPolicyRequest_FieldPathValue {
	fpv, err := ParseDeleteProvisioningPolicyRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteProvisioningPolicyRequest_FieldTerminalPathValue struct {
	DeleteProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProvisioningPolicyRequest_FieldPathValue = (*DeleteProvisioningPolicyRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteProvisioningPolicyRequest' as interface{}
func (fpv *DeleteProvisioningPolicyRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteProvisioningPolicyRequest_FieldTerminalPathValue) AsNameValue() (*provisioning_policy.Reference, bool) {
	res, ok := fpv.value.(*provisioning_policy.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteProvisioningPolicyRequest
func (fpv *DeleteProvisioningPolicyRequest_FieldTerminalPathValue) SetTo(target **DeleteProvisioningPolicyRequest) {
	if *target == nil {
		*target = new(DeleteProvisioningPolicyRequest)
	}
	switch fpv.selector {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*provisioning_policy.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProvisioningPolicyRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteProvisioningPolicyRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteProvisioningPolicyRequest_FieldTerminalPathValue' with the value under path in 'DeleteProvisioningPolicyRequest'.
func (fpv *DeleteProvisioningPolicyRequest_FieldTerminalPathValue) CompareWith(source *DeleteProvisioningPolicyRequest) (int, bool) {
	switch fpv.selector {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*provisioning_policy.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteProvisioningPolicyRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteProvisioningPolicyRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteProvisioningPolicyRequest))
}

// DeleteProvisioningPolicyRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteProvisioningPolicyRequest according to their type
// Present only for array (repeated) types.
type DeleteProvisioningPolicyRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteProvisioningPolicyRequest_FieldPath
	ContainsValue(*DeleteProvisioningPolicyRequest) bool
}

// ParseDeleteProvisioningPolicyRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteProvisioningPolicyRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProvisioningPolicyRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteProvisioningPolicyRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteProvisioningPolicyRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteProvisioningPolicyRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteProvisioningPolicyRequest_FieldTerminalPathArrayItemValue struct {
	DeleteProvisioningPolicyRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteProvisioningPolicyRequest_FieldPathArrayItemValue = (*DeleteProvisioningPolicyRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteProvisioningPolicyRequest as interface{}
func (fpaiv *DeleteProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteProvisioningPolicyRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteProvisioningPolicyRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteProvisioningPolicyRequest'
func (fpaiv *DeleteProvisioningPolicyRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteProvisioningPolicyRequest) bool {
	slice := fpaiv.DeleteProvisioningPolicyRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteProvisioningPolicyRequest_FieldPathArrayOfValues allows storing slice of values for DeleteProvisioningPolicyRequest fields according to their type
type DeleteProvisioningPolicyRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteProvisioningPolicyRequest_FieldPath
}

func ParseDeleteProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteProvisioningPolicyRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteProvisioningPolicyRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteProvisioningPolicyRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteProvisioningPolicyRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteProvisioningPolicyRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteProvisioningPolicyRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteProvisioningPolicyRequest_FieldTerminalPathArrayOfValues struct {
	DeleteProvisioningPolicyRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteProvisioningPolicyRequest_FieldPathArrayOfValues = (*DeleteProvisioningPolicyRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteProvisioningPolicyRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*provisioning_policy.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteProvisioningPolicyRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*provisioning_policy.Reference, bool) {
	res, ok := fpaov.values.([]*provisioning_policy.Reference)
	return res, ok
}
