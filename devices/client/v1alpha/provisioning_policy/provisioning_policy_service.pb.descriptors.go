// Code generated by protoc-gen-goten-client
// API: ProvisioningPolicyService
// DO NOT EDIT!!!

package provisioning_policy_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/provisioning_policy"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized                                bool
	provisioningPolicyServiceDescriptor                   *ProvisioningPolicyServiceDescriptor
	getProvisioningPolicyDescriptor                       *GetProvisioningPolicyDescriptor
	batchGetProvisioningPolicysDescriptor                 *BatchGetProvisioningPolicysDescriptor
	listProvisioningPolicysDescriptor                     *ListProvisioningPolicysDescriptor
	watchProvisioningPolicyDescriptor                     *WatchProvisioningPolicyDescriptor
	watchProvisioningPolicysDescriptor                    *WatchProvisioningPolicysDescriptor
	createProvisioningPolicyDescriptor                    *CreateProvisioningPolicyDescriptor
	updateProvisioningPolicyDescriptor                    *UpdateProvisioningPolicyDescriptor
	deleteProvisioningPolicyDescriptor                    *DeleteProvisioningPolicyDescriptor
	provisionServiceAccountToProvisioningPolicyDescriptor *ProvisionServiceAccountToProvisioningPolicyDescriptor
	removeServiceAccountFromProvisioningPolicyDescriptor  *RemoveServiceAccountFromProvisioningPolicyDescriptor
	provisionDeviceViaPolicyDescriptor                    *ProvisionDeviceViaPolicyDescriptor
	requestProvisioningApprovalDescriptor                 *RequestProvisioningApprovalDescriptor
)

type GetProvisioningPolicyDescriptor struct{}

type GetProvisioningPolicyDescriptorClientMsgHandle struct{}

type GetProvisioningPolicyDescriptorServerMsgHandle struct{}

func (d *GetProvisioningPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetProvisioningPolicyRequest{}
}

func (d *GetProvisioningPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &provisioning_policy.ProvisioningPolicy{}
}

func (d *GetProvisioningPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *GetProvisioningPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *GetProvisioningPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *GetProvisioningPolicyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetProvisioningPolicyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetProvisioningPolicyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetProvisioningPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetProvisioningPolicyDescriptor) GetVerb() string {
	return "get"
}

func (d *GetProvisioningPolicyDescriptor) GetMethodName() string {
	return "GetProvisioningPolicy"
}

func (d *GetProvisioningPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.ProvisioningPolicyService/GetProvisioningPolicy"
}

func (d *GetProvisioningPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *GetProvisioningPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *GetProvisioningPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *GetProvisioningPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *GetProvisioningPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *GetProvisioningPolicyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *GetProvisioningPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProvisioningPolicyDescriptorClientMsgHandle{}
}

func (d *GetProvisioningPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProvisioningPolicyDescriptorServerMsgHandle{}
}

func (h *GetProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetProvisioningPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *GetProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetProvisioningPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetProvisioningPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*provisioning_policy.ProvisioningPolicy) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*provisioning_policy.ProvisioningPolicy) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*provisioning_policy.ProvisioningPolicy) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetProvisioningPolicyDescriptor() *GetProvisioningPolicyDescriptor {
	return getProvisioningPolicyDescriptor
}

type BatchGetProvisioningPolicysDescriptor struct{}

type BatchGetProvisioningPolicysDescriptorClientMsgHandle struct{}

type BatchGetProvisioningPolicysDescriptorServerMsgHandle struct{}

func (d *BatchGetProvisioningPolicysDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetProvisioningPolicysRequest{}
}

func (d *BatchGetProvisioningPolicysDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetProvisioningPolicysResponse{}
}

func (d *BatchGetProvisioningPolicysDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetProvisioningPolicysDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetProvisioningPolicysDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetProvisioningPolicysDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetProvisioningPolicysDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetProvisioningPolicysDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetProvisioningPolicysDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetProvisioningPolicysDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetProvisioningPolicysDescriptor) GetMethodName() string {
	return "BatchGetProvisioningPolicys"
}

func (d *BatchGetProvisioningPolicysDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.ProvisioningPolicyService/BatchGetProvisioningPolicys"
}

func (d *BatchGetProvisioningPolicysDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *BatchGetProvisioningPolicysDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *BatchGetProvisioningPolicysDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *BatchGetProvisioningPolicysDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *BatchGetProvisioningPolicysDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *BatchGetProvisioningPolicysDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *BatchGetProvisioningPolicysDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProvisioningPolicysDescriptorClientMsgHandle{}
}

func (d *BatchGetProvisioningPolicysDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProvisioningPolicysDescriptorServerMsgHandle{}
}

func (h *BatchGetProvisioningPolicysDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProvisioningPolicysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetProvisioningPolicysRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProvisioningPolicysDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProvisioningPolicysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetProvisioningPolicysRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(provisioning_policy.ProvisioningPolicyNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (provisioning_policy.ProvisioningPolicyNameList)(nil)
}

func (h *BatchGetProvisioningPolicysDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProvisioningPolicysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetProvisioningPolicysRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetProvisioningPolicysDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProvisioningPolicysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetProvisioningPolicysResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProvisioningPolicysDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProvisioningPolicysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetProvisioningPolicysResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProvisioningPolicys()
	list := make(provisioning_policy.ProvisioningPolicyNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetProvisioningPolicysDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProvisioningPolicysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetProvisioningPolicysResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetProvisioningPolicysDescriptor() *BatchGetProvisioningPolicysDescriptor {
	return batchGetProvisioningPolicysDescriptor
}

type ListProvisioningPolicysDescriptor struct{}

type ListProvisioningPolicysDescriptorClientMsgHandle struct{}

type ListProvisioningPolicysDescriptorServerMsgHandle struct{}

func (d *ListProvisioningPolicysDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListProvisioningPolicysRequest{}
}

func (d *ListProvisioningPolicysDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListProvisioningPolicysResponse{}
}

func (d *ListProvisioningPolicysDescriptor) IsUnary() bool {
	return true
}

func (d *ListProvisioningPolicysDescriptor) IsClientStream() bool {
	return false
}

func (d *ListProvisioningPolicysDescriptor) IsServerStream() bool {
	return false
}

func (d *ListProvisioningPolicysDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListProvisioningPolicysDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListProvisioningPolicysDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListProvisioningPolicysDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListProvisioningPolicysDescriptor) GetVerb() string {
	return "list"
}

func (d *ListProvisioningPolicysDescriptor) GetMethodName() string {
	return "ListProvisioningPolicys"
}

func (d *ListProvisioningPolicysDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.ProvisioningPolicyService/ListProvisioningPolicys"
}

func (d *ListProvisioningPolicysDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *ListProvisioningPolicysDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *ListProvisioningPolicysDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *ListProvisioningPolicysDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ListProvisioningPolicysDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *ListProvisioningPolicysDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *ListProvisioningPolicysDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProvisioningPolicysDescriptorClientMsgHandle{}
}

func (d *ListProvisioningPolicysDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProvisioningPolicysDescriptorServerMsgHandle{}
}

func (h *ListProvisioningPolicysDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProvisioningPolicysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListProvisioningPolicysRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListProvisioningPolicysDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProvisioningPolicysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListProvisioningPolicysRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListProvisioningPolicysDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProvisioningPolicysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListProvisioningPolicysRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListProvisioningPolicysDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProvisioningPolicysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListProvisioningPolicysResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListProvisioningPolicysDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProvisioningPolicysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListProvisioningPolicysResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetProvisioningPolicys()
	list := make(provisioning_policy.ProvisioningPolicyNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListProvisioningPolicysDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProvisioningPolicysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListProvisioningPolicysResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListProvisioningPolicysDescriptor() *ListProvisioningPolicysDescriptor {
	return listProvisioningPolicysDescriptor
}

type WatchProvisioningPolicyDescriptor struct{}

type WatchProvisioningPolicyDescriptorClientMsgHandle struct{}

type WatchProvisioningPolicyDescriptorServerMsgHandle struct{}

func (d *WatchProvisioningPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProvisioningPolicyRequest{}
}

func (d *WatchProvisioningPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProvisioningPolicyResponse{}
}

func (d *WatchProvisioningPolicyDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProvisioningPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProvisioningPolicyDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProvisioningPolicyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchProvisioningPolicyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchProvisioningPolicyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchProvisioningPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProvisioningPolicyDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProvisioningPolicyDescriptor) GetMethodName() string {
	return "WatchProvisioningPolicy"
}

func (d *WatchProvisioningPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.ProvisioningPolicyService/WatchProvisioningPolicy"
}

func (d *WatchProvisioningPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *WatchProvisioningPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *WatchProvisioningPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *WatchProvisioningPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchProvisioningPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *WatchProvisioningPolicyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *WatchProvisioningPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProvisioningPolicyDescriptorClientMsgHandle{}
}

func (d *WatchProvisioningPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProvisioningPolicyDescriptorServerMsgHandle{}
}

func (h *WatchProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProvisioningPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *WatchProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProvisioningPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProvisioningPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProvisioningPolicyResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *provisioning_policy.ProvisioningPolicyChange_Added_:
			return tResChange.Added.GetProvisioningPolicy().GetName()
		case *provisioning_policy.ProvisioningPolicyChange_Modified_:
			return tResChange.Modified.GetName()
		case *provisioning_policy.ProvisioningPolicyChange_Removed_:
			return tResChange.Removed.GetName()
		case *provisioning_policy.ProvisioningPolicyChange_Current_:
			return tResChange.Current.GetProvisioningPolicy().GetName()
		}
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *WatchProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProvisioningPolicyResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProvisioningPolicyResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProvisioningPolicyDescriptor() *WatchProvisioningPolicyDescriptor {
	return watchProvisioningPolicyDescriptor
}

type WatchProvisioningPolicysDescriptor struct{}

type WatchProvisioningPolicysDescriptorClientMsgHandle struct{}

type WatchProvisioningPolicysDescriptorServerMsgHandle struct{}

func (d *WatchProvisioningPolicysDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProvisioningPolicysRequest{}
}

func (d *WatchProvisioningPolicysDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProvisioningPolicysResponse{}
}

func (d *WatchProvisioningPolicysDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProvisioningPolicysDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProvisioningPolicysDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProvisioningPolicysDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchProvisioningPolicysDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchProvisioningPolicysDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchProvisioningPolicysDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProvisioningPolicysDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProvisioningPolicysDescriptor) GetMethodName() string {
	return "WatchProvisioningPolicys"
}

func (d *WatchProvisioningPolicysDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.ProvisioningPolicyService/WatchProvisioningPolicys"
}

func (d *WatchProvisioningPolicysDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *WatchProvisioningPolicysDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *WatchProvisioningPolicysDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *WatchProvisioningPolicysDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchProvisioningPolicysDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *WatchProvisioningPolicysDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *WatchProvisioningPolicysDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProvisioningPolicysDescriptorClientMsgHandle{}
}

func (d *WatchProvisioningPolicysDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProvisioningPolicysDescriptorServerMsgHandle{}
}

func (h *WatchProvisioningPolicysDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPolicysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProvisioningPolicysRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProvisioningPolicysDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProvisioningPolicysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProvisioningPolicysRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProvisioningPolicysDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPolicysRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProvisioningPolicysRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*provisioning_policy.ParentName)(nil)
}

func (h *WatchProvisioningPolicysDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPolicysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchProvisioningPolicysResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProvisioningPolicysDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProvisioningPolicysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchProvisioningPolicysResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetProvisioningPolicyChanges()
	list := make(provisioning_policy.ProvisioningPolicyNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *provisioning_policy.ProvisioningPolicyChange_Added_:
			list = append(list, tResChange.Added.GetProvisioningPolicy().GetName())
		case *provisioning_policy.ProvisioningPolicyChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *provisioning_policy.ProvisioningPolicyChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *provisioning_policy.ProvisioningPolicyChange_Current_:
			list = append(list, tResChange.Current.GetProvisioningPolicy().GetName())
		}
	}
	return list
}

func (h *WatchProvisioningPolicysDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPolicysResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchProvisioningPolicysResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProvisioningPolicysDescriptor() *WatchProvisioningPolicysDescriptor {
	return watchProvisioningPolicysDescriptor
}

type CreateProvisioningPolicyDescriptor struct{}

type CreateProvisioningPolicyDescriptorClientMsgHandle struct{}

type CreateProvisioningPolicyDescriptorServerMsgHandle struct{}

func (d *CreateProvisioningPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateProvisioningPolicyRequest{}
}

func (d *CreateProvisioningPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &provisioning_policy.ProvisioningPolicy{}
}

func (d *CreateProvisioningPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *CreateProvisioningPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateProvisioningPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateProvisioningPolicyDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateProvisioningPolicyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateProvisioningPolicyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateProvisioningPolicyDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateProvisioningPolicyDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateProvisioningPolicyDescriptor) GetMethodName() string {
	return "CreateProvisioningPolicy"
}

func (d *CreateProvisioningPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.ProvisioningPolicyService/CreateProvisioningPolicy"
}

func (d *CreateProvisioningPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *CreateProvisioningPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *CreateProvisioningPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *CreateProvisioningPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *CreateProvisioningPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *CreateProvisioningPolicyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *CreateProvisioningPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProvisioningPolicyDescriptorClientMsgHandle{}
}

func (d *CreateProvisioningPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProvisioningPolicyDescriptorServerMsgHandle{}
}

func (h *CreateProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateProvisioningPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetProvisioningPolicy().GetName()
}

func (h *CreateProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateProvisioningPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateProvisioningPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*provisioning_policy.ParentName)(nil)
}

func (h *CreateProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*provisioning_policy.ProvisioningPolicy) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*provisioning_policy.ProvisioningPolicy) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*provisioning_policy.ProvisioningPolicy) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateProvisioningPolicyDescriptor() *CreateProvisioningPolicyDescriptor {
	return createProvisioningPolicyDescriptor
}

type UpdateProvisioningPolicyDescriptor struct{}

type UpdateProvisioningPolicyDescriptorClientMsgHandle struct{}

type UpdateProvisioningPolicyDescriptorServerMsgHandle struct{}

func (d *UpdateProvisioningPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateProvisioningPolicyRequest{}
}

func (d *UpdateProvisioningPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &provisioning_policy.ProvisioningPolicy{}
}

func (d *UpdateProvisioningPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateProvisioningPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateProvisioningPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateProvisioningPolicyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateProvisioningPolicyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateProvisioningPolicyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateProvisioningPolicyDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateProvisioningPolicyDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateProvisioningPolicyDescriptor) GetMethodName() string {
	return "UpdateProvisioningPolicy"
}

func (d *UpdateProvisioningPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.ProvisioningPolicyService/UpdateProvisioningPolicy"
}

func (d *UpdateProvisioningPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *UpdateProvisioningPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *UpdateProvisioningPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *UpdateProvisioningPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *UpdateProvisioningPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *UpdateProvisioningPolicyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *UpdateProvisioningPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProvisioningPolicyDescriptorClientMsgHandle{}
}

func (d *UpdateProvisioningPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProvisioningPolicyDescriptorServerMsgHandle{}
}

func (h *UpdateProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateProvisioningPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetProvisioningPolicy().GetName()
}

func (h *UpdateProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateProvisioningPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateProvisioningPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*provisioning_policy.ProvisioningPolicy) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*provisioning_policy.ProvisioningPolicy) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*provisioning_policy.ProvisioningPolicy) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateProvisioningPolicyDescriptor() *UpdateProvisioningPolicyDescriptor {
	return updateProvisioningPolicyDescriptor
}

type DeleteProvisioningPolicyDescriptor struct{}

type DeleteProvisioningPolicyDescriptorClientMsgHandle struct{}

type DeleteProvisioningPolicyDescriptorServerMsgHandle struct{}

func (d *DeleteProvisioningPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteProvisioningPolicyRequest{}
}

func (d *DeleteProvisioningPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteProvisioningPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteProvisioningPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteProvisioningPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteProvisioningPolicyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteProvisioningPolicyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteProvisioningPolicyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteProvisioningPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteProvisioningPolicyDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteProvisioningPolicyDescriptor) GetMethodName() string {
	return "DeleteProvisioningPolicy"
}

func (d *DeleteProvisioningPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.ProvisioningPolicyService/DeleteProvisioningPolicy"
}

func (d *DeleteProvisioningPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *DeleteProvisioningPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *DeleteProvisioningPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *DeleteProvisioningPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *DeleteProvisioningPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *DeleteProvisioningPolicyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *DeleteProvisioningPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProvisioningPolicyDescriptorClientMsgHandle{}
}

func (d *DeleteProvisioningPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProvisioningPolicyDescriptorServerMsgHandle{}
}

func (h *DeleteProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteProvisioningPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *DeleteProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteProvisioningPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteProvisioningPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteProvisioningPolicyDescriptor() *DeleteProvisioningPolicyDescriptor {
	return deleteProvisioningPolicyDescriptor
}

type ProvisionServiceAccountToProvisioningPolicyDescriptor struct{}

type ProvisionServiceAccountToProvisioningPolicyDescriptorClientMsgHandle struct{}

type ProvisionServiceAccountToProvisioningPolicyDescriptorServerMsgHandle struct{}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &ProvisionServiceAccountToProvisioningPolicyRequest{}
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &ProvisionServiceAccountToProvisioningPolicyResponse{}
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetVerb() string {
	return "provisionServiceAccountToProvisioningPolicy"
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetMethodName() string {
	return "ProvisionServiceAccountToProvisioningPolicy"
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.ProvisioningPolicyService/ProvisionServiceAccountToProvisioningPolicy"
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ProvisionServiceAccountToProvisioningPolicyDescriptorClientMsgHandle{}
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ProvisionServiceAccountToProvisioningPolicyDescriptorServerMsgHandle{}
}

func (h *ProvisionServiceAccountToProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionServiceAccountToProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ProvisionServiceAccountToProvisioningPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *ProvisionServiceAccountToProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ProvisionServiceAccountToProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ProvisionServiceAccountToProvisioningPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ProvisionServiceAccountToProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionServiceAccountToProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ProvisionServiceAccountToProvisioningPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *ProvisionServiceAccountToProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionServiceAccountToProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ProvisionServiceAccountToProvisioningPolicyResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ProvisionServiceAccountToProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ProvisionServiceAccountToProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ProvisionServiceAccountToProvisioningPolicyResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ProvisionServiceAccountToProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionServiceAccountToProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ProvisionServiceAccountToProvisioningPolicyResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetProvisionServiceAccountToProvisioningPolicyDescriptor() *ProvisionServiceAccountToProvisioningPolicyDescriptor {
	return provisionServiceAccountToProvisioningPolicyDescriptor
}

type RemoveServiceAccountFromProvisioningPolicyDescriptor struct{}

type RemoveServiceAccountFromProvisioningPolicyDescriptorClientMsgHandle struct{}

type RemoveServiceAccountFromProvisioningPolicyDescriptorServerMsgHandle struct{}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &RemoveServiceAccountFromProvisioningPolicyRequest{}
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &RemoveServiceAccountFromProvisioningPolicyResponse{}
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetVerb() string {
	return "removeServiceAccountFromProvisioningPolicy"
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetMethodName() string {
	return "RemoveServiceAccountFromProvisioningPolicy"
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.ProvisioningPolicyService/RemoveServiceAccountFromProvisioningPolicy"
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RemoveServiceAccountFromProvisioningPolicyDescriptorClientMsgHandle{}
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RemoveServiceAccountFromProvisioningPolicyDescriptorServerMsgHandle{}
}

func (h *RemoveServiceAccountFromProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RemoveServiceAccountFromProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*RemoveServiceAccountFromProvisioningPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *RemoveServiceAccountFromProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RemoveServiceAccountFromProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*RemoveServiceAccountFromProvisioningPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *RemoveServiceAccountFromProvisioningPolicyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RemoveServiceAccountFromProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*RemoveServiceAccountFromProvisioningPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *RemoveServiceAccountFromProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RemoveServiceAccountFromProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*RemoveServiceAccountFromProvisioningPolicyResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *RemoveServiceAccountFromProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RemoveServiceAccountFromProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*RemoveServiceAccountFromProvisioningPolicyResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *RemoveServiceAccountFromProvisioningPolicyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RemoveServiceAccountFromProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*RemoveServiceAccountFromProvisioningPolicyResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetRemoveServiceAccountFromProvisioningPolicyDescriptor() *RemoveServiceAccountFromProvisioningPolicyDescriptor {
	return removeServiceAccountFromProvisioningPolicyDescriptor
}

type ProvisionDeviceViaPolicyDescriptor struct{}

type ProvisionDeviceViaPolicyDescriptorClientMsgHandle struct{}

type ProvisionDeviceViaPolicyDescriptorServerMsgHandle struct{}

func (d *ProvisionDeviceViaPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &ProvisionDeviceViaPolicyRequest{}
}

func (d *ProvisionDeviceViaPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &ProvisionDeviceViaPolicyResponse{}
}

func (d *ProvisionDeviceViaPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *ProvisionDeviceViaPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *ProvisionDeviceViaPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *ProvisionDeviceViaPolicyDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *ProvisionDeviceViaPolicyDescriptor) IsPluralSubject() bool {
	return false
}

func (d *ProvisionDeviceViaPolicyDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ProvisionDeviceViaPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetVerb() string {
	return "provisionDeviceViaPolicy"
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetMethodName() string {
	return "ProvisionDeviceViaPolicy"
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.ProvisioningPolicyService/ProvisionDeviceViaPolicy"
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ProvisionDeviceViaPolicyDescriptorClientMsgHandle{}
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ProvisionDeviceViaPolicyDescriptorServerMsgHandle{}
}

func (h *ProvisionDeviceViaPolicyDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionDeviceViaPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ProvisionDeviceViaPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *ProvisionDeviceViaPolicyDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ProvisionDeviceViaPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ProvisionDeviceViaPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ProvisionDeviceViaPolicyDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionDeviceViaPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ProvisionDeviceViaPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *ProvisionDeviceViaPolicyDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionDeviceViaPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ProvisionDeviceViaPolicyResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ProvisionDeviceViaPolicyDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ProvisionDeviceViaPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ProvisionDeviceViaPolicyResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ProvisionDeviceViaPolicyDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionDeviceViaPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ProvisionDeviceViaPolicyResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetProvisionDeviceViaPolicyDescriptor() *ProvisionDeviceViaPolicyDescriptor {
	return provisionDeviceViaPolicyDescriptor
}

type RequestProvisioningApprovalDescriptor struct{}

type RequestProvisioningApprovalDescriptorClientMsgHandle struct{}

type RequestProvisioningApprovalDescriptorServerMsgHandle struct{}

func (d *RequestProvisioningApprovalDescriptor) NewEmptyClientMsg() proto.Message {
	return &RequestProvisioningApprovalRequest{}
}

func (d *RequestProvisioningApprovalDescriptor) NewEmptyServerMsg() proto.Message {
	return &RequestProvisioningApprovalResponse{}
}

func (d *RequestProvisioningApprovalDescriptor) IsUnary() bool {
	return true
}

func (d *RequestProvisioningApprovalDescriptor) IsClientStream() bool {
	return false
}

func (d *RequestProvisioningApprovalDescriptor) IsServerStream() bool {
	return false
}

func (d *RequestProvisioningApprovalDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *RequestProvisioningApprovalDescriptor) IsPluralSubject() bool {
	return false
}

func (d *RequestProvisioningApprovalDescriptor) HasSubjectResource() bool {
	return true
}

func (d *RequestProvisioningApprovalDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *RequestProvisioningApprovalDescriptor) GetVerb() string {
	return "requestProvisioningApproval"
}

func (d *RequestProvisioningApprovalDescriptor) GetMethodName() string {
	return "RequestProvisioningApproval"
}

func (d *RequestProvisioningApprovalDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.ProvisioningPolicyService/RequestProvisioningApproval"
}

func (d *RequestProvisioningApprovalDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *RequestProvisioningApprovalDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *RequestProvisioningApprovalDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *RequestProvisioningApprovalDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *RequestProvisioningApprovalDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *RequestProvisioningApprovalDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *RequestProvisioningApprovalDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RequestProvisioningApprovalDescriptorClientMsgHandle{}
}

func (d *RequestProvisioningApprovalDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RequestProvisioningApprovalDescriptorServerMsgHandle{}
}

func (h *RequestProvisioningApprovalDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RequestProvisioningApprovalRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*RequestProvisioningApprovalRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *RequestProvisioningApprovalDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RequestProvisioningApprovalRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*RequestProvisioningApprovalRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *RequestProvisioningApprovalDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RequestProvisioningApprovalRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*RequestProvisioningApprovalRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *RequestProvisioningApprovalDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RequestProvisioningApprovalResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*RequestProvisioningApprovalResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *RequestProvisioningApprovalDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RequestProvisioningApprovalResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*RequestProvisioningApprovalResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *RequestProvisioningApprovalDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RequestProvisioningApprovalResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*RequestProvisioningApprovalResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetRequestProvisioningApprovalDescriptor() *RequestProvisioningApprovalDescriptor {
	return requestProvisioningApprovalDescriptor
}

type ProvisioningPolicyServiceDescriptor struct{}

func (d *ProvisioningPolicyServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getProvisioningPolicyDescriptor,
		batchGetProvisioningPolicysDescriptor,
		listProvisioningPolicysDescriptor,
		watchProvisioningPolicyDescriptor,
		watchProvisioningPolicysDescriptor,
		createProvisioningPolicyDescriptor,
		updateProvisioningPolicyDescriptor,
		deleteProvisioningPolicyDescriptor,
		provisionServiceAccountToProvisioningPolicyDescriptor,
		removeServiceAccountFromProvisioningPolicyDescriptor,
		provisionDeviceViaPolicyDescriptor,
		requestProvisioningApprovalDescriptor,
	}
}

func (d *ProvisioningPolicyServiceDescriptor) GetFullAPIName() string {
	return "/ntt.devices.v1alpha.ProvisioningPolicyService"
}

func (d *ProvisioningPolicyServiceDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *ProvisioningPolicyServiceDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *ProvisioningPolicyServiceDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *ProvisioningPolicyServiceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func GetProvisioningPolicyServiceDescriptor() *ProvisioningPolicyServiceDescriptor {
	return provisioningPolicyServiceDescriptor
}

func initDescriptors() {
	provisioningPolicyServiceDescriptor = &ProvisioningPolicyServiceDescriptor{}
	getProvisioningPolicyDescriptor = &GetProvisioningPolicyDescriptor{}
	batchGetProvisioningPolicysDescriptor = &BatchGetProvisioningPolicysDescriptor{}
	listProvisioningPolicysDescriptor = &ListProvisioningPolicysDescriptor{}
	watchProvisioningPolicyDescriptor = &WatchProvisioningPolicyDescriptor{}
	watchProvisioningPolicysDescriptor = &WatchProvisioningPolicysDescriptor{}
	createProvisioningPolicyDescriptor = &CreateProvisioningPolicyDescriptor{}
	updateProvisioningPolicyDescriptor = &UpdateProvisioningPolicyDescriptor{}
	deleteProvisioningPolicyDescriptor = &DeleteProvisioningPolicyDescriptor{}
	provisionServiceAccountToProvisioningPolicyDescriptor = &ProvisionServiceAccountToProvisioningPolicyDescriptor{}
	removeServiceAccountFromProvisioningPolicyDescriptor = &RemoveServiceAccountFromProvisioningPolicyDescriptor{}
	provisionDeviceViaPolicyDescriptor = &ProvisionDeviceViaPolicyDescriptor{}
	requestProvisioningApprovalDescriptor = &RequestProvisioningApprovalDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(provisioningPolicyServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getProvisioningPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetProvisioningPolicysDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listProvisioningPolicysDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProvisioningPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProvisioningPolicysDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createProvisioningPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateProvisioningPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteProvisioningPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(provisionServiceAccountToProvisioningPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(removeServiceAccountFromProvisioningPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(provisionDeviceViaPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(requestProvisioningApprovalDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
