// Code generated by protoc-gen-goten-client
// API: DeviceService
// DO NOT EDIT!!!

package device_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/device"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized                    bool
	deviceServiceDescriptor                   *DeviceServiceDescriptor
	getDeviceDescriptor                       *GetDeviceDescriptor
	batchGetDevicesDescriptor                 *BatchGetDevicesDescriptor
	listDevicesDescriptor                     *ListDevicesDescriptor
	watchDeviceDescriptor                     *WatchDeviceDescriptor
	watchDevicesDescriptor                    *WatchDevicesDescriptor
	createDeviceDescriptor                    *CreateDeviceDescriptor
	updateDeviceDescriptor                    *UpdateDeviceDescriptor
	deleteDeviceDescriptor                    *DeleteDeviceDescriptor
	provisionServiceAccountToDeviceDescriptor *ProvisionServiceAccountToDeviceDescriptor
	removeServiceAccountFromDeviceDescriptor  *RemoveServiceAccountFromDeviceDescriptor
)

type GetDeviceDescriptor struct{}

type GetDeviceDescriptorClientMsgHandle struct{}

type GetDeviceDescriptorServerMsgHandle struct{}

func (d *GetDeviceDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetDeviceRequest{}
}

func (d *GetDeviceDescriptor) NewEmptyServerMsg() proto.Message {
	return &device.Device{}
}

func (d *GetDeviceDescriptor) IsUnary() bool {
	return true
}

func (d *GetDeviceDescriptor) IsClientStream() bool {
	return false
}

func (d *GetDeviceDescriptor) IsServerStream() bool {
	return false
}

func (d *GetDeviceDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetDeviceDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetDeviceDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetDeviceDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetDeviceDescriptor) GetVerb() string {
	return "get"
}

func (d *GetDeviceDescriptor) GetMethodName() string {
	return "GetDevice"
}

func (d *GetDeviceDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.DeviceService/GetDevice"
}

func (d *GetDeviceDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *GetDeviceDescriptor) GetApiName() string {
	return "DeviceService"
}

func (d *GetDeviceDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *GetDeviceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *GetDeviceDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceServiceDescriptor
}

func (d *GetDeviceDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return device.GetDescriptor()
}

func (d *GetDeviceDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeviceDescriptorClientMsgHandle{}
}

func (d *GetDeviceDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeviceDescriptorServerMsgHandle{}
}

func (h *GetDeviceDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetDeviceRequest) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*device.Name)(nil)
}

func (h *GetDeviceDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetDeviceRequest) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeviceDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetDeviceRequest) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDeviceDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device.Device)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*device.Device) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetDeviceDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device.Device)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*device.Device) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeviceDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device.Device)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*device.Device) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetDeviceDescriptor() *GetDeviceDescriptor {
	return getDeviceDescriptor
}

type BatchGetDevicesDescriptor struct{}

type BatchGetDevicesDescriptorClientMsgHandle struct{}

type BatchGetDevicesDescriptorServerMsgHandle struct{}

func (d *BatchGetDevicesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetDevicesRequest{}
}

func (d *BatchGetDevicesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetDevicesResponse{}
}

func (d *BatchGetDevicesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetDevicesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetDevicesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetDevicesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetDevicesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetDevicesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetDevicesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetDevicesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetDevicesDescriptor) GetMethodName() string {
	return "BatchGetDevices"
}

func (d *BatchGetDevicesDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.DeviceService/BatchGetDevices"
}

func (d *BatchGetDevicesDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *BatchGetDevicesDescriptor) GetApiName() string {
	return "DeviceService"
}

func (d *BatchGetDevicesDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *BatchGetDevicesDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *BatchGetDevicesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceServiceDescriptor
}

func (d *BatchGetDevicesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return device.GetDescriptor()
}

func (d *BatchGetDevicesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDevicesDescriptorClientMsgHandle{}
}

func (d *BatchGetDevicesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDevicesDescriptorServerMsgHandle{}
}

func (h *BatchGetDevicesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDevicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetDevicesRequest) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDevicesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDevicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetDevicesRequest) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(device.DeviceNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (device.DeviceNameList)(nil)
}

func (h *BatchGetDevicesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDevicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetDevicesRequest) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDevicesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDevicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetDevicesResponse) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDevicesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDevicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetDevicesResponse) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetDevices()
	list := make(device.DeviceNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetDevicesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDevicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetDevicesResponse) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetDevicesDescriptor() *BatchGetDevicesDescriptor {
	return batchGetDevicesDescriptor
}

type ListDevicesDescriptor struct{}

type ListDevicesDescriptorClientMsgHandle struct{}

type ListDevicesDescriptorServerMsgHandle struct{}

func (d *ListDevicesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListDevicesRequest{}
}

func (d *ListDevicesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListDevicesResponse{}
}

func (d *ListDevicesDescriptor) IsUnary() bool {
	return true
}

func (d *ListDevicesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListDevicesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListDevicesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListDevicesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListDevicesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListDevicesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListDevicesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListDevicesDescriptor) GetMethodName() string {
	return "ListDevices"
}

func (d *ListDevicesDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.DeviceService/ListDevices"
}

func (d *ListDevicesDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *ListDevicesDescriptor) GetApiName() string {
	return "DeviceService"
}

func (d *ListDevicesDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *ListDevicesDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ListDevicesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceServiceDescriptor
}

func (d *ListDevicesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return device.GetDescriptor()
}

func (d *ListDevicesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDevicesDescriptorClientMsgHandle{}
}

func (d *ListDevicesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDevicesDescriptorServerMsgHandle{}
}

func (h *ListDevicesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDevicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListDevicesRequest) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListDevicesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDevicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListDevicesRequest) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListDevicesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDevicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListDevicesRequest) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListDevicesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDevicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListDevicesResponse) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListDevicesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDevicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListDevicesResponse) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetDevices()
	list := make(device.DeviceNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListDevicesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDevicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListDevicesResponse) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListDevicesDescriptor() *ListDevicesDescriptor {
	return listDevicesDescriptor
}

type WatchDeviceDescriptor struct{}

type WatchDeviceDescriptorClientMsgHandle struct{}

type WatchDeviceDescriptorServerMsgHandle struct{}

func (d *WatchDeviceDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeviceRequest{}
}

func (d *WatchDeviceDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeviceResponse{}
}

func (d *WatchDeviceDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeviceDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeviceDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeviceDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchDeviceDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchDeviceDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchDeviceDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeviceDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeviceDescriptor) GetMethodName() string {
	return "WatchDevice"
}

func (d *WatchDeviceDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.DeviceService/WatchDevice"
}

func (d *WatchDeviceDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *WatchDeviceDescriptor) GetApiName() string {
	return "DeviceService"
}

func (d *WatchDeviceDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *WatchDeviceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchDeviceDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceServiceDescriptor
}

func (d *WatchDeviceDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return device.GetDescriptor()
}

func (d *WatchDeviceDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceDescriptorClientMsgHandle{}
}

func (d *WatchDeviceDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceDescriptorServerMsgHandle{}
}

func (h *WatchDeviceDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchDeviceRequest) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*device.Name)(nil)
}

func (h *WatchDeviceDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchDeviceRequest) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchDeviceRequest) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchDeviceResponse) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *device.DeviceChange_Added_:
			return tResChange.Added.GetDevice().GetName()
		case *device.DeviceChange_Modified_:
			return tResChange.Modified.GetName()
		case *device.DeviceChange_Removed_:
			return tResChange.Removed.GetName()
		case *device.DeviceChange_Current_:
			return tResChange.Current.GetDevice().GetName()
		}
	}
	return (*device.Name)(nil)
}

func (h *WatchDeviceDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchDeviceResponse) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchDeviceResponse) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchDeviceDescriptor() *WatchDeviceDescriptor {
	return watchDeviceDescriptor
}

type WatchDevicesDescriptor struct{}

type WatchDevicesDescriptorClientMsgHandle struct{}

type WatchDevicesDescriptorServerMsgHandle struct{}

func (d *WatchDevicesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDevicesRequest{}
}

func (d *WatchDevicesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDevicesResponse{}
}

func (d *WatchDevicesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDevicesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDevicesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDevicesDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchDevicesDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchDevicesDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchDevicesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDevicesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDevicesDescriptor) GetMethodName() string {
	return "WatchDevices"
}

func (d *WatchDevicesDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.DeviceService/WatchDevices"
}

func (d *WatchDevicesDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *WatchDevicesDescriptor) GetApiName() string {
	return "DeviceService"
}

func (d *WatchDevicesDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *WatchDevicesDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchDevicesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceServiceDescriptor
}

func (d *WatchDevicesDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return device.GetDescriptor()
}

func (d *WatchDevicesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDevicesDescriptorClientMsgHandle{}
}

func (d *WatchDevicesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDevicesDescriptorServerMsgHandle{}
}

func (h *WatchDevicesDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDevicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchDevicesRequest) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDevicesDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDevicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchDevicesRequest) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDevicesDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDevicesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchDevicesRequest) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*device.ParentName)(nil)
}

func (h *WatchDevicesDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDevicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchDevicesResponse) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDevicesDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDevicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchDevicesResponse) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetDeviceChanges()
	list := make(device.DeviceNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *device.DeviceChange_Added_:
			list = append(list, tResChange.Added.GetDevice().GetName())
		case *device.DeviceChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *device.DeviceChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *device.DeviceChange_Current_:
			list = append(list, tResChange.Current.GetDevice().GetName())
		}
	}
	return list
}

func (h *WatchDevicesDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDevicesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchDevicesResponse) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchDevicesDescriptor() *WatchDevicesDescriptor {
	return watchDevicesDescriptor
}

type CreateDeviceDescriptor struct{}

type CreateDeviceDescriptorClientMsgHandle struct{}

type CreateDeviceDescriptorServerMsgHandle struct{}

func (d *CreateDeviceDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateDeviceRequest{}
}

func (d *CreateDeviceDescriptor) NewEmptyServerMsg() proto.Message {
	return &device.Device{}
}

func (d *CreateDeviceDescriptor) IsUnary() bool {
	return true
}

func (d *CreateDeviceDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateDeviceDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateDeviceDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateDeviceDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateDeviceDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateDeviceDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateDeviceDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateDeviceDescriptor) GetMethodName() string {
	return "CreateDevice"
}

func (d *CreateDeviceDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.DeviceService/CreateDevice"
}

func (d *CreateDeviceDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *CreateDeviceDescriptor) GetApiName() string {
	return "DeviceService"
}

func (d *CreateDeviceDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *CreateDeviceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *CreateDeviceDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceServiceDescriptor
}

func (d *CreateDeviceDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return device.GetDescriptor()
}

func (d *CreateDeviceDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDeviceDescriptorClientMsgHandle{}
}

func (d *CreateDeviceDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDeviceDescriptorServerMsgHandle{}
}

func (h *CreateDeviceDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateDeviceRequest) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetDevice().GetName()
}

func (h *CreateDeviceDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateDeviceRequest) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDeviceDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateDeviceRequest) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*device.ParentName)(nil)
}

func (h *CreateDeviceDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device.Device)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*device.Device) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateDeviceDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device.Device)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*device.Device) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDeviceDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device.Device)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*device.Device) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateDeviceDescriptor() *CreateDeviceDescriptor {
	return createDeviceDescriptor
}

type UpdateDeviceDescriptor struct{}

type UpdateDeviceDescriptorClientMsgHandle struct{}

type UpdateDeviceDescriptorServerMsgHandle struct{}

func (d *UpdateDeviceDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateDeviceRequest{}
}

func (d *UpdateDeviceDescriptor) NewEmptyServerMsg() proto.Message {
	return &device.Device{}
}

func (d *UpdateDeviceDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateDeviceDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateDeviceDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateDeviceDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateDeviceDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateDeviceDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateDeviceDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateDeviceDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateDeviceDescriptor) GetMethodName() string {
	return "UpdateDevice"
}

func (d *UpdateDeviceDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.DeviceService/UpdateDevice"
}

func (d *UpdateDeviceDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *UpdateDeviceDescriptor) GetApiName() string {
	return "DeviceService"
}

func (d *UpdateDeviceDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *UpdateDeviceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *UpdateDeviceDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceServiceDescriptor
}

func (d *UpdateDeviceDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return device.GetDescriptor()
}

func (d *UpdateDeviceDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDeviceDescriptorClientMsgHandle{}
}

func (d *UpdateDeviceDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDeviceDescriptorServerMsgHandle{}
}

func (h *UpdateDeviceDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateDeviceRequest) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetDevice().GetName()
}

func (h *UpdateDeviceDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateDeviceRequest) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDeviceDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateDeviceRequest) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDeviceDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device.Device)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*device.Device) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateDeviceDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device.Device)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*device.Device) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDeviceDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device.Device)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*device.Device) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateDeviceDescriptor() *UpdateDeviceDescriptor {
	return updateDeviceDescriptor
}

type DeleteDeviceDescriptor struct{}

type DeleteDeviceDescriptorClientMsgHandle struct{}

type DeleteDeviceDescriptorServerMsgHandle struct{}

func (d *DeleteDeviceDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteDeviceRequest{}
}

func (d *DeleteDeviceDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteDeviceDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteDeviceDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteDeviceDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteDeviceDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteDeviceDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteDeviceDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteDeviceDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteDeviceDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteDeviceDescriptor) GetMethodName() string {
	return "DeleteDevice"
}

func (d *DeleteDeviceDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.DeviceService/DeleteDevice"
}

func (d *DeleteDeviceDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *DeleteDeviceDescriptor) GetApiName() string {
	return "DeviceService"
}

func (d *DeleteDeviceDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *DeleteDeviceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *DeleteDeviceDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceServiceDescriptor
}

func (d *DeleteDeviceDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return device.GetDescriptor()
}

func (d *DeleteDeviceDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDeviceDescriptorClientMsgHandle{}
}

func (d *DeleteDeviceDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDeviceDescriptorServerMsgHandle{}
}

func (h *DeleteDeviceDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteDeviceRequest) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*device.Name)(nil)
}

func (h *DeleteDeviceDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteDeviceRequest) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDeviceDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteDeviceRequest) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDeviceDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteDeviceDescriptor() *DeleteDeviceDescriptor {
	return deleteDeviceDescriptor
}

type ProvisionServiceAccountToDeviceDescriptor struct{}

type ProvisionServiceAccountToDeviceDescriptorClientMsgHandle struct{}

type ProvisionServiceAccountToDeviceDescriptorServerMsgHandle struct{}

func (d *ProvisionServiceAccountToDeviceDescriptor) NewEmptyClientMsg() proto.Message {
	return &ProvisionServiceAccountToDeviceRequest{}
}

func (d *ProvisionServiceAccountToDeviceDescriptor) NewEmptyServerMsg() proto.Message {
	return &ProvisionServiceAccountToDeviceResponse{}
}

func (d *ProvisionServiceAccountToDeviceDescriptor) IsUnary() bool {
	return true
}

func (d *ProvisionServiceAccountToDeviceDescriptor) IsClientStream() bool {
	return false
}

func (d *ProvisionServiceAccountToDeviceDescriptor) IsServerStream() bool {
	return false
}

func (d *ProvisionServiceAccountToDeviceDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *ProvisionServiceAccountToDeviceDescriptor) IsPluralSubject() bool {
	return false
}

func (d *ProvisionServiceAccountToDeviceDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ProvisionServiceAccountToDeviceDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ProvisionServiceAccountToDeviceDescriptor) GetVerb() string {
	return "provisionServiceAccountToDevice"
}

func (d *ProvisionServiceAccountToDeviceDescriptor) GetMethodName() string {
	return "ProvisionServiceAccountToDevice"
}

func (d *ProvisionServiceAccountToDeviceDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.DeviceService/ProvisionServiceAccountToDevice"
}

func (d *ProvisionServiceAccountToDeviceDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *ProvisionServiceAccountToDeviceDescriptor) GetApiName() string {
	return "DeviceService"
}

func (d *ProvisionServiceAccountToDeviceDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *ProvisionServiceAccountToDeviceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ProvisionServiceAccountToDeviceDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceServiceDescriptor
}

func (d *ProvisionServiceAccountToDeviceDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return device.GetDescriptor()
}

func (d *ProvisionServiceAccountToDeviceDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ProvisionServiceAccountToDeviceDescriptorClientMsgHandle{}
}

func (d *ProvisionServiceAccountToDeviceDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ProvisionServiceAccountToDeviceDescriptorServerMsgHandle{}
}

func (h *ProvisionServiceAccountToDeviceDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionServiceAccountToDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ProvisionServiceAccountToDeviceRequest) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*device.Name)(nil)
}

func (h *ProvisionServiceAccountToDeviceDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ProvisionServiceAccountToDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ProvisionServiceAccountToDeviceRequest) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ProvisionServiceAccountToDeviceDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionServiceAccountToDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ProvisionServiceAccountToDeviceRequest) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *ProvisionServiceAccountToDeviceDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionServiceAccountToDeviceResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ProvisionServiceAccountToDeviceResponse) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ProvisionServiceAccountToDeviceDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ProvisionServiceAccountToDeviceResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ProvisionServiceAccountToDeviceResponse) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ProvisionServiceAccountToDeviceDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionServiceAccountToDeviceResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ProvisionServiceAccountToDeviceResponse) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetProvisionServiceAccountToDeviceDescriptor() *ProvisionServiceAccountToDeviceDescriptor {
	return provisionServiceAccountToDeviceDescriptor
}

type RemoveServiceAccountFromDeviceDescriptor struct{}

type RemoveServiceAccountFromDeviceDescriptorClientMsgHandle struct{}

type RemoveServiceAccountFromDeviceDescriptorServerMsgHandle struct{}

func (d *RemoveServiceAccountFromDeviceDescriptor) NewEmptyClientMsg() proto.Message {
	return &RemoveServiceAccountFromDeviceRequest{}
}

func (d *RemoveServiceAccountFromDeviceDescriptor) NewEmptyServerMsg() proto.Message {
	return &RemoveServiceAccountFromDeviceResponse{}
}

func (d *RemoveServiceAccountFromDeviceDescriptor) IsUnary() bool {
	return true
}

func (d *RemoveServiceAccountFromDeviceDescriptor) IsClientStream() bool {
	return false
}

func (d *RemoveServiceAccountFromDeviceDescriptor) IsServerStream() bool {
	return false
}

func (d *RemoveServiceAccountFromDeviceDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *RemoveServiceAccountFromDeviceDescriptor) IsPluralSubject() bool {
	return false
}

func (d *RemoveServiceAccountFromDeviceDescriptor) HasSubjectResource() bool {
	return true
}

func (d *RemoveServiceAccountFromDeviceDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *RemoveServiceAccountFromDeviceDescriptor) GetVerb() string {
	return "removeServiceAccountFromDevice"
}

func (d *RemoveServiceAccountFromDeviceDescriptor) GetMethodName() string {
	return "RemoveServiceAccountFromDevice"
}

func (d *RemoveServiceAccountFromDeviceDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha.DeviceService/RemoveServiceAccountFromDevice"
}

func (d *RemoveServiceAccountFromDeviceDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *RemoveServiceAccountFromDeviceDescriptor) GetApiName() string {
	return "DeviceService"
}

func (d *RemoveServiceAccountFromDeviceDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *RemoveServiceAccountFromDeviceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *RemoveServiceAccountFromDeviceDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceServiceDescriptor
}

func (d *RemoveServiceAccountFromDeviceDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return device.GetDescriptor()
}

func (d *RemoveServiceAccountFromDeviceDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RemoveServiceAccountFromDeviceDescriptorClientMsgHandle{}
}

func (d *RemoveServiceAccountFromDeviceDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RemoveServiceAccountFromDeviceDescriptorServerMsgHandle{}
}

func (h *RemoveServiceAccountFromDeviceDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RemoveServiceAccountFromDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*RemoveServiceAccountFromDeviceRequest) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*device.Name)(nil)
}

func (h *RemoveServiceAccountFromDeviceDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RemoveServiceAccountFromDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*RemoveServiceAccountFromDeviceRequest) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *RemoveServiceAccountFromDeviceDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RemoveServiceAccountFromDeviceRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*RemoveServiceAccountFromDeviceRequest) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *RemoveServiceAccountFromDeviceDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RemoveServiceAccountFromDeviceResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*RemoveServiceAccountFromDeviceResponse) *device.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *RemoveServiceAccountFromDeviceDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RemoveServiceAccountFromDeviceResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*RemoveServiceAccountFromDeviceResponse) []*device.Name
	})
	if ok {
		return device.DeviceNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *RemoveServiceAccountFromDeviceDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RemoveServiceAccountFromDeviceResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*RemoveServiceAccountFromDeviceResponse) *device.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetRemoveServiceAccountFromDeviceDescriptor() *RemoveServiceAccountFromDeviceDescriptor {
	return removeServiceAccountFromDeviceDescriptor
}

type DeviceServiceDescriptor struct{}

func (d *DeviceServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getDeviceDescriptor,
		batchGetDevicesDescriptor,
		listDevicesDescriptor,
		watchDeviceDescriptor,
		watchDevicesDescriptor,
		createDeviceDescriptor,
		updateDeviceDescriptor,
		deleteDeviceDescriptor,
		provisionServiceAccountToDeviceDescriptor,
		removeServiceAccountFromDeviceDescriptor,
	}
}

func (d *DeviceServiceDescriptor) GetFullAPIName() string {
	return "/ntt.devices.v1alpha.DeviceService"
}

func (d *DeviceServiceDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha"
}

func (d *DeviceServiceDescriptor) GetApiName() string {
	return "DeviceService"
}

func (d *DeviceServiceDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *DeviceServiceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func GetDeviceServiceDescriptor() *DeviceServiceDescriptor {
	return deviceServiceDescriptor
}

func initDescriptors() {
	deviceServiceDescriptor = &DeviceServiceDescriptor{}
	getDeviceDescriptor = &GetDeviceDescriptor{}
	batchGetDevicesDescriptor = &BatchGetDevicesDescriptor{}
	listDevicesDescriptor = &ListDevicesDescriptor{}
	watchDeviceDescriptor = &WatchDeviceDescriptor{}
	watchDevicesDescriptor = &WatchDevicesDescriptor{}
	createDeviceDescriptor = &CreateDeviceDescriptor{}
	updateDeviceDescriptor = &UpdateDeviceDescriptor{}
	deleteDeviceDescriptor = &DeleteDeviceDescriptor{}
	provisionServiceAccountToDeviceDescriptor = &ProvisionServiceAccountToDeviceDescriptor{}
	removeServiceAccountFromDeviceDescriptor = &RemoveServiceAccountFromDeviceDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(deviceServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getDeviceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetDevicesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listDevicesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeviceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDevicesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createDeviceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateDeviceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteDeviceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(provisionServiceAccountToDeviceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(removeServiceAccountFromDeviceDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
