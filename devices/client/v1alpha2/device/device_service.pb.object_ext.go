// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/device_service.proto
// DO NOT EDIT!!!

package device_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetDeviceRequest) GotenObjectExt() {}

func (o *GetDeviceRequest) MakeFullFieldMask() *GetDeviceRequest_FieldMask {
	return FullGetDeviceRequest_FieldMask()
}

func (o *GetDeviceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetDeviceRequest_FieldMask()
}

func (o *GetDeviceRequest) MakeDiffFieldMask(other *GetDeviceRequest) *GetDeviceRequest_FieldMask {
	if o == nil && other == nil {
		return &GetDeviceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetDeviceRequest_FieldMask()
	}

	res := &GetDeviceRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetDeviceRequest_FieldTerminalPath{selector: GetDeviceRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetDeviceRequest_FieldTerminalPath{selector: GetDeviceRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetDeviceRequest_FieldTerminalPath{selector: GetDeviceRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetDeviceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetDeviceRequest))
}

func (o *GetDeviceRequest) Clone() *GetDeviceRequest {
	if o == nil {
		return nil
	}
	result := &GetDeviceRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &device.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device.Device_FieldMask)
	result.View = o.View
	return result
}

func (o *GetDeviceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetDeviceRequest) Merge(source *GetDeviceRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &device.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device.Device_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetDeviceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetDeviceRequest))
}

func (o *BatchGetDevicesRequest) GotenObjectExt() {}

func (o *BatchGetDevicesRequest) MakeFullFieldMask() *BatchGetDevicesRequest_FieldMask {
	return FullBatchGetDevicesRequest_FieldMask()
}

func (o *BatchGetDevicesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetDevicesRequest_FieldMask()
}

func (o *BatchGetDevicesRequest) MakeDiffFieldMask(other *BatchGetDevicesRequest) *BatchGetDevicesRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetDevicesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetDevicesRequest_FieldMask()
	}

	res := &BatchGetDevicesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetDevicesRequest_FieldTerminalPath{selector: BatchGetDevicesRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetDevicesRequest_FieldTerminalPath{selector: BatchGetDevicesRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDevicesRequest_FieldTerminalPath{selector: BatchGetDevicesRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetDevicesRequest_FieldTerminalPath{selector: BatchGetDevicesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetDevicesRequest_FieldTerminalPath{selector: BatchGetDevicesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetDevicesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetDevicesRequest))
}

func (o *BatchGetDevicesRequest) Clone() *BatchGetDevicesRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetDevicesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &device.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*device.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &device.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device.Device_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetDevicesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetDevicesRequest) Merge(source *BatchGetDevicesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &device.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &device.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device.Device_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetDevicesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetDevicesRequest))
}

func (o *BatchGetDevicesResponse) GotenObjectExt() {}

func (o *BatchGetDevicesResponse) MakeFullFieldMask() *BatchGetDevicesResponse_FieldMask {
	return FullBatchGetDevicesResponse_FieldMask()
}

func (o *BatchGetDevicesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetDevicesResponse_FieldMask()
}

func (o *BatchGetDevicesResponse) MakeDiffFieldMask(other *BatchGetDevicesResponse) *BatchGetDevicesResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetDevicesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetDevicesResponse_FieldMask()
	}

	res := &BatchGetDevicesResponse_FieldMask{}

	if len(o.GetDevices()) == len(other.GetDevices()) {
		for i, lValue := range o.GetDevices() {
			rValue := other.GetDevices()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetDevicesResponse_FieldTerminalPath{selector: BatchGetDevicesResponse_FieldPathSelectorDevices})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDevicesResponse_FieldTerminalPath{selector: BatchGetDevicesResponse_FieldPathSelectorDevices})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetDevicesResponse_FieldTerminalPath{selector: BatchGetDevicesResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDevicesResponse_FieldTerminalPath{selector: BatchGetDevicesResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetDevicesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetDevicesResponse))
}

func (o *BatchGetDevicesResponse) Clone() *BatchGetDevicesResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetDevicesResponse{}
	result.Devices = make([]*device.Device, len(o.Devices))
	for i, sourceValue := range o.Devices {
		result.Devices[i] = sourceValue.Clone()
	}
	result.Missing = make([]*device.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &device.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetDevicesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetDevicesResponse) Merge(source *BatchGetDevicesResponse) {
	for _, sourceValue := range source.GetDevices() {
		exists := false
		for _, currentValue := range o.Devices {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device.Device
			if sourceValue != nil {
				newDstElement = new(device.Device)
				newDstElement.Merge(sourceValue)
			}
			o.Devices = append(o.Devices, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &device.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetDevicesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetDevicesResponse))
}

func (o *ListDevicesRequest) GotenObjectExt() {}

func (o *ListDevicesRequest) MakeFullFieldMask() *ListDevicesRequest_FieldMask {
	return FullListDevicesRequest_FieldMask()
}

func (o *ListDevicesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListDevicesRequest_FieldMask()
}

func (o *ListDevicesRequest) MakeDiffFieldMask(other *ListDevicesRequest) *ListDevicesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListDevicesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListDevicesRequest_FieldMask()
	}

	res := &ListDevicesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListDevicesRequest_FieldTerminalPath{selector: ListDevicesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListDevicesRequest_FieldTerminalPath{selector: ListDevicesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListDevicesRequest_FieldTerminalPath{selector: ListDevicesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListDevicesRequest_FieldTerminalPath{selector: ListDevicesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListDevicesRequest_FieldTerminalPath{selector: ListDevicesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListDevicesRequest_FieldTerminalPath{selector: ListDevicesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListDevicesRequest_FieldTerminalPath{selector: ListDevicesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListDevicesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListDevicesRequest))
}

func (o *ListDevicesRequest) Clone() *ListDevicesRequest {
	if o == nil {
		return nil
	}
	result := &ListDevicesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &device.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &device.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &device.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &device.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device.Device_FieldMask)
	result.View = o.View
	return result
}

func (o *ListDevicesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListDevicesRequest) Merge(source *ListDevicesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &device.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &device.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &device.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &device.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device.Device_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListDevicesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListDevicesRequest))
}

func (o *ListDevicesResponse) GotenObjectExt() {}

func (o *ListDevicesResponse) MakeFullFieldMask() *ListDevicesResponse_FieldMask {
	return FullListDevicesResponse_FieldMask()
}

func (o *ListDevicesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListDevicesResponse_FieldMask()
}

func (o *ListDevicesResponse) MakeDiffFieldMask(other *ListDevicesResponse) *ListDevicesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListDevicesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListDevicesResponse_FieldMask()
	}

	res := &ListDevicesResponse_FieldMask{}

	if len(o.GetDevices()) == len(other.GetDevices()) {
		for i, lValue := range o.GetDevices() {
			rValue := other.GetDevices()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListDevicesResponse_FieldTerminalPath{selector: ListDevicesResponse_FieldPathSelectorDevices})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListDevicesResponse_FieldTerminalPath{selector: ListDevicesResponse_FieldPathSelectorDevices})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListDevicesResponse_FieldTerminalPath{selector: ListDevicesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListDevicesResponse_FieldTerminalPath{selector: ListDevicesResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListDevicesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListDevicesResponse))
}

func (o *ListDevicesResponse) Clone() *ListDevicesResponse {
	if o == nil {
		return nil
	}
	result := &ListDevicesResponse{}
	result.Devices = make([]*device.Device, len(o.Devices))
	for i, sourceValue := range o.Devices {
		result.Devices[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &device.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &device.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListDevicesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListDevicesResponse) Merge(source *ListDevicesResponse) {
	for _, sourceValue := range source.GetDevices() {
		exists := false
		for _, currentValue := range o.Devices {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device.Device
			if sourceValue != nil {
				newDstElement = new(device.Device)
				newDstElement.Merge(sourceValue)
			}
			o.Devices = append(o.Devices, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &device.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &device.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListDevicesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListDevicesResponse))
}

func (o *WatchDeviceRequest) GotenObjectExt() {}

func (o *WatchDeviceRequest) MakeFullFieldMask() *WatchDeviceRequest_FieldMask {
	return FullWatchDeviceRequest_FieldMask()
}

func (o *WatchDeviceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeviceRequest_FieldMask()
}

func (o *WatchDeviceRequest) MakeDiffFieldMask(other *WatchDeviceRequest) *WatchDeviceRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchDeviceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeviceRequest_FieldMask()
	}

	res := &WatchDeviceRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchDeviceRequest_FieldTerminalPath{selector: WatchDeviceRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchDeviceRequest_FieldTerminalPath{selector: WatchDeviceRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchDeviceRequest_FieldTerminalPath{selector: WatchDeviceRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchDeviceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeviceRequest))
}

func (o *WatchDeviceRequest) Clone() *WatchDeviceRequest {
	if o == nil {
		return nil
	}
	result := &WatchDeviceRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &device.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device.Device_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchDeviceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeviceRequest) Merge(source *WatchDeviceRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &device.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device.Device_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchDeviceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeviceRequest))
}

func (o *WatchDeviceResponse) GotenObjectExt() {}

func (o *WatchDeviceResponse) MakeFullFieldMask() *WatchDeviceResponse_FieldMask {
	return FullWatchDeviceResponse_FieldMask()
}

func (o *WatchDeviceResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeviceResponse_FieldMask()
}

func (o *WatchDeviceResponse) MakeDiffFieldMask(other *WatchDeviceResponse) *WatchDeviceResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchDeviceResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeviceResponse_FieldMask()
	}

	res := &WatchDeviceResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchDeviceResponse_FieldTerminalPath{selector: WatchDeviceResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchDeviceResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeviceResponse))
}

func (o *WatchDeviceResponse) Clone() *WatchDeviceResponse {
	if o == nil {
		return nil
	}
	result := &WatchDeviceResponse{}
	result.Change = proto.Clone(o.Change).(*device.DeviceChange)
	return result
}

func (o *WatchDeviceResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeviceResponse) Merge(source *WatchDeviceResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(device.DeviceChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchDeviceResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeviceResponse))
}

func (o *WatchDevicesRequest) GotenObjectExt() {}

func (o *WatchDevicesRequest) MakeFullFieldMask() *WatchDevicesRequest_FieldMask {
	return FullWatchDevicesRequest_FieldMask()
}

func (o *WatchDevicesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDevicesRequest_FieldMask()
}

func (o *WatchDevicesRequest) MakeDiffFieldMask(other *WatchDevicesRequest) *WatchDevicesRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchDevicesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDevicesRequest_FieldMask()
	}

	res := &WatchDevicesRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchDevicesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDevicesRequest))
}

func (o *WatchDevicesRequest) Clone() *WatchDevicesRequest {
	if o == nil {
		return nil
	}
	result := &WatchDevicesRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &device.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &device.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &device.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &device.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device.Device_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchDevicesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDevicesRequest) Merge(source *WatchDevicesRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &device.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &device.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &device.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &device.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device.Device_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchDevicesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDevicesRequest))
}

func (o *WatchDevicesResponse) GotenObjectExt() {}

func (o *WatchDevicesResponse) MakeFullFieldMask() *WatchDevicesResponse_FieldMask {
	return FullWatchDevicesResponse_FieldMask()
}

func (o *WatchDevicesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDevicesResponse_FieldMask()
}

func (o *WatchDevicesResponse) MakeDiffFieldMask(other *WatchDevicesResponse) *WatchDevicesResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchDevicesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDevicesResponse_FieldMask()
	}

	res := &WatchDevicesResponse_FieldMask{}

	if len(o.GetDeviceChanges()) == len(other.GetDeviceChanges()) {
		for i, lValue := range o.GetDeviceChanges() {
			rValue := other.GetDeviceChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorDeviceChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorDeviceChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchDevicesResponse_FieldSubPath{selector: WatchDevicesResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchDevicesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDevicesResponse))
}

func (o *WatchDevicesResponse) Clone() *WatchDevicesResponse {
	if o == nil {
		return nil
	}
	result := &WatchDevicesResponse{}
	result.DeviceChanges = make([]*device.DeviceChange, len(o.DeviceChanges))
	for i, sourceValue := range o.DeviceChanges {
		result.DeviceChanges[i] = proto.Clone(sourceValue).(*device.DeviceChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchDevicesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDevicesResponse) Merge(source *WatchDevicesResponse) {
	for _, sourceValue := range source.GetDeviceChanges() {
		exists := false
		for _, currentValue := range o.DeviceChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device.DeviceChange
			if sourceValue != nil {
				newDstElement = new(device.DeviceChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.DeviceChanges = append(o.DeviceChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchDevicesResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchDevicesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDevicesResponse))
}

func (o *WatchDevicesResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchDevicesResponse_PageTokenChange) MakeFullFieldMask() *WatchDevicesResponse_PageTokenChange_FieldMask {
	return FullWatchDevicesResponse_PageTokenChange_FieldMask()
}

func (o *WatchDevicesResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDevicesResponse_PageTokenChange_FieldMask()
}

func (o *WatchDevicesResponse_PageTokenChange) MakeDiffFieldMask(other *WatchDevicesResponse_PageTokenChange) *WatchDevicesResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchDevicesResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDevicesResponse_PageTokenChange_FieldMask()
	}

	res := &WatchDevicesResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchDevicesResponsePageTokenChange_FieldTerminalPath{selector: WatchDevicesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchDevicesResponsePageTokenChange_FieldTerminalPath{selector: WatchDevicesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchDevicesResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDevicesResponse_PageTokenChange))
}

func (o *WatchDevicesResponse_PageTokenChange) Clone() *WatchDevicesResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchDevicesResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &device.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &device.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchDevicesResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDevicesResponse_PageTokenChange) Merge(source *WatchDevicesResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &device.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &device.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchDevicesResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDevicesResponse_PageTokenChange))
}

func (o *CreateDeviceRequest) GotenObjectExt() {}

func (o *CreateDeviceRequest) MakeFullFieldMask() *CreateDeviceRequest_FieldMask {
	return FullCreateDeviceRequest_FieldMask()
}

func (o *CreateDeviceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateDeviceRequest_FieldMask()
}

func (o *CreateDeviceRequest) MakeDiffFieldMask(other *CreateDeviceRequest) *CreateDeviceRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateDeviceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateDeviceRequest_FieldMask()
	}

	res := &CreateDeviceRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateDeviceRequest_FieldTerminalPath{selector: CreateDeviceRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetDevice().MakeDiffFieldMask(other.GetDevice())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateDeviceRequest_FieldTerminalPath{selector: CreateDeviceRequest_FieldPathSelectorDevice})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateDeviceRequest_FieldSubPath{selector: CreateDeviceRequest_FieldPathSelectorDevice, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateDeviceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateDeviceRequest))
}

func (o *CreateDeviceRequest) Clone() *CreateDeviceRequest {
	if o == nil {
		return nil
	}
	result := &CreateDeviceRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &device.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Device = o.Device.Clone()
	return result
}

func (o *CreateDeviceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateDeviceRequest) Merge(source *CreateDeviceRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &device.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetDevice() != nil {
		if o.Device == nil {
			o.Device = new(device.Device)
		}
		o.Device.Merge(source.GetDevice())
	}
}

func (o *CreateDeviceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateDeviceRequest))
}

func (o *UpdateDeviceRequest) GotenObjectExt() {}

func (o *UpdateDeviceRequest) MakeFullFieldMask() *UpdateDeviceRequest_FieldMask {
	return FullUpdateDeviceRequest_FieldMask()
}

func (o *UpdateDeviceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateDeviceRequest_FieldMask()
}

func (o *UpdateDeviceRequest) MakeDiffFieldMask(other *UpdateDeviceRequest) *UpdateDeviceRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateDeviceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateDeviceRequest_FieldMask()
	}

	res := &UpdateDeviceRequest_FieldMask{}
	{
		subMask := o.GetDevice().MakeDiffFieldMask(other.GetDevice())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDeviceRequest_FieldTerminalPath{selector: UpdateDeviceRequest_FieldPathSelectorDevice})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDeviceRequest_FieldSubPath{selector: UpdateDeviceRequest_FieldPathSelectorDevice, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateDeviceRequest_FieldTerminalPath{selector: UpdateDeviceRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDeviceRequest_FieldTerminalPath{selector: UpdateDeviceRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDeviceRequest_FieldSubPath{selector: UpdateDeviceRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateDeviceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateDeviceRequest))
}

func (o *UpdateDeviceRequest) Clone() *UpdateDeviceRequest {
	if o == nil {
		return nil
	}
	result := &UpdateDeviceRequest{}
	result.Device = o.Device.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*device.Device_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateDeviceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateDeviceRequest) Merge(source *UpdateDeviceRequest) {
	if source.GetDevice() != nil {
		if o.Device == nil {
			o.Device = new(device.Device)
		}
		o.Device.Merge(source.GetDevice())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(device.Device_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateDeviceRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateDeviceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateDeviceRequest))
}

func (o *UpdateDeviceRequest_CAS) GotenObjectExt() {}

func (o *UpdateDeviceRequest_CAS) MakeFullFieldMask() *UpdateDeviceRequest_CAS_FieldMask {
	return FullUpdateDeviceRequest_CAS_FieldMask()
}

func (o *UpdateDeviceRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateDeviceRequest_CAS_FieldMask()
}

func (o *UpdateDeviceRequest_CAS) MakeDiffFieldMask(other *UpdateDeviceRequest_CAS) *UpdateDeviceRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateDeviceRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateDeviceRequest_CAS_FieldMask()
	}

	res := &UpdateDeviceRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDeviceRequestCAS_FieldTerminalPath{selector: UpdateDeviceRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDeviceRequestCAS_FieldSubPath{selector: UpdateDeviceRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateDeviceRequestCAS_FieldTerminalPath{selector: UpdateDeviceRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateDeviceRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateDeviceRequest_CAS))
}

func (o *UpdateDeviceRequest_CAS) Clone() *UpdateDeviceRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateDeviceRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*device.Device_FieldMask)
	return result
}

func (o *UpdateDeviceRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateDeviceRequest_CAS) Merge(source *UpdateDeviceRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(device.Device)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device.Device_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateDeviceRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateDeviceRequest_CAS))
}

func (o *DeleteDeviceRequest) GotenObjectExt() {}

func (o *DeleteDeviceRequest) MakeFullFieldMask() *DeleteDeviceRequest_FieldMask {
	return FullDeleteDeviceRequest_FieldMask()
}

func (o *DeleteDeviceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteDeviceRequest_FieldMask()
}

func (o *DeleteDeviceRequest) MakeDiffFieldMask(other *DeleteDeviceRequest) *DeleteDeviceRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteDeviceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteDeviceRequest_FieldMask()
	}

	res := &DeleteDeviceRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteDeviceRequest_FieldTerminalPath{selector: DeleteDeviceRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteDeviceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteDeviceRequest))
}

func (o *DeleteDeviceRequest) Clone() *DeleteDeviceRequest {
	if o == nil {
		return nil
	}
	result := &DeleteDeviceRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &device.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteDeviceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteDeviceRequest) Merge(source *DeleteDeviceRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &device.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteDeviceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteDeviceRequest))
}
