// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/device_custom.proto
// DO NOT EDIT!!!

package device_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &api.Account{}
	_ = &device.Device{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProvisionServiceAccountToDeviceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProvisionServiceAccountToDeviceRequest_FieldPathSelector
	Get(source *ProvisionServiceAccountToDeviceRequest) []interface{}
	GetSingle(source *ProvisionServiceAccountToDeviceRequest) (interface{}, bool)
	ClearValue(item *ProvisionServiceAccountToDeviceRequest)

	// Those methods build corresponding ProvisionServiceAccountToDeviceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProvisionServiceAccountToDeviceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ProvisionServiceAccountToDeviceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProvisionServiceAccountToDeviceRequest_FieldPathArrayItemValue
}

type ProvisionServiceAccountToDeviceRequest_FieldPathSelector int32

const (
	ProvisionServiceAccountToDeviceRequest_FieldPathSelectorName           ProvisionServiceAccountToDeviceRequest_FieldPathSelector = 0
	ProvisionServiceAccountToDeviceRequest_FieldPathSelectorExternalPubkey ProvisionServiceAccountToDeviceRequest_FieldPathSelector = 1
)

func (s ProvisionServiceAccountToDeviceRequest_FieldPathSelector) String() string {
	switch s {
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorName:
		return "name"
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorExternalPubkey:
		return "external_pubkey"
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceRequest: %d", s))
	}
}

func BuildProvisionServiceAccountToDeviceRequest_FieldPath(fp gotenobject.RawFieldPath) (ProvisionServiceAccountToDeviceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProvisionServiceAccountToDeviceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ProvisionServiceAccountToDeviceRequest_FieldTerminalPath{selector: ProvisionServiceAccountToDeviceRequest_FieldPathSelectorName}, nil
		case "external_pubkey", "externalPubkey", "external-pubkey":
			return &ProvisionServiceAccountToDeviceRequest_FieldTerminalPath{selector: ProvisionServiceAccountToDeviceRequest_FieldPathSelectorExternalPubkey}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProvisionServiceAccountToDeviceRequest", fp)
}

func ParseProvisionServiceAccountToDeviceRequest_FieldPath(rawField string) (ProvisionServiceAccountToDeviceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProvisionServiceAccountToDeviceRequest_FieldPath(fp)
}

func MustParseProvisionServiceAccountToDeviceRequest_FieldPath(rawField string) ProvisionServiceAccountToDeviceRequest_FieldPath {
	fp, err := ParseProvisionServiceAccountToDeviceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProvisionServiceAccountToDeviceRequest_FieldTerminalPath struct {
	selector ProvisionServiceAccountToDeviceRequest_FieldPathSelector
}

var _ ProvisionServiceAccountToDeviceRequest_FieldPath = (*ProvisionServiceAccountToDeviceRequest_FieldTerminalPath)(nil)

func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) Selector() ProvisionServiceAccountToDeviceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProvisionServiceAccountToDeviceRequest
func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) Get(source *ProvisionServiceAccountToDeviceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorExternalPubkey:
			values = append(values, source.ExternalPubkey)
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProvisionServiceAccountToDeviceRequest))
}

// GetSingle returns value pointed by specific field of from source ProvisionServiceAccountToDeviceRequest
func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) GetSingle(source *ProvisionServiceAccountToDeviceRequest) (interface{}, bool) {
	switch fp.selector {
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorExternalPubkey:
		return source.GetExternalPubkey(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceRequest: %d", fp.selector))
	}
}

func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProvisionServiceAccountToDeviceRequest))
}

// GetDefault returns a default value of the field type
func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorName:
		return (*device.Reference)(nil)
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorExternalPubkey:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceRequest: %d", fp.selector))
	}
}

func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) ClearValue(item *ProvisionServiceAccountToDeviceRequest) {
	if item != nil {
		switch fp.selector {
		case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorName:
			item.Name = nil
		case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorExternalPubkey:
			item.ExternalPubkey = ""
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceRequest: %d", fp.selector))
		}
	}
}

func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProvisionServiceAccountToDeviceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProvisionServiceAccountToDeviceRequest_FieldPathSelectorName ||
		fp.selector == ProvisionServiceAccountToDeviceRequest_FieldPathSelectorExternalPubkey
}

func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) WithIValue(value interface{}) ProvisionServiceAccountToDeviceRequest_FieldPathValue {
	switch fp.selector {
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorName:
		return &ProvisionServiceAccountToDeviceRequest_FieldTerminalPathValue{ProvisionServiceAccountToDeviceRequest_FieldTerminalPath: *fp, value: value.(*device.Reference)}
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorExternalPubkey:
		return &ProvisionServiceAccountToDeviceRequest_FieldTerminalPathValue{ProvisionServiceAccountToDeviceRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceRequest: %d", fp.selector))
	}
}

func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProvisionServiceAccountToDeviceRequest_FieldPathArrayOfValues {
	fpaov := &ProvisionServiceAccountToDeviceRequest_FieldTerminalPathArrayOfValues{ProvisionServiceAccountToDeviceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorName:
		return &ProvisionServiceAccountToDeviceRequest_FieldTerminalPathArrayOfValues{ProvisionServiceAccountToDeviceRequest_FieldTerminalPath: *fp, values: values.([]*device.Reference)}
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorExternalPubkey:
		return &ProvisionServiceAccountToDeviceRequest_FieldTerminalPathArrayOfValues{ProvisionServiceAccountToDeviceRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProvisionServiceAccountToDeviceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceRequest: %d", fp.selector))
	}
}

func (fp *ProvisionServiceAccountToDeviceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProvisionServiceAccountToDeviceRequest_FieldPathValue allows storing values for ProvisionServiceAccountToDeviceRequest fields according to their type
type ProvisionServiceAccountToDeviceRequest_FieldPathValue interface {
	ProvisionServiceAccountToDeviceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProvisionServiceAccountToDeviceRequest)
	CompareWith(*ProvisionServiceAccountToDeviceRequest) (cmp int, comparable bool)
}

func ParseProvisionServiceAccountToDeviceRequest_FieldPathValue(pathStr, valueStr string) (ProvisionServiceAccountToDeviceRequest_FieldPathValue, error) {
	fp, err := ParseProvisionServiceAccountToDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisionServiceAccountToDeviceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProvisionServiceAccountToDeviceRequest_FieldPathValue), nil
}

func MustParseProvisionServiceAccountToDeviceRequest_FieldPathValue(pathStr, valueStr string) ProvisionServiceAccountToDeviceRequest_FieldPathValue {
	fpv, err := ParseProvisionServiceAccountToDeviceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProvisionServiceAccountToDeviceRequest_FieldTerminalPathValue struct {
	ProvisionServiceAccountToDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ ProvisionServiceAccountToDeviceRequest_FieldPathValue = (*ProvisionServiceAccountToDeviceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProvisionServiceAccountToDeviceRequest' as interface{}
func (fpv *ProvisionServiceAccountToDeviceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProvisionServiceAccountToDeviceRequest_FieldTerminalPathValue) AsNameValue() (*device.Reference, bool) {
	res, ok := fpv.value.(*device.Reference)
	return res, ok
}
func (fpv *ProvisionServiceAccountToDeviceRequest_FieldTerminalPathValue) AsExternalPubkeyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ProvisionServiceAccountToDeviceRequest
func (fpv *ProvisionServiceAccountToDeviceRequest_FieldTerminalPathValue) SetTo(target **ProvisionServiceAccountToDeviceRequest) {
	if *target == nil {
		*target = new(ProvisionServiceAccountToDeviceRequest)
	}
	switch fpv.selector {
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*device.Reference)
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorExternalPubkey:
		(*target).ExternalPubkey = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *ProvisionServiceAccountToDeviceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisionServiceAccountToDeviceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProvisionServiceAccountToDeviceRequest_FieldTerminalPathValue' with the value under path in 'ProvisionServiceAccountToDeviceRequest'.
func (fpv *ProvisionServiceAccountToDeviceRequest_FieldTerminalPathValue) CompareWith(source *ProvisionServiceAccountToDeviceRequest) (int, bool) {
	switch fpv.selector {
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*device.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorExternalPubkey:
		leftValue := fpv.value.(string)
		rightValue := source.GetExternalPubkey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *ProvisionServiceAccountToDeviceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProvisionServiceAccountToDeviceRequest))
}

// ProvisionServiceAccountToDeviceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ProvisionServiceAccountToDeviceRequest according to their type
// Present only for array (repeated) types.
type ProvisionServiceAccountToDeviceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProvisionServiceAccountToDeviceRequest_FieldPath
	ContainsValue(*ProvisionServiceAccountToDeviceRequest) bool
}

// ParseProvisionServiceAccountToDeviceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProvisionServiceAccountToDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ProvisionServiceAccountToDeviceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseProvisionServiceAccountToDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisionServiceAccountToDeviceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProvisionServiceAccountToDeviceRequest_FieldPathArrayItemValue), nil
}

func MustParseProvisionServiceAccountToDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) ProvisionServiceAccountToDeviceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseProvisionServiceAccountToDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProvisionServiceAccountToDeviceRequest_FieldTerminalPathArrayItemValue struct {
	ProvisionServiceAccountToDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ ProvisionServiceAccountToDeviceRequest_FieldPathArrayItemValue = (*ProvisionServiceAccountToDeviceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProvisionServiceAccountToDeviceRequest as interface{}
func (fpaiv *ProvisionServiceAccountToDeviceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProvisionServiceAccountToDeviceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ProvisionServiceAccountToDeviceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProvisionServiceAccountToDeviceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProvisionServiceAccountToDeviceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProvisionServiceAccountToDeviceRequest'
func (fpaiv *ProvisionServiceAccountToDeviceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ProvisionServiceAccountToDeviceRequest) bool {
	slice := fpaiv.ProvisionServiceAccountToDeviceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProvisionServiceAccountToDeviceRequest_FieldPathArrayOfValues allows storing slice of values for ProvisionServiceAccountToDeviceRequest fields according to their type
type ProvisionServiceAccountToDeviceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProvisionServiceAccountToDeviceRequest_FieldPath
}

func ParseProvisionServiceAccountToDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ProvisionServiceAccountToDeviceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseProvisionServiceAccountToDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisionServiceAccountToDeviceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProvisionServiceAccountToDeviceRequest_FieldPathArrayOfValues), nil
}

func MustParseProvisionServiceAccountToDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ProvisionServiceAccountToDeviceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseProvisionServiceAccountToDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProvisionServiceAccountToDeviceRequest_FieldTerminalPathArrayOfValues struct {
	ProvisionServiceAccountToDeviceRequest_FieldTerminalPath
	values interface{}
}

var _ ProvisionServiceAccountToDeviceRequest_FieldPathArrayOfValues = (*ProvisionServiceAccountToDeviceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProvisionServiceAccountToDeviceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*device.Reference) {
			values = append(values, v)
		}
	case ProvisionServiceAccountToDeviceRequest_FieldPathSelectorExternalPubkey:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProvisionServiceAccountToDeviceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*device.Reference, bool) {
	res, ok := fpaov.values.([]*device.Reference)
	return res, ok
}
func (fpaov *ProvisionServiceAccountToDeviceRequest_FieldTerminalPathArrayOfValues) AsExternalPubkeyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProvisionServiceAccountToDeviceResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProvisionServiceAccountToDeviceResponse_FieldPathSelector
	Get(source *ProvisionServiceAccountToDeviceResponse) []interface{}
	GetSingle(source *ProvisionServiceAccountToDeviceResponse) (interface{}, bool)
	ClearValue(item *ProvisionServiceAccountToDeviceResponse)

	// Those methods build corresponding ProvisionServiceAccountToDeviceResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProvisionServiceAccountToDeviceResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ProvisionServiceAccountToDeviceResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProvisionServiceAccountToDeviceResponse_FieldPathArrayItemValue
}

type ProvisionServiceAccountToDeviceResponse_FieldPathSelector int32

const (
	ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount ProvisionServiceAccountToDeviceResponse_FieldPathSelector = 0
)

func (s ProvisionServiceAccountToDeviceResponse_FieldPathSelector) String() string {
	switch s {
	case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
		return "service_account"
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", s))
	}
}

func BuildProvisionServiceAccountToDeviceResponse_FieldPath(fp gotenobject.RawFieldPath) (ProvisionServiceAccountToDeviceResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProvisionServiceAccountToDeviceResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "service_account", "serviceAccount", "service-account":
			return &ProvisionServiceAccountToDeviceResponse_FieldTerminalPath{selector: ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount}, nil
		}
	} else {
		switch fp[0] {
		case "service_account", "serviceAccount", "service-account":
			if subpath, err := api.BuildServiceAccount_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProvisionServiceAccountToDeviceResponse_FieldSubPath{selector: ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProvisionServiceAccountToDeviceResponse", fp)
}

func ParseProvisionServiceAccountToDeviceResponse_FieldPath(rawField string) (ProvisionServiceAccountToDeviceResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProvisionServiceAccountToDeviceResponse_FieldPath(fp)
}

func MustParseProvisionServiceAccountToDeviceResponse_FieldPath(rawField string) ProvisionServiceAccountToDeviceResponse_FieldPath {
	fp, err := ParseProvisionServiceAccountToDeviceResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProvisionServiceAccountToDeviceResponse_FieldTerminalPath struct {
	selector ProvisionServiceAccountToDeviceResponse_FieldPathSelector
}

var _ ProvisionServiceAccountToDeviceResponse_FieldPath = (*ProvisionServiceAccountToDeviceResponse_FieldTerminalPath)(nil)

func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) Selector() ProvisionServiceAccountToDeviceResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProvisionServiceAccountToDeviceResponse
func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) Get(source *ProvisionServiceAccountToDeviceResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
			if source.ServiceAccount != nil {
				values = append(values, source.ServiceAccount)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProvisionServiceAccountToDeviceResponse))
}

// GetSingle returns value pointed by specific field of from source ProvisionServiceAccountToDeviceResponse
func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) GetSingle(source *ProvisionServiceAccountToDeviceResponse) (interface{}, bool) {
	switch fp.selector {
	case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
		res := source.GetServiceAccount()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fp.selector))
	}
}

func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProvisionServiceAccountToDeviceResponse))
}

// GetDefault returns a default value of the field type
func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
		return (*api.ServiceAccount)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fp.selector))
	}
}

func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) ClearValue(item *ProvisionServiceAccountToDeviceResponse) {
	if item != nil {
		switch fp.selector {
		case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
			item.ServiceAccount = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fp.selector))
		}
	}
}

func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProvisionServiceAccountToDeviceResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) WithIValue(value interface{}) ProvisionServiceAccountToDeviceResponse_FieldPathValue {
	switch fp.selector {
	case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
		return &ProvisionServiceAccountToDeviceResponse_FieldTerminalPathValue{ProvisionServiceAccountToDeviceResponse_FieldTerminalPath: *fp, value: value.(*api.ServiceAccount)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fp.selector))
	}
}

func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProvisionServiceAccountToDeviceResponse_FieldPathArrayOfValues {
	fpaov := &ProvisionServiceAccountToDeviceResponse_FieldTerminalPathArrayOfValues{ProvisionServiceAccountToDeviceResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
		return &ProvisionServiceAccountToDeviceResponse_FieldTerminalPathArrayOfValues{ProvisionServiceAccountToDeviceResponse_FieldTerminalPath: *fp, values: values.([]*api.ServiceAccount)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProvisionServiceAccountToDeviceResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fp.selector))
	}
}

func (fp *ProvisionServiceAccountToDeviceResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProvisionServiceAccountToDeviceResponse_FieldSubPath struct {
	selector ProvisionServiceAccountToDeviceResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProvisionServiceAccountToDeviceResponse_FieldPath = (*ProvisionServiceAccountToDeviceResponse_FieldSubPath)(nil)

func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) Selector() ProvisionServiceAccountToDeviceResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) AsServiceAccountSubPath() (api.ServiceAccount_FieldPath, bool) {
	res, ok := fps.subPath.(api.ServiceAccount_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProvisionServiceAccountToDeviceResponse
func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) Get(source *ProvisionServiceAccountToDeviceResponse) (values []interface{}) {
	if asServiceAccountFieldPath, ok := fps.AsServiceAccountSubPath(); ok {
		values = append(values, asServiceAccountFieldPath.Get(source.GetServiceAccount())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fps.selector))
	}
	return
}

func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProvisionServiceAccountToDeviceResponse))
}

// GetSingle returns value of selected field from source ProvisionServiceAccountToDeviceResponse
func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) GetSingle(source *ProvisionServiceAccountToDeviceResponse) (interface{}, bool) {
	switch fps.selector {
	case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
		if source.GetServiceAccount() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetServiceAccount())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fps.selector))
	}
}

func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProvisionServiceAccountToDeviceResponse))
}

// GetDefault returns a default value of the field type
func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) ClearValue(item *ProvisionServiceAccountToDeviceResponse) {
	if item != nil {
		switch fps.selector {
		case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
			fps.subPath.ClearValueRaw(item.ServiceAccount)
		default:
			panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fps.selector))
		}
	}
}

func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProvisionServiceAccountToDeviceResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProvisionServiceAccountToDeviceResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) WithIValue(value interface{}) ProvisionServiceAccountToDeviceResponse_FieldPathValue {
	return &ProvisionServiceAccountToDeviceResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ProvisionServiceAccountToDeviceResponse_FieldPathArrayOfValues {
	return &ProvisionServiceAccountToDeviceResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ProvisionServiceAccountToDeviceResponse_FieldPathArrayItemValue {
	return &ProvisionServiceAccountToDeviceResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProvisionServiceAccountToDeviceResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProvisionServiceAccountToDeviceResponse_FieldPathValue allows storing values for ProvisionServiceAccountToDeviceResponse fields according to their type
type ProvisionServiceAccountToDeviceResponse_FieldPathValue interface {
	ProvisionServiceAccountToDeviceResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProvisionServiceAccountToDeviceResponse)
	CompareWith(*ProvisionServiceAccountToDeviceResponse) (cmp int, comparable bool)
}

func ParseProvisionServiceAccountToDeviceResponse_FieldPathValue(pathStr, valueStr string) (ProvisionServiceAccountToDeviceResponse_FieldPathValue, error) {
	fp, err := ParseProvisionServiceAccountToDeviceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisionServiceAccountToDeviceResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProvisionServiceAccountToDeviceResponse_FieldPathValue), nil
}

func MustParseProvisionServiceAccountToDeviceResponse_FieldPathValue(pathStr, valueStr string) ProvisionServiceAccountToDeviceResponse_FieldPathValue {
	fpv, err := ParseProvisionServiceAccountToDeviceResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProvisionServiceAccountToDeviceResponse_FieldTerminalPathValue struct {
	ProvisionServiceAccountToDeviceResponse_FieldTerminalPath
	value interface{}
}

var _ ProvisionServiceAccountToDeviceResponse_FieldPathValue = (*ProvisionServiceAccountToDeviceResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProvisionServiceAccountToDeviceResponse' as interface{}
func (fpv *ProvisionServiceAccountToDeviceResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProvisionServiceAccountToDeviceResponse_FieldTerminalPathValue) AsServiceAccountValue() (*api.ServiceAccount, bool) {
	res, ok := fpv.value.(*api.ServiceAccount)
	return res, ok
}

// SetTo stores value for selected field for object ProvisionServiceAccountToDeviceResponse
func (fpv *ProvisionServiceAccountToDeviceResponse_FieldTerminalPathValue) SetTo(target **ProvisionServiceAccountToDeviceResponse) {
	if *target == nil {
		*target = new(ProvisionServiceAccountToDeviceResponse)
	}
	switch fpv.selector {
	case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
		(*target).ServiceAccount = fpv.value.(*api.ServiceAccount)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fpv.selector))
	}
}

func (fpv *ProvisionServiceAccountToDeviceResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisionServiceAccountToDeviceResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProvisionServiceAccountToDeviceResponse_FieldTerminalPathValue' with the value under path in 'ProvisionServiceAccountToDeviceResponse'.
func (fpv *ProvisionServiceAccountToDeviceResponse_FieldTerminalPathValue) CompareWith(source *ProvisionServiceAccountToDeviceResponse) (int, bool) {
	switch fpv.selector {
	case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fpv.selector))
	}
}

func (fpv *ProvisionServiceAccountToDeviceResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProvisionServiceAccountToDeviceResponse))
}

type ProvisionServiceAccountToDeviceResponse_FieldSubPathValue struct {
	ProvisionServiceAccountToDeviceResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProvisionServiceAccountToDeviceResponse_FieldPathValue = (*ProvisionServiceAccountToDeviceResponse_FieldSubPathValue)(nil)

func (fpvs *ProvisionServiceAccountToDeviceResponse_FieldSubPathValue) AsServiceAccountPathValue() (api.ServiceAccount_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(api.ServiceAccount_FieldPathValue)
	return res, ok
}

func (fpvs *ProvisionServiceAccountToDeviceResponse_FieldSubPathValue) SetTo(target **ProvisionServiceAccountToDeviceResponse) {
	if *target == nil {
		*target = new(ProvisionServiceAccountToDeviceResponse)
	}
	switch fpvs.Selector() {
	case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
		fpvs.subPathValue.(api.ServiceAccount_FieldPathValue).SetTo(&(*target).ServiceAccount)
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ProvisionServiceAccountToDeviceResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProvisionServiceAccountToDeviceResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProvisionServiceAccountToDeviceResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProvisionServiceAccountToDeviceResponse_FieldSubPathValue) CompareWith(source *ProvisionServiceAccountToDeviceResponse) (int, bool) {
	switch fpvs.Selector() {
	case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
		return fpvs.subPathValue.(api.ServiceAccount_FieldPathValue).CompareWith(source.GetServiceAccount())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ProvisionServiceAccountToDeviceResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProvisionServiceAccountToDeviceResponse))
}

// ProvisionServiceAccountToDeviceResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ProvisionServiceAccountToDeviceResponse according to their type
// Present only for array (repeated) types.
type ProvisionServiceAccountToDeviceResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProvisionServiceAccountToDeviceResponse_FieldPath
	ContainsValue(*ProvisionServiceAccountToDeviceResponse) bool
}

// ParseProvisionServiceAccountToDeviceResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProvisionServiceAccountToDeviceResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ProvisionServiceAccountToDeviceResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseProvisionServiceAccountToDeviceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisionServiceAccountToDeviceResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProvisionServiceAccountToDeviceResponse_FieldPathArrayItemValue), nil
}

func MustParseProvisionServiceAccountToDeviceResponse_FieldPathArrayItemValue(pathStr, valueStr string) ProvisionServiceAccountToDeviceResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseProvisionServiceAccountToDeviceResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProvisionServiceAccountToDeviceResponse_FieldTerminalPathArrayItemValue struct {
	ProvisionServiceAccountToDeviceResponse_FieldTerminalPath
	value interface{}
}

var _ ProvisionServiceAccountToDeviceResponse_FieldPathArrayItemValue = (*ProvisionServiceAccountToDeviceResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProvisionServiceAccountToDeviceResponse as interface{}
func (fpaiv *ProvisionServiceAccountToDeviceResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProvisionServiceAccountToDeviceResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ProvisionServiceAccountToDeviceResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProvisionServiceAccountToDeviceResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProvisionServiceAccountToDeviceResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProvisionServiceAccountToDeviceResponse'
func (fpaiv *ProvisionServiceAccountToDeviceResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ProvisionServiceAccountToDeviceResponse) bool {
	slice := fpaiv.ProvisionServiceAccountToDeviceResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProvisionServiceAccountToDeviceResponse_FieldSubPathArrayItemValue struct {
	ProvisionServiceAccountToDeviceResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProvisionServiceAccountToDeviceResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProvisionServiceAccountToDeviceResponse_FieldSubPathArrayItemValue) AsServiceAccountPathItemValue() (api.ServiceAccount_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(api.ServiceAccount_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProvisionServiceAccountToDeviceResponse'
func (fpaivs *ProvisionServiceAccountToDeviceResponse_FieldSubPathArrayItemValue) ContainsValue(source *ProvisionServiceAccountToDeviceResponse) bool {
	switch fpaivs.Selector() {
	case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
		return fpaivs.subPathItemValue.(api.ServiceAccount_FieldPathArrayItemValue).ContainsValue(source.GetServiceAccount())
	default:
		panic(fmt.Sprintf("Invalid selector for ProvisionServiceAccountToDeviceResponse: %d", fpaivs.Selector()))
	}
}

// ProvisionServiceAccountToDeviceResponse_FieldPathArrayOfValues allows storing slice of values for ProvisionServiceAccountToDeviceResponse fields according to their type
type ProvisionServiceAccountToDeviceResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProvisionServiceAccountToDeviceResponse_FieldPath
}

func ParseProvisionServiceAccountToDeviceResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ProvisionServiceAccountToDeviceResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseProvisionServiceAccountToDeviceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProvisionServiceAccountToDeviceResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProvisionServiceAccountToDeviceResponse_FieldPathArrayOfValues), nil
}

func MustParseProvisionServiceAccountToDeviceResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ProvisionServiceAccountToDeviceResponse_FieldPathArrayOfValues {
	fpaov, err := ParseProvisionServiceAccountToDeviceResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProvisionServiceAccountToDeviceResponse_FieldTerminalPathArrayOfValues struct {
	ProvisionServiceAccountToDeviceResponse_FieldTerminalPath
	values interface{}
}

var _ ProvisionServiceAccountToDeviceResponse_FieldPathArrayOfValues = (*ProvisionServiceAccountToDeviceResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProvisionServiceAccountToDeviceResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProvisionServiceAccountToDeviceResponse_FieldPathSelectorServiceAccount:
		for _, v := range fpaov.values.([]*api.ServiceAccount) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProvisionServiceAccountToDeviceResponse_FieldTerminalPathArrayOfValues) AsServiceAccountArrayOfValues() ([]*api.ServiceAccount, bool) {
	res, ok := fpaov.values.([]*api.ServiceAccount)
	return res, ok
}

type ProvisionServiceAccountToDeviceResponse_FieldSubPathArrayOfValues struct {
	ProvisionServiceAccountToDeviceResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProvisionServiceAccountToDeviceResponse_FieldPathArrayOfValues = (*ProvisionServiceAccountToDeviceResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProvisionServiceAccountToDeviceResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProvisionServiceAccountToDeviceResponse_FieldSubPathArrayOfValues) AsServiceAccountPathArrayOfValues() (api.ServiceAccount_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(api.ServiceAccount_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RemoveServiceAccountFromDeviceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() RemoveServiceAccountFromDeviceRequest_FieldPathSelector
	Get(source *RemoveServiceAccountFromDeviceRequest) []interface{}
	GetSingle(source *RemoveServiceAccountFromDeviceRequest) (interface{}, bool)
	ClearValue(item *RemoveServiceAccountFromDeviceRequest)

	// Those methods build corresponding RemoveServiceAccountFromDeviceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RemoveServiceAccountFromDeviceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) RemoveServiceAccountFromDeviceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RemoveServiceAccountFromDeviceRequest_FieldPathArrayItemValue
}

type RemoveServiceAccountFromDeviceRequest_FieldPathSelector int32

const (
	RemoveServiceAccountFromDeviceRequest_FieldPathSelectorName RemoveServiceAccountFromDeviceRequest_FieldPathSelector = 0
)

func (s RemoveServiceAccountFromDeviceRequest_FieldPathSelector) String() string {
	switch s {
	case RemoveServiceAccountFromDeviceRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceRequest: %d", s))
	}
}

func BuildRemoveServiceAccountFromDeviceRequest_FieldPath(fp gotenobject.RawFieldPath) (RemoveServiceAccountFromDeviceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RemoveServiceAccountFromDeviceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &RemoveServiceAccountFromDeviceRequest_FieldTerminalPath{selector: RemoveServiceAccountFromDeviceRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RemoveServiceAccountFromDeviceRequest", fp)
}

func ParseRemoveServiceAccountFromDeviceRequest_FieldPath(rawField string) (RemoveServiceAccountFromDeviceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRemoveServiceAccountFromDeviceRequest_FieldPath(fp)
}

func MustParseRemoveServiceAccountFromDeviceRequest_FieldPath(rawField string) RemoveServiceAccountFromDeviceRequest_FieldPath {
	fp, err := ParseRemoveServiceAccountFromDeviceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RemoveServiceAccountFromDeviceRequest_FieldTerminalPath struct {
	selector RemoveServiceAccountFromDeviceRequest_FieldPathSelector
}

var _ RemoveServiceAccountFromDeviceRequest_FieldPath = (*RemoveServiceAccountFromDeviceRequest_FieldTerminalPath)(nil)

func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) Selector() RemoveServiceAccountFromDeviceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RemoveServiceAccountFromDeviceRequest
func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) Get(source *RemoveServiceAccountFromDeviceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RemoveServiceAccountFromDeviceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RemoveServiceAccountFromDeviceRequest))
}

// GetSingle returns value pointed by specific field of from source RemoveServiceAccountFromDeviceRequest
func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) GetSingle(source *RemoveServiceAccountFromDeviceRequest) (interface{}, bool) {
	switch fp.selector {
	case RemoveServiceAccountFromDeviceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceRequest: %d", fp.selector))
	}
}

func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RemoveServiceAccountFromDeviceRequest))
}

// GetDefault returns a default value of the field type
func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RemoveServiceAccountFromDeviceRequest_FieldPathSelectorName:
		return (*device.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceRequest: %d", fp.selector))
	}
}

func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) ClearValue(item *RemoveServiceAccountFromDeviceRequest) {
	if item != nil {
		switch fp.selector {
		case RemoveServiceAccountFromDeviceRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceRequest: %d", fp.selector))
		}
	}
}

func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RemoveServiceAccountFromDeviceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RemoveServiceAccountFromDeviceRequest_FieldPathSelectorName
}

func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) WithIValue(value interface{}) RemoveServiceAccountFromDeviceRequest_FieldPathValue {
	switch fp.selector {
	case RemoveServiceAccountFromDeviceRequest_FieldPathSelectorName:
		return &RemoveServiceAccountFromDeviceRequest_FieldTerminalPathValue{RemoveServiceAccountFromDeviceRequest_FieldTerminalPath: *fp, value: value.(*device.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceRequest: %d", fp.selector))
	}
}

func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) RemoveServiceAccountFromDeviceRequest_FieldPathArrayOfValues {
	fpaov := &RemoveServiceAccountFromDeviceRequest_FieldTerminalPathArrayOfValues{RemoveServiceAccountFromDeviceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case RemoveServiceAccountFromDeviceRequest_FieldPathSelectorName:
		return &RemoveServiceAccountFromDeviceRequest_FieldTerminalPathArrayOfValues{RemoveServiceAccountFromDeviceRequest_FieldTerminalPath: *fp, values: values.([]*device.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) RemoveServiceAccountFromDeviceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceRequest: %d", fp.selector))
	}
}

func (fp *RemoveServiceAccountFromDeviceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RemoveServiceAccountFromDeviceRequest_FieldPathValue allows storing values for RemoveServiceAccountFromDeviceRequest fields according to their type
type RemoveServiceAccountFromDeviceRequest_FieldPathValue interface {
	RemoveServiceAccountFromDeviceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RemoveServiceAccountFromDeviceRequest)
	CompareWith(*RemoveServiceAccountFromDeviceRequest) (cmp int, comparable bool)
}

func ParseRemoveServiceAccountFromDeviceRequest_FieldPathValue(pathStr, valueStr string) (RemoveServiceAccountFromDeviceRequest_FieldPathValue, error) {
	fp, err := ParseRemoveServiceAccountFromDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RemoveServiceAccountFromDeviceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(RemoveServiceAccountFromDeviceRequest_FieldPathValue), nil
}

func MustParseRemoveServiceAccountFromDeviceRequest_FieldPathValue(pathStr, valueStr string) RemoveServiceAccountFromDeviceRequest_FieldPathValue {
	fpv, err := ParseRemoveServiceAccountFromDeviceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RemoveServiceAccountFromDeviceRequest_FieldTerminalPathValue struct {
	RemoveServiceAccountFromDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ RemoveServiceAccountFromDeviceRequest_FieldPathValue = (*RemoveServiceAccountFromDeviceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RemoveServiceAccountFromDeviceRequest' as interface{}
func (fpv *RemoveServiceAccountFromDeviceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RemoveServiceAccountFromDeviceRequest_FieldTerminalPathValue) AsNameValue() (*device.Reference, bool) {
	res, ok := fpv.value.(*device.Reference)
	return res, ok
}

// SetTo stores value for selected field for object RemoveServiceAccountFromDeviceRequest
func (fpv *RemoveServiceAccountFromDeviceRequest_FieldTerminalPathValue) SetTo(target **RemoveServiceAccountFromDeviceRequest) {
	if *target == nil {
		*target = new(RemoveServiceAccountFromDeviceRequest)
	}
	switch fpv.selector {
	case RemoveServiceAccountFromDeviceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*device.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *RemoveServiceAccountFromDeviceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RemoveServiceAccountFromDeviceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RemoveServiceAccountFromDeviceRequest_FieldTerminalPathValue' with the value under path in 'RemoveServiceAccountFromDeviceRequest'.
func (fpv *RemoveServiceAccountFromDeviceRequest_FieldTerminalPathValue) CompareWith(source *RemoveServiceAccountFromDeviceRequest) (int, bool) {
	switch fpv.selector {
	case RemoveServiceAccountFromDeviceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*device.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *RemoveServiceAccountFromDeviceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RemoveServiceAccountFromDeviceRequest))
}

// RemoveServiceAccountFromDeviceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for RemoveServiceAccountFromDeviceRequest according to their type
// Present only for array (repeated) types.
type RemoveServiceAccountFromDeviceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RemoveServiceAccountFromDeviceRequest_FieldPath
	ContainsValue(*RemoveServiceAccountFromDeviceRequest) bool
}

// ParseRemoveServiceAccountFromDeviceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRemoveServiceAccountFromDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (RemoveServiceAccountFromDeviceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseRemoveServiceAccountFromDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RemoveServiceAccountFromDeviceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RemoveServiceAccountFromDeviceRequest_FieldPathArrayItemValue), nil
}

func MustParseRemoveServiceAccountFromDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) RemoveServiceAccountFromDeviceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseRemoveServiceAccountFromDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RemoveServiceAccountFromDeviceRequest_FieldTerminalPathArrayItemValue struct {
	RemoveServiceAccountFromDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ RemoveServiceAccountFromDeviceRequest_FieldPathArrayItemValue = (*RemoveServiceAccountFromDeviceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RemoveServiceAccountFromDeviceRequest as interface{}
func (fpaiv *RemoveServiceAccountFromDeviceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RemoveServiceAccountFromDeviceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *RemoveServiceAccountFromDeviceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RemoveServiceAccountFromDeviceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RemoveServiceAccountFromDeviceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RemoveServiceAccountFromDeviceRequest'
func (fpaiv *RemoveServiceAccountFromDeviceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *RemoveServiceAccountFromDeviceRequest) bool {
	slice := fpaiv.RemoveServiceAccountFromDeviceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RemoveServiceAccountFromDeviceRequest_FieldPathArrayOfValues allows storing slice of values for RemoveServiceAccountFromDeviceRequest fields according to their type
type RemoveServiceAccountFromDeviceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RemoveServiceAccountFromDeviceRequest_FieldPath
}

func ParseRemoveServiceAccountFromDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (RemoveServiceAccountFromDeviceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseRemoveServiceAccountFromDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RemoveServiceAccountFromDeviceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RemoveServiceAccountFromDeviceRequest_FieldPathArrayOfValues), nil
}

func MustParseRemoveServiceAccountFromDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) RemoveServiceAccountFromDeviceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseRemoveServiceAccountFromDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RemoveServiceAccountFromDeviceRequest_FieldTerminalPathArrayOfValues struct {
	RemoveServiceAccountFromDeviceRequest_FieldTerminalPath
	values interface{}
}

var _ RemoveServiceAccountFromDeviceRequest_FieldPathArrayOfValues = (*RemoveServiceAccountFromDeviceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RemoveServiceAccountFromDeviceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RemoveServiceAccountFromDeviceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*device.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RemoveServiceAccountFromDeviceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*device.Reference, bool) {
	res, ok := fpaov.values.([]*device.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RemoveServiceAccountFromDeviceResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() RemoveServiceAccountFromDeviceResponse_FieldPathSelector
	Get(source *RemoveServiceAccountFromDeviceResponse) []interface{}
	GetSingle(source *RemoveServiceAccountFromDeviceResponse) (interface{}, bool)
	ClearValue(item *RemoveServiceAccountFromDeviceResponse)

	// Those methods build corresponding RemoveServiceAccountFromDeviceResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RemoveServiceAccountFromDeviceResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) RemoveServiceAccountFromDeviceResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RemoveServiceAccountFromDeviceResponse_FieldPathArrayItemValue
}

type RemoveServiceAccountFromDeviceResponse_FieldPathSelector int32

func (s RemoveServiceAccountFromDeviceResponse_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceResponse: %d", s))
	}
}

func BuildRemoveServiceAccountFromDeviceResponse_FieldPath(fp gotenobject.RawFieldPath) (RemoveServiceAccountFromDeviceResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RemoveServiceAccountFromDeviceResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RemoveServiceAccountFromDeviceResponse", fp)
}

func ParseRemoveServiceAccountFromDeviceResponse_FieldPath(rawField string) (RemoveServiceAccountFromDeviceResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRemoveServiceAccountFromDeviceResponse_FieldPath(fp)
}

func MustParseRemoveServiceAccountFromDeviceResponse_FieldPath(rawField string) RemoveServiceAccountFromDeviceResponse_FieldPath {
	fp, err := ParseRemoveServiceAccountFromDeviceResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RemoveServiceAccountFromDeviceResponse_FieldTerminalPath struct {
	selector RemoveServiceAccountFromDeviceResponse_FieldPathSelector
}

var _ RemoveServiceAccountFromDeviceResponse_FieldPath = (*RemoveServiceAccountFromDeviceResponse_FieldTerminalPath)(nil)

func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) Selector() RemoveServiceAccountFromDeviceResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RemoveServiceAccountFromDeviceResponse
func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) Get(source *RemoveServiceAccountFromDeviceResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RemoveServiceAccountFromDeviceResponse))
}

// GetSingle returns value pointed by specific field of from source RemoveServiceAccountFromDeviceResponse
func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) GetSingle(source *RemoveServiceAccountFromDeviceResponse) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceResponse: %d", fp.selector))
	}
}

func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RemoveServiceAccountFromDeviceResponse))
}

// GetDefault returns a default value of the field type
func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceResponse: %d", fp.selector))
	}
}

func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) ClearValue(item *RemoveServiceAccountFromDeviceResponse) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceResponse: %d", fp.selector))
		}
	}
}

func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RemoveServiceAccountFromDeviceResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) WithIValue(value interface{}) RemoveServiceAccountFromDeviceResponse_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceResponse: %d", fp.selector))
	}
}

func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) RemoveServiceAccountFromDeviceResponse_FieldPathArrayOfValues {
	fpaov := &RemoveServiceAccountFromDeviceResponse_FieldTerminalPathArrayOfValues{RemoveServiceAccountFromDeviceResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) RemoveServiceAccountFromDeviceResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceResponse: %d", fp.selector))
	}
}

func (fp *RemoveServiceAccountFromDeviceResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RemoveServiceAccountFromDeviceResponse_FieldPathValue allows storing values for RemoveServiceAccountFromDeviceResponse fields according to their type
type RemoveServiceAccountFromDeviceResponse_FieldPathValue interface {
	RemoveServiceAccountFromDeviceResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RemoveServiceAccountFromDeviceResponse)
	CompareWith(*RemoveServiceAccountFromDeviceResponse) (cmp int, comparable bool)
}

func ParseRemoveServiceAccountFromDeviceResponse_FieldPathValue(pathStr, valueStr string) (RemoveServiceAccountFromDeviceResponse_FieldPathValue, error) {
	fp, err := ParseRemoveServiceAccountFromDeviceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RemoveServiceAccountFromDeviceResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(RemoveServiceAccountFromDeviceResponse_FieldPathValue), nil
}

func MustParseRemoveServiceAccountFromDeviceResponse_FieldPathValue(pathStr, valueStr string) RemoveServiceAccountFromDeviceResponse_FieldPathValue {
	fpv, err := ParseRemoveServiceAccountFromDeviceResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RemoveServiceAccountFromDeviceResponse_FieldTerminalPathValue struct {
	RemoveServiceAccountFromDeviceResponse_FieldTerminalPath
	value interface{}
}

var _ RemoveServiceAccountFromDeviceResponse_FieldPathValue = (*RemoveServiceAccountFromDeviceResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RemoveServiceAccountFromDeviceResponse' as interface{}
func (fpv *RemoveServiceAccountFromDeviceResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object RemoveServiceAccountFromDeviceResponse
func (fpv *RemoveServiceAccountFromDeviceResponse_FieldTerminalPathValue) SetTo(target **RemoveServiceAccountFromDeviceResponse) {
	if *target == nil {
		*target = new(RemoveServiceAccountFromDeviceResponse)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceResponse: %d", fpv.selector))
	}
}

func (fpv *RemoveServiceAccountFromDeviceResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RemoveServiceAccountFromDeviceResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RemoveServiceAccountFromDeviceResponse_FieldTerminalPathValue' with the value under path in 'RemoveServiceAccountFromDeviceResponse'.
func (fpv *RemoveServiceAccountFromDeviceResponse_FieldTerminalPathValue) CompareWith(source *RemoveServiceAccountFromDeviceResponse) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RemoveServiceAccountFromDeviceResponse: %d", fpv.selector))
	}
}

func (fpv *RemoveServiceAccountFromDeviceResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RemoveServiceAccountFromDeviceResponse))
}

// RemoveServiceAccountFromDeviceResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for RemoveServiceAccountFromDeviceResponse according to their type
// Present only for array (repeated) types.
type RemoveServiceAccountFromDeviceResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RemoveServiceAccountFromDeviceResponse_FieldPath
	ContainsValue(*RemoveServiceAccountFromDeviceResponse) bool
}

// ParseRemoveServiceAccountFromDeviceResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRemoveServiceAccountFromDeviceResponse_FieldPathArrayItemValue(pathStr, valueStr string) (RemoveServiceAccountFromDeviceResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseRemoveServiceAccountFromDeviceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RemoveServiceAccountFromDeviceResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RemoveServiceAccountFromDeviceResponse_FieldPathArrayItemValue), nil
}

func MustParseRemoveServiceAccountFromDeviceResponse_FieldPathArrayItemValue(pathStr, valueStr string) RemoveServiceAccountFromDeviceResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseRemoveServiceAccountFromDeviceResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RemoveServiceAccountFromDeviceResponse_FieldTerminalPathArrayItemValue struct {
	RemoveServiceAccountFromDeviceResponse_FieldTerminalPath
	value interface{}
}

var _ RemoveServiceAccountFromDeviceResponse_FieldPathArrayItemValue = (*RemoveServiceAccountFromDeviceResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RemoveServiceAccountFromDeviceResponse as interface{}
func (fpaiv *RemoveServiceAccountFromDeviceResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RemoveServiceAccountFromDeviceResponse_FieldTerminalPathArrayItemValue) GetSingle(source *RemoveServiceAccountFromDeviceResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RemoveServiceAccountFromDeviceResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RemoveServiceAccountFromDeviceResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RemoveServiceAccountFromDeviceResponse'
func (fpaiv *RemoveServiceAccountFromDeviceResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *RemoveServiceAccountFromDeviceResponse) bool {
	slice := fpaiv.RemoveServiceAccountFromDeviceResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RemoveServiceAccountFromDeviceResponse_FieldPathArrayOfValues allows storing slice of values for RemoveServiceAccountFromDeviceResponse fields according to their type
type RemoveServiceAccountFromDeviceResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RemoveServiceAccountFromDeviceResponse_FieldPath
}

func ParseRemoveServiceAccountFromDeviceResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (RemoveServiceAccountFromDeviceResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseRemoveServiceAccountFromDeviceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RemoveServiceAccountFromDeviceResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RemoveServiceAccountFromDeviceResponse_FieldPathArrayOfValues), nil
}

func MustParseRemoveServiceAccountFromDeviceResponse_FieldPathArrayOfValues(pathStr, valuesStr string) RemoveServiceAccountFromDeviceResponse_FieldPathArrayOfValues {
	fpaov, err := ParseRemoveServiceAccountFromDeviceResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RemoveServiceAccountFromDeviceResponse_FieldTerminalPathArrayOfValues struct {
	RemoveServiceAccountFromDeviceResponse_FieldTerminalPath
	values interface{}
}

var _ RemoveServiceAccountFromDeviceResponse_FieldPathArrayOfValues = (*RemoveServiceAccountFromDeviceResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RemoveServiceAccountFromDeviceResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}
