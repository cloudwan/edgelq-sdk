// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/device_service.proto
// DO NOT EDIT!!!

package device_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetDeviceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetDeviceRequest_FieldPathSelector
	Get(source *GetDeviceRequest) []interface{}
	GetSingle(source *GetDeviceRequest) (interface{}, bool)
	ClearValue(item *GetDeviceRequest)

	// Those methods build corresponding GetDeviceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetDeviceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetDeviceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetDeviceRequest_FieldPathArrayItemValue
}

type GetDeviceRequest_FieldPathSelector int32

const (
	GetDeviceRequest_FieldPathSelectorName      GetDeviceRequest_FieldPathSelector = 0
	GetDeviceRequest_FieldPathSelectorFieldMask GetDeviceRequest_FieldPathSelector = 1
	GetDeviceRequest_FieldPathSelectorView      GetDeviceRequest_FieldPathSelector = 2
)

func (s GetDeviceRequest_FieldPathSelector) String() string {
	switch s {
	case GetDeviceRequest_FieldPathSelectorName:
		return "name"
	case GetDeviceRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetDeviceRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceRequest: %d", s))
	}
}

func BuildGetDeviceRequest_FieldPath(fp gotenobject.RawFieldPath) (GetDeviceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetDeviceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetDeviceRequest_FieldTerminalPath{selector: GetDeviceRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetDeviceRequest_FieldTerminalPath{selector: GetDeviceRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetDeviceRequest_FieldTerminalPath{selector: GetDeviceRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetDeviceRequest", fp)
}

func ParseGetDeviceRequest_FieldPath(rawField string) (GetDeviceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetDeviceRequest_FieldPath(fp)
}

func MustParseGetDeviceRequest_FieldPath(rawField string) GetDeviceRequest_FieldPath {
	fp, err := ParseGetDeviceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetDeviceRequest_FieldTerminalPath struct {
	selector GetDeviceRequest_FieldPathSelector
}

var _ GetDeviceRequest_FieldPath = (*GetDeviceRequest_FieldTerminalPath)(nil)

func (fp *GetDeviceRequest_FieldTerminalPath) Selector() GetDeviceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetDeviceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetDeviceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetDeviceRequest
func (fp *GetDeviceRequest_FieldTerminalPath) Get(source *GetDeviceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetDeviceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetDeviceRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetDeviceRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetDeviceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetDeviceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetDeviceRequest))
}

// GetSingle returns value pointed by specific field of from source GetDeviceRequest
func (fp *GetDeviceRequest_FieldTerminalPath) GetSingle(source *GetDeviceRequest) (interface{}, bool) {
	switch fp.selector {
	case GetDeviceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetDeviceRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetDeviceRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceRequest: %d", fp.selector))
	}
}

func (fp *GetDeviceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetDeviceRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetDeviceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetDeviceRequest_FieldPathSelectorName:
		return (*device.Reference)(nil)
	case GetDeviceRequest_FieldPathSelectorFieldMask:
		return (*device.Device_FieldMask)(nil)
	case GetDeviceRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceRequest: %d", fp.selector))
	}
}

func (fp *GetDeviceRequest_FieldTerminalPath) ClearValue(item *GetDeviceRequest) {
	if item != nil {
		switch fp.selector {
		case GetDeviceRequest_FieldPathSelectorName:
			item.Name = nil
		case GetDeviceRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetDeviceRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetDeviceRequest: %d", fp.selector))
		}
	}
}

func (fp *GetDeviceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetDeviceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetDeviceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetDeviceRequest_FieldPathSelectorName ||
		fp.selector == GetDeviceRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetDeviceRequest_FieldPathSelectorView
}

func (fp *GetDeviceRequest_FieldTerminalPath) WithIValue(value interface{}) GetDeviceRequest_FieldPathValue {
	switch fp.selector {
	case GetDeviceRequest_FieldPathSelectorName:
		return &GetDeviceRequest_FieldTerminalPathValue{GetDeviceRequest_FieldTerminalPath: *fp, value: value.(*device.Reference)}
	case GetDeviceRequest_FieldPathSelectorFieldMask:
		return &GetDeviceRequest_FieldTerminalPathValue{GetDeviceRequest_FieldTerminalPath: *fp, value: value.(*device.Device_FieldMask)}
	case GetDeviceRequest_FieldPathSelectorView:
		return &GetDeviceRequest_FieldTerminalPathValue{GetDeviceRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceRequest: %d", fp.selector))
	}
}

func (fp *GetDeviceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetDeviceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetDeviceRequest_FieldPathArrayOfValues {
	fpaov := &GetDeviceRequest_FieldTerminalPathArrayOfValues{GetDeviceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetDeviceRequest_FieldPathSelectorName:
		return &GetDeviceRequest_FieldTerminalPathArrayOfValues{GetDeviceRequest_FieldTerminalPath: *fp, values: values.([]*device.Reference)}
	case GetDeviceRequest_FieldPathSelectorFieldMask:
		return &GetDeviceRequest_FieldTerminalPathArrayOfValues{GetDeviceRequest_FieldTerminalPath: *fp, values: values.([]*device.Device_FieldMask)}
	case GetDeviceRequest_FieldPathSelectorView:
		return &GetDeviceRequest_FieldTerminalPathArrayOfValues{GetDeviceRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetDeviceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetDeviceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetDeviceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceRequest: %d", fp.selector))
	}
}

func (fp *GetDeviceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetDeviceRequest_FieldPathValue allows storing values for GetDeviceRequest fields according to their type
type GetDeviceRequest_FieldPathValue interface {
	GetDeviceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetDeviceRequest)
	CompareWith(*GetDeviceRequest) (cmp int, comparable bool)
}

func ParseGetDeviceRequest_FieldPathValue(pathStr, valueStr string) (GetDeviceRequest_FieldPathValue, error) {
	fp, err := ParseGetDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDeviceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetDeviceRequest_FieldPathValue), nil
}

func MustParseGetDeviceRequest_FieldPathValue(pathStr, valueStr string) GetDeviceRequest_FieldPathValue {
	fpv, err := ParseGetDeviceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetDeviceRequest_FieldTerminalPathValue struct {
	GetDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ GetDeviceRequest_FieldPathValue = (*GetDeviceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetDeviceRequest' as interface{}
func (fpv *GetDeviceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetDeviceRequest_FieldTerminalPathValue) AsNameValue() (*device.Reference, bool) {
	res, ok := fpv.value.(*device.Reference)
	return res, ok
}
func (fpv *GetDeviceRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device.Device_FieldMask, bool) {
	res, ok := fpv.value.(*device.Device_FieldMask)
	return res, ok
}
func (fpv *GetDeviceRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetDeviceRequest
func (fpv *GetDeviceRequest_FieldTerminalPathValue) SetTo(target **GetDeviceRequest) {
	if *target == nil {
		*target = new(GetDeviceRequest)
	}
	switch fpv.selector {
	case GetDeviceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*device.Reference)
	case GetDeviceRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device.Device_FieldMask)
	case GetDeviceRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *GetDeviceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetDeviceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetDeviceRequest_FieldTerminalPathValue' with the value under path in 'GetDeviceRequest'.
func (fpv *GetDeviceRequest_FieldTerminalPathValue) CompareWith(source *GetDeviceRequest) (int, bool) {
	switch fpv.selector {
	case GetDeviceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*device.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetDeviceRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetDeviceRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *GetDeviceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetDeviceRequest))
}

// GetDeviceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetDeviceRequest according to their type
// Present only for array (repeated) types.
type GetDeviceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetDeviceRequest_FieldPath
	ContainsValue(*GetDeviceRequest) bool
}

// ParseGetDeviceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetDeviceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDeviceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetDeviceRequest_FieldPathArrayItemValue), nil
}

func MustParseGetDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetDeviceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetDeviceRequest_FieldTerminalPathArrayItemValue struct {
	GetDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ GetDeviceRequest_FieldPathArrayItemValue = (*GetDeviceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetDeviceRequest as interface{}
func (fpaiv *GetDeviceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetDeviceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetDeviceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetDeviceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetDeviceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetDeviceRequest'
func (fpaiv *GetDeviceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetDeviceRequest) bool {
	slice := fpaiv.GetDeviceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetDeviceRequest_FieldPathArrayOfValues allows storing slice of values for GetDeviceRequest fields according to their type
type GetDeviceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetDeviceRequest_FieldPath
}

func ParseGetDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetDeviceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDeviceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetDeviceRequest_FieldPathArrayOfValues), nil
}

func MustParseGetDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetDeviceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetDeviceRequest_FieldTerminalPathArrayOfValues struct {
	GetDeviceRequest_FieldTerminalPath
	values interface{}
}

var _ GetDeviceRequest_FieldPathArrayOfValues = (*GetDeviceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetDeviceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetDeviceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*device.Reference) {
			values = append(values, v)
		}
	case GetDeviceRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device.Device_FieldMask) {
			values = append(values, v)
		}
	case GetDeviceRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetDeviceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*device.Reference, bool) {
	res, ok := fpaov.values.([]*device.Reference)
	return res, ok
}
func (fpaov *GetDeviceRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device.Device_FieldMask, bool) {
	res, ok := fpaov.values.([]*device.Device_FieldMask)
	return res, ok
}
func (fpaov *GetDeviceRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetDevicesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetDevicesRequest_FieldPathSelector
	Get(source *BatchGetDevicesRequest) []interface{}
	GetSingle(source *BatchGetDevicesRequest) (interface{}, bool)
	ClearValue(item *BatchGetDevicesRequest)

	// Those methods build corresponding BatchGetDevicesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetDevicesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetDevicesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetDevicesRequest_FieldPathArrayItemValue
}

type BatchGetDevicesRequest_FieldPathSelector int32

const (
	BatchGetDevicesRequest_FieldPathSelectorParent    BatchGetDevicesRequest_FieldPathSelector = 0
	BatchGetDevicesRequest_FieldPathSelectorNames     BatchGetDevicesRequest_FieldPathSelector = 1
	BatchGetDevicesRequest_FieldPathSelectorFieldMask BatchGetDevicesRequest_FieldPathSelector = 2
	BatchGetDevicesRequest_FieldPathSelectorView      BatchGetDevicesRequest_FieldPathSelector = 3
)

func (s BatchGetDevicesRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetDevicesRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetDevicesRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetDevicesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetDevicesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesRequest: %d", s))
	}
}

func BuildBatchGetDevicesRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetDevicesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetDevicesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetDevicesRequest_FieldTerminalPath{selector: BatchGetDevicesRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetDevicesRequest_FieldTerminalPath{selector: BatchGetDevicesRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetDevicesRequest_FieldTerminalPath{selector: BatchGetDevicesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetDevicesRequest_FieldTerminalPath{selector: BatchGetDevicesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetDevicesRequest", fp)
}

func ParseBatchGetDevicesRequest_FieldPath(rawField string) (BatchGetDevicesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetDevicesRequest_FieldPath(fp)
}

func MustParseBatchGetDevicesRequest_FieldPath(rawField string) BatchGetDevicesRequest_FieldPath {
	fp, err := ParseBatchGetDevicesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetDevicesRequest_FieldTerminalPath struct {
	selector BatchGetDevicesRequest_FieldPathSelector
}

var _ BatchGetDevicesRequest_FieldPath = (*BatchGetDevicesRequest_FieldTerminalPath)(nil)

func (fp *BatchGetDevicesRequest_FieldTerminalPath) Selector() BatchGetDevicesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetDevicesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetDevicesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetDevicesRequest
func (fp *BatchGetDevicesRequest_FieldTerminalPath) Get(source *BatchGetDevicesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetDevicesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetDevicesRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetDevicesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetDevicesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDevicesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetDevicesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetDevicesRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetDevicesRequest
func (fp *BatchGetDevicesRequest_FieldTerminalPath) GetSingle(source *BatchGetDevicesRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetDevicesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetDevicesRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetDevicesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetDevicesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDevicesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetDevicesRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetDevicesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetDevicesRequest_FieldPathSelectorParent:
		return (*device.Reference)(nil)
	case BatchGetDevicesRequest_FieldPathSelectorNames:
		return ([]*device.Reference)(nil)
	case BatchGetDevicesRequest_FieldPathSelectorFieldMask:
		return (*device.Device_FieldMask)(nil)
	case BatchGetDevicesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDevicesRequest_FieldTerminalPath) ClearValue(item *BatchGetDevicesRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetDevicesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetDevicesRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetDevicesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetDevicesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDevicesRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetDevicesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetDevicesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetDevicesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetDevicesRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetDevicesRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetDevicesRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetDevicesRequest_FieldPathSelectorView
}

func (fp *BatchGetDevicesRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetDevicesRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetDevicesRequest_FieldPathSelectorParent:
		return &BatchGetDevicesRequest_FieldTerminalPathValue{BatchGetDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.Reference)}
	case BatchGetDevicesRequest_FieldPathSelectorNames:
		return &BatchGetDevicesRequest_FieldTerminalPathValue{BatchGetDevicesRequest_FieldTerminalPath: *fp, value: value.([]*device.Reference)}
	case BatchGetDevicesRequest_FieldPathSelectorFieldMask:
		return &BatchGetDevicesRequest_FieldTerminalPathValue{BatchGetDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.Device_FieldMask)}
	case BatchGetDevicesRequest_FieldPathSelectorView:
		return &BatchGetDevicesRequest_FieldTerminalPathValue{BatchGetDevicesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDevicesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetDevicesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetDevicesRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetDevicesRequest_FieldTerminalPathArrayOfValues{BatchGetDevicesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetDevicesRequest_FieldPathSelectorParent:
		return &BatchGetDevicesRequest_FieldTerminalPathArrayOfValues{BatchGetDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.Reference)}
	case BatchGetDevicesRequest_FieldPathSelectorNames:
		return &BatchGetDevicesRequest_FieldTerminalPathArrayOfValues{BatchGetDevicesRequest_FieldTerminalPath: *fp, values: values.([][]*device.Reference)}
	case BatchGetDevicesRequest_FieldPathSelectorFieldMask:
		return &BatchGetDevicesRequest_FieldTerminalPathArrayOfValues{BatchGetDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.Device_FieldMask)}
	case BatchGetDevicesRequest_FieldPathSelectorView:
		return &BatchGetDevicesRequest_FieldTerminalPathArrayOfValues{BatchGetDevicesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetDevicesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetDevicesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetDevicesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetDevicesRequest_FieldPathSelectorNames:
		return &BatchGetDevicesRequest_FieldTerminalPathArrayItemValue{BatchGetDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDevicesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetDevicesRequest_FieldPathValue allows storing values for BatchGetDevicesRequest fields according to their type
type BatchGetDevicesRequest_FieldPathValue interface {
	BatchGetDevicesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetDevicesRequest)
	CompareWith(*BatchGetDevicesRequest) (cmp int, comparable bool)
}

func ParseBatchGetDevicesRequest_FieldPathValue(pathStr, valueStr string) (BatchGetDevicesRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetDevicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDevicesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetDevicesRequest_FieldPathValue), nil
}

func MustParseBatchGetDevicesRequest_FieldPathValue(pathStr, valueStr string) BatchGetDevicesRequest_FieldPathValue {
	fpv, err := ParseBatchGetDevicesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetDevicesRequest_FieldTerminalPathValue struct {
	BatchGetDevicesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetDevicesRequest_FieldPathValue = (*BatchGetDevicesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetDevicesRequest' as interface{}
func (fpv *BatchGetDevicesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetDevicesRequest_FieldTerminalPathValue) AsParentValue() (*device.Reference, bool) {
	res, ok := fpv.value.(*device.Reference)
	return res, ok
}
func (fpv *BatchGetDevicesRequest_FieldTerminalPathValue) AsNamesValue() ([]*device.Reference, bool) {
	res, ok := fpv.value.([]*device.Reference)
	return res, ok
}
func (fpv *BatchGetDevicesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device.Device_FieldMask, bool) {
	res, ok := fpv.value.(*device.Device_FieldMask)
	return res, ok
}
func (fpv *BatchGetDevicesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetDevicesRequest
func (fpv *BatchGetDevicesRequest_FieldTerminalPathValue) SetTo(target **BatchGetDevicesRequest) {
	if *target == nil {
		*target = new(BatchGetDevicesRequest)
	}
	switch fpv.selector {
	case BatchGetDevicesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*device.Reference)
	case BatchGetDevicesRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*device.Reference)
	case BatchGetDevicesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device.Device_FieldMask)
	case BatchGetDevicesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetDevicesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDevicesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetDevicesRequest_FieldTerminalPathValue' with the value under path in 'BatchGetDevicesRequest'.
func (fpv *BatchGetDevicesRequest_FieldTerminalPathValue) CompareWith(source *BatchGetDevicesRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetDevicesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*device.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetDevicesRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetDevicesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetDevicesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetDevicesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetDevicesRequest))
}

// BatchGetDevicesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetDevicesRequest according to their type
// Present only for array (repeated) types.
type BatchGetDevicesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetDevicesRequest_FieldPath
	ContainsValue(*BatchGetDevicesRequest) bool
}

// ParseBatchGetDevicesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetDevicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetDevicesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetDevicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDevicesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetDevicesRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetDevicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetDevicesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetDevicesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetDevicesRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetDevicesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetDevicesRequest_FieldPathArrayItemValue = (*BatchGetDevicesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetDevicesRequest as interface{}
func (fpaiv *BatchGetDevicesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetDevicesRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*device.Reference, bool) {
	res, ok := fpaiv.value.(*device.Reference)
	return res, ok
}

func (fpaiv *BatchGetDevicesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetDevicesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetDevicesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetDevicesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDevicesRequest'
func (fpaiv *BatchGetDevicesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetDevicesRequest) bool {
	slice := fpaiv.BatchGetDevicesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetDevicesRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetDevicesRequest fields according to their type
type BatchGetDevicesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetDevicesRequest_FieldPath
}

func ParseBatchGetDevicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetDevicesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetDevicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDevicesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetDevicesRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetDevicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetDevicesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetDevicesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetDevicesRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetDevicesRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetDevicesRequest_FieldPathArrayOfValues = (*BatchGetDevicesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetDevicesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetDevicesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*device.Reference) {
			values = append(values, v)
		}
	case BatchGetDevicesRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*device.Reference) {
			values = append(values, v)
		}
	case BatchGetDevicesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device.Device_FieldMask) {
			values = append(values, v)
		}
	case BatchGetDevicesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetDevicesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*device.Reference, bool) {
	res, ok := fpaov.values.([]*device.Reference)
	return res, ok
}
func (fpaov *BatchGetDevicesRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*device.Reference, bool) {
	res, ok := fpaov.values.([][]*device.Reference)
	return res, ok
}
func (fpaov *BatchGetDevicesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device.Device_FieldMask, bool) {
	res, ok := fpaov.values.([]*device.Device_FieldMask)
	return res, ok
}
func (fpaov *BatchGetDevicesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetDevicesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetDevicesResponse_FieldPathSelector
	Get(source *BatchGetDevicesResponse) []interface{}
	GetSingle(source *BatchGetDevicesResponse) (interface{}, bool)
	ClearValue(item *BatchGetDevicesResponse)

	// Those methods build corresponding BatchGetDevicesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetDevicesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetDevicesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetDevicesResponse_FieldPathArrayItemValue
}

type BatchGetDevicesResponse_FieldPathSelector int32

const (
	BatchGetDevicesResponse_FieldPathSelectorDevices BatchGetDevicesResponse_FieldPathSelector = 0
	BatchGetDevicesResponse_FieldPathSelectorMissing BatchGetDevicesResponse_FieldPathSelector = 1
)

func (s BatchGetDevicesResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetDevicesResponse_FieldPathSelectorDevices:
		return "devices"
	case BatchGetDevicesResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", s))
	}
}

func BuildBatchGetDevicesResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetDevicesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetDevicesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "devices":
			return &BatchGetDevicesResponse_FieldTerminalPath{selector: BatchGetDevicesResponse_FieldPathSelectorDevices}, nil
		case "missing":
			return &BatchGetDevicesResponse_FieldTerminalPath{selector: BatchGetDevicesResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "devices":
			if subpath, err := device.BuildDevice_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetDevicesResponse_FieldSubPath{selector: BatchGetDevicesResponse_FieldPathSelectorDevices, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetDevicesResponse", fp)
}

func ParseBatchGetDevicesResponse_FieldPath(rawField string) (BatchGetDevicesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetDevicesResponse_FieldPath(fp)
}

func MustParseBatchGetDevicesResponse_FieldPath(rawField string) BatchGetDevicesResponse_FieldPath {
	fp, err := ParseBatchGetDevicesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetDevicesResponse_FieldTerminalPath struct {
	selector BatchGetDevicesResponse_FieldPathSelector
}

var _ BatchGetDevicesResponse_FieldPath = (*BatchGetDevicesResponse_FieldTerminalPath)(nil)

func (fp *BatchGetDevicesResponse_FieldTerminalPath) Selector() BatchGetDevicesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetDevicesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetDevicesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetDevicesResponse
func (fp *BatchGetDevicesResponse_FieldTerminalPath) Get(source *BatchGetDevicesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetDevicesResponse_FieldPathSelectorDevices:
			for _, value := range source.GetDevices() {
				values = append(values, value)
			}
		case BatchGetDevicesResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetDevicesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetDevicesResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetDevicesResponse
func (fp *BatchGetDevicesResponse_FieldTerminalPath) GetSingle(source *BatchGetDevicesResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetDevicesResponse_FieldPathSelectorDevices:
		res := source.GetDevices()
		return res, res != nil
	case BatchGetDevicesResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDevicesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetDevicesResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetDevicesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetDevicesResponse_FieldPathSelectorDevices:
		return ([]*device.Device)(nil)
	case BatchGetDevicesResponse_FieldPathSelectorMissing:
		return ([]*device.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDevicesResponse_FieldTerminalPath) ClearValue(item *BatchGetDevicesResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetDevicesResponse_FieldPathSelectorDevices:
			item.Devices = nil
		case BatchGetDevicesResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetDevicesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetDevicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetDevicesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetDevicesResponse_FieldPathSelectorMissing
}

func (fp *BatchGetDevicesResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetDevicesResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetDevicesResponse_FieldPathSelectorDevices:
		return &BatchGetDevicesResponse_FieldTerminalPathValue{BatchGetDevicesResponse_FieldTerminalPath: *fp, value: value.([]*device.Device)}
	case BatchGetDevicesResponse_FieldPathSelectorMissing:
		return &BatchGetDevicesResponse_FieldTerminalPathValue{BatchGetDevicesResponse_FieldTerminalPath: *fp, value: value.([]*device.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDevicesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetDevicesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetDevicesResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetDevicesResponse_FieldTerminalPathArrayOfValues{BatchGetDevicesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetDevicesResponse_FieldPathSelectorDevices:
		return &BatchGetDevicesResponse_FieldTerminalPathArrayOfValues{BatchGetDevicesResponse_FieldTerminalPath: *fp, values: values.([][]*device.Device)}
	case BatchGetDevicesResponse_FieldPathSelectorMissing:
		return &BatchGetDevicesResponse_FieldTerminalPathArrayOfValues{BatchGetDevicesResponse_FieldTerminalPath: *fp, values: values.([][]*device.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetDevicesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetDevicesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetDevicesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetDevicesResponse_FieldPathSelectorDevices:
		return &BatchGetDevicesResponse_FieldTerminalPathArrayItemValue{BatchGetDevicesResponse_FieldTerminalPath: *fp, value: value.(*device.Device)}
	case BatchGetDevicesResponse_FieldPathSelectorMissing:
		return &BatchGetDevicesResponse_FieldTerminalPathArrayItemValue{BatchGetDevicesResponse_FieldTerminalPath: *fp, value: value.(*device.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDevicesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetDevicesResponse_FieldSubPath struct {
	selector BatchGetDevicesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetDevicesResponse_FieldPath = (*BatchGetDevicesResponse_FieldSubPath)(nil)

func (fps *BatchGetDevicesResponse_FieldSubPath) Selector() BatchGetDevicesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetDevicesResponse_FieldSubPath) AsDevicesSubPath() (device.Device_FieldPath, bool) {
	res, ok := fps.subPath.(device.Device_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetDevicesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetDevicesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetDevicesResponse
func (fps *BatchGetDevicesResponse_FieldSubPath) Get(source *BatchGetDevicesResponse) (values []interface{}) {
	if asDeviceFieldPath, ok := fps.AsDevicesSubPath(); ok {
		for _, item := range source.GetDevices() {
			values = append(values, asDeviceFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetDevicesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetDevicesResponse))
}

// GetSingle returns value of selected field from source BatchGetDevicesResponse
func (fps *BatchGetDevicesResponse_FieldSubPath) GetSingle(source *BatchGetDevicesResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetDevicesResponse_FieldPathSelectorDevices:
		if len(source.GetDevices()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDevices()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fps.selector))
	}
}

func (fps *BatchGetDevicesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetDevicesResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetDevicesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetDevicesResponse_FieldSubPath) ClearValue(item *BatchGetDevicesResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetDevicesResponse_FieldPathSelectorDevices:
			for _, subItem := range item.Devices {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetDevicesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetDevicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetDevicesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetDevicesResponse_FieldSubPath) WithIValue(value interface{}) BatchGetDevicesResponse_FieldPathValue {
	return &BatchGetDevicesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetDevicesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetDevicesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetDevicesResponse_FieldPathArrayOfValues {
	return &BatchGetDevicesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetDevicesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetDevicesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetDevicesResponse_FieldPathArrayItemValue {
	return &BatchGetDevicesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetDevicesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetDevicesResponse_FieldPathValue allows storing values for BatchGetDevicesResponse fields according to their type
type BatchGetDevicesResponse_FieldPathValue interface {
	BatchGetDevicesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetDevicesResponse)
	CompareWith(*BatchGetDevicesResponse) (cmp int, comparable bool)
}

func ParseBatchGetDevicesResponse_FieldPathValue(pathStr, valueStr string) (BatchGetDevicesResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetDevicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDevicesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetDevicesResponse_FieldPathValue), nil
}

func MustParseBatchGetDevicesResponse_FieldPathValue(pathStr, valueStr string) BatchGetDevicesResponse_FieldPathValue {
	fpv, err := ParseBatchGetDevicesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetDevicesResponse_FieldTerminalPathValue struct {
	BatchGetDevicesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetDevicesResponse_FieldPathValue = (*BatchGetDevicesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetDevicesResponse' as interface{}
func (fpv *BatchGetDevicesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetDevicesResponse_FieldTerminalPathValue) AsDevicesValue() ([]*device.Device, bool) {
	res, ok := fpv.value.([]*device.Device)
	return res, ok
}
func (fpv *BatchGetDevicesResponse_FieldTerminalPathValue) AsMissingValue() ([]*device.Reference, bool) {
	res, ok := fpv.value.([]*device.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetDevicesResponse
func (fpv *BatchGetDevicesResponse_FieldTerminalPathValue) SetTo(target **BatchGetDevicesResponse) {
	if *target == nil {
		*target = new(BatchGetDevicesResponse)
	}
	switch fpv.selector {
	case BatchGetDevicesResponse_FieldPathSelectorDevices:
		(*target).Devices = fpv.value.([]*device.Device)
	case BatchGetDevicesResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*device.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetDevicesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDevicesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetDevicesResponse_FieldTerminalPathValue' with the value under path in 'BatchGetDevicesResponse'.
func (fpv *BatchGetDevicesResponse_FieldTerminalPathValue) CompareWith(source *BatchGetDevicesResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetDevicesResponse_FieldPathSelectorDevices:
		return 0, false
	case BatchGetDevicesResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetDevicesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetDevicesResponse))
}

type BatchGetDevicesResponse_FieldSubPathValue struct {
	BatchGetDevicesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetDevicesResponse_FieldPathValue = (*BatchGetDevicesResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetDevicesResponse_FieldSubPathValue) AsDevicesPathValue() (device.Device_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device.Device_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetDevicesResponse_FieldSubPathValue) SetTo(target **BatchGetDevicesResponse) {
	if *target == nil {
		*target = new(BatchGetDevicesResponse)
	}
	switch fpvs.Selector() {
	case BatchGetDevicesResponse_FieldPathSelectorDevices:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetDevicesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDevicesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetDevicesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetDevicesResponse_FieldSubPathValue) CompareWith(source *BatchGetDevicesResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetDevicesResponse_FieldPathSelectorDevices:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetDevicesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetDevicesResponse))
}

// BatchGetDevicesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetDevicesResponse according to their type
// Present only for array (repeated) types.
type BatchGetDevicesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetDevicesResponse_FieldPath
	ContainsValue(*BatchGetDevicesResponse) bool
}

// ParseBatchGetDevicesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetDevicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetDevicesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetDevicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDevicesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetDevicesResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetDevicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetDevicesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetDevicesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetDevicesResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetDevicesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetDevicesResponse_FieldPathArrayItemValue = (*BatchGetDevicesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetDevicesResponse as interface{}
func (fpaiv *BatchGetDevicesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetDevicesResponse_FieldTerminalPathArrayItemValue) AsDevicesItemValue() (*device.Device, bool) {
	res, ok := fpaiv.value.(*device.Device)
	return res, ok
}
func (fpaiv *BatchGetDevicesResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*device.Reference, bool) {
	res, ok := fpaiv.value.(*device.Reference)
	return res, ok
}

func (fpaiv *BatchGetDevicesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetDevicesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetDevicesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetDevicesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDevicesResponse'
func (fpaiv *BatchGetDevicesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetDevicesResponse) bool {
	slice := fpaiv.BatchGetDevicesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetDevicesResponse_FieldSubPathArrayItemValue struct {
	BatchGetDevicesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetDevicesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetDevicesResponse_FieldSubPathArrayItemValue) AsDevicesPathItemValue() (device.Device_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device.Device_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDevicesResponse'
func (fpaivs *BatchGetDevicesResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetDevicesResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetDevicesResponse_FieldPathSelectorDevices:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDevicesResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetDevicesResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetDevicesResponse fields according to their type
type BatchGetDevicesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetDevicesResponse_FieldPath
}

func ParseBatchGetDevicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetDevicesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetDevicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDevicesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetDevicesResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetDevicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetDevicesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetDevicesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetDevicesResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetDevicesResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetDevicesResponse_FieldPathArrayOfValues = (*BatchGetDevicesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetDevicesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetDevicesResponse_FieldPathSelectorDevices:
		for _, v := range fpaov.values.([][]*device.Device) {
			values = append(values, v)
		}
	case BatchGetDevicesResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*device.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetDevicesResponse_FieldTerminalPathArrayOfValues) AsDevicesArrayOfValues() ([][]*device.Device, bool) {
	res, ok := fpaov.values.([][]*device.Device)
	return res, ok
}
func (fpaov *BatchGetDevicesResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*device.Reference, bool) {
	res, ok := fpaov.values.([][]*device.Reference)
	return res, ok
}

type BatchGetDevicesResponse_FieldSubPathArrayOfValues struct {
	BatchGetDevicesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetDevicesResponse_FieldPathArrayOfValues = (*BatchGetDevicesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetDevicesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetDevicesResponse_FieldSubPathArrayOfValues) AsDevicesPathArrayOfValues() (device.Device_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device.Device_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListDevicesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListDevicesRequest_FieldPathSelector
	Get(source *ListDevicesRequest) []interface{}
	GetSingle(source *ListDevicesRequest) (interface{}, bool)
	ClearValue(item *ListDevicesRequest)

	// Those methods build corresponding ListDevicesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListDevicesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListDevicesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListDevicesRequest_FieldPathArrayItemValue
}

type ListDevicesRequest_FieldPathSelector int32

const (
	ListDevicesRequest_FieldPathSelectorParent    ListDevicesRequest_FieldPathSelector = 0
	ListDevicesRequest_FieldPathSelectorPageSize  ListDevicesRequest_FieldPathSelector = 1
	ListDevicesRequest_FieldPathSelectorPageToken ListDevicesRequest_FieldPathSelector = 2
	ListDevicesRequest_FieldPathSelectorOrderBy   ListDevicesRequest_FieldPathSelector = 3
	ListDevicesRequest_FieldPathSelectorFilter    ListDevicesRequest_FieldPathSelector = 4
	ListDevicesRequest_FieldPathSelectorFieldMask ListDevicesRequest_FieldPathSelector = 5
	ListDevicesRequest_FieldPathSelectorView      ListDevicesRequest_FieldPathSelector = 6
)

func (s ListDevicesRequest_FieldPathSelector) String() string {
	switch s {
	case ListDevicesRequest_FieldPathSelectorParent:
		return "parent"
	case ListDevicesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListDevicesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListDevicesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListDevicesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListDevicesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListDevicesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesRequest: %d", s))
	}
}

func BuildListDevicesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListDevicesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListDevicesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListDevicesRequest_FieldTerminalPath{selector: ListDevicesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListDevicesRequest_FieldTerminalPath{selector: ListDevicesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListDevicesRequest_FieldTerminalPath{selector: ListDevicesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListDevicesRequest_FieldTerminalPath{selector: ListDevicesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListDevicesRequest_FieldTerminalPath{selector: ListDevicesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListDevicesRequest_FieldTerminalPath{selector: ListDevicesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListDevicesRequest_FieldTerminalPath{selector: ListDevicesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListDevicesRequest", fp)
}

func ParseListDevicesRequest_FieldPath(rawField string) (ListDevicesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListDevicesRequest_FieldPath(fp)
}

func MustParseListDevicesRequest_FieldPath(rawField string) ListDevicesRequest_FieldPath {
	fp, err := ParseListDevicesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListDevicesRequest_FieldTerminalPath struct {
	selector ListDevicesRequest_FieldPathSelector
}

var _ ListDevicesRequest_FieldPath = (*ListDevicesRequest_FieldTerminalPath)(nil)

func (fp *ListDevicesRequest_FieldTerminalPath) Selector() ListDevicesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListDevicesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListDevicesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListDevicesRequest
func (fp *ListDevicesRequest_FieldTerminalPath) Get(source *ListDevicesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListDevicesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListDevicesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListDevicesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListDevicesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListDevicesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListDevicesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListDevicesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListDevicesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListDevicesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListDevicesRequest))
}

// GetSingle returns value pointed by specific field of from source ListDevicesRequest
func (fp *ListDevicesRequest_FieldTerminalPath) GetSingle(source *ListDevicesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListDevicesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListDevicesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListDevicesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListDevicesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListDevicesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListDevicesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListDevicesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesRequest: %d", fp.selector))
	}
}

func (fp *ListDevicesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListDevicesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListDevicesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListDevicesRequest_FieldPathSelectorParent:
		return (*device.ParentName)(nil)
	case ListDevicesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListDevicesRequest_FieldPathSelectorPageToken:
		return (*device.PagerCursor)(nil)
	case ListDevicesRequest_FieldPathSelectorOrderBy:
		return (*device.OrderBy)(nil)
	case ListDevicesRequest_FieldPathSelectorFilter:
		return (*device.Filter)(nil)
	case ListDevicesRequest_FieldPathSelectorFieldMask:
		return (*device.Device_FieldMask)(nil)
	case ListDevicesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesRequest: %d", fp.selector))
	}
}

func (fp *ListDevicesRequest_FieldTerminalPath) ClearValue(item *ListDevicesRequest) {
	if item != nil {
		switch fp.selector {
		case ListDevicesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListDevicesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListDevicesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListDevicesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListDevicesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListDevicesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListDevicesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListDevicesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListDevicesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListDevicesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListDevicesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListDevicesRequest_FieldPathSelectorParent ||
		fp.selector == ListDevicesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListDevicesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListDevicesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListDevicesRequest_FieldPathSelectorFilter ||
		fp.selector == ListDevicesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListDevicesRequest_FieldPathSelectorView
}

func (fp *ListDevicesRequest_FieldTerminalPath) WithIValue(value interface{}) ListDevicesRequest_FieldPathValue {
	switch fp.selector {
	case ListDevicesRequest_FieldPathSelectorParent:
		return &ListDevicesRequest_FieldTerminalPathValue{ListDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.ParentName)}
	case ListDevicesRequest_FieldPathSelectorPageSize:
		return &ListDevicesRequest_FieldTerminalPathValue{ListDevicesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListDevicesRequest_FieldPathSelectorPageToken:
		return &ListDevicesRequest_FieldTerminalPathValue{ListDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.PagerCursor)}
	case ListDevicesRequest_FieldPathSelectorOrderBy:
		return &ListDevicesRequest_FieldTerminalPathValue{ListDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.OrderBy)}
	case ListDevicesRequest_FieldPathSelectorFilter:
		return &ListDevicesRequest_FieldTerminalPathValue{ListDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.Filter)}
	case ListDevicesRequest_FieldPathSelectorFieldMask:
		return &ListDevicesRequest_FieldTerminalPathValue{ListDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.Device_FieldMask)}
	case ListDevicesRequest_FieldPathSelectorView:
		return &ListDevicesRequest_FieldTerminalPathValue{ListDevicesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesRequest: %d", fp.selector))
	}
}

func (fp *ListDevicesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListDevicesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListDevicesRequest_FieldPathArrayOfValues {
	fpaov := &ListDevicesRequest_FieldTerminalPathArrayOfValues{ListDevicesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListDevicesRequest_FieldPathSelectorParent:
		return &ListDevicesRequest_FieldTerminalPathArrayOfValues{ListDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.ParentName)}
	case ListDevicesRequest_FieldPathSelectorPageSize:
		return &ListDevicesRequest_FieldTerminalPathArrayOfValues{ListDevicesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListDevicesRequest_FieldPathSelectorPageToken:
		return &ListDevicesRequest_FieldTerminalPathArrayOfValues{ListDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.PagerCursor)}
	case ListDevicesRequest_FieldPathSelectorOrderBy:
		return &ListDevicesRequest_FieldTerminalPathArrayOfValues{ListDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.OrderBy)}
	case ListDevicesRequest_FieldPathSelectorFilter:
		return &ListDevicesRequest_FieldTerminalPathArrayOfValues{ListDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.Filter)}
	case ListDevicesRequest_FieldPathSelectorFieldMask:
		return &ListDevicesRequest_FieldTerminalPathArrayOfValues{ListDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.Device_FieldMask)}
	case ListDevicesRequest_FieldPathSelectorView:
		return &ListDevicesRequest_FieldTerminalPathArrayOfValues{ListDevicesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListDevicesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListDevicesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListDevicesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesRequest: %d", fp.selector))
	}
}

func (fp *ListDevicesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListDevicesRequest_FieldPathValue allows storing values for ListDevicesRequest fields according to their type
type ListDevicesRequest_FieldPathValue interface {
	ListDevicesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListDevicesRequest)
	CompareWith(*ListDevicesRequest) (cmp int, comparable bool)
}

func ParseListDevicesRequest_FieldPathValue(pathStr, valueStr string) (ListDevicesRequest_FieldPathValue, error) {
	fp, err := ParseListDevicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDevicesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListDevicesRequest_FieldPathValue), nil
}

func MustParseListDevicesRequest_FieldPathValue(pathStr, valueStr string) ListDevicesRequest_FieldPathValue {
	fpv, err := ParseListDevicesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListDevicesRequest_FieldTerminalPathValue struct {
	ListDevicesRequest_FieldTerminalPath
	value interface{}
}

var _ ListDevicesRequest_FieldPathValue = (*ListDevicesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListDevicesRequest' as interface{}
func (fpv *ListDevicesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListDevicesRequest_FieldTerminalPathValue) AsParentValue() (*device.ParentName, bool) {
	res, ok := fpv.value.(*device.ParentName)
	return res, ok
}
func (fpv *ListDevicesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListDevicesRequest_FieldTerminalPathValue) AsPageTokenValue() (*device.PagerCursor, bool) {
	res, ok := fpv.value.(*device.PagerCursor)
	return res, ok
}
func (fpv *ListDevicesRequest_FieldTerminalPathValue) AsOrderByValue() (*device.OrderBy, bool) {
	res, ok := fpv.value.(*device.OrderBy)
	return res, ok
}
func (fpv *ListDevicesRequest_FieldTerminalPathValue) AsFilterValue() (*device.Filter, bool) {
	res, ok := fpv.value.(*device.Filter)
	return res, ok
}
func (fpv *ListDevicesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device.Device_FieldMask, bool) {
	res, ok := fpv.value.(*device.Device_FieldMask)
	return res, ok
}
func (fpv *ListDevicesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListDevicesRequest
func (fpv *ListDevicesRequest_FieldTerminalPathValue) SetTo(target **ListDevicesRequest) {
	if *target == nil {
		*target = new(ListDevicesRequest)
	}
	switch fpv.selector {
	case ListDevicesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*device.ParentName)
	case ListDevicesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListDevicesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*device.PagerCursor)
	case ListDevicesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*device.OrderBy)
	case ListDevicesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*device.Filter)
	case ListDevicesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device.Device_FieldMask)
	case ListDevicesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesRequest: %d", fpv.selector))
	}
}

func (fpv *ListDevicesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDevicesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListDevicesRequest_FieldTerminalPathValue' with the value under path in 'ListDevicesRequest'.
func (fpv *ListDevicesRequest_FieldTerminalPathValue) CompareWith(source *ListDevicesRequest) (int, bool) {
	switch fpv.selector {
	case ListDevicesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*device.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListDevicesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListDevicesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListDevicesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListDevicesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListDevicesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListDevicesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesRequest: %d", fpv.selector))
	}
}

func (fpv *ListDevicesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListDevicesRequest))
}

// ListDevicesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListDevicesRequest according to their type
// Present only for array (repeated) types.
type ListDevicesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListDevicesRequest_FieldPath
	ContainsValue(*ListDevicesRequest) bool
}

// ParseListDevicesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListDevicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListDevicesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListDevicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDevicesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListDevicesRequest_FieldPathArrayItemValue), nil
}

func MustParseListDevicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListDevicesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListDevicesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListDevicesRequest_FieldTerminalPathArrayItemValue struct {
	ListDevicesRequest_FieldTerminalPath
	value interface{}
}

var _ ListDevicesRequest_FieldPathArrayItemValue = (*ListDevicesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListDevicesRequest as interface{}
func (fpaiv *ListDevicesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListDevicesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListDevicesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListDevicesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListDevicesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDevicesRequest'
func (fpaiv *ListDevicesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListDevicesRequest) bool {
	slice := fpaiv.ListDevicesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListDevicesRequest_FieldPathArrayOfValues allows storing slice of values for ListDevicesRequest fields according to their type
type ListDevicesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListDevicesRequest_FieldPath
}

func ParseListDevicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListDevicesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListDevicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDevicesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListDevicesRequest_FieldPathArrayOfValues), nil
}

func MustParseListDevicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListDevicesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListDevicesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListDevicesRequest_FieldTerminalPathArrayOfValues struct {
	ListDevicesRequest_FieldTerminalPath
	values interface{}
}

var _ ListDevicesRequest_FieldPathArrayOfValues = (*ListDevicesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListDevicesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListDevicesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*device.ParentName) {
			values = append(values, v)
		}
	case ListDevicesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListDevicesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*device.PagerCursor) {
			values = append(values, v)
		}
	case ListDevicesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*device.OrderBy) {
			values = append(values, v)
		}
	case ListDevicesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*device.Filter) {
			values = append(values, v)
		}
	case ListDevicesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device.Device_FieldMask) {
			values = append(values, v)
		}
	case ListDevicesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListDevicesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*device.ParentName, bool) {
	res, ok := fpaov.values.([]*device.ParentName)
	return res, ok
}
func (fpaov *ListDevicesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListDevicesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*device.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device.PagerCursor)
	return res, ok
}
func (fpaov *ListDevicesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*device.OrderBy, bool) {
	res, ok := fpaov.values.([]*device.OrderBy)
	return res, ok
}
func (fpaov *ListDevicesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*device.Filter, bool) {
	res, ok := fpaov.values.([]*device.Filter)
	return res, ok
}
func (fpaov *ListDevicesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device.Device_FieldMask, bool) {
	res, ok := fpaov.values.([]*device.Device_FieldMask)
	return res, ok
}
func (fpaov *ListDevicesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListDevicesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListDevicesResponse_FieldPathSelector
	Get(source *ListDevicesResponse) []interface{}
	GetSingle(source *ListDevicesResponse) (interface{}, bool)
	ClearValue(item *ListDevicesResponse)

	// Those methods build corresponding ListDevicesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListDevicesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListDevicesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListDevicesResponse_FieldPathArrayItemValue
}

type ListDevicesResponse_FieldPathSelector int32

const (
	ListDevicesResponse_FieldPathSelectorDevices       ListDevicesResponse_FieldPathSelector = 0
	ListDevicesResponse_FieldPathSelectorPrevPageToken ListDevicesResponse_FieldPathSelector = 1
	ListDevicesResponse_FieldPathSelectorNextPageToken ListDevicesResponse_FieldPathSelector = 2
)

func (s ListDevicesResponse_FieldPathSelector) String() string {
	switch s {
	case ListDevicesResponse_FieldPathSelectorDevices:
		return "devices"
	case ListDevicesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListDevicesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", s))
	}
}

func BuildListDevicesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListDevicesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListDevicesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "devices":
			return &ListDevicesResponse_FieldTerminalPath{selector: ListDevicesResponse_FieldPathSelectorDevices}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListDevicesResponse_FieldTerminalPath{selector: ListDevicesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListDevicesResponse_FieldTerminalPath{selector: ListDevicesResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "devices":
			if subpath, err := device.BuildDevice_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListDevicesResponse_FieldSubPath{selector: ListDevicesResponse_FieldPathSelectorDevices, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListDevicesResponse", fp)
}

func ParseListDevicesResponse_FieldPath(rawField string) (ListDevicesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListDevicesResponse_FieldPath(fp)
}

func MustParseListDevicesResponse_FieldPath(rawField string) ListDevicesResponse_FieldPath {
	fp, err := ParseListDevicesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListDevicesResponse_FieldTerminalPath struct {
	selector ListDevicesResponse_FieldPathSelector
}

var _ ListDevicesResponse_FieldPath = (*ListDevicesResponse_FieldTerminalPath)(nil)

func (fp *ListDevicesResponse_FieldTerminalPath) Selector() ListDevicesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListDevicesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListDevicesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListDevicesResponse
func (fp *ListDevicesResponse_FieldTerminalPath) Get(source *ListDevicesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListDevicesResponse_FieldPathSelectorDevices:
			for _, value := range source.GetDevices() {
				values = append(values, value)
			}
		case ListDevicesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListDevicesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListDevicesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListDevicesResponse))
}

// GetSingle returns value pointed by specific field of from source ListDevicesResponse
func (fp *ListDevicesResponse_FieldTerminalPath) GetSingle(source *ListDevicesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListDevicesResponse_FieldPathSelectorDevices:
		res := source.GetDevices()
		return res, res != nil
	case ListDevicesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListDevicesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fp.selector))
	}
}

func (fp *ListDevicesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListDevicesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListDevicesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListDevicesResponse_FieldPathSelectorDevices:
		return ([]*device.Device)(nil)
	case ListDevicesResponse_FieldPathSelectorPrevPageToken:
		return (*device.PagerCursor)(nil)
	case ListDevicesResponse_FieldPathSelectorNextPageToken:
		return (*device.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fp.selector))
	}
}

func (fp *ListDevicesResponse_FieldTerminalPath) ClearValue(item *ListDevicesResponse) {
	if item != nil {
		switch fp.selector {
		case ListDevicesResponse_FieldPathSelectorDevices:
			item.Devices = nil
		case ListDevicesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListDevicesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListDevicesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListDevicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListDevicesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListDevicesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListDevicesResponse_FieldPathSelectorNextPageToken
}

func (fp *ListDevicesResponse_FieldTerminalPath) WithIValue(value interface{}) ListDevicesResponse_FieldPathValue {
	switch fp.selector {
	case ListDevicesResponse_FieldPathSelectorDevices:
		return &ListDevicesResponse_FieldTerminalPathValue{ListDevicesResponse_FieldTerminalPath: *fp, value: value.([]*device.Device)}
	case ListDevicesResponse_FieldPathSelectorPrevPageToken:
		return &ListDevicesResponse_FieldTerminalPathValue{ListDevicesResponse_FieldTerminalPath: *fp, value: value.(*device.PagerCursor)}
	case ListDevicesResponse_FieldPathSelectorNextPageToken:
		return &ListDevicesResponse_FieldTerminalPathValue{ListDevicesResponse_FieldTerminalPath: *fp, value: value.(*device.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fp.selector))
	}
}

func (fp *ListDevicesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListDevicesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListDevicesResponse_FieldPathArrayOfValues {
	fpaov := &ListDevicesResponse_FieldTerminalPathArrayOfValues{ListDevicesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListDevicesResponse_FieldPathSelectorDevices:
		return &ListDevicesResponse_FieldTerminalPathArrayOfValues{ListDevicesResponse_FieldTerminalPath: *fp, values: values.([][]*device.Device)}
	case ListDevicesResponse_FieldPathSelectorPrevPageToken:
		return &ListDevicesResponse_FieldTerminalPathArrayOfValues{ListDevicesResponse_FieldTerminalPath: *fp, values: values.([]*device.PagerCursor)}
	case ListDevicesResponse_FieldPathSelectorNextPageToken:
		return &ListDevicesResponse_FieldTerminalPathArrayOfValues{ListDevicesResponse_FieldTerminalPath: *fp, values: values.([]*device.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListDevicesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListDevicesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListDevicesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListDevicesResponse_FieldPathSelectorDevices:
		return &ListDevicesResponse_FieldTerminalPathArrayItemValue{ListDevicesResponse_FieldTerminalPath: *fp, value: value.(*device.Device)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fp.selector))
	}
}

func (fp *ListDevicesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListDevicesResponse_FieldSubPath struct {
	selector ListDevicesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListDevicesResponse_FieldPath = (*ListDevicesResponse_FieldSubPath)(nil)

func (fps *ListDevicesResponse_FieldSubPath) Selector() ListDevicesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListDevicesResponse_FieldSubPath) AsDevicesSubPath() (device.Device_FieldPath, bool) {
	res, ok := fps.subPath.(device.Device_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListDevicesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListDevicesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListDevicesResponse
func (fps *ListDevicesResponse_FieldSubPath) Get(source *ListDevicesResponse) (values []interface{}) {
	if asDeviceFieldPath, ok := fps.AsDevicesSubPath(); ok {
		for _, item := range source.GetDevices() {
			values = append(values, asDeviceFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListDevicesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListDevicesResponse))
}

// GetSingle returns value of selected field from source ListDevicesResponse
func (fps *ListDevicesResponse_FieldSubPath) GetSingle(source *ListDevicesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListDevicesResponse_FieldPathSelectorDevices:
		if len(source.GetDevices()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDevices()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fps.selector))
	}
}

func (fps *ListDevicesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListDevicesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListDevicesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListDevicesResponse_FieldSubPath) ClearValue(item *ListDevicesResponse) {
	if item != nil {
		switch fps.selector {
		case ListDevicesResponse_FieldPathSelectorDevices:
			for _, subItem := range item.Devices {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListDevicesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListDevicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListDevicesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListDevicesResponse_FieldSubPath) WithIValue(value interface{}) ListDevicesResponse_FieldPathValue {
	return &ListDevicesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListDevicesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListDevicesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListDevicesResponse_FieldPathArrayOfValues {
	return &ListDevicesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListDevicesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListDevicesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListDevicesResponse_FieldPathArrayItemValue {
	return &ListDevicesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListDevicesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListDevicesResponse_FieldPathValue allows storing values for ListDevicesResponse fields according to their type
type ListDevicesResponse_FieldPathValue interface {
	ListDevicesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListDevicesResponse)
	CompareWith(*ListDevicesResponse) (cmp int, comparable bool)
}

func ParseListDevicesResponse_FieldPathValue(pathStr, valueStr string) (ListDevicesResponse_FieldPathValue, error) {
	fp, err := ParseListDevicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDevicesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListDevicesResponse_FieldPathValue), nil
}

func MustParseListDevicesResponse_FieldPathValue(pathStr, valueStr string) ListDevicesResponse_FieldPathValue {
	fpv, err := ParseListDevicesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListDevicesResponse_FieldTerminalPathValue struct {
	ListDevicesResponse_FieldTerminalPath
	value interface{}
}

var _ ListDevicesResponse_FieldPathValue = (*ListDevicesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListDevicesResponse' as interface{}
func (fpv *ListDevicesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListDevicesResponse_FieldTerminalPathValue) AsDevicesValue() ([]*device.Device, bool) {
	res, ok := fpv.value.([]*device.Device)
	return res, ok
}
func (fpv *ListDevicesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*device.PagerCursor, bool) {
	res, ok := fpv.value.(*device.PagerCursor)
	return res, ok
}
func (fpv *ListDevicesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*device.PagerCursor, bool) {
	res, ok := fpv.value.(*device.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListDevicesResponse
func (fpv *ListDevicesResponse_FieldTerminalPathValue) SetTo(target **ListDevicesResponse) {
	if *target == nil {
		*target = new(ListDevicesResponse)
	}
	switch fpv.selector {
	case ListDevicesResponse_FieldPathSelectorDevices:
		(*target).Devices = fpv.value.([]*device.Device)
	case ListDevicesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*device.PagerCursor)
	case ListDevicesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*device.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fpv.selector))
	}
}

func (fpv *ListDevicesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDevicesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListDevicesResponse_FieldTerminalPathValue' with the value under path in 'ListDevicesResponse'.
func (fpv *ListDevicesResponse_FieldTerminalPathValue) CompareWith(source *ListDevicesResponse) (int, bool) {
	switch fpv.selector {
	case ListDevicesResponse_FieldPathSelectorDevices:
		return 0, false
	case ListDevicesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListDevicesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fpv.selector))
	}
}

func (fpv *ListDevicesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListDevicesResponse))
}

type ListDevicesResponse_FieldSubPathValue struct {
	ListDevicesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListDevicesResponse_FieldPathValue = (*ListDevicesResponse_FieldSubPathValue)(nil)

func (fpvs *ListDevicesResponse_FieldSubPathValue) AsDevicesPathValue() (device.Device_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device.Device_FieldPathValue)
	return res, ok
}

func (fpvs *ListDevicesResponse_FieldSubPathValue) SetTo(target **ListDevicesResponse) {
	if *target == nil {
		*target = new(ListDevicesResponse)
	}
	switch fpvs.Selector() {
	case ListDevicesResponse_FieldPathSelectorDevices:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListDevicesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDevicesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListDevicesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListDevicesResponse_FieldSubPathValue) CompareWith(source *ListDevicesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListDevicesResponse_FieldPathSelectorDevices:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListDevicesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListDevicesResponse))
}

// ListDevicesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListDevicesResponse according to their type
// Present only for array (repeated) types.
type ListDevicesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListDevicesResponse_FieldPath
	ContainsValue(*ListDevicesResponse) bool
}

// ParseListDevicesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListDevicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListDevicesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListDevicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDevicesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListDevicesResponse_FieldPathArrayItemValue), nil
}

func MustParseListDevicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListDevicesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListDevicesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListDevicesResponse_FieldTerminalPathArrayItemValue struct {
	ListDevicesResponse_FieldTerminalPath
	value interface{}
}

var _ ListDevicesResponse_FieldPathArrayItemValue = (*ListDevicesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListDevicesResponse as interface{}
func (fpaiv *ListDevicesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListDevicesResponse_FieldTerminalPathArrayItemValue) AsDevicesItemValue() (*device.Device, bool) {
	res, ok := fpaiv.value.(*device.Device)
	return res, ok
}

func (fpaiv *ListDevicesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListDevicesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListDevicesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListDevicesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDevicesResponse'
func (fpaiv *ListDevicesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListDevicesResponse) bool {
	slice := fpaiv.ListDevicesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListDevicesResponse_FieldSubPathArrayItemValue struct {
	ListDevicesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListDevicesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListDevicesResponse_FieldSubPathArrayItemValue) AsDevicesPathItemValue() (device.Device_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device.Device_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDevicesResponse'
func (fpaivs *ListDevicesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListDevicesResponse) bool {
	switch fpaivs.Selector() {
	case ListDevicesResponse_FieldPathSelectorDevices:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListDevicesResponse: %d", fpaivs.Selector()))
	}
}

// ListDevicesResponse_FieldPathArrayOfValues allows storing slice of values for ListDevicesResponse fields according to their type
type ListDevicesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListDevicesResponse_FieldPath
}

func ParseListDevicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListDevicesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListDevicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDevicesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListDevicesResponse_FieldPathArrayOfValues), nil
}

func MustParseListDevicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListDevicesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListDevicesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListDevicesResponse_FieldTerminalPathArrayOfValues struct {
	ListDevicesResponse_FieldTerminalPath
	values interface{}
}

var _ ListDevicesResponse_FieldPathArrayOfValues = (*ListDevicesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListDevicesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListDevicesResponse_FieldPathSelectorDevices:
		for _, v := range fpaov.values.([][]*device.Device) {
			values = append(values, v)
		}
	case ListDevicesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*device.PagerCursor) {
			values = append(values, v)
		}
	case ListDevicesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*device.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListDevicesResponse_FieldTerminalPathArrayOfValues) AsDevicesArrayOfValues() ([][]*device.Device, bool) {
	res, ok := fpaov.values.([][]*device.Device)
	return res, ok
}
func (fpaov *ListDevicesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*device.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device.PagerCursor)
	return res, ok
}
func (fpaov *ListDevicesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*device.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device.PagerCursor)
	return res, ok
}

type ListDevicesResponse_FieldSubPathArrayOfValues struct {
	ListDevicesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListDevicesResponse_FieldPathArrayOfValues = (*ListDevicesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListDevicesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListDevicesResponse_FieldSubPathArrayOfValues) AsDevicesPathArrayOfValues() (device.Device_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device.Device_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeviceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeviceRequest_FieldPathSelector
	Get(source *WatchDeviceRequest) []interface{}
	GetSingle(source *WatchDeviceRequest) (interface{}, bool)
	ClearValue(item *WatchDeviceRequest)

	// Those methods build corresponding WatchDeviceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeviceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeviceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeviceRequest_FieldPathArrayItemValue
}

type WatchDeviceRequest_FieldPathSelector int32

const (
	WatchDeviceRequest_FieldPathSelectorName      WatchDeviceRequest_FieldPathSelector = 0
	WatchDeviceRequest_FieldPathSelectorFieldMask WatchDeviceRequest_FieldPathSelector = 1
	WatchDeviceRequest_FieldPathSelectorView      WatchDeviceRequest_FieldPathSelector = 2
)

func (s WatchDeviceRequest_FieldPathSelector) String() string {
	switch s {
	case WatchDeviceRequest_FieldPathSelectorName:
		return "name"
	case WatchDeviceRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchDeviceRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceRequest: %d", s))
	}
}

func BuildWatchDeviceRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchDeviceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeviceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchDeviceRequest_FieldTerminalPath{selector: WatchDeviceRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchDeviceRequest_FieldTerminalPath{selector: WatchDeviceRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchDeviceRequest_FieldTerminalPath{selector: WatchDeviceRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeviceRequest", fp)
}

func ParseWatchDeviceRequest_FieldPath(rawField string) (WatchDeviceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeviceRequest_FieldPath(fp)
}

func MustParseWatchDeviceRequest_FieldPath(rawField string) WatchDeviceRequest_FieldPath {
	fp, err := ParseWatchDeviceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeviceRequest_FieldTerminalPath struct {
	selector WatchDeviceRequest_FieldPathSelector
}

var _ WatchDeviceRequest_FieldPath = (*WatchDeviceRequest_FieldTerminalPath)(nil)

func (fp *WatchDeviceRequest_FieldTerminalPath) Selector() WatchDeviceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeviceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeviceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeviceRequest
func (fp *WatchDeviceRequest_FieldTerminalPath) Get(source *WatchDeviceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeviceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchDeviceRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchDeviceRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeviceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeviceRequest))
}

// GetSingle returns value pointed by specific field of from source WatchDeviceRequest
func (fp *WatchDeviceRequest_FieldTerminalPath) GetSingle(source *WatchDeviceRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchDeviceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchDeviceRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchDeviceRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeviceRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeviceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeviceRequest_FieldPathSelectorName:
		return (*device.Reference)(nil)
	case WatchDeviceRequest_FieldPathSelectorFieldMask:
		return (*device.Device_FieldMask)(nil)
	case WatchDeviceRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceRequest_FieldTerminalPath) ClearValue(item *WatchDeviceRequest) {
	if item != nil {
		switch fp.selector {
		case WatchDeviceRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchDeviceRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchDeviceRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchDeviceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeviceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeviceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeviceRequest_FieldPathSelectorName ||
		fp.selector == WatchDeviceRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchDeviceRequest_FieldPathSelectorView
}

func (fp *WatchDeviceRequest_FieldTerminalPath) WithIValue(value interface{}) WatchDeviceRequest_FieldPathValue {
	switch fp.selector {
	case WatchDeviceRequest_FieldPathSelectorName:
		return &WatchDeviceRequest_FieldTerminalPathValue{WatchDeviceRequest_FieldTerminalPath: *fp, value: value.(*device.Reference)}
	case WatchDeviceRequest_FieldPathSelectorFieldMask:
		return &WatchDeviceRequest_FieldTerminalPathValue{WatchDeviceRequest_FieldTerminalPath: *fp, value: value.(*device.Device_FieldMask)}
	case WatchDeviceRequest_FieldPathSelectorView:
		return &WatchDeviceRequest_FieldTerminalPathValue{WatchDeviceRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeviceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeviceRequest_FieldPathArrayOfValues {
	fpaov := &WatchDeviceRequest_FieldTerminalPathArrayOfValues{WatchDeviceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeviceRequest_FieldPathSelectorName:
		return &WatchDeviceRequest_FieldTerminalPathArrayOfValues{WatchDeviceRequest_FieldTerminalPath: *fp, values: values.([]*device.Reference)}
	case WatchDeviceRequest_FieldPathSelectorFieldMask:
		return &WatchDeviceRequest_FieldTerminalPathArrayOfValues{WatchDeviceRequest_FieldTerminalPath: *fp, values: values.([]*device.Device_FieldMask)}
	case WatchDeviceRequest_FieldPathSelectorView:
		return &WatchDeviceRequest_FieldTerminalPathArrayOfValues{WatchDeviceRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeviceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeviceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeviceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDeviceRequest_FieldPathValue allows storing values for WatchDeviceRequest fields according to their type
type WatchDeviceRequest_FieldPathValue interface {
	WatchDeviceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeviceRequest)
	CompareWith(*WatchDeviceRequest) (cmp int, comparable bool)
}

func ParseWatchDeviceRequest_FieldPathValue(pathStr, valueStr string) (WatchDeviceRequest_FieldPathValue, error) {
	fp, err := ParseWatchDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeviceRequest_FieldPathValue), nil
}

func MustParseWatchDeviceRequest_FieldPathValue(pathStr, valueStr string) WatchDeviceRequest_FieldPathValue {
	fpv, err := ParseWatchDeviceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeviceRequest_FieldTerminalPathValue struct {
	WatchDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceRequest_FieldPathValue = (*WatchDeviceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDeviceRequest' as interface{}
func (fpv *WatchDeviceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeviceRequest_FieldTerminalPathValue) AsNameValue() (*device.Reference, bool) {
	res, ok := fpv.value.(*device.Reference)
	return res, ok
}
func (fpv *WatchDeviceRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device.Device_FieldMask, bool) {
	res, ok := fpv.value.(*device.Device_FieldMask)
	return res, ok
}
func (fpv *WatchDeviceRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchDeviceRequest
func (fpv *WatchDeviceRequest_FieldTerminalPathValue) SetTo(target **WatchDeviceRequest) {
	if *target == nil {
		*target = new(WatchDeviceRequest)
	}
	switch fpv.selector {
	case WatchDeviceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*device.Reference)
	case WatchDeviceRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device.Device_FieldMask)
	case WatchDeviceRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeviceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeviceRequest_FieldTerminalPathValue' with the value under path in 'WatchDeviceRequest'.
func (fpv *WatchDeviceRequest_FieldTerminalPathValue) CompareWith(source *WatchDeviceRequest) (int, bool) {
	switch fpv.selector {
	case WatchDeviceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*device.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchDeviceRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeviceRequest))
}

// WatchDeviceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDeviceRequest according to their type
// Present only for array (repeated) types.
type WatchDeviceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeviceRequest_FieldPath
	ContainsValue(*WatchDeviceRequest) bool
}

// ParseWatchDeviceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeviceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeviceRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeviceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeviceRequest_FieldTerminalPathArrayItemValue struct {
	WatchDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceRequest_FieldPathArrayItemValue = (*WatchDeviceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeviceRequest as interface{}
func (fpaiv *WatchDeviceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDeviceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeviceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeviceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeviceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeviceRequest'
func (fpaiv *WatchDeviceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeviceRequest) bool {
	slice := fpaiv.WatchDeviceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDeviceRequest_FieldPathArrayOfValues allows storing slice of values for WatchDeviceRequest fields according to their type
type WatchDeviceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeviceRequest_FieldPath
}

func ParseWatchDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeviceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeviceRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeviceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeviceRequest_FieldTerminalPathArrayOfValues struct {
	WatchDeviceRequest_FieldTerminalPath
	values interface{}
}

var _ WatchDeviceRequest_FieldPathArrayOfValues = (*WatchDeviceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeviceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeviceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*device.Reference) {
			values = append(values, v)
		}
	case WatchDeviceRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device.Device_FieldMask) {
			values = append(values, v)
		}
	case WatchDeviceRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeviceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*device.Reference, bool) {
	res, ok := fpaov.values.([]*device.Reference)
	return res, ok
}
func (fpaov *WatchDeviceRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device.Device_FieldMask, bool) {
	res, ok := fpaov.values.([]*device.Device_FieldMask)
	return res, ok
}
func (fpaov *WatchDeviceRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeviceResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeviceResponse_FieldPathSelector
	Get(source *WatchDeviceResponse) []interface{}
	GetSingle(source *WatchDeviceResponse) (interface{}, bool)
	ClearValue(item *WatchDeviceResponse)

	// Those methods build corresponding WatchDeviceResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeviceResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeviceResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeviceResponse_FieldPathArrayItemValue
}

type WatchDeviceResponse_FieldPathSelector int32

const (
	WatchDeviceResponse_FieldPathSelectorChange WatchDeviceResponse_FieldPathSelector = 0
)

func (s WatchDeviceResponse_FieldPathSelector) String() string {
	switch s {
	case WatchDeviceResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceResponse: %d", s))
	}
}

func BuildWatchDeviceResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchDeviceResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeviceResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchDeviceResponse_FieldTerminalPath{selector: WatchDeviceResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeviceResponse", fp)
}

func ParseWatchDeviceResponse_FieldPath(rawField string) (WatchDeviceResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeviceResponse_FieldPath(fp)
}

func MustParseWatchDeviceResponse_FieldPath(rawField string) WatchDeviceResponse_FieldPath {
	fp, err := ParseWatchDeviceResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeviceResponse_FieldTerminalPath struct {
	selector WatchDeviceResponse_FieldPathSelector
}

var _ WatchDeviceResponse_FieldPath = (*WatchDeviceResponse_FieldTerminalPath)(nil)

func (fp *WatchDeviceResponse_FieldTerminalPath) Selector() WatchDeviceResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeviceResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeviceResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeviceResponse
func (fp *WatchDeviceResponse_FieldTerminalPath) Get(source *WatchDeviceResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeviceResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeviceResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeviceResponse))
}

// GetSingle returns value pointed by specific field of from source WatchDeviceResponse
func (fp *WatchDeviceResponse_FieldTerminalPath) GetSingle(source *WatchDeviceResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchDeviceResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeviceResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeviceResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeviceResponse_FieldPathSelectorChange:
		return (*device.DeviceChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceResponse_FieldTerminalPath) ClearValue(item *WatchDeviceResponse) {
	if item != nil {
		switch fp.selector {
		case WatchDeviceResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchDeviceResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeviceResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeviceResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeviceResponse_FieldPathSelectorChange
}

func (fp *WatchDeviceResponse_FieldTerminalPath) WithIValue(value interface{}) WatchDeviceResponse_FieldPathValue {
	switch fp.selector {
	case WatchDeviceResponse_FieldPathSelectorChange:
		return &WatchDeviceResponse_FieldTerminalPathValue{WatchDeviceResponse_FieldTerminalPath: *fp, value: value.(*device.DeviceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeviceResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeviceResponse_FieldPathArrayOfValues {
	fpaov := &WatchDeviceResponse_FieldTerminalPathArrayOfValues{WatchDeviceResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeviceResponse_FieldPathSelectorChange:
		return &WatchDeviceResponse_FieldTerminalPathArrayOfValues{WatchDeviceResponse_FieldTerminalPath: *fp, values: values.([]*device.DeviceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeviceResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeviceResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeviceResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDeviceResponse_FieldPathValue allows storing values for WatchDeviceResponse fields according to their type
type WatchDeviceResponse_FieldPathValue interface {
	WatchDeviceResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeviceResponse)
	CompareWith(*WatchDeviceResponse) (cmp int, comparable bool)
}

func ParseWatchDeviceResponse_FieldPathValue(pathStr, valueStr string) (WatchDeviceResponse_FieldPathValue, error) {
	fp, err := ParseWatchDeviceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeviceResponse_FieldPathValue), nil
}

func MustParseWatchDeviceResponse_FieldPathValue(pathStr, valueStr string) WatchDeviceResponse_FieldPathValue {
	fpv, err := ParseWatchDeviceResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeviceResponse_FieldTerminalPathValue struct {
	WatchDeviceResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceResponse_FieldPathValue = (*WatchDeviceResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDeviceResponse' as interface{}
func (fpv *WatchDeviceResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeviceResponse_FieldTerminalPathValue) AsChangeValue() (*device.DeviceChange, bool) {
	res, ok := fpv.value.(*device.DeviceChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchDeviceResponse
func (fpv *WatchDeviceResponse_FieldTerminalPathValue) SetTo(target **WatchDeviceResponse) {
	if *target == nil {
		*target = new(WatchDeviceResponse)
	}
	switch fpv.selector {
	case WatchDeviceResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*device.DeviceChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeviceResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeviceResponse_FieldTerminalPathValue' with the value under path in 'WatchDeviceResponse'.
func (fpv *WatchDeviceResponse_FieldTerminalPathValue) CompareWith(source *WatchDeviceResponse) (int, bool) {
	switch fpv.selector {
	case WatchDeviceResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeviceResponse))
}

// WatchDeviceResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDeviceResponse according to their type
// Present only for array (repeated) types.
type WatchDeviceResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeviceResponse_FieldPath
	ContainsValue(*WatchDeviceResponse) bool
}

// ParseWatchDeviceResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeviceResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeviceResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeviceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeviceResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchDeviceResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeviceResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeviceResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeviceResponse_FieldTerminalPathArrayItemValue struct {
	WatchDeviceResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceResponse_FieldPathArrayItemValue = (*WatchDeviceResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeviceResponse as interface{}
func (fpaiv *WatchDeviceResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDeviceResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeviceResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeviceResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeviceResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeviceResponse'
func (fpaiv *WatchDeviceResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeviceResponse) bool {
	slice := fpaiv.WatchDeviceResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDeviceResponse_FieldPathArrayOfValues allows storing slice of values for WatchDeviceResponse fields according to their type
type WatchDeviceResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeviceResponse_FieldPath
}

func ParseWatchDeviceResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeviceResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeviceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeviceResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchDeviceResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeviceResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeviceResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeviceResponse_FieldTerminalPathArrayOfValues struct {
	WatchDeviceResponse_FieldTerminalPath
	values interface{}
}

var _ WatchDeviceResponse_FieldPathArrayOfValues = (*WatchDeviceResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeviceResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeviceResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*device.DeviceChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeviceResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*device.DeviceChange, bool) {
	res, ok := fpaov.values.([]*device.DeviceChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDevicesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDevicesRequest_FieldPathSelector
	Get(source *WatchDevicesRequest) []interface{}
	GetSingle(source *WatchDevicesRequest) (interface{}, bool)
	ClearValue(item *WatchDevicesRequest)

	// Those methods build corresponding WatchDevicesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDevicesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDevicesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDevicesRequest_FieldPathArrayItemValue
}

type WatchDevicesRequest_FieldPathSelector int32

const (
	WatchDevicesRequest_FieldPathSelectorType         WatchDevicesRequest_FieldPathSelector = 0
	WatchDevicesRequest_FieldPathSelectorParent       WatchDevicesRequest_FieldPathSelector = 1
	WatchDevicesRequest_FieldPathSelectorPageSize     WatchDevicesRequest_FieldPathSelector = 2
	WatchDevicesRequest_FieldPathSelectorPageToken    WatchDevicesRequest_FieldPathSelector = 3
	WatchDevicesRequest_FieldPathSelectorOrderBy      WatchDevicesRequest_FieldPathSelector = 4
	WatchDevicesRequest_FieldPathSelectorResumeToken  WatchDevicesRequest_FieldPathSelector = 5
	WatchDevicesRequest_FieldPathSelectorFilter       WatchDevicesRequest_FieldPathSelector = 6
	WatchDevicesRequest_FieldPathSelectorFieldMask    WatchDevicesRequest_FieldPathSelector = 7
	WatchDevicesRequest_FieldPathSelectorView         WatchDevicesRequest_FieldPathSelector = 8
	WatchDevicesRequest_FieldPathSelectorMaxChunkSize WatchDevicesRequest_FieldPathSelector = 9
)

func (s WatchDevicesRequest_FieldPathSelector) String() string {
	switch s {
	case WatchDevicesRequest_FieldPathSelectorType:
		return "type"
	case WatchDevicesRequest_FieldPathSelectorParent:
		return "parent"
	case WatchDevicesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchDevicesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchDevicesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchDevicesRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchDevicesRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchDevicesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchDevicesRequest_FieldPathSelectorView:
		return "view"
	case WatchDevicesRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesRequest: %d", s))
	}
}

func BuildWatchDevicesRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchDevicesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDevicesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchDevicesRequest_FieldTerminalPath{selector: WatchDevicesRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDevicesRequest", fp)
}

func ParseWatchDevicesRequest_FieldPath(rawField string) (WatchDevicesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDevicesRequest_FieldPath(fp)
}

func MustParseWatchDevicesRequest_FieldPath(rawField string) WatchDevicesRequest_FieldPath {
	fp, err := ParseWatchDevicesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDevicesRequest_FieldTerminalPath struct {
	selector WatchDevicesRequest_FieldPathSelector
}

var _ WatchDevicesRequest_FieldPath = (*WatchDevicesRequest_FieldTerminalPath)(nil)

func (fp *WatchDevicesRequest_FieldTerminalPath) Selector() WatchDevicesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDevicesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDevicesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDevicesRequest
func (fp *WatchDevicesRequest_FieldTerminalPath) Get(source *WatchDevicesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDevicesRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchDevicesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchDevicesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchDevicesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchDevicesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchDevicesRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchDevicesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchDevicesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchDevicesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchDevicesRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDevicesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDevicesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDevicesRequest))
}

// GetSingle returns value pointed by specific field of from source WatchDevicesRequest
func (fp *WatchDevicesRequest_FieldTerminalPath) GetSingle(source *WatchDevicesRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchDevicesRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchDevicesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchDevicesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchDevicesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchDevicesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchDevicesRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchDevicesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchDevicesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchDevicesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchDevicesRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesRequest: %d", fp.selector))
	}
}

func (fp *WatchDevicesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDevicesRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchDevicesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDevicesRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchDevicesRequest_FieldPathSelectorParent:
		return (*device.ParentReference)(nil)
	case WatchDevicesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchDevicesRequest_FieldPathSelectorPageToken:
		return (*device.PagerCursor)(nil)
	case WatchDevicesRequest_FieldPathSelectorOrderBy:
		return (*device.OrderBy)(nil)
	case WatchDevicesRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchDevicesRequest_FieldPathSelectorFilter:
		return (*device.Filter)(nil)
	case WatchDevicesRequest_FieldPathSelectorFieldMask:
		return (*device.Device_FieldMask)(nil)
	case WatchDevicesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchDevicesRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesRequest: %d", fp.selector))
	}
}

func (fp *WatchDevicesRequest_FieldTerminalPath) ClearValue(item *WatchDevicesRequest) {
	if item != nil {
		switch fp.selector {
		case WatchDevicesRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchDevicesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchDevicesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchDevicesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchDevicesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchDevicesRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchDevicesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchDevicesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchDevicesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchDevicesRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDevicesRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchDevicesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDevicesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDevicesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDevicesRequest_FieldPathSelectorType ||
		fp.selector == WatchDevicesRequest_FieldPathSelectorParent ||
		fp.selector == WatchDevicesRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchDevicesRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchDevicesRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchDevicesRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchDevicesRequest_FieldPathSelectorFilter ||
		fp.selector == WatchDevicesRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchDevicesRequest_FieldPathSelectorView ||
		fp.selector == WatchDevicesRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchDevicesRequest_FieldTerminalPath) WithIValue(value interface{}) WatchDevicesRequest_FieldPathValue {
	switch fp.selector {
	case WatchDevicesRequest_FieldPathSelectorType:
		return &WatchDevicesRequest_FieldTerminalPathValue{WatchDevicesRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchDevicesRequest_FieldPathSelectorParent:
		return &WatchDevicesRequest_FieldTerminalPathValue{WatchDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.ParentReference)}
	case WatchDevicesRequest_FieldPathSelectorPageSize:
		return &WatchDevicesRequest_FieldTerminalPathValue{WatchDevicesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchDevicesRequest_FieldPathSelectorPageToken:
		return &WatchDevicesRequest_FieldTerminalPathValue{WatchDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.PagerCursor)}
	case WatchDevicesRequest_FieldPathSelectorOrderBy:
		return &WatchDevicesRequest_FieldTerminalPathValue{WatchDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.OrderBy)}
	case WatchDevicesRequest_FieldPathSelectorResumeToken:
		return &WatchDevicesRequest_FieldTerminalPathValue{WatchDevicesRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchDevicesRequest_FieldPathSelectorFilter:
		return &WatchDevicesRequest_FieldTerminalPathValue{WatchDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.Filter)}
	case WatchDevicesRequest_FieldPathSelectorFieldMask:
		return &WatchDevicesRequest_FieldTerminalPathValue{WatchDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.Device_FieldMask)}
	case WatchDevicesRequest_FieldPathSelectorView:
		return &WatchDevicesRequest_FieldTerminalPathValue{WatchDevicesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchDevicesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchDevicesRequest_FieldTerminalPathValue{WatchDevicesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesRequest: %d", fp.selector))
	}
}

func (fp *WatchDevicesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDevicesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDevicesRequest_FieldPathArrayOfValues {
	fpaov := &WatchDevicesRequest_FieldTerminalPathArrayOfValues{WatchDevicesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDevicesRequest_FieldPathSelectorType:
		return &WatchDevicesRequest_FieldTerminalPathArrayOfValues{WatchDevicesRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchDevicesRequest_FieldPathSelectorParent:
		return &WatchDevicesRequest_FieldTerminalPathArrayOfValues{WatchDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.ParentReference)}
	case WatchDevicesRequest_FieldPathSelectorPageSize:
		return &WatchDevicesRequest_FieldTerminalPathArrayOfValues{WatchDevicesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchDevicesRequest_FieldPathSelectorPageToken:
		return &WatchDevicesRequest_FieldTerminalPathArrayOfValues{WatchDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.PagerCursor)}
	case WatchDevicesRequest_FieldPathSelectorOrderBy:
		return &WatchDevicesRequest_FieldTerminalPathArrayOfValues{WatchDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.OrderBy)}
	case WatchDevicesRequest_FieldPathSelectorResumeToken:
		return &WatchDevicesRequest_FieldTerminalPathArrayOfValues{WatchDevicesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchDevicesRequest_FieldPathSelectorFilter:
		return &WatchDevicesRequest_FieldTerminalPathArrayOfValues{WatchDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.Filter)}
	case WatchDevicesRequest_FieldPathSelectorFieldMask:
		return &WatchDevicesRequest_FieldTerminalPathArrayOfValues{WatchDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.Device_FieldMask)}
	case WatchDevicesRequest_FieldPathSelectorView:
		return &WatchDevicesRequest_FieldTerminalPathArrayOfValues{WatchDevicesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchDevicesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchDevicesRequest_FieldTerminalPathArrayOfValues{WatchDevicesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDevicesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDevicesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDevicesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesRequest: %d", fp.selector))
	}
}

func (fp *WatchDevicesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDevicesRequest_FieldPathValue allows storing values for WatchDevicesRequest fields according to their type
type WatchDevicesRequest_FieldPathValue interface {
	WatchDevicesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDevicesRequest)
	CompareWith(*WatchDevicesRequest) (cmp int, comparable bool)
}

func ParseWatchDevicesRequest_FieldPathValue(pathStr, valueStr string) (WatchDevicesRequest_FieldPathValue, error) {
	fp, err := ParseWatchDevicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDevicesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDevicesRequest_FieldPathValue), nil
}

func MustParseWatchDevicesRequest_FieldPathValue(pathStr, valueStr string) WatchDevicesRequest_FieldPathValue {
	fpv, err := ParseWatchDevicesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDevicesRequest_FieldTerminalPathValue struct {
	WatchDevicesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDevicesRequest_FieldPathValue = (*WatchDevicesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDevicesRequest' as interface{}
func (fpv *WatchDevicesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDevicesRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchDevicesRequest_FieldTerminalPathValue) AsParentValue() (*device.ParentReference, bool) {
	res, ok := fpv.value.(*device.ParentReference)
	return res, ok
}
func (fpv *WatchDevicesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchDevicesRequest_FieldTerminalPathValue) AsPageTokenValue() (*device.PagerCursor, bool) {
	res, ok := fpv.value.(*device.PagerCursor)
	return res, ok
}
func (fpv *WatchDevicesRequest_FieldTerminalPathValue) AsOrderByValue() (*device.OrderBy, bool) {
	res, ok := fpv.value.(*device.OrderBy)
	return res, ok
}
func (fpv *WatchDevicesRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchDevicesRequest_FieldTerminalPathValue) AsFilterValue() (*device.Filter, bool) {
	res, ok := fpv.value.(*device.Filter)
	return res, ok
}
func (fpv *WatchDevicesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device.Device_FieldMask, bool) {
	res, ok := fpv.value.(*device.Device_FieldMask)
	return res, ok
}
func (fpv *WatchDevicesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchDevicesRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchDevicesRequest
func (fpv *WatchDevicesRequest_FieldTerminalPathValue) SetTo(target **WatchDevicesRequest) {
	if *target == nil {
		*target = new(WatchDevicesRequest)
	}
	switch fpv.selector {
	case WatchDevicesRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchDevicesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*device.ParentReference)
	case WatchDevicesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchDevicesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*device.PagerCursor)
	case WatchDevicesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*device.OrderBy)
	case WatchDevicesRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchDevicesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*device.Filter)
	case WatchDevicesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device.Device_FieldMask)
	case WatchDevicesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchDevicesRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDevicesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDevicesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDevicesRequest_FieldTerminalPathValue' with the value under path in 'WatchDevicesRequest'.
func (fpv *WatchDevicesRequest_FieldTerminalPathValue) CompareWith(source *WatchDevicesRequest) (int, bool) {
	switch fpv.selector {
	case WatchDevicesRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDevicesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*device.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDevicesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDevicesRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchDevicesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchDevicesRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDevicesRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchDevicesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchDevicesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDevicesRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDevicesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDevicesRequest))
}

// WatchDevicesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDevicesRequest according to their type
// Present only for array (repeated) types.
type WatchDevicesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDevicesRequest_FieldPath
	ContainsValue(*WatchDevicesRequest) bool
}

// ParseWatchDevicesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDevicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDevicesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDevicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDevicesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDevicesRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchDevicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchDevicesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDevicesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDevicesRequest_FieldTerminalPathArrayItemValue struct {
	WatchDevicesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDevicesRequest_FieldPathArrayItemValue = (*WatchDevicesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDevicesRequest as interface{}
func (fpaiv *WatchDevicesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDevicesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDevicesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDevicesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDevicesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDevicesRequest'
func (fpaiv *WatchDevicesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDevicesRequest) bool {
	slice := fpaiv.WatchDevicesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDevicesRequest_FieldPathArrayOfValues allows storing slice of values for WatchDevicesRequest fields according to their type
type WatchDevicesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDevicesRequest_FieldPath
}

func ParseWatchDevicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDevicesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDevicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDevicesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDevicesRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchDevicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDevicesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDevicesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDevicesRequest_FieldTerminalPathArrayOfValues struct {
	WatchDevicesRequest_FieldTerminalPath
	values interface{}
}

var _ WatchDevicesRequest_FieldPathArrayOfValues = (*WatchDevicesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDevicesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDevicesRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchDevicesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*device.ParentReference) {
			values = append(values, v)
		}
	case WatchDevicesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchDevicesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*device.PagerCursor) {
			values = append(values, v)
		}
	case WatchDevicesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*device.OrderBy) {
			values = append(values, v)
		}
	case WatchDevicesRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchDevicesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*device.Filter) {
			values = append(values, v)
		}
	case WatchDevicesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device.Device_FieldMask) {
			values = append(values, v)
		}
	case WatchDevicesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchDevicesRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDevicesRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchDevicesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*device.ParentReference, bool) {
	res, ok := fpaov.values.([]*device.ParentReference)
	return res, ok
}
func (fpaov *WatchDevicesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchDevicesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*device.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device.PagerCursor)
	return res, ok
}
func (fpaov *WatchDevicesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*device.OrderBy, bool) {
	res, ok := fpaov.values.([]*device.OrderBy)
	return res, ok
}
func (fpaov *WatchDevicesRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchDevicesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*device.Filter, bool) {
	res, ok := fpaov.values.([]*device.Filter)
	return res, ok
}
func (fpaov *WatchDevicesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device.Device_FieldMask, bool) {
	res, ok := fpaov.values.([]*device.Device_FieldMask)
	return res, ok
}
func (fpaov *WatchDevicesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchDevicesRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDevicesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDevicesResponse_FieldPathSelector
	Get(source *WatchDevicesResponse) []interface{}
	GetSingle(source *WatchDevicesResponse) (interface{}, bool)
	ClearValue(item *WatchDevicesResponse)

	// Those methods build corresponding WatchDevicesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDevicesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDevicesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDevicesResponse_FieldPathArrayItemValue
}

type WatchDevicesResponse_FieldPathSelector int32

const (
	WatchDevicesResponse_FieldPathSelectorDeviceChanges   WatchDevicesResponse_FieldPathSelector = 0
	WatchDevicesResponse_FieldPathSelectorIsCurrent       WatchDevicesResponse_FieldPathSelector = 1
	WatchDevicesResponse_FieldPathSelectorPageTokenChange WatchDevicesResponse_FieldPathSelector = 2
	WatchDevicesResponse_FieldPathSelectorResumeToken     WatchDevicesResponse_FieldPathSelector = 3
	WatchDevicesResponse_FieldPathSelectorSnapshotSize    WatchDevicesResponse_FieldPathSelector = 4
	WatchDevicesResponse_FieldPathSelectorIsSoftReset     WatchDevicesResponse_FieldPathSelector = 5
	WatchDevicesResponse_FieldPathSelectorIsHardReset     WatchDevicesResponse_FieldPathSelector = 6
)

func (s WatchDevicesResponse_FieldPathSelector) String() string {
	switch s {
	case WatchDevicesResponse_FieldPathSelectorDeviceChanges:
		return "device_changes"
	case WatchDevicesResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchDevicesResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchDevicesResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchDevicesResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchDevicesResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", s))
	}
}

func BuildWatchDevicesResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchDevicesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDevicesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device_changes", "deviceChanges", "device-changes":
			return &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorDeviceChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchDevicesResponse_FieldTerminalPath{selector: WatchDevicesResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchDevicesResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchDevicesResponse_FieldSubPath{selector: WatchDevicesResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDevicesResponse", fp)
}

func ParseWatchDevicesResponse_FieldPath(rawField string) (WatchDevicesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDevicesResponse_FieldPath(fp)
}

func MustParseWatchDevicesResponse_FieldPath(rawField string) WatchDevicesResponse_FieldPath {
	fp, err := ParseWatchDevicesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDevicesResponse_FieldTerminalPath struct {
	selector WatchDevicesResponse_FieldPathSelector
}

var _ WatchDevicesResponse_FieldPath = (*WatchDevicesResponse_FieldTerminalPath)(nil)

func (fp *WatchDevicesResponse_FieldTerminalPath) Selector() WatchDevicesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDevicesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDevicesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDevicesResponse
func (fp *WatchDevicesResponse_FieldTerminalPath) Get(source *WatchDevicesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDevicesResponse_FieldPathSelectorDeviceChanges:
			for _, value := range source.GetDeviceChanges() {
				values = append(values, value)
			}
		case WatchDevicesResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchDevicesResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchDevicesResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchDevicesResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchDevicesResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDevicesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDevicesResponse))
}

// GetSingle returns value pointed by specific field of from source WatchDevicesResponse
func (fp *WatchDevicesResponse_FieldTerminalPath) GetSingle(source *WatchDevicesResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchDevicesResponse_FieldPathSelectorDeviceChanges:
		res := source.GetDeviceChanges()
		return res, res != nil
	case WatchDevicesResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchDevicesResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchDevicesResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchDevicesResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchDevicesResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fp.selector))
	}
}

func (fp *WatchDevicesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDevicesResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchDevicesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDevicesResponse_FieldPathSelectorDeviceChanges:
		return ([]*device.DeviceChange)(nil)
	case WatchDevicesResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
		return (*WatchDevicesResponse_PageTokenChange)(nil)
	case WatchDevicesResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchDevicesResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchDevicesResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchDevicesResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fp.selector))
	}
}

func (fp *WatchDevicesResponse_FieldTerminalPath) ClearValue(item *WatchDevicesResponse) {
	if item != nil {
		switch fp.selector {
		case WatchDevicesResponse_FieldPathSelectorDeviceChanges:
			item.DeviceChanges = nil
		case WatchDevicesResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchDevicesResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchDevicesResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchDevicesResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchDevicesResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchDevicesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDevicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDevicesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDevicesResponse_FieldPathSelectorDeviceChanges ||
		fp.selector == WatchDevicesResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchDevicesResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchDevicesResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchDevicesResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchDevicesResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchDevicesResponse_FieldTerminalPath) WithIValue(value interface{}) WatchDevicesResponse_FieldPathValue {
	switch fp.selector {
	case WatchDevicesResponse_FieldPathSelectorDeviceChanges:
		return &WatchDevicesResponse_FieldTerminalPathValue{WatchDevicesResponse_FieldTerminalPath: *fp, value: value.([]*device.DeviceChange)}
	case WatchDevicesResponse_FieldPathSelectorIsCurrent:
		return &WatchDevicesResponse_FieldTerminalPathValue{WatchDevicesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
		return &WatchDevicesResponse_FieldTerminalPathValue{WatchDevicesResponse_FieldTerminalPath: *fp, value: value.(*WatchDevicesResponse_PageTokenChange)}
	case WatchDevicesResponse_FieldPathSelectorResumeToken:
		return &WatchDevicesResponse_FieldTerminalPathValue{WatchDevicesResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchDevicesResponse_FieldPathSelectorSnapshotSize:
		return &WatchDevicesResponse_FieldTerminalPathValue{WatchDevicesResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchDevicesResponse_FieldPathSelectorIsSoftReset:
		return &WatchDevicesResponse_FieldTerminalPathValue{WatchDevicesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchDevicesResponse_FieldPathSelectorIsHardReset:
		return &WatchDevicesResponse_FieldTerminalPathValue{WatchDevicesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fp.selector))
	}
}

func (fp *WatchDevicesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDevicesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDevicesResponse_FieldPathArrayOfValues {
	fpaov := &WatchDevicesResponse_FieldTerminalPathArrayOfValues{WatchDevicesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDevicesResponse_FieldPathSelectorDeviceChanges:
		return &WatchDevicesResponse_FieldTerminalPathArrayOfValues{WatchDevicesResponse_FieldTerminalPath: *fp, values: values.([][]*device.DeviceChange)}
	case WatchDevicesResponse_FieldPathSelectorIsCurrent:
		return &WatchDevicesResponse_FieldTerminalPathArrayOfValues{WatchDevicesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
		return &WatchDevicesResponse_FieldTerminalPathArrayOfValues{WatchDevicesResponse_FieldTerminalPath: *fp, values: values.([]*WatchDevicesResponse_PageTokenChange)}
	case WatchDevicesResponse_FieldPathSelectorResumeToken:
		return &WatchDevicesResponse_FieldTerminalPathArrayOfValues{WatchDevicesResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchDevicesResponse_FieldPathSelectorSnapshotSize:
		return &WatchDevicesResponse_FieldTerminalPathArrayOfValues{WatchDevicesResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchDevicesResponse_FieldPathSelectorIsSoftReset:
		return &WatchDevicesResponse_FieldTerminalPathArrayOfValues{WatchDevicesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchDevicesResponse_FieldPathSelectorIsHardReset:
		return &WatchDevicesResponse_FieldTerminalPathArrayOfValues{WatchDevicesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDevicesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDevicesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDevicesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchDevicesResponse_FieldPathSelectorDeviceChanges:
		return &WatchDevicesResponse_FieldTerminalPathArrayItemValue{WatchDevicesResponse_FieldTerminalPath: *fp, value: value.(*device.DeviceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fp.selector))
	}
}

func (fp *WatchDevicesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchDevicesResponse_FieldSubPath struct {
	selector WatchDevicesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchDevicesResponse_FieldPath = (*WatchDevicesResponse_FieldSubPath)(nil)

func (fps *WatchDevicesResponse_FieldSubPath) Selector() WatchDevicesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchDevicesResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchDevicesResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchDevicesResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchDevicesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchDevicesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchDevicesResponse
func (fps *WatchDevicesResponse_FieldSubPath) Get(source *WatchDevicesResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchDevicesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchDevicesResponse))
}

// GetSingle returns value of selected field from source WatchDevicesResponse
func (fps *WatchDevicesResponse_FieldSubPath) GetSingle(source *WatchDevicesResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fps.selector))
	}
}

func (fps *WatchDevicesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchDevicesResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchDevicesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchDevicesResponse_FieldSubPath) ClearValue(item *WatchDevicesResponse) {
	if item != nil {
		switch fps.selector {
		case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchDevicesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchDevicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchDevicesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchDevicesResponse_FieldSubPath) WithIValue(value interface{}) WatchDevicesResponse_FieldPathValue {
	return &WatchDevicesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchDevicesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchDevicesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchDevicesResponse_FieldPathArrayOfValues {
	return &WatchDevicesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchDevicesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchDevicesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchDevicesResponse_FieldPathArrayItemValue {
	return &WatchDevicesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchDevicesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchDevicesResponse_FieldPathValue allows storing values for WatchDevicesResponse fields according to their type
type WatchDevicesResponse_FieldPathValue interface {
	WatchDevicesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDevicesResponse)
	CompareWith(*WatchDevicesResponse) (cmp int, comparable bool)
}

func ParseWatchDevicesResponse_FieldPathValue(pathStr, valueStr string) (WatchDevicesResponse_FieldPathValue, error) {
	fp, err := ParseWatchDevicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDevicesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDevicesResponse_FieldPathValue), nil
}

func MustParseWatchDevicesResponse_FieldPathValue(pathStr, valueStr string) WatchDevicesResponse_FieldPathValue {
	fpv, err := ParseWatchDevicesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDevicesResponse_FieldTerminalPathValue struct {
	WatchDevicesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDevicesResponse_FieldPathValue = (*WatchDevicesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDevicesResponse' as interface{}
func (fpv *WatchDevicesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDevicesResponse_FieldTerminalPathValue) AsDeviceChangesValue() ([]*device.DeviceChange, bool) {
	res, ok := fpv.value.([]*device.DeviceChange)
	return res, ok
}
func (fpv *WatchDevicesResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchDevicesResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchDevicesResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchDevicesResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchDevicesResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchDevicesResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchDevicesResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchDevicesResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchDevicesResponse
func (fpv *WatchDevicesResponse_FieldTerminalPathValue) SetTo(target **WatchDevicesResponse) {
	if *target == nil {
		*target = new(WatchDevicesResponse)
	}
	switch fpv.selector {
	case WatchDevicesResponse_FieldPathSelectorDeviceChanges:
		(*target).DeviceChanges = fpv.value.([]*device.DeviceChange)
	case WatchDevicesResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchDevicesResponse_PageTokenChange)
	case WatchDevicesResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchDevicesResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchDevicesResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchDevicesResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDevicesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDevicesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDevicesResponse_FieldTerminalPathValue' with the value under path in 'WatchDevicesResponse'.
func (fpv *WatchDevicesResponse_FieldTerminalPathValue) CompareWith(source *WatchDevicesResponse) (int, bool) {
	switch fpv.selector {
	case WatchDevicesResponse_FieldPathSelectorDeviceChanges:
		return 0, false
	case WatchDevicesResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchDevicesResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDevicesResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDevicesResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDevicesResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDevicesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDevicesResponse))
}

type WatchDevicesResponse_FieldSubPathValue struct {
	WatchDevicesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchDevicesResponse_FieldPathValue = (*WatchDevicesResponse_FieldSubPathValue)(nil)

func (fpvs *WatchDevicesResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchDevicesResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchDevicesResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchDevicesResponse_FieldSubPathValue) SetTo(target **WatchDevicesResponse) {
	if *target == nil {
		*target = new(WatchDevicesResponse)
	}
	switch fpvs.Selector() {
	case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchDevicesResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchDevicesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDevicesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchDevicesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchDevicesResponse_FieldSubPathValue) CompareWith(source *WatchDevicesResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchDevicesResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchDevicesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchDevicesResponse))
}

// WatchDevicesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDevicesResponse according to their type
// Present only for array (repeated) types.
type WatchDevicesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDevicesResponse_FieldPath
	ContainsValue(*WatchDevicesResponse) bool
}

// ParseWatchDevicesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDevicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDevicesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDevicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDevicesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDevicesResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchDevicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchDevicesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDevicesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDevicesResponse_FieldTerminalPathArrayItemValue struct {
	WatchDevicesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDevicesResponse_FieldPathArrayItemValue = (*WatchDevicesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDevicesResponse as interface{}
func (fpaiv *WatchDevicesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchDevicesResponse_FieldTerminalPathArrayItemValue) AsDeviceChangesItemValue() (*device.DeviceChange, bool) {
	res, ok := fpaiv.value.(*device.DeviceChange)
	return res, ok
}

func (fpaiv *WatchDevicesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDevicesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDevicesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDevicesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDevicesResponse'
func (fpaiv *WatchDevicesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDevicesResponse) bool {
	slice := fpaiv.WatchDevicesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchDevicesResponse_FieldSubPathArrayItemValue struct {
	WatchDevicesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchDevicesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchDevicesResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchDevicesResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchDevicesResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDevicesResponse'
func (fpaivs *WatchDevicesResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchDevicesResponse) bool {
	switch fpaivs.Selector() {
	case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchDevicesResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse: %d", fpaivs.Selector()))
	}
}

// WatchDevicesResponse_FieldPathArrayOfValues allows storing slice of values for WatchDevicesResponse fields according to their type
type WatchDevicesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDevicesResponse_FieldPath
}

func ParseWatchDevicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDevicesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDevicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDevicesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDevicesResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchDevicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDevicesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDevicesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDevicesResponse_FieldTerminalPathArrayOfValues struct {
	WatchDevicesResponse_FieldTerminalPath
	values interface{}
}

var _ WatchDevicesResponse_FieldPathArrayOfValues = (*WatchDevicesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDevicesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDevicesResponse_FieldPathSelectorDeviceChanges:
		for _, v := range fpaov.values.([][]*device.DeviceChange) {
			values = append(values, v)
		}
	case WatchDevicesResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchDevicesResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchDevicesResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchDevicesResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchDevicesResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchDevicesResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchDevicesResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDevicesResponse_FieldTerminalPathArrayOfValues) AsDeviceChangesArrayOfValues() ([][]*device.DeviceChange, bool) {
	res, ok := fpaov.values.([][]*device.DeviceChange)
	return res, ok
}
func (fpaov *WatchDevicesResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchDevicesResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchDevicesResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchDevicesResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchDevicesResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchDevicesResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchDevicesResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchDevicesResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchDevicesResponse_FieldSubPathArrayOfValues struct {
	WatchDevicesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchDevicesResponse_FieldPathArrayOfValues = (*WatchDevicesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchDevicesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchDevicesResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchDevicesResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchDevicesResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDevicesResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDevicesResponsePageTokenChange_FieldPathSelector
	Get(source *WatchDevicesResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchDevicesResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchDevicesResponse_PageTokenChange)

	// Those methods build corresponding WatchDevicesResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDevicesResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDevicesResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDevicesResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchDevicesResponsePageTokenChange_FieldPathSelector int32

const (
	WatchDevicesResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchDevicesResponsePageTokenChange_FieldPathSelector = 0
	WatchDevicesResponsePageTokenChange_FieldPathSelectorNextPageToken WatchDevicesResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchDevicesResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchDevicesResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchDevicesResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDevicesResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchDevicesResponsePageTokenChange_FieldTerminalPath{selector: WatchDevicesResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchDevicesResponsePageTokenChange_FieldTerminalPath{selector: WatchDevicesResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDevicesResponse_PageTokenChange", fp)
}

func ParseWatchDevicesResponsePageTokenChange_FieldPath(rawField string) (WatchDevicesResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDevicesResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchDevicesResponsePageTokenChange_FieldPath(rawField string) WatchDevicesResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchDevicesResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDevicesResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchDevicesResponsePageTokenChange_FieldPathSelector
}

var _ WatchDevicesResponsePageTokenChange_FieldPath = (*WatchDevicesResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) Selector() WatchDevicesResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDevicesResponse_PageTokenChange
func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) Get(source *WatchDevicesResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDevicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchDevicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDevicesResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchDevicesResponse_PageTokenChange
func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchDevicesResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDevicesResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*device.PagerCursor)(nil)
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*device.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchDevicesResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchDevicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchDevicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDevicesResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDevicesResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchDevicesResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchDevicesResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchDevicesResponsePageTokenChange_FieldTerminalPathValue{WatchDevicesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*device.PagerCursor)}
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchDevicesResponsePageTokenChange_FieldTerminalPathValue{WatchDevicesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*device.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDevicesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchDevicesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDevicesResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchDevicesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDevicesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*device.PagerCursor)}
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchDevicesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDevicesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*device.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDevicesResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDevicesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDevicesResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchDevicesResponsePageTokenChange_FieldPathValue interface {
	WatchDevicesResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDevicesResponse_PageTokenChange)
	CompareWith(*WatchDevicesResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchDevicesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchDevicesResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchDevicesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDevicesResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchDevicesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchDevicesResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchDevicesResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDevicesResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchDevicesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchDevicesResponsePageTokenChange_FieldPathValue = (*WatchDevicesResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchDevicesResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDevicesResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*device.PagerCursor, bool) {
	res, ok := fpv.value.(*device.PagerCursor)
	return res, ok
}
func (fpv *WatchDevicesResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*device.PagerCursor, bool) {
	res, ok := fpv.value.(*device.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchDevicesResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchDevicesResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchDevicesResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*device.PagerCursor)
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*device.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchDevicesResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDevicesResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDevicesResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchDevicesResponse_PageTokenChange'.
func (fpv *WatchDevicesResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchDevicesResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDevicesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchDevicesResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDevicesResponse_PageTokenChange))
}

// WatchDevicesResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchDevicesResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDevicesResponsePageTokenChange_FieldPath
	ContainsValue(*WatchDevicesResponse_PageTokenChange) bool
}

// ParseWatchDevicesResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDevicesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDevicesResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDevicesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDevicesResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchDevicesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchDevicesResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDevicesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDevicesResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchDevicesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchDevicesResponsePageTokenChange_FieldPathArrayItemValue = (*WatchDevicesResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDevicesResponse_PageTokenChange as interface{}
func (fpaiv *WatchDevicesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDevicesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDevicesResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDevicesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDevicesResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchDevicesResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDevicesResponse_PageTokenChange) bool {
	slice := fpaiv.WatchDevicesResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDevicesResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchDevicesResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDevicesResponsePageTokenChange_FieldPath
}

func ParseWatchDevicesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDevicesResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDevicesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDevicesResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchDevicesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDevicesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDevicesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDevicesResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchDevicesResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchDevicesResponsePageTokenChange_FieldPathArrayOfValues = (*WatchDevicesResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDevicesResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*device.PagerCursor) {
			values = append(values, v)
		}
	case WatchDevicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*device.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDevicesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*device.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device.PagerCursor)
	return res, ok
}
func (fpaov *WatchDevicesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*device.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateDeviceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateDeviceRequest_FieldPathSelector
	Get(source *CreateDeviceRequest) []interface{}
	GetSingle(source *CreateDeviceRequest) (interface{}, bool)
	ClearValue(item *CreateDeviceRequest)

	// Those methods build corresponding CreateDeviceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateDeviceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateDeviceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateDeviceRequest_FieldPathArrayItemValue
}

type CreateDeviceRequest_FieldPathSelector int32

const (
	CreateDeviceRequest_FieldPathSelectorParent CreateDeviceRequest_FieldPathSelector = 0
	CreateDeviceRequest_FieldPathSelectorDevice CreateDeviceRequest_FieldPathSelector = 1
)

func (s CreateDeviceRequest_FieldPathSelector) String() string {
	switch s {
	case CreateDeviceRequest_FieldPathSelectorParent:
		return "parent"
	case CreateDeviceRequest_FieldPathSelectorDevice:
		return "device"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", s))
	}
}

func BuildCreateDeviceRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateDeviceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateDeviceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateDeviceRequest_FieldTerminalPath{selector: CreateDeviceRequest_FieldPathSelectorParent}, nil
		case "device":
			return &CreateDeviceRequest_FieldTerminalPath{selector: CreateDeviceRequest_FieldPathSelectorDevice}, nil
		}
	} else {
		switch fp[0] {
		case "device":
			if subpath, err := device.BuildDevice_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateDeviceRequest_FieldSubPath{selector: CreateDeviceRequest_FieldPathSelectorDevice, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateDeviceRequest", fp)
}

func ParseCreateDeviceRequest_FieldPath(rawField string) (CreateDeviceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateDeviceRequest_FieldPath(fp)
}

func MustParseCreateDeviceRequest_FieldPath(rawField string) CreateDeviceRequest_FieldPath {
	fp, err := ParseCreateDeviceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateDeviceRequest_FieldTerminalPath struct {
	selector CreateDeviceRequest_FieldPathSelector
}

var _ CreateDeviceRequest_FieldPath = (*CreateDeviceRequest_FieldTerminalPath)(nil)

func (fp *CreateDeviceRequest_FieldTerminalPath) Selector() CreateDeviceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateDeviceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateDeviceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateDeviceRequest
func (fp *CreateDeviceRequest_FieldTerminalPath) Get(source *CreateDeviceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateDeviceRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateDeviceRequest_FieldPathSelectorDevice:
			if source.Device != nil {
				values = append(values, source.Device)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateDeviceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateDeviceRequest))
}

// GetSingle returns value pointed by specific field of from source CreateDeviceRequest
func (fp *CreateDeviceRequest_FieldTerminalPath) GetSingle(source *CreateDeviceRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateDeviceRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateDeviceRequest_FieldPathSelectorDevice:
		res := source.GetDevice()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fp.selector))
	}
}

func (fp *CreateDeviceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateDeviceRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateDeviceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateDeviceRequest_FieldPathSelectorParent:
		return (*device.ParentReference)(nil)
	case CreateDeviceRequest_FieldPathSelectorDevice:
		return (*device.Device)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fp.selector))
	}
}

func (fp *CreateDeviceRequest_FieldTerminalPath) ClearValue(item *CreateDeviceRequest) {
	if item != nil {
		switch fp.selector {
		case CreateDeviceRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateDeviceRequest_FieldPathSelectorDevice:
			item.Device = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateDeviceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateDeviceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateDeviceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateDeviceRequest_FieldPathSelectorParent
}

func (fp *CreateDeviceRequest_FieldTerminalPath) WithIValue(value interface{}) CreateDeviceRequest_FieldPathValue {
	switch fp.selector {
	case CreateDeviceRequest_FieldPathSelectorParent:
		return &CreateDeviceRequest_FieldTerminalPathValue{CreateDeviceRequest_FieldTerminalPath: *fp, value: value.(*device.ParentReference)}
	case CreateDeviceRequest_FieldPathSelectorDevice:
		return &CreateDeviceRequest_FieldTerminalPathValue{CreateDeviceRequest_FieldTerminalPath: *fp, value: value.(*device.Device)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fp.selector))
	}
}

func (fp *CreateDeviceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateDeviceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateDeviceRequest_FieldPathArrayOfValues {
	fpaov := &CreateDeviceRequest_FieldTerminalPathArrayOfValues{CreateDeviceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateDeviceRequest_FieldPathSelectorParent:
		return &CreateDeviceRequest_FieldTerminalPathArrayOfValues{CreateDeviceRequest_FieldTerminalPath: *fp, values: values.([]*device.ParentReference)}
	case CreateDeviceRequest_FieldPathSelectorDevice:
		return &CreateDeviceRequest_FieldTerminalPathArrayOfValues{CreateDeviceRequest_FieldTerminalPath: *fp, values: values.([]*device.Device)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateDeviceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateDeviceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateDeviceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fp.selector))
	}
}

func (fp *CreateDeviceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateDeviceRequest_FieldSubPath struct {
	selector CreateDeviceRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateDeviceRequest_FieldPath = (*CreateDeviceRequest_FieldSubPath)(nil)

func (fps *CreateDeviceRequest_FieldSubPath) Selector() CreateDeviceRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateDeviceRequest_FieldSubPath) AsDeviceSubPath() (device.Device_FieldPath, bool) {
	res, ok := fps.subPath.(device.Device_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateDeviceRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateDeviceRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateDeviceRequest
func (fps *CreateDeviceRequest_FieldSubPath) Get(source *CreateDeviceRequest) (values []interface{}) {
	if asDeviceFieldPath, ok := fps.AsDeviceSubPath(); ok {
		values = append(values, asDeviceFieldPath.Get(source.GetDevice())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateDeviceRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateDeviceRequest))
}

// GetSingle returns value of selected field from source CreateDeviceRequest
func (fps *CreateDeviceRequest_FieldSubPath) GetSingle(source *CreateDeviceRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateDeviceRequest_FieldPathSelectorDevice:
		if source.GetDevice() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDevice())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fps.selector))
	}
}

func (fps *CreateDeviceRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateDeviceRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateDeviceRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateDeviceRequest_FieldSubPath) ClearValue(item *CreateDeviceRequest) {
	if item != nil {
		switch fps.selector {
		case CreateDeviceRequest_FieldPathSelectorDevice:
			fps.subPath.ClearValueRaw(item.Device)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateDeviceRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateDeviceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateDeviceRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateDeviceRequest_FieldSubPath) WithIValue(value interface{}) CreateDeviceRequest_FieldPathValue {
	return &CreateDeviceRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateDeviceRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateDeviceRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateDeviceRequest_FieldPathArrayOfValues {
	return &CreateDeviceRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateDeviceRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateDeviceRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateDeviceRequest_FieldPathArrayItemValue {
	return &CreateDeviceRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateDeviceRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateDeviceRequest_FieldPathValue allows storing values for CreateDeviceRequest fields according to their type
type CreateDeviceRequest_FieldPathValue interface {
	CreateDeviceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateDeviceRequest)
	CompareWith(*CreateDeviceRequest) (cmp int, comparable bool)
}

func ParseCreateDeviceRequest_FieldPathValue(pathStr, valueStr string) (CreateDeviceRequest_FieldPathValue, error) {
	fp, err := ParseCreateDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDeviceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateDeviceRequest_FieldPathValue), nil
}

func MustParseCreateDeviceRequest_FieldPathValue(pathStr, valueStr string) CreateDeviceRequest_FieldPathValue {
	fpv, err := ParseCreateDeviceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateDeviceRequest_FieldTerminalPathValue struct {
	CreateDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ CreateDeviceRequest_FieldPathValue = (*CreateDeviceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateDeviceRequest' as interface{}
func (fpv *CreateDeviceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateDeviceRequest_FieldTerminalPathValue) AsParentValue() (*device.ParentReference, bool) {
	res, ok := fpv.value.(*device.ParentReference)
	return res, ok
}
func (fpv *CreateDeviceRequest_FieldTerminalPathValue) AsDeviceValue() (*device.Device, bool) {
	res, ok := fpv.value.(*device.Device)
	return res, ok
}

// SetTo stores value for selected field for object CreateDeviceRequest
func (fpv *CreateDeviceRequest_FieldTerminalPathValue) SetTo(target **CreateDeviceRequest) {
	if *target == nil {
		*target = new(CreateDeviceRequest)
	}
	switch fpv.selector {
	case CreateDeviceRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*device.ParentReference)
	case CreateDeviceRequest_FieldPathSelectorDevice:
		(*target).Device = fpv.value.(*device.Device)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *CreateDeviceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateDeviceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateDeviceRequest_FieldTerminalPathValue' with the value under path in 'CreateDeviceRequest'.
func (fpv *CreateDeviceRequest_FieldTerminalPathValue) CompareWith(source *CreateDeviceRequest) (int, bool) {
	switch fpv.selector {
	case CreateDeviceRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*device.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateDeviceRequest_FieldPathSelectorDevice:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *CreateDeviceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateDeviceRequest))
}

type CreateDeviceRequest_FieldSubPathValue struct {
	CreateDeviceRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateDeviceRequest_FieldPathValue = (*CreateDeviceRequest_FieldSubPathValue)(nil)

func (fpvs *CreateDeviceRequest_FieldSubPathValue) AsDevicePathValue() (device.Device_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device.Device_FieldPathValue)
	return res, ok
}

func (fpvs *CreateDeviceRequest_FieldSubPathValue) SetTo(target **CreateDeviceRequest) {
	if *target == nil {
		*target = new(CreateDeviceRequest)
	}
	switch fpvs.Selector() {
	case CreateDeviceRequest_FieldPathSelectorDevice:
		fpvs.subPathValue.(device.Device_FieldPathValue).SetTo(&(*target).Device)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateDeviceRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateDeviceRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateDeviceRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateDeviceRequest_FieldSubPathValue) CompareWith(source *CreateDeviceRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateDeviceRequest_FieldPathSelectorDevice:
		return fpvs.subPathValue.(device.Device_FieldPathValue).CompareWith(source.GetDevice())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateDeviceRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateDeviceRequest))
}

// CreateDeviceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateDeviceRequest according to their type
// Present only for array (repeated) types.
type CreateDeviceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateDeviceRequest_FieldPath
	ContainsValue(*CreateDeviceRequest) bool
}

// ParseCreateDeviceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateDeviceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDeviceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateDeviceRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateDeviceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateDeviceRequest_FieldTerminalPathArrayItemValue struct {
	CreateDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ CreateDeviceRequest_FieldPathArrayItemValue = (*CreateDeviceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateDeviceRequest as interface{}
func (fpaiv *CreateDeviceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateDeviceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateDeviceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateDeviceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateDeviceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateDeviceRequest'
func (fpaiv *CreateDeviceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateDeviceRequest) bool {
	slice := fpaiv.CreateDeviceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateDeviceRequest_FieldSubPathArrayItemValue struct {
	CreateDeviceRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateDeviceRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateDeviceRequest_FieldSubPathArrayItemValue) AsDevicePathItemValue() (device.Device_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device.Device_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateDeviceRequest'
func (fpaivs *CreateDeviceRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateDeviceRequest) bool {
	switch fpaivs.Selector() {
	case CreateDeviceRequest_FieldPathSelectorDevice:
		return fpaivs.subPathItemValue.(device.Device_FieldPathArrayItemValue).ContainsValue(source.GetDevice())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceRequest: %d", fpaivs.Selector()))
	}
}

// CreateDeviceRequest_FieldPathArrayOfValues allows storing slice of values for CreateDeviceRequest fields according to their type
type CreateDeviceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateDeviceRequest_FieldPath
}

func ParseCreateDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateDeviceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDeviceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateDeviceRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateDeviceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateDeviceRequest_FieldTerminalPathArrayOfValues struct {
	CreateDeviceRequest_FieldTerminalPath
	values interface{}
}

var _ CreateDeviceRequest_FieldPathArrayOfValues = (*CreateDeviceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateDeviceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateDeviceRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*device.ParentReference) {
			values = append(values, v)
		}
	case CreateDeviceRequest_FieldPathSelectorDevice:
		for _, v := range fpaov.values.([]*device.Device) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateDeviceRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*device.ParentReference, bool) {
	res, ok := fpaov.values.([]*device.ParentReference)
	return res, ok
}
func (fpaov *CreateDeviceRequest_FieldTerminalPathArrayOfValues) AsDeviceArrayOfValues() ([]*device.Device, bool) {
	res, ok := fpaov.values.([]*device.Device)
	return res, ok
}

type CreateDeviceRequest_FieldSubPathArrayOfValues struct {
	CreateDeviceRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateDeviceRequest_FieldPathArrayOfValues = (*CreateDeviceRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateDeviceRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateDeviceRequest_FieldSubPathArrayOfValues) AsDevicePathArrayOfValues() (device.Device_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device.Device_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateDeviceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateDeviceRequest_FieldPathSelector
	Get(source *UpdateDeviceRequest) []interface{}
	GetSingle(source *UpdateDeviceRequest) (interface{}, bool)
	ClearValue(item *UpdateDeviceRequest)

	// Those methods build corresponding UpdateDeviceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateDeviceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateDeviceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateDeviceRequest_FieldPathArrayItemValue
}

type UpdateDeviceRequest_FieldPathSelector int32

const (
	UpdateDeviceRequest_FieldPathSelectorDevice     UpdateDeviceRequest_FieldPathSelector = 0
	UpdateDeviceRequest_FieldPathSelectorUpdateMask UpdateDeviceRequest_FieldPathSelector = 1
	UpdateDeviceRequest_FieldPathSelectorCas        UpdateDeviceRequest_FieldPathSelector = 2
)

func (s UpdateDeviceRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateDeviceRequest_FieldPathSelectorDevice:
		return "device"
	case UpdateDeviceRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateDeviceRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", s))
	}
}

func BuildUpdateDeviceRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateDeviceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateDeviceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device":
			return &UpdateDeviceRequest_FieldTerminalPath{selector: UpdateDeviceRequest_FieldPathSelectorDevice}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateDeviceRequest_FieldTerminalPath{selector: UpdateDeviceRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateDeviceRequest_FieldTerminalPath{selector: UpdateDeviceRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "device":
			if subpath, err := device.BuildDevice_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDeviceRequest_FieldSubPath{selector: UpdateDeviceRequest_FieldPathSelectorDevice, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateDeviceRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDeviceRequest_FieldSubPath{selector: UpdateDeviceRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateDeviceRequest", fp)
}

func ParseUpdateDeviceRequest_FieldPath(rawField string) (UpdateDeviceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateDeviceRequest_FieldPath(fp)
}

func MustParseUpdateDeviceRequest_FieldPath(rawField string) UpdateDeviceRequest_FieldPath {
	fp, err := ParseUpdateDeviceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateDeviceRequest_FieldTerminalPath struct {
	selector UpdateDeviceRequest_FieldPathSelector
}

var _ UpdateDeviceRequest_FieldPath = (*UpdateDeviceRequest_FieldTerminalPath)(nil)

func (fp *UpdateDeviceRequest_FieldTerminalPath) Selector() UpdateDeviceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateDeviceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateDeviceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateDeviceRequest
func (fp *UpdateDeviceRequest_FieldTerminalPath) Get(source *UpdateDeviceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateDeviceRequest_FieldPathSelectorDevice:
			if source.Device != nil {
				values = append(values, source.Device)
			}
		case UpdateDeviceRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateDeviceRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateDeviceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateDeviceRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateDeviceRequest
func (fp *UpdateDeviceRequest_FieldTerminalPath) GetSingle(source *UpdateDeviceRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateDeviceRequest_FieldPathSelectorDevice:
		res := source.GetDevice()
		return res, res != nil
	case UpdateDeviceRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateDeviceRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeviceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateDeviceRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateDeviceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateDeviceRequest_FieldPathSelectorDevice:
		return (*device.Device)(nil)
	case UpdateDeviceRequest_FieldPathSelectorUpdateMask:
		return (*device.Device_FieldMask)(nil)
	case UpdateDeviceRequest_FieldPathSelectorCas:
		return (*UpdateDeviceRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeviceRequest_FieldTerminalPath) ClearValue(item *UpdateDeviceRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateDeviceRequest_FieldPathSelectorDevice:
			item.Device = nil
		case UpdateDeviceRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateDeviceRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateDeviceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateDeviceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateDeviceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateDeviceRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateDeviceRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateDeviceRequest_FieldPathValue {
	switch fp.selector {
	case UpdateDeviceRequest_FieldPathSelectorDevice:
		return &UpdateDeviceRequest_FieldTerminalPathValue{UpdateDeviceRequest_FieldTerminalPath: *fp, value: value.(*device.Device)}
	case UpdateDeviceRequest_FieldPathSelectorUpdateMask:
		return &UpdateDeviceRequest_FieldTerminalPathValue{UpdateDeviceRequest_FieldTerminalPath: *fp, value: value.(*device.Device_FieldMask)}
	case UpdateDeviceRequest_FieldPathSelectorCas:
		return &UpdateDeviceRequest_FieldTerminalPathValue{UpdateDeviceRequest_FieldTerminalPath: *fp, value: value.(*UpdateDeviceRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeviceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateDeviceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateDeviceRequest_FieldPathArrayOfValues {
	fpaov := &UpdateDeviceRequest_FieldTerminalPathArrayOfValues{UpdateDeviceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateDeviceRequest_FieldPathSelectorDevice:
		return &UpdateDeviceRequest_FieldTerminalPathArrayOfValues{UpdateDeviceRequest_FieldTerminalPath: *fp, values: values.([]*device.Device)}
	case UpdateDeviceRequest_FieldPathSelectorUpdateMask:
		return &UpdateDeviceRequest_FieldTerminalPathArrayOfValues{UpdateDeviceRequest_FieldTerminalPath: *fp, values: values.([]*device.Device_FieldMask)}
	case UpdateDeviceRequest_FieldPathSelectorCas:
		return &UpdateDeviceRequest_FieldTerminalPathArrayOfValues{UpdateDeviceRequest_FieldTerminalPath: *fp, values: values.([]*UpdateDeviceRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateDeviceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateDeviceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateDeviceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeviceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateDeviceRequest_FieldSubPath struct {
	selector UpdateDeviceRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateDeviceRequest_FieldPath = (*UpdateDeviceRequest_FieldSubPath)(nil)

func (fps *UpdateDeviceRequest_FieldSubPath) Selector() UpdateDeviceRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateDeviceRequest_FieldSubPath) AsDeviceSubPath() (device.Device_FieldPath, bool) {
	res, ok := fps.subPath.(device.Device_FieldPath)
	return res, ok
}
func (fps *UpdateDeviceRequest_FieldSubPath) AsCasSubPath() (UpdateDeviceRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateDeviceRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateDeviceRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateDeviceRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateDeviceRequest
func (fps *UpdateDeviceRequest_FieldSubPath) Get(source *UpdateDeviceRequest) (values []interface{}) {
	if asDeviceFieldPath, ok := fps.AsDeviceSubPath(); ok {
		values = append(values, asDeviceFieldPath.Get(source.GetDevice())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateDeviceRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateDeviceRequest))
}

// GetSingle returns value of selected field from source UpdateDeviceRequest
func (fps *UpdateDeviceRequest_FieldSubPath) GetSingle(source *UpdateDeviceRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateDeviceRequest_FieldPathSelectorDevice:
		if source.GetDevice() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDevice())
	case UpdateDeviceRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fps.selector))
	}
}

func (fps *UpdateDeviceRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateDeviceRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateDeviceRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateDeviceRequest_FieldSubPath) ClearValue(item *UpdateDeviceRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateDeviceRequest_FieldPathSelectorDevice:
			fps.subPath.ClearValueRaw(item.Device)
		case UpdateDeviceRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateDeviceRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateDeviceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateDeviceRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateDeviceRequest_FieldSubPath) WithIValue(value interface{}) UpdateDeviceRequest_FieldPathValue {
	return &UpdateDeviceRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateDeviceRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateDeviceRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateDeviceRequest_FieldPathArrayOfValues {
	return &UpdateDeviceRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateDeviceRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateDeviceRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateDeviceRequest_FieldPathArrayItemValue {
	return &UpdateDeviceRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateDeviceRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateDeviceRequest_FieldPathValue allows storing values for UpdateDeviceRequest fields according to their type
type UpdateDeviceRequest_FieldPathValue interface {
	UpdateDeviceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateDeviceRequest)
	CompareWith(*UpdateDeviceRequest) (cmp int, comparable bool)
}

func ParseUpdateDeviceRequest_FieldPathValue(pathStr, valueStr string) (UpdateDeviceRequest_FieldPathValue, error) {
	fp, err := ParseUpdateDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDeviceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateDeviceRequest_FieldPathValue), nil
}

func MustParseUpdateDeviceRequest_FieldPathValue(pathStr, valueStr string) UpdateDeviceRequest_FieldPathValue {
	fpv, err := ParseUpdateDeviceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateDeviceRequest_FieldTerminalPathValue struct {
	UpdateDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateDeviceRequest_FieldPathValue = (*UpdateDeviceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateDeviceRequest' as interface{}
func (fpv *UpdateDeviceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateDeviceRequest_FieldTerminalPathValue) AsDeviceValue() (*device.Device, bool) {
	res, ok := fpv.value.(*device.Device)
	return res, ok
}
func (fpv *UpdateDeviceRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*device.Device_FieldMask, bool) {
	res, ok := fpv.value.(*device.Device_FieldMask)
	return res, ok
}
func (fpv *UpdateDeviceRequest_FieldTerminalPathValue) AsCasValue() (*UpdateDeviceRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateDeviceRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateDeviceRequest
func (fpv *UpdateDeviceRequest_FieldTerminalPathValue) SetTo(target **UpdateDeviceRequest) {
	if *target == nil {
		*target = new(UpdateDeviceRequest)
	}
	switch fpv.selector {
	case UpdateDeviceRequest_FieldPathSelectorDevice:
		(*target).Device = fpv.value.(*device.Device)
	case UpdateDeviceRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*device.Device_FieldMask)
	case UpdateDeviceRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateDeviceRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateDeviceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeviceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateDeviceRequest_FieldTerminalPathValue' with the value under path in 'UpdateDeviceRequest'.
func (fpv *UpdateDeviceRequest_FieldTerminalPathValue) CompareWith(source *UpdateDeviceRequest) (int, bool) {
	switch fpv.selector {
	case UpdateDeviceRequest_FieldPathSelectorDevice:
		return 0, false
	case UpdateDeviceRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateDeviceRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateDeviceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateDeviceRequest))
}

type UpdateDeviceRequest_FieldSubPathValue struct {
	UpdateDeviceRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateDeviceRequest_FieldPathValue = (*UpdateDeviceRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateDeviceRequest_FieldSubPathValue) AsDevicePathValue() (device.Device_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device.Device_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateDeviceRequest_FieldSubPathValue) AsCasPathValue() (UpdateDeviceRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateDeviceRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateDeviceRequest_FieldSubPathValue) SetTo(target **UpdateDeviceRequest) {
	if *target == nil {
		*target = new(UpdateDeviceRequest)
	}
	switch fpvs.Selector() {
	case UpdateDeviceRequest_FieldPathSelectorDevice:
		fpvs.subPathValue.(device.Device_FieldPathValue).SetTo(&(*target).Device)
	case UpdateDeviceRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateDeviceRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeviceRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeviceRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateDeviceRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateDeviceRequest_FieldSubPathValue) CompareWith(source *UpdateDeviceRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateDeviceRequest_FieldPathSelectorDevice:
		return fpvs.subPathValue.(device.Device_FieldPathValue).CompareWith(source.GetDevice())
	case UpdateDeviceRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateDeviceRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeviceRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateDeviceRequest))
}

// UpdateDeviceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateDeviceRequest according to their type
// Present only for array (repeated) types.
type UpdateDeviceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateDeviceRequest_FieldPath
	ContainsValue(*UpdateDeviceRequest) bool
}

// ParseUpdateDeviceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateDeviceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDeviceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateDeviceRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateDeviceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateDeviceRequest_FieldTerminalPathArrayItemValue struct {
	UpdateDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateDeviceRequest_FieldPathArrayItemValue = (*UpdateDeviceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateDeviceRequest as interface{}
func (fpaiv *UpdateDeviceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateDeviceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateDeviceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateDeviceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateDeviceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateDeviceRequest'
func (fpaiv *UpdateDeviceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateDeviceRequest) bool {
	slice := fpaiv.UpdateDeviceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateDeviceRequest_FieldSubPathArrayItemValue struct {
	UpdateDeviceRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateDeviceRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateDeviceRequest_FieldSubPathArrayItemValue) AsDevicePathItemValue() (device.Device_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device.Device_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateDeviceRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateDeviceRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateDeviceRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateDeviceRequest'
func (fpaivs *UpdateDeviceRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateDeviceRequest) bool {
	switch fpaivs.Selector() {
	case UpdateDeviceRequest_FieldPathSelectorDevice:
		return fpaivs.subPathItemValue.(device.Device_FieldPathArrayItemValue).ContainsValue(source.GetDevice())
	case UpdateDeviceRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateDeviceRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest: %d", fpaivs.Selector()))
	}
}

// UpdateDeviceRequest_FieldPathArrayOfValues allows storing slice of values for UpdateDeviceRequest fields according to their type
type UpdateDeviceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateDeviceRequest_FieldPath
}

func ParseUpdateDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateDeviceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDeviceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateDeviceRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateDeviceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateDeviceRequest_FieldTerminalPathArrayOfValues struct {
	UpdateDeviceRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateDeviceRequest_FieldPathArrayOfValues = (*UpdateDeviceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateDeviceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateDeviceRequest_FieldPathSelectorDevice:
		for _, v := range fpaov.values.([]*device.Device) {
			values = append(values, v)
		}
	case UpdateDeviceRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*device.Device_FieldMask) {
			values = append(values, v)
		}
	case UpdateDeviceRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateDeviceRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateDeviceRequest_FieldTerminalPathArrayOfValues) AsDeviceArrayOfValues() ([]*device.Device, bool) {
	res, ok := fpaov.values.([]*device.Device)
	return res, ok
}
func (fpaov *UpdateDeviceRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*device.Device_FieldMask, bool) {
	res, ok := fpaov.values.([]*device.Device_FieldMask)
	return res, ok
}
func (fpaov *UpdateDeviceRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateDeviceRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateDeviceRequest_CAS)
	return res, ok
}

type UpdateDeviceRequest_FieldSubPathArrayOfValues struct {
	UpdateDeviceRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateDeviceRequest_FieldPathArrayOfValues = (*UpdateDeviceRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateDeviceRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateDeviceRequest_FieldSubPathArrayOfValues) AsDevicePathArrayOfValues() (device.Device_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device.Device_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateDeviceRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateDeviceRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateDeviceRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateDeviceRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateDeviceRequestCAS_FieldPathSelector
	Get(source *UpdateDeviceRequest_CAS) []interface{}
	GetSingle(source *UpdateDeviceRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateDeviceRequest_CAS)

	// Those methods build corresponding UpdateDeviceRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateDeviceRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateDeviceRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateDeviceRequestCAS_FieldPathArrayItemValue
}

type UpdateDeviceRequestCAS_FieldPathSelector int32

const (
	UpdateDeviceRequestCAS_FieldPathSelectorConditionalState UpdateDeviceRequestCAS_FieldPathSelector = 0
	UpdateDeviceRequestCAS_FieldPathSelectorFieldMask        UpdateDeviceRequestCAS_FieldPathSelector = 1
)

func (s UpdateDeviceRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateDeviceRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", s))
	}
}

func BuildUpdateDeviceRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateDeviceRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateDeviceRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateDeviceRequestCAS_FieldTerminalPath{selector: UpdateDeviceRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateDeviceRequestCAS_FieldTerminalPath{selector: UpdateDeviceRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := device.BuildDevice_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDeviceRequestCAS_FieldSubPath{selector: UpdateDeviceRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateDeviceRequest_CAS", fp)
}

func ParseUpdateDeviceRequestCAS_FieldPath(rawField string) (UpdateDeviceRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateDeviceRequestCAS_FieldPath(fp)
}

func MustParseUpdateDeviceRequestCAS_FieldPath(rawField string) UpdateDeviceRequestCAS_FieldPath {
	fp, err := ParseUpdateDeviceRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateDeviceRequestCAS_FieldTerminalPath struct {
	selector UpdateDeviceRequestCAS_FieldPathSelector
}

var _ UpdateDeviceRequestCAS_FieldPath = (*UpdateDeviceRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) Selector() UpdateDeviceRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateDeviceRequest_CAS
func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) Get(source *UpdateDeviceRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateDeviceRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateDeviceRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateDeviceRequest_CAS
func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) GetSingle(source *UpdateDeviceRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateDeviceRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateDeviceRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
		return (*device.Device)(nil)
	case UpdateDeviceRequestCAS_FieldPathSelectorFieldMask:
		return (*device.Device_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) ClearValue(item *UpdateDeviceRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateDeviceRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateDeviceRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateDeviceRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateDeviceRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateDeviceRequestCAS_FieldTerminalPathValue{UpdateDeviceRequestCAS_FieldTerminalPath: *fp, value: value.(*device.Device)}
	case UpdateDeviceRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateDeviceRequestCAS_FieldTerminalPathValue{UpdateDeviceRequestCAS_FieldTerminalPath: *fp, value: value.(*device.Device_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateDeviceRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateDeviceRequestCAS_FieldTerminalPathArrayOfValues{UpdateDeviceRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateDeviceRequestCAS_FieldTerminalPathArrayOfValues{UpdateDeviceRequestCAS_FieldTerminalPath: *fp, values: values.([]*device.Device)}
	case UpdateDeviceRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateDeviceRequestCAS_FieldTerminalPathArrayOfValues{UpdateDeviceRequestCAS_FieldTerminalPath: *fp, values: values.([]*device.Device_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateDeviceRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeviceRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateDeviceRequestCAS_FieldSubPath struct {
	selector UpdateDeviceRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateDeviceRequestCAS_FieldPath = (*UpdateDeviceRequestCAS_FieldSubPath)(nil)

func (fps *UpdateDeviceRequestCAS_FieldSubPath) Selector() UpdateDeviceRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateDeviceRequestCAS_FieldSubPath) AsConditionalStateSubPath() (device.Device_FieldPath, bool) {
	res, ok := fps.subPath.(device.Device_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateDeviceRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateDeviceRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateDeviceRequest_CAS
func (fps *UpdateDeviceRequestCAS_FieldSubPath) Get(source *UpdateDeviceRequest_CAS) (values []interface{}) {
	if asDeviceFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asDeviceFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateDeviceRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateDeviceRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateDeviceRequest_CAS
func (fps *UpdateDeviceRequestCAS_FieldSubPath) GetSingle(source *UpdateDeviceRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateDeviceRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateDeviceRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateDeviceRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateDeviceRequestCAS_FieldSubPath) ClearValue(item *UpdateDeviceRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateDeviceRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateDeviceRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateDeviceRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateDeviceRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateDeviceRequestCAS_FieldPathValue {
	return &UpdateDeviceRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateDeviceRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateDeviceRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateDeviceRequestCAS_FieldPathArrayOfValues {
	return &UpdateDeviceRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateDeviceRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateDeviceRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateDeviceRequestCAS_FieldPathArrayItemValue {
	return &UpdateDeviceRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateDeviceRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateDeviceRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateDeviceRequestCAS_FieldPathValue interface {
	UpdateDeviceRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateDeviceRequest_CAS)
	CompareWith(*UpdateDeviceRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateDeviceRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateDeviceRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateDeviceRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateDeviceRequestCAS_FieldPathValue), nil
}

func MustParseUpdateDeviceRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateDeviceRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateDeviceRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateDeviceRequestCAS_FieldTerminalPathValue struct {
	UpdateDeviceRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateDeviceRequestCAS_FieldPathValue = (*UpdateDeviceRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateDeviceRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateDeviceRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*device.Device, bool) {
	res, ok := fpv.value.(*device.Device)
	return res, ok
}
func (fpv *UpdateDeviceRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*device.Device_FieldMask, bool) {
	res, ok := fpv.value.(*device.Device_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateDeviceRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateDeviceRequest_CAS) {
	if *target == nil {
		*target = new(UpdateDeviceRequest_CAS)
	}
	switch fpv.selector {
	case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*device.Device)
	case UpdateDeviceRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device.Device_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateDeviceRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeviceRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateDeviceRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateDeviceRequest_CAS'.
func (fpv *UpdateDeviceRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateDeviceRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateDeviceRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateDeviceRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateDeviceRequest_CAS))
}

type UpdateDeviceRequestCAS_FieldSubPathValue struct {
	UpdateDeviceRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateDeviceRequestCAS_FieldPathValue = (*UpdateDeviceRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateDeviceRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (device.Device_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device.Device_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateDeviceRequestCAS_FieldSubPathValue) SetTo(target **UpdateDeviceRequest_CAS) {
	if *target == nil {
		*target = new(UpdateDeviceRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(device.Device_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeviceRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeviceRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateDeviceRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateDeviceRequestCAS_FieldSubPathValue) CompareWith(source *UpdateDeviceRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(device.Device_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeviceRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateDeviceRequest_CAS))
}

// UpdateDeviceRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateDeviceRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateDeviceRequestCAS_FieldPath
	ContainsValue(*UpdateDeviceRequest_CAS) bool
}

// ParseUpdateDeviceRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateDeviceRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateDeviceRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateDeviceRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateDeviceRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateDeviceRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateDeviceRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateDeviceRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateDeviceRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateDeviceRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateDeviceRequestCAS_FieldPathArrayItemValue = (*UpdateDeviceRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateDeviceRequest_CAS as interface{}
func (fpaiv *UpdateDeviceRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateDeviceRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateDeviceRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateDeviceRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateDeviceRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateDeviceRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateDeviceRequest_CAS) bool {
	slice := fpaiv.UpdateDeviceRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateDeviceRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateDeviceRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateDeviceRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateDeviceRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (device.Device_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device.Device_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateDeviceRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateDeviceRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(device.Device_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateDeviceRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateDeviceRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateDeviceRequestCAS_FieldPath
}

func ParseUpdateDeviceRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateDeviceRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateDeviceRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateDeviceRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateDeviceRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateDeviceRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateDeviceRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateDeviceRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateDeviceRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateDeviceRequestCAS_FieldPathArrayOfValues = (*UpdateDeviceRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateDeviceRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateDeviceRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*device.Device) {
			values = append(values, v)
		}
	case UpdateDeviceRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device.Device_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateDeviceRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*device.Device, bool) {
	res, ok := fpaov.values.([]*device.Device)
	return res, ok
}
func (fpaov *UpdateDeviceRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device.Device_FieldMask, bool) {
	res, ok := fpaov.values.([]*device.Device_FieldMask)
	return res, ok
}

type UpdateDeviceRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateDeviceRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateDeviceRequestCAS_FieldPathArrayOfValues = (*UpdateDeviceRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateDeviceRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateDeviceRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (device.Device_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device.Device_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteDeviceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteDeviceRequest_FieldPathSelector
	Get(source *DeleteDeviceRequest) []interface{}
	GetSingle(source *DeleteDeviceRequest) (interface{}, bool)
	ClearValue(item *DeleteDeviceRequest)

	// Those methods build corresponding DeleteDeviceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteDeviceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteDeviceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteDeviceRequest_FieldPathArrayItemValue
}

type DeleteDeviceRequest_FieldPathSelector int32

const (
	DeleteDeviceRequest_FieldPathSelectorName DeleteDeviceRequest_FieldPathSelector = 0
)

func (s DeleteDeviceRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteDeviceRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceRequest: %d", s))
	}
}

func BuildDeleteDeviceRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteDeviceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteDeviceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteDeviceRequest_FieldTerminalPath{selector: DeleteDeviceRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteDeviceRequest", fp)
}

func ParseDeleteDeviceRequest_FieldPath(rawField string) (DeleteDeviceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteDeviceRequest_FieldPath(fp)
}

func MustParseDeleteDeviceRequest_FieldPath(rawField string) DeleteDeviceRequest_FieldPath {
	fp, err := ParseDeleteDeviceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteDeviceRequest_FieldTerminalPath struct {
	selector DeleteDeviceRequest_FieldPathSelector
}

var _ DeleteDeviceRequest_FieldPath = (*DeleteDeviceRequest_FieldTerminalPath)(nil)

func (fp *DeleteDeviceRequest_FieldTerminalPath) Selector() DeleteDeviceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteDeviceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteDeviceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteDeviceRequest
func (fp *DeleteDeviceRequest_FieldTerminalPath) Get(source *DeleteDeviceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteDeviceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteDeviceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteDeviceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteDeviceRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteDeviceRequest
func (fp *DeleteDeviceRequest_FieldTerminalPath) GetSingle(source *DeleteDeviceRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteDeviceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeviceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteDeviceRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteDeviceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteDeviceRequest_FieldPathSelectorName:
		return (*device.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeviceRequest_FieldTerminalPath) ClearValue(item *DeleteDeviceRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteDeviceRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteDeviceRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteDeviceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteDeviceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteDeviceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteDeviceRequest_FieldPathSelectorName
}

func (fp *DeleteDeviceRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteDeviceRequest_FieldPathValue {
	switch fp.selector {
	case DeleteDeviceRequest_FieldPathSelectorName:
		return &DeleteDeviceRequest_FieldTerminalPathValue{DeleteDeviceRequest_FieldTerminalPath: *fp, value: value.(*device.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeviceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteDeviceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteDeviceRequest_FieldPathArrayOfValues {
	fpaov := &DeleteDeviceRequest_FieldTerminalPathArrayOfValues{DeleteDeviceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteDeviceRequest_FieldPathSelectorName:
		return &DeleteDeviceRequest_FieldTerminalPathArrayOfValues{DeleteDeviceRequest_FieldTerminalPath: *fp, values: values.([]*device.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteDeviceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteDeviceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteDeviceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeviceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteDeviceRequest_FieldPathValue allows storing values for DeleteDeviceRequest fields according to their type
type DeleteDeviceRequest_FieldPathValue interface {
	DeleteDeviceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteDeviceRequest)
	CompareWith(*DeleteDeviceRequest) (cmp int, comparable bool)
}

func ParseDeleteDeviceRequest_FieldPathValue(pathStr, valueStr string) (DeleteDeviceRequest_FieldPathValue, error) {
	fp, err := ParseDeleteDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDeviceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteDeviceRequest_FieldPathValue), nil
}

func MustParseDeleteDeviceRequest_FieldPathValue(pathStr, valueStr string) DeleteDeviceRequest_FieldPathValue {
	fpv, err := ParseDeleteDeviceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteDeviceRequest_FieldTerminalPathValue struct {
	DeleteDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteDeviceRequest_FieldPathValue = (*DeleteDeviceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteDeviceRequest' as interface{}
func (fpv *DeleteDeviceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteDeviceRequest_FieldTerminalPathValue) AsNameValue() (*device.Reference, bool) {
	res, ok := fpv.value.(*device.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteDeviceRequest
func (fpv *DeleteDeviceRequest_FieldTerminalPathValue) SetTo(target **DeleteDeviceRequest) {
	if *target == nil {
		*target = new(DeleteDeviceRequest)
	}
	switch fpv.selector {
	case DeleteDeviceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*device.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteDeviceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteDeviceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteDeviceRequest_FieldTerminalPathValue' with the value under path in 'DeleteDeviceRequest'.
func (fpv *DeleteDeviceRequest_FieldTerminalPathValue) CompareWith(source *DeleteDeviceRequest) (int, bool) {
	switch fpv.selector {
	case DeleteDeviceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*device.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteDeviceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteDeviceRequest))
}

// DeleteDeviceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteDeviceRequest according to their type
// Present only for array (repeated) types.
type DeleteDeviceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteDeviceRequest_FieldPath
	ContainsValue(*DeleteDeviceRequest) bool
}

// ParseDeleteDeviceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteDeviceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDeviceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteDeviceRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteDeviceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteDeviceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteDeviceRequest_FieldTerminalPathArrayItemValue struct {
	DeleteDeviceRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteDeviceRequest_FieldPathArrayItemValue = (*DeleteDeviceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteDeviceRequest as interface{}
func (fpaiv *DeleteDeviceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteDeviceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteDeviceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteDeviceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteDeviceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteDeviceRequest'
func (fpaiv *DeleteDeviceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteDeviceRequest) bool {
	slice := fpaiv.DeleteDeviceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteDeviceRequest_FieldPathArrayOfValues allows storing slice of values for DeleteDeviceRequest fields according to their type
type DeleteDeviceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteDeviceRequest_FieldPath
}

func ParseDeleteDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteDeviceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteDeviceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDeviceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteDeviceRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteDeviceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteDeviceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteDeviceRequest_FieldTerminalPathArrayOfValues struct {
	DeleteDeviceRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteDeviceRequest_FieldPathArrayOfValues = (*DeleteDeviceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteDeviceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteDeviceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*device.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteDeviceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*device.Reference, bool) {
	res, ok := fpaov.values.([]*device.Reference)
	return res, ok
}
