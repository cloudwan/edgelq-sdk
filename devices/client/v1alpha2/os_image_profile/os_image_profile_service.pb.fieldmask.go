// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/os_image_profile_service.proto
// DO NOT EDIT!!!

package os_image_profile_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	os_image_profile "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/os_image_profile"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &os_image_profile.OsImageProfile{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

type GetOsImageProfileRequest_FieldMask struct {
	Paths []GetOsImageProfileRequest_FieldPath
}

func FullGetOsImageProfileRequest_FieldMask() *GetOsImageProfileRequest_FieldMask {
	res := &GetOsImageProfileRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetOsImageProfileRequest_FieldTerminalPath{selector: GetOsImageProfileRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetOsImageProfileRequest_FieldTerminalPath{selector: GetOsImageProfileRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetOsImageProfileRequest_FieldTerminalPath{selector: GetOsImageProfileRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetOsImageProfileRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetOsImageProfileRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetOsImageProfileRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetOsImageProfileRequest_FieldPath(raw)
	})
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetOsImageProfileRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) Subtract(other *GetOsImageProfileRequest_FieldMask) *GetOsImageProfileRequest_FieldMask {
	result := &GetOsImageProfileRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetOsImageProfileRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetOsImageProfileRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetOsImageProfileRequest_FieldMask) FilterInputFields() *GetOsImageProfileRequest_FieldMask {
	result := &GetOsImageProfileRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetOsImageProfileRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetOsImageProfileRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetOsImageProfileRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetOsImageProfileRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetOsImageProfileRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) AppendPath(path GetOsImageProfileRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetOsImageProfileRequest_FieldPath))
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) GetPaths() []GetOsImageProfileRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetOsImageProfileRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) Set(target, source *GetOsImageProfileRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetOsImageProfileRequest), source.(*GetOsImageProfileRequest))
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) Project(source *GetOsImageProfileRequest) *GetOsImageProfileRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetOsImageProfileRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetOsImageProfileRequest_FieldTerminalPath:
			switch tp.selector {
			case GetOsImageProfileRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetOsImageProfileRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetOsImageProfileRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetOsImageProfileRequest))
}

func (fieldMask *GetOsImageProfileRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetOsImageProfilesRequest_FieldMask struct {
	Paths []BatchGetOsImageProfilesRequest_FieldPath
}

func FullBatchGetOsImageProfilesRequest_FieldMask() *BatchGetOsImageProfilesRequest_FieldMask {
	res := &BatchGetOsImageProfilesRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetOsImageProfilesRequest_FieldTerminalPath{selector: BatchGetOsImageProfilesRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetOsImageProfilesRequest_FieldTerminalPath{selector: BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetOsImageProfilesRequest_FieldTerminalPath{selector: BatchGetOsImageProfilesRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetOsImageProfilesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetOsImageProfilesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetOsImageProfilesRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) Subtract(other *BatchGetOsImageProfilesRequest_FieldMask) *BatchGetOsImageProfilesRequest_FieldMask {
	result := &BatchGetOsImageProfilesRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetOsImageProfilesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetOsImageProfilesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) FilterInputFields() *BatchGetOsImageProfilesRequest_FieldMask {
	result := &BatchGetOsImageProfilesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetOsImageProfilesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetOsImageProfilesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetOsImageProfilesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetOsImageProfilesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) AppendPath(path BatchGetOsImageProfilesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetOsImageProfilesRequest_FieldPath))
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) GetPaths() []BatchGetOsImageProfilesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetOsImageProfilesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) Set(target, source *BatchGetOsImageProfilesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetOsImageProfilesRequest), source.(*BatchGetOsImageProfilesRequest))
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) Project(source *BatchGetOsImageProfilesRequest) *BatchGetOsImageProfilesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetOsImageProfilesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetOsImageProfilesRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetOsImageProfilesRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetOsImageProfilesRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetOsImageProfilesRequest))
}

func (fieldMask *BatchGetOsImageProfilesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetOsImageProfilesResponse_FieldMask struct {
	Paths []BatchGetOsImageProfilesResponse_FieldPath
}

func FullBatchGetOsImageProfilesResponse_FieldMask() *BatchGetOsImageProfilesResponse_FieldMask {
	res := &BatchGetOsImageProfilesResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetOsImageProfilesResponse_FieldTerminalPath{selector: BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles})
	res.Paths = append(res.Paths, &BatchGetOsImageProfilesResponse_FieldTerminalPath{selector: BatchGetOsImageProfilesResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetOsImageProfilesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetOsImageProfilesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetOsImageProfilesResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) Subtract(other *BatchGetOsImageProfilesResponse_FieldMask) *BatchGetOsImageProfilesResponse_FieldMask {
	result := &BatchGetOsImageProfilesResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetOsImageProfilesResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles: &os_image_profile.OsImageProfile_FieldMask{},
	}
	mySubMasks := map[BatchGetOsImageProfilesResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles: &os_image_profile.OsImageProfile_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetOsImageProfilesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetOsImageProfilesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetOsImageProfilesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
						mySubMasks[BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles] = os_image_profile.FullOsImageProfile_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetOsImageProfilesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetOsImageProfilesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetOsImageProfilesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) FilterInputFields() *BatchGetOsImageProfilesResponse_FieldMask {
	result := &BatchGetOsImageProfilesResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
			if _, ok := path.(*BatchGetOsImageProfilesResponse_FieldTerminalPath); ok {
				for _, subpath := range os_image_profile.FullOsImageProfile_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetOsImageProfilesResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetOsImageProfilesResponse_FieldSubPath); ok {
				selectedMask := &os_image_profile.OsImageProfile_FieldMask{
					Paths: []os_image_profile.OsImageProfile_FieldPath{sub.subPath.(os_image_profile.OsImageProfile_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetOsImageProfilesResponse_FieldSubPath{selector: BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetOsImageProfilesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetOsImageProfilesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetOsImageProfilesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetOsImageProfilesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) AppendPath(path BatchGetOsImageProfilesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetOsImageProfilesResponse_FieldPath))
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) GetPaths() []BatchGetOsImageProfilesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetOsImageProfilesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) Set(target, source *BatchGetOsImageProfilesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetOsImageProfilesResponse), source.(*BatchGetOsImageProfilesResponse))
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) Project(source *BatchGetOsImageProfilesResponse) *BatchGetOsImageProfilesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetOsImageProfilesResponse{}
	osImageProfilesMask := &os_image_profile.OsImageProfile_FieldMask{}
	wholeOsImageProfilesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetOsImageProfilesResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
				result.OsImageProfiles = source.OsImageProfiles
				wholeOsImageProfilesAccepted = true
			case BatchGetOsImageProfilesResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetOsImageProfilesResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
				osImageProfilesMask.AppendPath(tp.subPath.(os_image_profile.OsImageProfile_FieldPath))
			}
		}
	}
	if wholeOsImageProfilesAccepted == false && len(osImageProfilesMask.Paths) > 0 {
		for _, sourceItem := range source.GetOsImageProfiles() {
			result.OsImageProfiles = append(result.OsImageProfiles, osImageProfilesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetOsImageProfilesResponse))
}

func (fieldMask *BatchGetOsImageProfilesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListOsImageProfilesRequest_FieldMask struct {
	Paths []ListOsImageProfilesRequest_FieldPath
}

func FullListOsImageProfilesRequest_FieldMask() *ListOsImageProfilesRequest_FieldMask {
	res := &ListOsImageProfilesRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo})
	return res
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListOsImageProfilesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListOsImageProfilesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListOsImageProfilesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListOsImageProfilesRequest_FieldPath(raw)
	})
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) Subtract(other *ListOsImageProfilesRequest_FieldMask) *ListOsImageProfilesRequest_FieldMask {
	result := &ListOsImageProfilesRequest_FieldMask{}
	removedSelectors := make([]bool, 8)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListOsImageProfilesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListOsImageProfilesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListOsImageProfilesRequest_FieldMask) FilterInputFields() *ListOsImageProfilesRequest_FieldMask {
	result := &ListOsImageProfilesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListOsImageProfilesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListOsImageProfilesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListOsImageProfilesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListOsImageProfilesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListOsImageProfilesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) AppendPath(path ListOsImageProfilesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListOsImageProfilesRequest_FieldPath))
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) GetPaths() []ListOsImageProfilesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListOsImageProfilesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) Set(target, source *ListOsImageProfilesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListOsImageProfilesRequest), source.(*ListOsImageProfilesRequest))
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) Project(source *ListOsImageProfilesRequest) *ListOsImageProfilesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListOsImageProfilesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListOsImageProfilesRequest_FieldTerminalPath:
			switch tp.selector {
			case ListOsImageProfilesRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListOsImageProfilesRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListOsImageProfilesRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListOsImageProfilesRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListOsImageProfilesRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListOsImageProfilesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListOsImageProfilesRequest_FieldPathSelectorView:
				result.View = source.View
			case ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo:
				result.IncludePagingInfo = source.IncludePagingInfo
			}
		}
	}
	return result
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListOsImageProfilesRequest))
}

func (fieldMask *ListOsImageProfilesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListOsImageProfilesResponse_FieldMask struct {
	Paths []ListOsImageProfilesResponse_FieldPath
}

func FullListOsImageProfilesResponse_FieldMask() *ListOsImageProfilesResponse_FieldMask {
	res := &ListOsImageProfilesResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles})
	res.Paths = append(res.Paths, &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorNextPageToken})
	res.Paths = append(res.Paths, &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset})
	res.Paths = append(res.Paths, &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount})
	return res
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListOsImageProfilesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListOsImageProfilesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListOsImageProfilesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListOsImageProfilesResponse_FieldPath(raw)
	})
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) Subtract(other *ListOsImageProfilesResponse_FieldMask) *ListOsImageProfilesResponse_FieldMask {
	result := &ListOsImageProfilesResponse_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[ListOsImageProfilesResponse_FieldPathSelector]gotenobject.FieldMask{
		ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles: &os_image_profile.OsImageProfile_FieldMask{},
	}
	mySubMasks := map[ListOsImageProfilesResponse_FieldPathSelector]gotenobject.FieldMask{
		ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles: &os_image_profile.OsImageProfile_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListOsImageProfilesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListOsImageProfilesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListOsImageProfilesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
						mySubMasks[ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles] = os_image_profile.FullOsImageProfile_FieldMask()
					}
				} else if tp, ok := path.(*ListOsImageProfilesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListOsImageProfilesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListOsImageProfilesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListOsImageProfilesResponse_FieldMask) FilterInputFields() *ListOsImageProfilesResponse_FieldMask {
	result := &ListOsImageProfilesResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
			if _, ok := path.(*ListOsImageProfilesResponse_FieldTerminalPath); ok {
				for _, subpath := range os_image_profile.FullOsImageProfile_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListOsImageProfilesResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListOsImageProfilesResponse_FieldSubPath); ok {
				selectedMask := &os_image_profile.OsImageProfile_FieldMask{
					Paths: []os_image_profile.OsImageProfile_FieldPath{sub.subPath.(os_image_profile.OsImageProfile_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListOsImageProfilesResponse_FieldSubPath{selector: ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListOsImageProfilesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListOsImageProfilesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListOsImageProfilesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListOsImageProfilesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListOsImageProfilesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) AppendPath(path ListOsImageProfilesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListOsImageProfilesResponse_FieldPath))
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) GetPaths() []ListOsImageProfilesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListOsImageProfilesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) Set(target, source *ListOsImageProfilesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListOsImageProfilesResponse), source.(*ListOsImageProfilesResponse))
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) Project(source *ListOsImageProfilesResponse) *ListOsImageProfilesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListOsImageProfilesResponse{}
	osImageProfilesMask := &os_image_profile.OsImageProfile_FieldMask{}
	wholeOsImageProfilesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListOsImageProfilesResponse_FieldTerminalPath:
			switch tp.selector {
			case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
				result.OsImageProfiles = source.OsImageProfiles
				wholeOsImageProfilesAccepted = true
			case ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListOsImageProfilesResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			case ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset:
				result.CurrentOffset = source.CurrentOffset
			case ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount:
				result.TotalResultsCount = source.TotalResultsCount
			}
		case *ListOsImageProfilesResponse_FieldSubPath:
			switch tp.selector {
			case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
				osImageProfilesMask.AppendPath(tp.subPath.(os_image_profile.OsImageProfile_FieldPath))
			}
		}
	}
	if wholeOsImageProfilesAccepted == false && len(osImageProfilesMask.Paths) > 0 {
		for _, sourceItem := range source.GetOsImageProfiles() {
			result.OsImageProfiles = append(result.OsImageProfiles, osImageProfilesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListOsImageProfilesResponse))
}

func (fieldMask *ListOsImageProfilesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchOsImageProfileRequest_FieldMask struct {
	Paths []WatchOsImageProfileRequest_FieldPath
}

func FullWatchOsImageProfileRequest_FieldMask() *WatchOsImageProfileRequest_FieldMask {
	res := &WatchOsImageProfileRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchOsImageProfileRequest_FieldTerminalPath{selector: WatchOsImageProfileRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchOsImageProfileRequest_FieldTerminalPath{selector: WatchOsImageProfileRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchOsImageProfileRequest_FieldTerminalPath{selector: WatchOsImageProfileRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchOsImageProfileRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchOsImageProfileRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchOsImageProfileRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchOsImageProfileRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) Subtract(other *WatchOsImageProfileRequest_FieldMask) *WatchOsImageProfileRequest_FieldMask {
	result := &WatchOsImageProfileRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchOsImageProfileRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchOsImageProfileRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchOsImageProfileRequest_FieldMask) FilterInputFields() *WatchOsImageProfileRequest_FieldMask {
	result := &WatchOsImageProfileRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchOsImageProfileRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchOsImageProfileRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchOsImageProfileRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchOsImageProfileRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchOsImageProfileRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) AppendPath(path WatchOsImageProfileRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchOsImageProfileRequest_FieldPath))
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) GetPaths() []WatchOsImageProfileRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchOsImageProfileRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) Set(target, source *WatchOsImageProfileRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchOsImageProfileRequest), source.(*WatchOsImageProfileRequest))
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) Project(source *WatchOsImageProfileRequest) *WatchOsImageProfileRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchOsImageProfileRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchOsImageProfileRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchOsImageProfileRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchOsImageProfileRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchOsImageProfileRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchOsImageProfileRequest))
}

func (fieldMask *WatchOsImageProfileRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchOsImageProfileResponse_FieldMask struct {
	Paths []WatchOsImageProfileResponse_FieldPath
}

func FullWatchOsImageProfileResponse_FieldMask() *WatchOsImageProfileResponse_FieldMask {
	res := &WatchOsImageProfileResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchOsImageProfileResponse_FieldTerminalPath{selector: WatchOsImageProfileResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchOsImageProfileResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchOsImageProfileResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchOsImageProfileResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchOsImageProfileResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) Subtract(other *WatchOsImageProfileResponse_FieldMask) *WatchOsImageProfileResponse_FieldMask {
	result := &WatchOsImageProfileResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchOsImageProfileResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchOsImageProfileResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchOsImageProfileResponse_FieldMask) FilterInputFields() *WatchOsImageProfileResponse_FieldMask {
	result := &WatchOsImageProfileResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchOsImageProfileResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchOsImageProfileResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchOsImageProfileResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchOsImageProfileResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchOsImageProfileResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) AppendPath(path WatchOsImageProfileResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchOsImageProfileResponse_FieldPath))
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) GetPaths() []WatchOsImageProfileResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchOsImageProfileResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) Set(target, source *WatchOsImageProfileResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchOsImageProfileResponse), source.(*WatchOsImageProfileResponse))
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) Project(source *WatchOsImageProfileResponse) *WatchOsImageProfileResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchOsImageProfileResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchOsImageProfileResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchOsImageProfileResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchOsImageProfileResponse))
}

func (fieldMask *WatchOsImageProfileResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchOsImageProfilesRequest_FieldMask struct {
	Paths []WatchOsImageProfilesRequest_FieldPath
}

func FullWatchOsImageProfilesRequest_FieldMask() *WatchOsImageProfilesRequest_FieldMask {
	res := &WatchOsImageProfilesRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchOsImageProfilesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchOsImageProfilesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchOsImageProfilesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchOsImageProfilesRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) Subtract(other *WatchOsImageProfilesRequest_FieldMask) *WatchOsImageProfilesRequest_FieldMask {
	result := &WatchOsImageProfilesRequest_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchOsImageProfilesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchOsImageProfilesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchOsImageProfilesRequest_FieldMask) FilterInputFields() *WatchOsImageProfilesRequest_FieldMask {
	result := &WatchOsImageProfilesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchOsImageProfilesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchOsImageProfilesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchOsImageProfilesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchOsImageProfilesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchOsImageProfilesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) AppendPath(path WatchOsImageProfilesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchOsImageProfilesRequest_FieldPath))
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) GetPaths() []WatchOsImageProfilesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchOsImageProfilesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) Set(target, source *WatchOsImageProfilesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchOsImageProfilesRequest), source.(*WatchOsImageProfilesRequest))
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) Project(source *WatchOsImageProfilesRequest) *WatchOsImageProfilesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchOsImageProfilesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchOsImageProfilesRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchOsImageProfilesRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchOsImageProfilesRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchOsImageProfilesRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchOsImageProfilesRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchOsImageProfilesRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchOsImageProfilesRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchOsImageProfilesRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchOsImageProfilesRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchOsImageProfilesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchOsImageProfilesRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchOsImageProfilesRequest))
}

func (fieldMask *WatchOsImageProfilesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchOsImageProfilesResponse_FieldMask struct {
	Paths []WatchOsImageProfilesResponse_FieldPath
}

func FullWatchOsImageProfilesResponse_FieldMask() *WatchOsImageProfilesResponse_FieldMask {
	res := &WatchOsImageProfilesResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges})
	res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchOsImageProfilesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchOsImageProfilesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchOsImageProfilesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchOsImageProfilesResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) Subtract(other *WatchOsImageProfilesResponse_FieldMask) *WatchOsImageProfilesResponse_FieldMask {
	result := &WatchOsImageProfilesResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchOsImageProfilesResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange: &WatchOsImageProfilesResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchOsImageProfilesResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange: &WatchOsImageProfilesResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchOsImageProfilesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchOsImageProfilesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchOsImageProfilesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange] = FullWatchOsImageProfilesResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchOsImageProfilesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchOsImageProfilesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchOsImageProfilesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchOsImageProfilesResponse_FieldMask) FilterInputFields() *WatchOsImageProfilesResponse_FieldMask {
	result := &WatchOsImageProfilesResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchOsImageProfilesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchOsImageProfilesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchOsImageProfilesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchOsImageProfilesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchOsImageProfilesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) AppendPath(path WatchOsImageProfilesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchOsImageProfilesResponse_FieldPath))
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) GetPaths() []WatchOsImageProfilesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchOsImageProfilesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) Set(target, source *WatchOsImageProfilesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchOsImageProfilesResponse), source.(*WatchOsImageProfilesResponse))
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) Project(source *WatchOsImageProfilesResponse) *WatchOsImageProfilesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchOsImageProfilesResponse{}
	pageTokenChangeMask := &WatchOsImageProfilesResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchOsImageProfilesResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges:
				result.OsImageProfileChanges = source.OsImageProfileChanges
			case WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchOsImageProfilesResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchOsImageProfilesResponse_FieldSubPath:
			switch tp.selector {
			case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchOsImageProfilesResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchOsImageProfilesResponse))
}

func (fieldMask *WatchOsImageProfilesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchOsImageProfilesResponse_PageTokenChange_FieldMask struct {
	Paths []WatchOsImageProfilesResponsePageTokenChange_FieldPath
}

func FullWatchOsImageProfilesResponse_PageTokenChange_FieldMask() *WatchOsImageProfilesResponse_PageTokenChange_FieldMask {
	res := &WatchOsImageProfilesResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath{selector: WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath{selector: WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchOsImageProfilesResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchOsImageProfilesResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) Subtract(other *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) *WatchOsImageProfilesResponse_PageTokenChange_FieldMask {
	result := &WatchOsImageProfilesResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchOsImageProfilesResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchOsImageProfilesResponse_PageTokenChange_FieldMask {
	result := &WatchOsImageProfilesResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchOsImageProfilesResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchOsImageProfilesResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchOsImageProfilesResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchOsImageProfilesResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) AppendPath(path WatchOsImageProfilesResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchOsImageProfilesResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) GetPaths() []WatchOsImageProfilesResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchOsImageProfilesResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) Set(target, source *WatchOsImageProfilesResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchOsImageProfilesResponse_PageTokenChange), source.(*WatchOsImageProfilesResponse_PageTokenChange))
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) Project(source *WatchOsImageProfilesResponse_PageTokenChange) *WatchOsImageProfilesResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchOsImageProfilesResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchOsImageProfilesResponse_PageTokenChange))
}

func (fieldMask *WatchOsImageProfilesResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateOsImageProfileRequest_FieldMask struct {
	Paths []CreateOsImageProfileRequest_FieldPath
}

func FullCreateOsImageProfileRequest_FieldMask() *CreateOsImageProfileRequest_FieldMask {
	res := &CreateOsImageProfileRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateOsImageProfileRequest_FieldTerminalPath{selector: CreateOsImageProfileRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateOsImageProfileRequest_FieldTerminalPath{selector: CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile})
	return res
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateOsImageProfileRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateOsImageProfileRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateOsImageProfileRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateOsImageProfileRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) Subtract(other *CreateOsImageProfileRequest_FieldMask) *CreateOsImageProfileRequest_FieldMask {
	result := &CreateOsImageProfileRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateOsImageProfileRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile: &os_image_profile.OsImageProfile_FieldMask{},
	}
	mySubMasks := map[CreateOsImageProfileRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile: &os_image_profile.OsImageProfile_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateOsImageProfileRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateOsImageProfileRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateOsImageProfileRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
						mySubMasks[CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile] = os_image_profile.FullOsImageProfile_FieldMask()
					}
				} else if tp, ok := path.(*CreateOsImageProfileRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateOsImageProfileRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateOsImageProfileRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateOsImageProfileRequest_FieldMask) FilterInputFields() *CreateOsImageProfileRequest_FieldMask {
	result := &CreateOsImageProfileRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
			if _, ok := path.(*CreateOsImageProfileRequest_FieldTerminalPath); ok {
				for _, subpath := range os_image_profile.FullOsImageProfile_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateOsImageProfileRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateOsImageProfileRequest_FieldSubPath); ok {
				selectedMask := &os_image_profile.OsImageProfile_FieldMask{
					Paths: []os_image_profile.OsImageProfile_FieldPath{sub.subPath.(os_image_profile.OsImageProfile_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateOsImageProfileRequest_FieldSubPath{selector: CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateOsImageProfileRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateOsImageProfileRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateOsImageProfileRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateOsImageProfileRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateOsImageProfileRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) AppendPath(path CreateOsImageProfileRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateOsImageProfileRequest_FieldPath))
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) GetPaths() []CreateOsImageProfileRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateOsImageProfileRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) Set(target, source *CreateOsImageProfileRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateOsImageProfileRequest), source.(*CreateOsImageProfileRequest))
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) Project(source *CreateOsImageProfileRequest) *CreateOsImageProfileRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateOsImageProfileRequest{}
	osImageProfileMask := &os_image_profile.OsImageProfile_FieldMask{}
	wholeOsImageProfileAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateOsImageProfileRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateOsImageProfileRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
				result.OsImageProfile = source.OsImageProfile
				wholeOsImageProfileAccepted = true
			}
		case *CreateOsImageProfileRequest_FieldSubPath:
			switch tp.selector {
			case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
				osImageProfileMask.AppendPath(tp.subPath.(os_image_profile.OsImageProfile_FieldPath))
			}
		}
	}
	if wholeOsImageProfileAccepted == false && len(osImageProfileMask.Paths) > 0 {
		result.OsImageProfile = osImageProfileMask.Project(source.GetOsImageProfile())
	}
	return result
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateOsImageProfileRequest))
}

func (fieldMask *CreateOsImageProfileRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateOsImageProfileRequest_FieldMask struct {
	Paths []UpdateOsImageProfileRequest_FieldPath
}

func FullUpdateOsImageProfileRequest_FieldMask() *UpdateOsImageProfileRequest_FieldMask {
	res := &UpdateOsImageProfileRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateOsImageProfileRequest_FieldTerminalPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile})
	res.Paths = append(res.Paths, &UpdateOsImageProfileRequest_FieldTerminalPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateOsImageProfileRequest_FieldTerminalPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorCas})
	res.Paths = append(res.Paths, &UpdateOsImageProfileRequest_FieldTerminalPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing})
	return res
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateOsImageProfileRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateOsImageProfileRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateOsImageProfileRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateOsImageProfileRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) Subtract(other *UpdateOsImageProfileRequest_FieldMask) *UpdateOsImageProfileRequest_FieldMask {
	result := &UpdateOsImageProfileRequest_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[UpdateOsImageProfileRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile: &os_image_profile.OsImageProfile_FieldMask{},
		UpdateOsImageProfileRequest_FieldPathSelectorCas:            &UpdateOsImageProfileRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateOsImageProfileRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile: &os_image_profile.OsImageProfile_FieldMask{},
		UpdateOsImageProfileRequest_FieldPathSelectorCas:            &UpdateOsImageProfileRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateOsImageProfileRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateOsImageProfileRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateOsImageProfileRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
						mySubMasks[UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile] = os_image_profile.FullOsImageProfile_FieldMask()
					case UpdateOsImageProfileRequest_FieldPathSelectorCas:
						mySubMasks[UpdateOsImageProfileRequest_FieldPathSelectorCas] = FullUpdateOsImageProfileRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateOsImageProfileRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateOsImageProfileRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateOsImageProfileRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateOsImageProfileRequest_FieldMask) FilterInputFields() *UpdateOsImageProfileRequest_FieldMask {
	result := &UpdateOsImageProfileRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
			if _, ok := path.(*UpdateOsImageProfileRequest_FieldTerminalPath); ok {
				for _, subpath := range os_image_profile.FullOsImageProfile_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateOsImageProfileRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateOsImageProfileRequest_FieldSubPath); ok {
				selectedMask := &os_image_profile.OsImageProfile_FieldMask{
					Paths: []os_image_profile.OsImageProfile_FieldPath{sub.subPath.(os_image_profile.OsImageProfile_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateOsImageProfileRequest_FieldSubPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile, subPath: allowedPath})
				}
			}
		case UpdateOsImageProfileRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateOsImageProfileRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateOsImageProfileRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateOsImageProfileRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateOsImageProfileRequest_FieldSubPath); ok {
				selectedMask := &UpdateOsImageProfileRequest_CAS_FieldMask{
					Paths: []UpdateOsImageProfileRequestCAS_FieldPath{sub.subPath.(UpdateOsImageProfileRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateOsImageProfileRequest_FieldSubPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateOsImageProfileRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateOsImageProfileRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateOsImageProfileRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateOsImageProfileRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateOsImageProfileRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) AppendPath(path UpdateOsImageProfileRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateOsImageProfileRequest_FieldPath))
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) GetPaths() []UpdateOsImageProfileRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateOsImageProfileRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) Set(target, source *UpdateOsImageProfileRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateOsImageProfileRequest), source.(*UpdateOsImageProfileRequest))
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) Project(source *UpdateOsImageProfileRequest) *UpdateOsImageProfileRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateOsImageProfileRequest{}
	osImageProfileMask := &os_image_profile.OsImageProfile_FieldMask{}
	wholeOsImageProfileAccepted := false
	casMask := &UpdateOsImageProfileRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateOsImageProfileRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
				result.OsImageProfile = source.OsImageProfile
				wholeOsImageProfileAccepted = true
			case UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateOsImageProfileRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			case UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing:
				result.AllowMissing = source.AllowMissing
			}
		case *UpdateOsImageProfileRequest_FieldSubPath:
			switch tp.selector {
			case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
				osImageProfileMask.AppendPath(tp.subPath.(os_image_profile.OsImageProfile_FieldPath))
			case UpdateOsImageProfileRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateOsImageProfileRequestCAS_FieldPath))
			}
		}
	}
	if wholeOsImageProfileAccepted == false && len(osImageProfileMask.Paths) > 0 {
		result.OsImageProfile = osImageProfileMask.Project(source.GetOsImageProfile())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateOsImageProfileRequest))
}

func (fieldMask *UpdateOsImageProfileRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateOsImageProfileRequest_CAS_FieldMask struct {
	Paths []UpdateOsImageProfileRequestCAS_FieldPath
}

func FullUpdateOsImageProfileRequest_CAS_FieldMask() *UpdateOsImageProfileRequest_CAS_FieldMask {
	res := &UpdateOsImageProfileRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateOsImageProfileRequestCAS_FieldTerminalPath{selector: UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateOsImageProfileRequestCAS_FieldTerminalPath{selector: UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateOsImageProfileRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateOsImageProfileRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateOsImageProfileRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) Subtract(other *UpdateOsImageProfileRequest_CAS_FieldMask) *UpdateOsImageProfileRequest_CAS_FieldMask {
	result := &UpdateOsImageProfileRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateOsImageProfileRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState: &os_image_profile.OsImageProfile_FieldMask{},
	}
	mySubMasks := map[UpdateOsImageProfileRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState: &os_image_profile.OsImageProfile_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateOsImageProfileRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateOsImageProfileRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateOsImageProfileRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState] = os_image_profile.FullOsImageProfile_FieldMask()
					}
				} else if tp, ok := path.(*UpdateOsImageProfileRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateOsImageProfileRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateOsImageProfileRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) FilterInputFields() *UpdateOsImageProfileRequest_CAS_FieldMask {
	result := &UpdateOsImageProfileRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateOsImageProfileRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range os_image_profile.FullOsImageProfile_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateOsImageProfileRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateOsImageProfileRequestCAS_FieldSubPath); ok {
				selectedMask := &os_image_profile.OsImageProfile_FieldMask{
					Paths: []os_image_profile.OsImageProfile_FieldPath{sub.subPath.(os_image_profile.OsImageProfile_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateOsImageProfileRequestCAS_FieldSubPath{selector: UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateOsImageProfileRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateOsImageProfileRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateOsImageProfileRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateOsImageProfileRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) AppendPath(path UpdateOsImageProfileRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateOsImageProfileRequestCAS_FieldPath))
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) GetPaths() []UpdateOsImageProfileRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateOsImageProfileRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) Set(target, source *UpdateOsImageProfileRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateOsImageProfileRequest_CAS), source.(*UpdateOsImageProfileRequest_CAS))
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) Project(source *UpdateOsImageProfileRequest_CAS) *UpdateOsImageProfileRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateOsImageProfileRequest_CAS{}
	conditionalStateMask := &os_image_profile.OsImageProfile_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateOsImageProfileRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateOsImageProfileRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(os_image_profile.OsImageProfile_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateOsImageProfileRequest_CAS))
}

func (fieldMask *UpdateOsImageProfileRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteOsImageProfileRequest_FieldMask struct {
	Paths []DeleteOsImageProfileRequest_FieldPath
}

func FullDeleteOsImageProfileRequest_FieldMask() *DeleteOsImageProfileRequest_FieldMask {
	res := &DeleteOsImageProfileRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteOsImageProfileRequest_FieldTerminalPath{selector: DeleteOsImageProfileRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteOsImageProfileRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteOsImageProfileRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteOsImageProfileRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteOsImageProfileRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) Subtract(other *DeleteOsImageProfileRequest_FieldMask) *DeleteOsImageProfileRequest_FieldMask {
	result := &DeleteOsImageProfileRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteOsImageProfileRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteOsImageProfileRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteOsImageProfileRequest_FieldMask) FilterInputFields() *DeleteOsImageProfileRequest_FieldMask {
	result := &DeleteOsImageProfileRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteOsImageProfileRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteOsImageProfileRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteOsImageProfileRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteOsImageProfileRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteOsImageProfileRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) AppendPath(path DeleteOsImageProfileRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteOsImageProfileRequest_FieldPath))
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) GetPaths() []DeleteOsImageProfileRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteOsImageProfileRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) Set(target, source *DeleteOsImageProfileRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteOsImageProfileRequest), source.(*DeleteOsImageProfileRequest))
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) Project(source *DeleteOsImageProfileRequest) *DeleteOsImageProfileRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteOsImageProfileRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteOsImageProfileRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteOsImageProfileRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteOsImageProfileRequest))
}

func (fieldMask *DeleteOsImageProfileRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
