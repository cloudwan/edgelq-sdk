// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/os_image_profile_service.proto
// DO NOT EDIT!!!

package os_image_profile_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	os_image_profile "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/os_image_profile"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &os_image_profile.OsImageProfile{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetOsImageProfileRequest) GotenObjectExt() {}

func (o *GetOsImageProfileRequest) MakeFullFieldMask() *GetOsImageProfileRequest_FieldMask {
	return FullGetOsImageProfileRequest_FieldMask()
}

func (o *GetOsImageProfileRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetOsImageProfileRequest_FieldMask()
}

func (o *GetOsImageProfileRequest) MakeDiffFieldMask(other *GetOsImageProfileRequest) *GetOsImageProfileRequest_FieldMask {
	if o == nil && other == nil {
		return &GetOsImageProfileRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetOsImageProfileRequest_FieldMask()
	}

	res := &GetOsImageProfileRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetOsImageProfileRequest_FieldTerminalPath{selector: GetOsImageProfileRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetOsImageProfileRequest_FieldTerminalPath{selector: GetOsImageProfileRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetOsImageProfileRequest_FieldTerminalPath{selector: GetOsImageProfileRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetOsImageProfileRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetOsImageProfileRequest))
}

func (o *GetOsImageProfileRequest) Clone() *GetOsImageProfileRequest {
	if o == nil {
		return nil
	}
	result := &GetOsImageProfileRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &os_image_profile.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*os_image_profile.OsImageProfile_FieldMask)
	result.View = o.View
	return result
}

func (o *GetOsImageProfileRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetOsImageProfileRequest) Merge(source *GetOsImageProfileRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &os_image_profile.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(os_image_profile.OsImageProfile_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetOsImageProfileRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetOsImageProfileRequest))
}

func (o *BatchGetOsImageProfilesRequest) GotenObjectExt() {}

func (o *BatchGetOsImageProfilesRequest) MakeFullFieldMask() *BatchGetOsImageProfilesRequest_FieldMask {
	return FullBatchGetOsImageProfilesRequest_FieldMask()
}

func (o *BatchGetOsImageProfilesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetOsImageProfilesRequest_FieldMask()
}

func (o *BatchGetOsImageProfilesRequest) MakeDiffFieldMask(other *BatchGetOsImageProfilesRequest) *BatchGetOsImageProfilesRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetOsImageProfilesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetOsImageProfilesRequest_FieldMask()
	}

	res := &BatchGetOsImageProfilesRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetOsImageProfilesRequest_FieldTerminalPath{selector: BatchGetOsImageProfilesRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetOsImageProfilesRequest_FieldTerminalPath{selector: BatchGetOsImageProfilesRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetOsImageProfilesRequest_FieldTerminalPath{selector: BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetOsImageProfilesRequest_FieldTerminalPath{selector: BatchGetOsImageProfilesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetOsImageProfilesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetOsImageProfilesRequest))
}

func (o *BatchGetOsImageProfilesRequest) Clone() *BatchGetOsImageProfilesRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetOsImageProfilesRequest{}
	result.Names = make([]*os_image_profile.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &os_image_profile.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*os_image_profile.OsImageProfile_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetOsImageProfilesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetOsImageProfilesRequest) Merge(source *BatchGetOsImageProfilesRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *os_image_profile.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &os_image_profile.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(os_image_profile.OsImageProfile_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetOsImageProfilesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetOsImageProfilesRequest))
}

func (o *BatchGetOsImageProfilesResponse) GotenObjectExt() {}

func (o *BatchGetOsImageProfilesResponse) MakeFullFieldMask() *BatchGetOsImageProfilesResponse_FieldMask {
	return FullBatchGetOsImageProfilesResponse_FieldMask()
}

func (o *BatchGetOsImageProfilesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetOsImageProfilesResponse_FieldMask()
}

func (o *BatchGetOsImageProfilesResponse) MakeDiffFieldMask(other *BatchGetOsImageProfilesResponse) *BatchGetOsImageProfilesResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetOsImageProfilesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetOsImageProfilesResponse_FieldMask()
	}

	res := &BatchGetOsImageProfilesResponse_FieldMask{}

	if len(o.GetOsImageProfiles()) == len(other.GetOsImageProfiles()) {
		for i, lValue := range o.GetOsImageProfiles() {
			rValue := other.GetOsImageProfiles()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetOsImageProfilesResponse_FieldTerminalPath{selector: BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetOsImageProfilesResponse_FieldTerminalPath{selector: BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetOsImageProfilesResponse_FieldTerminalPath{selector: BatchGetOsImageProfilesResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetOsImageProfilesResponse_FieldTerminalPath{selector: BatchGetOsImageProfilesResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetOsImageProfilesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetOsImageProfilesResponse))
}

func (o *BatchGetOsImageProfilesResponse) Clone() *BatchGetOsImageProfilesResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetOsImageProfilesResponse{}
	result.OsImageProfiles = make([]*os_image_profile.OsImageProfile, len(o.OsImageProfiles))
	for i, sourceValue := range o.OsImageProfiles {
		result.OsImageProfiles[i] = sourceValue.Clone()
	}
	result.Missing = make([]*os_image_profile.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &os_image_profile.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetOsImageProfilesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetOsImageProfilesResponse) Merge(source *BatchGetOsImageProfilesResponse) {
	for _, sourceValue := range source.GetOsImageProfiles() {
		exists := false
		for _, currentValue := range o.OsImageProfiles {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *os_image_profile.OsImageProfile
			if sourceValue != nil {
				newDstElement = new(os_image_profile.OsImageProfile)
				newDstElement.Merge(sourceValue)
			}
			o.OsImageProfiles = append(o.OsImageProfiles, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *os_image_profile.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &os_image_profile.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetOsImageProfilesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetOsImageProfilesResponse))
}

func (o *ListOsImageProfilesRequest) GotenObjectExt() {}

func (o *ListOsImageProfilesRequest) MakeFullFieldMask() *ListOsImageProfilesRequest_FieldMask {
	return FullListOsImageProfilesRequest_FieldMask()
}

func (o *ListOsImageProfilesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListOsImageProfilesRequest_FieldMask()
}

func (o *ListOsImageProfilesRequest) MakeDiffFieldMask(other *ListOsImageProfilesRequest) *ListOsImageProfilesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListOsImageProfilesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListOsImageProfilesRequest_FieldMask()
	}

	res := &ListOsImageProfilesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListOsImageProfilesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListOsImageProfilesRequest))
}

func (o *ListOsImageProfilesRequest) Clone() *ListOsImageProfilesRequest {
	if o == nil {
		return nil
	}
	result := &ListOsImageProfilesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &os_image_profile.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &os_image_profile.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &os_image_profile.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &os_image_profile.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*os_image_profile.OsImageProfile_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListOsImageProfilesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListOsImageProfilesRequest) Merge(source *ListOsImageProfilesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &os_image_profile.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &os_image_profile.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &os_image_profile.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &os_image_profile.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(os_image_profile.OsImageProfile_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListOsImageProfilesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListOsImageProfilesRequest))
}

func (o *ListOsImageProfilesResponse) GotenObjectExt() {}

func (o *ListOsImageProfilesResponse) MakeFullFieldMask() *ListOsImageProfilesResponse_FieldMask {
	return FullListOsImageProfilesResponse_FieldMask()
}

func (o *ListOsImageProfilesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListOsImageProfilesResponse_FieldMask()
}

func (o *ListOsImageProfilesResponse) MakeDiffFieldMask(other *ListOsImageProfilesResponse) *ListOsImageProfilesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListOsImageProfilesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListOsImageProfilesResponse_FieldMask()
	}

	res := &ListOsImageProfilesResponse_FieldMask{}

	if len(o.GetOsImageProfiles()) == len(other.GetOsImageProfiles()) {
		for i, lValue := range o.GetOsImageProfiles() {
			rValue := other.GetOsImageProfiles()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListOsImageProfilesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListOsImageProfilesResponse))
}

func (o *ListOsImageProfilesResponse) Clone() *ListOsImageProfilesResponse {
	if o == nil {
		return nil
	}
	result := &ListOsImageProfilesResponse{}
	result.OsImageProfiles = make([]*os_image_profile.OsImageProfile, len(o.OsImageProfiles))
	for i, sourceValue := range o.OsImageProfiles {
		result.OsImageProfiles[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &os_image_profile.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &os_image_profile.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListOsImageProfilesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListOsImageProfilesResponse) Merge(source *ListOsImageProfilesResponse) {
	for _, sourceValue := range source.GetOsImageProfiles() {
		exists := false
		for _, currentValue := range o.OsImageProfiles {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *os_image_profile.OsImageProfile
			if sourceValue != nil {
				newDstElement = new(os_image_profile.OsImageProfile)
				newDstElement.Merge(sourceValue)
			}
			o.OsImageProfiles = append(o.OsImageProfiles, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &os_image_profile.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &os_image_profile.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListOsImageProfilesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListOsImageProfilesResponse))
}

func (o *WatchOsImageProfileRequest) GotenObjectExt() {}

func (o *WatchOsImageProfileRequest) MakeFullFieldMask() *WatchOsImageProfileRequest_FieldMask {
	return FullWatchOsImageProfileRequest_FieldMask()
}

func (o *WatchOsImageProfileRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOsImageProfileRequest_FieldMask()
}

func (o *WatchOsImageProfileRequest) MakeDiffFieldMask(other *WatchOsImageProfileRequest) *WatchOsImageProfileRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchOsImageProfileRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOsImageProfileRequest_FieldMask()
	}

	res := &WatchOsImageProfileRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchOsImageProfileRequest_FieldTerminalPath{selector: WatchOsImageProfileRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchOsImageProfileRequest_FieldTerminalPath{selector: WatchOsImageProfileRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchOsImageProfileRequest_FieldTerminalPath{selector: WatchOsImageProfileRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchOsImageProfileRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOsImageProfileRequest))
}

func (o *WatchOsImageProfileRequest) Clone() *WatchOsImageProfileRequest {
	if o == nil {
		return nil
	}
	result := &WatchOsImageProfileRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &os_image_profile.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*os_image_profile.OsImageProfile_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchOsImageProfileRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOsImageProfileRequest) Merge(source *WatchOsImageProfileRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &os_image_profile.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(os_image_profile.OsImageProfile_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchOsImageProfileRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOsImageProfileRequest))
}

func (o *WatchOsImageProfileResponse) GotenObjectExt() {}

func (o *WatchOsImageProfileResponse) MakeFullFieldMask() *WatchOsImageProfileResponse_FieldMask {
	return FullWatchOsImageProfileResponse_FieldMask()
}

func (o *WatchOsImageProfileResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOsImageProfileResponse_FieldMask()
}

func (o *WatchOsImageProfileResponse) MakeDiffFieldMask(other *WatchOsImageProfileResponse) *WatchOsImageProfileResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchOsImageProfileResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOsImageProfileResponse_FieldMask()
	}

	res := &WatchOsImageProfileResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchOsImageProfileResponse_FieldTerminalPath{selector: WatchOsImageProfileResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchOsImageProfileResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOsImageProfileResponse))
}

func (o *WatchOsImageProfileResponse) Clone() *WatchOsImageProfileResponse {
	if o == nil {
		return nil
	}
	result := &WatchOsImageProfileResponse{}
	result.Change = proto.Clone(o.Change).(*os_image_profile.OsImageProfileChange)
	return result
}

func (o *WatchOsImageProfileResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOsImageProfileResponse) Merge(source *WatchOsImageProfileResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(os_image_profile.OsImageProfileChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchOsImageProfileResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOsImageProfileResponse))
}

func (o *WatchOsImageProfilesRequest) GotenObjectExt() {}

func (o *WatchOsImageProfilesRequest) MakeFullFieldMask() *WatchOsImageProfilesRequest_FieldMask {
	return FullWatchOsImageProfilesRequest_FieldMask()
}

func (o *WatchOsImageProfilesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOsImageProfilesRequest_FieldMask()
}

func (o *WatchOsImageProfilesRequest) MakeDiffFieldMask(other *WatchOsImageProfilesRequest) *WatchOsImageProfilesRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchOsImageProfilesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOsImageProfilesRequest_FieldMask()
	}

	res := &WatchOsImageProfilesRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchOsImageProfilesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOsImageProfilesRequest))
}

func (o *WatchOsImageProfilesRequest) Clone() *WatchOsImageProfilesRequest {
	if o == nil {
		return nil
	}
	result := &WatchOsImageProfilesRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &os_image_profile.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &os_image_profile.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &os_image_profile.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &os_image_profile.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*os_image_profile.OsImageProfile_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchOsImageProfilesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOsImageProfilesRequest) Merge(source *WatchOsImageProfilesRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &os_image_profile.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &os_image_profile.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &os_image_profile.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &os_image_profile.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(os_image_profile.OsImageProfile_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchOsImageProfilesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOsImageProfilesRequest))
}

func (o *WatchOsImageProfilesResponse) GotenObjectExt() {}

func (o *WatchOsImageProfilesResponse) MakeFullFieldMask() *WatchOsImageProfilesResponse_FieldMask {
	return FullWatchOsImageProfilesResponse_FieldMask()
}

func (o *WatchOsImageProfilesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOsImageProfilesResponse_FieldMask()
}

func (o *WatchOsImageProfilesResponse) MakeDiffFieldMask(other *WatchOsImageProfilesResponse) *WatchOsImageProfilesResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchOsImageProfilesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOsImageProfilesResponse_FieldMask()
	}

	res := &WatchOsImageProfilesResponse_FieldMask{}

	if len(o.GetOsImageProfileChanges()) == len(other.GetOsImageProfileChanges()) {
		for i, lValue := range o.GetOsImageProfileChanges() {
			rValue := other.GetOsImageProfileChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldSubPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchOsImageProfilesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOsImageProfilesResponse))
}

func (o *WatchOsImageProfilesResponse) Clone() *WatchOsImageProfilesResponse {
	if o == nil {
		return nil
	}
	result := &WatchOsImageProfilesResponse{}
	result.OsImageProfileChanges = make([]*os_image_profile.OsImageProfileChange, len(o.OsImageProfileChanges))
	for i, sourceValue := range o.OsImageProfileChanges {
		result.OsImageProfileChanges[i] = proto.Clone(sourceValue).(*os_image_profile.OsImageProfileChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchOsImageProfilesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOsImageProfilesResponse) Merge(source *WatchOsImageProfilesResponse) {
	for _, sourceValue := range source.GetOsImageProfileChanges() {
		exists := false
		for _, currentValue := range o.OsImageProfileChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *os_image_profile.OsImageProfileChange
			if sourceValue != nil {
				newDstElement = new(os_image_profile.OsImageProfileChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.OsImageProfileChanges = append(o.OsImageProfileChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchOsImageProfilesResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchOsImageProfilesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOsImageProfilesResponse))
}

func (o *WatchOsImageProfilesResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchOsImageProfilesResponse_PageTokenChange) MakeFullFieldMask() *WatchOsImageProfilesResponse_PageTokenChange_FieldMask {
	return FullWatchOsImageProfilesResponse_PageTokenChange_FieldMask()
}

func (o *WatchOsImageProfilesResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOsImageProfilesResponse_PageTokenChange_FieldMask()
}

func (o *WatchOsImageProfilesResponse_PageTokenChange) MakeDiffFieldMask(other *WatchOsImageProfilesResponse_PageTokenChange) *WatchOsImageProfilesResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchOsImageProfilesResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOsImageProfilesResponse_PageTokenChange_FieldMask()
	}

	res := &WatchOsImageProfilesResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath{selector: WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath{selector: WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchOsImageProfilesResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOsImageProfilesResponse_PageTokenChange))
}

func (o *WatchOsImageProfilesResponse_PageTokenChange) Clone() *WatchOsImageProfilesResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchOsImageProfilesResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &os_image_profile.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &os_image_profile.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchOsImageProfilesResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOsImageProfilesResponse_PageTokenChange) Merge(source *WatchOsImageProfilesResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &os_image_profile.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &os_image_profile.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchOsImageProfilesResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOsImageProfilesResponse_PageTokenChange))
}

func (o *CreateOsImageProfileRequest) GotenObjectExt() {}

func (o *CreateOsImageProfileRequest) MakeFullFieldMask() *CreateOsImageProfileRequest_FieldMask {
	return FullCreateOsImageProfileRequest_FieldMask()
}

func (o *CreateOsImageProfileRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateOsImageProfileRequest_FieldMask()
}

func (o *CreateOsImageProfileRequest) MakeDiffFieldMask(other *CreateOsImageProfileRequest) *CreateOsImageProfileRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateOsImageProfileRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateOsImageProfileRequest_FieldMask()
	}

	res := &CreateOsImageProfileRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateOsImageProfileRequest_FieldTerminalPath{selector: CreateOsImageProfileRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetOsImageProfile().MakeDiffFieldMask(other.GetOsImageProfile())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateOsImageProfileRequest_FieldTerminalPath{selector: CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateOsImageProfileRequest_FieldSubPath{selector: CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateOsImageProfileRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateOsImageProfileRequest))
}

func (o *CreateOsImageProfileRequest) Clone() *CreateOsImageProfileRequest {
	if o == nil {
		return nil
	}
	result := &CreateOsImageProfileRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &os_image_profile.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.OsImageProfile = o.OsImageProfile.Clone()
	return result
}

func (o *CreateOsImageProfileRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateOsImageProfileRequest) Merge(source *CreateOsImageProfileRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &os_image_profile.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetOsImageProfile() != nil {
		if o.OsImageProfile == nil {
			o.OsImageProfile = new(os_image_profile.OsImageProfile)
		}
		o.OsImageProfile.Merge(source.GetOsImageProfile())
	}
}

func (o *CreateOsImageProfileRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateOsImageProfileRequest))
}

func (o *UpdateOsImageProfileRequest) GotenObjectExt() {}

func (o *UpdateOsImageProfileRequest) MakeFullFieldMask() *UpdateOsImageProfileRequest_FieldMask {
	return FullUpdateOsImageProfileRequest_FieldMask()
}

func (o *UpdateOsImageProfileRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateOsImageProfileRequest_FieldMask()
}

func (o *UpdateOsImageProfileRequest) MakeDiffFieldMask(other *UpdateOsImageProfileRequest) *UpdateOsImageProfileRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateOsImageProfileRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateOsImageProfileRequest_FieldMask()
	}

	res := &UpdateOsImageProfileRequest_FieldMask{}
	{
		subMask := o.GetOsImageProfile().MakeDiffFieldMask(other.GetOsImageProfile())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateOsImageProfileRequest_FieldTerminalPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateOsImageProfileRequest_FieldSubPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateOsImageProfileRequest_FieldTerminalPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateOsImageProfileRequest_FieldTerminalPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateOsImageProfileRequest_FieldSubPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateOsImageProfileRequest_FieldTerminalPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateOsImageProfileRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateOsImageProfileRequest))
}

func (o *UpdateOsImageProfileRequest) Clone() *UpdateOsImageProfileRequest {
	if o == nil {
		return nil
	}
	result := &UpdateOsImageProfileRequest{}
	result.OsImageProfile = o.OsImageProfile.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*os_image_profile.OsImageProfile_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateOsImageProfileRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateOsImageProfileRequest) Merge(source *UpdateOsImageProfileRequest) {
	if source.GetOsImageProfile() != nil {
		if o.OsImageProfile == nil {
			o.OsImageProfile = new(os_image_profile.OsImageProfile)
		}
		o.OsImageProfile.Merge(source.GetOsImageProfile())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(os_image_profile.OsImageProfile_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateOsImageProfileRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateOsImageProfileRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateOsImageProfileRequest))
}

func (o *UpdateOsImageProfileRequest_CAS) GotenObjectExt() {}

func (o *UpdateOsImageProfileRequest_CAS) MakeFullFieldMask() *UpdateOsImageProfileRequest_CAS_FieldMask {
	return FullUpdateOsImageProfileRequest_CAS_FieldMask()
}

func (o *UpdateOsImageProfileRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateOsImageProfileRequest_CAS_FieldMask()
}

func (o *UpdateOsImageProfileRequest_CAS) MakeDiffFieldMask(other *UpdateOsImageProfileRequest_CAS) *UpdateOsImageProfileRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateOsImageProfileRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateOsImageProfileRequest_CAS_FieldMask()
	}

	res := &UpdateOsImageProfileRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateOsImageProfileRequestCAS_FieldTerminalPath{selector: UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateOsImageProfileRequestCAS_FieldSubPath{selector: UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateOsImageProfileRequestCAS_FieldTerminalPath{selector: UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateOsImageProfileRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateOsImageProfileRequest_CAS))
}

func (o *UpdateOsImageProfileRequest_CAS) Clone() *UpdateOsImageProfileRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateOsImageProfileRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*os_image_profile.OsImageProfile_FieldMask)
	return result
}

func (o *UpdateOsImageProfileRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateOsImageProfileRequest_CAS) Merge(source *UpdateOsImageProfileRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(os_image_profile.OsImageProfile)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(os_image_profile.OsImageProfile_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateOsImageProfileRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateOsImageProfileRequest_CAS))
}

func (o *DeleteOsImageProfileRequest) GotenObjectExt() {}

func (o *DeleteOsImageProfileRequest) MakeFullFieldMask() *DeleteOsImageProfileRequest_FieldMask {
	return FullDeleteOsImageProfileRequest_FieldMask()
}

func (o *DeleteOsImageProfileRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteOsImageProfileRequest_FieldMask()
}

func (o *DeleteOsImageProfileRequest) MakeDiffFieldMask(other *DeleteOsImageProfileRequest) *DeleteOsImageProfileRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteOsImageProfileRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteOsImageProfileRequest_FieldMask()
	}

	res := &DeleteOsImageProfileRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteOsImageProfileRequest_FieldTerminalPath{selector: DeleteOsImageProfileRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteOsImageProfileRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteOsImageProfileRequest))
}

func (o *DeleteOsImageProfileRequest) Clone() *DeleteOsImageProfileRequest {
	if o == nil {
		return nil
	}
	result := &DeleteOsImageProfileRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &os_image_profile.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteOsImageProfileRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteOsImageProfileRequest) Merge(source *DeleteOsImageProfileRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &os_image_profile.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteOsImageProfileRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteOsImageProfileRequest))
}
