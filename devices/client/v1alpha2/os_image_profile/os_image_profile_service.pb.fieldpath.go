// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/os_image_profile_service.proto
// DO NOT EDIT!!!

package os_image_profile_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	os_image_profile "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/os_image_profile"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &os_image_profile.OsImageProfile{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetOsImageProfileRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetOsImageProfileRequest_FieldPathSelector
	Get(source *GetOsImageProfileRequest) []interface{}
	GetSingle(source *GetOsImageProfileRequest) (interface{}, bool)
	ClearValue(item *GetOsImageProfileRequest)

	// Those methods build corresponding GetOsImageProfileRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetOsImageProfileRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetOsImageProfileRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetOsImageProfileRequest_FieldPathArrayItemValue
}

type GetOsImageProfileRequest_FieldPathSelector int32

const (
	GetOsImageProfileRequest_FieldPathSelectorName      GetOsImageProfileRequest_FieldPathSelector = 0
	GetOsImageProfileRequest_FieldPathSelectorFieldMask GetOsImageProfileRequest_FieldPathSelector = 1
	GetOsImageProfileRequest_FieldPathSelectorView      GetOsImageProfileRequest_FieldPathSelector = 2
)

func (s GetOsImageProfileRequest_FieldPathSelector) String() string {
	switch s {
	case GetOsImageProfileRequest_FieldPathSelectorName:
		return "name"
	case GetOsImageProfileRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetOsImageProfileRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsImageProfileRequest: %d", s))
	}
}

func BuildGetOsImageProfileRequest_FieldPath(fp gotenobject.RawFieldPath) (GetOsImageProfileRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetOsImageProfileRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetOsImageProfileRequest_FieldTerminalPath{selector: GetOsImageProfileRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetOsImageProfileRequest_FieldTerminalPath{selector: GetOsImageProfileRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetOsImageProfileRequest_FieldTerminalPath{selector: GetOsImageProfileRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetOsImageProfileRequest", fp)
}

func ParseGetOsImageProfileRequest_FieldPath(rawField string) (GetOsImageProfileRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetOsImageProfileRequest_FieldPath(fp)
}

func MustParseGetOsImageProfileRequest_FieldPath(rawField string) GetOsImageProfileRequest_FieldPath {
	fp, err := ParseGetOsImageProfileRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetOsImageProfileRequest_FieldTerminalPath struct {
	selector GetOsImageProfileRequest_FieldPathSelector
}

var _ GetOsImageProfileRequest_FieldPath = (*GetOsImageProfileRequest_FieldTerminalPath)(nil)

func (fp *GetOsImageProfileRequest_FieldTerminalPath) Selector() GetOsImageProfileRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetOsImageProfileRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetOsImageProfileRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetOsImageProfileRequest
func (fp *GetOsImageProfileRequest_FieldTerminalPath) Get(source *GetOsImageProfileRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetOsImageProfileRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetOsImageProfileRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetOsImageProfileRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetOsImageProfileRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetOsImageProfileRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetOsImageProfileRequest))
}

// GetSingle returns value pointed by specific field of from source GetOsImageProfileRequest
func (fp *GetOsImageProfileRequest_FieldTerminalPath) GetSingle(source *GetOsImageProfileRequest) (interface{}, bool) {
	switch fp.selector {
	case GetOsImageProfileRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetOsImageProfileRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetOsImageProfileRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *GetOsImageProfileRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetOsImageProfileRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetOsImageProfileRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetOsImageProfileRequest_FieldPathSelectorName:
		return (*os_image_profile.Reference)(nil)
	case GetOsImageProfileRequest_FieldPathSelectorFieldMask:
		return (*os_image_profile.OsImageProfile_FieldMask)(nil)
	case GetOsImageProfileRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *GetOsImageProfileRequest_FieldTerminalPath) ClearValue(item *GetOsImageProfileRequest) {
	if item != nil {
		switch fp.selector {
		case GetOsImageProfileRequest_FieldPathSelectorName:
			item.Name = nil
		case GetOsImageProfileRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetOsImageProfileRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetOsImageProfileRequest: %d", fp.selector))
		}
	}
}

func (fp *GetOsImageProfileRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetOsImageProfileRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetOsImageProfileRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetOsImageProfileRequest_FieldPathSelectorName ||
		fp.selector == GetOsImageProfileRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetOsImageProfileRequest_FieldPathSelectorView
}

func (fp *GetOsImageProfileRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetOsImageProfileRequest_FieldTerminalPath) WithIValue(value interface{}) GetOsImageProfileRequest_FieldPathValue {
	switch fp.selector {
	case GetOsImageProfileRequest_FieldPathSelectorName:
		return &GetOsImageProfileRequest_FieldTerminalPathValue{GetOsImageProfileRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.Reference)}
	case GetOsImageProfileRequest_FieldPathSelectorFieldMask:
		return &GetOsImageProfileRequest_FieldTerminalPathValue{GetOsImageProfileRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.OsImageProfile_FieldMask)}
	case GetOsImageProfileRequest_FieldPathSelectorView:
		return &GetOsImageProfileRequest_FieldTerminalPathValue{GetOsImageProfileRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *GetOsImageProfileRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetOsImageProfileRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetOsImageProfileRequest_FieldPathArrayOfValues {
	fpaov := &GetOsImageProfileRequest_FieldTerminalPathArrayOfValues{GetOsImageProfileRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetOsImageProfileRequest_FieldPathSelectorName:
		return &GetOsImageProfileRequest_FieldTerminalPathArrayOfValues{GetOsImageProfileRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.Reference)}
	case GetOsImageProfileRequest_FieldPathSelectorFieldMask:
		return &GetOsImageProfileRequest_FieldTerminalPathArrayOfValues{GetOsImageProfileRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.OsImageProfile_FieldMask)}
	case GetOsImageProfileRequest_FieldPathSelectorView:
		return &GetOsImageProfileRequest_FieldTerminalPathArrayOfValues{GetOsImageProfileRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsImageProfileRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetOsImageProfileRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetOsImageProfileRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetOsImageProfileRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *GetOsImageProfileRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetOsImageProfileRequest_FieldPathValue allows storing values for GetOsImageProfileRequest fields according to their type
type GetOsImageProfileRequest_FieldPathValue interface {
	GetOsImageProfileRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetOsImageProfileRequest)
	CompareWith(*GetOsImageProfileRequest) (cmp int, comparable bool)
}

func ParseGetOsImageProfileRequest_FieldPathValue(pathStr, valueStr string) (GetOsImageProfileRequest_FieldPathValue, error) {
	fp, err := ParseGetOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetOsImageProfileRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetOsImageProfileRequest_FieldPathValue), nil
}

func MustParseGetOsImageProfileRequest_FieldPathValue(pathStr, valueStr string) GetOsImageProfileRequest_FieldPathValue {
	fpv, err := ParseGetOsImageProfileRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetOsImageProfileRequest_FieldTerminalPathValue struct {
	GetOsImageProfileRequest_FieldTerminalPath
	value interface{}
}

var _ GetOsImageProfileRequest_FieldPathValue = (*GetOsImageProfileRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetOsImageProfileRequest' as interface{}
func (fpv *GetOsImageProfileRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetOsImageProfileRequest_FieldTerminalPathValue) AsNameValue() (*os_image_profile.Reference, bool) {
	res, ok := fpv.value.(*os_image_profile.Reference)
	return res, ok
}
func (fpv *GetOsImageProfileRequest_FieldTerminalPathValue) AsFieldMaskValue() (*os_image_profile.OsImageProfile_FieldMask, bool) {
	res, ok := fpv.value.(*os_image_profile.OsImageProfile_FieldMask)
	return res, ok
}
func (fpv *GetOsImageProfileRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetOsImageProfileRequest
func (fpv *GetOsImageProfileRequest_FieldTerminalPathValue) SetTo(target **GetOsImageProfileRequest) {
	if *target == nil {
		*target = new(GetOsImageProfileRequest)
	}
	switch fpv.selector {
	case GetOsImageProfileRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*os_image_profile.Reference)
	case GetOsImageProfileRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*os_image_profile.OsImageProfile_FieldMask)
	case GetOsImageProfileRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsImageProfileRequest: %d", fpv.selector))
	}
}

func (fpv *GetOsImageProfileRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetOsImageProfileRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetOsImageProfileRequest_FieldTerminalPathValue' with the value under path in 'GetOsImageProfileRequest'.
func (fpv *GetOsImageProfileRequest_FieldTerminalPathValue) CompareWith(source *GetOsImageProfileRequest) (int, bool) {
	switch fpv.selector {
	case GetOsImageProfileRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*os_image_profile.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetOsImageProfileRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetOsImageProfileRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsImageProfileRequest: %d", fpv.selector))
	}
}

func (fpv *GetOsImageProfileRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetOsImageProfileRequest))
}

// GetOsImageProfileRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetOsImageProfileRequest according to their type
// Present only for array (repeated) types.
type GetOsImageProfileRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetOsImageProfileRequest_FieldPath
	ContainsValue(*GetOsImageProfileRequest) bool
}

// ParseGetOsImageProfileRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetOsImageProfileRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetOsImageProfileRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetOsImageProfileRequest_FieldPathArrayItemValue), nil
}

func MustParseGetOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetOsImageProfileRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetOsImageProfileRequest_FieldTerminalPathArrayItemValue struct {
	GetOsImageProfileRequest_FieldTerminalPath
	value interface{}
}

var _ GetOsImageProfileRequest_FieldPathArrayItemValue = (*GetOsImageProfileRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetOsImageProfileRequest as interface{}
func (fpaiv *GetOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetOsImageProfileRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetOsImageProfileRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetOsImageProfileRequest'
func (fpaiv *GetOsImageProfileRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetOsImageProfileRequest) bool {
	slice := fpaiv.GetOsImageProfileRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetOsImageProfileRequest_FieldPathArrayOfValues allows storing slice of values for GetOsImageProfileRequest fields according to their type
type GetOsImageProfileRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetOsImageProfileRequest_FieldPath
}

func ParseGetOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetOsImageProfileRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetOsImageProfileRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetOsImageProfileRequest_FieldPathArrayOfValues), nil
}

func MustParseGetOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetOsImageProfileRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetOsImageProfileRequest_FieldTerminalPathArrayOfValues struct {
	GetOsImageProfileRequest_FieldTerminalPath
	values interface{}
}

var _ GetOsImageProfileRequest_FieldPathArrayOfValues = (*GetOsImageProfileRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetOsImageProfileRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetOsImageProfileRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*os_image_profile.Reference) {
			values = append(values, v)
		}
	case GetOsImageProfileRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*os_image_profile.OsImageProfile_FieldMask) {
			values = append(values, v)
		}
	case GetOsImageProfileRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetOsImageProfileRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*os_image_profile.Reference, bool) {
	res, ok := fpaov.values.([]*os_image_profile.Reference)
	return res, ok
}
func (fpaov *GetOsImageProfileRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*os_image_profile.OsImageProfile_FieldMask, bool) {
	res, ok := fpaov.values.([]*os_image_profile.OsImageProfile_FieldMask)
	return res, ok
}
func (fpaov *GetOsImageProfileRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetOsImageProfilesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetOsImageProfilesRequest_FieldPathSelector
	Get(source *BatchGetOsImageProfilesRequest) []interface{}
	GetSingle(source *BatchGetOsImageProfilesRequest) (interface{}, bool)
	ClearValue(item *BatchGetOsImageProfilesRequest)

	// Those methods build corresponding BatchGetOsImageProfilesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetOsImageProfilesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetOsImageProfilesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetOsImageProfilesRequest_FieldPathArrayItemValue
}

type BatchGetOsImageProfilesRequest_FieldPathSelector int32

const (
	BatchGetOsImageProfilesRequest_FieldPathSelectorNames     BatchGetOsImageProfilesRequest_FieldPathSelector = 0
	BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask BatchGetOsImageProfilesRequest_FieldPathSelector = 1
	BatchGetOsImageProfilesRequest_FieldPathSelectorView      BatchGetOsImageProfilesRequest_FieldPathSelector = 2
)

func (s BatchGetOsImageProfilesRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetOsImageProfilesRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetOsImageProfilesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesRequest: %d", s))
	}
}

func BuildBatchGetOsImageProfilesRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetOsImageProfilesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetOsImageProfilesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetOsImageProfilesRequest_FieldTerminalPath{selector: BatchGetOsImageProfilesRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetOsImageProfilesRequest_FieldTerminalPath{selector: BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetOsImageProfilesRequest_FieldTerminalPath{selector: BatchGetOsImageProfilesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetOsImageProfilesRequest", fp)
}

func ParseBatchGetOsImageProfilesRequest_FieldPath(rawField string) (BatchGetOsImageProfilesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetOsImageProfilesRequest_FieldPath(fp)
}

func MustParseBatchGetOsImageProfilesRequest_FieldPath(rawField string) BatchGetOsImageProfilesRequest_FieldPath {
	fp, err := ParseBatchGetOsImageProfilesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetOsImageProfilesRequest_FieldTerminalPath struct {
	selector BatchGetOsImageProfilesRequest_FieldPathSelector
}

var _ BatchGetOsImageProfilesRequest_FieldPath = (*BatchGetOsImageProfilesRequest_FieldTerminalPath)(nil)

func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) Selector() BatchGetOsImageProfilesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetOsImageProfilesRequest
func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) Get(source *BatchGetOsImageProfilesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetOsImageProfilesRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetOsImageProfilesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetOsImageProfilesRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetOsImageProfilesRequest
func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) GetSingle(source *BatchGetOsImageProfilesRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetOsImageProfilesRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetOsImageProfilesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetOsImageProfilesRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetOsImageProfilesRequest_FieldPathSelectorNames:
		return ([]*os_image_profile.Reference)(nil)
	case BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return (*os_image_profile.OsImageProfile_FieldMask)(nil)
	case BatchGetOsImageProfilesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) ClearValue(item *BatchGetOsImageProfilesRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetOsImageProfilesRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetOsImageProfilesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetOsImageProfilesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetOsImageProfilesRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetOsImageProfilesRequest_FieldPathSelectorView
}

func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetOsImageProfilesRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetOsImageProfilesRequest_FieldPathSelectorNames:
		return &BatchGetOsImageProfilesRequest_FieldTerminalPathValue{BatchGetOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.([]*os_image_profile.Reference)}
	case BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return &BatchGetOsImageProfilesRequest_FieldTerminalPathValue{BatchGetOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.OsImageProfile_FieldMask)}
	case BatchGetOsImageProfilesRequest_FieldPathSelectorView:
		return &BatchGetOsImageProfilesRequest_FieldTerminalPathValue{BatchGetOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetOsImageProfilesRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetOsImageProfilesRequest_FieldTerminalPathArrayOfValues{BatchGetOsImageProfilesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetOsImageProfilesRequest_FieldPathSelectorNames:
		return &BatchGetOsImageProfilesRequest_FieldTerminalPathArrayOfValues{BatchGetOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([][]*os_image_profile.Reference)}
	case BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return &BatchGetOsImageProfilesRequest_FieldTerminalPathArrayOfValues{BatchGetOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.OsImageProfile_FieldMask)}
	case BatchGetOsImageProfilesRequest_FieldPathSelectorView:
		return &BatchGetOsImageProfilesRequest_FieldTerminalPathArrayOfValues{BatchGetOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetOsImageProfilesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetOsImageProfilesRequest_FieldPathSelectorNames:
		return &BatchGetOsImageProfilesRequest_FieldTerminalPathArrayItemValue{BatchGetOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOsImageProfilesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetOsImageProfilesRequest_FieldPathValue allows storing values for BatchGetOsImageProfilesRequest fields according to their type
type BatchGetOsImageProfilesRequest_FieldPathValue interface {
	BatchGetOsImageProfilesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetOsImageProfilesRequest)
	CompareWith(*BatchGetOsImageProfilesRequest) (cmp int, comparable bool)
}

func ParseBatchGetOsImageProfilesRequest_FieldPathValue(pathStr, valueStr string) (BatchGetOsImageProfilesRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetOsImageProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOsImageProfilesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetOsImageProfilesRequest_FieldPathValue), nil
}

func MustParseBatchGetOsImageProfilesRequest_FieldPathValue(pathStr, valueStr string) BatchGetOsImageProfilesRequest_FieldPathValue {
	fpv, err := ParseBatchGetOsImageProfilesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetOsImageProfilesRequest_FieldTerminalPathValue struct {
	BatchGetOsImageProfilesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetOsImageProfilesRequest_FieldPathValue = (*BatchGetOsImageProfilesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetOsImageProfilesRequest' as interface{}
func (fpv *BatchGetOsImageProfilesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetOsImageProfilesRequest_FieldTerminalPathValue) AsNamesValue() ([]*os_image_profile.Reference, bool) {
	res, ok := fpv.value.([]*os_image_profile.Reference)
	return res, ok
}
func (fpv *BatchGetOsImageProfilesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*os_image_profile.OsImageProfile_FieldMask, bool) {
	res, ok := fpv.value.(*os_image_profile.OsImageProfile_FieldMask)
	return res, ok
}
func (fpv *BatchGetOsImageProfilesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetOsImageProfilesRequest
func (fpv *BatchGetOsImageProfilesRequest_FieldTerminalPathValue) SetTo(target **BatchGetOsImageProfilesRequest) {
	if *target == nil {
		*target = new(BatchGetOsImageProfilesRequest)
	}
	switch fpv.selector {
	case BatchGetOsImageProfilesRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*os_image_profile.Reference)
	case BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*os_image_profile.OsImageProfile_FieldMask)
	case BatchGetOsImageProfilesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetOsImageProfilesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetOsImageProfilesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetOsImageProfilesRequest_FieldTerminalPathValue' with the value under path in 'BatchGetOsImageProfilesRequest'.
func (fpv *BatchGetOsImageProfilesRequest_FieldTerminalPathValue) CompareWith(source *BatchGetOsImageProfilesRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetOsImageProfilesRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetOsImageProfilesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetOsImageProfilesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetOsImageProfilesRequest))
}

// BatchGetOsImageProfilesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetOsImageProfilesRequest according to their type
// Present only for array (repeated) types.
type BatchGetOsImageProfilesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetOsImageProfilesRequest_FieldPath
	ContainsValue(*BatchGetOsImageProfilesRequest) bool
}

// ParseBatchGetOsImageProfilesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetOsImageProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetOsImageProfilesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetOsImageProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOsImageProfilesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetOsImageProfilesRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetOsImageProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetOsImageProfilesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetOsImageProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetOsImageProfilesRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetOsImageProfilesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetOsImageProfilesRequest_FieldPathArrayItemValue = (*BatchGetOsImageProfilesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetOsImageProfilesRequest as interface{}
func (fpaiv *BatchGetOsImageProfilesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetOsImageProfilesRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*os_image_profile.Reference, bool) {
	res, ok := fpaiv.value.(*os_image_profile.Reference)
	return res, ok
}

func (fpaiv *BatchGetOsImageProfilesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetOsImageProfilesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetOsImageProfilesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetOsImageProfilesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetOsImageProfilesRequest'
func (fpaiv *BatchGetOsImageProfilesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetOsImageProfilesRequest) bool {
	slice := fpaiv.BatchGetOsImageProfilesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetOsImageProfilesRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetOsImageProfilesRequest fields according to their type
type BatchGetOsImageProfilesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetOsImageProfilesRequest_FieldPath
}

func ParseBatchGetOsImageProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetOsImageProfilesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetOsImageProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOsImageProfilesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetOsImageProfilesRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetOsImageProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetOsImageProfilesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetOsImageProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetOsImageProfilesRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetOsImageProfilesRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetOsImageProfilesRequest_FieldPathArrayOfValues = (*BatchGetOsImageProfilesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetOsImageProfilesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetOsImageProfilesRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*os_image_profile.Reference) {
			values = append(values, v)
		}
	case BatchGetOsImageProfilesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*os_image_profile.OsImageProfile_FieldMask) {
			values = append(values, v)
		}
	case BatchGetOsImageProfilesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*os_image_profile.Reference, bool) {
	res, ok := fpaov.values.([][]*os_image_profile.Reference)
	return res, ok
}
func (fpaov *BatchGetOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*os_image_profile.OsImageProfile_FieldMask, bool) {
	res, ok := fpaov.values.([]*os_image_profile.OsImageProfile_FieldMask)
	return res, ok
}
func (fpaov *BatchGetOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetOsImageProfilesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetOsImageProfilesResponse_FieldPathSelector
	Get(source *BatchGetOsImageProfilesResponse) []interface{}
	GetSingle(source *BatchGetOsImageProfilesResponse) (interface{}, bool)
	ClearValue(item *BatchGetOsImageProfilesResponse)

	// Those methods build corresponding BatchGetOsImageProfilesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetOsImageProfilesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetOsImageProfilesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetOsImageProfilesResponse_FieldPathArrayItemValue
}

type BatchGetOsImageProfilesResponse_FieldPathSelector int32

const (
	BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles BatchGetOsImageProfilesResponse_FieldPathSelector = 0
	BatchGetOsImageProfilesResponse_FieldPathSelectorMissing         BatchGetOsImageProfilesResponse_FieldPathSelector = 1
)

func (s BatchGetOsImageProfilesResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return "os_image_profiles"
	case BatchGetOsImageProfilesResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", s))
	}
}

func BuildBatchGetOsImageProfilesResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetOsImageProfilesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetOsImageProfilesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "os_image_profiles", "osImageProfiles", "os-image-profiles":
			return &BatchGetOsImageProfilesResponse_FieldTerminalPath{selector: BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles}, nil
		case "missing":
			return &BatchGetOsImageProfilesResponse_FieldTerminalPath{selector: BatchGetOsImageProfilesResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "os_image_profiles", "osImageProfiles", "os-image-profiles":
			if subpath, err := os_image_profile.BuildOsImageProfile_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetOsImageProfilesResponse_FieldSubPath{selector: BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetOsImageProfilesResponse", fp)
}

func ParseBatchGetOsImageProfilesResponse_FieldPath(rawField string) (BatchGetOsImageProfilesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetOsImageProfilesResponse_FieldPath(fp)
}

func MustParseBatchGetOsImageProfilesResponse_FieldPath(rawField string) BatchGetOsImageProfilesResponse_FieldPath {
	fp, err := ParseBatchGetOsImageProfilesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetOsImageProfilesResponse_FieldTerminalPath struct {
	selector BatchGetOsImageProfilesResponse_FieldPathSelector
}

var _ BatchGetOsImageProfilesResponse_FieldPath = (*BatchGetOsImageProfilesResponse_FieldTerminalPath)(nil)

func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) Selector() BatchGetOsImageProfilesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetOsImageProfilesResponse
func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) Get(source *BatchGetOsImageProfilesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
			for _, value := range source.GetOsImageProfiles() {
				values = append(values, value)
			}
		case BatchGetOsImageProfilesResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetOsImageProfilesResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetOsImageProfilesResponse
func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) GetSingle(source *BatchGetOsImageProfilesResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		res := source.GetOsImageProfiles()
		return res, res != nil
	case BatchGetOsImageProfilesResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetOsImageProfilesResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return ([]*os_image_profile.OsImageProfile)(nil)
	case BatchGetOsImageProfilesResponse_FieldPathSelectorMissing:
		return ([]*os_image_profile.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) ClearValue(item *BatchGetOsImageProfilesResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
			item.OsImageProfiles = nil
		case BatchGetOsImageProfilesResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetOsImageProfilesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetOsImageProfilesResponse_FieldPathSelectorMissing
}

func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetOsImageProfilesResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return &BatchGetOsImageProfilesResponse_FieldTerminalPathValue{BatchGetOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.([]*os_image_profile.OsImageProfile)}
	case BatchGetOsImageProfilesResponse_FieldPathSelectorMissing:
		return &BatchGetOsImageProfilesResponse_FieldTerminalPathValue{BatchGetOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.([]*os_image_profile.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetOsImageProfilesResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetOsImageProfilesResponse_FieldTerminalPathArrayOfValues{BatchGetOsImageProfilesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return &BatchGetOsImageProfilesResponse_FieldTerminalPathArrayOfValues{BatchGetOsImageProfilesResponse_FieldTerminalPath: *fp, values: values.([][]*os_image_profile.OsImageProfile)}
	case BatchGetOsImageProfilesResponse_FieldPathSelectorMissing:
		return &BatchGetOsImageProfilesResponse_FieldTerminalPathArrayOfValues{BatchGetOsImageProfilesResponse_FieldTerminalPath: *fp, values: values.([][]*os_image_profile.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetOsImageProfilesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return &BatchGetOsImageProfilesResponse_FieldTerminalPathArrayItemValue{BatchGetOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.(*os_image_profile.OsImageProfile)}
	case BatchGetOsImageProfilesResponse_FieldPathSelectorMissing:
		return &BatchGetOsImageProfilesResponse_FieldTerminalPathArrayItemValue{BatchGetOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.(*os_image_profile.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOsImageProfilesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetOsImageProfilesResponse_FieldSubPath struct {
	selector BatchGetOsImageProfilesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetOsImageProfilesResponse_FieldPath = (*BatchGetOsImageProfilesResponse_FieldSubPath)(nil)

func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) Selector() BatchGetOsImageProfilesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) AsOsImageProfilesSubPath() (os_image_profile.OsImageProfile_FieldPath, bool) {
	res, ok := fps.subPath.(os_image_profile.OsImageProfile_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetOsImageProfilesResponse
func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) Get(source *BatchGetOsImageProfilesResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		for _, item := range source.GetOsImageProfiles() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetOsImageProfilesResponse))
}

// GetSingle returns value of selected field from source BatchGetOsImageProfilesResponse
func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) GetSingle(source *BatchGetOsImageProfilesResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		if len(source.GetOsImageProfiles()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOsImageProfiles()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fps.selector))
	}
}

func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetOsImageProfilesResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) ClearValue(item *BatchGetOsImageProfilesResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
			for _, subItem := range item.OsImageProfiles {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetOsImageProfilesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetOsImageProfilesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) WithIValue(value interface{}) BatchGetOsImageProfilesResponse_FieldPathValue {
	return &BatchGetOsImageProfilesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetOsImageProfilesResponse_FieldPathArrayOfValues {
	return &BatchGetOsImageProfilesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetOsImageProfilesResponse_FieldPathArrayItemValue {
	return &BatchGetOsImageProfilesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetOsImageProfilesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetOsImageProfilesResponse_FieldPathValue allows storing values for BatchGetOsImageProfilesResponse fields according to their type
type BatchGetOsImageProfilesResponse_FieldPathValue interface {
	BatchGetOsImageProfilesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetOsImageProfilesResponse)
	CompareWith(*BatchGetOsImageProfilesResponse) (cmp int, comparable bool)
}

func ParseBatchGetOsImageProfilesResponse_FieldPathValue(pathStr, valueStr string) (BatchGetOsImageProfilesResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetOsImageProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOsImageProfilesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetOsImageProfilesResponse_FieldPathValue), nil
}

func MustParseBatchGetOsImageProfilesResponse_FieldPathValue(pathStr, valueStr string) BatchGetOsImageProfilesResponse_FieldPathValue {
	fpv, err := ParseBatchGetOsImageProfilesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetOsImageProfilesResponse_FieldTerminalPathValue struct {
	BatchGetOsImageProfilesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetOsImageProfilesResponse_FieldPathValue = (*BatchGetOsImageProfilesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetOsImageProfilesResponse' as interface{}
func (fpv *BatchGetOsImageProfilesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetOsImageProfilesResponse_FieldTerminalPathValue) AsOsImageProfilesValue() ([]*os_image_profile.OsImageProfile, bool) {
	res, ok := fpv.value.([]*os_image_profile.OsImageProfile)
	return res, ok
}
func (fpv *BatchGetOsImageProfilesResponse_FieldTerminalPathValue) AsMissingValue() ([]*os_image_profile.Reference, bool) {
	res, ok := fpv.value.([]*os_image_profile.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetOsImageProfilesResponse
func (fpv *BatchGetOsImageProfilesResponse_FieldTerminalPathValue) SetTo(target **BatchGetOsImageProfilesResponse) {
	if *target == nil {
		*target = new(BatchGetOsImageProfilesResponse)
	}
	switch fpv.selector {
	case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		(*target).OsImageProfiles = fpv.value.([]*os_image_profile.OsImageProfile)
	case BatchGetOsImageProfilesResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*os_image_profile.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetOsImageProfilesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetOsImageProfilesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetOsImageProfilesResponse_FieldTerminalPathValue' with the value under path in 'BatchGetOsImageProfilesResponse'.
func (fpv *BatchGetOsImageProfilesResponse_FieldTerminalPathValue) CompareWith(source *BatchGetOsImageProfilesResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return 0, false
	case BatchGetOsImageProfilesResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetOsImageProfilesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetOsImageProfilesResponse))
}

type BatchGetOsImageProfilesResponse_FieldSubPathValue struct {
	BatchGetOsImageProfilesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetOsImageProfilesResponse_FieldPathValue = (*BatchGetOsImageProfilesResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetOsImageProfilesResponse_FieldSubPathValue) AsOsImageProfilesPathValue() (os_image_profile.OsImageProfile_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(os_image_profile.OsImageProfile_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetOsImageProfilesResponse_FieldSubPathValue) SetTo(target **BatchGetOsImageProfilesResponse) {
	if *target == nil {
		*target = new(BatchGetOsImageProfilesResponse)
	}
	switch fpvs.Selector() {
	case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetOsImageProfilesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetOsImageProfilesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetOsImageProfilesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetOsImageProfilesResponse_FieldSubPathValue) CompareWith(source *BatchGetOsImageProfilesResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetOsImageProfilesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetOsImageProfilesResponse))
}

// BatchGetOsImageProfilesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetOsImageProfilesResponse according to their type
// Present only for array (repeated) types.
type BatchGetOsImageProfilesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetOsImageProfilesResponse_FieldPath
	ContainsValue(*BatchGetOsImageProfilesResponse) bool
}

// ParseBatchGetOsImageProfilesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetOsImageProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetOsImageProfilesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetOsImageProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOsImageProfilesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetOsImageProfilesResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetOsImageProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetOsImageProfilesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetOsImageProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetOsImageProfilesResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetOsImageProfilesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetOsImageProfilesResponse_FieldPathArrayItemValue = (*BatchGetOsImageProfilesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetOsImageProfilesResponse as interface{}
func (fpaiv *BatchGetOsImageProfilesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetOsImageProfilesResponse_FieldTerminalPathArrayItemValue) AsOsImageProfilesItemValue() (*os_image_profile.OsImageProfile, bool) {
	res, ok := fpaiv.value.(*os_image_profile.OsImageProfile)
	return res, ok
}
func (fpaiv *BatchGetOsImageProfilesResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*os_image_profile.Reference, bool) {
	res, ok := fpaiv.value.(*os_image_profile.Reference)
	return res, ok
}

func (fpaiv *BatchGetOsImageProfilesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetOsImageProfilesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetOsImageProfilesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetOsImageProfilesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetOsImageProfilesResponse'
func (fpaiv *BatchGetOsImageProfilesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetOsImageProfilesResponse) bool {
	slice := fpaiv.BatchGetOsImageProfilesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetOsImageProfilesResponse_FieldSubPathArrayItemValue struct {
	BatchGetOsImageProfilesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetOsImageProfilesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetOsImageProfilesResponse_FieldSubPathArrayItemValue) AsOsImageProfilesPathItemValue() (os_image_profile.OsImageProfile_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(os_image_profile.OsImageProfile_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetOsImageProfilesResponse'
func (fpaivs *BatchGetOsImageProfilesResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetOsImageProfilesResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsImageProfilesResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetOsImageProfilesResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetOsImageProfilesResponse fields according to their type
type BatchGetOsImageProfilesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetOsImageProfilesResponse_FieldPath
}

func ParseBatchGetOsImageProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetOsImageProfilesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetOsImageProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOsImageProfilesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetOsImageProfilesResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetOsImageProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetOsImageProfilesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetOsImageProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetOsImageProfilesResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetOsImageProfilesResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetOsImageProfilesResponse_FieldPathArrayOfValues = (*BatchGetOsImageProfilesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetOsImageProfilesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		for _, v := range fpaov.values.([][]*os_image_profile.OsImageProfile) {
			values = append(values, v)
		}
	case BatchGetOsImageProfilesResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*os_image_profile.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetOsImageProfilesResponse_FieldTerminalPathArrayOfValues) AsOsImageProfilesArrayOfValues() ([][]*os_image_profile.OsImageProfile, bool) {
	res, ok := fpaov.values.([][]*os_image_profile.OsImageProfile)
	return res, ok
}
func (fpaov *BatchGetOsImageProfilesResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*os_image_profile.Reference, bool) {
	res, ok := fpaov.values.([][]*os_image_profile.Reference)
	return res, ok
}

type BatchGetOsImageProfilesResponse_FieldSubPathArrayOfValues struct {
	BatchGetOsImageProfilesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetOsImageProfilesResponse_FieldPathArrayOfValues = (*BatchGetOsImageProfilesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetOsImageProfilesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetOsImageProfilesResponse_FieldSubPathArrayOfValues) AsOsImageProfilesPathArrayOfValues() (os_image_profile.OsImageProfile_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(os_image_profile.OsImageProfile_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListOsImageProfilesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListOsImageProfilesRequest_FieldPathSelector
	Get(source *ListOsImageProfilesRequest) []interface{}
	GetSingle(source *ListOsImageProfilesRequest) (interface{}, bool)
	ClearValue(item *ListOsImageProfilesRequest)

	// Those methods build corresponding ListOsImageProfilesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListOsImageProfilesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListOsImageProfilesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListOsImageProfilesRequest_FieldPathArrayItemValue
}

type ListOsImageProfilesRequest_FieldPathSelector int32

const (
	ListOsImageProfilesRequest_FieldPathSelectorParent            ListOsImageProfilesRequest_FieldPathSelector = 0
	ListOsImageProfilesRequest_FieldPathSelectorPageSize          ListOsImageProfilesRequest_FieldPathSelector = 1
	ListOsImageProfilesRequest_FieldPathSelectorPageToken         ListOsImageProfilesRequest_FieldPathSelector = 2
	ListOsImageProfilesRequest_FieldPathSelectorOrderBy           ListOsImageProfilesRequest_FieldPathSelector = 3
	ListOsImageProfilesRequest_FieldPathSelectorFilter            ListOsImageProfilesRequest_FieldPathSelector = 4
	ListOsImageProfilesRequest_FieldPathSelectorFieldMask         ListOsImageProfilesRequest_FieldPathSelector = 5
	ListOsImageProfilesRequest_FieldPathSelectorView              ListOsImageProfilesRequest_FieldPathSelector = 6
	ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo ListOsImageProfilesRequest_FieldPathSelector = 7
)

func (s ListOsImageProfilesRequest_FieldPathSelector) String() string {
	switch s {
	case ListOsImageProfilesRequest_FieldPathSelectorParent:
		return "parent"
	case ListOsImageProfilesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListOsImageProfilesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListOsImageProfilesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListOsImageProfilesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListOsImageProfilesRequest_FieldPathSelectorView:
		return "view"
	case ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesRequest: %d", s))
	}
}

func BuildListOsImageProfilesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListOsImageProfilesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListOsImageProfilesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListOsImageProfilesRequest_FieldTerminalPath{selector: ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListOsImageProfilesRequest", fp)
}

func ParseListOsImageProfilesRequest_FieldPath(rawField string) (ListOsImageProfilesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListOsImageProfilesRequest_FieldPath(fp)
}

func MustParseListOsImageProfilesRequest_FieldPath(rawField string) ListOsImageProfilesRequest_FieldPath {
	fp, err := ParseListOsImageProfilesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListOsImageProfilesRequest_FieldTerminalPath struct {
	selector ListOsImageProfilesRequest_FieldPathSelector
}

var _ ListOsImageProfilesRequest_FieldPath = (*ListOsImageProfilesRequest_FieldTerminalPath)(nil)

func (fp *ListOsImageProfilesRequest_FieldTerminalPath) Selector() ListOsImageProfilesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListOsImageProfilesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListOsImageProfilesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListOsImageProfilesRequest
func (fp *ListOsImageProfilesRequest_FieldTerminalPath) Get(source *ListOsImageProfilesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListOsImageProfilesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListOsImageProfilesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListOsImageProfilesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListOsImageProfilesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListOsImageProfilesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListOsImageProfilesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListOsImageProfilesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListOsImageProfilesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListOsImageProfilesRequest))
}

// GetSingle returns value pointed by specific field of from source ListOsImageProfilesRequest
func (fp *ListOsImageProfilesRequest_FieldTerminalPath) GetSingle(source *ListOsImageProfilesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListOsImageProfilesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListOsImageProfilesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListOsImageProfilesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListOsImageProfilesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListOsImageProfilesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListOsImageProfilesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListOsImageProfilesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesRequest: %d", fp.selector))
	}
}

func (fp *ListOsImageProfilesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListOsImageProfilesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListOsImageProfilesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListOsImageProfilesRequest_FieldPathSelectorParent:
		return (*os_image_profile.ParentName)(nil)
	case ListOsImageProfilesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListOsImageProfilesRequest_FieldPathSelectorPageToken:
		return (*os_image_profile.PagerCursor)(nil)
	case ListOsImageProfilesRequest_FieldPathSelectorOrderBy:
		return (*os_image_profile.OrderBy)(nil)
	case ListOsImageProfilesRequest_FieldPathSelectorFilter:
		return (*os_image_profile.Filter)(nil)
	case ListOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return (*os_image_profile.OsImageProfile_FieldMask)(nil)
	case ListOsImageProfilesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesRequest: %d", fp.selector))
	}
}

func (fp *ListOsImageProfilesRequest_FieldTerminalPath) ClearValue(item *ListOsImageProfilesRequest) {
	if item != nil {
		switch fp.selector {
		case ListOsImageProfilesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListOsImageProfilesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListOsImageProfilesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListOsImageProfilesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListOsImageProfilesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListOsImageProfilesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListOsImageProfilesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListOsImageProfilesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListOsImageProfilesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListOsImageProfilesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListOsImageProfilesRequest_FieldPathSelectorParent ||
		fp.selector == ListOsImageProfilesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListOsImageProfilesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListOsImageProfilesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListOsImageProfilesRequest_FieldPathSelectorFilter ||
		fp.selector == ListOsImageProfilesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListOsImageProfilesRequest_FieldPathSelectorView ||
		fp.selector == ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListOsImageProfilesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListOsImageProfilesRequest_FieldTerminalPath) WithIValue(value interface{}) ListOsImageProfilesRequest_FieldPathValue {
	switch fp.selector {
	case ListOsImageProfilesRequest_FieldPathSelectorParent:
		return &ListOsImageProfilesRequest_FieldTerminalPathValue{ListOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.ParentName)}
	case ListOsImageProfilesRequest_FieldPathSelectorPageSize:
		return &ListOsImageProfilesRequest_FieldTerminalPathValue{ListOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListOsImageProfilesRequest_FieldPathSelectorPageToken:
		return &ListOsImageProfilesRequest_FieldTerminalPathValue{ListOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.PagerCursor)}
	case ListOsImageProfilesRequest_FieldPathSelectorOrderBy:
		return &ListOsImageProfilesRequest_FieldTerminalPathValue{ListOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.OrderBy)}
	case ListOsImageProfilesRequest_FieldPathSelectorFilter:
		return &ListOsImageProfilesRequest_FieldTerminalPathValue{ListOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.Filter)}
	case ListOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return &ListOsImageProfilesRequest_FieldTerminalPathValue{ListOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.OsImageProfile_FieldMask)}
	case ListOsImageProfilesRequest_FieldPathSelectorView:
		return &ListOsImageProfilesRequest_FieldTerminalPathValue{ListOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo:
		return &ListOsImageProfilesRequest_FieldTerminalPathValue{ListOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesRequest: %d", fp.selector))
	}
}

func (fp *ListOsImageProfilesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListOsImageProfilesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListOsImageProfilesRequest_FieldPathArrayOfValues {
	fpaov := &ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues{ListOsImageProfilesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListOsImageProfilesRequest_FieldPathSelectorParent:
		return &ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues{ListOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.ParentName)}
	case ListOsImageProfilesRequest_FieldPathSelectorPageSize:
		return &ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues{ListOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListOsImageProfilesRequest_FieldPathSelectorPageToken:
		return &ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues{ListOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.PagerCursor)}
	case ListOsImageProfilesRequest_FieldPathSelectorOrderBy:
		return &ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues{ListOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.OrderBy)}
	case ListOsImageProfilesRequest_FieldPathSelectorFilter:
		return &ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues{ListOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.Filter)}
	case ListOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return &ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues{ListOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.OsImageProfile_FieldMask)}
	case ListOsImageProfilesRequest_FieldPathSelectorView:
		return &ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues{ListOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo:
		return &ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues{ListOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListOsImageProfilesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListOsImageProfilesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListOsImageProfilesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesRequest: %d", fp.selector))
	}
}

func (fp *ListOsImageProfilesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListOsImageProfilesRequest_FieldPathValue allows storing values for ListOsImageProfilesRequest fields according to their type
type ListOsImageProfilesRequest_FieldPathValue interface {
	ListOsImageProfilesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListOsImageProfilesRequest)
	CompareWith(*ListOsImageProfilesRequest) (cmp int, comparable bool)
}

func ParseListOsImageProfilesRequest_FieldPathValue(pathStr, valueStr string) (ListOsImageProfilesRequest_FieldPathValue, error) {
	fp, err := ParseListOsImageProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOsImageProfilesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListOsImageProfilesRequest_FieldPathValue), nil
}

func MustParseListOsImageProfilesRequest_FieldPathValue(pathStr, valueStr string) ListOsImageProfilesRequest_FieldPathValue {
	fpv, err := ParseListOsImageProfilesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListOsImageProfilesRequest_FieldTerminalPathValue struct {
	ListOsImageProfilesRequest_FieldTerminalPath
	value interface{}
}

var _ ListOsImageProfilesRequest_FieldPathValue = (*ListOsImageProfilesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListOsImageProfilesRequest' as interface{}
func (fpv *ListOsImageProfilesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListOsImageProfilesRequest_FieldTerminalPathValue) AsParentValue() (*os_image_profile.ParentName, bool) {
	res, ok := fpv.value.(*os_image_profile.ParentName)
	return res, ok
}
func (fpv *ListOsImageProfilesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListOsImageProfilesRequest_FieldTerminalPathValue) AsPageTokenValue() (*os_image_profile.PagerCursor, bool) {
	res, ok := fpv.value.(*os_image_profile.PagerCursor)
	return res, ok
}
func (fpv *ListOsImageProfilesRequest_FieldTerminalPathValue) AsOrderByValue() (*os_image_profile.OrderBy, bool) {
	res, ok := fpv.value.(*os_image_profile.OrderBy)
	return res, ok
}
func (fpv *ListOsImageProfilesRequest_FieldTerminalPathValue) AsFilterValue() (*os_image_profile.Filter, bool) {
	res, ok := fpv.value.(*os_image_profile.Filter)
	return res, ok
}
func (fpv *ListOsImageProfilesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*os_image_profile.OsImageProfile_FieldMask, bool) {
	res, ok := fpv.value.(*os_image_profile.OsImageProfile_FieldMask)
	return res, ok
}
func (fpv *ListOsImageProfilesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListOsImageProfilesRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListOsImageProfilesRequest
func (fpv *ListOsImageProfilesRequest_FieldTerminalPathValue) SetTo(target **ListOsImageProfilesRequest) {
	if *target == nil {
		*target = new(ListOsImageProfilesRequest)
	}
	switch fpv.selector {
	case ListOsImageProfilesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*os_image_profile.ParentName)
	case ListOsImageProfilesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListOsImageProfilesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*os_image_profile.PagerCursor)
	case ListOsImageProfilesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*os_image_profile.OrderBy)
	case ListOsImageProfilesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*os_image_profile.Filter)
	case ListOsImageProfilesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*os_image_profile.OsImageProfile_FieldMask)
	case ListOsImageProfilesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesRequest: %d", fpv.selector))
	}
}

func (fpv *ListOsImageProfilesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListOsImageProfilesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListOsImageProfilesRequest_FieldTerminalPathValue' with the value under path in 'ListOsImageProfilesRequest'.
func (fpv *ListOsImageProfilesRequest_FieldTerminalPathValue) CompareWith(source *ListOsImageProfilesRequest) (int, bool) {
	switch fpv.selector {
	case ListOsImageProfilesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*os_image_profile.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListOsImageProfilesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListOsImageProfilesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListOsImageProfilesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListOsImageProfilesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListOsImageProfilesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesRequest: %d", fpv.selector))
	}
}

func (fpv *ListOsImageProfilesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListOsImageProfilesRequest))
}

// ListOsImageProfilesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListOsImageProfilesRequest according to their type
// Present only for array (repeated) types.
type ListOsImageProfilesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListOsImageProfilesRequest_FieldPath
	ContainsValue(*ListOsImageProfilesRequest) bool
}

// ParseListOsImageProfilesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListOsImageProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListOsImageProfilesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListOsImageProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOsImageProfilesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListOsImageProfilesRequest_FieldPathArrayItemValue), nil
}

func MustParseListOsImageProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListOsImageProfilesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListOsImageProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListOsImageProfilesRequest_FieldTerminalPathArrayItemValue struct {
	ListOsImageProfilesRequest_FieldTerminalPath
	value interface{}
}

var _ ListOsImageProfilesRequest_FieldPathArrayItemValue = (*ListOsImageProfilesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListOsImageProfilesRequest as interface{}
func (fpaiv *ListOsImageProfilesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListOsImageProfilesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListOsImageProfilesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListOsImageProfilesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListOsImageProfilesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListOsImageProfilesRequest'
func (fpaiv *ListOsImageProfilesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListOsImageProfilesRequest) bool {
	slice := fpaiv.ListOsImageProfilesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListOsImageProfilesRequest_FieldPathArrayOfValues allows storing slice of values for ListOsImageProfilesRequest fields according to their type
type ListOsImageProfilesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListOsImageProfilesRequest_FieldPath
}

func ParseListOsImageProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListOsImageProfilesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListOsImageProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOsImageProfilesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListOsImageProfilesRequest_FieldPathArrayOfValues), nil
}

func MustParseListOsImageProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListOsImageProfilesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListOsImageProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues struct {
	ListOsImageProfilesRequest_FieldTerminalPath
	values interface{}
}

var _ ListOsImageProfilesRequest_FieldPathArrayOfValues = (*ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListOsImageProfilesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*os_image_profile.ParentName) {
			values = append(values, v)
		}
	case ListOsImageProfilesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListOsImageProfilesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*os_image_profile.PagerCursor) {
			values = append(values, v)
		}
	case ListOsImageProfilesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*os_image_profile.OrderBy) {
			values = append(values, v)
		}
	case ListOsImageProfilesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*os_image_profile.Filter) {
			values = append(values, v)
		}
	case ListOsImageProfilesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*os_image_profile.OsImageProfile_FieldMask) {
			values = append(values, v)
		}
	case ListOsImageProfilesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListOsImageProfilesRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*os_image_profile.ParentName, bool) {
	res, ok := fpaov.values.([]*os_image_profile.ParentName)
	return res, ok
}
func (fpaov *ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*os_image_profile.PagerCursor, bool) {
	res, ok := fpaov.values.([]*os_image_profile.PagerCursor)
	return res, ok
}
func (fpaov *ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*os_image_profile.OrderBy, bool) {
	res, ok := fpaov.values.([]*os_image_profile.OrderBy)
	return res, ok
}
func (fpaov *ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*os_image_profile.Filter, bool) {
	res, ok := fpaov.values.([]*os_image_profile.Filter)
	return res, ok
}
func (fpaov *ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*os_image_profile.OsImageProfile_FieldMask, bool) {
	res, ok := fpaov.values.([]*os_image_profile.OsImageProfile_FieldMask)
	return res, ok
}
func (fpaov *ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListOsImageProfilesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListOsImageProfilesResponse_FieldPathSelector
	Get(source *ListOsImageProfilesResponse) []interface{}
	GetSingle(source *ListOsImageProfilesResponse) (interface{}, bool)
	ClearValue(item *ListOsImageProfilesResponse)

	// Those methods build corresponding ListOsImageProfilesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListOsImageProfilesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListOsImageProfilesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListOsImageProfilesResponse_FieldPathArrayItemValue
}

type ListOsImageProfilesResponse_FieldPathSelector int32

const (
	ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles   ListOsImageProfilesResponse_FieldPathSelector = 0
	ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken     ListOsImageProfilesResponse_FieldPathSelector = 1
	ListOsImageProfilesResponse_FieldPathSelectorNextPageToken     ListOsImageProfilesResponse_FieldPathSelector = 2
	ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset     ListOsImageProfilesResponse_FieldPathSelector = 3
	ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount ListOsImageProfilesResponse_FieldPathSelector = 4
)

func (s ListOsImageProfilesResponse_FieldPathSelector) String() string {
	switch s {
	case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return "os_image_profiles"
	case ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListOsImageProfilesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", s))
	}
}

func BuildListOsImageProfilesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListOsImageProfilesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListOsImageProfilesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "os_image_profiles", "osImageProfiles", "os-image-profiles":
			return &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListOsImageProfilesResponse_FieldTerminalPath{selector: ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "os_image_profiles", "osImageProfiles", "os-image-profiles":
			if subpath, err := os_image_profile.BuildOsImageProfile_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListOsImageProfilesResponse_FieldSubPath{selector: ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListOsImageProfilesResponse", fp)
}

func ParseListOsImageProfilesResponse_FieldPath(rawField string) (ListOsImageProfilesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListOsImageProfilesResponse_FieldPath(fp)
}

func MustParseListOsImageProfilesResponse_FieldPath(rawField string) ListOsImageProfilesResponse_FieldPath {
	fp, err := ParseListOsImageProfilesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListOsImageProfilesResponse_FieldTerminalPath struct {
	selector ListOsImageProfilesResponse_FieldPathSelector
}

var _ ListOsImageProfilesResponse_FieldPath = (*ListOsImageProfilesResponse_FieldTerminalPath)(nil)

func (fp *ListOsImageProfilesResponse_FieldTerminalPath) Selector() ListOsImageProfilesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListOsImageProfilesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListOsImageProfilesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListOsImageProfilesResponse
func (fp *ListOsImageProfilesResponse_FieldTerminalPath) Get(source *ListOsImageProfilesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
			for _, value := range source.GetOsImageProfiles() {
				values = append(values, value)
			}
		case ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListOsImageProfilesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListOsImageProfilesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListOsImageProfilesResponse))
}

// GetSingle returns value pointed by specific field of from source ListOsImageProfilesResponse
func (fp *ListOsImageProfilesResponse_FieldTerminalPath) GetSingle(source *ListOsImageProfilesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		res := source.GetOsImageProfiles()
		return res, res != nil
	case ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListOsImageProfilesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fp.selector))
	}
}

func (fp *ListOsImageProfilesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListOsImageProfilesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListOsImageProfilesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return ([]*os_image_profile.OsImageProfile)(nil)
	case ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken:
		return (*os_image_profile.PagerCursor)(nil)
	case ListOsImageProfilesResponse_FieldPathSelectorNextPageToken:
		return (*os_image_profile.PagerCursor)(nil)
	case ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fp.selector))
	}
}

func (fp *ListOsImageProfilesResponse_FieldTerminalPath) ClearValue(item *ListOsImageProfilesResponse) {
	if item != nil {
		switch fp.selector {
		case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
			item.OsImageProfiles = nil
		case ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListOsImageProfilesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListOsImageProfilesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListOsImageProfilesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListOsImageProfilesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListOsImageProfilesResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListOsImageProfilesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListOsImageProfilesResponse_FieldTerminalPath) WithIValue(value interface{}) ListOsImageProfilesResponse_FieldPathValue {
	switch fp.selector {
	case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return &ListOsImageProfilesResponse_FieldTerminalPathValue{ListOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.([]*os_image_profile.OsImageProfile)}
	case ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken:
		return &ListOsImageProfilesResponse_FieldTerminalPathValue{ListOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.(*os_image_profile.PagerCursor)}
	case ListOsImageProfilesResponse_FieldPathSelectorNextPageToken:
		return &ListOsImageProfilesResponse_FieldTerminalPathValue{ListOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.(*os_image_profile.PagerCursor)}
	case ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset:
		return &ListOsImageProfilesResponse_FieldTerminalPathValue{ListOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount:
		return &ListOsImageProfilesResponse_FieldTerminalPathValue{ListOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fp.selector))
	}
}

func (fp *ListOsImageProfilesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListOsImageProfilesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListOsImageProfilesResponse_FieldPathArrayOfValues {
	fpaov := &ListOsImageProfilesResponse_FieldTerminalPathArrayOfValues{ListOsImageProfilesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return &ListOsImageProfilesResponse_FieldTerminalPathArrayOfValues{ListOsImageProfilesResponse_FieldTerminalPath: *fp, values: values.([][]*os_image_profile.OsImageProfile)}
	case ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken:
		return &ListOsImageProfilesResponse_FieldTerminalPathArrayOfValues{ListOsImageProfilesResponse_FieldTerminalPath: *fp, values: values.([]*os_image_profile.PagerCursor)}
	case ListOsImageProfilesResponse_FieldPathSelectorNextPageToken:
		return &ListOsImageProfilesResponse_FieldTerminalPathArrayOfValues{ListOsImageProfilesResponse_FieldTerminalPath: *fp, values: values.([]*os_image_profile.PagerCursor)}
	case ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset:
		return &ListOsImageProfilesResponse_FieldTerminalPathArrayOfValues{ListOsImageProfilesResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount:
		return &ListOsImageProfilesResponse_FieldTerminalPathArrayOfValues{ListOsImageProfilesResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListOsImageProfilesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListOsImageProfilesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListOsImageProfilesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return &ListOsImageProfilesResponse_FieldTerminalPathArrayItemValue{ListOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.(*os_image_profile.OsImageProfile)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fp.selector))
	}
}

func (fp *ListOsImageProfilesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListOsImageProfilesResponse_FieldSubPath struct {
	selector ListOsImageProfilesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListOsImageProfilesResponse_FieldPath = (*ListOsImageProfilesResponse_FieldSubPath)(nil)

func (fps *ListOsImageProfilesResponse_FieldSubPath) Selector() ListOsImageProfilesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListOsImageProfilesResponse_FieldSubPath) AsOsImageProfilesSubPath() (os_image_profile.OsImageProfile_FieldPath, bool) {
	res, ok := fps.subPath.(os_image_profile.OsImageProfile_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListOsImageProfilesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListOsImageProfilesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListOsImageProfilesResponse
func (fps *ListOsImageProfilesResponse_FieldSubPath) Get(source *ListOsImageProfilesResponse) (values []interface{}) {
	switch fps.selector {
	case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		for _, item := range source.GetOsImageProfiles() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListOsImageProfilesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListOsImageProfilesResponse))
}

// GetSingle returns value of selected field from source ListOsImageProfilesResponse
func (fps *ListOsImageProfilesResponse_FieldSubPath) GetSingle(source *ListOsImageProfilesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		if len(source.GetOsImageProfiles()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOsImageProfiles()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fps.selector))
	}
}

func (fps *ListOsImageProfilesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListOsImageProfilesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListOsImageProfilesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListOsImageProfilesResponse_FieldSubPath) ClearValue(item *ListOsImageProfilesResponse) {
	if item != nil {
		switch fps.selector {
		case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
			for _, subItem := range item.OsImageProfiles {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListOsImageProfilesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListOsImageProfilesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListOsImageProfilesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListOsImageProfilesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListOsImageProfilesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListOsImageProfilesResponse_FieldSubPath) WithIValue(value interface{}) ListOsImageProfilesResponse_FieldPathValue {
	return &ListOsImageProfilesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListOsImageProfilesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListOsImageProfilesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListOsImageProfilesResponse_FieldPathArrayOfValues {
	return &ListOsImageProfilesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListOsImageProfilesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListOsImageProfilesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListOsImageProfilesResponse_FieldPathArrayItemValue {
	return &ListOsImageProfilesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListOsImageProfilesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListOsImageProfilesResponse_FieldPathValue allows storing values for ListOsImageProfilesResponse fields according to their type
type ListOsImageProfilesResponse_FieldPathValue interface {
	ListOsImageProfilesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListOsImageProfilesResponse)
	CompareWith(*ListOsImageProfilesResponse) (cmp int, comparable bool)
}

func ParseListOsImageProfilesResponse_FieldPathValue(pathStr, valueStr string) (ListOsImageProfilesResponse_FieldPathValue, error) {
	fp, err := ParseListOsImageProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOsImageProfilesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListOsImageProfilesResponse_FieldPathValue), nil
}

func MustParseListOsImageProfilesResponse_FieldPathValue(pathStr, valueStr string) ListOsImageProfilesResponse_FieldPathValue {
	fpv, err := ParseListOsImageProfilesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListOsImageProfilesResponse_FieldTerminalPathValue struct {
	ListOsImageProfilesResponse_FieldTerminalPath
	value interface{}
}

var _ ListOsImageProfilesResponse_FieldPathValue = (*ListOsImageProfilesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListOsImageProfilesResponse' as interface{}
func (fpv *ListOsImageProfilesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListOsImageProfilesResponse_FieldTerminalPathValue) AsOsImageProfilesValue() ([]*os_image_profile.OsImageProfile, bool) {
	res, ok := fpv.value.([]*os_image_profile.OsImageProfile)
	return res, ok
}
func (fpv *ListOsImageProfilesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*os_image_profile.PagerCursor, bool) {
	res, ok := fpv.value.(*os_image_profile.PagerCursor)
	return res, ok
}
func (fpv *ListOsImageProfilesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*os_image_profile.PagerCursor, bool) {
	res, ok := fpv.value.(*os_image_profile.PagerCursor)
	return res, ok
}
func (fpv *ListOsImageProfilesResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListOsImageProfilesResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListOsImageProfilesResponse
func (fpv *ListOsImageProfilesResponse_FieldTerminalPathValue) SetTo(target **ListOsImageProfilesResponse) {
	if *target == nil {
		*target = new(ListOsImageProfilesResponse)
	}
	switch fpv.selector {
	case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		(*target).OsImageProfiles = fpv.value.([]*os_image_profile.OsImageProfile)
	case ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*os_image_profile.PagerCursor)
	case ListOsImageProfilesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*os_image_profile.PagerCursor)
	case ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fpv.selector))
	}
}

func (fpv *ListOsImageProfilesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListOsImageProfilesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListOsImageProfilesResponse_FieldTerminalPathValue' with the value under path in 'ListOsImageProfilesResponse'.
func (fpv *ListOsImageProfilesResponse_FieldTerminalPathValue) CompareWith(source *ListOsImageProfilesResponse) (int, bool) {
	switch fpv.selector {
	case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return 0, false
	case ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListOsImageProfilesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fpv.selector))
	}
}

func (fpv *ListOsImageProfilesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListOsImageProfilesResponse))
}

type ListOsImageProfilesResponse_FieldSubPathValue struct {
	ListOsImageProfilesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListOsImageProfilesResponse_FieldPathValue = (*ListOsImageProfilesResponse_FieldSubPathValue)(nil)

func (fpvs *ListOsImageProfilesResponse_FieldSubPathValue) AsOsImageProfilesPathValue() (os_image_profile.OsImageProfile_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(os_image_profile.OsImageProfile_FieldPathValue)
	return res, ok
}

func (fpvs *ListOsImageProfilesResponse_FieldSubPathValue) SetTo(target **ListOsImageProfilesResponse) {
	if *target == nil {
		*target = new(ListOsImageProfilesResponse)
	}
	switch fpvs.Selector() {
	case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListOsImageProfilesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListOsImageProfilesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListOsImageProfilesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListOsImageProfilesResponse_FieldSubPathValue) CompareWith(source *ListOsImageProfilesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListOsImageProfilesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListOsImageProfilesResponse))
}

// ListOsImageProfilesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListOsImageProfilesResponse according to their type
// Present only for array (repeated) types.
type ListOsImageProfilesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListOsImageProfilesResponse_FieldPath
	ContainsValue(*ListOsImageProfilesResponse) bool
}

// ParseListOsImageProfilesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListOsImageProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListOsImageProfilesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListOsImageProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOsImageProfilesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListOsImageProfilesResponse_FieldPathArrayItemValue), nil
}

func MustParseListOsImageProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListOsImageProfilesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListOsImageProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListOsImageProfilesResponse_FieldTerminalPathArrayItemValue struct {
	ListOsImageProfilesResponse_FieldTerminalPath
	value interface{}
}

var _ ListOsImageProfilesResponse_FieldPathArrayItemValue = (*ListOsImageProfilesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListOsImageProfilesResponse as interface{}
func (fpaiv *ListOsImageProfilesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListOsImageProfilesResponse_FieldTerminalPathArrayItemValue) AsOsImageProfilesItemValue() (*os_image_profile.OsImageProfile, bool) {
	res, ok := fpaiv.value.(*os_image_profile.OsImageProfile)
	return res, ok
}

func (fpaiv *ListOsImageProfilesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListOsImageProfilesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListOsImageProfilesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListOsImageProfilesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListOsImageProfilesResponse'
func (fpaiv *ListOsImageProfilesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListOsImageProfilesResponse) bool {
	slice := fpaiv.ListOsImageProfilesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListOsImageProfilesResponse_FieldSubPathArrayItemValue struct {
	ListOsImageProfilesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListOsImageProfilesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListOsImageProfilesResponse_FieldSubPathArrayItemValue) AsOsImageProfilesPathItemValue() (os_image_profile.OsImageProfile_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(os_image_profile.OsImageProfile_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListOsImageProfilesResponse'
func (fpaivs *ListOsImageProfilesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListOsImageProfilesResponse) bool {
	switch fpaivs.Selector() {
	case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsImageProfilesResponse: %d", fpaivs.Selector()))
	}
}

// ListOsImageProfilesResponse_FieldPathArrayOfValues allows storing slice of values for ListOsImageProfilesResponse fields according to their type
type ListOsImageProfilesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListOsImageProfilesResponse_FieldPath
}

func ParseListOsImageProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListOsImageProfilesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListOsImageProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOsImageProfilesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListOsImageProfilesResponse_FieldPathArrayOfValues), nil
}

func MustParseListOsImageProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListOsImageProfilesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListOsImageProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListOsImageProfilesResponse_FieldTerminalPathArrayOfValues struct {
	ListOsImageProfilesResponse_FieldTerminalPath
	values interface{}
}

var _ ListOsImageProfilesResponse_FieldPathArrayOfValues = (*ListOsImageProfilesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListOsImageProfilesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListOsImageProfilesResponse_FieldPathSelectorOsImageProfiles:
		for _, v := range fpaov.values.([][]*os_image_profile.OsImageProfile) {
			values = append(values, v)
		}
	case ListOsImageProfilesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*os_image_profile.PagerCursor) {
			values = append(values, v)
		}
	case ListOsImageProfilesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*os_image_profile.PagerCursor) {
			values = append(values, v)
		}
	case ListOsImageProfilesResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListOsImageProfilesResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListOsImageProfilesResponse_FieldTerminalPathArrayOfValues) AsOsImageProfilesArrayOfValues() ([][]*os_image_profile.OsImageProfile, bool) {
	res, ok := fpaov.values.([][]*os_image_profile.OsImageProfile)
	return res, ok
}
func (fpaov *ListOsImageProfilesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*os_image_profile.PagerCursor, bool) {
	res, ok := fpaov.values.([]*os_image_profile.PagerCursor)
	return res, ok
}
func (fpaov *ListOsImageProfilesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*os_image_profile.PagerCursor, bool) {
	res, ok := fpaov.values.([]*os_image_profile.PagerCursor)
	return res, ok
}
func (fpaov *ListOsImageProfilesResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListOsImageProfilesResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListOsImageProfilesResponse_FieldSubPathArrayOfValues struct {
	ListOsImageProfilesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListOsImageProfilesResponse_FieldPathArrayOfValues = (*ListOsImageProfilesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListOsImageProfilesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListOsImageProfilesResponse_FieldSubPathArrayOfValues) AsOsImageProfilesPathArrayOfValues() (os_image_profile.OsImageProfile_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(os_image_profile.OsImageProfile_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOsImageProfileRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOsImageProfileRequest_FieldPathSelector
	Get(source *WatchOsImageProfileRequest) []interface{}
	GetSingle(source *WatchOsImageProfileRequest) (interface{}, bool)
	ClearValue(item *WatchOsImageProfileRequest)

	// Those methods build corresponding WatchOsImageProfileRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOsImageProfileRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOsImageProfileRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOsImageProfileRequest_FieldPathArrayItemValue
}

type WatchOsImageProfileRequest_FieldPathSelector int32

const (
	WatchOsImageProfileRequest_FieldPathSelectorName      WatchOsImageProfileRequest_FieldPathSelector = 0
	WatchOsImageProfileRequest_FieldPathSelectorFieldMask WatchOsImageProfileRequest_FieldPathSelector = 1
	WatchOsImageProfileRequest_FieldPathSelectorView      WatchOsImageProfileRequest_FieldPathSelector = 2
)

func (s WatchOsImageProfileRequest_FieldPathSelector) String() string {
	switch s {
	case WatchOsImageProfileRequest_FieldPathSelectorName:
		return "name"
	case WatchOsImageProfileRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchOsImageProfileRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileRequest: %d", s))
	}
}

func BuildWatchOsImageProfileRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchOsImageProfileRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOsImageProfileRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchOsImageProfileRequest_FieldTerminalPath{selector: WatchOsImageProfileRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchOsImageProfileRequest_FieldTerminalPath{selector: WatchOsImageProfileRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchOsImageProfileRequest_FieldTerminalPath{selector: WatchOsImageProfileRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOsImageProfileRequest", fp)
}

func ParseWatchOsImageProfileRequest_FieldPath(rawField string) (WatchOsImageProfileRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOsImageProfileRequest_FieldPath(fp)
}

func MustParseWatchOsImageProfileRequest_FieldPath(rawField string) WatchOsImageProfileRequest_FieldPath {
	fp, err := ParseWatchOsImageProfileRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOsImageProfileRequest_FieldTerminalPath struct {
	selector WatchOsImageProfileRequest_FieldPathSelector
}

var _ WatchOsImageProfileRequest_FieldPath = (*WatchOsImageProfileRequest_FieldTerminalPath)(nil)

func (fp *WatchOsImageProfileRequest_FieldTerminalPath) Selector() WatchOsImageProfileRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOsImageProfileRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOsImageProfileRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOsImageProfileRequest
func (fp *WatchOsImageProfileRequest_FieldTerminalPath) Get(source *WatchOsImageProfileRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOsImageProfileRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchOsImageProfileRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchOsImageProfileRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOsImageProfileRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOsImageProfileRequest))
}

// GetSingle returns value pointed by specific field of from source WatchOsImageProfileRequest
func (fp *WatchOsImageProfileRequest_FieldTerminalPath) GetSingle(source *WatchOsImageProfileRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchOsImageProfileRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchOsImageProfileRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchOsImageProfileRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfileRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOsImageProfileRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchOsImageProfileRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOsImageProfileRequest_FieldPathSelectorName:
		return (*os_image_profile.Reference)(nil)
	case WatchOsImageProfileRequest_FieldPathSelectorFieldMask:
		return (*os_image_profile.OsImageProfile_FieldMask)(nil)
	case WatchOsImageProfileRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfileRequest_FieldTerminalPath) ClearValue(item *WatchOsImageProfileRequest) {
	if item != nil {
		switch fp.selector {
		case WatchOsImageProfileRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchOsImageProfileRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchOsImageProfileRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchOsImageProfileRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOsImageProfileRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOsImageProfileRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOsImageProfileRequest_FieldPathSelectorName ||
		fp.selector == WatchOsImageProfileRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchOsImageProfileRequest_FieldPathSelectorView
}

func (fp *WatchOsImageProfileRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOsImageProfileRequest_FieldTerminalPath) WithIValue(value interface{}) WatchOsImageProfileRequest_FieldPathValue {
	switch fp.selector {
	case WatchOsImageProfileRequest_FieldPathSelectorName:
		return &WatchOsImageProfileRequest_FieldTerminalPathValue{WatchOsImageProfileRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.Reference)}
	case WatchOsImageProfileRequest_FieldPathSelectorFieldMask:
		return &WatchOsImageProfileRequest_FieldTerminalPathValue{WatchOsImageProfileRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.OsImageProfile_FieldMask)}
	case WatchOsImageProfileRequest_FieldPathSelectorView:
		return &WatchOsImageProfileRequest_FieldTerminalPathValue{WatchOsImageProfileRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfileRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOsImageProfileRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOsImageProfileRequest_FieldPathArrayOfValues {
	fpaov := &WatchOsImageProfileRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfileRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOsImageProfileRequest_FieldPathSelectorName:
		return &WatchOsImageProfileRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfileRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.Reference)}
	case WatchOsImageProfileRequest_FieldPathSelectorFieldMask:
		return &WatchOsImageProfileRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfileRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.OsImageProfile_FieldMask)}
	case WatchOsImageProfileRequest_FieldPathSelectorView:
		return &WatchOsImageProfileRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfileRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOsImageProfileRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOsImageProfileRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOsImageProfileRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfileRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOsImageProfileRequest_FieldPathValue allows storing values for WatchOsImageProfileRequest fields according to their type
type WatchOsImageProfileRequest_FieldPathValue interface {
	WatchOsImageProfileRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOsImageProfileRequest)
	CompareWith(*WatchOsImageProfileRequest) (cmp int, comparable bool)
}

func ParseWatchOsImageProfileRequest_FieldPathValue(pathStr, valueStr string) (WatchOsImageProfileRequest_FieldPathValue, error) {
	fp, err := ParseWatchOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsImageProfileRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOsImageProfileRequest_FieldPathValue), nil
}

func MustParseWatchOsImageProfileRequest_FieldPathValue(pathStr, valueStr string) WatchOsImageProfileRequest_FieldPathValue {
	fpv, err := ParseWatchOsImageProfileRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOsImageProfileRequest_FieldTerminalPathValue struct {
	WatchOsImageProfileRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOsImageProfileRequest_FieldPathValue = (*WatchOsImageProfileRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOsImageProfileRequest' as interface{}
func (fpv *WatchOsImageProfileRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOsImageProfileRequest_FieldTerminalPathValue) AsNameValue() (*os_image_profile.Reference, bool) {
	res, ok := fpv.value.(*os_image_profile.Reference)
	return res, ok
}
func (fpv *WatchOsImageProfileRequest_FieldTerminalPathValue) AsFieldMaskValue() (*os_image_profile.OsImageProfile_FieldMask, bool) {
	res, ok := fpv.value.(*os_image_profile.OsImageProfile_FieldMask)
	return res, ok
}
func (fpv *WatchOsImageProfileRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchOsImageProfileRequest
func (fpv *WatchOsImageProfileRequest_FieldTerminalPathValue) SetTo(target **WatchOsImageProfileRequest) {
	if *target == nil {
		*target = new(WatchOsImageProfileRequest)
	}
	switch fpv.selector {
	case WatchOsImageProfileRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*os_image_profile.Reference)
	case WatchOsImageProfileRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*os_image_profile.OsImageProfile_FieldMask)
	case WatchOsImageProfileRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOsImageProfileRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOsImageProfileRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOsImageProfileRequest_FieldTerminalPathValue' with the value under path in 'WatchOsImageProfileRequest'.
func (fpv *WatchOsImageProfileRequest_FieldTerminalPathValue) CompareWith(source *WatchOsImageProfileRequest) (int, bool) {
	switch fpv.selector {
	case WatchOsImageProfileRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*os_image_profile.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsImageProfileRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchOsImageProfileRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOsImageProfileRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOsImageProfileRequest))
}

// WatchOsImageProfileRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOsImageProfileRequest according to their type
// Present only for array (repeated) types.
type WatchOsImageProfileRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOsImageProfileRequest_FieldPath
	ContainsValue(*WatchOsImageProfileRequest) bool
}

// ParseWatchOsImageProfileRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOsImageProfileRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsImageProfileRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOsImageProfileRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchOsImageProfileRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOsImageProfileRequest_FieldTerminalPathArrayItemValue struct {
	WatchOsImageProfileRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOsImageProfileRequest_FieldPathArrayItemValue = (*WatchOsImageProfileRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOsImageProfileRequest as interface{}
func (fpaiv *WatchOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOsImageProfileRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOsImageProfileRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOsImageProfileRequest'
func (fpaiv *WatchOsImageProfileRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOsImageProfileRequest) bool {
	slice := fpaiv.WatchOsImageProfileRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOsImageProfileRequest_FieldPathArrayOfValues allows storing slice of values for WatchOsImageProfileRequest fields according to their type
type WatchOsImageProfileRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOsImageProfileRequest_FieldPath
}

func ParseWatchOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOsImageProfileRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsImageProfileRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOsImageProfileRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOsImageProfileRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOsImageProfileRequest_FieldTerminalPathArrayOfValues struct {
	WatchOsImageProfileRequest_FieldTerminalPath
	values interface{}
}

var _ WatchOsImageProfileRequest_FieldPathArrayOfValues = (*WatchOsImageProfileRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOsImageProfileRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOsImageProfileRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*os_image_profile.Reference) {
			values = append(values, v)
		}
	case WatchOsImageProfileRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*os_image_profile.OsImageProfile_FieldMask) {
			values = append(values, v)
		}
	case WatchOsImageProfileRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOsImageProfileRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*os_image_profile.Reference, bool) {
	res, ok := fpaov.values.([]*os_image_profile.Reference)
	return res, ok
}
func (fpaov *WatchOsImageProfileRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*os_image_profile.OsImageProfile_FieldMask, bool) {
	res, ok := fpaov.values.([]*os_image_profile.OsImageProfile_FieldMask)
	return res, ok
}
func (fpaov *WatchOsImageProfileRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOsImageProfileResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOsImageProfileResponse_FieldPathSelector
	Get(source *WatchOsImageProfileResponse) []interface{}
	GetSingle(source *WatchOsImageProfileResponse) (interface{}, bool)
	ClearValue(item *WatchOsImageProfileResponse)

	// Those methods build corresponding WatchOsImageProfileResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOsImageProfileResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOsImageProfileResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOsImageProfileResponse_FieldPathArrayItemValue
}

type WatchOsImageProfileResponse_FieldPathSelector int32

const (
	WatchOsImageProfileResponse_FieldPathSelectorChange WatchOsImageProfileResponse_FieldPathSelector = 0
)

func (s WatchOsImageProfileResponse_FieldPathSelector) String() string {
	switch s {
	case WatchOsImageProfileResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileResponse: %d", s))
	}
}

func BuildWatchOsImageProfileResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchOsImageProfileResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOsImageProfileResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchOsImageProfileResponse_FieldTerminalPath{selector: WatchOsImageProfileResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOsImageProfileResponse", fp)
}

func ParseWatchOsImageProfileResponse_FieldPath(rawField string) (WatchOsImageProfileResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOsImageProfileResponse_FieldPath(fp)
}

func MustParseWatchOsImageProfileResponse_FieldPath(rawField string) WatchOsImageProfileResponse_FieldPath {
	fp, err := ParseWatchOsImageProfileResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOsImageProfileResponse_FieldTerminalPath struct {
	selector WatchOsImageProfileResponse_FieldPathSelector
}

var _ WatchOsImageProfileResponse_FieldPath = (*WatchOsImageProfileResponse_FieldTerminalPath)(nil)

func (fp *WatchOsImageProfileResponse_FieldTerminalPath) Selector() WatchOsImageProfileResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOsImageProfileResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOsImageProfileResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOsImageProfileResponse
func (fp *WatchOsImageProfileResponse_FieldTerminalPath) Get(source *WatchOsImageProfileResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOsImageProfileResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOsImageProfileResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOsImageProfileResponse))
}

// GetSingle returns value pointed by specific field of from source WatchOsImageProfileResponse
func (fp *WatchOsImageProfileResponse_FieldTerminalPath) GetSingle(source *WatchOsImageProfileResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchOsImageProfileResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileResponse: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfileResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOsImageProfileResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchOsImageProfileResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOsImageProfileResponse_FieldPathSelectorChange:
		return (*os_image_profile.OsImageProfileChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileResponse: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfileResponse_FieldTerminalPath) ClearValue(item *WatchOsImageProfileResponse) {
	if item != nil {
		switch fp.selector {
		case WatchOsImageProfileResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchOsImageProfileResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOsImageProfileResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOsImageProfileResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOsImageProfileResponse_FieldPathSelectorChange
}

func (fp *WatchOsImageProfileResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOsImageProfileResponse_FieldTerminalPath) WithIValue(value interface{}) WatchOsImageProfileResponse_FieldPathValue {
	switch fp.selector {
	case WatchOsImageProfileResponse_FieldPathSelectorChange:
		return &WatchOsImageProfileResponse_FieldTerminalPathValue{WatchOsImageProfileResponse_FieldTerminalPath: *fp, value: value.(*os_image_profile.OsImageProfileChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileResponse: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfileResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOsImageProfileResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOsImageProfileResponse_FieldPathArrayOfValues {
	fpaov := &WatchOsImageProfileResponse_FieldTerminalPathArrayOfValues{WatchOsImageProfileResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOsImageProfileResponse_FieldPathSelectorChange:
		return &WatchOsImageProfileResponse_FieldTerminalPathArrayOfValues{WatchOsImageProfileResponse_FieldTerminalPath: *fp, values: values.([]*os_image_profile.OsImageProfileChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOsImageProfileResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOsImageProfileResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOsImageProfileResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileResponse: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfileResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOsImageProfileResponse_FieldPathValue allows storing values for WatchOsImageProfileResponse fields according to their type
type WatchOsImageProfileResponse_FieldPathValue interface {
	WatchOsImageProfileResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOsImageProfileResponse)
	CompareWith(*WatchOsImageProfileResponse) (cmp int, comparable bool)
}

func ParseWatchOsImageProfileResponse_FieldPathValue(pathStr, valueStr string) (WatchOsImageProfileResponse_FieldPathValue, error) {
	fp, err := ParseWatchOsImageProfileResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsImageProfileResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOsImageProfileResponse_FieldPathValue), nil
}

func MustParseWatchOsImageProfileResponse_FieldPathValue(pathStr, valueStr string) WatchOsImageProfileResponse_FieldPathValue {
	fpv, err := ParseWatchOsImageProfileResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOsImageProfileResponse_FieldTerminalPathValue struct {
	WatchOsImageProfileResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOsImageProfileResponse_FieldPathValue = (*WatchOsImageProfileResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOsImageProfileResponse' as interface{}
func (fpv *WatchOsImageProfileResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOsImageProfileResponse_FieldTerminalPathValue) AsChangeValue() (*os_image_profile.OsImageProfileChange, bool) {
	res, ok := fpv.value.(*os_image_profile.OsImageProfileChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchOsImageProfileResponse
func (fpv *WatchOsImageProfileResponse_FieldTerminalPathValue) SetTo(target **WatchOsImageProfileResponse) {
	if *target == nil {
		*target = new(WatchOsImageProfileResponse)
	}
	switch fpv.selector {
	case WatchOsImageProfileResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*os_image_profile.OsImageProfileChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOsImageProfileResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOsImageProfileResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOsImageProfileResponse_FieldTerminalPathValue' with the value under path in 'WatchOsImageProfileResponse'.
func (fpv *WatchOsImageProfileResponse_FieldTerminalPathValue) CompareWith(source *WatchOsImageProfileResponse) (int, bool) {
	switch fpv.selector {
	case WatchOsImageProfileResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfileResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOsImageProfileResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOsImageProfileResponse))
}

// WatchOsImageProfileResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOsImageProfileResponse according to their type
// Present only for array (repeated) types.
type WatchOsImageProfileResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOsImageProfileResponse_FieldPath
	ContainsValue(*WatchOsImageProfileResponse) bool
}

// ParseWatchOsImageProfileResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOsImageProfileResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOsImageProfileResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOsImageProfileResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsImageProfileResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOsImageProfileResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchOsImageProfileResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchOsImageProfileResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOsImageProfileResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOsImageProfileResponse_FieldTerminalPathArrayItemValue struct {
	WatchOsImageProfileResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOsImageProfileResponse_FieldPathArrayItemValue = (*WatchOsImageProfileResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOsImageProfileResponse as interface{}
func (fpaiv *WatchOsImageProfileResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOsImageProfileResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOsImageProfileResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOsImageProfileResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOsImageProfileResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOsImageProfileResponse'
func (fpaiv *WatchOsImageProfileResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOsImageProfileResponse) bool {
	slice := fpaiv.WatchOsImageProfileResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOsImageProfileResponse_FieldPathArrayOfValues allows storing slice of values for WatchOsImageProfileResponse fields according to their type
type WatchOsImageProfileResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOsImageProfileResponse_FieldPath
}

func ParseWatchOsImageProfileResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOsImageProfileResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOsImageProfileResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsImageProfileResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOsImageProfileResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchOsImageProfileResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOsImageProfileResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOsImageProfileResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOsImageProfileResponse_FieldTerminalPathArrayOfValues struct {
	WatchOsImageProfileResponse_FieldTerminalPath
	values interface{}
}

var _ WatchOsImageProfileResponse_FieldPathArrayOfValues = (*WatchOsImageProfileResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOsImageProfileResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOsImageProfileResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*os_image_profile.OsImageProfileChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOsImageProfileResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*os_image_profile.OsImageProfileChange, bool) {
	res, ok := fpaov.values.([]*os_image_profile.OsImageProfileChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOsImageProfilesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOsImageProfilesRequest_FieldPathSelector
	Get(source *WatchOsImageProfilesRequest) []interface{}
	GetSingle(source *WatchOsImageProfilesRequest) (interface{}, bool)
	ClearValue(item *WatchOsImageProfilesRequest)

	// Those methods build corresponding WatchOsImageProfilesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOsImageProfilesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOsImageProfilesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOsImageProfilesRequest_FieldPathArrayItemValue
}

type WatchOsImageProfilesRequest_FieldPathSelector int32

const (
	WatchOsImageProfilesRequest_FieldPathSelectorType         WatchOsImageProfilesRequest_FieldPathSelector = 0
	WatchOsImageProfilesRequest_FieldPathSelectorParent       WatchOsImageProfilesRequest_FieldPathSelector = 1
	WatchOsImageProfilesRequest_FieldPathSelectorPageSize     WatchOsImageProfilesRequest_FieldPathSelector = 2
	WatchOsImageProfilesRequest_FieldPathSelectorPageToken    WatchOsImageProfilesRequest_FieldPathSelector = 3
	WatchOsImageProfilesRequest_FieldPathSelectorOrderBy      WatchOsImageProfilesRequest_FieldPathSelector = 4
	WatchOsImageProfilesRequest_FieldPathSelectorResumeToken  WatchOsImageProfilesRequest_FieldPathSelector = 5
	WatchOsImageProfilesRequest_FieldPathSelectorStartingTime WatchOsImageProfilesRequest_FieldPathSelector = 6
	WatchOsImageProfilesRequest_FieldPathSelectorFilter       WatchOsImageProfilesRequest_FieldPathSelector = 7
	WatchOsImageProfilesRequest_FieldPathSelectorFieldMask    WatchOsImageProfilesRequest_FieldPathSelector = 8
	WatchOsImageProfilesRequest_FieldPathSelectorView         WatchOsImageProfilesRequest_FieldPathSelector = 9
	WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize WatchOsImageProfilesRequest_FieldPathSelector = 10
)

func (s WatchOsImageProfilesRequest_FieldPathSelector) String() string {
	switch s {
	case WatchOsImageProfilesRequest_FieldPathSelectorType:
		return "type"
	case WatchOsImageProfilesRequest_FieldPathSelectorParent:
		return "parent"
	case WatchOsImageProfilesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchOsImageProfilesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchOsImageProfilesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchOsImageProfilesRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchOsImageProfilesRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchOsImageProfilesRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchOsImageProfilesRequest_FieldPathSelectorView:
		return "view"
	case WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesRequest: %d", s))
	}
}

func BuildWatchOsImageProfilesRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchOsImageProfilesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOsImageProfilesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchOsImageProfilesRequest_FieldTerminalPath{selector: WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOsImageProfilesRequest", fp)
}

func ParseWatchOsImageProfilesRequest_FieldPath(rawField string) (WatchOsImageProfilesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOsImageProfilesRequest_FieldPath(fp)
}

func MustParseWatchOsImageProfilesRequest_FieldPath(rawField string) WatchOsImageProfilesRequest_FieldPath {
	fp, err := ParseWatchOsImageProfilesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOsImageProfilesRequest_FieldTerminalPath struct {
	selector WatchOsImageProfilesRequest_FieldPathSelector
}

var _ WatchOsImageProfilesRequest_FieldPath = (*WatchOsImageProfilesRequest_FieldTerminalPath)(nil)

func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) Selector() WatchOsImageProfilesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOsImageProfilesRequest
func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) Get(source *WatchOsImageProfilesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOsImageProfilesRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchOsImageProfilesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchOsImageProfilesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchOsImageProfilesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchOsImageProfilesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchOsImageProfilesRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchOsImageProfilesRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchOsImageProfilesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchOsImageProfilesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchOsImageProfilesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOsImageProfilesRequest))
}

// GetSingle returns value pointed by specific field of from source WatchOsImageProfilesRequest
func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) GetSingle(source *WatchOsImageProfilesRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchOsImageProfilesRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchOsImageProfilesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchOsImageProfilesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchOsImageProfilesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchOsImageProfilesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchOsImageProfilesRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchOsImageProfilesRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchOsImageProfilesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchOsImageProfilesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchOsImageProfilesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesRequest: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOsImageProfilesRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOsImageProfilesRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchOsImageProfilesRequest_FieldPathSelectorParent:
		return (*os_image_profile.ParentReference)(nil)
	case WatchOsImageProfilesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchOsImageProfilesRequest_FieldPathSelectorPageToken:
		return (*os_image_profile.PagerCursor)(nil)
	case WatchOsImageProfilesRequest_FieldPathSelectorOrderBy:
		return (*os_image_profile.OrderBy)(nil)
	case WatchOsImageProfilesRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchOsImageProfilesRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchOsImageProfilesRequest_FieldPathSelectorFilter:
		return (*os_image_profile.Filter)(nil)
	case WatchOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return (*os_image_profile.OsImageProfile_FieldMask)(nil)
	case WatchOsImageProfilesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesRequest: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) ClearValue(item *WatchOsImageProfilesRequest) {
	if item != nil {
		switch fp.selector {
		case WatchOsImageProfilesRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchOsImageProfilesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchOsImageProfilesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchOsImageProfilesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchOsImageProfilesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchOsImageProfilesRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchOsImageProfilesRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchOsImageProfilesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchOsImageProfilesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchOsImageProfilesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOsImageProfilesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOsImageProfilesRequest_FieldPathSelectorType ||
		fp.selector == WatchOsImageProfilesRequest_FieldPathSelectorParent ||
		fp.selector == WatchOsImageProfilesRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchOsImageProfilesRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchOsImageProfilesRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchOsImageProfilesRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchOsImageProfilesRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchOsImageProfilesRequest_FieldPathSelectorFilter ||
		fp.selector == WatchOsImageProfilesRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchOsImageProfilesRequest_FieldPathSelectorView ||
		fp.selector == WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) WithIValue(value interface{}) WatchOsImageProfilesRequest_FieldPathValue {
	switch fp.selector {
	case WatchOsImageProfilesRequest_FieldPathSelectorType:
		return &WatchOsImageProfilesRequest_FieldTerminalPathValue{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchOsImageProfilesRequest_FieldPathSelectorParent:
		return &WatchOsImageProfilesRequest_FieldTerminalPathValue{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.ParentReference)}
	case WatchOsImageProfilesRequest_FieldPathSelectorPageSize:
		return &WatchOsImageProfilesRequest_FieldTerminalPathValue{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchOsImageProfilesRequest_FieldPathSelectorPageToken:
		return &WatchOsImageProfilesRequest_FieldTerminalPathValue{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.PagerCursor)}
	case WatchOsImageProfilesRequest_FieldPathSelectorOrderBy:
		return &WatchOsImageProfilesRequest_FieldTerminalPathValue{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.OrderBy)}
	case WatchOsImageProfilesRequest_FieldPathSelectorResumeToken:
		return &WatchOsImageProfilesRequest_FieldTerminalPathValue{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchOsImageProfilesRequest_FieldPathSelectorStartingTime:
		return &WatchOsImageProfilesRequest_FieldTerminalPathValue{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchOsImageProfilesRequest_FieldPathSelectorFilter:
		return &WatchOsImageProfilesRequest_FieldTerminalPathValue{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.Filter)}
	case WatchOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return &WatchOsImageProfilesRequest_FieldTerminalPathValue{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.OsImageProfile_FieldMask)}
	case WatchOsImageProfilesRequest_FieldPathSelectorView:
		return &WatchOsImageProfilesRequest_FieldTerminalPathValue{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchOsImageProfilesRequest_FieldTerminalPathValue{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesRequest: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOsImageProfilesRequest_FieldPathArrayOfValues {
	fpaov := &WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfilesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOsImageProfilesRequest_FieldPathSelectorType:
		return &WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchOsImageProfilesRequest_FieldPathSelectorParent:
		return &WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.ParentReference)}
	case WatchOsImageProfilesRequest_FieldPathSelectorPageSize:
		return &WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchOsImageProfilesRequest_FieldPathSelectorPageToken:
		return &WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.PagerCursor)}
	case WatchOsImageProfilesRequest_FieldPathSelectorOrderBy:
		return &WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.OrderBy)}
	case WatchOsImageProfilesRequest_FieldPathSelectorResumeToken:
		return &WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchOsImageProfilesRequest_FieldPathSelectorStartingTime:
		return &WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchOsImageProfilesRequest_FieldPathSelectorFilter:
		return &WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.Filter)}
	case WatchOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return &WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.OsImageProfile_FieldMask)}
	case WatchOsImageProfilesRequest_FieldPathSelectorView:
		return &WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues{WatchOsImageProfilesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOsImageProfilesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesRequest: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfilesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOsImageProfilesRequest_FieldPathValue allows storing values for WatchOsImageProfilesRequest fields according to their type
type WatchOsImageProfilesRequest_FieldPathValue interface {
	WatchOsImageProfilesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOsImageProfilesRequest)
	CompareWith(*WatchOsImageProfilesRequest) (cmp int, comparable bool)
}

func ParseWatchOsImageProfilesRequest_FieldPathValue(pathStr, valueStr string) (WatchOsImageProfilesRequest_FieldPathValue, error) {
	fp, err := ParseWatchOsImageProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsImageProfilesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOsImageProfilesRequest_FieldPathValue), nil
}

func MustParseWatchOsImageProfilesRequest_FieldPathValue(pathStr, valueStr string) WatchOsImageProfilesRequest_FieldPathValue {
	fpv, err := ParseWatchOsImageProfilesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOsImageProfilesRequest_FieldTerminalPathValue struct {
	WatchOsImageProfilesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOsImageProfilesRequest_FieldPathValue = (*WatchOsImageProfilesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOsImageProfilesRequest' as interface{}
func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) AsParentValue() (*os_image_profile.ParentReference, bool) {
	res, ok := fpv.value.(*os_image_profile.ParentReference)
	return res, ok
}
func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) AsPageTokenValue() (*os_image_profile.PagerCursor, bool) {
	res, ok := fpv.value.(*os_image_profile.PagerCursor)
	return res, ok
}
func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) AsOrderByValue() (*os_image_profile.OrderBy, bool) {
	res, ok := fpv.value.(*os_image_profile.OrderBy)
	return res, ok
}
func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) AsFilterValue() (*os_image_profile.Filter, bool) {
	res, ok := fpv.value.(*os_image_profile.Filter)
	return res, ok
}
func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*os_image_profile.OsImageProfile_FieldMask, bool) {
	res, ok := fpv.value.(*os_image_profile.OsImageProfile_FieldMask)
	return res, ok
}
func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchOsImageProfilesRequest
func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) SetTo(target **WatchOsImageProfilesRequest) {
	if *target == nil {
		*target = new(WatchOsImageProfilesRequest)
	}
	switch fpv.selector {
	case WatchOsImageProfilesRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchOsImageProfilesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*os_image_profile.ParentReference)
	case WatchOsImageProfilesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchOsImageProfilesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*os_image_profile.PagerCursor)
	case WatchOsImageProfilesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*os_image_profile.OrderBy)
	case WatchOsImageProfilesRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchOsImageProfilesRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchOsImageProfilesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*os_image_profile.Filter)
	case WatchOsImageProfilesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*os_image_profile.OsImageProfile_FieldMask)
	case WatchOsImageProfilesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOsImageProfilesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOsImageProfilesRequest_FieldTerminalPathValue' with the value under path in 'WatchOsImageProfilesRequest'.
func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) CompareWith(source *WatchOsImageProfilesRequest) (int, bool) {
	switch fpv.selector {
	case WatchOsImageProfilesRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*os_image_profile.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchOsImageProfilesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchOsImageProfilesRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchOsImageProfilesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchOsImageProfilesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOsImageProfilesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOsImageProfilesRequest))
}

// WatchOsImageProfilesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOsImageProfilesRequest according to their type
// Present only for array (repeated) types.
type WatchOsImageProfilesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOsImageProfilesRequest_FieldPath
	ContainsValue(*WatchOsImageProfilesRequest) bool
}

// ParseWatchOsImageProfilesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOsImageProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOsImageProfilesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOsImageProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsImageProfilesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOsImageProfilesRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchOsImageProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchOsImageProfilesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOsImageProfilesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOsImageProfilesRequest_FieldTerminalPathArrayItemValue struct {
	WatchOsImageProfilesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOsImageProfilesRequest_FieldPathArrayItemValue = (*WatchOsImageProfilesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOsImageProfilesRequest as interface{}
func (fpaiv *WatchOsImageProfilesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOsImageProfilesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOsImageProfilesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOsImageProfilesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOsImageProfilesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOsImageProfilesRequest'
func (fpaiv *WatchOsImageProfilesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOsImageProfilesRequest) bool {
	slice := fpaiv.WatchOsImageProfilesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOsImageProfilesRequest_FieldPathArrayOfValues allows storing slice of values for WatchOsImageProfilesRequest fields according to their type
type WatchOsImageProfilesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOsImageProfilesRequest_FieldPath
}

func ParseWatchOsImageProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOsImageProfilesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOsImageProfilesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsImageProfilesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOsImageProfilesRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchOsImageProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOsImageProfilesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOsImageProfilesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues struct {
	WatchOsImageProfilesRequest_FieldTerminalPath
	values interface{}
}

var _ WatchOsImageProfilesRequest_FieldPathArrayOfValues = (*WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOsImageProfilesRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*os_image_profile.ParentReference) {
			values = append(values, v)
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*os_image_profile.PagerCursor) {
			values = append(values, v)
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*os_image_profile.OrderBy) {
			values = append(values, v)
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*os_image_profile.Filter) {
			values = append(values, v)
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*os_image_profile.OsImageProfile_FieldMask) {
			values = append(values, v)
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchOsImageProfilesRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*os_image_profile.ParentReference, bool) {
	res, ok := fpaov.values.([]*os_image_profile.ParentReference)
	return res, ok
}
func (fpaov *WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*os_image_profile.PagerCursor, bool) {
	res, ok := fpaov.values.([]*os_image_profile.PagerCursor)
	return res, ok
}
func (fpaov *WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*os_image_profile.OrderBy, bool) {
	res, ok := fpaov.values.([]*os_image_profile.OrderBy)
	return res, ok
}
func (fpaov *WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*os_image_profile.Filter, bool) {
	res, ok := fpaov.values.([]*os_image_profile.Filter)
	return res, ok
}
func (fpaov *WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*os_image_profile.OsImageProfile_FieldMask, bool) {
	res, ok := fpaov.values.([]*os_image_profile.OsImageProfile_FieldMask)
	return res, ok
}
func (fpaov *WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchOsImageProfilesRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOsImageProfilesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOsImageProfilesResponse_FieldPathSelector
	Get(source *WatchOsImageProfilesResponse) []interface{}
	GetSingle(source *WatchOsImageProfilesResponse) (interface{}, bool)
	ClearValue(item *WatchOsImageProfilesResponse)

	// Those methods build corresponding WatchOsImageProfilesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOsImageProfilesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOsImageProfilesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOsImageProfilesResponse_FieldPathArrayItemValue
}

type WatchOsImageProfilesResponse_FieldPathSelector int32

const (
	WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges WatchOsImageProfilesResponse_FieldPathSelector = 0
	WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent             WatchOsImageProfilesResponse_FieldPathSelector = 1
	WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange       WatchOsImageProfilesResponse_FieldPathSelector = 2
	WatchOsImageProfilesResponse_FieldPathSelectorResumeToken           WatchOsImageProfilesResponse_FieldPathSelector = 3
	WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize          WatchOsImageProfilesResponse_FieldPathSelector = 4
	WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset           WatchOsImageProfilesResponse_FieldPathSelector = 5
	WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset           WatchOsImageProfilesResponse_FieldPathSelector = 6
)

func (s WatchOsImageProfilesResponse_FieldPathSelector) String() string {
	switch s {
	case WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges:
		return "os_image_profile_changes"
	case WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchOsImageProfilesResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", s))
	}
}

func BuildWatchOsImageProfilesResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchOsImageProfilesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOsImageProfilesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "os_image_profile_changes", "osImageProfileChanges", "os-image-profile-changes":
			return &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchOsImageProfilesResponse_FieldTerminalPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchOsImageProfilesResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchOsImageProfilesResponse_FieldSubPath{selector: WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOsImageProfilesResponse", fp)
}

func ParseWatchOsImageProfilesResponse_FieldPath(rawField string) (WatchOsImageProfilesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOsImageProfilesResponse_FieldPath(fp)
}

func MustParseWatchOsImageProfilesResponse_FieldPath(rawField string) WatchOsImageProfilesResponse_FieldPath {
	fp, err := ParseWatchOsImageProfilesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOsImageProfilesResponse_FieldTerminalPath struct {
	selector WatchOsImageProfilesResponse_FieldPathSelector
}

var _ WatchOsImageProfilesResponse_FieldPath = (*WatchOsImageProfilesResponse_FieldTerminalPath)(nil)

func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) Selector() WatchOsImageProfilesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOsImageProfilesResponse
func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) Get(source *WatchOsImageProfilesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges:
			for _, value := range source.GetOsImageProfileChanges() {
				values = append(values, value)
			}
		case WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchOsImageProfilesResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOsImageProfilesResponse))
}

// GetSingle returns value pointed by specific field of from source WatchOsImageProfilesResponse
func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) GetSingle(source *WatchOsImageProfilesResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges:
		res := source.GetOsImageProfileChanges()
		return res, res != nil
	case WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchOsImageProfilesResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOsImageProfilesResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges:
		return ([]*os_image_profile.OsImageProfileChange)(nil)
	case WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
		return (*WatchOsImageProfilesResponse_PageTokenChange)(nil)
	case WatchOsImageProfilesResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) ClearValue(item *WatchOsImageProfilesResponse) {
	if item != nil {
		switch fp.selector {
		case WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges:
			item.OsImageProfileChanges = nil
		case WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchOsImageProfilesResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOsImageProfilesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges ||
		fp.selector == WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchOsImageProfilesResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) WithIValue(value interface{}) WatchOsImageProfilesResponse_FieldPathValue {
	switch fp.selector {
	case WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges:
		return &WatchOsImageProfilesResponse_FieldTerminalPathValue{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.([]*os_image_profile.OsImageProfileChange)}
	case WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent:
		return &WatchOsImageProfilesResponse_FieldTerminalPathValue{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
		return &WatchOsImageProfilesResponse_FieldTerminalPathValue{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.(*WatchOsImageProfilesResponse_PageTokenChange)}
	case WatchOsImageProfilesResponse_FieldPathSelectorResumeToken:
		return &WatchOsImageProfilesResponse_FieldTerminalPathValue{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize:
		return &WatchOsImageProfilesResponse_FieldTerminalPathValue{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset:
		return &WatchOsImageProfilesResponse_FieldTerminalPathValue{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset:
		return &WatchOsImageProfilesResponse_FieldTerminalPathValue{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOsImageProfilesResponse_FieldPathArrayOfValues {
	fpaov := &WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues{WatchOsImageProfilesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges:
		return &WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, values: values.([][]*os_image_profile.OsImageProfileChange)}
	case WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent:
		return &WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
		return &WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, values: values.([]*WatchOsImageProfilesResponse_PageTokenChange)}
	case WatchOsImageProfilesResponse_FieldPathSelectorResumeToken:
		return &WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize:
		return &WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset:
		return &WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset:
		return &WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOsImageProfilesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges:
		return &WatchOsImageProfilesResponse_FieldTerminalPathArrayItemValue{WatchOsImageProfilesResponse_FieldTerminalPath: *fp, value: value.(*os_image_profile.OsImageProfileChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfilesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchOsImageProfilesResponse_FieldSubPath struct {
	selector WatchOsImageProfilesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchOsImageProfilesResponse_FieldPath = (*WatchOsImageProfilesResponse_FieldSubPath)(nil)

func (fps *WatchOsImageProfilesResponse_FieldSubPath) Selector() WatchOsImageProfilesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchOsImageProfilesResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchOsImageProfilesResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchOsImageProfilesResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchOsImageProfilesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchOsImageProfilesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchOsImageProfilesResponse
func (fps *WatchOsImageProfilesResponse_FieldSubPath) Get(source *WatchOsImageProfilesResponse) (values []interface{}) {
	switch fps.selector {
	case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchOsImageProfilesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchOsImageProfilesResponse))
}

// GetSingle returns value of selected field from source WatchOsImageProfilesResponse
func (fps *WatchOsImageProfilesResponse_FieldSubPath) GetSingle(source *WatchOsImageProfilesResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fps.selector))
	}
}

func (fps *WatchOsImageProfilesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchOsImageProfilesResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchOsImageProfilesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchOsImageProfilesResponse_FieldSubPath) ClearValue(item *WatchOsImageProfilesResponse) {
	if item != nil {
		switch fps.selector {
		case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchOsImageProfilesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchOsImageProfilesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchOsImageProfilesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchOsImageProfilesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchOsImageProfilesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchOsImageProfilesResponse_FieldSubPath) WithIValue(value interface{}) WatchOsImageProfilesResponse_FieldPathValue {
	return &WatchOsImageProfilesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchOsImageProfilesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchOsImageProfilesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchOsImageProfilesResponse_FieldPathArrayOfValues {
	return &WatchOsImageProfilesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchOsImageProfilesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchOsImageProfilesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchOsImageProfilesResponse_FieldPathArrayItemValue {
	return &WatchOsImageProfilesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchOsImageProfilesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchOsImageProfilesResponse_FieldPathValue allows storing values for WatchOsImageProfilesResponse fields according to their type
type WatchOsImageProfilesResponse_FieldPathValue interface {
	WatchOsImageProfilesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOsImageProfilesResponse)
	CompareWith(*WatchOsImageProfilesResponse) (cmp int, comparable bool)
}

func ParseWatchOsImageProfilesResponse_FieldPathValue(pathStr, valueStr string) (WatchOsImageProfilesResponse_FieldPathValue, error) {
	fp, err := ParseWatchOsImageProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsImageProfilesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOsImageProfilesResponse_FieldPathValue), nil
}

func MustParseWatchOsImageProfilesResponse_FieldPathValue(pathStr, valueStr string) WatchOsImageProfilesResponse_FieldPathValue {
	fpv, err := ParseWatchOsImageProfilesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOsImageProfilesResponse_FieldTerminalPathValue struct {
	WatchOsImageProfilesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOsImageProfilesResponse_FieldPathValue = (*WatchOsImageProfilesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOsImageProfilesResponse' as interface{}
func (fpv *WatchOsImageProfilesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOsImageProfilesResponse_FieldTerminalPathValue) AsOsImageProfileChangesValue() ([]*os_image_profile.OsImageProfileChange, bool) {
	res, ok := fpv.value.([]*os_image_profile.OsImageProfileChange)
	return res, ok
}
func (fpv *WatchOsImageProfilesResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchOsImageProfilesResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchOsImageProfilesResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchOsImageProfilesResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchOsImageProfilesResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchOsImageProfilesResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchOsImageProfilesResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchOsImageProfilesResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchOsImageProfilesResponse
func (fpv *WatchOsImageProfilesResponse_FieldTerminalPathValue) SetTo(target **WatchOsImageProfilesResponse) {
	if *target == nil {
		*target = new(WatchOsImageProfilesResponse)
	}
	switch fpv.selector {
	case WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges:
		(*target).OsImageProfileChanges = fpv.value.([]*os_image_profile.OsImageProfileChange)
	case WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchOsImageProfilesResponse_PageTokenChange)
	case WatchOsImageProfilesResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOsImageProfilesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOsImageProfilesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOsImageProfilesResponse_FieldTerminalPathValue' with the value under path in 'WatchOsImageProfilesResponse'.
func (fpv *WatchOsImageProfilesResponse_FieldTerminalPathValue) CompareWith(source *WatchOsImageProfilesResponse) (int, bool) {
	switch fpv.selector {
	case WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges:
		return 0, false
	case WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchOsImageProfilesResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOsImageProfilesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOsImageProfilesResponse))
}

type WatchOsImageProfilesResponse_FieldSubPathValue struct {
	WatchOsImageProfilesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchOsImageProfilesResponse_FieldPathValue = (*WatchOsImageProfilesResponse_FieldSubPathValue)(nil)

func (fpvs *WatchOsImageProfilesResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchOsImageProfilesResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchOsImageProfilesResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchOsImageProfilesResponse_FieldSubPathValue) SetTo(target **WatchOsImageProfilesResponse) {
	if *target == nil {
		*target = new(WatchOsImageProfilesResponse)
	}
	switch fpvs.Selector() {
	case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchOsImageProfilesResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchOsImageProfilesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOsImageProfilesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchOsImageProfilesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchOsImageProfilesResponse_FieldSubPathValue) CompareWith(source *WatchOsImageProfilesResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchOsImageProfilesResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchOsImageProfilesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchOsImageProfilesResponse))
}

// WatchOsImageProfilesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOsImageProfilesResponse according to their type
// Present only for array (repeated) types.
type WatchOsImageProfilesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOsImageProfilesResponse_FieldPath
	ContainsValue(*WatchOsImageProfilesResponse) bool
}

// ParseWatchOsImageProfilesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOsImageProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOsImageProfilesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOsImageProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsImageProfilesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOsImageProfilesResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchOsImageProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchOsImageProfilesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOsImageProfilesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOsImageProfilesResponse_FieldTerminalPathArrayItemValue struct {
	WatchOsImageProfilesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOsImageProfilesResponse_FieldPathArrayItemValue = (*WatchOsImageProfilesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOsImageProfilesResponse as interface{}
func (fpaiv *WatchOsImageProfilesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchOsImageProfilesResponse_FieldTerminalPathArrayItemValue) AsOsImageProfileChangesItemValue() (*os_image_profile.OsImageProfileChange, bool) {
	res, ok := fpaiv.value.(*os_image_profile.OsImageProfileChange)
	return res, ok
}

func (fpaiv *WatchOsImageProfilesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOsImageProfilesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOsImageProfilesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOsImageProfilesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOsImageProfilesResponse'
func (fpaiv *WatchOsImageProfilesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOsImageProfilesResponse) bool {
	slice := fpaiv.WatchOsImageProfilesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchOsImageProfilesResponse_FieldSubPathArrayItemValue struct {
	WatchOsImageProfilesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchOsImageProfilesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchOsImageProfilesResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOsImageProfilesResponse'
func (fpaivs *WatchOsImageProfilesResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchOsImageProfilesResponse) bool {
	switch fpaivs.Selector() {
	case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse: %d", fpaivs.Selector()))
	}
}

// WatchOsImageProfilesResponse_FieldPathArrayOfValues allows storing slice of values for WatchOsImageProfilesResponse fields according to their type
type WatchOsImageProfilesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOsImageProfilesResponse_FieldPath
}

func ParseWatchOsImageProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOsImageProfilesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOsImageProfilesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsImageProfilesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOsImageProfilesResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchOsImageProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOsImageProfilesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOsImageProfilesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues struct {
	WatchOsImageProfilesResponse_FieldTerminalPath
	values interface{}
}

var _ WatchOsImageProfilesResponse_FieldPathArrayOfValues = (*WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOsImageProfilesResponse_FieldPathSelectorOsImageProfileChanges:
		for _, v := range fpaov.values.([][]*os_image_profile.OsImageProfileChange) {
			values = append(values, v)
		}
	case WatchOsImageProfilesResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchOsImageProfilesResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchOsImageProfilesResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchOsImageProfilesResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchOsImageProfilesResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchOsImageProfilesResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchOsImageProfilesResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues) AsOsImageProfileChangesArrayOfValues() ([][]*os_image_profile.OsImageProfileChange, bool) {
	res, ok := fpaov.values.([][]*os_image_profile.OsImageProfileChange)
	return res, ok
}
func (fpaov *WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchOsImageProfilesResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchOsImageProfilesResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchOsImageProfilesResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchOsImageProfilesResponse_FieldSubPathArrayOfValues struct {
	WatchOsImageProfilesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchOsImageProfilesResponse_FieldPathArrayOfValues = (*WatchOsImageProfilesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchOsImageProfilesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchOsImageProfilesResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOsImageProfilesResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOsImageProfilesResponsePageTokenChange_FieldPathSelector
	Get(source *WatchOsImageProfilesResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchOsImageProfilesResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchOsImageProfilesResponse_PageTokenChange)

	// Those methods build corresponding WatchOsImageProfilesResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOsImageProfilesResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchOsImageProfilesResponsePageTokenChange_FieldPathSelector int32

const (
	WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchOsImageProfilesResponsePageTokenChange_FieldPathSelector = 0
	WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken WatchOsImageProfilesResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchOsImageProfilesResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchOsImageProfilesResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchOsImageProfilesResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOsImageProfilesResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath{selector: WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath{selector: WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOsImageProfilesResponse_PageTokenChange", fp)
}

func ParseWatchOsImageProfilesResponsePageTokenChange_FieldPath(rawField string) (WatchOsImageProfilesResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOsImageProfilesResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchOsImageProfilesResponsePageTokenChange_FieldPath(rawField string) WatchOsImageProfilesResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchOsImageProfilesResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchOsImageProfilesResponsePageTokenChange_FieldPathSelector
}

var _ WatchOsImageProfilesResponsePageTokenChange_FieldPath = (*WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) Selector() WatchOsImageProfilesResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOsImageProfilesResponse_PageTokenChange
func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) Get(source *WatchOsImageProfilesResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOsImageProfilesResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchOsImageProfilesResponse_PageTokenChange
func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchOsImageProfilesResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOsImageProfilesResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*os_image_profile.PagerCursor)(nil)
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*os_image_profile.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchOsImageProfilesResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOsImageProfilesResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchOsImageProfilesResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathValue{WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*os_image_profile.PagerCursor)}
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathValue{WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*os_image_profile.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*os_image_profile.PagerCursor)}
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*os_image_profile.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOsImageProfilesResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchOsImageProfilesResponsePageTokenChange_FieldPathValue interface {
	WatchOsImageProfilesResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOsImageProfilesResponse_PageTokenChange)
	CompareWith(*WatchOsImageProfilesResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchOsImageProfilesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchOsImageProfilesResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchOsImageProfilesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOsImageProfilesResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchOsImageProfilesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchOsImageProfilesResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchOsImageProfilesResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchOsImageProfilesResponsePageTokenChange_FieldPathValue = (*WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*os_image_profile.PagerCursor, bool) {
	res, ok := fpv.value.(*os_image_profile.PagerCursor)
	return res, ok
}
func (fpv *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*os_image_profile.PagerCursor, bool) {
	res, ok := fpv.value.(*os_image_profile.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchOsImageProfilesResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchOsImageProfilesResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*os_image_profile.PagerCursor)
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*os_image_profile.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOsImageProfilesResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchOsImageProfilesResponse_PageTokenChange'.
func (fpv *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchOsImageProfilesResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsImageProfilesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOsImageProfilesResponse_PageTokenChange))
}

// WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOsImageProfilesResponsePageTokenChange_FieldPath
	ContainsValue(*WatchOsImageProfilesResponse_PageTokenChange) bool
}

// ParseWatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOsImageProfilesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayItemValue = (*WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOsImageProfilesResponse_PageTokenChange as interface{}
func (fpaiv *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOsImageProfilesResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOsImageProfilesResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOsImageProfilesResponse_PageTokenChange) bool {
	slice := fpaiv.WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOsImageProfilesResponsePageTokenChange_FieldPath
}

func ParseWatchOsImageProfilesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOsImageProfilesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchOsImageProfilesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOsImageProfilesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchOsImageProfilesResponsePageTokenChange_FieldPathArrayOfValues = (*WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*os_image_profile.PagerCursor) {
			values = append(values, v)
		}
	case WatchOsImageProfilesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*os_image_profile.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*os_image_profile.PagerCursor, bool) {
	res, ok := fpaov.values.([]*os_image_profile.PagerCursor)
	return res, ok
}
func (fpaov *WatchOsImageProfilesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*os_image_profile.PagerCursor, bool) {
	res, ok := fpaov.values.([]*os_image_profile.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateOsImageProfileRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateOsImageProfileRequest_FieldPathSelector
	Get(source *CreateOsImageProfileRequest) []interface{}
	GetSingle(source *CreateOsImageProfileRequest) (interface{}, bool)
	ClearValue(item *CreateOsImageProfileRequest)

	// Those methods build corresponding CreateOsImageProfileRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateOsImageProfileRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateOsImageProfileRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateOsImageProfileRequest_FieldPathArrayItemValue
}

type CreateOsImageProfileRequest_FieldPathSelector int32

const (
	CreateOsImageProfileRequest_FieldPathSelectorParent         CreateOsImageProfileRequest_FieldPathSelector = 0
	CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile CreateOsImageProfileRequest_FieldPathSelector = 1
)

func (s CreateOsImageProfileRequest_FieldPathSelector) String() string {
	switch s {
	case CreateOsImageProfileRequest_FieldPathSelectorParent:
		return "parent"
	case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		return "os_image_profile"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", s))
	}
}

func BuildCreateOsImageProfileRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateOsImageProfileRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateOsImageProfileRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateOsImageProfileRequest_FieldTerminalPath{selector: CreateOsImageProfileRequest_FieldPathSelectorParent}, nil
		case "os_image_profile", "osImageProfile", "os-image-profile":
			return &CreateOsImageProfileRequest_FieldTerminalPath{selector: CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile}, nil
		}
	} else {
		switch fp[0] {
		case "os_image_profile", "osImageProfile", "os-image-profile":
			if subpath, err := os_image_profile.BuildOsImageProfile_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateOsImageProfileRequest_FieldSubPath{selector: CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateOsImageProfileRequest", fp)
}

func ParseCreateOsImageProfileRequest_FieldPath(rawField string) (CreateOsImageProfileRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateOsImageProfileRequest_FieldPath(fp)
}

func MustParseCreateOsImageProfileRequest_FieldPath(rawField string) CreateOsImageProfileRequest_FieldPath {
	fp, err := ParseCreateOsImageProfileRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateOsImageProfileRequest_FieldTerminalPath struct {
	selector CreateOsImageProfileRequest_FieldPathSelector
}

var _ CreateOsImageProfileRequest_FieldPath = (*CreateOsImageProfileRequest_FieldTerminalPath)(nil)

func (fp *CreateOsImageProfileRequest_FieldTerminalPath) Selector() CreateOsImageProfileRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateOsImageProfileRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateOsImageProfileRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateOsImageProfileRequest
func (fp *CreateOsImageProfileRequest_FieldTerminalPath) Get(source *CreateOsImageProfileRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateOsImageProfileRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
			if source.OsImageProfile != nil {
				values = append(values, source.OsImageProfile)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateOsImageProfileRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateOsImageProfileRequest))
}

// GetSingle returns value pointed by specific field of from source CreateOsImageProfileRequest
func (fp *CreateOsImageProfileRequest_FieldTerminalPath) GetSingle(source *CreateOsImageProfileRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateOsImageProfileRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		res := source.GetOsImageProfile()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *CreateOsImageProfileRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateOsImageProfileRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateOsImageProfileRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateOsImageProfileRequest_FieldPathSelectorParent:
		return (*os_image_profile.ParentReference)(nil)
	case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		return (*os_image_profile.OsImageProfile)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *CreateOsImageProfileRequest_FieldTerminalPath) ClearValue(item *CreateOsImageProfileRequest) {
	if item != nil {
		switch fp.selector {
		case CreateOsImageProfileRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
			item.OsImageProfile = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateOsImageProfileRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateOsImageProfileRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateOsImageProfileRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateOsImageProfileRequest_FieldPathSelectorParent
}

func (fp *CreateOsImageProfileRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateOsImageProfileRequest_FieldTerminalPath) WithIValue(value interface{}) CreateOsImageProfileRequest_FieldPathValue {
	switch fp.selector {
	case CreateOsImageProfileRequest_FieldPathSelectorParent:
		return &CreateOsImageProfileRequest_FieldTerminalPathValue{CreateOsImageProfileRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.ParentReference)}
	case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		return &CreateOsImageProfileRequest_FieldTerminalPathValue{CreateOsImageProfileRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.OsImageProfile)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *CreateOsImageProfileRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateOsImageProfileRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateOsImageProfileRequest_FieldPathArrayOfValues {
	fpaov := &CreateOsImageProfileRequest_FieldTerminalPathArrayOfValues{CreateOsImageProfileRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateOsImageProfileRequest_FieldPathSelectorParent:
		return &CreateOsImageProfileRequest_FieldTerminalPathArrayOfValues{CreateOsImageProfileRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.ParentReference)}
	case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		return &CreateOsImageProfileRequest_FieldTerminalPathArrayOfValues{CreateOsImageProfileRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.OsImageProfile)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateOsImageProfileRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateOsImageProfileRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateOsImageProfileRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *CreateOsImageProfileRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateOsImageProfileRequest_FieldSubPath struct {
	selector CreateOsImageProfileRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateOsImageProfileRequest_FieldPath = (*CreateOsImageProfileRequest_FieldSubPath)(nil)

func (fps *CreateOsImageProfileRequest_FieldSubPath) Selector() CreateOsImageProfileRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateOsImageProfileRequest_FieldSubPath) AsOsImageProfileSubPath() (os_image_profile.OsImageProfile_FieldPath, bool) {
	res, ok := fps.subPath.(os_image_profile.OsImageProfile_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateOsImageProfileRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateOsImageProfileRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateOsImageProfileRequest
func (fps *CreateOsImageProfileRequest_FieldSubPath) Get(source *CreateOsImageProfileRequest) (values []interface{}) {
	switch fps.selector {
	case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		values = append(values, fps.subPath.GetRaw(source.GetOsImageProfile())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateOsImageProfileRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateOsImageProfileRequest))
}

// GetSingle returns value of selected field from source CreateOsImageProfileRequest
func (fps *CreateOsImageProfileRequest_FieldSubPath) GetSingle(source *CreateOsImageProfileRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		if source.GetOsImageProfile() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOsImageProfile())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fps.selector))
	}
}

func (fps *CreateOsImageProfileRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateOsImageProfileRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateOsImageProfileRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateOsImageProfileRequest_FieldSubPath) ClearValue(item *CreateOsImageProfileRequest) {
	if item != nil {
		switch fps.selector {
		case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
			fps.subPath.ClearValueRaw(item.OsImageProfile)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateOsImageProfileRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateOsImageProfileRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateOsImageProfileRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateOsImageProfileRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateOsImageProfileRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateOsImageProfileRequest_FieldSubPath) WithIValue(value interface{}) CreateOsImageProfileRequest_FieldPathValue {
	return &CreateOsImageProfileRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateOsImageProfileRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateOsImageProfileRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateOsImageProfileRequest_FieldPathArrayOfValues {
	return &CreateOsImageProfileRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateOsImageProfileRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateOsImageProfileRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateOsImageProfileRequest_FieldPathArrayItemValue {
	return &CreateOsImageProfileRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateOsImageProfileRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateOsImageProfileRequest_FieldPathValue allows storing values for CreateOsImageProfileRequest fields according to their type
type CreateOsImageProfileRequest_FieldPathValue interface {
	CreateOsImageProfileRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateOsImageProfileRequest)
	CompareWith(*CreateOsImageProfileRequest) (cmp int, comparable bool)
}

func ParseCreateOsImageProfileRequest_FieldPathValue(pathStr, valueStr string) (CreateOsImageProfileRequest_FieldPathValue, error) {
	fp, err := ParseCreateOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateOsImageProfileRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateOsImageProfileRequest_FieldPathValue), nil
}

func MustParseCreateOsImageProfileRequest_FieldPathValue(pathStr, valueStr string) CreateOsImageProfileRequest_FieldPathValue {
	fpv, err := ParseCreateOsImageProfileRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateOsImageProfileRequest_FieldTerminalPathValue struct {
	CreateOsImageProfileRequest_FieldTerminalPath
	value interface{}
}

var _ CreateOsImageProfileRequest_FieldPathValue = (*CreateOsImageProfileRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateOsImageProfileRequest' as interface{}
func (fpv *CreateOsImageProfileRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateOsImageProfileRequest_FieldTerminalPathValue) AsParentValue() (*os_image_profile.ParentReference, bool) {
	res, ok := fpv.value.(*os_image_profile.ParentReference)
	return res, ok
}
func (fpv *CreateOsImageProfileRequest_FieldTerminalPathValue) AsOsImageProfileValue() (*os_image_profile.OsImageProfile, bool) {
	res, ok := fpv.value.(*os_image_profile.OsImageProfile)
	return res, ok
}

// SetTo stores value for selected field for object CreateOsImageProfileRequest
func (fpv *CreateOsImageProfileRequest_FieldTerminalPathValue) SetTo(target **CreateOsImageProfileRequest) {
	if *target == nil {
		*target = new(CreateOsImageProfileRequest)
	}
	switch fpv.selector {
	case CreateOsImageProfileRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*os_image_profile.ParentReference)
	case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		(*target).OsImageProfile = fpv.value.(*os_image_profile.OsImageProfile)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fpv.selector))
	}
}

func (fpv *CreateOsImageProfileRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateOsImageProfileRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateOsImageProfileRequest_FieldTerminalPathValue' with the value under path in 'CreateOsImageProfileRequest'.
func (fpv *CreateOsImageProfileRequest_FieldTerminalPathValue) CompareWith(source *CreateOsImageProfileRequest) (int, bool) {
	switch fpv.selector {
	case CreateOsImageProfileRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*os_image_profile.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fpv.selector))
	}
}

func (fpv *CreateOsImageProfileRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateOsImageProfileRequest))
}

type CreateOsImageProfileRequest_FieldSubPathValue struct {
	CreateOsImageProfileRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateOsImageProfileRequest_FieldPathValue = (*CreateOsImageProfileRequest_FieldSubPathValue)(nil)

func (fpvs *CreateOsImageProfileRequest_FieldSubPathValue) AsOsImageProfilePathValue() (os_image_profile.OsImageProfile_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(os_image_profile.OsImageProfile_FieldPathValue)
	return res, ok
}

func (fpvs *CreateOsImageProfileRequest_FieldSubPathValue) SetTo(target **CreateOsImageProfileRequest) {
	if *target == nil {
		*target = new(CreateOsImageProfileRequest)
	}
	switch fpvs.Selector() {
	case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		fpvs.subPathValue.(os_image_profile.OsImageProfile_FieldPathValue).SetTo(&(*target).OsImageProfile)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateOsImageProfileRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateOsImageProfileRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateOsImageProfileRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateOsImageProfileRequest_FieldSubPathValue) CompareWith(source *CreateOsImageProfileRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		return fpvs.subPathValue.(os_image_profile.OsImageProfile_FieldPathValue).CompareWith(source.GetOsImageProfile())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateOsImageProfileRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateOsImageProfileRequest))
}

// CreateOsImageProfileRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateOsImageProfileRequest according to their type
// Present only for array (repeated) types.
type CreateOsImageProfileRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateOsImageProfileRequest_FieldPath
	ContainsValue(*CreateOsImageProfileRequest) bool
}

// ParseCreateOsImageProfileRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateOsImageProfileRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateOsImageProfileRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateOsImageProfileRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateOsImageProfileRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateOsImageProfileRequest_FieldTerminalPathArrayItemValue struct {
	CreateOsImageProfileRequest_FieldTerminalPath
	value interface{}
}

var _ CreateOsImageProfileRequest_FieldPathArrayItemValue = (*CreateOsImageProfileRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateOsImageProfileRequest as interface{}
func (fpaiv *CreateOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateOsImageProfileRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateOsImageProfileRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateOsImageProfileRequest'
func (fpaiv *CreateOsImageProfileRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateOsImageProfileRequest) bool {
	slice := fpaiv.CreateOsImageProfileRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateOsImageProfileRequest_FieldSubPathArrayItemValue struct {
	CreateOsImageProfileRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateOsImageProfileRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateOsImageProfileRequest_FieldSubPathArrayItemValue) AsOsImageProfilePathItemValue() (os_image_profile.OsImageProfile_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(os_image_profile.OsImageProfile_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateOsImageProfileRequest'
func (fpaivs *CreateOsImageProfileRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateOsImageProfileRequest) bool {
	switch fpaivs.Selector() {
	case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		return fpaivs.subPathItemValue.(os_image_profile.OsImageProfile_FieldPathArrayItemValue).ContainsValue(source.GetOsImageProfile())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsImageProfileRequest: %d", fpaivs.Selector()))
	}
}

// CreateOsImageProfileRequest_FieldPathArrayOfValues allows storing slice of values for CreateOsImageProfileRequest fields according to their type
type CreateOsImageProfileRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateOsImageProfileRequest_FieldPath
}

func ParseCreateOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateOsImageProfileRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateOsImageProfileRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateOsImageProfileRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateOsImageProfileRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateOsImageProfileRequest_FieldTerminalPathArrayOfValues struct {
	CreateOsImageProfileRequest_FieldTerminalPath
	values interface{}
}

var _ CreateOsImageProfileRequest_FieldPathArrayOfValues = (*CreateOsImageProfileRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateOsImageProfileRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateOsImageProfileRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*os_image_profile.ParentReference) {
			values = append(values, v)
		}
	case CreateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		for _, v := range fpaov.values.([]*os_image_profile.OsImageProfile) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateOsImageProfileRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*os_image_profile.ParentReference, bool) {
	res, ok := fpaov.values.([]*os_image_profile.ParentReference)
	return res, ok
}
func (fpaov *CreateOsImageProfileRequest_FieldTerminalPathArrayOfValues) AsOsImageProfileArrayOfValues() ([]*os_image_profile.OsImageProfile, bool) {
	res, ok := fpaov.values.([]*os_image_profile.OsImageProfile)
	return res, ok
}

type CreateOsImageProfileRequest_FieldSubPathArrayOfValues struct {
	CreateOsImageProfileRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateOsImageProfileRequest_FieldPathArrayOfValues = (*CreateOsImageProfileRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateOsImageProfileRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateOsImageProfileRequest_FieldSubPathArrayOfValues) AsOsImageProfilePathArrayOfValues() (os_image_profile.OsImageProfile_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(os_image_profile.OsImageProfile_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateOsImageProfileRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateOsImageProfileRequest_FieldPathSelector
	Get(source *UpdateOsImageProfileRequest) []interface{}
	GetSingle(source *UpdateOsImageProfileRequest) (interface{}, bool)
	ClearValue(item *UpdateOsImageProfileRequest)

	// Those methods build corresponding UpdateOsImageProfileRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateOsImageProfileRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateOsImageProfileRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateOsImageProfileRequest_FieldPathArrayItemValue
}

type UpdateOsImageProfileRequest_FieldPathSelector int32

const (
	UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile UpdateOsImageProfileRequest_FieldPathSelector = 0
	UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask     UpdateOsImageProfileRequest_FieldPathSelector = 1
	UpdateOsImageProfileRequest_FieldPathSelectorCas            UpdateOsImageProfileRequest_FieldPathSelector = 2
	UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing   UpdateOsImageProfileRequest_FieldPathSelector = 3
)

func (s UpdateOsImageProfileRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		return "os_image_profile"
	case UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateOsImageProfileRequest_FieldPathSelectorCas:
		return "cas"
	case UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing:
		return "allow_missing"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", s))
	}
}

func BuildUpdateOsImageProfileRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateOsImageProfileRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateOsImageProfileRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "os_image_profile", "osImageProfile", "os-image-profile":
			return &UpdateOsImageProfileRequest_FieldTerminalPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateOsImageProfileRequest_FieldTerminalPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateOsImageProfileRequest_FieldTerminalPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorCas}, nil
		case "allow_missing", "allowMissing", "allow-missing":
			return &UpdateOsImageProfileRequest_FieldTerminalPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing}, nil
		}
	} else {
		switch fp[0] {
		case "os_image_profile", "osImageProfile", "os-image-profile":
			if subpath, err := os_image_profile.BuildOsImageProfile_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateOsImageProfileRequest_FieldSubPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateOsImageProfileRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateOsImageProfileRequest_FieldSubPath{selector: UpdateOsImageProfileRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateOsImageProfileRequest", fp)
}

func ParseUpdateOsImageProfileRequest_FieldPath(rawField string) (UpdateOsImageProfileRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateOsImageProfileRequest_FieldPath(fp)
}

func MustParseUpdateOsImageProfileRequest_FieldPath(rawField string) UpdateOsImageProfileRequest_FieldPath {
	fp, err := ParseUpdateOsImageProfileRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateOsImageProfileRequest_FieldTerminalPath struct {
	selector UpdateOsImageProfileRequest_FieldPathSelector
}

var _ UpdateOsImageProfileRequest_FieldPath = (*UpdateOsImageProfileRequest_FieldTerminalPath)(nil)

func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) Selector() UpdateOsImageProfileRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateOsImageProfileRequest
func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) Get(source *UpdateOsImageProfileRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
			if source.OsImageProfile != nil {
				values = append(values, source.OsImageProfile)
			}
		case UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateOsImageProfileRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		case UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing:
			values = append(values, source.AllowMissing)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateOsImageProfileRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateOsImageProfileRequest
func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) GetSingle(source *UpdateOsImageProfileRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		res := source.GetOsImageProfile()
		return res, res != nil
	case UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateOsImageProfileRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	case UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing:
		return source.GetAllowMissing(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateOsImageProfileRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		return (*os_image_profile.OsImageProfile)(nil)
	case UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask:
		return (*os_image_profile.OsImageProfile_FieldMask)(nil)
	case UpdateOsImageProfileRequest_FieldPathSelectorCas:
		return (*UpdateOsImageProfileRequest_CAS)(nil)
	case UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) ClearValue(item *UpdateOsImageProfileRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
			item.OsImageProfile = nil
		case UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateOsImageProfileRequest_FieldPathSelectorCas:
			item.Cas = nil
		case UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing:
			item.AllowMissing = false
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateOsImageProfileRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask ||
		fp.selector == UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing
}

func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateOsImageProfileRequest_FieldPathValue {
	switch fp.selector {
	case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		return &UpdateOsImageProfileRequest_FieldTerminalPathValue{UpdateOsImageProfileRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.OsImageProfile)}
	case UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask:
		return &UpdateOsImageProfileRequest_FieldTerminalPathValue{UpdateOsImageProfileRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.OsImageProfile_FieldMask)}
	case UpdateOsImageProfileRequest_FieldPathSelectorCas:
		return &UpdateOsImageProfileRequest_FieldTerminalPathValue{UpdateOsImageProfileRequest_FieldTerminalPath: *fp, value: value.(*UpdateOsImageProfileRequest_CAS)}
	case UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing:
		return &UpdateOsImageProfileRequest_FieldTerminalPathValue{UpdateOsImageProfileRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateOsImageProfileRequest_FieldPathArrayOfValues {
	fpaov := &UpdateOsImageProfileRequest_FieldTerminalPathArrayOfValues{UpdateOsImageProfileRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		return &UpdateOsImageProfileRequest_FieldTerminalPathArrayOfValues{UpdateOsImageProfileRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.OsImageProfile)}
	case UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask:
		return &UpdateOsImageProfileRequest_FieldTerminalPathArrayOfValues{UpdateOsImageProfileRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.OsImageProfile_FieldMask)}
	case UpdateOsImageProfileRequest_FieldPathSelectorCas:
		return &UpdateOsImageProfileRequest_FieldTerminalPathArrayOfValues{UpdateOsImageProfileRequest_FieldTerminalPath: *fp, values: values.([]*UpdateOsImageProfileRequest_CAS)}
	case UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing:
		return &UpdateOsImageProfileRequest_FieldTerminalPathArrayOfValues{UpdateOsImageProfileRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateOsImageProfileRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *UpdateOsImageProfileRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateOsImageProfileRequest_FieldSubPath struct {
	selector UpdateOsImageProfileRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateOsImageProfileRequest_FieldPath = (*UpdateOsImageProfileRequest_FieldSubPath)(nil)

func (fps *UpdateOsImageProfileRequest_FieldSubPath) Selector() UpdateOsImageProfileRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateOsImageProfileRequest_FieldSubPath) AsOsImageProfileSubPath() (os_image_profile.OsImageProfile_FieldPath, bool) {
	res, ok := fps.subPath.(os_image_profile.OsImageProfile_FieldPath)
	return res, ok
}
func (fps *UpdateOsImageProfileRequest_FieldSubPath) AsCasSubPath() (UpdateOsImageProfileRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateOsImageProfileRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateOsImageProfileRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateOsImageProfileRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateOsImageProfileRequest
func (fps *UpdateOsImageProfileRequest_FieldSubPath) Get(source *UpdateOsImageProfileRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		values = append(values, fps.subPath.GetRaw(source.GetOsImageProfile())...)
	case UpdateOsImageProfileRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateOsImageProfileRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateOsImageProfileRequest))
}

// GetSingle returns value of selected field from source UpdateOsImageProfileRequest
func (fps *UpdateOsImageProfileRequest_FieldSubPath) GetSingle(source *UpdateOsImageProfileRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		if source.GetOsImageProfile() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOsImageProfile())
	case UpdateOsImageProfileRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fps.selector))
	}
}

func (fps *UpdateOsImageProfileRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateOsImageProfileRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateOsImageProfileRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateOsImageProfileRequest_FieldSubPath) ClearValue(item *UpdateOsImageProfileRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
			fps.subPath.ClearValueRaw(item.OsImageProfile)
		case UpdateOsImageProfileRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateOsImageProfileRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateOsImageProfileRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateOsImageProfileRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateOsImageProfileRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateOsImageProfileRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateOsImageProfileRequest_FieldSubPath) WithIValue(value interface{}) UpdateOsImageProfileRequest_FieldPathValue {
	return &UpdateOsImageProfileRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateOsImageProfileRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateOsImageProfileRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateOsImageProfileRequest_FieldPathArrayOfValues {
	return &UpdateOsImageProfileRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateOsImageProfileRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateOsImageProfileRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateOsImageProfileRequest_FieldPathArrayItemValue {
	return &UpdateOsImageProfileRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateOsImageProfileRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateOsImageProfileRequest_FieldPathValue allows storing values for UpdateOsImageProfileRequest fields according to their type
type UpdateOsImageProfileRequest_FieldPathValue interface {
	UpdateOsImageProfileRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateOsImageProfileRequest)
	CompareWith(*UpdateOsImageProfileRequest) (cmp int, comparable bool)
}

func ParseUpdateOsImageProfileRequest_FieldPathValue(pathStr, valueStr string) (UpdateOsImageProfileRequest_FieldPathValue, error) {
	fp, err := ParseUpdateOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateOsImageProfileRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateOsImageProfileRequest_FieldPathValue), nil
}

func MustParseUpdateOsImageProfileRequest_FieldPathValue(pathStr, valueStr string) UpdateOsImageProfileRequest_FieldPathValue {
	fpv, err := ParseUpdateOsImageProfileRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateOsImageProfileRequest_FieldTerminalPathValue struct {
	UpdateOsImageProfileRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateOsImageProfileRequest_FieldPathValue = (*UpdateOsImageProfileRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateOsImageProfileRequest' as interface{}
func (fpv *UpdateOsImageProfileRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateOsImageProfileRequest_FieldTerminalPathValue) AsOsImageProfileValue() (*os_image_profile.OsImageProfile, bool) {
	res, ok := fpv.value.(*os_image_profile.OsImageProfile)
	return res, ok
}
func (fpv *UpdateOsImageProfileRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*os_image_profile.OsImageProfile_FieldMask, bool) {
	res, ok := fpv.value.(*os_image_profile.OsImageProfile_FieldMask)
	return res, ok
}
func (fpv *UpdateOsImageProfileRequest_FieldTerminalPathValue) AsCasValue() (*UpdateOsImageProfileRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateOsImageProfileRequest_CAS)
	return res, ok
}
func (fpv *UpdateOsImageProfileRequest_FieldTerminalPathValue) AsAllowMissingValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object UpdateOsImageProfileRequest
func (fpv *UpdateOsImageProfileRequest_FieldTerminalPathValue) SetTo(target **UpdateOsImageProfileRequest) {
	if *target == nil {
		*target = new(UpdateOsImageProfileRequest)
	}
	switch fpv.selector {
	case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		(*target).OsImageProfile = fpv.value.(*os_image_profile.OsImageProfile)
	case UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*os_image_profile.OsImageProfile_FieldMask)
	case UpdateOsImageProfileRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateOsImageProfileRequest_CAS)
	case UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing:
		(*target).AllowMissing = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateOsImageProfileRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOsImageProfileRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateOsImageProfileRequest_FieldTerminalPathValue' with the value under path in 'UpdateOsImageProfileRequest'.
func (fpv *UpdateOsImageProfileRequest_FieldTerminalPathValue) CompareWith(source *UpdateOsImageProfileRequest) (int, bool) {
	switch fpv.selector {
	case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		return 0, false
	case UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateOsImageProfileRequest_FieldPathSelectorCas:
		return 0, false
	case UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAllowMissing()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateOsImageProfileRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateOsImageProfileRequest))
}

type UpdateOsImageProfileRequest_FieldSubPathValue struct {
	UpdateOsImageProfileRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateOsImageProfileRequest_FieldPathValue = (*UpdateOsImageProfileRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateOsImageProfileRequest_FieldSubPathValue) AsOsImageProfilePathValue() (os_image_profile.OsImageProfile_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(os_image_profile.OsImageProfile_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateOsImageProfileRequest_FieldSubPathValue) AsCasPathValue() (UpdateOsImageProfileRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateOsImageProfileRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateOsImageProfileRequest_FieldSubPathValue) SetTo(target **UpdateOsImageProfileRequest) {
	if *target == nil {
		*target = new(UpdateOsImageProfileRequest)
	}
	switch fpvs.Selector() {
	case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		fpvs.subPathValue.(os_image_profile.OsImageProfile_FieldPathValue).SetTo(&(*target).OsImageProfile)
	case UpdateOsImageProfileRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateOsImageProfileRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOsImageProfileRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOsImageProfileRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateOsImageProfileRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateOsImageProfileRequest_FieldSubPathValue) CompareWith(source *UpdateOsImageProfileRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		return fpvs.subPathValue.(os_image_profile.OsImageProfile_FieldPathValue).CompareWith(source.GetOsImageProfile())
	case UpdateOsImageProfileRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateOsImageProfileRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOsImageProfileRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateOsImageProfileRequest))
}

// UpdateOsImageProfileRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateOsImageProfileRequest according to their type
// Present only for array (repeated) types.
type UpdateOsImageProfileRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateOsImageProfileRequest_FieldPath
	ContainsValue(*UpdateOsImageProfileRequest) bool
}

// ParseUpdateOsImageProfileRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateOsImageProfileRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateOsImageProfileRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateOsImageProfileRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateOsImageProfileRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateOsImageProfileRequest_FieldTerminalPathArrayItemValue struct {
	UpdateOsImageProfileRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateOsImageProfileRequest_FieldPathArrayItemValue = (*UpdateOsImageProfileRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateOsImageProfileRequest as interface{}
func (fpaiv *UpdateOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateOsImageProfileRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateOsImageProfileRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateOsImageProfileRequest'
func (fpaiv *UpdateOsImageProfileRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateOsImageProfileRequest) bool {
	slice := fpaiv.UpdateOsImageProfileRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateOsImageProfileRequest_FieldSubPathArrayItemValue struct {
	UpdateOsImageProfileRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateOsImageProfileRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateOsImageProfileRequest_FieldSubPathArrayItemValue) AsOsImageProfilePathItemValue() (os_image_profile.OsImageProfile_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(os_image_profile.OsImageProfile_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateOsImageProfileRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateOsImageProfileRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateOsImageProfileRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateOsImageProfileRequest'
func (fpaivs *UpdateOsImageProfileRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateOsImageProfileRequest) bool {
	switch fpaivs.Selector() {
	case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		return fpaivs.subPathItemValue.(os_image_profile.OsImageProfile_FieldPathArrayItemValue).ContainsValue(source.GetOsImageProfile())
	case UpdateOsImageProfileRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateOsImageProfileRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest: %d", fpaivs.Selector()))
	}
}

// UpdateOsImageProfileRequest_FieldPathArrayOfValues allows storing slice of values for UpdateOsImageProfileRequest fields according to their type
type UpdateOsImageProfileRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateOsImageProfileRequest_FieldPath
}

func ParseUpdateOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateOsImageProfileRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateOsImageProfileRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateOsImageProfileRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateOsImageProfileRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateOsImageProfileRequest_FieldTerminalPathArrayOfValues struct {
	UpdateOsImageProfileRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateOsImageProfileRequest_FieldPathArrayOfValues = (*UpdateOsImageProfileRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateOsImageProfileRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateOsImageProfileRequest_FieldPathSelectorOsImageProfile:
		for _, v := range fpaov.values.([]*os_image_profile.OsImageProfile) {
			values = append(values, v)
		}
	case UpdateOsImageProfileRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*os_image_profile.OsImageProfile_FieldMask) {
			values = append(values, v)
		}
	case UpdateOsImageProfileRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateOsImageProfileRequest_CAS) {
			values = append(values, v)
		}
	case UpdateOsImageProfileRequest_FieldPathSelectorAllowMissing:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateOsImageProfileRequest_FieldTerminalPathArrayOfValues) AsOsImageProfileArrayOfValues() ([]*os_image_profile.OsImageProfile, bool) {
	res, ok := fpaov.values.([]*os_image_profile.OsImageProfile)
	return res, ok
}
func (fpaov *UpdateOsImageProfileRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*os_image_profile.OsImageProfile_FieldMask, bool) {
	res, ok := fpaov.values.([]*os_image_profile.OsImageProfile_FieldMask)
	return res, ok
}
func (fpaov *UpdateOsImageProfileRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateOsImageProfileRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateOsImageProfileRequest_CAS)
	return res, ok
}
func (fpaov *UpdateOsImageProfileRequest_FieldTerminalPathArrayOfValues) AsAllowMissingArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type UpdateOsImageProfileRequest_FieldSubPathArrayOfValues struct {
	UpdateOsImageProfileRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateOsImageProfileRequest_FieldPathArrayOfValues = (*UpdateOsImageProfileRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateOsImageProfileRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateOsImageProfileRequest_FieldSubPathArrayOfValues) AsOsImageProfilePathArrayOfValues() (os_image_profile.OsImageProfile_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(os_image_profile.OsImageProfile_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateOsImageProfileRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateOsImageProfileRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateOsImageProfileRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateOsImageProfileRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateOsImageProfileRequestCAS_FieldPathSelector
	Get(source *UpdateOsImageProfileRequest_CAS) []interface{}
	GetSingle(source *UpdateOsImageProfileRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateOsImageProfileRequest_CAS)

	// Those methods build corresponding UpdateOsImageProfileRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateOsImageProfileRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateOsImageProfileRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateOsImageProfileRequestCAS_FieldPathArrayItemValue
}

type UpdateOsImageProfileRequestCAS_FieldPathSelector int32

const (
	UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState UpdateOsImageProfileRequestCAS_FieldPathSelector = 0
	UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask        UpdateOsImageProfileRequestCAS_FieldPathSelector = 1
)

func (s UpdateOsImageProfileRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", s))
	}
}

func BuildUpdateOsImageProfileRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateOsImageProfileRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateOsImageProfileRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateOsImageProfileRequestCAS_FieldTerminalPath{selector: UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateOsImageProfileRequestCAS_FieldTerminalPath{selector: UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := os_image_profile.BuildOsImageProfile_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateOsImageProfileRequestCAS_FieldSubPath{selector: UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateOsImageProfileRequest_CAS", fp)
}

func ParseUpdateOsImageProfileRequestCAS_FieldPath(rawField string) (UpdateOsImageProfileRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateOsImageProfileRequestCAS_FieldPath(fp)
}

func MustParseUpdateOsImageProfileRequestCAS_FieldPath(rawField string) UpdateOsImageProfileRequestCAS_FieldPath {
	fp, err := ParseUpdateOsImageProfileRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateOsImageProfileRequestCAS_FieldTerminalPath struct {
	selector UpdateOsImageProfileRequestCAS_FieldPathSelector
}

var _ UpdateOsImageProfileRequestCAS_FieldPath = (*UpdateOsImageProfileRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) Selector() UpdateOsImageProfileRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateOsImageProfileRequest_CAS
func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) Get(source *UpdateOsImageProfileRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateOsImageProfileRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateOsImageProfileRequest_CAS
func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) GetSingle(source *UpdateOsImageProfileRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateOsImageProfileRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
		return (*os_image_profile.OsImageProfile)(nil)
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask:
		return (*os_image_profile.OsImageProfile_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) ClearValue(item *UpdateOsImageProfileRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateOsImageProfileRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateOsImageProfileRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateOsImageProfileRequestCAS_FieldTerminalPathValue{UpdateOsImageProfileRequestCAS_FieldTerminalPath: *fp, value: value.(*os_image_profile.OsImageProfile)}
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateOsImageProfileRequestCAS_FieldTerminalPathValue{UpdateOsImageProfileRequestCAS_FieldTerminalPath: *fp, value: value.(*os_image_profile.OsImageProfile_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateOsImageProfileRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateOsImageProfileRequestCAS_FieldTerminalPathArrayOfValues{UpdateOsImageProfileRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateOsImageProfileRequestCAS_FieldTerminalPathArrayOfValues{UpdateOsImageProfileRequestCAS_FieldTerminalPath: *fp, values: values.([]*os_image_profile.OsImageProfile)}
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateOsImageProfileRequestCAS_FieldTerminalPathArrayOfValues{UpdateOsImageProfileRequestCAS_FieldTerminalPath: *fp, values: values.([]*os_image_profile.OsImageProfile_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateOsImageProfileRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOsImageProfileRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateOsImageProfileRequestCAS_FieldSubPath struct {
	selector UpdateOsImageProfileRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateOsImageProfileRequestCAS_FieldPath = (*UpdateOsImageProfileRequestCAS_FieldSubPath)(nil)

func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) Selector() UpdateOsImageProfileRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) AsConditionalStateSubPath() (os_image_profile.OsImageProfile_FieldPath, bool) {
	res, ok := fps.subPath.(os_image_profile.OsImageProfile_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateOsImageProfileRequest_CAS
func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) Get(source *UpdateOsImageProfileRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateOsImageProfileRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateOsImageProfileRequest_CAS
func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) GetSingle(source *UpdateOsImageProfileRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateOsImageProfileRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) ClearValue(item *UpdateOsImageProfileRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateOsImageProfileRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateOsImageProfileRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateOsImageProfileRequestCAS_FieldPathValue {
	return &UpdateOsImageProfileRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateOsImageProfileRequestCAS_FieldPathArrayOfValues {
	return &UpdateOsImageProfileRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateOsImageProfileRequestCAS_FieldPathArrayItemValue {
	return &UpdateOsImageProfileRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateOsImageProfileRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateOsImageProfileRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateOsImageProfileRequestCAS_FieldPathValue interface {
	UpdateOsImageProfileRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateOsImageProfileRequest_CAS)
	CompareWith(*UpdateOsImageProfileRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateOsImageProfileRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateOsImageProfileRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateOsImageProfileRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateOsImageProfileRequestCAS_FieldPathValue), nil
}

func MustParseUpdateOsImageProfileRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateOsImageProfileRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateOsImageProfileRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateOsImageProfileRequestCAS_FieldTerminalPathValue struct {
	UpdateOsImageProfileRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateOsImageProfileRequestCAS_FieldPathValue = (*UpdateOsImageProfileRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateOsImageProfileRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateOsImageProfileRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*os_image_profile.OsImageProfile, bool) {
	res, ok := fpv.value.(*os_image_profile.OsImageProfile)
	return res, ok
}
func (fpv *UpdateOsImageProfileRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*os_image_profile.OsImageProfile_FieldMask, bool) {
	res, ok := fpv.value.(*os_image_profile.OsImageProfile_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateOsImageProfileRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateOsImageProfileRequest_CAS) {
	if *target == nil {
		*target = new(UpdateOsImageProfileRequest_CAS)
	}
	switch fpv.selector {
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*os_image_profile.OsImageProfile)
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*os_image_profile.OsImageProfile_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateOsImageProfileRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOsImageProfileRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateOsImageProfileRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateOsImageProfileRequest_CAS'.
func (fpv *UpdateOsImageProfileRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateOsImageProfileRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateOsImageProfileRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateOsImageProfileRequest_CAS))
}

type UpdateOsImageProfileRequestCAS_FieldSubPathValue struct {
	UpdateOsImageProfileRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateOsImageProfileRequestCAS_FieldPathValue = (*UpdateOsImageProfileRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateOsImageProfileRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (os_image_profile.OsImageProfile_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(os_image_profile.OsImageProfile_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateOsImageProfileRequestCAS_FieldSubPathValue) SetTo(target **UpdateOsImageProfileRequest_CAS) {
	if *target == nil {
		*target = new(UpdateOsImageProfileRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(os_image_profile.OsImageProfile_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOsImageProfileRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOsImageProfileRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateOsImageProfileRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateOsImageProfileRequestCAS_FieldSubPathValue) CompareWith(source *UpdateOsImageProfileRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(os_image_profile.OsImageProfile_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOsImageProfileRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateOsImageProfileRequest_CAS))
}

// UpdateOsImageProfileRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateOsImageProfileRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateOsImageProfileRequestCAS_FieldPath
	ContainsValue(*UpdateOsImageProfileRequest_CAS) bool
}

// ParseUpdateOsImageProfileRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateOsImageProfileRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateOsImageProfileRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateOsImageProfileRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateOsImageProfileRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateOsImageProfileRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateOsImageProfileRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateOsImageProfileRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateOsImageProfileRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateOsImageProfileRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateOsImageProfileRequestCAS_FieldPathArrayItemValue = (*UpdateOsImageProfileRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateOsImageProfileRequest_CAS as interface{}
func (fpaiv *UpdateOsImageProfileRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateOsImageProfileRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateOsImageProfileRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateOsImageProfileRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateOsImageProfileRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateOsImageProfileRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateOsImageProfileRequest_CAS) bool {
	slice := fpaiv.UpdateOsImageProfileRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateOsImageProfileRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateOsImageProfileRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateOsImageProfileRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateOsImageProfileRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (os_image_profile.OsImageProfile_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(os_image_profile.OsImageProfile_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateOsImageProfileRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateOsImageProfileRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(os_image_profile.OsImageProfile_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsImageProfileRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateOsImageProfileRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateOsImageProfileRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateOsImageProfileRequestCAS_FieldPath
}

func ParseUpdateOsImageProfileRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateOsImageProfileRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateOsImageProfileRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateOsImageProfileRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateOsImageProfileRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateOsImageProfileRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateOsImageProfileRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateOsImageProfileRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateOsImageProfileRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateOsImageProfileRequestCAS_FieldPathArrayOfValues = (*UpdateOsImageProfileRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateOsImageProfileRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*os_image_profile.OsImageProfile) {
			values = append(values, v)
		}
	case UpdateOsImageProfileRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*os_image_profile.OsImageProfile_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateOsImageProfileRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*os_image_profile.OsImageProfile, bool) {
	res, ok := fpaov.values.([]*os_image_profile.OsImageProfile)
	return res, ok
}
func (fpaov *UpdateOsImageProfileRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*os_image_profile.OsImageProfile_FieldMask, bool) {
	res, ok := fpaov.values.([]*os_image_profile.OsImageProfile_FieldMask)
	return res, ok
}

type UpdateOsImageProfileRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateOsImageProfileRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateOsImageProfileRequestCAS_FieldPathArrayOfValues = (*UpdateOsImageProfileRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateOsImageProfileRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateOsImageProfileRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (os_image_profile.OsImageProfile_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(os_image_profile.OsImageProfile_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteOsImageProfileRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteOsImageProfileRequest_FieldPathSelector
	Get(source *DeleteOsImageProfileRequest) []interface{}
	GetSingle(source *DeleteOsImageProfileRequest) (interface{}, bool)
	ClearValue(item *DeleteOsImageProfileRequest)

	// Those methods build corresponding DeleteOsImageProfileRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteOsImageProfileRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteOsImageProfileRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteOsImageProfileRequest_FieldPathArrayItemValue
}

type DeleteOsImageProfileRequest_FieldPathSelector int32

const (
	DeleteOsImageProfileRequest_FieldPathSelectorName DeleteOsImageProfileRequest_FieldPathSelector = 0
)

func (s DeleteOsImageProfileRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteOsImageProfileRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsImageProfileRequest: %d", s))
	}
}

func BuildDeleteOsImageProfileRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteOsImageProfileRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteOsImageProfileRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteOsImageProfileRequest_FieldTerminalPath{selector: DeleteOsImageProfileRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteOsImageProfileRequest", fp)
}

func ParseDeleteOsImageProfileRequest_FieldPath(rawField string) (DeleteOsImageProfileRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteOsImageProfileRequest_FieldPath(fp)
}

func MustParseDeleteOsImageProfileRequest_FieldPath(rawField string) DeleteOsImageProfileRequest_FieldPath {
	fp, err := ParseDeleteOsImageProfileRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteOsImageProfileRequest_FieldTerminalPath struct {
	selector DeleteOsImageProfileRequest_FieldPathSelector
}

var _ DeleteOsImageProfileRequest_FieldPath = (*DeleteOsImageProfileRequest_FieldTerminalPath)(nil)

func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) Selector() DeleteOsImageProfileRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteOsImageProfileRequest
func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) Get(source *DeleteOsImageProfileRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteOsImageProfileRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteOsImageProfileRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteOsImageProfileRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteOsImageProfileRequest
func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) GetSingle(source *DeleteOsImageProfileRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteOsImageProfileRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteOsImageProfileRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteOsImageProfileRequest_FieldPathSelectorName:
		return (*os_image_profile.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) ClearValue(item *DeleteOsImageProfileRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteOsImageProfileRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteOsImageProfileRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteOsImageProfileRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteOsImageProfileRequest_FieldPathSelectorName
}

func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteOsImageProfileRequest_FieldPathValue {
	switch fp.selector {
	case DeleteOsImageProfileRequest_FieldPathSelectorName:
		return &DeleteOsImageProfileRequest_FieldTerminalPathValue{DeleteOsImageProfileRequest_FieldTerminalPath: *fp, value: value.(*os_image_profile.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteOsImageProfileRequest_FieldPathArrayOfValues {
	fpaov := &DeleteOsImageProfileRequest_FieldTerminalPathArrayOfValues{DeleteOsImageProfileRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteOsImageProfileRequest_FieldPathSelectorName:
		return &DeleteOsImageProfileRequest_FieldTerminalPathArrayOfValues{DeleteOsImageProfileRequest_FieldTerminalPath: *fp, values: values.([]*os_image_profile.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsImageProfileRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteOsImageProfileRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsImageProfileRequest: %d", fp.selector))
	}
}

func (fp *DeleteOsImageProfileRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteOsImageProfileRequest_FieldPathValue allows storing values for DeleteOsImageProfileRequest fields according to their type
type DeleteOsImageProfileRequest_FieldPathValue interface {
	DeleteOsImageProfileRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteOsImageProfileRequest)
	CompareWith(*DeleteOsImageProfileRequest) (cmp int, comparable bool)
}

func ParseDeleteOsImageProfileRequest_FieldPathValue(pathStr, valueStr string) (DeleteOsImageProfileRequest_FieldPathValue, error) {
	fp, err := ParseDeleteOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteOsImageProfileRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteOsImageProfileRequest_FieldPathValue), nil
}

func MustParseDeleteOsImageProfileRequest_FieldPathValue(pathStr, valueStr string) DeleteOsImageProfileRequest_FieldPathValue {
	fpv, err := ParseDeleteOsImageProfileRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteOsImageProfileRequest_FieldTerminalPathValue struct {
	DeleteOsImageProfileRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteOsImageProfileRequest_FieldPathValue = (*DeleteOsImageProfileRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteOsImageProfileRequest' as interface{}
func (fpv *DeleteOsImageProfileRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteOsImageProfileRequest_FieldTerminalPathValue) AsNameValue() (*os_image_profile.Reference, bool) {
	res, ok := fpv.value.(*os_image_profile.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteOsImageProfileRequest
func (fpv *DeleteOsImageProfileRequest_FieldTerminalPathValue) SetTo(target **DeleteOsImageProfileRequest) {
	if *target == nil {
		*target = new(DeleteOsImageProfileRequest)
	}
	switch fpv.selector {
	case DeleteOsImageProfileRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*os_image_profile.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsImageProfileRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteOsImageProfileRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteOsImageProfileRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteOsImageProfileRequest_FieldTerminalPathValue' with the value under path in 'DeleteOsImageProfileRequest'.
func (fpv *DeleteOsImageProfileRequest_FieldTerminalPathValue) CompareWith(source *DeleteOsImageProfileRequest) (int, bool) {
	switch fpv.selector {
	case DeleteOsImageProfileRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*os_image_profile.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsImageProfileRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteOsImageProfileRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteOsImageProfileRequest))
}

// DeleteOsImageProfileRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteOsImageProfileRequest according to their type
// Present only for array (repeated) types.
type DeleteOsImageProfileRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteOsImageProfileRequest_FieldPath
	ContainsValue(*DeleteOsImageProfileRequest) bool
}

// ParseDeleteOsImageProfileRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteOsImageProfileRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteOsImageProfileRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteOsImageProfileRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteOsImageProfileRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteOsImageProfileRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteOsImageProfileRequest_FieldTerminalPathArrayItemValue struct {
	DeleteOsImageProfileRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteOsImageProfileRequest_FieldPathArrayItemValue = (*DeleteOsImageProfileRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteOsImageProfileRequest as interface{}
func (fpaiv *DeleteOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteOsImageProfileRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteOsImageProfileRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteOsImageProfileRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteOsImageProfileRequest'
func (fpaiv *DeleteOsImageProfileRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteOsImageProfileRequest) bool {
	slice := fpaiv.DeleteOsImageProfileRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteOsImageProfileRequest_FieldPathArrayOfValues allows storing slice of values for DeleteOsImageProfileRequest fields according to their type
type DeleteOsImageProfileRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteOsImageProfileRequest_FieldPath
}

func ParseDeleteOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteOsImageProfileRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteOsImageProfileRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteOsImageProfileRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteOsImageProfileRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteOsImageProfileRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteOsImageProfileRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteOsImageProfileRequest_FieldTerminalPathArrayOfValues struct {
	DeleteOsImageProfileRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteOsImageProfileRequest_FieldPathArrayOfValues = (*DeleteOsImageProfileRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteOsImageProfileRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteOsImageProfileRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*os_image_profile.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteOsImageProfileRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*os_image_profile.Reference, bool) {
	res, ok := fpaov.values.([]*os_image_profile.Reference)
	return res, ok
}
