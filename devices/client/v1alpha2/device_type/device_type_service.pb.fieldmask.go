// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/device_type_service.proto
// DO NOT EDIT!!!

package device_type_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device_type "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device_type"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &device_type.DeviceType{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

type GetDeviceTypeRequest_FieldMask struct {
	Paths []GetDeviceTypeRequest_FieldPath
}

func FullGetDeviceTypeRequest_FieldMask() *GetDeviceTypeRequest_FieldMask {
	res := &GetDeviceTypeRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetDeviceTypeRequest_FieldTerminalPath{selector: GetDeviceTypeRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetDeviceTypeRequest_FieldTerminalPath{selector: GetDeviceTypeRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetDeviceTypeRequest_FieldTerminalPath{selector: GetDeviceTypeRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetDeviceTypeRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetDeviceTypeRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetDeviceTypeRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetDeviceTypeRequest_FieldPath(raw)
	})
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetDeviceTypeRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) Subtract(other *GetDeviceTypeRequest_FieldMask) *GetDeviceTypeRequest_FieldMask {
	result := &GetDeviceTypeRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetDeviceTypeRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetDeviceTypeRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetDeviceTypeRequest_FieldMask) FilterInputFields() *GetDeviceTypeRequest_FieldMask {
	result := &GetDeviceTypeRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetDeviceTypeRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetDeviceTypeRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetDeviceTypeRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetDeviceTypeRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetDeviceTypeRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) AppendPath(path GetDeviceTypeRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetDeviceTypeRequest_FieldPath))
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) GetPaths() []GetDeviceTypeRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetDeviceTypeRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) Set(target, source *GetDeviceTypeRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetDeviceTypeRequest), source.(*GetDeviceTypeRequest))
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) Project(source *GetDeviceTypeRequest) *GetDeviceTypeRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetDeviceTypeRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetDeviceTypeRequest_FieldTerminalPath:
			switch tp.selector {
			case GetDeviceTypeRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetDeviceTypeRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetDeviceTypeRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetDeviceTypeRequest))
}

func (fieldMask *GetDeviceTypeRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetDeviceTypesRequest_FieldMask struct {
	Paths []BatchGetDeviceTypesRequest_FieldPath
}

func FullBatchGetDeviceTypesRequest_FieldMask() *BatchGetDeviceTypesRequest_FieldMask {
	res := &BatchGetDeviceTypesRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetDeviceTypesRequest_FieldTerminalPath{selector: BatchGetDeviceTypesRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetDeviceTypesRequest_FieldTerminalPath{selector: BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetDeviceTypesRequest_FieldTerminalPath{selector: BatchGetDeviceTypesRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetDeviceTypesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetDeviceTypesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetDeviceTypesRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) Subtract(other *BatchGetDeviceTypesRequest_FieldMask) *BatchGetDeviceTypesRequest_FieldMask {
	result := &BatchGetDeviceTypesRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetDeviceTypesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetDeviceTypesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) FilterInputFields() *BatchGetDeviceTypesRequest_FieldMask {
	result := &BatchGetDeviceTypesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetDeviceTypesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetDeviceTypesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetDeviceTypesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetDeviceTypesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) AppendPath(path BatchGetDeviceTypesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetDeviceTypesRequest_FieldPath))
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) GetPaths() []BatchGetDeviceTypesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetDeviceTypesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) Set(target, source *BatchGetDeviceTypesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetDeviceTypesRequest), source.(*BatchGetDeviceTypesRequest))
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) Project(source *BatchGetDeviceTypesRequest) *BatchGetDeviceTypesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetDeviceTypesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetDeviceTypesRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetDeviceTypesRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetDeviceTypesRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetDeviceTypesRequest))
}

func (fieldMask *BatchGetDeviceTypesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetDeviceTypesResponse_FieldMask struct {
	Paths []BatchGetDeviceTypesResponse_FieldPath
}

func FullBatchGetDeviceTypesResponse_FieldMask() *BatchGetDeviceTypesResponse_FieldMask {
	res := &BatchGetDeviceTypesResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetDeviceTypesResponse_FieldTerminalPath{selector: BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes})
	res.Paths = append(res.Paths, &BatchGetDeviceTypesResponse_FieldTerminalPath{selector: BatchGetDeviceTypesResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetDeviceTypesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetDeviceTypesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetDeviceTypesResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) Subtract(other *BatchGetDeviceTypesResponse_FieldMask) *BatchGetDeviceTypesResponse_FieldMask {
	result := &BatchGetDeviceTypesResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetDeviceTypesResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes: &device_type.DeviceType_FieldMask{},
	}
	mySubMasks := map[BatchGetDeviceTypesResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes: &device_type.DeviceType_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetDeviceTypesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetDeviceTypesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetDeviceTypesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
						mySubMasks[BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes] = device_type.FullDeviceType_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetDeviceTypesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetDeviceTypesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetDeviceTypesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) FilterInputFields() *BatchGetDeviceTypesResponse_FieldMask {
	result := &BatchGetDeviceTypesResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
			if _, ok := path.(*BatchGetDeviceTypesResponse_FieldTerminalPath); ok {
				for _, subpath := range device_type.FullDeviceType_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetDeviceTypesResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetDeviceTypesResponse_FieldSubPath); ok {
				selectedMask := &device_type.DeviceType_FieldMask{
					Paths: []device_type.DeviceType_FieldPath{sub.subPath.(device_type.DeviceType_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetDeviceTypesResponse_FieldSubPath{selector: BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetDeviceTypesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetDeviceTypesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetDeviceTypesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetDeviceTypesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) AppendPath(path BatchGetDeviceTypesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetDeviceTypesResponse_FieldPath))
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) GetPaths() []BatchGetDeviceTypesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetDeviceTypesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) Set(target, source *BatchGetDeviceTypesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetDeviceTypesResponse), source.(*BatchGetDeviceTypesResponse))
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) Project(source *BatchGetDeviceTypesResponse) *BatchGetDeviceTypesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetDeviceTypesResponse{}
	deviceTypesMask := &device_type.DeviceType_FieldMask{}
	wholeDeviceTypesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetDeviceTypesResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
				result.DeviceTypes = source.DeviceTypes
				wholeDeviceTypesAccepted = true
			case BatchGetDeviceTypesResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetDeviceTypesResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
				deviceTypesMask.AppendPath(tp.subPath.(device_type.DeviceType_FieldPath))
			}
		}
	}
	if wholeDeviceTypesAccepted == false && len(deviceTypesMask.Paths) > 0 {
		for _, sourceItem := range source.GetDeviceTypes() {
			result.DeviceTypes = append(result.DeviceTypes, deviceTypesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetDeviceTypesResponse))
}

func (fieldMask *BatchGetDeviceTypesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListDeviceTypesRequest_FieldMask struct {
	Paths []ListDeviceTypesRequest_FieldPath
}

func FullListDeviceTypesRequest_FieldMask() *ListDeviceTypesRequest_FieldMask {
	res := &ListDeviceTypesRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo})
	return res
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListDeviceTypesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListDeviceTypesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListDeviceTypesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListDeviceTypesRequest_FieldPath(raw)
	})
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListDeviceTypesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) Subtract(other *ListDeviceTypesRequest_FieldMask) *ListDeviceTypesRequest_FieldMask {
	result := &ListDeviceTypesRequest_FieldMask{}
	removedSelectors := make([]bool, 8)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListDeviceTypesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListDeviceTypesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListDeviceTypesRequest_FieldMask) FilterInputFields() *ListDeviceTypesRequest_FieldMask {
	result := &ListDeviceTypesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListDeviceTypesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListDeviceTypesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListDeviceTypesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListDeviceTypesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListDeviceTypesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) AppendPath(path ListDeviceTypesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListDeviceTypesRequest_FieldPath))
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) GetPaths() []ListDeviceTypesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListDeviceTypesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) Set(target, source *ListDeviceTypesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListDeviceTypesRequest), source.(*ListDeviceTypesRequest))
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) Project(source *ListDeviceTypesRequest) *ListDeviceTypesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListDeviceTypesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListDeviceTypesRequest_FieldTerminalPath:
			switch tp.selector {
			case ListDeviceTypesRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListDeviceTypesRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListDeviceTypesRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListDeviceTypesRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListDeviceTypesRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListDeviceTypesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListDeviceTypesRequest_FieldPathSelectorView:
				result.View = source.View
			case ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo:
				result.IncludePagingInfo = source.IncludePagingInfo
			}
		}
	}
	return result
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListDeviceTypesRequest))
}

func (fieldMask *ListDeviceTypesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListDeviceTypesResponse_FieldMask struct {
	Paths []ListDeviceTypesResponse_FieldPath
}

func FullListDeviceTypesResponse_FieldMask() *ListDeviceTypesResponse_FieldMask {
	res := &ListDeviceTypesResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorDeviceTypes})
	res.Paths = append(res.Paths, &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorNextPageToken})
	res.Paths = append(res.Paths, &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorCurrentOffset})
	res.Paths = append(res.Paths, &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount})
	return res
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListDeviceTypesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListDeviceTypesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListDeviceTypesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListDeviceTypesResponse_FieldPath(raw)
	})
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListDeviceTypesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) Subtract(other *ListDeviceTypesResponse_FieldMask) *ListDeviceTypesResponse_FieldMask {
	result := &ListDeviceTypesResponse_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[ListDeviceTypesResponse_FieldPathSelector]gotenobject.FieldMask{
		ListDeviceTypesResponse_FieldPathSelectorDeviceTypes: &device_type.DeviceType_FieldMask{},
	}
	mySubMasks := map[ListDeviceTypesResponse_FieldPathSelector]gotenobject.FieldMask{
		ListDeviceTypesResponse_FieldPathSelectorDeviceTypes: &device_type.DeviceType_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListDeviceTypesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListDeviceTypesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListDeviceTypesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
						mySubMasks[ListDeviceTypesResponse_FieldPathSelectorDeviceTypes] = device_type.FullDeviceType_FieldMask()
					}
				} else if tp, ok := path.(*ListDeviceTypesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListDeviceTypesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListDeviceTypesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListDeviceTypesResponse_FieldMask) FilterInputFields() *ListDeviceTypesResponse_FieldMask {
	result := &ListDeviceTypesResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
			if _, ok := path.(*ListDeviceTypesResponse_FieldTerminalPath); ok {
				for _, subpath := range device_type.FullDeviceType_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListDeviceTypesResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListDeviceTypesResponse_FieldSubPath); ok {
				selectedMask := &device_type.DeviceType_FieldMask{
					Paths: []device_type.DeviceType_FieldPath{sub.subPath.(device_type.DeviceType_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListDeviceTypesResponse_FieldSubPath{selector: ListDeviceTypesResponse_FieldPathSelectorDeviceTypes, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListDeviceTypesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListDeviceTypesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListDeviceTypesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListDeviceTypesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListDeviceTypesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) AppendPath(path ListDeviceTypesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListDeviceTypesResponse_FieldPath))
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) GetPaths() []ListDeviceTypesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListDeviceTypesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) Set(target, source *ListDeviceTypesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListDeviceTypesResponse), source.(*ListDeviceTypesResponse))
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) Project(source *ListDeviceTypesResponse) *ListDeviceTypesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListDeviceTypesResponse{}
	deviceTypesMask := &device_type.DeviceType_FieldMask{}
	wholeDeviceTypesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListDeviceTypesResponse_FieldTerminalPath:
			switch tp.selector {
			case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
				result.DeviceTypes = source.DeviceTypes
				wholeDeviceTypesAccepted = true
			case ListDeviceTypesResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListDeviceTypesResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			case ListDeviceTypesResponse_FieldPathSelectorCurrentOffset:
				result.CurrentOffset = source.CurrentOffset
			case ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount:
				result.TotalResultsCount = source.TotalResultsCount
			}
		case *ListDeviceTypesResponse_FieldSubPath:
			switch tp.selector {
			case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
				deviceTypesMask.AppendPath(tp.subPath.(device_type.DeviceType_FieldPath))
			}
		}
	}
	if wholeDeviceTypesAccepted == false && len(deviceTypesMask.Paths) > 0 {
		for _, sourceItem := range source.GetDeviceTypes() {
			result.DeviceTypes = append(result.DeviceTypes, deviceTypesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListDeviceTypesResponse))
}

func (fieldMask *ListDeviceTypesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchDeviceTypeRequest_FieldMask struct {
	Paths []WatchDeviceTypeRequest_FieldPath
}

func FullWatchDeviceTypeRequest_FieldMask() *WatchDeviceTypeRequest_FieldMask {
	res := &WatchDeviceTypeRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchDeviceTypeRequest_FieldTerminalPath{selector: WatchDeviceTypeRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchDeviceTypeRequest_FieldTerminalPath{selector: WatchDeviceTypeRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchDeviceTypeRequest_FieldTerminalPath{selector: WatchDeviceTypeRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchDeviceTypeRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchDeviceTypeRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchDeviceTypeRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchDeviceTypeRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) Subtract(other *WatchDeviceTypeRequest_FieldMask) *WatchDeviceTypeRequest_FieldMask {
	result := &WatchDeviceTypeRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchDeviceTypeRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchDeviceTypeRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchDeviceTypeRequest_FieldMask) FilterInputFields() *WatchDeviceTypeRequest_FieldMask {
	result := &WatchDeviceTypeRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchDeviceTypeRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchDeviceTypeRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchDeviceTypeRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchDeviceTypeRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchDeviceTypeRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) AppendPath(path WatchDeviceTypeRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchDeviceTypeRequest_FieldPath))
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) GetPaths() []WatchDeviceTypeRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchDeviceTypeRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) Set(target, source *WatchDeviceTypeRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchDeviceTypeRequest), source.(*WatchDeviceTypeRequest))
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) Project(source *WatchDeviceTypeRequest) *WatchDeviceTypeRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchDeviceTypeRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchDeviceTypeRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchDeviceTypeRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchDeviceTypeRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchDeviceTypeRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchDeviceTypeRequest))
}

func (fieldMask *WatchDeviceTypeRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchDeviceTypeResponse_FieldMask struct {
	Paths []WatchDeviceTypeResponse_FieldPath
}

func FullWatchDeviceTypeResponse_FieldMask() *WatchDeviceTypeResponse_FieldMask {
	res := &WatchDeviceTypeResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchDeviceTypeResponse_FieldTerminalPath{selector: WatchDeviceTypeResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchDeviceTypeResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchDeviceTypeResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchDeviceTypeResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchDeviceTypeResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) Subtract(other *WatchDeviceTypeResponse_FieldMask) *WatchDeviceTypeResponse_FieldMask {
	result := &WatchDeviceTypeResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchDeviceTypeResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchDeviceTypeResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchDeviceTypeResponse_FieldMask) FilterInputFields() *WatchDeviceTypeResponse_FieldMask {
	result := &WatchDeviceTypeResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchDeviceTypeResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchDeviceTypeResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchDeviceTypeResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchDeviceTypeResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchDeviceTypeResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) AppendPath(path WatchDeviceTypeResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchDeviceTypeResponse_FieldPath))
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) GetPaths() []WatchDeviceTypeResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchDeviceTypeResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) Set(target, source *WatchDeviceTypeResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchDeviceTypeResponse), source.(*WatchDeviceTypeResponse))
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) Project(source *WatchDeviceTypeResponse) *WatchDeviceTypeResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchDeviceTypeResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchDeviceTypeResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchDeviceTypeResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchDeviceTypeResponse))
}

func (fieldMask *WatchDeviceTypeResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchDeviceTypesRequest_FieldMask struct {
	Paths []WatchDeviceTypesRequest_FieldPath
}

func FullWatchDeviceTypesRequest_FieldMask() *WatchDeviceTypesRequest_FieldMask {
	res := &WatchDeviceTypesRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchDeviceTypesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchDeviceTypesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchDeviceTypesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchDeviceTypesRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) Subtract(other *WatchDeviceTypesRequest_FieldMask) *WatchDeviceTypesRequest_FieldMask {
	result := &WatchDeviceTypesRequest_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchDeviceTypesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchDeviceTypesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchDeviceTypesRequest_FieldMask) FilterInputFields() *WatchDeviceTypesRequest_FieldMask {
	result := &WatchDeviceTypesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchDeviceTypesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchDeviceTypesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchDeviceTypesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchDeviceTypesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchDeviceTypesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) AppendPath(path WatchDeviceTypesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchDeviceTypesRequest_FieldPath))
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) GetPaths() []WatchDeviceTypesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchDeviceTypesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) Set(target, source *WatchDeviceTypesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchDeviceTypesRequest), source.(*WatchDeviceTypesRequest))
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) Project(source *WatchDeviceTypesRequest) *WatchDeviceTypesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchDeviceTypesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchDeviceTypesRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchDeviceTypesRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchDeviceTypesRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchDeviceTypesRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchDeviceTypesRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchDeviceTypesRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchDeviceTypesRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchDeviceTypesRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchDeviceTypesRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchDeviceTypesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchDeviceTypesRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchDeviceTypesRequest))
}

func (fieldMask *WatchDeviceTypesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchDeviceTypesResponse_FieldMask struct {
	Paths []WatchDeviceTypesResponse_FieldPath
}

func FullWatchDeviceTypesResponse_FieldMask() *WatchDeviceTypesResponse_FieldMask {
	res := &WatchDeviceTypesResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges})
	res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchDeviceTypesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchDeviceTypesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchDeviceTypesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchDeviceTypesResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) Subtract(other *WatchDeviceTypesResponse_FieldMask) *WatchDeviceTypesResponse_FieldMask {
	result := &WatchDeviceTypesResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchDeviceTypesResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange: &WatchDeviceTypesResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchDeviceTypesResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange: &WatchDeviceTypesResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchDeviceTypesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchDeviceTypesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchDeviceTypesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange] = FullWatchDeviceTypesResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchDeviceTypesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchDeviceTypesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchDeviceTypesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchDeviceTypesResponse_FieldMask) FilterInputFields() *WatchDeviceTypesResponse_FieldMask {
	result := &WatchDeviceTypesResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchDeviceTypesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchDeviceTypesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchDeviceTypesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchDeviceTypesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchDeviceTypesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) AppendPath(path WatchDeviceTypesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchDeviceTypesResponse_FieldPath))
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) GetPaths() []WatchDeviceTypesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchDeviceTypesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) Set(target, source *WatchDeviceTypesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchDeviceTypesResponse), source.(*WatchDeviceTypesResponse))
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) Project(source *WatchDeviceTypesResponse) *WatchDeviceTypesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchDeviceTypesResponse{}
	pageTokenChangeMask := &WatchDeviceTypesResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchDeviceTypesResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges:
				result.DeviceTypeChanges = source.DeviceTypeChanges
			case WatchDeviceTypesResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchDeviceTypesResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchDeviceTypesResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchDeviceTypesResponse_FieldSubPath:
			switch tp.selector {
			case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchDeviceTypesResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchDeviceTypesResponse))
}

func (fieldMask *WatchDeviceTypesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchDeviceTypesResponse_PageTokenChange_FieldMask struct {
	Paths []WatchDeviceTypesResponsePageTokenChange_FieldPath
}

func FullWatchDeviceTypesResponse_PageTokenChange_FieldMask() *WatchDeviceTypesResponse_PageTokenChange_FieldMask {
	res := &WatchDeviceTypesResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath{selector: WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath{selector: WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchDeviceTypesResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchDeviceTypesResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) Subtract(other *WatchDeviceTypesResponse_PageTokenChange_FieldMask) *WatchDeviceTypesResponse_PageTokenChange_FieldMask {
	result := &WatchDeviceTypesResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchDeviceTypesResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchDeviceTypesResponse_PageTokenChange_FieldMask {
	result := &WatchDeviceTypesResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchDeviceTypesResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchDeviceTypesResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchDeviceTypesResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchDeviceTypesResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) AppendPath(path WatchDeviceTypesResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchDeviceTypesResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) GetPaths() []WatchDeviceTypesResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchDeviceTypesResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) Set(target, source *WatchDeviceTypesResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchDeviceTypesResponse_PageTokenChange), source.(*WatchDeviceTypesResponse_PageTokenChange))
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) Project(source *WatchDeviceTypesResponse_PageTokenChange) *WatchDeviceTypesResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchDeviceTypesResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchDeviceTypesResponse_PageTokenChange))
}

func (fieldMask *WatchDeviceTypesResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateDeviceTypeRequest_FieldMask struct {
	Paths []CreateDeviceTypeRequest_FieldPath
}

func FullCreateDeviceTypeRequest_FieldMask() *CreateDeviceTypeRequest_FieldMask {
	res := &CreateDeviceTypeRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateDeviceTypeRequest_FieldTerminalPath{selector: CreateDeviceTypeRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateDeviceTypeRequest_FieldTerminalPath{selector: CreateDeviceTypeRequest_FieldPathSelectorDeviceType})
	return res
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateDeviceTypeRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateDeviceTypeRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateDeviceTypeRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateDeviceTypeRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) Subtract(other *CreateDeviceTypeRequest_FieldMask) *CreateDeviceTypeRequest_FieldMask {
	result := &CreateDeviceTypeRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateDeviceTypeRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateDeviceTypeRequest_FieldPathSelectorDeviceType: &device_type.DeviceType_FieldMask{},
	}
	mySubMasks := map[CreateDeviceTypeRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateDeviceTypeRequest_FieldPathSelectorDeviceType: &device_type.DeviceType_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateDeviceTypeRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateDeviceTypeRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateDeviceTypeRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
						mySubMasks[CreateDeviceTypeRequest_FieldPathSelectorDeviceType] = device_type.FullDeviceType_FieldMask()
					}
				} else if tp, ok := path.(*CreateDeviceTypeRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateDeviceTypeRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateDeviceTypeRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateDeviceTypeRequest_FieldMask) FilterInputFields() *CreateDeviceTypeRequest_FieldMask {
	result := &CreateDeviceTypeRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
			if _, ok := path.(*CreateDeviceTypeRequest_FieldTerminalPath); ok {
				for _, subpath := range device_type.FullDeviceType_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateDeviceTypeRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateDeviceTypeRequest_FieldSubPath); ok {
				selectedMask := &device_type.DeviceType_FieldMask{
					Paths: []device_type.DeviceType_FieldPath{sub.subPath.(device_type.DeviceType_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateDeviceTypeRequest_FieldSubPath{selector: CreateDeviceTypeRequest_FieldPathSelectorDeviceType, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateDeviceTypeRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateDeviceTypeRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateDeviceTypeRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateDeviceTypeRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateDeviceTypeRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) AppendPath(path CreateDeviceTypeRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateDeviceTypeRequest_FieldPath))
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) GetPaths() []CreateDeviceTypeRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateDeviceTypeRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) Set(target, source *CreateDeviceTypeRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateDeviceTypeRequest), source.(*CreateDeviceTypeRequest))
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) Project(source *CreateDeviceTypeRequest) *CreateDeviceTypeRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateDeviceTypeRequest{}
	deviceTypeMask := &device_type.DeviceType_FieldMask{}
	wholeDeviceTypeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateDeviceTypeRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateDeviceTypeRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
				result.DeviceType = source.DeviceType
				wholeDeviceTypeAccepted = true
			}
		case *CreateDeviceTypeRequest_FieldSubPath:
			switch tp.selector {
			case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
				deviceTypeMask.AppendPath(tp.subPath.(device_type.DeviceType_FieldPath))
			}
		}
	}
	if wholeDeviceTypeAccepted == false && len(deviceTypeMask.Paths) > 0 {
		result.DeviceType = deviceTypeMask.Project(source.GetDeviceType())
	}
	return result
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateDeviceTypeRequest))
}

func (fieldMask *CreateDeviceTypeRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateDeviceTypeRequest_FieldMask struct {
	Paths []UpdateDeviceTypeRequest_FieldPath
}

func FullUpdateDeviceTypeRequest_FieldMask() *UpdateDeviceTypeRequest_FieldMask {
	res := &UpdateDeviceTypeRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateDeviceTypeRequest_FieldTerminalPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorDeviceType})
	res.Paths = append(res.Paths, &UpdateDeviceTypeRequest_FieldTerminalPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateDeviceTypeRequest_FieldTerminalPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorCas})
	res.Paths = append(res.Paths, &UpdateDeviceTypeRequest_FieldTerminalPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing})
	return res
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateDeviceTypeRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateDeviceTypeRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateDeviceTypeRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateDeviceTypeRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) Subtract(other *UpdateDeviceTypeRequest_FieldMask) *UpdateDeviceTypeRequest_FieldMask {
	result := &UpdateDeviceTypeRequest_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[UpdateDeviceTypeRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateDeviceTypeRequest_FieldPathSelectorDeviceType: &device_type.DeviceType_FieldMask{},
		UpdateDeviceTypeRequest_FieldPathSelectorCas:        &UpdateDeviceTypeRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateDeviceTypeRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateDeviceTypeRequest_FieldPathSelectorDeviceType: &device_type.DeviceType_FieldMask{},
		UpdateDeviceTypeRequest_FieldPathSelectorCas:        &UpdateDeviceTypeRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateDeviceTypeRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateDeviceTypeRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateDeviceTypeRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
						mySubMasks[UpdateDeviceTypeRequest_FieldPathSelectorDeviceType] = device_type.FullDeviceType_FieldMask()
					case UpdateDeviceTypeRequest_FieldPathSelectorCas:
						mySubMasks[UpdateDeviceTypeRequest_FieldPathSelectorCas] = FullUpdateDeviceTypeRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateDeviceTypeRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateDeviceTypeRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateDeviceTypeRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateDeviceTypeRequest_FieldMask) FilterInputFields() *UpdateDeviceTypeRequest_FieldMask {
	result := &UpdateDeviceTypeRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
			if _, ok := path.(*UpdateDeviceTypeRequest_FieldTerminalPath); ok {
				for _, subpath := range device_type.FullDeviceType_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateDeviceTypeRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateDeviceTypeRequest_FieldSubPath); ok {
				selectedMask := &device_type.DeviceType_FieldMask{
					Paths: []device_type.DeviceType_FieldPath{sub.subPath.(device_type.DeviceType_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateDeviceTypeRequest_FieldSubPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorDeviceType, subPath: allowedPath})
				}
			}
		case UpdateDeviceTypeRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateDeviceTypeRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateDeviceTypeRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateDeviceTypeRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateDeviceTypeRequest_FieldSubPath); ok {
				selectedMask := &UpdateDeviceTypeRequest_CAS_FieldMask{
					Paths: []UpdateDeviceTypeRequestCAS_FieldPath{sub.subPath.(UpdateDeviceTypeRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateDeviceTypeRequest_FieldSubPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateDeviceTypeRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateDeviceTypeRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateDeviceTypeRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateDeviceTypeRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateDeviceTypeRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) AppendPath(path UpdateDeviceTypeRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateDeviceTypeRequest_FieldPath))
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) GetPaths() []UpdateDeviceTypeRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateDeviceTypeRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) Set(target, source *UpdateDeviceTypeRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateDeviceTypeRequest), source.(*UpdateDeviceTypeRequest))
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) Project(source *UpdateDeviceTypeRequest) *UpdateDeviceTypeRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateDeviceTypeRequest{}
	deviceTypeMask := &device_type.DeviceType_FieldMask{}
	wholeDeviceTypeAccepted := false
	casMask := &UpdateDeviceTypeRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateDeviceTypeRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
				result.DeviceType = source.DeviceType
				wholeDeviceTypeAccepted = true
			case UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateDeviceTypeRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			case UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing:
				result.AllowMissing = source.AllowMissing
			}
		case *UpdateDeviceTypeRequest_FieldSubPath:
			switch tp.selector {
			case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
				deviceTypeMask.AppendPath(tp.subPath.(device_type.DeviceType_FieldPath))
			case UpdateDeviceTypeRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateDeviceTypeRequestCAS_FieldPath))
			}
		}
	}
	if wholeDeviceTypeAccepted == false && len(deviceTypeMask.Paths) > 0 {
		result.DeviceType = deviceTypeMask.Project(source.GetDeviceType())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateDeviceTypeRequest))
}

func (fieldMask *UpdateDeviceTypeRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateDeviceTypeRequest_CAS_FieldMask struct {
	Paths []UpdateDeviceTypeRequestCAS_FieldPath
}

func FullUpdateDeviceTypeRequest_CAS_FieldMask() *UpdateDeviceTypeRequest_CAS_FieldMask {
	res := &UpdateDeviceTypeRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateDeviceTypeRequestCAS_FieldTerminalPath{selector: UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateDeviceTypeRequestCAS_FieldTerminalPath{selector: UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateDeviceTypeRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateDeviceTypeRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateDeviceTypeRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) Subtract(other *UpdateDeviceTypeRequest_CAS_FieldMask) *UpdateDeviceTypeRequest_CAS_FieldMask {
	result := &UpdateDeviceTypeRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateDeviceTypeRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState: &device_type.DeviceType_FieldMask{},
	}
	mySubMasks := map[UpdateDeviceTypeRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState: &device_type.DeviceType_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateDeviceTypeRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateDeviceTypeRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateDeviceTypeRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState] = device_type.FullDeviceType_FieldMask()
					}
				} else if tp, ok := path.(*UpdateDeviceTypeRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateDeviceTypeRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateDeviceTypeRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) FilterInputFields() *UpdateDeviceTypeRequest_CAS_FieldMask {
	result := &UpdateDeviceTypeRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateDeviceTypeRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range device_type.FullDeviceType_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateDeviceTypeRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateDeviceTypeRequestCAS_FieldSubPath); ok {
				selectedMask := &device_type.DeviceType_FieldMask{
					Paths: []device_type.DeviceType_FieldPath{sub.subPath.(device_type.DeviceType_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateDeviceTypeRequestCAS_FieldSubPath{selector: UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateDeviceTypeRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateDeviceTypeRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateDeviceTypeRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateDeviceTypeRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) AppendPath(path UpdateDeviceTypeRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateDeviceTypeRequestCAS_FieldPath))
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) GetPaths() []UpdateDeviceTypeRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateDeviceTypeRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) Set(target, source *UpdateDeviceTypeRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateDeviceTypeRequest_CAS), source.(*UpdateDeviceTypeRequest_CAS))
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) Project(source *UpdateDeviceTypeRequest_CAS) *UpdateDeviceTypeRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateDeviceTypeRequest_CAS{}
	conditionalStateMask := &device_type.DeviceType_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateDeviceTypeRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateDeviceTypeRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(device_type.DeviceType_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateDeviceTypeRequest_CAS))
}

func (fieldMask *UpdateDeviceTypeRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteDeviceTypeRequest_FieldMask struct {
	Paths []DeleteDeviceTypeRequest_FieldPath
}

func FullDeleteDeviceTypeRequest_FieldMask() *DeleteDeviceTypeRequest_FieldMask {
	res := &DeleteDeviceTypeRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteDeviceTypeRequest_FieldTerminalPath{selector: DeleteDeviceTypeRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteDeviceTypeRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteDeviceTypeRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteDeviceTypeRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteDeviceTypeRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) Subtract(other *DeleteDeviceTypeRequest_FieldMask) *DeleteDeviceTypeRequest_FieldMask {
	result := &DeleteDeviceTypeRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteDeviceTypeRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteDeviceTypeRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteDeviceTypeRequest_FieldMask) FilterInputFields() *DeleteDeviceTypeRequest_FieldMask {
	result := &DeleteDeviceTypeRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteDeviceTypeRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteDeviceTypeRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteDeviceTypeRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteDeviceTypeRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteDeviceTypeRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) AppendPath(path DeleteDeviceTypeRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteDeviceTypeRequest_FieldPath))
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) GetPaths() []DeleteDeviceTypeRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteDeviceTypeRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) Set(target, source *DeleteDeviceTypeRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteDeviceTypeRequest), source.(*DeleteDeviceTypeRequest))
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) Project(source *DeleteDeviceTypeRequest) *DeleteDeviceTypeRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteDeviceTypeRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteDeviceTypeRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteDeviceTypeRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteDeviceTypeRequest))
}

func (fieldMask *DeleteDeviceTypeRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
