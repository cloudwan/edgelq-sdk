// Code generated by protoc-gen-goten-go
// File: edgelq/devices/proto/v1alpha2/device_type_service.proto
// DO NOT EDIT!!!

package device_type_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	device_type "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device_type"
	view "github.com/cloudwan/goten-sdk/types/view"
	watch_type "github.com/cloudwan/goten-sdk/types/watch_type"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &device_type.DeviceType{}
	_ = &emptypb.Empty{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message of the GetDeviceType method.
type GetDeviceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.devices.v1alpha2.DeviceType
	Name *device_type.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_type.DeviceType_FieldMask `protobuf:"bytes,3,opt,customtype=DeviceType_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetDeviceTypeRequest) Reset() {
	*m = GetDeviceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetDeviceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetDeviceTypeRequest) ProtoMessage() {}

func (m *GetDeviceTypeRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetDeviceTypeRequest) GotenMessage() {}

// Deprecated, Use GetDeviceTypeRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceTypeRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetDeviceTypeRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetDeviceTypeRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetDeviceTypeRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetDeviceTypeRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetDeviceTypeRequest) GetName() *device_type.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetDeviceTypeRequest) GetFieldMask() *device_type.DeviceType_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetDeviceTypeRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetDeviceTypeRequest) SetName(fv *device_type.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetDeviceTypeRequest"))
	}
	m.Name = fv
}

func (m *GetDeviceTypeRequest) SetFieldMask(fv *device_type.DeviceType_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetDeviceTypeRequest"))
	}
	m.FieldMask = fv
}

func (m *GetDeviceTypeRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetDeviceTypeRequest"))
	}
	m.View = fv
}

// A request message of the BatchGetDeviceTypes method.
type BatchGetDeviceTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of DeviceTypes
	Names []*device_type.Name `protobuf:"bytes,2,rep,customtype=Name,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_type.DeviceType_FieldMask `protobuf:"bytes,3,opt,customtype=DeviceType_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetDeviceTypesRequest) Reset() {
	*m = BatchGetDeviceTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetDeviceTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetDeviceTypesRequest) ProtoMessage() {}

func (m *BatchGetDeviceTypesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetDeviceTypesRequest) GotenMessage() {}

// Deprecated, Use BatchGetDeviceTypesRequest.ProtoReflect.Descriptor instead.
func (*BatchGetDeviceTypesRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetDeviceTypesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetDeviceTypesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetDeviceTypesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetDeviceTypesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetDeviceTypesRequest) GetNames() []*device_type.Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetDeviceTypesRequest) GetFieldMask() *device_type.DeviceType_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetDeviceTypesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetDeviceTypesRequest) SetNames(fv []*device_type.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetDeviceTypesRequest"))
	}
	m.Names = fv
}

func (m *BatchGetDeviceTypesRequest) SetFieldMask(fv *device_type.DeviceType_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetDeviceTypesRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetDeviceTypesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetDeviceTypesRequest"))
	}
	m.View = fv
}

// A response message of the BatchGetDeviceTypes method.
type BatchGetDeviceTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found DeviceTypes
	DeviceTypes []*device_type.DeviceType `protobuf:"bytes,1,rep,name=device_types,json=deviceTypes,proto3" json:"device_types,omitempty" firestore:"deviceTypes"`
	// list of not found DeviceTypes
	Missing []*device_type.Name `protobuf:"bytes,2,rep,customtype=Name,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetDeviceTypesResponse) Reset() {
	*m = BatchGetDeviceTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetDeviceTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetDeviceTypesResponse) ProtoMessage() {}

func (m *BatchGetDeviceTypesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetDeviceTypesResponse) GotenMessage() {}

// Deprecated, Use BatchGetDeviceTypesResponse.ProtoReflect.Descriptor instead.
func (*BatchGetDeviceTypesResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetDeviceTypesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetDeviceTypesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetDeviceTypesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetDeviceTypesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetDeviceTypesResponse) GetDeviceTypes() []*device_type.DeviceType {
	if m != nil {
		return m.DeviceTypes
	}
	return nil
}

func (m *BatchGetDeviceTypesResponse) GetMissing() []*device_type.Name {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetDeviceTypesResponse) SetDeviceTypes(fv []*device_type.DeviceType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceTypes", "BatchGetDeviceTypesResponse"))
	}
	m.DeviceTypes = fv
}

func (m *BatchGetDeviceTypesResponse) SetMissing(fv []*device_type.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetDeviceTypesResponse"))
	}
	m.Missing = fv
}

// A request message of the ListDeviceTypes method.
type ListDeviceTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Requested page size. Server may return fewer DeviceTypes than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// ListDeviceTypesResponse.next_page_token.
	PageToken *device_type.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *device_type.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *device_type.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_type.DeviceType_FieldMask `protobuf:"bytes,6,opt,customtype=DeviceType_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
	// Indicates if list response should contain total count and offset (fields
	// current_offset and total_results_count).
	IncludePagingInfo bool `protobuf:"varint,8,opt,name=include_paging_info,json=includePagingInfo,proto3" json:"include_paging_info,omitempty" firestore:"includePagingInfo"`
}

func (m *ListDeviceTypesRequest) Reset() {
	*m = ListDeviceTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListDeviceTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListDeviceTypesRequest) ProtoMessage() {}

func (m *ListDeviceTypesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListDeviceTypesRequest) GotenMessage() {}

// Deprecated, Use ListDeviceTypesRequest.ProtoReflect.Descriptor instead.
func (*ListDeviceTypesRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListDeviceTypesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListDeviceTypesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListDeviceTypesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListDeviceTypesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListDeviceTypesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListDeviceTypesRequest) GetPageToken() *device_type.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListDeviceTypesRequest) GetOrderBy() *device_type.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListDeviceTypesRequest) GetFilter() *device_type.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListDeviceTypesRequest) GetFieldMask() *device_type.DeviceType_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListDeviceTypesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListDeviceTypesRequest) GetIncludePagingInfo() bool {
	if m != nil {
		return m.IncludePagingInfo
	}
	return false
}

func (m *ListDeviceTypesRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListDeviceTypesRequest"))
	}
	m.PageSize = fv
}

func (m *ListDeviceTypesRequest) SetPageToken(fv *device_type.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListDeviceTypesRequest"))
	}
	m.PageToken = fv
}

func (m *ListDeviceTypesRequest) SetOrderBy(fv *device_type.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListDeviceTypesRequest"))
	}
	m.OrderBy = fv
}

func (m *ListDeviceTypesRequest) SetFilter(fv *device_type.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListDeviceTypesRequest"))
	}
	m.Filter = fv
}

func (m *ListDeviceTypesRequest) SetFieldMask(fv *device_type.DeviceType_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListDeviceTypesRequest"))
	}
	m.FieldMask = fv
}

func (m *ListDeviceTypesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListDeviceTypesRequest"))
	}
	m.View = fv
}

func (m *ListDeviceTypesRequest) SetIncludePagingInfo(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncludePagingInfo", "ListDeviceTypesRequest"))
	}
	m.IncludePagingInfo = fv
}

// A response message of the ListDeviceTypes method.
type ListDeviceTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of DeviceTypes
	DeviceTypes []*device_type.DeviceType `protobuf:"bytes,1,rep,name=device_types,json=deviceTypes,proto3" json:"device_types,omitempty" firestore:"deviceTypes"`
	// A token to retrieve previous page of results.
	//
	// Pass this value in the ListDeviceTypesRequest.page_token.
	PrevPageToken *device_type.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results.
	//
	// Pass this value in the ListDeviceTypesRequest.page_token.
	NextPageToken *device_type.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
	// Current offset from the first page or 0 if no page tokens were given,
	// paging info was not requested or there was an error while trying to get
	// it). Page index can be computed from offset and limit provided in a
	// request.
	CurrentOffset int32 `protobuf:"varint,5,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty" firestore:"currentOffset"`
	// Number of total DeviceTypes across all pages or 0, if there are no items,
	// paging info was not requested or there was an error while trying to get it.
	TotalResultsCount int32 `protobuf:"varint,6,opt,name=total_results_count,json=totalResultsCount,proto3" json:"total_results_count,omitempty" firestore:"totalResultsCount"`
}

func (m *ListDeviceTypesResponse) Reset() {
	*m = ListDeviceTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListDeviceTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListDeviceTypesResponse) ProtoMessage() {}

func (m *ListDeviceTypesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListDeviceTypesResponse) GotenMessage() {}

// Deprecated, Use ListDeviceTypesResponse.ProtoReflect.Descriptor instead.
func (*ListDeviceTypesResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListDeviceTypesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListDeviceTypesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListDeviceTypesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListDeviceTypesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListDeviceTypesResponse) GetDeviceTypes() []*device_type.DeviceType {
	if m != nil {
		return m.DeviceTypes
	}
	return nil
}

func (m *ListDeviceTypesResponse) GetPrevPageToken() *device_type.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListDeviceTypesResponse) GetNextPageToken() *device_type.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListDeviceTypesResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return int32(0)
}

func (m *ListDeviceTypesResponse) GetTotalResultsCount() int32 {
	if m != nil {
		return m.TotalResultsCount
	}
	return int32(0)
}

func (m *ListDeviceTypesResponse) SetDeviceTypes(fv []*device_type.DeviceType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceTypes", "ListDeviceTypesResponse"))
	}
	m.DeviceTypes = fv
}

func (m *ListDeviceTypesResponse) SetPrevPageToken(fv *device_type.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListDeviceTypesResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListDeviceTypesResponse) SetNextPageToken(fv *device_type.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListDeviceTypesResponse"))
	}
	m.NextPageToken = fv
}

func (m *ListDeviceTypesResponse) SetCurrentOffset(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentOffset", "ListDeviceTypesResponse"))
	}
	m.CurrentOffset = fv
}

func (m *ListDeviceTypesResponse) SetTotalResultsCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalResultsCount", "ListDeviceTypesResponse"))
	}
	m.TotalResultsCount = fv
}

// A request message of the WatchDeviceType method.
type WatchDeviceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.devices.v1alpha2.DeviceType
	Name *device_type.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *device_type.DeviceType_FieldMask `protobuf:"bytes,2,opt,customtype=DeviceType_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchDeviceTypeRequest) Reset() {
	*m = WatchDeviceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceTypeRequest) ProtoMessage() {}

func (m *WatchDeviceTypeRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceTypeRequest) GotenMessage() {}

// Deprecated, Use WatchDeviceTypeRequest.ProtoReflect.Descriptor instead.
func (*WatchDeviceTypeRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchDeviceTypeRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceTypeRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceTypeRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceTypeRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceTypeRequest) GetName() *device_type.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchDeviceTypeRequest) GetFieldMask() *device_type.DeviceType_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchDeviceTypeRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchDeviceTypeRequest) SetName(fv *device_type.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchDeviceTypeRequest"))
	}
	m.Name = fv
}

func (m *WatchDeviceTypeRequest) SetFieldMask(fv *device_type.DeviceType_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchDeviceTypeRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchDeviceTypeRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchDeviceTypeRequest"))
	}
	m.View = fv
}

// A response message of the WatchDeviceType method.
type WatchDeviceTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *device_type.DeviceTypeChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchDeviceTypeResponse) Reset() {
	*m = WatchDeviceTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceTypeResponse) ProtoMessage() {}

func (m *WatchDeviceTypeResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceTypeResponse) GotenMessage() {}

// Deprecated, Use WatchDeviceTypeResponse.ProtoReflect.Descriptor instead.
func (*WatchDeviceTypeResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchDeviceTypeResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceTypeResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceTypeResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceTypeResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceTypeResponse) GetChange() *device_type.DeviceTypeChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchDeviceTypeResponse) SetChange(fv *device_type.DeviceTypeChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchDeviceTypeResponse"))
	}
	m.Change = fv
}

// A request message of the WatchDeviceTypes method.
type WatchDeviceTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.types.WatchType" json:"type,omitempty" firestore:"type"`
	// Requested page size. Server may return fewer DeviceTypes than requested.
	// If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *device_type.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *device_type.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Point in the time from which we want to start getting updates. This field
	// can be populated only for stateless watch type and if resume token is not
	// known yet. If specified, initial snapshot will NOT be provided. It is
	// assumed client can obtain it using separate means. Watch responses will
	// contain resume tokens which should be used to resume broken connection.
	StartingTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty" firestore:"startingTime"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *device_type.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to DeviceType that don't
	// affect any of masked fields won't be sent back.
	FieldMask *device_type.DeviceType_FieldMask `protobuf:"bytes,6,opt,customtype=DeviceType_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// DeviceType that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchDeviceTypesRequest) Reset() {
	*m = WatchDeviceTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceTypesRequest) ProtoMessage() {}

func (m *WatchDeviceTypesRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceTypesRequest) GotenMessage() {}

// Deprecated, Use WatchDeviceTypesRequest.ProtoReflect.Descriptor instead.
func (*WatchDeviceTypesRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchDeviceTypesRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceTypesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceTypesRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceTypesRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceTypesRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchDeviceTypesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchDeviceTypesRequest) GetPageToken() *device_type.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchDeviceTypesRequest) GetOrderBy() *device_type.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchDeviceTypesRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchDeviceTypesRequest) GetStartingTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartingTime
	}
	return nil
}

func (m *WatchDeviceTypesRequest) GetFilter() *device_type.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchDeviceTypesRequest) GetFieldMask() *device_type.DeviceType_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchDeviceTypesRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchDeviceTypesRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchDeviceTypesRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchDeviceTypesRequest"))
	}
	m.Type = fv
}

func (m *WatchDeviceTypesRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchDeviceTypesRequest"))
	}
	m.PageSize = fv
}

func (m *WatchDeviceTypesRequest) SetPageToken(fv *device_type.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchDeviceTypesRequest"))
	}
	m.PageToken = fv
}

func (m *WatchDeviceTypesRequest) SetOrderBy(fv *device_type.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchDeviceTypesRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchDeviceTypesRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchDeviceTypesRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchDeviceTypesRequest) SetStartingTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartingTime", "WatchDeviceTypesRequest"))
	}
	m.StartingTime = fv
}

func (m *WatchDeviceTypesRequest) SetFilter(fv *device_type.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchDeviceTypesRequest"))
	}
	m.Filter = fv
}

func (m *WatchDeviceTypesRequest) SetFieldMask(fv *device_type.DeviceType_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchDeviceTypesRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchDeviceTypesRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchDeviceTypesRequest"))
	}
	m.View = fv
}

func (m *WatchDeviceTypesRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchDeviceTypesRequest"))
	}
	m.MaxChunkSize = fv
}

// A response message of the WatchDeviceTypes method.
type WatchDeviceTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of DeviceTypes
	DeviceTypeChanges []*device_type.DeviceTypeChange `protobuf:"bytes,2,rep,name=device_type_changes,json=deviceTypeChanges,proto3" json:"device_type_changes,omitempty" firestore:"deviceTypeChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All DeviceTypes will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchDeviceTypesResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (DeviceTypes will contains changes
	// of type Current only). Any resume tokens should be discarded as well. This
	// field should be checked only for stateless watch. In stateful those kind of
	// errors are handled by the server side. Will never be sent along with
	// is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchDeviceTypesResponse) Reset() {
	*m = WatchDeviceTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceTypesResponse) ProtoMessage() {}

func (m *WatchDeviceTypesResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceTypesResponse) GotenMessage() {}

// Deprecated, Use WatchDeviceTypesResponse.ProtoReflect.Descriptor instead.
func (*WatchDeviceTypesResponse) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchDeviceTypesResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceTypesResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceTypesResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceTypesResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceTypesResponse) GetDeviceTypeChanges() []*device_type.DeviceTypeChange {
	if m != nil {
		return m.DeviceTypeChanges
	}
	return nil
}

func (m *WatchDeviceTypesResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchDeviceTypesResponse) GetPageTokenChange() *WatchDeviceTypesResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchDeviceTypesResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchDeviceTypesResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchDeviceTypesResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchDeviceTypesResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchDeviceTypesResponse) SetDeviceTypeChanges(fv []*device_type.DeviceTypeChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceTypeChanges", "WatchDeviceTypesResponse"))
	}
	m.DeviceTypeChanges = fv
}

func (m *WatchDeviceTypesResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchDeviceTypesResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchDeviceTypesResponse) SetPageTokenChange(fv *WatchDeviceTypesResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchDeviceTypesResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchDeviceTypesResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchDeviceTypesResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchDeviceTypesResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchDeviceTypesResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchDeviceTypesResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchDeviceTypesResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchDeviceTypesResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchDeviceTypesResponse"))
	}
	m.IsHardReset = fv
}

// A request message of the CreateDeviceType method.
type CreateDeviceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// DeviceType resource body
	DeviceType *device_type.DeviceType `protobuf:"bytes,2,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty" firestore:"deviceType"`
	// Optional masking applied to response object to reduce message response
	// size.
	ResponseMask *CreateDeviceTypeRequest_ResponseMask `protobuf:"bytes,3,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty" firestore:"responseMask"`
}

func (m *CreateDeviceTypeRequest) Reset() {
	*m = CreateDeviceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateDeviceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateDeviceTypeRequest) ProtoMessage() {}

func (m *CreateDeviceTypeRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateDeviceTypeRequest) GotenMessage() {}

// Deprecated, Use CreateDeviceTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceTypeRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreateDeviceTypeRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateDeviceTypeRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateDeviceTypeRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateDeviceTypeRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreateDeviceTypeRequest) GetDeviceType() *device_type.DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return nil
}

func (m *CreateDeviceTypeRequest) GetResponseMask() *CreateDeviceTypeRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *CreateDeviceTypeRequest) SetDeviceType(fv *device_type.DeviceType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceType", "CreateDeviceTypeRequest"))
	}
	m.DeviceType = fv
}

func (m *CreateDeviceTypeRequest) SetResponseMask(fv *CreateDeviceTypeRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "CreateDeviceTypeRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the UpdateDeviceType method.
type UpdateDeviceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// DeviceType resource body
	DeviceType *device_type.DeviceType `protobuf:"bytes,2,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty" firestore:"deviceType"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *device_type.DeviceType_FieldMask `protobuf:"bytes,3,opt,customtype=DeviceType_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateDeviceTypeRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
	// If set to true, and the resource is not found,
	// a new resource will be created.  In this situation,
	// 'field_mask' is ignored.
	//
	// https://google.aip.dev/134#create-or-update
	AllowMissing bool `protobuf:"varint,5,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty" firestore:"allowMissing"`
	// reduce message response size.
	ResponseMask *UpdateDeviceTypeRequest_ResponseMask `protobuf:"bytes,6,opt,name=response_mask,json=responseMask,proto3" json:"response_mask,omitempty" firestore:"responseMask"`
}

func (m *UpdateDeviceTypeRequest) Reset() {
	*m = UpdateDeviceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateDeviceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateDeviceTypeRequest) ProtoMessage() {}

func (m *UpdateDeviceTypeRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateDeviceTypeRequest) GotenMessage() {}

// Deprecated, Use UpdateDeviceTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceTypeRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateDeviceTypeRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateDeviceTypeRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateDeviceTypeRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateDeviceTypeRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateDeviceTypeRequest) GetDeviceType() *device_type.DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return nil
}

func (m *UpdateDeviceTypeRequest) GetUpdateMask() *device_type.DeviceType_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateDeviceTypeRequest) GetCas() *UpdateDeviceTypeRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateDeviceTypeRequest) GetAllowMissing() bool {
	if m != nil {
		return m.AllowMissing
	}
	return false
}

func (m *UpdateDeviceTypeRequest) GetResponseMask() *UpdateDeviceTypeRequest_ResponseMask {
	if m != nil {
		return m.ResponseMask
	}
	return nil
}

func (m *UpdateDeviceTypeRequest) SetDeviceType(fv *device_type.DeviceType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeviceType", "UpdateDeviceTypeRequest"))
	}
	m.DeviceType = fv
}

func (m *UpdateDeviceTypeRequest) SetUpdateMask(fv *device_type.DeviceType_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateDeviceTypeRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateDeviceTypeRequest) SetCas(fv *UpdateDeviceTypeRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateDeviceTypeRequest"))
	}
	m.Cas = fv
}

func (m *UpdateDeviceTypeRequest) SetAllowMissing(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowMissing", "UpdateDeviceTypeRequest"))
	}
	m.AllowMissing = fv
}

func (m *UpdateDeviceTypeRequest) SetResponseMask(fv *UpdateDeviceTypeRequest_ResponseMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResponseMask", "UpdateDeviceTypeRequest"))
	}
	m.ResponseMask = fv
}

// A request message of the DeleteDeviceType method.
type DeleteDeviceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ntt.devices.v1alpha2.DeviceType
	Name *device_type.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeleteDeviceTypeRequest) Reset() {
	*m = DeleteDeviceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteDeviceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteDeviceTypeRequest) ProtoMessage() {}

func (m *DeleteDeviceTypeRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteDeviceTypeRequest) GotenMessage() {}

// Deprecated, Use DeleteDeviceTypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceTypeRequest) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeleteDeviceTypeRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteDeviceTypeRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteDeviceTypeRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteDeviceTypeRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteDeviceTypeRequest) GetName() *device_type.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteDeviceTypeRequest) SetName(fv *device_type.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteDeviceTypeRequest"))
	}
	m.Name = fv
}

type WatchDeviceTypesResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *device_type.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *device_type.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchDeviceTypesResponse_PageTokenChange) Reset() {
	*m = WatchDeviceTypesResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchDeviceTypesResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchDeviceTypesResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchDeviceTypesResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchDeviceTypesResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchDeviceTypesResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchDeviceTypesResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchDeviceTypesResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchDeviceTypesResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchDeviceTypesResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchDeviceTypesResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchDeviceTypesResponse_PageTokenChange) GetPrevPageToken() *device_type.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchDeviceTypesResponse_PageTokenChange) GetNextPageToken() *device_type.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchDeviceTypesResponse_PageTokenChange) SetPrevPageToken(fv *device_type.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchDeviceTypesResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchDeviceTypesResponse_PageTokenChange) SetNextPageToken(fv *device_type.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchDeviceTypesResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// ResponseMask allows client to reduce response message size.
type CreateDeviceTypeRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*CreateDeviceTypeRequest_ResponseMask_SkipEntireResponseBody
	//	*CreateDeviceTypeRequest_ResponseMask_BodyMask
	Masking isCreateDeviceTypeRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *CreateDeviceTypeRequest_ResponseMask) Reset() {
	*m = CreateDeviceTypeRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreateDeviceTypeRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreateDeviceTypeRequest_ResponseMask) ProtoMessage() {}

func (m *CreateDeviceTypeRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreateDeviceTypeRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use CreateDeviceTypeRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*CreateDeviceTypeRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{9, 0}
}

func (m *CreateDeviceTypeRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreateDeviceTypeRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreateDeviceTypeRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreateDeviceTypeRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isCreateDeviceTypeRequest_ResponseMask_Masking interface {
	isCreateDeviceTypeRequest_ResponseMask_Masking()
}

type CreateDeviceTypeRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof" firestore:"skipEntireResponseBody"`
}
type CreateDeviceTypeRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields.
	BodyMask *device_type.DeviceType_FieldMask `protobuf:"bytes,2,opt,customtype=DeviceType_FieldMask,name=body_mask,json=bodyMask,proto3,oneof" firestore:"bodyMask"`
}

func (*CreateDeviceTypeRequest_ResponseMask_SkipEntireResponseBody) isCreateDeviceTypeRequest_ResponseMask_Masking() {
}
func (*CreateDeviceTypeRequest_ResponseMask_BodyMask) isCreateDeviceTypeRequest_ResponseMask_Masking() {
}
func (m *CreateDeviceTypeRequest_ResponseMask) GetMasking() isCreateDeviceTypeRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *CreateDeviceTypeRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*CreateDeviceTypeRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *CreateDeviceTypeRequest_ResponseMask) GetBodyMask() *device_type.DeviceType_FieldMask {
	if x, ok := m.GetMasking().(*CreateDeviceTypeRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *CreateDeviceTypeRequest_ResponseMask) SetMasking(ofv isCreateDeviceTypeRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isCreateDeviceTypeRequest_ResponseMask_Masking", "CreateDeviceTypeRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *CreateDeviceTypeRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&CreateDeviceTypeRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *CreateDeviceTypeRequest_ResponseMask) SetBodyMask(fv *device_type.DeviceType_FieldMask) {
	m.SetMasking(&CreateDeviceTypeRequest_ResponseMask_BodyMask{BodyMask: fv})
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateDeviceTypeRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *device_type.DeviceType `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *device_type.DeviceType_FieldMask `protobuf:"bytes,2,opt,customtype=DeviceType_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdateDeviceTypeRequest_CAS) Reset() {
	*m = UpdateDeviceTypeRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateDeviceTypeRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateDeviceTypeRequest_CAS) ProtoMessage() {}

func (m *UpdateDeviceTypeRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateDeviceTypeRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateDeviceTypeRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateDeviceTypeRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdateDeviceTypeRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateDeviceTypeRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateDeviceTypeRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateDeviceTypeRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateDeviceTypeRequest_CAS) GetConditionalState() *device_type.DeviceType {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateDeviceTypeRequest_CAS) GetFieldMask() *device_type.DeviceType_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateDeviceTypeRequest_CAS) SetConditionalState(fv *device_type.DeviceType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateDeviceTypeRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateDeviceTypeRequest_CAS) SetFieldMask(fv *device_type.DeviceType_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateDeviceTypeRequest_CAS"))
	}
	m.FieldMask = fv
}

// ResponseMask allows client to reduce response message size.
type UpdateDeviceTypeRequest_ResponseMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Masking:
	//	*UpdateDeviceTypeRequest_ResponseMask_SkipEntireResponseBody
	//	*UpdateDeviceTypeRequest_ResponseMask_UpdatedFieldsOnly
	//	*UpdateDeviceTypeRequest_ResponseMask_BodyMask
	Masking isUpdateDeviceTypeRequest_ResponseMask_Masking `protobuf_oneof:"masking"`
}

func (m *UpdateDeviceTypeRequest_ResponseMask) Reset() {
	*m = UpdateDeviceTypeRequest_ResponseMask{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateDeviceTypeRequest_ResponseMask) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateDeviceTypeRequest_ResponseMask) ProtoMessage() {}

func (m *UpdateDeviceTypeRequest_ResponseMask) ProtoReflect() preflect.Message {
	mi := &edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateDeviceTypeRequest_ResponseMask) GotenMessage() {}

// Deprecated, Use UpdateDeviceTypeRequest_ResponseMask.ProtoReflect.Descriptor instead.
func (*UpdateDeviceTypeRequest_ResponseMask) Descriptor() ([]byte, []int) {
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP(), []int{10, 1}
}

func (m *UpdateDeviceTypeRequest_ResponseMask) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateDeviceTypeRequest_ResponseMask) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateDeviceTypeRequest_ResponseMask) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateDeviceTypeRequest_ResponseMask) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isUpdateDeviceTypeRequest_ResponseMask_Masking interface {
	isUpdateDeviceTypeRequest_ResponseMask_Masking()
}

type UpdateDeviceTypeRequest_ResponseMask_SkipEntireResponseBody struct {
	// If this flag has value true, then response will contain just empty
	// resource without any fields populated. Field body_mask is ignored if
	// set.
	SkipEntireResponseBody bool `protobuf:"varint,1,opt,name=skip_entire_response_body,json=skipEntireResponseBody,proto3,oneof" firestore:"skipEntireResponseBody"`
}
type UpdateDeviceTypeRequest_ResponseMask_UpdatedFieldsOnly struct {
	// Include all fields that were actually updated during processing. Note
	// this may be larger than update mask if some fields were computed
	// additionally. Name is added as well.
	UpdatedFieldsOnly bool `protobuf:"varint,2,opt,name=updated_fields_only,json=updatedFieldsOnly,proto3,oneof" firestore:"updatedFieldsOnly"`
}
type UpdateDeviceTypeRequest_ResponseMask_BodyMask struct {
	// If this field is populated, then resource in response will contain only
	// specific fields. If skip_entire_response_body is true, this field is
	// ignored.
	BodyMask *device_type.DeviceType_FieldMask `protobuf:"bytes,3,opt,customtype=DeviceType_FieldMask,name=body_mask,json=bodyMask,proto3,oneof" firestore:"bodyMask"`
}

func (*UpdateDeviceTypeRequest_ResponseMask_SkipEntireResponseBody) isUpdateDeviceTypeRequest_ResponseMask_Masking() {
}
func (*UpdateDeviceTypeRequest_ResponseMask_UpdatedFieldsOnly) isUpdateDeviceTypeRequest_ResponseMask_Masking() {
}
func (*UpdateDeviceTypeRequest_ResponseMask_BodyMask) isUpdateDeviceTypeRequest_ResponseMask_Masking() {
}
func (m *UpdateDeviceTypeRequest_ResponseMask) GetMasking() isUpdateDeviceTypeRequest_ResponseMask_Masking {
	if m != nil {
		return m.Masking
	}
	return nil
}
func (m *UpdateDeviceTypeRequest_ResponseMask) GetSkipEntireResponseBody() bool {
	if x, ok := m.GetMasking().(*UpdateDeviceTypeRequest_ResponseMask_SkipEntireResponseBody); ok {
		return x.SkipEntireResponseBody
	}
	return false
}
func (m *UpdateDeviceTypeRequest_ResponseMask) GetUpdatedFieldsOnly() bool {
	if x, ok := m.GetMasking().(*UpdateDeviceTypeRequest_ResponseMask_UpdatedFieldsOnly); ok {
		return x.UpdatedFieldsOnly
	}
	return false
}
func (m *UpdateDeviceTypeRequest_ResponseMask) GetBodyMask() *device_type.DeviceType_FieldMask {
	if x, ok := m.GetMasking().(*UpdateDeviceTypeRequest_ResponseMask_BodyMask); ok {
		return x.BodyMask
	}
	return nil
}
func (m *UpdateDeviceTypeRequest_ResponseMask) SetMasking(ofv isUpdateDeviceTypeRequest_ResponseMask_Masking) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isUpdateDeviceTypeRequest_ResponseMask_Masking", "UpdateDeviceTypeRequest_ResponseMask"))
	}
	m.Masking = ofv
}
func (m *UpdateDeviceTypeRequest_ResponseMask) SetSkipEntireResponseBody(fv bool) {
	m.SetMasking(&UpdateDeviceTypeRequest_ResponseMask_SkipEntireResponseBody{SkipEntireResponseBody: fv})
}
func (m *UpdateDeviceTypeRequest_ResponseMask) SetUpdatedFieldsOnly(fv bool) {
	m.SetMasking(&UpdateDeviceTypeRequest_ResponseMask_UpdatedFieldsOnly{UpdatedFieldsOnly: fv})
}
func (m *UpdateDeviceTypeRequest_ResponseMask) SetBodyMask(fv *device_type.DeviceType_FieldMask) {
	m.SetMasking(&UpdateDeviceTypeRequest_ResponseMask_BodyMask{BodyMask: fv})
}

var edgelq_devices_proto_v1alpha2_device_type_service_proto preflect.FileDescriptor

var edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDesc = []byte{
	0x0a, 0x37, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb4, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x32, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xc2, 0x01, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x4d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42,
	0x12, 0xb2, 0xda, 0x21, 0x0e, 0x32, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x90, 0x01, 0x0a, 0x1b,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xf3,
	0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6,
	0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x31, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x22, 0x0c, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x2a, 0x0c, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x1a, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4d,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12,
	0xb2, 0xda, 0x21, 0x0e, 0x32, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xad, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0xb2, 0xda, 0x21, 0x0e, 0x22, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x3a, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e,
	0x22, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2,
	0xda, 0x21, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x32, 0x0c, 0x0a,
	0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x59, 0x0a,
	0x17, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x88, 0x04, 0x0a, 0x17, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda, 0x21,
	0x0e, 0x22, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda,
	0x21, 0x0e, 0x2a, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2,
	0xda, 0x21, 0x0e, 0x1a, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x32,
	0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x32, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x12, 0x06, 0x1a,
	0x02, 0x08, 0x64, 0x2a, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x99, 0x04, 0x0a, 0x18, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x56, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x1a, 0x89, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x22, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xda,
	0x21, 0x0e, 0x22, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xf3, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xa5, 0x01,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3b,
	0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4d, 0x0a, 0x09, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e,
	0x32, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61,
	0x73, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x90, 0x06, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0xc8, 0xd5, 0x22, 0x01, 0xca, 0xc6,
	0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x32, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x43, 0x0a, 0x03, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x41, 0x53, 0x52, 0x03, 0x63, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x5f, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xad,
	0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x57, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x10, 0x01, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42,
	0x12, 0xb2, 0xda, 0x21, 0x0e, 0x32, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xd7,
	0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x3b, 0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x30, 0x0a, 0x13,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x4d,
	0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12, 0xb2,
	0xda, 0x21, 0x0e, 0x32, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a,
	0x07, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x41, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0xb2, 0xda, 0x21, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xb3, 0x0d, 0x0a, 0x11,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xb4, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x55, 0x82, 0xdb, 0x21, 0x21, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xe1, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x82, 0xdb, 0x21, 0x31, 0x0a, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x20, 0x01, 0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x0e, 0x12, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02,
	0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x8a, 0xcc, 0x26, 0x00, 0x12, 0xc3, 0x01, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82,
	0xdb, 0x21, 0x28, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x00, 0x32, 0x0e, 0x12, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x8a, 0xcc,
	0x26, 0x00, 0x12, 0xd1, 0x01, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82, 0xdb, 0x21, 0x25, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2a, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0xa2, 0xdc,
	0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12, 0xd6, 0x01, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x82, 0xdb, 0x21, 0x30,
	0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x00, 0x32, 0x15, 0x12, 0x13, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x1b, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x8a, 0xcc, 0x26, 0x00, 0x30, 0x01, 0x12,
	0xcc, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x67, 0x82, 0xdb, 0x21, 0x2d, 0x0a, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x2a, 0x0d, 0x12, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x3a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01, 0x12, 0xdf,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x82, 0xdb, 0x21, 0x2b, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x0d,
	0x12, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x06, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x39, 0x3a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x2a,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01,
	0x12, 0xad, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x82, 0xdb,
	0x21, 0x1c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc,
	0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x8a, 0xcc, 0x26, 0x02, 0x10, 0x01,
	0x1a, 0x2f, 0xca, 0x41, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f,
	0x6d, 0x42, 0xc0, 0x02, 0xe8, 0xde, 0x21, 0x00, 0x82, 0xff, 0xd0, 0x02, 0x54, 0x0a, 0x12, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x8a, 0xff, 0xd0, 0x02, 0x54, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x00, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescOnce sync.Once
	edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescData = edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDesc
)

func edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescGZIP() []byte {
	edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescOnce.Do(func() {
		edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescData)
	})
	return edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDescData
}

var edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var edgelq_devices_proto_v1alpha2_device_type_service_proto_goTypes = []interface{}{
	(*GetDeviceTypeRequest)(nil),                     // 0: ntt.devices.v1alpha2.GetDeviceTypeRequest
	(*BatchGetDeviceTypesRequest)(nil),               // 1: ntt.devices.v1alpha2.BatchGetDeviceTypesRequest
	(*BatchGetDeviceTypesResponse)(nil),              // 2: ntt.devices.v1alpha2.BatchGetDeviceTypesResponse
	(*ListDeviceTypesRequest)(nil),                   // 3: ntt.devices.v1alpha2.ListDeviceTypesRequest
	(*ListDeviceTypesResponse)(nil),                  // 4: ntt.devices.v1alpha2.ListDeviceTypesResponse
	(*WatchDeviceTypeRequest)(nil),                   // 5: ntt.devices.v1alpha2.WatchDeviceTypeRequest
	(*WatchDeviceTypeResponse)(nil),                  // 6: ntt.devices.v1alpha2.WatchDeviceTypeResponse
	(*WatchDeviceTypesRequest)(nil),                  // 7: ntt.devices.v1alpha2.WatchDeviceTypesRequest
	(*WatchDeviceTypesResponse)(nil),                 // 8: ntt.devices.v1alpha2.WatchDeviceTypesResponse
	(*CreateDeviceTypeRequest)(nil),                  // 9: ntt.devices.v1alpha2.CreateDeviceTypeRequest
	(*UpdateDeviceTypeRequest)(nil),                  // 10: ntt.devices.v1alpha2.UpdateDeviceTypeRequest
	(*DeleteDeviceTypeRequest)(nil),                  // 11: ntt.devices.v1alpha2.DeleteDeviceTypeRequest
	(*WatchDeviceTypesResponse_PageTokenChange)(nil), // 12: ntt.devices.v1alpha2.WatchDeviceTypesResponse.PageTokenChange
	(*CreateDeviceTypeRequest_ResponseMask)(nil),     // 13: ntt.devices.v1alpha2.CreateDeviceTypeRequest.ResponseMask
	(*UpdateDeviceTypeRequest_CAS)(nil),              // 14: ntt.devices.v1alpha2.UpdateDeviceTypeRequest.CAS
	(*UpdateDeviceTypeRequest_ResponseMask)(nil),     // 15: ntt.devices.v1alpha2.UpdateDeviceTypeRequest.ResponseMask
	(*device_type.DeviceType_FieldMask)(nil),         // 16: ntt.devices.v1alpha2.DeviceType_FieldMask
	(view.View)(0),                                   // 17: goten.types.View
	(*device_type.DeviceType)(nil),                   // 18: ntt.devices.v1alpha2.DeviceType
	(*device_type.DeviceTypeChange)(nil),             // 19: ntt.devices.v1alpha2.DeviceTypeChange
	(watch_type.WatchType)(0),                        // 20: goten.types.WatchType
	(*timestamppb.Timestamp)(nil),                    // 21: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                            // 22: google.protobuf.Empty
}
var edgelq_devices_proto_v1alpha2_device_type_service_proto_depIdxs = []int32{
	16, // 0: ntt.devices.v1alpha2.GetDeviceTypeRequest.field_mask:type_name -> ntt.devices.v1alpha2.DeviceType_FieldMask
	17, // 1: ntt.devices.v1alpha2.GetDeviceTypeRequest.view:type_name -> goten.types.View
	16, // 2: ntt.devices.v1alpha2.BatchGetDeviceTypesRequest.field_mask:type_name -> ntt.devices.v1alpha2.DeviceType_FieldMask
	17, // 3: ntt.devices.v1alpha2.BatchGetDeviceTypesRequest.view:type_name -> goten.types.View
	18, // 4: ntt.devices.v1alpha2.BatchGetDeviceTypesResponse.device_types:type_name -> ntt.devices.v1alpha2.DeviceType
	16, // 5: ntt.devices.v1alpha2.ListDeviceTypesRequest.field_mask:type_name -> ntt.devices.v1alpha2.DeviceType_FieldMask
	17, // 6: ntt.devices.v1alpha2.ListDeviceTypesRequest.view:type_name -> goten.types.View
	18, // 7: ntt.devices.v1alpha2.ListDeviceTypesResponse.device_types:type_name -> ntt.devices.v1alpha2.DeviceType
	16, // 8: ntt.devices.v1alpha2.WatchDeviceTypeRequest.field_mask:type_name -> ntt.devices.v1alpha2.DeviceType_FieldMask
	17, // 9: ntt.devices.v1alpha2.WatchDeviceTypeRequest.view:type_name -> goten.types.View
	19, // 10: ntt.devices.v1alpha2.WatchDeviceTypeResponse.change:type_name -> ntt.devices.v1alpha2.DeviceTypeChange
	20, // 11: ntt.devices.v1alpha2.WatchDeviceTypesRequest.type:type_name -> goten.types.WatchType
	21, // 12: ntt.devices.v1alpha2.WatchDeviceTypesRequest.starting_time:type_name -> google.protobuf.Timestamp
	16, // 13: ntt.devices.v1alpha2.WatchDeviceTypesRequest.field_mask:type_name -> ntt.devices.v1alpha2.DeviceType_FieldMask
	17, // 14: ntt.devices.v1alpha2.WatchDeviceTypesRequest.view:type_name -> goten.types.View
	19, // 15: ntt.devices.v1alpha2.WatchDeviceTypesResponse.device_type_changes:type_name -> ntt.devices.v1alpha2.DeviceTypeChange
	12, // 16: ntt.devices.v1alpha2.WatchDeviceTypesResponse.page_token_change:type_name -> ntt.devices.v1alpha2.WatchDeviceTypesResponse.PageTokenChange
	18, // 17: ntt.devices.v1alpha2.CreateDeviceTypeRequest.device_type:type_name -> ntt.devices.v1alpha2.DeviceType
	13, // 18: ntt.devices.v1alpha2.CreateDeviceTypeRequest.response_mask:type_name -> ntt.devices.v1alpha2.CreateDeviceTypeRequest.ResponseMask
	18, // 19: ntt.devices.v1alpha2.UpdateDeviceTypeRequest.device_type:type_name -> ntt.devices.v1alpha2.DeviceType
	16, // 20: ntt.devices.v1alpha2.UpdateDeviceTypeRequest.update_mask:type_name -> ntt.devices.v1alpha2.DeviceType_FieldMask
	14, // 21: ntt.devices.v1alpha2.UpdateDeviceTypeRequest.cas:type_name -> ntt.devices.v1alpha2.UpdateDeviceTypeRequest.CAS
	15, // 22: ntt.devices.v1alpha2.UpdateDeviceTypeRequest.response_mask:type_name -> ntt.devices.v1alpha2.UpdateDeviceTypeRequest.ResponseMask
	16, // 23: ntt.devices.v1alpha2.CreateDeviceTypeRequest.ResponseMask.body_mask:type_name -> ntt.devices.v1alpha2.DeviceType_FieldMask
	18, // 24: ntt.devices.v1alpha2.UpdateDeviceTypeRequest.CAS.conditional_state:type_name -> ntt.devices.v1alpha2.DeviceType
	16, // 25: ntt.devices.v1alpha2.UpdateDeviceTypeRequest.CAS.field_mask:type_name -> ntt.devices.v1alpha2.DeviceType_FieldMask
	16, // 26: ntt.devices.v1alpha2.UpdateDeviceTypeRequest.ResponseMask.body_mask:type_name -> ntt.devices.v1alpha2.DeviceType_FieldMask
	0,  // 27: ntt.devices.v1alpha2.DeviceTypeService.GetDeviceType:input_type -> ntt.devices.v1alpha2.GetDeviceTypeRequest
	1,  // 28: ntt.devices.v1alpha2.DeviceTypeService.BatchGetDeviceTypes:input_type -> ntt.devices.v1alpha2.BatchGetDeviceTypesRequest
	3,  // 29: ntt.devices.v1alpha2.DeviceTypeService.ListDeviceTypes:input_type -> ntt.devices.v1alpha2.ListDeviceTypesRequest
	5,  // 30: ntt.devices.v1alpha2.DeviceTypeService.WatchDeviceType:input_type -> ntt.devices.v1alpha2.WatchDeviceTypeRequest
	7,  // 31: ntt.devices.v1alpha2.DeviceTypeService.WatchDeviceTypes:input_type -> ntt.devices.v1alpha2.WatchDeviceTypesRequest
	9,  // 32: ntt.devices.v1alpha2.DeviceTypeService.CreateDeviceType:input_type -> ntt.devices.v1alpha2.CreateDeviceTypeRequest
	10, // 33: ntt.devices.v1alpha2.DeviceTypeService.UpdateDeviceType:input_type -> ntt.devices.v1alpha2.UpdateDeviceTypeRequest
	11, // 34: ntt.devices.v1alpha2.DeviceTypeService.DeleteDeviceType:input_type -> ntt.devices.v1alpha2.DeleteDeviceTypeRequest
	18, // 35: ntt.devices.v1alpha2.DeviceTypeService.GetDeviceType:output_type -> ntt.devices.v1alpha2.DeviceType
	2,  // 36: ntt.devices.v1alpha2.DeviceTypeService.BatchGetDeviceTypes:output_type -> ntt.devices.v1alpha2.BatchGetDeviceTypesResponse
	4,  // 37: ntt.devices.v1alpha2.DeviceTypeService.ListDeviceTypes:output_type -> ntt.devices.v1alpha2.ListDeviceTypesResponse
	6,  // 38: ntt.devices.v1alpha2.DeviceTypeService.WatchDeviceType:output_type -> ntt.devices.v1alpha2.WatchDeviceTypeResponse
	8,  // 39: ntt.devices.v1alpha2.DeviceTypeService.WatchDeviceTypes:output_type -> ntt.devices.v1alpha2.WatchDeviceTypesResponse
	18, // 40: ntt.devices.v1alpha2.DeviceTypeService.CreateDeviceType:output_type -> ntt.devices.v1alpha2.DeviceType
	18, // 41: ntt.devices.v1alpha2.DeviceTypeService.UpdateDeviceType:output_type -> ntt.devices.v1alpha2.DeviceType
	22, // 42: ntt.devices.v1alpha2.DeviceTypeService.DeleteDeviceType:output_type -> google.protobuf.Empty
	35, // [35:43] is the sub-list for method output_type
	27, // [27:35] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { edgelq_devices_proto_v1alpha2_device_type_service_proto_init() }
func edgelq_devices_proto_v1alpha2_device_type_service_proto_init() {
	if edgelq_devices_proto_v1alpha2_device_type_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDeviceTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDeviceTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeviceTypesResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceTypeRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceTypeRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceTypeRequest_ResponseMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*CreateDeviceTypeRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*CreateDeviceTypeRequest_ResponseMask_BodyMask)(nil),
	}
	edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*UpdateDeviceTypeRequest_ResponseMask_SkipEntireResponseBody)(nil),
		(*UpdateDeviceTypeRequest_ResponseMask_UpdatedFieldsOnly)(nil),
		(*UpdateDeviceTypeRequest_ResponseMask_BodyMask)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_devices_proto_v1alpha2_device_type_service_proto_goTypes,
		DependencyIndexes: edgelq_devices_proto_v1alpha2_device_type_service_proto_depIdxs,
		MessageInfos:      edgelq_devices_proto_v1alpha2_device_type_service_proto_msgTypes,
	}.Build()
	edgelq_devices_proto_v1alpha2_device_type_service_proto = out.File
	edgelq_devices_proto_v1alpha2_device_type_service_proto_rawDesc = nil
	edgelq_devices_proto_v1alpha2_device_type_service_proto_goTypes = nil
	edgelq_devices_proto_v1alpha2_device_type_service_proto_depIdxs = nil
}
