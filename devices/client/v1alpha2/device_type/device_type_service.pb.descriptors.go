// Code generated by protoc-gen-goten-client
// API: DeviceTypeService
// DO NOT EDIT!!!

package device_type_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	device_type "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device_type"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &device_type.DeviceType{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized        bool
	deviceTypeServiceDescriptor   *DeviceTypeServiceDescriptor
	getDeviceTypeDescriptor       *GetDeviceTypeDescriptor
	batchGetDeviceTypesDescriptor *BatchGetDeviceTypesDescriptor
	listDeviceTypesDescriptor     *ListDeviceTypesDescriptor
	watchDeviceTypeDescriptor     *WatchDeviceTypeDescriptor
	watchDeviceTypesDescriptor    *WatchDeviceTypesDescriptor
	createDeviceTypeDescriptor    *CreateDeviceTypeDescriptor
	updateDeviceTypeDescriptor    *UpdateDeviceTypeDescriptor
	deleteDeviceTypeDescriptor    *DeleteDeviceTypeDescriptor
)

type GetDeviceTypeDescriptor struct{}

type GetDeviceTypeDescriptorClientMsgHandle struct{}

type GetDeviceTypeDescriptorServerMsgHandle struct{}

func (d *GetDeviceTypeDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetDeviceTypeRequest{}
}

func (d *GetDeviceTypeDescriptor) NewEmptyServerMsg() proto.Message {
	return &device_type.DeviceType{}
}

func (d *GetDeviceTypeDescriptor) IsUnary() bool {
	return true
}

func (d *GetDeviceTypeDescriptor) IsClientStream() bool {
	return false
}

func (d *GetDeviceTypeDescriptor) IsServerStream() bool {
	return false
}

func (d *GetDeviceTypeDescriptor) IsCollection() bool {
	return false
}

func (d *GetDeviceTypeDescriptor) IsPlural() bool {
	return false
}

func (d *GetDeviceTypeDescriptor) HasResource() bool {
	return true
}

func (d *GetDeviceTypeDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetDeviceTypeDescriptor) GetVerb() string {
	return "get"
}

func (d *GetDeviceTypeDescriptor) GetMethodName() string {
	return "GetDeviceType"
}

func (d *GetDeviceTypeDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.DeviceTypeService/GetDeviceType"
}

func (d *GetDeviceTypeDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *GetDeviceTypeDescriptor) GetApiName() string {
	return "DeviceTypeService"
}

func (d *GetDeviceTypeDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *GetDeviceTypeDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetDeviceTypeDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceTypeServiceDescriptor
}

func (d *GetDeviceTypeDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_type.GetDescriptor()
}

func (d *GetDeviceTypeDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeviceTypeDescriptorClientMsgHandle{}
}

func (d *GetDeviceTypeDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeviceTypeDescriptorServerMsgHandle{}
}

func (h *GetDeviceTypeDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeviceTypeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetDeviceTypeRequest) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*device_type.Name)(nil)
}

func (h *GetDeviceTypeDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetDeviceTypeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetDeviceTypeRequest) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeviceTypeDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetDeviceTypeDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_type.DeviceType)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*device_type.DeviceType) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_type.Name)(nil)
}

func (h *GetDeviceTypeDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device_type.DeviceType)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*device_type.DeviceType) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeviceTypeDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetGetDeviceTypeDescriptor() *GetDeviceTypeDescriptor {
	return getDeviceTypeDescriptor
}

type BatchGetDeviceTypesDescriptor struct{}

type BatchGetDeviceTypesDescriptorClientMsgHandle struct{}

type BatchGetDeviceTypesDescriptorServerMsgHandle struct{}

func (d *BatchGetDeviceTypesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetDeviceTypesRequest{}
}

func (d *BatchGetDeviceTypesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetDeviceTypesResponse{}
}

func (d *BatchGetDeviceTypesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetDeviceTypesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetDeviceTypesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetDeviceTypesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetDeviceTypesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetDeviceTypesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetDeviceTypesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetDeviceTypesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetDeviceTypesDescriptor) GetMethodName() string {
	return "BatchGetDeviceTypes"
}

func (d *BatchGetDeviceTypesDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.DeviceTypeService/BatchGetDeviceTypes"
}

func (d *BatchGetDeviceTypesDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *BatchGetDeviceTypesDescriptor) GetApiName() string {
	return "DeviceTypeService"
}

func (d *BatchGetDeviceTypesDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *BatchGetDeviceTypesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetDeviceTypesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceTypeServiceDescriptor
}

func (d *BatchGetDeviceTypesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_type.GetDescriptor()
}

func (d *BatchGetDeviceTypesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDeviceTypesDescriptorClientMsgHandle{}
}

func (d *BatchGetDeviceTypesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDeviceTypesDescriptorServerMsgHandle{}
}

func (h *BatchGetDeviceTypesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceTypesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDeviceTypesRequest) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceTypesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDeviceTypesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDeviceTypesRequest) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(device_type.DeviceTypeNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (device_type.DeviceTypeNameList)(nil)
}

func (h *BatchGetDeviceTypesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *BatchGetDeviceTypesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeviceTypesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDeviceTypesResponse) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeviceTypesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDeviceTypesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDeviceTypesResponse) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceTypes(); len(resources) > 0 {
			list := make(device_type.DeviceTypeNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (device_type.DeviceTypeNameList)(nil)
}

func (h *BatchGetDeviceTypesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetBatchGetDeviceTypesDescriptor() *BatchGetDeviceTypesDescriptor {
	return batchGetDeviceTypesDescriptor
}

type ListDeviceTypesDescriptor struct{}

type ListDeviceTypesDescriptorClientMsgHandle struct{}

type ListDeviceTypesDescriptorServerMsgHandle struct{}

func (d *ListDeviceTypesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListDeviceTypesRequest{}
}

func (d *ListDeviceTypesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListDeviceTypesResponse{}
}

func (d *ListDeviceTypesDescriptor) IsUnary() bool {
	return true
}

func (d *ListDeviceTypesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListDeviceTypesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListDeviceTypesDescriptor) IsCollection() bool {
	return true
}

func (d *ListDeviceTypesDescriptor) IsPlural() bool {
	return true
}

func (d *ListDeviceTypesDescriptor) HasResource() bool {
	return true
}

func (d *ListDeviceTypesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListDeviceTypesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListDeviceTypesDescriptor) GetMethodName() string {
	return "ListDeviceTypes"
}

func (d *ListDeviceTypesDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.DeviceTypeService/ListDeviceTypes"
}

func (d *ListDeviceTypesDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *ListDeviceTypesDescriptor) GetApiName() string {
	return "DeviceTypeService"
}

func (d *ListDeviceTypesDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *ListDeviceTypesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListDeviceTypesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceTypeServiceDescriptor
}

func (d *ListDeviceTypesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_type.GetDescriptor()
}

func (d *ListDeviceTypesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDeviceTypesDescriptorClientMsgHandle{}
}

func (d *ListDeviceTypesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDeviceTypesDescriptorServerMsgHandle{}
}

func (h *ListDeviceTypesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceTypesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDeviceTypesRequest) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDeviceTypesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDeviceTypesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDeviceTypesRequest) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListDeviceTypesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListDeviceTypesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeviceTypesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDeviceTypesResponse) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDeviceTypesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDeviceTypesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDeviceTypesResponse) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDeviceTypes(); len(resources) > 0 {
			list := make(device_type.DeviceTypeNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (device_type.DeviceTypeNameList)(nil)
}

func (h *ListDeviceTypesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetListDeviceTypesDescriptor() *ListDeviceTypesDescriptor {
	return listDeviceTypesDescriptor
}

type WatchDeviceTypeDescriptor struct{}

type WatchDeviceTypeDescriptorClientMsgHandle struct{}

type WatchDeviceTypeDescriptorServerMsgHandle struct{}

func (d *WatchDeviceTypeDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeviceTypeRequest{}
}

func (d *WatchDeviceTypeDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeviceTypeResponse{}
}

func (d *WatchDeviceTypeDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeviceTypeDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeviceTypeDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeviceTypeDescriptor) IsCollection() bool {
	return false
}

func (d *WatchDeviceTypeDescriptor) IsPlural() bool {
	return false
}

func (d *WatchDeviceTypeDescriptor) HasResource() bool {
	return true
}

func (d *WatchDeviceTypeDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeviceTypeDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeviceTypeDescriptor) GetMethodName() string {
	return "WatchDeviceType"
}

func (d *WatchDeviceTypeDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.DeviceTypeService/WatchDeviceType"
}

func (d *WatchDeviceTypeDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *WatchDeviceTypeDescriptor) GetApiName() string {
	return "DeviceTypeService"
}

func (d *WatchDeviceTypeDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *WatchDeviceTypeDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchDeviceTypeDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceTypeServiceDescriptor
}

func (d *WatchDeviceTypeDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_type.GetDescriptor()
}

func (d *WatchDeviceTypeDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceTypeDescriptorClientMsgHandle{}
}

func (d *WatchDeviceTypeDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceTypeDescriptorServerMsgHandle{}
}

func (h *WatchDeviceTypeDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceTypeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceTypeRequest) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*device_type.Name)(nil)
}

func (h *WatchDeviceTypeDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceTypeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceTypeRequest) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceTypeDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchDeviceTypeDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceTypeResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceTypeResponse) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *device_type.DeviceTypeChange_Added_:
				return tResChange.Added.GetDeviceType().GetName()
			case *device_type.DeviceTypeChange_Modified_:
				return tResChange.Modified.GetName()
			case *device_type.DeviceTypeChange_Removed_:
				return tResChange.Removed.GetName()
			case *device_type.DeviceTypeChange_Current_:
				return tResChange.Current.GetDeviceType().GetName()
			}
		}
	}
	return (*device_type.Name)(nil)
}

func (h *WatchDeviceTypeDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceTypeResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceTypeResponse) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceTypeDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetWatchDeviceTypeDescriptor() *WatchDeviceTypeDescriptor {
	return watchDeviceTypeDescriptor
}

type WatchDeviceTypesDescriptor struct{}

type WatchDeviceTypesDescriptorClientMsgHandle struct{}

type WatchDeviceTypesDescriptorServerMsgHandle struct{}

func (d *WatchDeviceTypesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeviceTypesRequest{}
}

func (d *WatchDeviceTypesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeviceTypesResponse{}
}

func (d *WatchDeviceTypesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeviceTypesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeviceTypesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeviceTypesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchDeviceTypesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchDeviceTypesDescriptor) HasResource() bool {
	return true
}

func (d *WatchDeviceTypesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeviceTypesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeviceTypesDescriptor) GetMethodName() string {
	return "WatchDeviceTypes"
}

func (d *WatchDeviceTypesDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.DeviceTypeService/WatchDeviceTypes"
}

func (d *WatchDeviceTypesDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *WatchDeviceTypesDescriptor) GetApiName() string {
	return "DeviceTypeService"
}

func (d *WatchDeviceTypesDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *WatchDeviceTypesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchDeviceTypesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceTypeServiceDescriptor
}

func (d *WatchDeviceTypesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_type.GetDescriptor()
}

func (d *WatchDeviceTypesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceTypesDescriptorClientMsgHandle{}
}

func (d *WatchDeviceTypesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeviceTypesDescriptorServerMsgHandle{}
}

func (h *WatchDeviceTypesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceTypesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceTypesRequest) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceTypesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceTypesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceTypesRequest) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeviceTypesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchDeviceTypesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeviceTypesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeviceTypesResponse) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDeviceTypesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeviceTypesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeviceTypesResponse) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetDeviceTypeChanges(); len(resChanges) > 0 {
			list := make(device_type.DeviceTypeNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *device_type.DeviceTypeChange_Added_:
					list = append(list, tResChange.Added.GetDeviceType().GetName())
				case *device_type.DeviceTypeChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *device_type.DeviceTypeChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *device_type.DeviceTypeChange_Current_:
					list = append(list, tResChange.Current.GetDeviceType().GetName())
				}
			}
			return list
		}
	}
	return (device_type.DeviceTypeNameList)(nil)
}

func (h *WatchDeviceTypesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetWatchDeviceTypesDescriptor() *WatchDeviceTypesDescriptor {
	return watchDeviceTypesDescriptor
}

type CreateDeviceTypeDescriptor struct{}

type CreateDeviceTypeDescriptorClientMsgHandle struct{}

type CreateDeviceTypeDescriptorServerMsgHandle struct{}

func (d *CreateDeviceTypeDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateDeviceTypeRequest{}
}

func (d *CreateDeviceTypeDescriptor) NewEmptyServerMsg() proto.Message {
	return &device_type.DeviceType{}
}

func (d *CreateDeviceTypeDescriptor) IsUnary() bool {
	return true
}

func (d *CreateDeviceTypeDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateDeviceTypeDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateDeviceTypeDescriptor) IsCollection() bool {
	return true
}

func (d *CreateDeviceTypeDescriptor) IsPlural() bool {
	return false
}

func (d *CreateDeviceTypeDescriptor) HasResource() bool {
	return true
}

func (d *CreateDeviceTypeDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateDeviceTypeDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateDeviceTypeDescriptor) GetMethodName() string {
	return "CreateDeviceType"
}

func (d *CreateDeviceTypeDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.DeviceTypeService/CreateDeviceType"
}

func (d *CreateDeviceTypeDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *CreateDeviceTypeDescriptor) GetApiName() string {
	return "DeviceTypeService"
}

func (d *CreateDeviceTypeDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *CreateDeviceTypeDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateDeviceTypeDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceTypeServiceDescriptor
}

func (d *CreateDeviceTypeDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_type.GetDescriptor()
}

func (d *CreateDeviceTypeDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDeviceTypeDescriptorClientMsgHandle{}
}

func (d *CreateDeviceTypeDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDeviceTypeDescriptorServerMsgHandle{}
}

func (h *CreateDeviceTypeDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDeviceTypeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateDeviceTypeRequest) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetDeviceType()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*device_type.Name)(nil)
}

func (h *CreateDeviceTypeDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateDeviceTypeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateDeviceTypeRequest) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDeviceTypeDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CreateDeviceTypeDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_type.DeviceType)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*device_type.DeviceType) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_type.Name)(nil)
}

func (h *CreateDeviceTypeDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device_type.DeviceType)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*device_type.DeviceType) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDeviceTypeDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetCreateDeviceTypeDescriptor() *CreateDeviceTypeDescriptor {
	return createDeviceTypeDescriptor
}

type UpdateDeviceTypeDescriptor struct{}

type UpdateDeviceTypeDescriptorClientMsgHandle struct{}

type UpdateDeviceTypeDescriptorServerMsgHandle struct{}

func (d *UpdateDeviceTypeDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateDeviceTypeRequest{}
}

func (d *UpdateDeviceTypeDescriptor) NewEmptyServerMsg() proto.Message {
	return &device_type.DeviceType{}
}

func (d *UpdateDeviceTypeDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateDeviceTypeDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateDeviceTypeDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateDeviceTypeDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateDeviceTypeDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateDeviceTypeDescriptor) HasResource() bool {
	return true
}

func (d *UpdateDeviceTypeDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateDeviceTypeDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateDeviceTypeDescriptor) GetMethodName() string {
	return "UpdateDeviceType"
}

func (d *UpdateDeviceTypeDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.DeviceTypeService/UpdateDeviceType"
}

func (d *UpdateDeviceTypeDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *UpdateDeviceTypeDescriptor) GetApiName() string {
	return "DeviceTypeService"
}

func (d *UpdateDeviceTypeDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *UpdateDeviceTypeDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateDeviceTypeDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceTypeServiceDescriptor
}

func (d *UpdateDeviceTypeDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_type.GetDescriptor()
}

func (d *UpdateDeviceTypeDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDeviceTypeDescriptorClientMsgHandle{}
}

func (d *UpdateDeviceTypeDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDeviceTypeDescriptorServerMsgHandle{}
}

func (h *UpdateDeviceTypeDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDeviceTypeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateDeviceTypeRequest) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetDeviceType()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*device_type.Name)(nil)
}

func (h *UpdateDeviceTypeDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateDeviceTypeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateDeviceTypeRequest) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDeviceTypeDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *UpdateDeviceTypeDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*device_type.DeviceType)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*device_type.DeviceType) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*device_type.Name)(nil)
}

func (h *UpdateDeviceTypeDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*device_type.DeviceType)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*device_type.DeviceType) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDeviceTypeDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetUpdateDeviceTypeDescriptor() *UpdateDeviceTypeDescriptor {
	return updateDeviceTypeDescriptor
}

type DeleteDeviceTypeDescriptor struct{}

type DeleteDeviceTypeDescriptorClientMsgHandle struct{}

type DeleteDeviceTypeDescriptorServerMsgHandle struct{}

func (d *DeleteDeviceTypeDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteDeviceTypeRequest{}
}

func (d *DeleteDeviceTypeDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteDeviceTypeDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteDeviceTypeDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteDeviceTypeDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteDeviceTypeDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteDeviceTypeDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteDeviceTypeDescriptor) HasResource() bool {
	return true
}

func (d *DeleteDeviceTypeDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteDeviceTypeDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteDeviceTypeDescriptor) GetMethodName() string {
	return "DeleteDeviceType"
}

func (d *DeleteDeviceTypeDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.DeviceTypeService/DeleteDeviceType"
}

func (d *DeleteDeviceTypeDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *DeleteDeviceTypeDescriptor) GetApiName() string {
	return "DeviceTypeService"
}

func (d *DeleteDeviceTypeDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *DeleteDeviceTypeDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteDeviceTypeDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deviceTypeServiceDescriptor
}

func (d *DeleteDeviceTypeDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return device_type.GetDescriptor()
}

func (d *DeleteDeviceTypeDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDeviceTypeDescriptorClientMsgHandle{}
}

func (d *DeleteDeviceTypeDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDeviceTypeDescriptorServerMsgHandle{}
}

func (h *DeleteDeviceTypeDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDeviceTypeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteDeviceTypeRequest) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*device_type.Name)(nil)
}

func (h *DeleteDeviceTypeDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteDeviceTypeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteDeviceTypeRequest) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDeviceTypeDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *DeleteDeviceTypeDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *device_type.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteDeviceTypeDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*device_type.Name
	})
	if ok {
		return device_type.DeviceTypeNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDeviceTypeDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func GetDeleteDeviceTypeDescriptor() *DeleteDeviceTypeDescriptor {
	return deleteDeviceTypeDescriptor
}

type DeviceTypeServiceDescriptor struct{}

func (d *DeviceTypeServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getDeviceTypeDescriptor,
		batchGetDeviceTypesDescriptor,
		listDeviceTypesDescriptor,
		watchDeviceTypeDescriptor,
		watchDeviceTypesDescriptor,
		createDeviceTypeDescriptor,
		updateDeviceTypeDescriptor,
		deleteDeviceTypeDescriptor,
	}
}

func (d *DeviceTypeServiceDescriptor) GetFullAPIName() string {
	return "/ntt.devices.v1alpha2.DeviceTypeService"
}

func (d *DeviceTypeServiceDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *DeviceTypeServiceDescriptor) GetApiName() string {
	return "DeviceTypeService"
}

func (d *DeviceTypeServiceDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *DeviceTypeServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetDeviceTypeServiceDescriptor() *DeviceTypeServiceDescriptor {
	return deviceTypeServiceDescriptor
}

func initDescriptors() {
	deviceTypeServiceDescriptor = &DeviceTypeServiceDescriptor{}
	getDeviceTypeDescriptor = &GetDeviceTypeDescriptor{}
	batchGetDeviceTypesDescriptor = &BatchGetDeviceTypesDescriptor{}
	listDeviceTypesDescriptor = &ListDeviceTypesDescriptor{}
	watchDeviceTypeDescriptor = &WatchDeviceTypeDescriptor{}
	watchDeviceTypesDescriptor = &WatchDeviceTypesDescriptor{}
	createDeviceTypeDescriptor = &CreateDeviceTypeDescriptor{}
	updateDeviceTypeDescriptor = &UpdateDeviceTypeDescriptor{}
	deleteDeviceTypeDescriptor = &DeleteDeviceTypeDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(deviceTypeServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getDeviceTypeDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetDeviceTypesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listDeviceTypesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeviceTypeDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeviceTypesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createDeviceTypeDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateDeviceTypeDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteDeviceTypeDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
