// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/device_type_service.proto
// DO NOT EDIT!!!

package device_type_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device_type "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device_type"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &device_type.DeviceType{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetDeviceTypeRequest) GotenObjectExt() {}

func (o *GetDeviceTypeRequest) MakeFullFieldMask() *GetDeviceTypeRequest_FieldMask {
	return FullGetDeviceTypeRequest_FieldMask()
}

func (o *GetDeviceTypeRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetDeviceTypeRequest_FieldMask()
}

func (o *GetDeviceTypeRequest) MakeDiffFieldMask(other *GetDeviceTypeRequest) *GetDeviceTypeRequest_FieldMask {
	if o == nil && other == nil {
		return &GetDeviceTypeRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetDeviceTypeRequest_FieldMask()
	}

	res := &GetDeviceTypeRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetDeviceTypeRequest_FieldTerminalPath{selector: GetDeviceTypeRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetDeviceTypeRequest_FieldTerminalPath{selector: GetDeviceTypeRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetDeviceTypeRequest_FieldTerminalPath{selector: GetDeviceTypeRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetDeviceTypeRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetDeviceTypeRequest))
}

func (o *GetDeviceTypeRequest) Clone() *GetDeviceTypeRequest {
	if o == nil {
		return nil
	}
	result := &GetDeviceTypeRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &device_type.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device_type.DeviceType_FieldMask)
	result.View = o.View
	return result
}

func (o *GetDeviceTypeRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetDeviceTypeRequest) Merge(source *GetDeviceTypeRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &device_type.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device_type.DeviceType_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetDeviceTypeRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetDeviceTypeRequest))
}

func (o *BatchGetDeviceTypesRequest) GotenObjectExt() {}

func (o *BatchGetDeviceTypesRequest) MakeFullFieldMask() *BatchGetDeviceTypesRequest_FieldMask {
	return FullBatchGetDeviceTypesRequest_FieldMask()
}

func (o *BatchGetDeviceTypesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetDeviceTypesRequest_FieldMask()
}

func (o *BatchGetDeviceTypesRequest) MakeDiffFieldMask(other *BatchGetDeviceTypesRequest) *BatchGetDeviceTypesRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetDeviceTypesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetDeviceTypesRequest_FieldMask()
	}

	res := &BatchGetDeviceTypesRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetDeviceTypesRequest_FieldTerminalPath{selector: BatchGetDeviceTypesRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDeviceTypesRequest_FieldTerminalPath{selector: BatchGetDeviceTypesRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetDeviceTypesRequest_FieldTerminalPath{selector: BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetDeviceTypesRequest_FieldTerminalPath{selector: BatchGetDeviceTypesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetDeviceTypesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetDeviceTypesRequest))
}

func (o *BatchGetDeviceTypesRequest) Clone() *BatchGetDeviceTypesRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetDeviceTypesRequest{}
	result.Names = make([]*device_type.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &device_type.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device_type.DeviceType_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetDeviceTypesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetDeviceTypesRequest) Merge(source *BatchGetDeviceTypesRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device_type.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &device_type.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device_type.DeviceType_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetDeviceTypesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetDeviceTypesRequest))
}

func (o *BatchGetDeviceTypesResponse) GotenObjectExt() {}

func (o *BatchGetDeviceTypesResponse) MakeFullFieldMask() *BatchGetDeviceTypesResponse_FieldMask {
	return FullBatchGetDeviceTypesResponse_FieldMask()
}

func (o *BatchGetDeviceTypesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetDeviceTypesResponse_FieldMask()
}

func (o *BatchGetDeviceTypesResponse) MakeDiffFieldMask(other *BatchGetDeviceTypesResponse) *BatchGetDeviceTypesResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetDeviceTypesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetDeviceTypesResponse_FieldMask()
	}

	res := &BatchGetDeviceTypesResponse_FieldMask{}

	if len(o.GetDeviceTypes()) == len(other.GetDeviceTypes()) {
		for i, lValue := range o.GetDeviceTypes() {
			rValue := other.GetDeviceTypes()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetDeviceTypesResponse_FieldTerminalPath{selector: BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDeviceTypesResponse_FieldTerminalPath{selector: BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetDeviceTypesResponse_FieldTerminalPath{selector: BatchGetDeviceTypesResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDeviceTypesResponse_FieldTerminalPath{selector: BatchGetDeviceTypesResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetDeviceTypesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetDeviceTypesResponse))
}

func (o *BatchGetDeviceTypesResponse) Clone() *BatchGetDeviceTypesResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetDeviceTypesResponse{}
	result.DeviceTypes = make([]*device_type.DeviceType, len(o.DeviceTypes))
	for i, sourceValue := range o.DeviceTypes {
		result.DeviceTypes[i] = sourceValue.Clone()
	}
	result.Missing = make([]*device_type.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &device_type.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetDeviceTypesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetDeviceTypesResponse) Merge(source *BatchGetDeviceTypesResponse) {
	for _, sourceValue := range source.GetDeviceTypes() {
		exists := false
		for _, currentValue := range o.DeviceTypes {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device_type.DeviceType
			if sourceValue != nil {
				newDstElement = new(device_type.DeviceType)
				newDstElement.Merge(sourceValue)
			}
			o.DeviceTypes = append(o.DeviceTypes, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device_type.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &device_type.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetDeviceTypesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetDeviceTypesResponse))
}

func (o *ListDeviceTypesRequest) GotenObjectExt() {}

func (o *ListDeviceTypesRequest) MakeFullFieldMask() *ListDeviceTypesRequest_FieldMask {
	return FullListDeviceTypesRequest_FieldMask()
}

func (o *ListDeviceTypesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListDeviceTypesRequest_FieldMask()
}

func (o *ListDeviceTypesRequest) MakeDiffFieldMask(other *ListDeviceTypesRequest) *ListDeviceTypesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListDeviceTypesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListDeviceTypesRequest_FieldMask()
	}

	res := &ListDeviceTypesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListDeviceTypesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListDeviceTypesRequest))
}

func (o *ListDeviceTypesRequest) Clone() *ListDeviceTypesRequest {
	if o == nil {
		return nil
	}
	result := &ListDeviceTypesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &device_type.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &device_type.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &device_type.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &device_type.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device_type.DeviceType_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListDeviceTypesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListDeviceTypesRequest) Merge(source *ListDeviceTypesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &device_type.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &device_type.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &device_type.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &device_type.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device_type.DeviceType_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListDeviceTypesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListDeviceTypesRequest))
}

func (o *ListDeviceTypesResponse) GotenObjectExt() {}

func (o *ListDeviceTypesResponse) MakeFullFieldMask() *ListDeviceTypesResponse_FieldMask {
	return FullListDeviceTypesResponse_FieldMask()
}

func (o *ListDeviceTypesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListDeviceTypesResponse_FieldMask()
}

func (o *ListDeviceTypesResponse) MakeDiffFieldMask(other *ListDeviceTypesResponse) *ListDeviceTypesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListDeviceTypesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListDeviceTypesResponse_FieldMask()
	}

	res := &ListDeviceTypesResponse_FieldMask{}

	if len(o.GetDeviceTypes()) == len(other.GetDeviceTypes()) {
		for i, lValue := range o.GetDeviceTypes() {
			rValue := other.GetDeviceTypes()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorDeviceTypes})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorDeviceTypes})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListDeviceTypesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListDeviceTypesResponse))
}

func (o *ListDeviceTypesResponse) Clone() *ListDeviceTypesResponse {
	if o == nil {
		return nil
	}
	result := &ListDeviceTypesResponse{}
	result.DeviceTypes = make([]*device_type.DeviceType, len(o.DeviceTypes))
	for i, sourceValue := range o.DeviceTypes {
		result.DeviceTypes[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &device_type.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &device_type.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListDeviceTypesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListDeviceTypesResponse) Merge(source *ListDeviceTypesResponse) {
	for _, sourceValue := range source.GetDeviceTypes() {
		exists := false
		for _, currentValue := range o.DeviceTypes {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device_type.DeviceType
			if sourceValue != nil {
				newDstElement = new(device_type.DeviceType)
				newDstElement.Merge(sourceValue)
			}
			o.DeviceTypes = append(o.DeviceTypes, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &device_type.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &device_type.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListDeviceTypesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListDeviceTypesResponse))
}

func (o *WatchDeviceTypeRequest) GotenObjectExt() {}

func (o *WatchDeviceTypeRequest) MakeFullFieldMask() *WatchDeviceTypeRequest_FieldMask {
	return FullWatchDeviceTypeRequest_FieldMask()
}

func (o *WatchDeviceTypeRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeviceTypeRequest_FieldMask()
}

func (o *WatchDeviceTypeRequest) MakeDiffFieldMask(other *WatchDeviceTypeRequest) *WatchDeviceTypeRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchDeviceTypeRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeviceTypeRequest_FieldMask()
	}

	res := &WatchDeviceTypeRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchDeviceTypeRequest_FieldTerminalPath{selector: WatchDeviceTypeRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchDeviceTypeRequest_FieldTerminalPath{selector: WatchDeviceTypeRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchDeviceTypeRequest_FieldTerminalPath{selector: WatchDeviceTypeRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchDeviceTypeRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeviceTypeRequest))
}

func (o *WatchDeviceTypeRequest) Clone() *WatchDeviceTypeRequest {
	if o == nil {
		return nil
	}
	result := &WatchDeviceTypeRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &device_type.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device_type.DeviceType_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchDeviceTypeRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeviceTypeRequest) Merge(source *WatchDeviceTypeRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &device_type.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device_type.DeviceType_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchDeviceTypeRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeviceTypeRequest))
}

func (o *WatchDeviceTypeResponse) GotenObjectExt() {}

func (o *WatchDeviceTypeResponse) MakeFullFieldMask() *WatchDeviceTypeResponse_FieldMask {
	return FullWatchDeviceTypeResponse_FieldMask()
}

func (o *WatchDeviceTypeResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeviceTypeResponse_FieldMask()
}

func (o *WatchDeviceTypeResponse) MakeDiffFieldMask(other *WatchDeviceTypeResponse) *WatchDeviceTypeResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchDeviceTypeResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeviceTypeResponse_FieldMask()
	}

	res := &WatchDeviceTypeResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchDeviceTypeResponse_FieldTerminalPath{selector: WatchDeviceTypeResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchDeviceTypeResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeviceTypeResponse))
}

func (o *WatchDeviceTypeResponse) Clone() *WatchDeviceTypeResponse {
	if o == nil {
		return nil
	}
	result := &WatchDeviceTypeResponse{}
	result.Change = proto.Clone(o.Change).(*device_type.DeviceTypeChange)
	return result
}

func (o *WatchDeviceTypeResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeviceTypeResponse) Merge(source *WatchDeviceTypeResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(device_type.DeviceTypeChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchDeviceTypeResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeviceTypeResponse))
}

func (o *WatchDeviceTypesRequest) GotenObjectExt() {}

func (o *WatchDeviceTypesRequest) MakeFullFieldMask() *WatchDeviceTypesRequest_FieldMask {
	return FullWatchDeviceTypesRequest_FieldMask()
}

func (o *WatchDeviceTypesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeviceTypesRequest_FieldMask()
}

func (o *WatchDeviceTypesRequest) MakeDiffFieldMask(other *WatchDeviceTypesRequest) *WatchDeviceTypesRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchDeviceTypesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeviceTypesRequest_FieldMask()
	}

	res := &WatchDeviceTypesRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchDeviceTypesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeviceTypesRequest))
}

func (o *WatchDeviceTypesRequest) Clone() *WatchDeviceTypesRequest {
	if o == nil {
		return nil
	}
	result := &WatchDeviceTypesRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &device_type.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &device_type.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &device_type.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &device_type.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*device_type.DeviceType_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchDeviceTypesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeviceTypesRequest) Merge(source *WatchDeviceTypesRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &device_type.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &device_type.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &device_type.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &device_type.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device_type.DeviceType_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchDeviceTypesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeviceTypesRequest))
}

func (o *WatchDeviceTypesResponse) GotenObjectExt() {}

func (o *WatchDeviceTypesResponse) MakeFullFieldMask() *WatchDeviceTypesResponse_FieldMask {
	return FullWatchDeviceTypesResponse_FieldMask()
}

func (o *WatchDeviceTypesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeviceTypesResponse_FieldMask()
}

func (o *WatchDeviceTypesResponse) MakeDiffFieldMask(other *WatchDeviceTypesResponse) *WatchDeviceTypesResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchDeviceTypesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeviceTypesResponse_FieldMask()
	}

	res := &WatchDeviceTypesResponse_FieldMask{}

	if len(o.GetDeviceTypeChanges()) == len(other.GetDeviceTypeChanges()) {
		for i, lValue := range o.GetDeviceTypeChanges() {
			rValue := other.GetDeviceTypeChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldSubPath{selector: WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchDeviceTypesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeviceTypesResponse))
}

func (o *WatchDeviceTypesResponse) Clone() *WatchDeviceTypesResponse {
	if o == nil {
		return nil
	}
	result := &WatchDeviceTypesResponse{}
	result.DeviceTypeChanges = make([]*device_type.DeviceTypeChange, len(o.DeviceTypeChanges))
	for i, sourceValue := range o.DeviceTypeChanges {
		result.DeviceTypeChanges[i] = proto.Clone(sourceValue).(*device_type.DeviceTypeChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchDeviceTypesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeviceTypesResponse) Merge(source *WatchDeviceTypesResponse) {
	for _, sourceValue := range source.GetDeviceTypeChanges() {
		exists := false
		for _, currentValue := range o.DeviceTypeChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *device_type.DeviceTypeChange
			if sourceValue != nil {
				newDstElement = new(device_type.DeviceTypeChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.DeviceTypeChanges = append(o.DeviceTypeChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchDeviceTypesResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchDeviceTypesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeviceTypesResponse))
}

func (o *WatchDeviceTypesResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchDeviceTypesResponse_PageTokenChange) MakeFullFieldMask() *WatchDeviceTypesResponse_PageTokenChange_FieldMask {
	return FullWatchDeviceTypesResponse_PageTokenChange_FieldMask()
}

func (o *WatchDeviceTypesResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDeviceTypesResponse_PageTokenChange_FieldMask()
}

func (o *WatchDeviceTypesResponse_PageTokenChange) MakeDiffFieldMask(other *WatchDeviceTypesResponse_PageTokenChange) *WatchDeviceTypesResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchDeviceTypesResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDeviceTypesResponse_PageTokenChange_FieldMask()
	}

	res := &WatchDeviceTypesResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath{selector: WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath{selector: WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchDeviceTypesResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDeviceTypesResponse_PageTokenChange))
}

func (o *WatchDeviceTypesResponse_PageTokenChange) Clone() *WatchDeviceTypesResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchDeviceTypesResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &device_type.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &device_type.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchDeviceTypesResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDeviceTypesResponse_PageTokenChange) Merge(source *WatchDeviceTypesResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &device_type.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &device_type.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchDeviceTypesResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDeviceTypesResponse_PageTokenChange))
}

func (o *CreateDeviceTypeRequest) GotenObjectExt() {}

func (o *CreateDeviceTypeRequest) MakeFullFieldMask() *CreateDeviceTypeRequest_FieldMask {
	return FullCreateDeviceTypeRequest_FieldMask()
}

func (o *CreateDeviceTypeRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateDeviceTypeRequest_FieldMask()
}

func (o *CreateDeviceTypeRequest) MakeDiffFieldMask(other *CreateDeviceTypeRequest) *CreateDeviceTypeRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateDeviceTypeRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateDeviceTypeRequest_FieldMask()
	}

	res := &CreateDeviceTypeRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateDeviceTypeRequest_FieldTerminalPath{selector: CreateDeviceTypeRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetDeviceType().MakeDiffFieldMask(other.GetDeviceType())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateDeviceTypeRequest_FieldTerminalPath{selector: CreateDeviceTypeRequest_FieldPathSelectorDeviceType})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateDeviceTypeRequest_FieldSubPath{selector: CreateDeviceTypeRequest_FieldPathSelectorDeviceType, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateDeviceTypeRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateDeviceTypeRequest))
}

func (o *CreateDeviceTypeRequest) Clone() *CreateDeviceTypeRequest {
	if o == nil {
		return nil
	}
	result := &CreateDeviceTypeRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &device_type.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DeviceType = o.DeviceType.Clone()
	return result
}

func (o *CreateDeviceTypeRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateDeviceTypeRequest) Merge(source *CreateDeviceTypeRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &device_type.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetDeviceType() != nil {
		if o.DeviceType == nil {
			o.DeviceType = new(device_type.DeviceType)
		}
		o.DeviceType.Merge(source.GetDeviceType())
	}
}

func (o *CreateDeviceTypeRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateDeviceTypeRequest))
}

func (o *UpdateDeviceTypeRequest) GotenObjectExt() {}

func (o *UpdateDeviceTypeRequest) MakeFullFieldMask() *UpdateDeviceTypeRequest_FieldMask {
	return FullUpdateDeviceTypeRequest_FieldMask()
}

func (o *UpdateDeviceTypeRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateDeviceTypeRequest_FieldMask()
}

func (o *UpdateDeviceTypeRequest) MakeDiffFieldMask(other *UpdateDeviceTypeRequest) *UpdateDeviceTypeRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateDeviceTypeRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateDeviceTypeRequest_FieldMask()
	}

	res := &UpdateDeviceTypeRequest_FieldMask{}
	{
		subMask := o.GetDeviceType().MakeDiffFieldMask(other.GetDeviceType())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDeviceTypeRequest_FieldTerminalPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorDeviceType})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDeviceTypeRequest_FieldSubPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorDeviceType, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateDeviceTypeRequest_FieldTerminalPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDeviceTypeRequest_FieldTerminalPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDeviceTypeRequest_FieldSubPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateDeviceTypeRequest_FieldTerminalPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateDeviceTypeRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateDeviceTypeRequest))
}

func (o *UpdateDeviceTypeRequest) Clone() *UpdateDeviceTypeRequest {
	if o == nil {
		return nil
	}
	result := &UpdateDeviceTypeRequest{}
	result.DeviceType = o.DeviceType.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*device_type.DeviceType_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateDeviceTypeRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateDeviceTypeRequest) Merge(source *UpdateDeviceTypeRequest) {
	if source.GetDeviceType() != nil {
		if o.DeviceType == nil {
			o.DeviceType = new(device_type.DeviceType)
		}
		o.DeviceType.Merge(source.GetDeviceType())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(device_type.DeviceType_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateDeviceTypeRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateDeviceTypeRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateDeviceTypeRequest))
}

func (o *UpdateDeviceTypeRequest_CAS) GotenObjectExt() {}

func (o *UpdateDeviceTypeRequest_CAS) MakeFullFieldMask() *UpdateDeviceTypeRequest_CAS_FieldMask {
	return FullUpdateDeviceTypeRequest_CAS_FieldMask()
}

func (o *UpdateDeviceTypeRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateDeviceTypeRequest_CAS_FieldMask()
}

func (o *UpdateDeviceTypeRequest_CAS) MakeDiffFieldMask(other *UpdateDeviceTypeRequest_CAS) *UpdateDeviceTypeRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateDeviceTypeRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateDeviceTypeRequest_CAS_FieldMask()
	}

	res := &UpdateDeviceTypeRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDeviceTypeRequestCAS_FieldTerminalPath{selector: UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDeviceTypeRequestCAS_FieldSubPath{selector: UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateDeviceTypeRequestCAS_FieldTerminalPath{selector: UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateDeviceTypeRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateDeviceTypeRequest_CAS))
}

func (o *UpdateDeviceTypeRequest_CAS) Clone() *UpdateDeviceTypeRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateDeviceTypeRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*device_type.DeviceType_FieldMask)
	return result
}

func (o *UpdateDeviceTypeRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateDeviceTypeRequest_CAS) Merge(source *UpdateDeviceTypeRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(device_type.DeviceType)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(device_type.DeviceType_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateDeviceTypeRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateDeviceTypeRequest_CAS))
}

func (o *DeleteDeviceTypeRequest) GotenObjectExt() {}

func (o *DeleteDeviceTypeRequest) MakeFullFieldMask() *DeleteDeviceTypeRequest_FieldMask {
	return FullDeleteDeviceTypeRequest_FieldMask()
}

func (o *DeleteDeviceTypeRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteDeviceTypeRequest_FieldMask()
}

func (o *DeleteDeviceTypeRequest) MakeDiffFieldMask(other *DeleteDeviceTypeRequest) *DeleteDeviceTypeRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteDeviceTypeRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteDeviceTypeRequest_FieldMask()
	}

	res := &DeleteDeviceTypeRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteDeviceTypeRequest_FieldTerminalPath{selector: DeleteDeviceTypeRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteDeviceTypeRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteDeviceTypeRequest))
}

func (o *DeleteDeviceTypeRequest) Clone() *DeleteDeviceTypeRequest {
	if o == nil {
		return nil
	}
	result := &DeleteDeviceTypeRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &device_type.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteDeviceTypeRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteDeviceTypeRequest) Merge(source *DeleteDeviceTypeRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &device_type.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteDeviceTypeRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteDeviceTypeRequest))
}
