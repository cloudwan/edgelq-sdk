// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/device_type_service.proto
// DO NOT EDIT!!!

package device_type_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device_type "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device_type"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &device_type.DeviceType{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetDeviceTypeRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetDeviceTypeRequest_FieldPathSelector
	Get(source *GetDeviceTypeRequest) []interface{}
	GetSingle(source *GetDeviceTypeRequest) (interface{}, bool)
	ClearValue(item *GetDeviceTypeRequest)

	// Those methods build corresponding GetDeviceTypeRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetDeviceTypeRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetDeviceTypeRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetDeviceTypeRequest_FieldPathArrayItemValue
}

type GetDeviceTypeRequest_FieldPathSelector int32

const (
	GetDeviceTypeRequest_FieldPathSelectorName      GetDeviceTypeRequest_FieldPathSelector = 0
	GetDeviceTypeRequest_FieldPathSelectorFieldMask GetDeviceTypeRequest_FieldPathSelector = 1
	GetDeviceTypeRequest_FieldPathSelectorView      GetDeviceTypeRequest_FieldPathSelector = 2
)

func (s GetDeviceTypeRequest_FieldPathSelector) String() string {
	switch s {
	case GetDeviceTypeRequest_FieldPathSelectorName:
		return "name"
	case GetDeviceTypeRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetDeviceTypeRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceTypeRequest: %d", s))
	}
}

func BuildGetDeviceTypeRequest_FieldPath(fp gotenobject.RawFieldPath) (GetDeviceTypeRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetDeviceTypeRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetDeviceTypeRequest_FieldTerminalPath{selector: GetDeviceTypeRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetDeviceTypeRequest_FieldTerminalPath{selector: GetDeviceTypeRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetDeviceTypeRequest_FieldTerminalPath{selector: GetDeviceTypeRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetDeviceTypeRequest", fp)
}

func ParseGetDeviceTypeRequest_FieldPath(rawField string) (GetDeviceTypeRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetDeviceTypeRequest_FieldPath(fp)
}

func MustParseGetDeviceTypeRequest_FieldPath(rawField string) GetDeviceTypeRequest_FieldPath {
	fp, err := ParseGetDeviceTypeRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetDeviceTypeRequest_FieldTerminalPath struct {
	selector GetDeviceTypeRequest_FieldPathSelector
}

var _ GetDeviceTypeRequest_FieldPath = (*GetDeviceTypeRequest_FieldTerminalPath)(nil)

func (fp *GetDeviceTypeRequest_FieldTerminalPath) Selector() GetDeviceTypeRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetDeviceTypeRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetDeviceTypeRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetDeviceTypeRequest
func (fp *GetDeviceTypeRequest_FieldTerminalPath) Get(source *GetDeviceTypeRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetDeviceTypeRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetDeviceTypeRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetDeviceTypeRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetDeviceTypeRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetDeviceTypeRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetDeviceTypeRequest))
}

// GetSingle returns value pointed by specific field of from source GetDeviceTypeRequest
func (fp *GetDeviceTypeRequest_FieldTerminalPath) GetSingle(source *GetDeviceTypeRequest) (interface{}, bool) {
	switch fp.selector {
	case GetDeviceTypeRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetDeviceTypeRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetDeviceTypeRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *GetDeviceTypeRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetDeviceTypeRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetDeviceTypeRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetDeviceTypeRequest_FieldPathSelectorName:
		return (*device_type.Reference)(nil)
	case GetDeviceTypeRequest_FieldPathSelectorFieldMask:
		return (*device_type.DeviceType_FieldMask)(nil)
	case GetDeviceTypeRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *GetDeviceTypeRequest_FieldTerminalPath) ClearValue(item *GetDeviceTypeRequest) {
	if item != nil {
		switch fp.selector {
		case GetDeviceTypeRequest_FieldPathSelectorName:
			item.Name = nil
		case GetDeviceTypeRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetDeviceTypeRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetDeviceTypeRequest: %d", fp.selector))
		}
	}
}

func (fp *GetDeviceTypeRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetDeviceTypeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetDeviceTypeRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetDeviceTypeRequest_FieldPathSelectorName ||
		fp.selector == GetDeviceTypeRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetDeviceTypeRequest_FieldPathSelectorView
}

func (fp *GetDeviceTypeRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetDeviceTypeRequest_FieldTerminalPath) WithIValue(value interface{}) GetDeviceTypeRequest_FieldPathValue {
	switch fp.selector {
	case GetDeviceTypeRequest_FieldPathSelectorName:
		return &GetDeviceTypeRequest_FieldTerminalPathValue{GetDeviceTypeRequest_FieldTerminalPath: *fp, value: value.(*device_type.Reference)}
	case GetDeviceTypeRequest_FieldPathSelectorFieldMask:
		return &GetDeviceTypeRequest_FieldTerminalPathValue{GetDeviceTypeRequest_FieldTerminalPath: *fp, value: value.(*device_type.DeviceType_FieldMask)}
	case GetDeviceTypeRequest_FieldPathSelectorView:
		return &GetDeviceTypeRequest_FieldTerminalPathValue{GetDeviceTypeRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *GetDeviceTypeRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetDeviceTypeRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetDeviceTypeRequest_FieldPathArrayOfValues {
	fpaov := &GetDeviceTypeRequest_FieldTerminalPathArrayOfValues{GetDeviceTypeRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetDeviceTypeRequest_FieldPathSelectorName:
		return &GetDeviceTypeRequest_FieldTerminalPathArrayOfValues{GetDeviceTypeRequest_FieldTerminalPath: *fp, values: values.([]*device_type.Reference)}
	case GetDeviceTypeRequest_FieldPathSelectorFieldMask:
		return &GetDeviceTypeRequest_FieldTerminalPathArrayOfValues{GetDeviceTypeRequest_FieldTerminalPath: *fp, values: values.([]*device_type.DeviceType_FieldMask)}
	case GetDeviceTypeRequest_FieldPathSelectorView:
		return &GetDeviceTypeRequest_FieldTerminalPathArrayOfValues{GetDeviceTypeRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceTypeRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetDeviceTypeRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetDeviceTypeRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetDeviceTypeRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *GetDeviceTypeRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetDeviceTypeRequest_FieldPathValue allows storing values for GetDeviceTypeRequest fields according to their type
type GetDeviceTypeRequest_FieldPathValue interface {
	GetDeviceTypeRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetDeviceTypeRequest)
	CompareWith(*GetDeviceTypeRequest) (cmp int, comparable bool)
}

func ParseGetDeviceTypeRequest_FieldPathValue(pathStr, valueStr string) (GetDeviceTypeRequest_FieldPathValue, error) {
	fp, err := ParseGetDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDeviceTypeRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetDeviceTypeRequest_FieldPathValue), nil
}

func MustParseGetDeviceTypeRequest_FieldPathValue(pathStr, valueStr string) GetDeviceTypeRequest_FieldPathValue {
	fpv, err := ParseGetDeviceTypeRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetDeviceTypeRequest_FieldTerminalPathValue struct {
	GetDeviceTypeRequest_FieldTerminalPath
	value interface{}
}

var _ GetDeviceTypeRequest_FieldPathValue = (*GetDeviceTypeRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetDeviceTypeRequest' as interface{}
func (fpv *GetDeviceTypeRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetDeviceTypeRequest_FieldTerminalPathValue) AsNameValue() (*device_type.Reference, bool) {
	res, ok := fpv.value.(*device_type.Reference)
	return res, ok
}
func (fpv *GetDeviceTypeRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device_type.DeviceType_FieldMask, bool) {
	res, ok := fpv.value.(*device_type.DeviceType_FieldMask)
	return res, ok
}
func (fpv *GetDeviceTypeRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetDeviceTypeRequest
func (fpv *GetDeviceTypeRequest_FieldTerminalPathValue) SetTo(target **GetDeviceTypeRequest) {
	if *target == nil {
		*target = new(GetDeviceTypeRequest)
	}
	switch fpv.selector {
	case GetDeviceTypeRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*device_type.Reference)
	case GetDeviceTypeRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device_type.DeviceType_FieldMask)
	case GetDeviceTypeRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceTypeRequest: %d", fpv.selector))
	}
}

func (fpv *GetDeviceTypeRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetDeviceTypeRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetDeviceTypeRequest_FieldTerminalPathValue' with the value under path in 'GetDeviceTypeRequest'.
func (fpv *GetDeviceTypeRequest_FieldTerminalPathValue) CompareWith(source *GetDeviceTypeRequest) (int, bool) {
	switch fpv.selector {
	case GetDeviceTypeRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*device_type.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetDeviceTypeRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetDeviceTypeRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDeviceTypeRequest: %d", fpv.selector))
	}
}

func (fpv *GetDeviceTypeRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetDeviceTypeRequest))
}

// GetDeviceTypeRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetDeviceTypeRequest according to their type
// Present only for array (repeated) types.
type GetDeviceTypeRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetDeviceTypeRequest_FieldPath
	ContainsValue(*GetDeviceTypeRequest) bool
}

// ParseGetDeviceTypeRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetDeviceTypeRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDeviceTypeRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetDeviceTypeRequest_FieldPathArrayItemValue), nil
}

func MustParseGetDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetDeviceTypeRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetDeviceTypeRequest_FieldTerminalPathArrayItemValue struct {
	GetDeviceTypeRequest_FieldTerminalPath
	value interface{}
}

var _ GetDeviceTypeRequest_FieldPathArrayItemValue = (*GetDeviceTypeRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetDeviceTypeRequest as interface{}
func (fpaiv *GetDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetDeviceTypeRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetDeviceTypeRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetDeviceTypeRequest'
func (fpaiv *GetDeviceTypeRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetDeviceTypeRequest) bool {
	slice := fpaiv.GetDeviceTypeRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetDeviceTypeRequest_FieldPathArrayOfValues allows storing slice of values for GetDeviceTypeRequest fields according to their type
type GetDeviceTypeRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetDeviceTypeRequest_FieldPath
}

func ParseGetDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetDeviceTypeRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDeviceTypeRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetDeviceTypeRequest_FieldPathArrayOfValues), nil
}

func MustParseGetDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetDeviceTypeRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetDeviceTypeRequest_FieldTerminalPathArrayOfValues struct {
	GetDeviceTypeRequest_FieldTerminalPath
	values interface{}
}

var _ GetDeviceTypeRequest_FieldPathArrayOfValues = (*GetDeviceTypeRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetDeviceTypeRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetDeviceTypeRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*device_type.Reference) {
			values = append(values, v)
		}
	case GetDeviceTypeRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device_type.DeviceType_FieldMask) {
			values = append(values, v)
		}
	case GetDeviceTypeRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetDeviceTypeRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*device_type.Reference, bool) {
	res, ok := fpaov.values.([]*device_type.Reference)
	return res, ok
}
func (fpaov *GetDeviceTypeRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device_type.DeviceType_FieldMask, bool) {
	res, ok := fpaov.values.([]*device_type.DeviceType_FieldMask)
	return res, ok
}
func (fpaov *GetDeviceTypeRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetDeviceTypesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetDeviceTypesRequest_FieldPathSelector
	Get(source *BatchGetDeviceTypesRequest) []interface{}
	GetSingle(source *BatchGetDeviceTypesRequest) (interface{}, bool)
	ClearValue(item *BatchGetDeviceTypesRequest)

	// Those methods build corresponding BatchGetDeviceTypesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetDeviceTypesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetDeviceTypesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetDeviceTypesRequest_FieldPathArrayItemValue
}

type BatchGetDeviceTypesRequest_FieldPathSelector int32

const (
	BatchGetDeviceTypesRequest_FieldPathSelectorNames     BatchGetDeviceTypesRequest_FieldPathSelector = 0
	BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask BatchGetDeviceTypesRequest_FieldPathSelector = 1
	BatchGetDeviceTypesRequest_FieldPathSelectorView      BatchGetDeviceTypesRequest_FieldPathSelector = 2
)

func (s BatchGetDeviceTypesRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetDeviceTypesRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetDeviceTypesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesRequest: %d", s))
	}
}

func BuildBatchGetDeviceTypesRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetDeviceTypesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetDeviceTypesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetDeviceTypesRequest_FieldTerminalPath{selector: BatchGetDeviceTypesRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetDeviceTypesRequest_FieldTerminalPath{selector: BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetDeviceTypesRequest_FieldTerminalPath{selector: BatchGetDeviceTypesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetDeviceTypesRequest", fp)
}

func ParseBatchGetDeviceTypesRequest_FieldPath(rawField string) (BatchGetDeviceTypesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetDeviceTypesRequest_FieldPath(fp)
}

func MustParseBatchGetDeviceTypesRequest_FieldPath(rawField string) BatchGetDeviceTypesRequest_FieldPath {
	fp, err := ParseBatchGetDeviceTypesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetDeviceTypesRequest_FieldTerminalPath struct {
	selector BatchGetDeviceTypesRequest_FieldPathSelector
}

var _ BatchGetDeviceTypesRequest_FieldPath = (*BatchGetDeviceTypesRequest_FieldTerminalPath)(nil)

func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) Selector() BatchGetDeviceTypesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetDeviceTypesRequest
func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) Get(source *BatchGetDeviceTypesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetDeviceTypesRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetDeviceTypesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetDeviceTypesRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetDeviceTypesRequest
func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) GetSingle(source *BatchGetDeviceTypesRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetDeviceTypesRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetDeviceTypesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetDeviceTypesRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetDeviceTypesRequest_FieldPathSelectorNames:
		return ([]*device_type.Reference)(nil)
	case BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask:
		return (*device_type.DeviceType_FieldMask)(nil)
	case BatchGetDeviceTypesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) ClearValue(item *BatchGetDeviceTypesRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetDeviceTypesRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetDeviceTypesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetDeviceTypesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetDeviceTypesRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetDeviceTypesRequest_FieldPathSelectorView
}

func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetDeviceTypesRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetDeviceTypesRequest_FieldPathSelectorNames:
		return &BatchGetDeviceTypesRequest_FieldTerminalPathValue{BatchGetDeviceTypesRequest_FieldTerminalPath: *fp, value: value.([]*device_type.Reference)}
	case BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask:
		return &BatchGetDeviceTypesRequest_FieldTerminalPathValue{BatchGetDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(*device_type.DeviceType_FieldMask)}
	case BatchGetDeviceTypesRequest_FieldPathSelectorView:
		return &BatchGetDeviceTypesRequest_FieldTerminalPathValue{BatchGetDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetDeviceTypesRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetDeviceTypesRequest_FieldTerminalPathArrayOfValues{BatchGetDeviceTypesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetDeviceTypesRequest_FieldPathSelectorNames:
		return &BatchGetDeviceTypesRequest_FieldTerminalPathArrayOfValues{BatchGetDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([][]*device_type.Reference)}
	case BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask:
		return &BatchGetDeviceTypesRequest_FieldTerminalPathArrayOfValues{BatchGetDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]*device_type.DeviceType_FieldMask)}
	case BatchGetDeviceTypesRequest_FieldPathSelectorView:
		return &BatchGetDeviceTypesRequest_FieldTerminalPathArrayOfValues{BatchGetDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetDeviceTypesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetDeviceTypesRequest_FieldPathSelectorNames:
		return &BatchGetDeviceTypesRequest_FieldTerminalPathArrayItemValue{BatchGetDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(*device_type.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceTypesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetDeviceTypesRequest_FieldPathValue allows storing values for BatchGetDeviceTypesRequest fields according to their type
type BatchGetDeviceTypesRequest_FieldPathValue interface {
	BatchGetDeviceTypesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetDeviceTypesRequest)
	CompareWith(*BatchGetDeviceTypesRequest) (cmp int, comparable bool)
}

func ParseBatchGetDeviceTypesRequest_FieldPathValue(pathStr, valueStr string) (BatchGetDeviceTypesRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetDeviceTypesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeviceTypesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetDeviceTypesRequest_FieldPathValue), nil
}

func MustParseBatchGetDeviceTypesRequest_FieldPathValue(pathStr, valueStr string) BatchGetDeviceTypesRequest_FieldPathValue {
	fpv, err := ParseBatchGetDeviceTypesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetDeviceTypesRequest_FieldTerminalPathValue struct {
	BatchGetDeviceTypesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetDeviceTypesRequest_FieldPathValue = (*BatchGetDeviceTypesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetDeviceTypesRequest' as interface{}
func (fpv *BatchGetDeviceTypesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetDeviceTypesRequest_FieldTerminalPathValue) AsNamesValue() ([]*device_type.Reference, bool) {
	res, ok := fpv.value.([]*device_type.Reference)
	return res, ok
}
func (fpv *BatchGetDeviceTypesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device_type.DeviceType_FieldMask, bool) {
	res, ok := fpv.value.(*device_type.DeviceType_FieldMask)
	return res, ok
}
func (fpv *BatchGetDeviceTypesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetDeviceTypesRequest
func (fpv *BatchGetDeviceTypesRequest_FieldTerminalPathValue) SetTo(target **BatchGetDeviceTypesRequest) {
	if *target == nil {
		*target = new(BatchGetDeviceTypesRequest)
	}
	switch fpv.selector {
	case BatchGetDeviceTypesRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*device_type.Reference)
	case BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device_type.DeviceType_FieldMask)
	case BatchGetDeviceTypesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetDeviceTypesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDeviceTypesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetDeviceTypesRequest_FieldTerminalPathValue' with the value under path in 'BatchGetDeviceTypesRequest'.
func (fpv *BatchGetDeviceTypesRequest_FieldTerminalPathValue) CompareWith(source *BatchGetDeviceTypesRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetDeviceTypesRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetDeviceTypesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetDeviceTypesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetDeviceTypesRequest))
}

// BatchGetDeviceTypesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetDeviceTypesRequest according to their type
// Present only for array (repeated) types.
type BatchGetDeviceTypesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetDeviceTypesRequest_FieldPath
	ContainsValue(*BatchGetDeviceTypesRequest) bool
}

// ParseBatchGetDeviceTypesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetDeviceTypesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetDeviceTypesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetDeviceTypesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeviceTypesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetDeviceTypesRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetDeviceTypesRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetDeviceTypesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetDeviceTypesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetDeviceTypesRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetDeviceTypesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetDeviceTypesRequest_FieldPathArrayItemValue = (*BatchGetDeviceTypesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetDeviceTypesRequest as interface{}
func (fpaiv *BatchGetDeviceTypesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetDeviceTypesRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*device_type.Reference, bool) {
	res, ok := fpaiv.value.(*device_type.Reference)
	return res, ok
}

func (fpaiv *BatchGetDeviceTypesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetDeviceTypesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetDeviceTypesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetDeviceTypesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDeviceTypesRequest'
func (fpaiv *BatchGetDeviceTypesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetDeviceTypesRequest) bool {
	slice := fpaiv.BatchGetDeviceTypesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetDeviceTypesRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetDeviceTypesRequest fields according to their type
type BatchGetDeviceTypesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetDeviceTypesRequest_FieldPath
}

func ParseBatchGetDeviceTypesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetDeviceTypesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetDeviceTypesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeviceTypesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetDeviceTypesRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetDeviceTypesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetDeviceTypesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetDeviceTypesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetDeviceTypesRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetDeviceTypesRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetDeviceTypesRequest_FieldPathArrayOfValues = (*BatchGetDeviceTypesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetDeviceTypesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetDeviceTypesRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*device_type.Reference) {
			values = append(values, v)
		}
	case BatchGetDeviceTypesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device_type.DeviceType_FieldMask) {
			values = append(values, v)
		}
	case BatchGetDeviceTypesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*device_type.Reference, bool) {
	res, ok := fpaov.values.([][]*device_type.Reference)
	return res, ok
}
func (fpaov *BatchGetDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device_type.DeviceType_FieldMask, bool) {
	res, ok := fpaov.values.([]*device_type.DeviceType_FieldMask)
	return res, ok
}
func (fpaov *BatchGetDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetDeviceTypesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetDeviceTypesResponse_FieldPathSelector
	Get(source *BatchGetDeviceTypesResponse) []interface{}
	GetSingle(source *BatchGetDeviceTypesResponse) (interface{}, bool)
	ClearValue(item *BatchGetDeviceTypesResponse)

	// Those methods build corresponding BatchGetDeviceTypesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetDeviceTypesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetDeviceTypesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetDeviceTypesResponse_FieldPathArrayItemValue
}

type BatchGetDeviceTypesResponse_FieldPathSelector int32

const (
	BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes BatchGetDeviceTypesResponse_FieldPathSelector = 0
	BatchGetDeviceTypesResponse_FieldPathSelectorMissing     BatchGetDeviceTypesResponse_FieldPathSelector = 1
)

func (s BatchGetDeviceTypesResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return "device_types"
	case BatchGetDeviceTypesResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", s))
	}
}

func BuildBatchGetDeviceTypesResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetDeviceTypesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetDeviceTypesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device_types", "deviceTypes", "device-types":
			return &BatchGetDeviceTypesResponse_FieldTerminalPath{selector: BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes}, nil
		case "missing":
			return &BatchGetDeviceTypesResponse_FieldTerminalPath{selector: BatchGetDeviceTypesResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "device_types", "deviceTypes", "device-types":
			if subpath, err := device_type.BuildDeviceType_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetDeviceTypesResponse_FieldSubPath{selector: BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetDeviceTypesResponse", fp)
}

func ParseBatchGetDeviceTypesResponse_FieldPath(rawField string) (BatchGetDeviceTypesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetDeviceTypesResponse_FieldPath(fp)
}

func MustParseBatchGetDeviceTypesResponse_FieldPath(rawField string) BatchGetDeviceTypesResponse_FieldPath {
	fp, err := ParseBatchGetDeviceTypesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetDeviceTypesResponse_FieldTerminalPath struct {
	selector BatchGetDeviceTypesResponse_FieldPathSelector
}

var _ BatchGetDeviceTypesResponse_FieldPath = (*BatchGetDeviceTypesResponse_FieldTerminalPath)(nil)

func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) Selector() BatchGetDeviceTypesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetDeviceTypesResponse
func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) Get(source *BatchGetDeviceTypesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
			for _, value := range source.GetDeviceTypes() {
				values = append(values, value)
			}
		case BatchGetDeviceTypesResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetDeviceTypesResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetDeviceTypesResponse
func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) GetSingle(source *BatchGetDeviceTypesResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		res := source.GetDeviceTypes()
		return res, res != nil
	case BatchGetDeviceTypesResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetDeviceTypesResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return ([]*device_type.DeviceType)(nil)
	case BatchGetDeviceTypesResponse_FieldPathSelectorMissing:
		return ([]*device_type.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) ClearValue(item *BatchGetDeviceTypesResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
			item.DeviceTypes = nil
		case BatchGetDeviceTypesResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetDeviceTypesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetDeviceTypesResponse_FieldPathSelectorMissing
}

func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetDeviceTypesResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return &BatchGetDeviceTypesResponse_FieldTerminalPathValue{BatchGetDeviceTypesResponse_FieldTerminalPath: *fp, value: value.([]*device_type.DeviceType)}
	case BatchGetDeviceTypesResponse_FieldPathSelectorMissing:
		return &BatchGetDeviceTypesResponse_FieldTerminalPathValue{BatchGetDeviceTypesResponse_FieldTerminalPath: *fp, value: value.([]*device_type.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetDeviceTypesResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetDeviceTypesResponse_FieldTerminalPathArrayOfValues{BatchGetDeviceTypesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return &BatchGetDeviceTypesResponse_FieldTerminalPathArrayOfValues{BatchGetDeviceTypesResponse_FieldTerminalPath: *fp, values: values.([][]*device_type.DeviceType)}
	case BatchGetDeviceTypesResponse_FieldPathSelectorMissing:
		return &BatchGetDeviceTypesResponse_FieldTerminalPathArrayOfValues{BatchGetDeviceTypesResponse_FieldTerminalPath: *fp, values: values.([][]*device_type.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetDeviceTypesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return &BatchGetDeviceTypesResponse_FieldTerminalPathArrayItemValue{BatchGetDeviceTypesResponse_FieldTerminalPath: *fp, value: value.(*device_type.DeviceType)}
	case BatchGetDeviceTypesResponse_FieldPathSelectorMissing:
		return &BatchGetDeviceTypesResponse_FieldTerminalPathArrayItemValue{BatchGetDeviceTypesResponse_FieldTerminalPath: *fp, value: value.(*device_type.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDeviceTypesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetDeviceTypesResponse_FieldSubPath struct {
	selector BatchGetDeviceTypesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetDeviceTypesResponse_FieldPath = (*BatchGetDeviceTypesResponse_FieldSubPath)(nil)

func (fps *BatchGetDeviceTypesResponse_FieldSubPath) Selector() BatchGetDeviceTypesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetDeviceTypesResponse_FieldSubPath) AsDeviceTypesSubPath() (device_type.DeviceType_FieldPath, bool) {
	res, ok := fps.subPath.(device_type.DeviceType_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetDeviceTypesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetDeviceTypesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetDeviceTypesResponse
func (fps *BatchGetDeviceTypesResponse_FieldSubPath) Get(source *BatchGetDeviceTypesResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		for _, item := range source.GetDeviceTypes() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetDeviceTypesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetDeviceTypesResponse))
}

// GetSingle returns value of selected field from source BatchGetDeviceTypesResponse
func (fps *BatchGetDeviceTypesResponse_FieldSubPath) GetSingle(source *BatchGetDeviceTypesResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		if len(source.GetDeviceTypes()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDeviceTypes()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fps.selector))
	}
}

func (fps *BatchGetDeviceTypesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetDeviceTypesResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetDeviceTypesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetDeviceTypesResponse_FieldSubPath) ClearValue(item *BatchGetDeviceTypesResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
			for _, subItem := range item.DeviceTypes {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetDeviceTypesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetDeviceTypesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetDeviceTypesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetDeviceTypesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetDeviceTypesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetDeviceTypesResponse_FieldSubPath) WithIValue(value interface{}) BatchGetDeviceTypesResponse_FieldPathValue {
	return &BatchGetDeviceTypesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetDeviceTypesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetDeviceTypesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetDeviceTypesResponse_FieldPathArrayOfValues {
	return &BatchGetDeviceTypesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetDeviceTypesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetDeviceTypesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetDeviceTypesResponse_FieldPathArrayItemValue {
	return &BatchGetDeviceTypesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetDeviceTypesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetDeviceTypesResponse_FieldPathValue allows storing values for BatchGetDeviceTypesResponse fields according to their type
type BatchGetDeviceTypesResponse_FieldPathValue interface {
	BatchGetDeviceTypesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetDeviceTypesResponse)
	CompareWith(*BatchGetDeviceTypesResponse) (cmp int, comparable bool)
}

func ParseBatchGetDeviceTypesResponse_FieldPathValue(pathStr, valueStr string) (BatchGetDeviceTypesResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetDeviceTypesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeviceTypesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetDeviceTypesResponse_FieldPathValue), nil
}

func MustParseBatchGetDeviceTypesResponse_FieldPathValue(pathStr, valueStr string) BatchGetDeviceTypesResponse_FieldPathValue {
	fpv, err := ParseBatchGetDeviceTypesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetDeviceTypesResponse_FieldTerminalPathValue struct {
	BatchGetDeviceTypesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetDeviceTypesResponse_FieldPathValue = (*BatchGetDeviceTypesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetDeviceTypesResponse' as interface{}
func (fpv *BatchGetDeviceTypesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetDeviceTypesResponse_FieldTerminalPathValue) AsDeviceTypesValue() ([]*device_type.DeviceType, bool) {
	res, ok := fpv.value.([]*device_type.DeviceType)
	return res, ok
}
func (fpv *BatchGetDeviceTypesResponse_FieldTerminalPathValue) AsMissingValue() ([]*device_type.Reference, bool) {
	res, ok := fpv.value.([]*device_type.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetDeviceTypesResponse
func (fpv *BatchGetDeviceTypesResponse_FieldTerminalPathValue) SetTo(target **BatchGetDeviceTypesResponse) {
	if *target == nil {
		*target = new(BatchGetDeviceTypesResponse)
	}
	switch fpv.selector {
	case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		(*target).DeviceTypes = fpv.value.([]*device_type.DeviceType)
	case BatchGetDeviceTypesResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*device_type.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetDeviceTypesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDeviceTypesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetDeviceTypesResponse_FieldTerminalPathValue' with the value under path in 'BatchGetDeviceTypesResponse'.
func (fpv *BatchGetDeviceTypesResponse_FieldTerminalPathValue) CompareWith(source *BatchGetDeviceTypesResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return 0, false
	case BatchGetDeviceTypesResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetDeviceTypesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetDeviceTypesResponse))
}

type BatchGetDeviceTypesResponse_FieldSubPathValue struct {
	BatchGetDeviceTypesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetDeviceTypesResponse_FieldPathValue = (*BatchGetDeviceTypesResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetDeviceTypesResponse_FieldSubPathValue) AsDeviceTypesPathValue() (device_type.DeviceType_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device_type.DeviceType_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetDeviceTypesResponse_FieldSubPathValue) SetTo(target **BatchGetDeviceTypesResponse) {
	if *target == nil {
		*target = new(BatchGetDeviceTypesResponse)
	}
	switch fpvs.Selector() {
	case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetDeviceTypesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDeviceTypesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetDeviceTypesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetDeviceTypesResponse_FieldSubPathValue) CompareWith(source *BatchGetDeviceTypesResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetDeviceTypesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetDeviceTypesResponse))
}

// BatchGetDeviceTypesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetDeviceTypesResponse according to their type
// Present only for array (repeated) types.
type BatchGetDeviceTypesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetDeviceTypesResponse_FieldPath
	ContainsValue(*BatchGetDeviceTypesResponse) bool
}

// ParseBatchGetDeviceTypesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetDeviceTypesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetDeviceTypesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetDeviceTypesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeviceTypesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetDeviceTypesResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetDeviceTypesResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetDeviceTypesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetDeviceTypesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetDeviceTypesResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetDeviceTypesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetDeviceTypesResponse_FieldPathArrayItemValue = (*BatchGetDeviceTypesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetDeviceTypesResponse as interface{}
func (fpaiv *BatchGetDeviceTypesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetDeviceTypesResponse_FieldTerminalPathArrayItemValue) AsDeviceTypesItemValue() (*device_type.DeviceType, bool) {
	res, ok := fpaiv.value.(*device_type.DeviceType)
	return res, ok
}
func (fpaiv *BatchGetDeviceTypesResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*device_type.Reference, bool) {
	res, ok := fpaiv.value.(*device_type.Reference)
	return res, ok
}

func (fpaiv *BatchGetDeviceTypesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetDeviceTypesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetDeviceTypesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetDeviceTypesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDeviceTypesResponse'
func (fpaiv *BatchGetDeviceTypesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetDeviceTypesResponse) bool {
	slice := fpaiv.BatchGetDeviceTypesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetDeviceTypesResponse_FieldSubPathArrayItemValue struct {
	BatchGetDeviceTypesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetDeviceTypesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetDeviceTypesResponse_FieldSubPathArrayItemValue) AsDeviceTypesPathItemValue() (device_type.DeviceType_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device_type.DeviceType_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDeviceTypesResponse'
func (fpaivs *BatchGetDeviceTypesResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetDeviceTypesResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDeviceTypesResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetDeviceTypesResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetDeviceTypesResponse fields according to their type
type BatchGetDeviceTypesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetDeviceTypesResponse_FieldPath
}

func ParseBatchGetDeviceTypesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetDeviceTypesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetDeviceTypesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDeviceTypesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetDeviceTypesResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetDeviceTypesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetDeviceTypesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetDeviceTypesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetDeviceTypesResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetDeviceTypesResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetDeviceTypesResponse_FieldPathArrayOfValues = (*BatchGetDeviceTypesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetDeviceTypesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		for _, v := range fpaov.values.([][]*device_type.DeviceType) {
			values = append(values, v)
		}
	case BatchGetDeviceTypesResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*device_type.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetDeviceTypesResponse_FieldTerminalPathArrayOfValues) AsDeviceTypesArrayOfValues() ([][]*device_type.DeviceType, bool) {
	res, ok := fpaov.values.([][]*device_type.DeviceType)
	return res, ok
}
func (fpaov *BatchGetDeviceTypesResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*device_type.Reference, bool) {
	res, ok := fpaov.values.([][]*device_type.Reference)
	return res, ok
}

type BatchGetDeviceTypesResponse_FieldSubPathArrayOfValues struct {
	BatchGetDeviceTypesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetDeviceTypesResponse_FieldPathArrayOfValues = (*BatchGetDeviceTypesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetDeviceTypesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetDeviceTypesResponse_FieldSubPathArrayOfValues) AsDeviceTypesPathArrayOfValues() (device_type.DeviceType_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device_type.DeviceType_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListDeviceTypesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListDeviceTypesRequest_FieldPathSelector
	Get(source *ListDeviceTypesRequest) []interface{}
	GetSingle(source *ListDeviceTypesRequest) (interface{}, bool)
	ClearValue(item *ListDeviceTypesRequest)

	// Those methods build corresponding ListDeviceTypesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListDeviceTypesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListDeviceTypesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListDeviceTypesRequest_FieldPathArrayItemValue
}

type ListDeviceTypesRequest_FieldPathSelector int32

const (
	ListDeviceTypesRequest_FieldPathSelectorPageSize          ListDeviceTypesRequest_FieldPathSelector = 0
	ListDeviceTypesRequest_FieldPathSelectorPageToken         ListDeviceTypesRequest_FieldPathSelector = 1
	ListDeviceTypesRequest_FieldPathSelectorOrderBy           ListDeviceTypesRequest_FieldPathSelector = 2
	ListDeviceTypesRequest_FieldPathSelectorFilter            ListDeviceTypesRequest_FieldPathSelector = 3
	ListDeviceTypesRequest_FieldPathSelectorFieldMask         ListDeviceTypesRequest_FieldPathSelector = 4
	ListDeviceTypesRequest_FieldPathSelectorView              ListDeviceTypesRequest_FieldPathSelector = 5
	ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo ListDeviceTypesRequest_FieldPathSelector = 6
)

func (s ListDeviceTypesRequest_FieldPathSelector) String() string {
	switch s {
	case ListDeviceTypesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListDeviceTypesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListDeviceTypesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListDeviceTypesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListDeviceTypesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListDeviceTypesRequest_FieldPathSelectorView:
		return "view"
	case ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesRequest: %d", s))
	}
}

func BuildListDeviceTypesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListDeviceTypesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListDeviceTypesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "page_size", "pageSize", "page-size":
			return &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListDeviceTypesRequest_FieldTerminalPath{selector: ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListDeviceTypesRequest", fp)
}

func ParseListDeviceTypesRequest_FieldPath(rawField string) (ListDeviceTypesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListDeviceTypesRequest_FieldPath(fp)
}

func MustParseListDeviceTypesRequest_FieldPath(rawField string) ListDeviceTypesRequest_FieldPath {
	fp, err := ParseListDeviceTypesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListDeviceTypesRequest_FieldTerminalPath struct {
	selector ListDeviceTypesRequest_FieldPathSelector
}

var _ ListDeviceTypesRequest_FieldPath = (*ListDeviceTypesRequest_FieldTerminalPath)(nil)

func (fp *ListDeviceTypesRequest_FieldTerminalPath) Selector() ListDeviceTypesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListDeviceTypesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListDeviceTypesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListDeviceTypesRequest
func (fp *ListDeviceTypesRequest_FieldTerminalPath) Get(source *ListDeviceTypesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListDeviceTypesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListDeviceTypesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListDeviceTypesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListDeviceTypesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListDeviceTypesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListDeviceTypesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeviceTypesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListDeviceTypesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListDeviceTypesRequest))
}

// GetSingle returns value pointed by specific field of from source ListDeviceTypesRequest
func (fp *ListDeviceTypesRequest_FieldTerminalPath) GetSingle(source *ListDeviceTypesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListDeviceTypesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListDeviceTypesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListDeviceTypesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListDeviceTypesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListDeviceTypesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListDeviceTypesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesRequest: %d", fp.selector))
	}
}

func (fp *ListDeviceTypesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListDeviceTypesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListDeviceTypesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListDeviceTypesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListDeviceTypesRequest_FieldPathSelectorPageToken:
		return (*device_type.PagerCursor)(nil)
	case ListDeviceTypesRequest_FieldPathSelectorOrderBy:
		return (*device_type.OrderBy)(nil)
	case ListDeviceTypesRequest_FieldPathSelectorFilter:
		return (*device_type.Filter)(nil)
	case ListDeviceTypesRequest_FieldPathSelectorFieldMask:
		return (*device_type.DeviceType_FieldMask)(nil)
	case ListDeviceTypesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesRequest: %d", fp.selector))
	}
}

func (fp *ListDeviceTypesRequest_FieldTerminalPath) ClearValue(item *ListDeviceTypesRequest) {
	if item != nil {
		switch fp.selector {
		case ListDeviceTypesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListDeviceTypesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListDeviceTypesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListDeviceTypesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListDeviceTypesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListDeviceTypesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeviceTypesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListDeviceTypesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListDeviceTypesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListDeviceTypesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListDeviceTypesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListDeviceTypesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListDeviceTypesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListDeviceTypesRequest_FieldPathSelectorFilter ||
		fp.selector == ListDeviceTypesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListDeviceTypesRequest_FieldPathSelectorView ||
		fp.selector == ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListDeviceTypesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListDeviceTypesRequest_FieldTerminalPath) WithIValue(value interface{}) ListDeviceTypesRequest_FieldPathValue {
	switch fp.selector {
	case ListDeviceTypesRequest_FieldPathSelectorPageSize:
		return &ListDeviceTypesRequest_FieldTerminalPathValue{ListDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListDeviceTypesRequest_FieldPathSelectorPageToken:
		return &ListDeviceTypesRequest_FieldTerminalPathValue{ListDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(*device_type.PagerCursor)}
	case ListDeviceTypesRequest_FieldPathSelectorOrderBy:
		return &ListDeviceTypesRequest_FieldTerminalPathValue{ListDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(*device_type.OrderBy)}
	case ListDeviceTypesRequest_FieldPathSelectorFilter:
		return &ListDeviceTypesRequest_FieldTerminalPathValue{ListDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(*device_type.Filter)}
	case ListDeviceTypesRequest_FieldPathSelectorFieldMask:
		return &ListDeviceTypesRequest_FieldTerminalPathValue{ListDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(*device_type.DeviceType_FieldMask)}
	case ListDeviceTypesRequest_FieldPathSelectorView:
		return &ListDeviceTypesRequest_FieldTerminalPathValue{ListDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo:
		return &ListDeviceTypesRequest_FieldTerminalPathValue{ListDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesRequest: %d", fp.selector))
	}
}

func (fp *ListDeviceTypesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListDeviceTypesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListDeviceTypesRequest_FieldPathArrayOfValues {
	fpaov := &ListDeviceTypesRequest_FieldTerminalPathArrayOfValues{ListDeviceTypesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListDeviceTypesRequest_FieldPathSelectorPageSize:
		return &ListDeviceTypesRequest_FieldTerminalPathArrayOfValues{ListDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListDeviceTypesRequest_FieldPathSelectorPageToken:
		return &ListDeviceTypesRequest_FieldTerminalPathArrayOfValues{ListDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]*device_type.PagerCursor)}
	case ListDeviceTypesRequest_FieldPathSelectorOrderBy:
		return &ListDeviceTypesRequest_FieldTerminalPathArrayOfValues{ListDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]*device_type.OrderBy)}
	case ListDeviceTypesRequest_FieldPathSelectorFilter:
		return &ListDeviceTypesRequest_FieldTerminalPathArrayOfValues{ListDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]*device_type.Filter)}
	case ListDeviceTypesRequest_FieldPathSelectorFieldMask:
		return &ListDeviceTypesRequest_FieldTerminalPathArrayOfValues{ListDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]*device_type.DeviceType_FieldMask)}
	case ListDeviceTypesRequest_FieldPathSelectorView:
		return &ListDeviceTypesRequest_FieldTerminalPathArrayOfValues{ListDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo:
		return &ListDeviceTypesRequest_FieldTerminalPathArrayOfValues{ListDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListDeviceTypesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListDeviceTypesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListDeviceTypesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesRequest: %d", fp.selector))
	}
}

func (fp *ListDeviceTypesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListDeviceTypesRequest_FieldPathValue allows storing values for ListDeviceTypesRequest fields according to their type
type ListDeviceTypesRequest_FieldPathValue interface {
	ListDeviceTypesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListDeviceTypesRequest)
	CompareWith(*ListDeviceTypesRequest) (cmp int, comparable bool)
}

func ParseListDeviceTypesRequest_FieldPathValue(pathStr, valueStr string) (ListDeviceTypesRequest_FieldPathValue, error) {
	fp, err := ParseListDeviceTypesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeviceTypesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListDeviceTypesRequest_FieldPathValue), nil
}

func MustParseListDeviceTypesRequest_FieldPathValue(pathStr, valueStr string) ListDeviceTypesRequest_FieldPathValue {
	fpv, err := ParseListDeviceTypesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListDeviceTypesRequest_FieldTerminalPathValue struct {
	ListDeviceTypesRequest_FieldTerminalPath
	value interface{}
}

var _ ListDeviceTypesRequest_FieldPathValue = (*ListDeviceTypesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListDeviceTypesRequest' as interface{}
func (fpv *ListDeviceTypesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListDeviceTypesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListDeviceTypesRequest_FieldTerminalPathValue) AsPageTokenValue() (*device_type.PagerCursor, bool) {
	res, ok := fpv.value.(*device_type.PagerCursor)
	return res, ok
}
func (fpv *ListDeviceTypesRequest_FieldTerminalPathValue) AsOrderByValue() (*device_type.OrderBy, bool) {
	res, ok := fpv.value.(*device_type.OrderBy)
	return res, ok
}
func (fpv *ListDeviceTypesRequest_FieldTerminalPathValue) AsFilterValue() (*device_type.Filter, bool) {
	res, ok := fpv.value.(*device_type.Filter)
	return res, ok
}
func (fpv *ListDeviceTypesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device_type.DeviceType_FieldMask, bool) {
	res, ok := fpv.value.(*device_type.DeviceType_FieldMask)
	return res, ok
}
func (fpv *ListDeviceTypesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListDeviceTypesRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListDeviceTypesRequest
func (fpv *ListDeviceTypesRequest_FieldTerminalPathValue) SetTo(target **ListDeviceTypesRequest) {
	if *target == nil {
		*target = new(ListDeviceTypesRequest)
	}
	switch fpv.selector {
	case ListDeviceTypesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListDeviceTypesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*device_type.PagerCursor)
	case ListDeviceTypesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*device_type.OrderBy)
	case ListDeviceTypesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*device_type.Filter)
	case ListDeviceTypesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device_type.DeviceType_FieldMask)
	case ListDeviceTypesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesRequest: %d", fpv.selector))
	}
}

func (fpv *ListDeviceTypesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDeviceTypesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListDeviceTypesRequest_FieldTerminalPathValue' with the value under path in 'ListDeviceTypesRequest'.
func (fpv *ListDeviceTypesRequest_FieldTerminalPathValue) CompareWith(source *ListDeviceTypesRequest) (int, bool) {
	switch fpv.selector {
	case ListDeviceTypesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListDeviceTypesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListDeviceTypesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListDeviceTypesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListDeviceTypesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListDeviceTypesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesRequest: %d", fpv.selector))
	}
}

func (fpv *ListDeviceTypesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListDeviceTypesRequest))
}

// ListDeviceTypesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListDeviceTypesRequest according to their type
// Present only for array (repeated) types.
type ListDeviceTypesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListDeviceTypesRequest_FieldPath
	ContainsValue(*ListDeviceTypesRequest) bool
}

// ParseListDeviceTypesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListDeviceTypesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListDeviceTypesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListDeviceTypesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeviceTypesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListDeviceTypesRequest_FieldPathArrayItemValue), nil
}

func MustParseListDeviceTypesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListDeviceTypesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListDeviceTypesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListDeviceTypesRequest_FieldTerminalPathArrayItemValue struct {
	ListDeviceTypesRequest_FieldTerminalPath
	value interface{}
}

var _ ListDeviceTypesRequest_FieldPathArrayItemValue = (*ListDeviceTypesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListDeviceTypesRequest as interface{}
func (fpaiv *ListDeviceTypesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListDeviceTypesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListDeviceTypesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListDeviceTypesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListDeviceTypesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDeviceTypesRequest'
func (fpaiv *ListDeviceTypesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListDeviceTypesRequest) bool {
	slice := fpaiv.ListDeviceTypesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListDeviceTypesRequest_FieldPathArrayOfValues allows storing slice of values for ListDeviceTypesRequest fields according to their type
type ListDeviceTypesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListDeviceTypesRequest_FieldPath
}

func ParseListDeviceTypesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListDeviceTypesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListDeviceTypesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeviceTypesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListDeviceTypesRequest_FieldPathArrayOfValues), nil
}

func MustParseListDeviceTypesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListDeviceTypesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListDeviceTypesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListDeviceTypesRequest_FieldTerminalPathArrayOfValues struct {
	ListDeviceTypesRequest_FieldTerminalPath
	values interface{}
}

var _ ListDeviceTypesRequest_FieldPathArrayOfValues = (*ListDeviceTypesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListDeviceTypesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListDeviceTypesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListDeviceTypesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*device_type.PagerCursor) {
			values = append(values, v)
		}
	case ListDeviceTypesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*device_type.OrderBy) {
			values = append(values, v)
		}
	case ListDeviceTypesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*device_type.Filter) {
			values = append(values, v)
		}
	case ListDeviceTypesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device_type.DeviceType_FieldMask) {
			values = append(values, v)
		}
	case ListDeviceTypesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListDeviceTypesRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*device_type.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device_type.PagerCursor)
	return res, ok
}
func (fpaov *ListDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*device_type.OrderBy, bool) {
	res, ok := fpaov.values.([]*device_type.OrderBy)
	return res, ok
}
func (fpaov *ListDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*device_type.Filter, bool) {
	res, ok := fpaov.values.([]*device_type.Filter)
	return res, ok
}
func (fpaov *ListDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device_type.DeviceType_FieldMask, bool) {
	res, ok := fpaov.values.([]*device_type.DeviceType_FieldMask)
	return res, ok
}
func (fpaov *ListDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListDeviceTypesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListDeviceTypesResponse_FieldPathSelector
	Get(source *ListDeviceTypesResponse) []interface{}
	GetSingle(source *ListDeviceTypesResponse) (interface{}, bool)
	ClearValue(item *ListDeviceTypesResponse)

	// Those methods build corresponding ListDeviceTypesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListDeviceTypesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListDeviceTypesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListDeviceTypesResponse_FieldPathArrayItemValue
}

type ListDeviceTypesResponse_FieldPathSelector int32

const (
	ListDeviceTypesResponse_FieldPathSelectorDeviceTypes       ListDeviceTypesResponse_FieldPathSelector = 0
	ListDeviceTypesResponse_FieldPathSelectorPrevPageToken     ListDeviceTypesResponse_FieldPathSelector = 1
	ListDeviceTypesResponse_FieldPathSelectorNextPageToken     ListDeviceTypesResponse_FieldPathSelector = 2
	ListDeviceTypesResponse_FieldPathSelectorCurrentOffset     ListDeviceTypesResponse_FieldPathSelector = 3
	ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount ListDeviceTypesResponse_FieldPathSelector = 4
)

func (s ListDeviceTypesResponse_FieldPathSelector) String() string {
	switch s {
	case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return "device_types"
	case ListDeviceTypesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListDeviceTypesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListDeviceTypesResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", s))
	}
}

func BuildListDeviceTypesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListDeviceTypesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListDeviceTypesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device_types", "deviceTypes", "device-types":
			return &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorDeviceTypes}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListDeviceTypesResponse_FieldTerminalPath{selector: ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "device_types", "deviceTypes", "device-types":
			if subpath, err := device_type.BuildDeviceType_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListDeviceTypesResponse_FieldSubPath{selector: ListDeviceTypesResponse_FieldPathSelectorDeviceTypes, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListDeviceTypesResponse", fp)
}

func ParseListDeviceTypesResponse_FieldPath(rawField string) (ListDeviceTypesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListDeviceTypesResponse_FieldPath(fp)
}

func MustParseListDeviceTypesResponse_FieldPath(rawField string) ListDeviceTypesResponse_FieldPath {
	fp, err := ParseListDeviceTypesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListDeviceTypesResponse_FieldTerminalPath struct {
	selector ListDeviceTypesResponse_FieldPathSelector
}

var _ ListDeviceTypesResponse_FieldPath = (*ListDeviceTypesResponse_FieldTerminalPath)(nil)

func (fp *ListDeviceTypesResponse_FieldTerminalPath) Selector() ListDeviceTypesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListDeviceTypesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListDeviceTypesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListDeviceTypesResponse
func (fp *ListDeviceTypesResponse_FieldTerminalPath) Get(source *ListDeviceTypesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
			for _, value := range source.GetDeviceTypes() {
				values = append(values, value)
			}
		case ListDeviceTypesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListDeviceTypesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListDeviceTypesResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListDeviceTypesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListDeviceTypesResponse))
}

// GetSingle returns value pointed by specific field of from source ListDeviceTypesResponse
func (fp *ListDeviceTypesResponse_FieldTerminalPath) GetSingle(source *ListDeviceTypesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		res := source.GetDeviceTypes()
		return res, res != nil
	case ListDeviceTypesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListDeviceTypesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListDeviceTypesResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fp.selector))
	}
}

func (fp *ListDeviceTypesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListDeviceTypesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListDeviceTypesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return ([]*device_type.DeviceType)(nil)
	case ListDeviceTypesResponse_FieldPathSelectorPrevPageToken:
		return (*device_type.PagerCursor)(nil)
	case ListDeviceTypesResponse_FieldPathSelectorNextPageToken:
		return (*device_type.PagerCursor)(nil)
	case ListDeviceTypesResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fp.selector))
	}
}

func (fp *ListDeviceTypesResponse_FieldTerminalPath) ClearValue(item *ListDeviceTypesResponse) {
	if item != nil {
		switch fp.selector {
		case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
			item.DeviceTypes = nil
		case ListDeviceTypesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListDeviceTypesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListDeviceTypesResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListDeviceTypesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListDeviceTypesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListDeviceTypesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListDeviceTypesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListDeviceTypesResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListDeviceTypesResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListDeviceTypesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListDeviceTypesResponse_FieldTerminalPath) WithIValue(value interface{}) ListDeviceTypesResponse_FieldPathValue {
	switch fp.selector {
	case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return &ListDeviceTypesResponse_FieldTerminalPathValue{ListDeviceTypesResponse_FieldTerminalPath: *fp, value: value.([]*device_type.DeviceType)}
	case ListDeviceTypesResponse_FieldPathSelectorPrevPageToken:
		return &ListDeviceTypesResponse_FieldTerminalPathValue{ListDeviceTypesResponse_FieldTerminalPath: *fp, value: value.(*device_type.PagerCursor)}
	case ListDeviceTypesResponse_FieldPathSelectorNextPageToken:
		return &ListDeviceTypesResponse_FieldTerminalPathValue{ListDeviceTypesResponse_FieldTerminalPath: *fp, value: value.(*device_type.PagerCursor)}
	case ListDeviceTypesResponse_FieldPathSelectorCurrentOffset:
		return &ListDeviceTypesResponse_FieldTerminalPathValue{ListDeviceTypesResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount:
		return &ListDeviceTypesResponse_FieldTerminalPathValue{ListDeviceTypesResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fp.selector))
	}
}

func (fp *ListDeviceTypesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListDeviceTypesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListDeviceTypesResponse_FieldPathArrayOfValues {
	fpaov := &ListDeviceTypesResponse_FieldTerminalPathArrayOfValues{ListDeviceTypesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return &ListDeviceTypesResponse_FieldTerminalPathArrayOfValues{ListDeviceTypesResponse_FieldTerminalPath: *fp, values: values.([][]*device_type.DeviceType)}
	case ListDeviceTypesResponse_FieldPathSelectorPrevPageToken:
		return &ListDeviceTypesResponse_FieldTerminalPathArrayOfValues{ListDeviceTypesResponse_FieldTerminalPath: *fp, values: values.([]*device_type.PagerCursor)}
	case ListDeviceTypesResponse_FieldPathSelectorNextPageToken:
		return &ListDeviceTypesResponse_FieldTerminalPathArrayOfValues{ListDeviceTypesResponse_FieldTerminalPath: *fp, values: values.([]*device_type.PagerCursor)}
	case ListDeviceTypesResponse_FieldPathSelectorCurrentOffset:
		return &ListDeviceTypesResponse_FieldTerminalPathArrayOfValues{ListDeviceTypesResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount:
		return &ListDeviceTypesResponse_FieldTerminalPathArrayOfValues{ListDeviceTypesResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListDeviceTypesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListDeviceTypesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListDeviceTypesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return &ListDeviceTypesResponse_FieldTerminalPathArrayItemValue{ListDeviceTypesResponse_FieldTerminalPath: *fp, value: value.(*device_type.DeviceType)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fp.selector))
	}
}

func (fp *ListDeviceTypesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListDeviceTypesResponse_FieldSubPath struct {
	selector ListDeviceTypesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListDeviceTypesResponse_FieldPath = (*ListDeviceTypesResponse_FieldSubPath)(nil)

func (fps *ListDeviceTypesResponse_FieldSubPath) Selector() ListDeviceTypesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListDeviceTypesResponse_FieldSubPath) AsDeviceTypesSubPath() (device_type.DeviceType_FieldPath, bool) {
	res, ok := fps.subPath.(device_type.DeviceType_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListDeviceTypesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListDeviceTypesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListDeviceTypesResponse
func (fps *ListDeviceTypesResponse_FieldSubPath) Get(source *ListDeviceTypesResponse) (values []interface{}) {
	switch fps.selector {
	case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		for _, item := range source.GetDeviceTypes() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListDeviceTypesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListDeviceTypesResponse))
}

// GetSingle returns value of selected field from source ListDeviceTypesResponse
func (fps *ListDeviceTypesResponse_FieldSubPath) GetSingle(source *ListDeviceTypesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		if len(source.GetDeviceTypes()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDeviceTypes()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fps.selector))
	}
}

func (fps *ListDeviceTypesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListDeviceTypesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListDeviceTypesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListDeviceTypesResponse_FieldSubPath) ClearValue(item *ListDeviceTypesResponse) {
	if item != nil {
		switch fps.selector {
		case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
			for _, subItem := range item.DeviceTypes {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListDeviceTypesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListDeviceTypesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListDeviceTypesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListDeviceTypesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListDeviceTypesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListDeviceTypesResponse_FieldSubPath) WithIValue(value interface{}) ListDeviceTypesResponse_FieldPathValue {
	return &ListDeviceTypesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListDeviceTypesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListDeviceTypesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListDeviceTypesResponse_FieldPathArrayOfValues {
	return &ListDeviceTypesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListDeviceTypesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListDeviceTypesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListDeviceTypesResponse_FieldPathArrayItemValue {
	return &ListDeviceTypesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListDeviceTypesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListDeviceTypesResponse_FieldPathValue allows storing values for ListDeviceTypesResponse fields according to their type
type ListDeviceTypesResponse_FieldPathValue interface {
	ListDeviceTypesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListDeviceTypesResponse)
	CompareWith(*ListDeviceTypesResponse) (cmp int, comparable bool)
}

func ParseListDeviceTypesResponse_FieldPathValue(pathStr, valueStr string) (ListDeviceTypesResponse_FieldPathValue, error) {
	fp, err := ParseListDeviceTypesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeviceTypesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListDeviceTypesResponse_FieldPathValue), nil
}

func MustParseListDeviceTypesResponse_FieldPathValue(pathStr, valueStr string) ListDeviceTypesResponse_FieldPathValue {
	fpv, err := ParseListDeviceTypesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListDeviceTypesResponse_FieldTerminalPathValue struct {
	ListDeviceTypesResponse_FieldTerminalPath
	value interface{}
}

var _ ListDeviceTypesResponse_FieldPathValue = (*ListDeviceTypesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListDeviceTypesResponse' as interface{}
func (fpv *ListDeviceTypesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListDeviceTypesResponse_FieldTerminalPathValue) AsDeviceTypesValue() ([]*device_type.DeviceType, bool) {
	res, ok := fpv.value.([]*device_type.DeviceType)
	return res, ok
}
func (fpv *ListDeviceTypesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*device_type.PagerCursor, bool) {
	res, ok := fpv.value.(*device_type.PagerCursor)
	return res, ok
}
func (fpv *ListDeviceTypesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*device_type.PagerCursor, bool) {
	res, ok := fpv.value.(*device_type.PagerCursor)
	return res, ok
}
func (fpv *ListDeviceTypesResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListDeviceTypesResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListDeviceTypesResponse
func (fpv *ListDeviceTypesResponse_FieldTerminalPathValue) SetTo(target **ListDeviceTypesResponse) {
	if *target == nil {
		*target = new(ListDeviceTypesResponse)
	}
	switch fpv.selector {
	case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		(*target).DeviceTypes = fpv.value.([]*device_type.DeviceType)
	case ListDeviceTypesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*device_type.PagerCursor)
	case ListDeviceTypesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*device_type.PagerCursor)
	case ListDeviceTypesResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fpv.selector))
	}
}

func (fpv *ListDeviceTypesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDeviceTypesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListDeviceTypesResponse_FieldTerminalPathValue' with the value under path in 'ListDeviceTypesResponse'.
func (fpv *ListDeviceTypesResponse_FieldTerminalPathValue) CompareWith(source *ListDeviceTypesResponse) (int, bool) {
	switch fpv.selector {
	case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return 0, false
	case ListDeviceTypesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListDeviceTypesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListDeviceTypesResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fpv.selector))
	}
}

func (fpv *ListDeviceTypesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListDeviceTypesResponse))
}

type ListDeviceTypesResponse_FieldSubPathValue struct {
	ListDeviceTypesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListDeviceTypesResponse_FieldPathValue = (*ListDeviceTypesResponse_FieldSubPathValue)(nil)

func (fpvs *ListDeviceTypesResponse_FieldSubPathValue) AsDeviceTypesPathValue() (device_type.DeviceType_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device_type.DeviceType_FieldPathValue)
	return res, ok
}

func (fpvs *ListDeviceTypesResponse_FieldSubPathValue) SetTo(target **ListDeviceTypesResponse) {
	if *target == nil {
		*target = new(ListDeviceTypesResponse)
	}
	switch fpvs.Selector() {
	case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListDeviceTypesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDeviceTypesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListDeviceTypesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListDeviceTypesResponse_FieldSubPathValue) CompareWith(source *ListDeviceTypesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListDeviceTypesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListDeviceTypesResponse))
}

// ListDeviceTypesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListDeviceTypesResponse according to their type
// Present only for array (repeated) types.
type ListDeviceTypesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListDeviceTypesResponse_FieldPath
	ContainsValue(*ListDeviceTypesResponse) bool
}

// ParseListDeviceTypesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListDeviceTypesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListDeviceTypesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListDeviceTypesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeviceTypesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListDeviceTypesResponse_FieldPathArrayItemValue), nil
}

func MustParseListDeviceTypesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListDeviceTypesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListDeviceTypesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListDeviceTypesResponse_FieldTerminalPathArrayItemValue struct {
	ListDeviceTypesResponse_FieldTerminalPath
	value interface{}
}

var _ ListDeviceTypesResponse_FieldPathArrayItemValue = (*ListDeviceTypesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListDeviceTypesResponse as interface{}
func (fpaiv *ListDeviceTypesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListDeviceTypesResponse_FieldTerminalPathArrayItemValue) AsDeviceTypesItemValue() (*device_type.DeviceType, bool) {
	res, ok := fpaiv.value.(*device_type.DeviceType)
	return res, ok
}

func (fpaiv *ListDeviceTypesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListDeviceTypesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListDeviceTypesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListDeviceTypesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDeviceTypesResponse'
func (fpaiv *ListDeviceTypesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListDeviceTypesResponse) bool {
	slice := fpaiv.ListDeviceTypesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListDeviceTypesResponse_FieldSubPathArrayItemValue struct {
	ListDeviceTypesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListDeviceTypesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListDeviceTypesResponse_FieldSubPathArrayItemValue) AsDeviceTypesPathItemValue() (device_type.DeviceType_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device_type.DeviceType_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDeviceTypesResponse'
func (fpaivs *ListDeviceTypesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListDeviceTypesResponse) bool {
	switch fpaivs.Selector() {
	case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListDeviceTypesResponse: %d", fpaivs.Selector()))
	}
}

// ListDeviceTypesResponse_FieldPathArrayOfValues allows storing slice of values for ListDeviceTypesResponse fields according to their type
type ListDeviceTypesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListDeviceTypesResponse_FieldPath
}

func ParseListDeviceTypesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListDeviceTypesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListDeviceTypesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDeviceTypesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListDeviceTypesResponse_FieldPathArrayOfValues), nil
}

func MustParseListDeviceTypesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListDeviceTypesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListDeviceTypesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListDeviceTypesResponse_FieldTerminalPathArrayOfValues struct {
	ListDeviceTypesResponse_FieldTerminalPath
	values interface{}
}

var _ ListDeviceTypesResponse_FieldPathArrayOfValues = (*ListDeviceTypesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListDeviceTypesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListDeviceTypesResponse_FieldPathSelectorDeviceTypes:
		for _, v := range fpaov.values.([][]*device_type.DeviceType) {
			values = append(values, v)
		}
	case ListDeviceTypesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*device_type.PagerCursor) {
			values = append(values, v)
		}
	case ListDeviceTypesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*device_type.PagerCursor) {
			values = append(values, v)
		}
	case ListDeviceTypesResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListDeviceTypesResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListDeviceTypesResponse_FieldTerminalPathArrayOfValues) AsDeviceTypesArrayOfValues() ([][]*device_type.DeviceType, bool) {
	res, ok := fpaov.values.([][]*device_type.DeviceType)
	return res, ok
}
func (fpaov *ListDeviceTypesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*device_type.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device_type.PagerCursor)
	return res, ok
}
func (fpaov *ListDeviceTypesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*device_type.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device_type.PagerCursor)
	return res, ok
}
func (fpaov *ListDeviceTypesResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListDeviceTypesResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListDeviceTypesResponse_FieldSubPathArrayOfValues struct {
	ListDeviceTypesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListDeviceTypesResponse_FieldPathArrayOfValues = (*ListDeviceTypesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListDeviceTypesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListDeviceTypesResponse_FieldSubPathArrayOfValues) AsDeviceTypesPathArrayOfValues() (device_type.DeviceType_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device_type.DeviceType_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeviceTypeRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeviceTypeRequest_FieldPathSelector
	Get(source *WatchDeviceTypeRequest) []interface{}
	GetSingle(source *WatchDeviceTypeRequest) (interface{}, bool)
	ClearValue(item *WatchDeviceTypeRequest)

	// Those methods build corresponding WatchDeviceTypeRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeviceTypeRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeviceTypeRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeviceTypeRequest_FieldPathArrayItemValue
}

type WatchDeviceTypeRequest_FieldPathSelector int32

const (
	WatchDeviceTypeRequest_FieldPathSelectorName      WatchDeviceTypeRequest_FieldPathSelector = 0
	WatchDeviceTypeRequest_FieldPathSelectorFieldMask WatchDeviceTypeRequest_FieldPathSelector = 1
	WatchDeviceTypeRequest_FieldPathSelectorView      WatchDeviceTypeRequest_FieldPathSelector = 2
)

func (s WatchDeviceTypeRequest_FieldPathSelector) String() string {
	switch s {
	case WatchDeviceTypeRequest_FieldPathSelectorName:
		return "name"
	case WatchDeviceTypeRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchDeviceTypeRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeRequest: %d", s))
	}
}

func BuildWatchDeviceTypeRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchDeviceTypeRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeviceTypeRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchDeviceTypeRequest_FieldTerminalPath{selector: WatchDeviceTypeRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchDeviceTypeRequest_FieldTerminalPath{selector: WatchDeviceTypeRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchDeviceTypeRequest_FieldTerminalPath{selector: WatchDeviceTypeRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeviceTypeRequest", fp)
}

func ParseWatchDeviceTypeRequest_FieldPath(rawField string) (WatchDeviceTypeRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeviceTypeRequest_FieldPath(fp)
}

func MustParseWatchDeviceTypeRequest_FieldPath(rawField string) WatchDeviceTypeRequest_FieldPath {
	fp, err := ParseWatchDeviceTypeRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeviceTypeRequest_FieldTerminalPath struct {
	selector WatchDeviceTypeRequest_FieldPathSelector
}

var _ WatchDeviceTypeRequest_FieldPath = (*WatchDeviceTypeRequest_FieldTerminalPath)(nil)

func (fp *WatchDeviceTypeRequest_FieldTerminalPath) Selector() WatchDeviceTypeRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeviceTypeRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeviceTypeRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeviceTypeRequest
func (fp *WatchDeviceTypeRequest_FieldTerminalPath) Get(source *WatchDeviceTypeRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeviceTypeRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchDeviceTypeRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchDeviceTypeRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeviceTypeRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeviceTypeRequest))
}

// GetSingle returns value pointed by specific field of from source WatchDeviceTypeRequest
func (fp *WatchDeviceTypeRequest_FieldTerminalPath) GetSingle(source *WatchDeviceTypeRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchDeviceTypeRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchDeviceTypeRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchDeviceTypeRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypeRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeviceTypeRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeviceTypeRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeviceTypeRequest_FieldPathSelectorName:
		return (*device_type.Reference)(nil)
	case WatchDeviceTypeRequest_FieldPathSelectorFieldMask:
		return (*device_type.DeviceType_FieldMask)(nil)
	case WatchDeviceTypeRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypeRequest_FieldTerminalPath) ClearValue(item *WatchDeviceTypeRequest) {
	if item != nil {
		switch fp.selector {
		case WatchDeviceTypeRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchDeviceTypeRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchDeviceTypeRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchDeviceTypeRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeviceTypeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeviceTypeRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeviceTypeRequest_FieldPathSelectorName ||
		fp.selector == WatchDeviceTypeRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchDeviceTypeRequest_FieldPathSelectorView
}

func (fp *WatchDeviceTypeRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchDeviceTypeRequest_FieldTerminalPath) WithIValue(value interface{}) WatchDeviceTypeRequest_FieldPathValue {
	switch fp.selector {
	case WatchDeviceTypeRequest_FieldPathSelectorName:
		return &WatchDeviceTypeRequest_FieldTerminalPathValue{WatchDeviceTypeRequest_FieldTerminalPath: *fp, value: value.(*device_type.Reference)}
	case WatchDeviceTypeRequest_FieldPathSelectorFieldMask:
		return &WatchDeviceTypeRequest_FieldTerminalPathValue{WatchDeviceTypeRequest_FieldTerminalPath: *fp, value: value.(*device_type.DeviceType_FieldMask)}
	case WatchDeviceTypeRequest_FieldPathSelectorView:
		return &WatchDeviceTypeRequest_FieldTerminalPathValue{WatchDeviceTypeRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypeRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeviceTypeRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeviceTypeRequest_FieldPathArrayOfValues {
	fpaov := &WatchDeviceTypeRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypeRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeviceTypeRequest_FieldPathSelectorName:
		return &WatchDeviceTypeRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypeRequest_FieldTerminalPath: *fp, values: values.([]*device_type.Reference)}
	case WatchDeviceTypeRequest_FieldPathSelectorFieldMask:
		return &WatchDeviceTypeRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypeRequest_FieldTerminalPath: *fp, values: values.([]*device_type.DeviceType_FieldMask)}
	case WatchDeviceTypeRequest_FieldPathSelectorView:
		return &WatchDeviceTypeRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypeRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeviceTypeRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeviceTypeRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeviceTypeRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypeRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDeviceTypeRequest_FieldPathValue allows storing values for WatchDeviceTypeRequest fields according to their type
type WatchDeviceTypeRequest_FieldPathValue interface {
	WatchDeviceTypeRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeviceTypeRequest)
	CompareWith(*WatchDeviceTypeRequest) (cmp int, comparable bool)
}

func ParseWatchDeviceTypeRequest_FieldPathValue(pathStr, valueStr string) (WatchDeviceTypeRequest_FieldPathValue, error) {
	fp, err := ParseWatchDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceTypeRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeviceTypeRequest_FieldPathValue), nil
}

func MustParseWatchDeviceTypeRequest_FieldPathValue(pathStr, valueStr string) WatchDeviceTypeRequest_FieldPathValue {
	fpv, err := ParseWatchDeviceTypeRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeviceTypeRequest_FieldTerminalPathValue struct {
	WatchDeviceTypeRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceTypeRequest_FieldPathValue = (*WatchDeviceTypeRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDeviceTypeRequest' as interface{}
func (fpv *WatchDeviceTypeRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeviceTypeRequest_FieldTerminalPathValue) AsNameValue() (*device_type.Reference, bool) {
	res, ok := fpv.value.(*device_type.Reference)
	return res, ok
}
func (fpv *WatchDeviceTypeRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device_type.DeviceType_FieldMask, bool) {
	res, ok := fpv.value.(*device_type.DeviceType_FieldMask)
	return res, ok
}
func (fpv *WatchDeviceTypeRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchDeviceTypeRequest
func (fpv *WatchDeviceTypeRequest_FieldTerminalPathValue) SetTo(target **WatchDeviceTypeRequest) {
	if *target == nil {
		*target = new(WatchDeviceTypeRequest)
	}
	switch fpv.selector {
	case WatchDeviceTypeRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*device_type.Reference)
	case WatchDeviceTypeRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device_type.DeviceType_FieldMask)
	case WatchDeviceTypeRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceTypeRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeviceTypeRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeviceTypeRequest_FieldTerminalPathValue' with the value under path in 'WatchDeviceTypeRequest'.
func (fpv *WatchDeviceTypeRequest_FieldTerminalPathValue) CompareWith(source *WatchDeviceTypeRequest) (int, bool) {
	switch fpv.selector {
	case WatchDeviceTypeRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*device_type.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceTypeRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchDeviceTypeRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceTypeRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeviceTypeRequest))
}

// WatchDeviceTypeRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDeviceTypeRequest according to their type
// Present only for array (repeated) types.
type WatchDeviceTypeRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeviceTypeRequest_FieldPath
	ContainsValue(*WatchDeviceTypeRequest) bool
}

// ParseWatchDeviceTypeRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeviceTypeRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceTypeRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeviceTypeRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeviceTypeRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeviceTypeRequest_FieldTerminalPathArrayItemValue struct {
	WatchDeviceTypeRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceTypeRequest_FieldPathArrayItemValue = (*WatchDeviceTypeRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeviceTypeRequest as interface{}
func (fpaiv *WatchDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeviceTypeRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeviceTypeRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeviceTypeRequest'
func (fpaiv *WatchDeviceTypeRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeviceTypeRequest) bool {
	slice := fpaiv.WatchDeviceTypeRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDeviceTypeRequest_FieldPathArrayOfValues allows storing slice of values for WatchDeviceTypeRequest fields according to their type
type WatchDeviceTypeRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeviceTypeRequest_FieldPath
}

func ParseWatchDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeviceTypeRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceTypeRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeviceTypeRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeviceTypeRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeviceTypeRequest_FieldTerminalPathArrayOfValues struct {
	WatchDeviceTypeRequest_FieldTerminalPath
	values interface{}
}

var _ WatchDeviceTypeRequest_FieldPathArrayOfValues = (*WatchDeviceTypeRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeviceTypeRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeviceTypeRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*device_type.Reference) {
			values = append(values, v)
		}
	case WatchDeviceTypeRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device_type.DeviceType_FieldMask) {
			values = append(values, v)
		}
	case WatchDeviceTypeRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeviceTypeRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*device_type.Reference, bool) {
	res, ok := fpaov.values.([]*device_type.Reference)
	return res, ok
}
func (fpaov *WatchDeviceTypeRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device_type.DeviceType_FieldMask, bool) {
	res, ok := fpaov.values.([]*device_type.DeviceType_FieldMask)
	return res, ok
}
func (fpaov *WatchDeviceTypeRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeviceTypeResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeviceTypeResponse_FieldPathSelector
	Get(source *WatchDeviceTypeResponse) []interface{}
	GetSingle(source *WatchDeviceTypeResponse) (interface{}, bool)
	ClearValue(item *WatchDeviceTypeResponse)

	// Those methods build corresponding WatchDeviceTypeResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeviceTypeResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeviceTypeResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeviceTypeResponse_FieldPathArrayItemValue
}

type WatchDeviceTypeResponse_FieldPathSelector int32

const (
	WatchDeviceTypeResponse_FieldPathSelectorChange WatchDeviceTypeResponse_FieldPathSelector = 0
)

func (s WatchDeviceTypeResponse_FieldPathSelector) String() string {
	switch s {
	case WatchDeviceTypeResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeResponse: %d", s))
	}
}

func BuildWatchDeviceTypeResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchDeviceTypeResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeviceTypeResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchDeviceTypeResponse_FieldTerminalPath{selector: WatchDeviceTypeResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeviceTypeResponse", fp)
}

func ParseWatchDeviceTypeResponse_FieldPath(rawField string) (WatchDeviceTypeResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeviceTypeResponse_FieldPath(fp)
}

func MustParseWatchDeviceTypeResponse_FieldPath(rawField string) WatchDeviceTypeResponse_FieldPath {
	fp, err := ParseWatchDeviceTypeResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeviceTypeResponse_FieldTerminalPath struct {
	selector WatchDeviceTypeResponse_FieldPathSelector
}

var _ WatchDeviceTypeResponse_FieldPath = (*WatchDeviceTypeResponse_FieldTerminalPath)(nil)

func (fp *WatchDeviceTypeResponse_FieldTerminalPath) Selector() WatchDeviceTypeResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeviceTypeResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeviceTypeResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeviceTypeResponse
func (fp *WatchDeviceTypeResponse_FieldTerminalPath) Get(source *WatchDeviceTypeResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeviceTypeResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeviceTypeResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeviceTypeResponse))
}

// GetSingle returns value pointed by specific field of from source WatchDeviceTypeResponse
func (fp *WatchDeviceTypeResponse_FieldTerminalPath) GetSingle(source *WatchDeviceTypeResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchDeviceTypeResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypeResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeviceTypeResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeviceTypeResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeviceTypeResponse_FieldPathSelectorChange:
		return (*device_type.DeviceTypeChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypeResponse_FieldTerminalPath) ClearValue(item *WatchDeviceTypeResponse) {
	if item != nil {
		switch fp.selector {
		case WatchDeviceTypeResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchDeviceTypeResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeviceTypeResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeviceTypeResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeviceTypeResponse_FieldPathSelectorChange
}

func (fp *WatchDeviceTypeResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchDeviceTypeResponse_FieldTerminalPath) WithIValue(value interface{}) WatchDeviceTypeResponse_FieldPathValue {
	switch fp.selector {
	case WatchDeviceTypeResponse_FieldPathSelectorChange:
		return &WatchDeviceTypeResponse_FieldTerminalPathValue{WatchDeviceTypeResponse_FieldTerminalPath: *fp, value: value.(*device_type.DeviceTypeChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypeResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeviceTypeResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeviceTypeResponse_FieldPathArrayOfValues {
	fpaov := &WatchDeviceTypeResponse_FieldTerminalPathArrayOfValues{WatchDeviceTypeResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeviceTypeResponse_FieldPathSelectorChange:
		return &WatchDeviceTypeResponse_FieldTerminalPathArrayOfValues{WatchDeviceTypeResponse_FieldTerminalPath: *fp, values: values.([]*device_type.DeviceTypeChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeviceTypeResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeviceTypeResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeviceTypeResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypeResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDeviceTypeResponse_FieldPathValue allows storing values for WatchDeviceTypeResponse fields according to their type
type WatchDeviceTypeResponse_FieldPathValue interface {
	WatchDeviceTypeResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeviceTypeResponse)
	CompareWith(*WatchDeviceTypeResponse) (cmp int, comparable bool)
}

func ParseWatchDeviceTypeResponse_FieldPathValue(pathStr, valueStr string) (WatchDeviceTypeResponse_FieldPathValue, error) {
	fp, err := ParseWatchDeviceTypeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceTypeResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeviceTypeResponse_FieldPathValue), nil
}

func MustParseWatchDeviceTypeResponse_FieldPathValue(pathStr, valueStr string) WatchDeviceTypeResponse_FieldPathValue {
	fpv, err := ParseWatchDeviceTypeResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeviceTypeResponse_FieldTerminalPathValue struct {
	WatchDeviceTypeResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceTypeResponse_FieldPathValue = (*WatchDeviceTypeResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDeviceTypeResponse' as interface{}
func (fpv *WatchDeviceTypeResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeviceTypeResponse_FieldTerminalPathValue) AsChangeValue() (*device_type.DeviceTypeChange, bool) {
	res, ok := fpv.value.(*device_type.DeviceTypeChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchDeviceTypeResponse
func (fpv *WatchDeviceTypeResponse_FieldTerminalPathValue) SetTo(target **WatchDeviceTypeResponse) {
	if *target == nil {
		*target = new(WatchDeviceTypeResponse)
	}
	switch fpv.selector {
	case WatchDeviceTypeResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*device_type.DeviceTypeChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceTypeResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeviceTypeResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeviceTypeResponse_FieldTerminalPathValue' with the value under path in 'WatchDeviceTypeResponse'.
func (fpv *WatchDeviceTypeResponse_FieldTerminalPathValue) CompareWith(source *WatchDeviceTypeResponse) (int, bool) {
	switch fpv.selector {
	case WatchDeviceTypeResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypeResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceTypeResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeviceTypeResponse))
}

// WatchDeviceTypeResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDeviceTypeResponse according to their type
// Present only for array (repeated) types.
type WatchDeviceTypeResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeviceTypeResponse_FieldPath
	ContainsValue(*WatchDeviceTypeResponse) bool
}

// ParseWatchDeviceTypeResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeviceTypeResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeviceTypeResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeviceTypeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceTypeResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeviceTypeResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchDeviceTypeResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeviceTypeResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeviceTypeResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeviceTypeResponse_FieldTerminalPathArrayItemValue struct {
	WatchDeviceTypeResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceTypeResponse_FieldPathArrayItemValue = (*WatchDeviceTypeResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeviceTypeResponse as interface{}
func (fpaiv *WatchDeviceTypeResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDeviceTypeResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeviceTypeResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeviceTypeResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeviceTypeResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeviceTypeResponse'
func (fpaiv *WatchDeviceTypeResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeviceTypeResponse) bool {
	slice := fpaiv.WatchDeviceTypeResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDeviceTypeResponse_FieldPathArrayOfValues allows storing slice of values for WatchDeviceTypeResponse fields according to their type
type WatchDeviceTypeResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeviceTypeResponse_FieldPath
}

func ParseWatchDeviceTypeResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeviceTypeResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeviceTypeResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceTypeResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeviceTypeResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchDeviceTypeResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeviceTypeResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeviceTypeResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeviceTypeResponse_FieldTerminalPathArrayOfValues struct {
	WatchDeviceTypeResponse_FieldTerminalPath
	values interface{}
}

var _ WatchDeviceTypeResponse_FieldPathArrayOfValues = (*WatchDeviceTypeResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeviceTypeResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeviceTypeResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*device_type.DeviceTypeChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeviceTypeResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*device_type.DeviceTypeChange, bool) {
	res, ok := fpaov.values.([]*device_type.DeviceTypeChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeviceTypesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeviceTypesRequest_FieldPathSelector
	Get(source *WatchDeviceTypesRequest) []interface{}
	GetSingle(source *WatchDeviceTypesRequest) (interface{}, bool)
	ClearValue(item *WatchDeviceTypesRequest)

	// Those methods build corresponding WatchDeviceTypesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeviceTypesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeviceTypesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeviceTypesRequest_FieldPathArrayItemValue
}

type WatchDeviceTypesRequest_FieldPathSelector int32

const (
	WatchDeviceTypesRequest_FieldPathSelectorType         WatchDeviceTypesRequest_FieldPathSelector = 0
	WatchDeviceTypesRequest_FieldPathSelectorPageSize     WatchDeviceTypesRequest_FieldPathSelector = 1
	WatchDeviceTypesRequest_FieldPathSelectorPageToken    WatchDeviceTypesRequest_FieldPathSelector = 2
	WatchDeviceTypesRequest_FieldPathSelectorOrderBy      WatchDeviceTypesRequest_FieldPathSelector = 3
	WatchDeviceTypesRequest_FieldPathSelectorResumeToken  WatchDeviceTypesRequest_FieldPathSelector = 4
	WatchDeviceTypesRequest_FieldPathSelectorStartingTime WatchDeviceTypesRequest_FieldPathSelector = 5
	WatchDeviceTypesRequest_FieldPathSelectorFilter       WatchDeviceTypesRequest_FieldPathSelector = 6
	WatchDeviceTypesRequest_FieldPathSelectorFieldMask    WatchDeviceTypesRequest_FieldPathSelector = 7
	WatchDeviceTypesRequest_FieldPathSelectorView         WatchDeviceTypesRequest_FieldPathSelector = 8
	WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize WatchDeviceTypesRequest_FieldPathSelector = 9
)

func (s WatchDeviceTypesRequest_FieldPathSelector) String() string {
	switch s {
	case WatchDeviceTypesRequest_FieldPathSelectorType:
		return "type"
	case WatchDeviceTypesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchDeviceTypesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchDeviceTypesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchDeviceTypesRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchDeviceTypesRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchDeviceTypesRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchDeviceTypesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchDeviceTypesRequest_FieldPathSelectorView:
		return "view"
	case WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesRequest: %d", s))
	}
}

func BuildWatchDeviceTypesRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchDeviceTypesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeviceTypesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorType}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchDeviceTypesRequest_FieldTerminalPath{selector: WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeviceTypesRequest", fp)
}

func ParseWatchDeviceTypesRequest_FieldPath(rawField string) (WatchDeviceTypesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeviceTypesRequest_FieldPath(fp)
}

func MustParseWatchDeviceTypesRequest_FieldPath(rawField string) WatchDeviceTypesRequest_FieldPath {
	fp, err := ParseWatchDeviceTypesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeviceTypesRequest_FieldTerminalPath struct {
	selector WatchDeviceTypesRequest_FieldPathSelector
}

var _ WatchDeviceTypesRequest_FieldPath = (*WatchDeviceTypesRequest_FieldTerminalPath)(nil)

func (fp *WatchDeviceTypesRequest_FieldTerminalPath) Selector() WatchDeviceTypesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeviceTypesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeviceTypesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeviceTypesRequest
func (fp *WatchDeviceTypesRequest_FieldTerminalPath) Get(source *WatchDeviceTypesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeviceTypesRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchDeviceTypesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchDeviceTypesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchDeviceTypesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchDeviceTypesRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchDeviceTypesRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchDeviceTypesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchDeviceTypesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchDeviceTypesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeviceTypesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeviceTypesRequest))
}

// GetSingle returns value pointed by specific field of from source WatchDeviceTypesRequest
func (fp *WatchDeviceTypesRequest_FieldTerminalPath) GetSingle(source *WatchDeviceTypesRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchDeviceTypesRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchDeviceTypesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchDeviceTypesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchDeviceTypesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchDeviceTypesRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchDeviceTypesRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchDeviceTypesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchDeviceTypesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchDeviceTypesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeviceTypesRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeviceTypesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeviceTypesRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchDeviceTypesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchDeviceTypesRequest_FieldPathSelectorPageToken:
		return (*device_type.PagerCursor)(nil)
	case WatchDeviceTypesRequest_FieldPathSelectorOrderBy:
		return (*device_type.OrderBy)(nil)
	case WatchDeviceTypesRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchDeviceTypesRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchDeviceTypesRequest_FieldPathSelectorFilter:
		return (*device_type.Filter)(nil)
	case WatchDeviceTypesRequest_FieldPathSelectorFieldMask:
		return (*device_type.DeviceType_FieldMask)(nil)
	case WatchDeviceTypesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypesRequest_FieldTerminalPath) ClearValue(item *WatchDeviceTypesRequest) {
	if item != nil {
		switch fp.selector {
		case WatchDeviceTypesRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchDeviceTypesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchDeviceTypesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchDeviceTypesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchDeviceTypesRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchDeviceTypesRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchDeviceTypesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchDeviceTypesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchDeviceTypesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchDeviceTypesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeviceTypesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeviceTypesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeviceTypesRequest_FieldPathSelectorType ||
		fp.selector == WatchDeviceTypesRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchDeviceTypesRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchDeviceTypesRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchDeviceTypesRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchDeviceTypesRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchDeviceTypesRequest_FieldPathSelectorFilter ||
		fp.selector == WatchDeviceTypesRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchDeviceTypesRequest_FieldPathSelectorView ||
		fp.selector == WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchDeviceTypesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchDeviceTypesRequest_FieldTerminalPath) WithIValue(value interface{}) WatchDeviceTypesRequest_FieldPathValue {
	switch fp.selector {
	case WatchDeviceTypesRequest_FieldPathSelectorType:
		return &WatchDeviceTypesRequest_FieldTerminalPathValue{WatchDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchDeviceTypesRequest_FieldPathSelectorPageSize:
		return &WatchDeviceTypesRequest_FieldTerminalPathValue{WatchDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchDeviceTypesRequest_FieldPathSelectorPageToken:
		return &WatchDeviceTypesRequest_FieldTerminalPathValue{WatchDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(*device_type.PagerCursor)}
	case WatchDeviceTypesRequest_FieldPathSelectorOrderBy:
		return &WatchDeviceTypesRequest_FieldTerminalPathValue{WatchDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(*device_type.OrderBy)}
	case WatchDeviceTypesRequest_FieldPathSelectorResumeToken:
		return &WatchDeviceTypesRequest_FieldTerminalPathValue{WatchDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchDeviceTypesRequest_FieldPathSelectorStartingTime:
		return &WatchDeviceTypesRequest_FieldTerminalPathValue{WatchDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchDeviceTypesRequest_FieldPathSelectorFilter:
		return &WatchDeviceTypesRequest_FieldTerminalPathValue{WatchDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(*device_type.Filter)}
	case WatchDeviceTypesRequest_FieldPathSelectorFieldMask:
		return &WatchDeviceTypesRequest_FieldTerminalPathValue{WatchDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(*device_type.DeviceType_FieldMask)}
	case WatchDeviceTypesRequest_FieldPathSelectorView:
		return &WatchDeviceTypesRequest_FieldTerminalPathValue{WatchDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchDeviceTypesRequest_FieldTerminalPathValue{WatchDeviceTypesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeviceTypesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeviceTypesRequest_FieldPathArrayOfValues {
	fpaov := &WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeviceTypesRequest_FieldPathSelectorType:
		return &WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchDeviceTypesRequest_FieldPathSelectorPageSize:
		return &WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchDeviceTypesRequest_FieldPathSelectorPageToken:
		return &WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]*device_type.PagerCursor)}
	case WatchDeviceTypesRequest_FieldPathSelectorOrderBy:
		return &WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]*device_type.OrderBy)}
	case WatchDeviceTypesRequest_FieldPathSelectorResumeToken:
		return &WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchDeviceTypesRequest_FieldPathSelectorStartingTime:
		return &WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchDeviceTypesRequest_FieldPathSelectorFilter:
		return &WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]*device_type.Filter)}
	case WatchDeviceTypesRequest_FieldPathSelectorFieldMask:
		return &WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]*device_type.DeviceType_FieldMask)}
	case WatchDeviceTypesRequest_FieldPathSelectorView:
		return &WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues{WatchDeviceTypesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeviceTypesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeviceTypesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeviceTypesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesRequest: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDeviceTypesRequest_FieldPathValue allows storing values for WatchDeviceTypesRequest fields according to their type
type WatchDeviceTypesRequest_FieldPathValue interface {
	WatchDeviceTypesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeviceTypesRequest)
	CompareWith(*WatchDeviceTypesRequest) (cmp int, comparable bool)
}

func ParseWatchDeviceTypesRequest_FieldPathValue(pathStr, valueStr string) (WatchDeviceTypesRequest_FieldPathValue, error) {
	fp, err := ParseWatchDeviceTypesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceTypesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeviceTypesRequest_FieldPathValue), nil
}

func MustParseWatchDeviceTypesRequest_FieldPathValue(pathStr, valueStr string) WatchDeviceTypesRequest_FieldPathValue {
	fpv, err := ParseWatchDeviceTypesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeviceTypesRequest_FieldTerminalPathValue struct {
	WatchDeviceTypesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceTypesRequest_FieldPathValue = (*WatchDeviceTypesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDeviceTypesRequest' as interface{}
func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) AsPageTokenValue() (*device_type.PagerCursor, bool) {
	res, ok := fpv.value.(*device_type.PagerCursor)
	return res, ok
}
func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) AsOrderByValue() (*device_type.OrderBy, bool) {
	res, ok := fpv.value.(*device_type.OrderBy)
	return res, ok
}
func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) AsFilterValue() (*device_type.Filter, bool) {
	res, ok := fpv.value.(*device_type.Filter)
	return res, ok
}
func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device_type.DeviceType_FieldMask, bool) {
	res, ok := fpv.value.(*device_type.DeviceType_FieldMask)
	return res, ok
}
func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchDeviceTypesRequest
func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) SetTo(target **WatchDeviceTypesRequest) {
	if *target == nil {
		*target = new(WatchDeviceTypesRequest)
	}
	switch fpv.selector {
	case WatchDeviceTypesRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchDeviceTypesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchDeviceTypesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*device_type.PagerCursor)
	case WatchDeviceTypesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*device_type.OrderBy)
	case WatchDeviceTypesRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchDeviceTypesRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchDeviceTypesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*device_type.Filter)
	case WatchDeviceTypesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device_type.DeviceType_FieldMask)
	case WatchDeviceTypesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeviceTypesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeviceTypesRequest_FieldTerminalPathValue' with the value under path in 'WatchDeviceTypesRequest'.
func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) CompareWith(source *WatchDeviceTypesRequest) (int, bool) {
	switch fpv.selector {
	case WatchDeviceTypesRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceTypesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceTypesRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchDeviceTypesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchDeviceTypesRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceTypesRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceTypesRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchDeviceTypesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchDeviceTypesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceTypesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeviceTypesRequest))
}

// WatchDeviceTypesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDeviceTypesRequest according to their type
// Present only for array (repeated) types.
type WatchDeviceTypesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeviceTypesRequest_FieldPath
	ContainsValue(*WatchDeviceTypesRequest) bool
}

// ParseWatchDeviceTypesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeviceTypesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeviceTypesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeviceTypesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceTypesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeviceTypesRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchDeviceTypesRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeviceTypesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeviceTypesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeviceTypesRequest_FieldTerminalPathArrayItemValue struct {
	WatchDeviceTypesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceTypesRequest_FieldPathArrayItemValue = (*WatchDeviceTypesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeviceTypesRequest as interface{}
func (fpaiv *WatchDeviceTypesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDeviceTypesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeviceTypesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeviceTypesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeviceTypesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeviceTypesRequest'
func (fpaiv *WatchDeviceTypesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeviceTypesRequest) bool {
	slice := fpaiv.WatchDeviceTypesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDeviceTypesRequest_FieldPathArrayOfValues allows storing slice of values for WatchDeviceTypesRequest fields according to their type
type WatchDeviceTypesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeviceTypesRequest_FieldPath
}

func ParseWatchDeviceTypesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeviceTypesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeviceTypesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceTypesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeviceTypesRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchDeviceTypesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeviceTypesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeviceTypesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues struct {
	WatchDeviceTypesRequest_FieldTerminalPath
	values interface{}
}

var _ WatchDeviceTypesRequest_FieldPathArrayOfValues = (*WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeviceTypesRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchDeviceTypesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchDeviceTypesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*device_type.PagerCursor) {
			values = append(values, v)
		}
	case WatchDeviceTypesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*device_type.OrderBy) {
			values = append(values, v)
		}
	case WatchDeviceTypesRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchDeviceTypesRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchDeviceTypesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*device_type.Filter) {
			values = append(values, v)
		}
	case WatchDeviceTypesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device_type.DeviceType_FieldMask) {
			values = append(values, v)
		}
	case WatchDeviceTypesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchDeviceTypesRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*device_type.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device_type.PagerCursor)
	return res, ok
}
func (fpaov *WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*device_type.OrderBy, bool) {
	res, ok := fpaov.values.([]*device_type.OrderBy)
	return res, ok
}
func (fpaov *WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*device_type.Filter, bool) {
	res, ok := fpaov.values.([]*device_type.Filter)
	return res, ok
}
func (fpaov *WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device_type.DeviceType_FieldMask, bool) {
	res, ok := fpaov.values.([]*device_type.DeviceType_FieldMask)
	return res, ok
}
func (fpaov *WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchDeviceTypesRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeviceTypesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeviceTypesResponse_FieldPathSelector
	Get(source *WatchDeviceTypesResponse) []interface{}
	GetSingle(source *WatchDeviceTypesResponse) (interface{}, bool)
	ClearValue(item *WatchDeviceTypesResponse)

	// Those methods build corresponding WatchDeviceTypesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeviceTypesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeviceTypesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeviceTypesResponse_FieldPathArrayItemValue
}

type WatchDeviceTypesResponse_FieldPathSelector int32

const (
	WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges WatchDeviceTypesResponse_FieldPathSelector = 0
	WatchDeviceTypesResponse_FieldPathSelectorIsCurrent         WatchDeviceTypesResponse_FieldPathSelector = 1
	WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange   WatchDeviceTypesResponse_FieldPathSelector = 2
	WatchDeviceTypesResponse_FieldPathSelectorResumeToken       WatchDeviceTypesResponse_FieldPathSelector = 3
	WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize      WatchDeviceTypesResponse_FieldPathSelector = 4
	WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset       WatchDeviceTypesResponse_FieldPathSelector = 5
	WatchDeviceTypesResponse_FieldPathSelectorIsHardReset       WatchDeviceTypesResponse_FieldPathSelector = 6
)

func (s WatchDeviceTypesResponse_FieldPathSelector) String() string {
	switch s {
	case WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges:
		return "device_type_changes"
	case WatchDeviceTypesResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchDeviceTypesResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchDeviceTypesResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", s))
	}
}

func BuildWatchDeviceTypesResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchDeviceTypesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeviceTypesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device_type_changes", "deviceTypeChanges", "device-type-changes":
			return &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchDeviceTypesResponse_FieldTerminalPath{selector: WatchDeviceTypesResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchDeviceTypesResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchDeviceTypesResponse_FieldSubPath{selector: WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeviceTypesResponse", fp)
}

func ParseWatchDeviceTypesResponse_FieldPath(rawField string) (WatchDeviceTypesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeviceTypesResponse_FieldPath(fp)
}

func MustParseWatchDeviceTypesResponse_FieldPath(rawField string) WatchDeviceTypesResponse_FieldPath {
	fp, err := ParseWatchDeviceTypesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeviceTypesResponse_FieldTerminalPath struct {
	selector WatchDeviceTypesResponse_FieldPathSelector
}

var _ WatchDeviceTypesResponse_FieldPath = (*WatchDeviceTypesResponse_FieldTerminalPath)(nil)

func (fp *WatchDeviceTypesResponse_FieldTerminalPath) Selector() WatchDeviceTypesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeviceTypesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeviceTypesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeviceTypesResponse
func (fp *WatchDeviceTypesResponse_FieldTerminalPath) Get(source *WatchDeviceTypesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges:
			for _, value := range source.GetDeviceTypeChanges() {
				values = append(values, value)
			}
		case WatchDeviceTypesResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchDeviceTypesResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchDeviceTypesResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeviceTypesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeviceTypesResponse))
}

// GetSingle returns value pointed by specific field of from source WatchDeviceTypesResponse
func (fp *WatchDeviceTypesResponse_FieldTerminalPath) GetSingle(source *WatchDeviceTypesResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges:
		res := source.GetDeviceTypeChanges()
		return res, res != nil
	case WatchDeviceTypesResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchDeviceTypesResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchDeviceTypesResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeviceTypesResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeviceTypesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges:
		return ([]*device_type.DeviceTypeChange)(nil)
	case WatchDeviceTypesResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
		return (*WatchDeviceTypesResponse_PageTokenChange)(nil)
	case WatchDeviceTypesResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchDeviceTypesResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypesResponse_FieldTerminalPath) ClearValue(item *WatchDeviceTypesResponse) {
	if item != nil {
		switch fp.selector {
		case WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges:
			item.DeviceTypeChanges = nil
		case WatchDeviceTypesResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchDeviceTypesResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchDeviceTypesResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchDeviceTypesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeviceTypesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeviceTypesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges ||
		fp.selector == WatchDeviceTypesResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchDeviceTypesResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchDeviceTypesResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchDeviceTypesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchDeviceTypesResponse_FieldTerminalPath) WithIValue(value interface{}) WatchDeviceTypesResponse_FieldPathValue {
	switch fp.selector {
	case WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges:
		return &WatchDeviceTypesResponse_FieldTerminalPathValue{WatchDeviceTypesResponse_FieldTerminalPath: *fp, value: value.([]*device_type.DeviceTypeChange)}
	case WatchDeviceTypesResponse_FieldPathSelectorIsCurrent:
		return &WatchDeviceTypesResponse_FieldTerminalPathValue{WatchDeviceTypesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
		return &WatchDeviceTypesResponse_FieldTerminalPathValue{WatchDeviceTypesResponse_FieldTerminalPath: *fp, value: value.(*WatchDeviceTypesResponse_PageTokenChange)}
	case WatchDeviceTypesResponse_FieldPathSelectorResumeToken:
		return &WatchDeviceTypesResponse_FieldTerminalPathValue{WatchDeviceTypesResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize:
		return &WatchDeviceTypesResponse_FieldTerminalPathValue{WatchDeviceTypesResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset:
		return &WatchDeviceTypesResponse_FieldTerminalPathValue{WatchDeviceTypesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchDeviceTypesResponse_FieldPathSelectorIsHardReset:
		return &WatchDeviceTypesResponse_FieldTerminalPathValue{WatchDeviceTypesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeviceTypesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeviceTypesResponse_FieldPathArrayOfValues {
	fpaov := &WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues{WatchDeviceTypesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges:
		return &WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues{WatchDeviceTypesResponse_FieldTerminalPath: *fp, values: values.([][]*device_type.DeviceTypeChange)}
	case WatchDeviceTypesResponse_FieldPathSelectorIsCurrent:
		return &WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues{WatchDeviceTypesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
		return &WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues{WatchDeviceTypesResponse_FieldTerminalPath: *fp, values: values.([]*WatchDeviceTypesResponse_PageTokenChange)}
	case WatchDeviceTypesResponse_FieldPathSelectorResumeToken:
		return &WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues{WatchDeviceTypesResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize:
		return &WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues{WatchDeviceTypesResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset:
		return &WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues{WatchDeviceTypesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchDeviceTypesResponse_FieldPathSelectorIsHardReset:
		return &WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues{WatchDeviceTypesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeviceTypesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeviceTypesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeviceTypesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges:
		return &WatchDeviceTypesResponse_FieldTerminalPathArrayItemValue{WatchDeviceTypesResponse_FieldTerminalPath: *fp, value: value.(*device_type.DeviceTypeChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchDeviceTypesResponse_FieldSubPath struct {
	selector WatchDeviceTypesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchDeviceTypesResponse_FieldPath = (*WatchDeviceTypesResponse_FieldSubPath)(nil)

func (fps *WatchDeviceTypesResponse_FieldSubPath) Selector() WatchDeviceTypesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchDeviceTypesResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchDeviceTypesResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchDeviceTypesResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchDeviceTypesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchDeviceTypesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchDeviceTypesResponse
func (fps *WatchDeviceTypesResponse_FieldSubPath) Get(source *WatchDeviceTypesResponse) (values []interface{}) {
	switch fps.selector {
	case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchDeviceTypesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchDeviceTypesResponse))
}

// GetSingle returns value of selected field from source WatchDeviceTypesResponse
func (fps *WatchDeviceTypesResponse_FieldSubPath) GetSingle(source *WatchDeviceTypesResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fps.selector))
	}
}

func (fps *WatchDeviceTypesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchDeviceTypesResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchDeviceTypesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchDeviceTypesResponse_FieldSubPath) ClearValue(item *WatchDeviceTypesResponse) {
	if item != nil {
		switch fps.selector {
		case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchDeviceTypesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchDeviceTypesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchDeviceTypesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchDeviceTypesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchDeviceTypesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchDeviceTypesResponse_FieldSubPath) WithIValue(value interface{}) WatchDeviceTypesResponse_FieldPathValue {
	return &WatchDeviceTypesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchDeviceTypesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchDeviceTypesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchDeviceTypesResponse_FieldPathArrayOfValues {
	return &WatchDeviceTypesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchDeviceTypesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchDeviceTypesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchDeviceTypesResponse_FieldPathArrayItemValue {
	return &WatchDeviceTypesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchDeviceTypesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchDeviceTypesResponse_FieldPathValue allows storing values for WatchDeviceTypesResponse fields according to their type
type WatchDeviceTypesResponse_FieldPathValue interface {
	WatchDeviceTypesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeviceTypesResponse)
	CompareWith(*WatchDeviceTypesResponse) (cmp int, comparable bool)
}

func ParseWatchDeviceTypesResponse_FieldPathValue(pathStr, valueStr string) (WatchDeviceTypesResponse_FieldPathValue, error) {
	fp, err := ParseWatchDeviceTypesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceTypesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeviceTypesResponse_FieldPathValue), nil
}

func MustParseWatchDeviceTypesResponse_FieldPathValue(pathStr, valueStr string) WatchDeviceTypesResponse_FieldPathValue {
	fpv, err := ParseWatchDeviceTypesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeviceTypesResponse_FieldTerminalPathValue struct {
	WatchDeviceTypesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceTypesResponse_FieldPathValue = (*WatchDeviceTypesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDeviceTypesResponse' as interface{}
func (fpv *WatchDeviceTypesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeviceTypesResponse_FieldTerminalPathValue) AsDeviceTypeChangesValue() ([]*device_type.DeviceTypeChange, bool) {
	res, ok := fpv.value.([]*device_type.DeviceTypeChange)
	return res, ok
}
func (fpv *WatchDeviceTypesResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchDeviceTypesResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchDeviceTypesResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchDeviceTypesResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchDeviceTypesResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchDeviceTypesResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchDeviceTypesResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchDeviceTypesResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchDeviceTypesResponse
func (fpv *WatchDeviceTypesResponse_FieldTerminalPathValue) SetTo(target **WatchDeviceTypesResponse) {
	if *target == nil {
		*target = new(WatchDeviceTypesResponse)
	}
	switch fpv.selector {
	case WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges:
		(*target).DeviceTypeChanges = fpv.value.([]*device_type.DeviceTypeChange)
	case WatchDeviceTypesResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchDeviceTypesResponse_PageTokenChange)
	case WatchDeviceTypesResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchDeviceTypesResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceTypesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeviceTypesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeviceTypesResponse_FieldTerminalPathValue' with the value under path in 'WatchDeviceTypesResponse'.
func (fpv *WatchDeviceTypesResponse_FieldTerminalPathValue) CompareWith(source *WatchDeviceTypesResponse) (int, bool) {
	switch fpv.selector {
	case WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges:
		return 0, false
	case WatchDeviceTypesResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchDeviceTypesResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDeviceTypesResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceTypesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeviceTypesResponse))
}

type WatchDeviceTypesResponse_FieldSubPathValue struct {
	WatchDeviceTypesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchDeviceTypesResponse_FieldPathValue = (*WatchDeviceTypesResponse_FieldSubPathValue)(nil)

func (fpvs *WatchDeviceTypesResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchDeviceTypesResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchDeviceTypesResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchDeviceTypesResponse_FieldSubPathValue) SetTo(target **WatchDeviceTypesResponse) {
	if *target == nil {
		*target = new(WatchDeviceTypesResponse)
	}
	switch fpvs.Selector() {
	case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchDeviceTypesResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchDeviceTypesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeviceTypesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchDeviceTypesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchDeviceTypesResponse_FieldSubPathValue) CompareWith(source *WatchDeviceTypesResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchDeviceTypesResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchDeviceTypesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchDeviceTypesResponse))
}

// WatchDeviceTypesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDeviceTypesResponse according to their type
// Present only for array (repeated) types.
type WatchDeviceTypesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeviceTypesResponse_FieldPath
	ContainsValue(*WatchDeviceTypesResponse) bool
}

// ParseWatchDeviceTypesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeviceTypesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeviceTypesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeviceTypesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceTypesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeviceTypesResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchDeviceTypesResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeviceTypesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeviceTypesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeviceTypesResponse_FieldTerminalPathArrayItemValue struct {
	WatchDeviceTypesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceTypesResponse_FieldPathArrayItemValue = (*WatchDeviceTypesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeviceTypesResponse as interface{}
func (fpaiv *WatchDeviceTypesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchDeviceTypesResponse_FieldTerminalPathArrayItemValue) AsDeviceTypeChangesItemValue() (*device_type.DeviceTypeChange, bool) {
	res, ok := fpaiv.value.(*device_type.DeviceTypeChange)
	return res, ok
}

func (fpaiv *WatchDeviceTypesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeviceTypesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeviceTypesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeviceTypesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeviceTypesResponse'
func (fpaiv *WatchDeviceTypesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeviceTypesResponse) bool {
	slice := fpaiv.WatchDeviceTypesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchDeviceTypesResponse_FieldSubPathArrayItemValue struct {
	WatchDeviceTypesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchDeviceTypesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchDeviceTypesResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDeviceTypesResponse'
func (fpaivs *WatchDeviceTypesResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchDeviceTypesResponse) bool {
	switch fpaivs.Selector() {
	case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse: %d", fpaivs.Selector()))
	}
}

// WatchDeviceTypesResponse_FieldPathArrayOfValues allows storing slice of values for WatchDeviceTypesResponse fields according to their type
type WatchDeviceTypesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeviceTypesResponse_FieldPath
}

func ParseWatchDeviceTypesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeviceTypesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeviceTypesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDeviceTypesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeviceTypesResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchDeviceTypesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeviceTypesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeviceTypesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues struct {
	WatchDeviceTypesResponse_FieldTerminalPath
	values interface{}
}

var _ WatchDeviceTypesResponse_FieldPathArrayOfValues = (*WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeviceTypesResponse_FieldPathSelectorDeviceTypeChanges:
		for _, v := range fpaov.values.([][]*device_type.DeviceTypeChange) {
			values = append(values, v)
		}
	case WatchDeviceTypesResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchDeviceTypesResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchDeviceTypesResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchDeviceTypesResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchDeviceTypesResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchDeviceTypesResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchDeviceTypesResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues) AsDeviceTypeChangesArrayOfValues() ([][]*device_type.DeviceTypeChange, bool) {
	res, ok := fpaov.values.([][]*device_type.DeviceTypeChange)
	return res, ok
}
func (fpaov *WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchDeviceTypesResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchDeviceTypesResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchDeviceTypesResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchDeviceTypesResponse_FieldSubPathArrayOfValues struct {
	WatchDeviceTypesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchDeviceTypesResponse_FieldPathArrayOfValues = (*WatchDeviceTypesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchDeviceTypesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchDeviceTypesResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchDeviceTypesResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchDeviceTypesResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDeviceTypesResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDeviceTypesResponsePageTokenChange_FieldPathSelector
	Get(source *WatchDeviceTypesResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchDeviceTypesResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchDeviceTypesResponse_PageTokenChange)

	// Those methods build corresponding WatchDeviceTypesResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDeviceTypesResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDeviceTypesResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchDeviceTypesResponsePageTokenChange_FieldPathSelector int32

const (
	WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchDeviceTypesResponsePageTokenChange_FieldPathSelector = 0
	WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken WatchDeviceTypesResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchDeviceTypesResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchDeviceTypesResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchDeviceTypesResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDeviceTypesResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath{selector: WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath{selector: WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDeviceTypesResponse_PageTokenChange", fp)
}

func ParseWatchDeviceTypesResponsePageTokenChange_FieldPath(rawField string) (WatchDeviceTypesResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDeviceTypesResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchDeviceTypesResponsePageTokenChange_FieldPath(rawField string) WatchDeviceTypesResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchDeviceTypesResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchDeviceTypesResponsePageTokenChange_FieldPathSelector
}

var _ WatchDeviceTypesResponsePageTokenChange_FieldPath = (*WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) Selector() WatchDeviceTypesResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDeviceTypesResponse_PageTokenChange
func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) Get(source *WatchDeviceTypesResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDeviceTypesResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchDeviceTypesResponse_PageTokenChange
func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchDeviceTypesResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDeviceTypesResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*device_type.PagerCursor)(nil)
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*device_type.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchDeviceTypesResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDeviceTypesResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchDeviceTypesResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathValue{WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*device_type.PagerCursor)}
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathValue{WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*device_type.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDeviceTypesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*device_type.PagerCursor)}
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*device_type.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDeviceTypesResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchDeviceTypesResponsePageTokenChange_FieldPathValue interface {
	WatchDeviceTypesResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDeviceTypesResponse_PageTokenChange)
	CompareWith(*WatchDeviceTypesResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchDeviceTypesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchDeviceTypesResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchDeviceTypesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDeviceTypesResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchDeviceTypesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchDeviceTypesResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchDeviceTypesResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceTypesResponsePageTokenChange_FieldPathValue = (*WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*device_type.PagerCursor, bool) {
	res, ok := fpv.value.(*device_type.PagerCursor)
	return res, ok
}
func (fpv *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*device_type.PagerCursor, bool) {
	res, ok := fpv.value.(*device_type.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchDeviceTypesResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchDeviceTypesResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*device_type.PagerCursor)
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*device_type.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDeviceTypesResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchDeviceTypesResponse_PageTokenChange'.
func (fpv *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchDeviceTypesResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDeviceTypesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDeviceTypesResponse_PageTokenChange))
}

// WatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDeviceTypesResponsePageTokenChange_FieldPath
	ContainsValue(*WatchDeviceTypesResponse_PageTokenChange) bool
}

// ParseWatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDeviceTypesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchDeviceTypesResponsePageTokenChange_FieldPathArrayItemValue = (*WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDeviceTypesResponse_PageTokenChange as interface{}
func (fpaiv *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDeviceTypesResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDeviceTypesResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDeviceTypesResponse_PageTokenChange) bool {
	slice := fpaiv.WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDeviceTypesResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchDeviceTypesResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDeviceTypesResponsePageTokenChange_FieldPath
}

func ParseWatchDeviceTypesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDeviceTypesResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDeviceTypesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDeviceTypesResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchDeviceTypesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDeviceTypesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDeviceTypesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchDeviceTypesResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchDeviceTypesResponsePageTokenChange_FieldPathArrayOfValues = (*WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*device_type.PagerCursor) {
			values = append(values, v)
		}
	case WatchDeviceTypesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*device_type.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*device_type.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device_type.PagerCursor)
	return res, ok
}
func (fpaov *WatchDeviceTypesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*device_type.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device_type.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateDeviceTypeRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateDeviceTypeRequest_FieldPathSelector
	Get(source *CreateDeviceTypeRequest) []interface{}
	GetSingle(source *CreateDeviceTypeRequest) (interface{}, bool)
	ClearValue(item *CreateDeviceTypeRequest)

	// Those methods build corresponding CreateDeviceTypeRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateDeviceTypeRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateDeviceTypeRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateDeviceTypeRequest_FieldPathArrayItemValue
}

type CreateDeviceTypeRequest_FieldPathSelector int32

const (
	CreateDeviceTypeRequest_FieldPathSelectorDeviceType CreateDeviceTypeRequest_FieldPathSelector = 0
)

func (s CreateDeviceTypeRequest_FieldPathSelector) String() string {
	switch s {
	case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
		return "device_type"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", s))
	}
}

func BuildCreateDeviceTypeRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateDeviceTypeRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateDeviceTypeRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device_type", "deviceType", "device-type":
			return &CreateDeviceTypeRequest_FieldTerminalPath{selector: CreateDeviceTypeRequest_FieldPathSelectorDeviceType}, nil
		}
	} else {
		switch fp[0] {
		case "device_type", "deviceType", "device-type":
			if subpath, err := device_type.BuildDeviceType_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateDeviceTypeRequest_FieldSubPath{selector: CreateDeviceTypeRequest_FieldPathSelectorDeviceType, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateDeviceTypeRequest", fp)
}

func ParseCreateDeviceTypeRequest_FieldPath(rawField string) (CreateDeviceTypeRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateDeviceTypeRequest_FieldPath(fp)
}

func MustParseCreateDeviceTypeRequest_FieldPath(rawField string) CreateDeviceTypeRequest_FieldPath {
	fp, err := ParseCreateDeviceTypeRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateDeviceTypeRequest_FieldTerminalPath struct {
	selector CreateDeviceTypeRequest_FieldPathSelector
}

var _ CreateDeviceTypeRequest_FieldPath = (*CreateDeviceTypeRequest_FieldTerminalPath)(nil)

func (fp *CreateDeviceTypeRequest_FieldTerminalPath) Selector() CreateDeviceTypeRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateDeviceTypeRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateDeviceTypeRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateDeviceTypeRequest
func (fp *CreateDeviceTypeRequest_FieldTerminalPath) Get(source *CreateDeviceTypeRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
			if source.DeviceType != nil {
				values = append(values, source.DeviceType)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateDeviceTypeRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateDeviceTypeRequest))
}

// GetSingle returns value pointed by specific field of from source CreateDeviceTypeRequest
func (fp *CreateDeviceTypeRequest_FieldTerminalPath) GetSingle(source *CreateDeviceTypeRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
		res := source.GetDeviceType()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *CreateDeviceTypeRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateDeviceTypeRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateDeviceTypeRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
		return (*device_type.DeviceType)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *CreateDeviceTypeRequest_FieldTerminalPath) ClearValue(item *CreateDeviceTypeRequest) {
	if item != nil {
		switch fp.selector {
		case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
			item.DeviceType = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateDeviceTypeRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateDeviceTypeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateDeviceTypeRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreateDeviceTypeRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateDeviceTypeRequest_FieldTerminalPath) WithIValue(value interface{}) CreateDeviceTypeRequest_FieldPathValue {
	switch fp.selector {
	case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
		return &CreateDeviceTypeRequest_FieldTerminalPathValue{CreateDeviceTypeRequest_FieldTerminalPath: *fp, value: value.(*device_type.DeviceType)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *CreateDeviceTypeRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateDeviceTypeRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateDeviceTypeRequest_FieldPathArrayOfValues {
	fpaov := &CreateDeviceTypeRequest_FieldTerminalPathArrayOfValues{CreateDeviceTypeRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
		return &CreateDeviceTypeRequest_FieldTerminalPathArrayOfValues{CreateDeviceTypeRequest_FieldTerminalPath: *fp, values: values.([]*device_type.DeviceType)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateDeviceTypeRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateDeviceTypeRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateDeviceTypeRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *CreateDeviceTypeRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateDeviceTypeRequest_FieldSubPath struct {
	selector CreateDeviceTypeRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateDeviceTypeRequest_FieldPath = (*CreateDeviceTypeRequest_FieldSubPath)(nil)

func (fps *CreateDeviceTypeRequest_FieldSubPath) Selector() CreateDeviceTypeRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateDeviceTypeRequest_FieldSubPath) AsDeviceTypeSubPath() (device_type.DeviceType_FieldPath, bool) {
	res, ok := fps.subPath.(device_type.DeviceType_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateDeviceTypeRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateDeviceTypeRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateDeviceTypeRequest
func (fps *CreateDeviceTypeRequest_FieldSubPath) Get(source *CreateDeviceTypeRequest) (values []interface{}) {
	switch fps.selector {
	case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
		values = append(values, fps.subPath.GetRaw(source.GetDeviceType())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateDeviceTypeRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateDeviceTypeRequest))
}

// GetSingle returns value of selected field from source CreateDeviceTypeRequest
func (fps *CreateDeviceTypeRequest_FieldSubPath) GetSingle(source *CreateDeviceTypeRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
		if source.GetDeviceType() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDeviceType())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fps.selector))
	}
}

func (fps *CreateDeviceTypeRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateDeviceTypeRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateDeviceTypeRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateDeviceTypeRequest_FieldSubPath) ClearValue(item *CreateDeviceTypeRequest) {
	if item != nil {
		switch fps.selector {
		case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
			fps.subPath.ClearValueRaw(item.DeviceType)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateDeviceTypeRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateDeviceTypeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateDeviceTypeRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateDeviceTypeRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateDeviceTypeRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateDeviceTypeRequest_FieldSubPath) WithIValue(value interface{}) CreateDeviceTypeRequest_FieldPathValue {
	return &CreateDeviceTypeRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateDeviceTypeRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateDeviceTypeRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateDeviceTypeRequest_FieldPathArrayOfValues {
	return &CreateDeviceTypeRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateDeviceTypeRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateDeviceTypeRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateDeviceTypeRequest_FieldPathArrayItemValue {
	return &CreateDeviceTypeRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateDeviceTypeRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateDeviceTypeRequest_FieldPathValue allows storing values for CreateDeviceTypeRequest fields according to their type
type CreateDeviceTypeRequest_FieldPathValue interface {
	CreateDeviceTypeRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateDeviceTypeRequest)
	CompareWith(*CreateDeviceTypeRequest) (cmp int, comparable bool)
}

func ParseCreateDeviceTypeRequest_FieldPathValue(pathStr, valueStr string) (CreateDeviceTypeRequest_FieldPathValue, error) {
	fp, err := ParseCreateDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDeviceTypeRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateDeviceTypeRequest_FieldPathValue), nil
}

func MustParseCreateDeviceTypeRequest_FieldPathValue(pathStr, valueStr string) CreateDeviceTypeRequest_FieldPathValue {
	fpv, err := ParseCreateDeviceTypeRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateDeviceTypeRequest_FieldTerminalPathValue struct {
	CreateDeviceTypeRequest_FieldTerminalPath
	value interface{}
}

var _ CreateDeviceTypeRequest_FieldPathValue = (*CreateDeviceTypeRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateDeviceTypeRequest' as interface{}
func (fpv *CreateDeviceTypeRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateDeviceTypeRequest_FieldTerminalPathValue) AsDeviceTypeValue() (*device_type.DeviceType, bool) {
	res, ok := fpv.value.(*device_type.DeviceType)
	return res, ok
}

// SetTo stores value for selected field for object CreateDeviceTypeRequest
func (fpv *CreateDeviceTypeRequest_FieldTerminalPathValue) SetTo(target **CreateDeviceTypeRequest) {
	if *target == nil {
		*target = new(CreateDeviceTypeRequest)
	}
	switch fpv.selector {
	case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
		(*target).DeviceType = fpv.value.(*device_type.DeviceType)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fpv.selector))
	}
}

func (fpv *CreateDeviceTypeRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateDeviceTypeRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateDeviceTypeRequest_FieldTerminalPathValue' with the value under path in 'CreateDeviceTypeRequest'.
func (fpv *CreateDeviceTypeRequest_FieldTerminalPathValue) CompareWith(source *CreateDeviceTypeRequest) (int, bool) {
	switch fpv.selector {
	case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fpv.selector))
	}
}

func (fpv *CreateDeviceTypeRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateDeviceTypeRequest))
}

type CreateDeviceTypeRequest_FieldSubPathValue struct {
	CreateDeviceTypeRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateDeviceTypeRequest_FieldPathValue = (*CreateDeviceTypeRequest_FieldSubPathValue)(nil)

func (fpvs *CreateDeviceTypeRequest_FieldSubPathValue) AsDeviceTypePathValue() (device_type.DeviceType_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device_type.DeviceType_FieldPathValue)
	return res, ok
}

func (fpvs *CreateDeviceTypeRequest_FieldSubPathValue) SetTo(target **CreateDeviceTypeRequest) {
	if *target == nil {
		*target = new(CreateDeviceTypeRequest)
	}
	switch fpvs.Selector() {
	case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
		fpvs.subPathValue.(device_type.DeviceType_FieldPathValue).SetTo(&(*target).DeviceType)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateDeviceTypeRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateDeviceTypeRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateDeviceTypeRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateDeviceTypeRequest_FieldSubPathValue) CompareWith(source *CreateDeviceTypeRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
		return fpvs.subPathValue.(device_type.DeviceType_FieldPathValue).CompareWith(source.GetDeviceType())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateDeviceTypeRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateDeviceTypeRequest))
}

// CreateDeviceTypeRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateDeviceTypeRequest according to their type
// Present only for array (repeated) types.
type CreateDeviceTypeRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateDeviceTypeRequest_FieldPath
	ContainsValue(*CreateDeviceTypeRequest) bool
}

// ParseCreateDeviceTypeRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateDeviceTypeRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDeviceTypeRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateDeviceTypeRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateDeviceTypeRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateDeviceTypeRequest_FieldTerminalPathArrayItemValue struct {
	CreateDeviceTypeRequest_FieldTerminalPath
	value interface{}
}

var _ CreateDeviceTypeRequest_FieldPathArrayItemValue = (*CreateDeviceTypeRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateDeviceTypeRequest as interface{}
func (fpaiv *CreateDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateDeviceTypeRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateDeviceTypeRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateDeviceTypeRequest'
func (fpaiv *CreateDeviceTypeRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateDeviceTypeRequest) bool {
	slice := fpaiv.CreateDeviceTypeRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateDeviceTypeRequest_FieldSubPathArrayItemValue struct {
	CreateDeviceTypeRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateDeviceTypeRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateDeviceTypeRequest_FieldSubPathArrayItemValue) AsDeviceTypePathItemValue() (device_type.DeviceType_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device_type.DeviceType_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateDeviceTypeRequest'
func (fpaivs *CreateDeviceTypeRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateDeviceTypeRequest) bool {
	switch fpaivs.Selector() {
	case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
		return fpaivs.subPathItemValue.(device_type.DeviceType_FieldPathArrayItemValue).ContainsValue(source.GetDeviceType())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDeviceTypeRequest: %d", fpaivs.Selector()))
	}
}

// CreateDeviceTypeRequest_FieldPathArrayOfValues allows storing slice of values for CreateDeviceTypeRequest fields according to their type
type CreateDeviceTypeRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateDeviceTypeRequest_FieldPath
}

func ParseCreateDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateDeviceTypeRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDeviceTypeRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateDeviceTypeRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateDeviceTypeRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateDeviceTypeRequest_FieldTerminalPathArrayOfValues struct {
	CreateDeviceTypeRequest_FieldTerminalPath
	values interface{}
}

var _ CreateDeviceTypeRequest_FieldPathArrayOfValues = (*CreateDeviceTypeRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateDeviceTypeRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateDeviceTypeRequest_FieldPathSelectorDeviceType:
		for _, v := range fpaov.values.([]*device_type.DeviceType) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateDeviceTypeRequest_FieldTerminalPathArrayOfValues) AsDeviceTypeArrayOfValues() ([]*device_type.DeviceType, bool) {
	res, ok := fpaov.values.([]*device_type.DeviceType)
	return res, ok
}

type CreateDeviceTypeRequest_FieldSubPathArrayOfValues struct {
	CreateDeviceTypeRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateDeviceTypeRequest_FieldPathArrayOfValues = (*CreateDeviceTypeRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateDeviceTypeRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateDeviceTypeRequest_FieldSubPathArrayOfValues) AsDeviceTypePathArrayOfValues() (device_type.DeviceType_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device_type.DeviceType_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateDeviceTypeRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateDeviceTypeRequest_FieldPathSelector
	Get(source *UpdateDeviceTypeRequest) []interface{}
	GetSingle(source *UpdateDeviceTypeRequest) (interface{}, bool)
	ClearValue(item *UpdateDeviceTypeRequest)

	// Those methods build corresponding UpdateDeviceTypeRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateDeviceTypeRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateDeviceTypeRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateDeviceTypeRequest_FieldPathArrayItemValue
}

type UpdateDeviceTypeRequest_FieldPathSelector int32

const (
	UpdateDeviceTypeRequest_FieldPathSelectorDeviceType   UpdateDeviceTypeRequest_FieldPathSelector = 0
	UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask   UpdateDeviceTypeRequest_FieldPathSelector = 1
	UpdateDeviceTypeRequest_FieldPathSelectorCas          UpdateDeviceTypeRequest_FieldPathSelector = 2
	UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing UpdateDeviceTypeRequest_FieldPathSelector = 3
)

func (s UpdateDeviceTypeRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
		return "device_type"
	case UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateDeviceTypeRequest_FieldPathSelectorCas:
		return "cas"
	case UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing:
		return "allow_missing"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", s))
	}
}

func BuildUpdateDeviceTypeRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateDeviceTypeRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateDeviceTypeRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "device_type", "deviceType", "device-type":
			return &UpdateDeviceTypeRequest_FieldTerminalPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorDeviceType}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateDeviceTypeRequest_FieldTerminalPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateDeviceTypeRequest_FieldTerminalPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorCas}, nil
		case "allow_missing", "allowMissing", "allow-missing":
			return &UpdateDeviceTypeRequest_FieldTerminalPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing}, nil
		}
	} else {
		switch fp[0] {
		case "device_type", "deviceType", "device-type":
			if subpath, err := device_type.BuildDeviceType_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDeviceTypeRequest_FieldSubPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorDeviceType, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateDeviceTypeRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDeviceTypeRequest_FieldSubPath{selector: UpdateDeviceTypeRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateDeviceTypeRequest", fp)
}

func ParseUpdateDeviceTypeRequest_FieldPath(rawField string) (UpdateDeviceTypeRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateDeviceTypeRequest_FieldPath(fp)
}

func MustParseUpdateDeviceTypeRequest_FieldPath(rawField string) UpdateDeviceTypeRequest_FieldPath {
	fp, err := ParseUpdateDeviceTypeRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateDeviceTypeRequest_FieldTerminalPath struct {
	selector UpdateDeviceTypeRequest_FieldPathSelector
}

var _ UpdateDeviceTypeRequest_FieldPath = (*UpdateDeviceTypeRequest_FieldTerminalPath)(nil)

func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) Selector() UpdateDeviceTypeRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateDeviceTypeRequest
func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) Get(source *UpdateDeviceTypeRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
			if source.DeviceType != nil {
				values = append(values, source.DeviceType)
			}
		case UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateDeviceTypeRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		case UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing:
			values = append(values, source.AllowMissing)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateDeviceTypeRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateDeviceTypeRequest
func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) GetSingle(source *UpdateDeviceTypeRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
		res := source.GetDeviceType()
		return res, res != nil
	case UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateDeviceTypeRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	case UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing:
		return source.GetAllowMissing(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateDeviceTypeRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
		return (*device_type.DeviceType)(nil)
	case UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask:
		return (*device_type.DeviceType_FieldMask)(nil)
	case UpdateDeviceTypeRequest_FieldPathSelectorCas:
		return (*UpdateDeviceTypeRequest_CAS)(nil)
	case UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) ClearValue(item *UpdateDeviceTypeRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
			item.DeviceType = nil
		case UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateDeviceTypeRequest_FieldPathSelectorCas:
			item.Cas = nil
		case UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing:
			item.AllowMissing = false
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateDeviceTypeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask ||
		fp.selector == UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing
}

func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateDeviceTypeRequest_FieldPathValue {
	switch fp.selector {
	case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
		return &UpdateDeviceTypeRequest_FieldTerminalPathValue{UpdateDeviceTypeRequest_FieldTerminalPath: *fp, value: value.(*device_type.DeviceType)}
	case UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask:
		return &UpdateDeviceTypeRequest_FieldTerminalPathValue{UpdateDeviceTypeRequest_FieldTerminalPath: *fp, value: value.(*device_type.DeviceType_FieldMask)}
	case UpdateDeviceTypeRequest_FieldPathSelectorCas:
		return &UpdateDeviceTypeRequest_FieldTerminalPathValue{UpdateDeviceTypeRequest_FieldTerminalPath: *fp, value: value.(*UpdateDeviceTypeRequest_CAS)}
	case UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing:
		return &UpdateDeviceTypeRequest_FieldTerminalPathValue{UpdateDeviceTypeRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateDeviceTypeRequest_FieldPathArrayOfValues {
	fpaov := &UpdateDeviceTypeRequest_FieldTerminalPathArrayOfValues{UpdateDeviceTypeRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
		return &UpdateDeviceTypeRequest_FieldTerminalPathArrayOfValues{UpdateDeviceTypeRequest_FieldTerminalPath: *fp, values: values.([]*device_type.DeviceType)}
	case UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask:
		return &UpdateDeviceTypeRequest_FieldTerminalPathArrayOfValues{UpdateDeviceTypeRequest_FieldTerminalPath: *fp, values: values.([]*device_type.DeviceType_FieldMask)}
	case UpdateDeviceTypeRequest_FieldPathSelectorCas:
		return &UpdateDeviceTypeRequest_FieldTerminalPathArrayOfValues{UpdateDeviceTypeRequest_FieldTerminalPath: *fp, values: values.([]*UpdateDeviceTypeRequest_CAS)}
	case UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing:
		return &UpdateDeviceTypeRequest_FieldTerminalPathArrayOfValues{UpdateDeviceTypeRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateDeviceTypeRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *UpdateDeviceTypeRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateDeviceTypeRequest_FieldSubPath struct {
	selector UpdateDeviceTypeRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateDeviceTypeRequest_FieldPath = (*UpdateDeviceTypeRequest_FieldSubPath)(nil)

func (fps *UpdateDeviceTypeRequest_FieldSubPath) Selector() UpdateDeviceTypeRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateDeviceTypeRequest_FieldSubPath) AsDeviceTypeSubPath() (device_type.DeviceType_FieldPath, bool) {
	res, ok := fps.subPath.(device_type.DeviceType_FieldPath)
	return res, ok
}
func (fps *UpdateDeviceTypeRequest_FieldSubPath) AsCasSubPath() (UpdateDeviceTypeRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateDeviceTypeRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateDeviceTypeRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateDeviceTypeRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateDeviceTypeRequest
func (fps *UpdateDeviceTypeRequest_FieldSubPath) Get(source *UpdateDeviceTypeRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
		values = append(values, fps.subPath.GetRaw(source.GetDeviceType())...)
	case UpdateDeviceTypeRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateDeviceTypeRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateDeviceTypeRequest))
}

// GetSingle returns value of selected field from source UpdateDeviceTypeRequest
func (fps *UpdateDeviceTypeRequest_FieldSubPath) GetSingle(source *UpdateDeviceTypeRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
		if source.GetDeviceType() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDeviceType())
	case UpdateDeviceTypeRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fps.selector))
	}
}

func (fps *UpdateDeviceTypeRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateDeviceTypeRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateDeviceTypeRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateDeviceTypeRequest_FieldSubPath) ClearValue(item *UpdateDeviceTypeRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
			fps.subPath.ClearValueRaw(item.DeviceType)
		case UpdateDeviceTypeRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateDeviceTypeRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateDeviceTypeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateDeviceTypeRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateDeviceTypeRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateDeviceTypeRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateDeviceTypeRequest_FieldSubPath) WithIValue(value interface{}) UpdateDeviceTypeRequest_FieldPathValue {
	return &UpdateDeviceTypeRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateDeviceTypeRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateDeviceTypeRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateDeviceTypeRequest_FieldPathArrayOfValues {
	return &UpdateDeviceTypeRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateDeviceTypeRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateDeviceTypeRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateDeviceTypeRequest_FieldPathArrayItemValue {
	return &UpdateDeviceTypeRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateDeviceTypeRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateDeviceTypeRequest_FieldPathValue allows storing values for UpdateDeviceTypeRequest fields according to their type
type UpdateDeviceTypeRequest_FieldPathValue interface {
	UpdateDeviceTypeRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateDeviceTypeRequest)
	CompareWith(*UpdateDeviceTypeRequest) (cmp int, comparable bool)
}

func ParseUpdateDeviceTypeRequest_FieldPathValue(pathStr, valueStr string) (UpdateDeviceTypeRequest_FieldPathValue, error) {
	fp, err := ParseUpdateDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDeviceTypeRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateDeviceTypeRequest_FieldPathValue), nil
}

func MustParseUpdateDeviceTypeRequest_FieldPathValue(pathStr, valueStr string) UpdateDeviceTypeRequest_FieldPathValue {
	fpv, err := ParseUpdateDeviceTypeRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateDeviceTypeRequest_FieldTerminalPathValue struct {
	UpdateDeviceTypeRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateDeviceTypeRequest_FieldPathValue = (*UpdateDeviceTypeRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateDeviceTypeRequest' as interface{}
func (fpv *UpdateDeviceTypeRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateDeviceTypeRequest_FieldTerminalPathValue) AsDeviceTypeValue() (*device_type.DeviceType, bool) {
	res, ok := fpv.value.(*device_type.DeviceType)
	return res, ok
}
func (fpv *UpdateDeviceTypeRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*device_type.DeviceType_FieldMask, bool) {
	res, ok := fpv.value.(*device_type.DeviceType_FieldMask)
	return res, ok
}
func (fpv *UpdateDeviceTypeRequest_FieldTerminalPathValue) AsCasValue() (*UpdateDeviceTypeRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateDeviceTypeRequest_CAS)
	return res, ok
}
func (fpv *UpdateDeviceTypeRequest_FieldTerminalPathValue) AsAllowMissingValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object UpdateDeviceTypeRequest
func (fpv *UpdateDeviceTypeRequest_FieldTerminalPathValue) SetTo(target **UpdateDeviceTypeRequest) {
	if *target == nil {
		*target = new(UpdateDeviceTypeRequest)
	}
	switch fpv.selector {
	case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
		(*target).DeviceType = fpv.value.(*device_type.DeviceType)
	case UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*device_type.DeviceType_FieldMask)
	case UpdateDeviceTypeRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateDeviceTypeRequest_CAS)
	case UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing:
		(*target).AllowMissing = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateDeviceTypeRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeviceTypeRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateDeviceTypeRequest_FieldTerminalPathValue' with the value under path in 'UpdateDeviceTypeRequest'.
func (fpv *UpdateDeviceTypeRequest_FieldTerminalPathValue) CompareWith(source *UpdateDeviceTypeRequest) (int, bool) {
	switch fpv.selector {
	case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
		return 0, false
	case UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateDeviceTypeRequest_FieldPathSelectorCas:
		return 0, false
	case UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAllowMissing()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateDeviceTypeRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateDeviceTypeRequest))
}

type UpdateDeviceTypeRequest_FieldSubPathValue struct {
	UpdateDeviceTypeRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateDeviceTypeRequest_FieldPathValue = (*UpdateDeviceTypeRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateDeviceTypeRequest_FieldSubPathValue) AsDeviceTypePathValue() (device_type.DeviceType_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device_type.DeviceType_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateDeviceTypeRequest_FieldSubPathValue) AsCasPathValue() (UpdateDeviceTypeRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateDeviceTypeRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateDeviceTypeRequest_FieldSubPathValue) SetTo(target **UpdateDeviceTypeRequest) {
	if *target == nil {
		*target = new(UpdateDeviceTypeRequest)
	}
	switch fpvs.Selector() {
	case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
		fpvs.subPathValue.(device_type.DeviceType_FieldPathValue).SetTo(&(*target).DeviceType)
	case UpdateDeviceTypeRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateDeviceTypeRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeviceTypeRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeviceTypeRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateDeviceTypeRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateDeviceTypeRequest_FieldSubPathValue) CompareWith(source *UpdateDeviceTypeRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
		return fpvs.subPathValue.(device_type.DeviceType_FieldPathValue).CompareWith(source.GetDeviceType())
	case UpdateDeviceTypeRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateDeviceTypeRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeviceTypeRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateDeviceTypeRequest))
}

// UpdateDeviceTypeRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateDeviceTypeRequest according to their type
// Present only for array (repeated) types.
type UpdateDeviceTypeRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateDeviceTypeRequest_FieldPath
	ContainsValue(*UpdateDeviceTypeRequest) bool
}

// ParseUpdateDeviceTypeRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateDeviceTypeRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDeviceTypeRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateDeviceTypeRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateDeviceTypeRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateDeviceTypeRequest_FieldTerminalPathArrayItemValue struct {
	UpdateDeviceTypeRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateDeviceTypeRequest_FieldPathArrayItemValue = (*UpdateDeviceTypeRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateDeviceTypeRequest as interface{}
func (fpaiv *UpdateDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateDeviceTypeRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateDeviceTypeRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateDeviceTypeRequest'
func (fpaiv *UpdateDeviceTypeRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateDeviceTypeRequest) bool {
	slice := fpaiv.UpdateDeviceTypeRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateDeviceTypeRequest_FieldSubPathArrayItemValue struct {
	UpdateDeviceTypeRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateDeviceTypeRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateDeviceTypeRequest_FieldSubPathArrayItemValue) AsDeviceTypePathItemValue() (device_type.DeviceType_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device_type.DeviceType_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateDeviceTypeRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateDeviceTypeRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateDeviceTypeRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateDeviceTypeRequest'
func (fpaivs *UpdateDeviceTypeRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateDeviceTypeRequest) bool {
	switch fpaivs.Selector() {
	case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
		return fpaivs.subPathItemValue.(device_type.DeviceType_FieldPathArrayItemValue).ContainsValue(source.GetDeviceType())
	case UpdateDeviceTypeRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateDeviceTypeRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest: %d", fpaivs.Selector()))
	}
}

// UpdateDeviceTypeRequest_FieldPathArrayOfValues allows storing slice of values for UpdateDeviceTypeRequest fields according to their type
type UpdateDeviceTypeRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateDeviceTypeRequest_FieldPath
}

func ParseUpdateDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateDeviceTypeRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDeviceTypeRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateDeviceTypeRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateDeviceTypeRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateDeviceTypeRequest_FieldTerminalPathArrayOfValues struct {
	UpdateDeviceTypeRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateDeviceTypeRequest_FieldPathArrayOfValues = (*UpdateDeviceTypeRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateDeviceTypeRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateDeviceTypeRequest_FieldPathSelectorDeviceType:
		for _, v := range fpaov.values.([]*device_type.DeviceType) {
			values = append(values, v)
		}
	case UpdateDeviceTypeRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*device_type.DeviceType_FieldMask) {
			values = append(values, v)
		}
	case UpdateDeviceTypeRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateDeviceTypeRequest_CAS) {
			values = append(values, v)
		}
	case UpdateDeviceTypeRequest_FieldPathSelectorAllowMissing:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateDeviceTypeRequest_FieldTerminalPathArrayOfValues) AsDeviceTypeArrayOfValues() ([]*device_type.DeviceType, bool) {
	res, ok := fpaov.values.([]*device_type.DeviceType)
	return res, ok
}
func (fpaov *UpdateDeviceTypeRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*device_type.DeviceType_FieldMask, bool) {
	res, ok := fpaov.values.([]*device_type.DeviceType_FieldMask)
	return res, ok
}
func (fpaov *UpdateDeviceTypeRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateDeviceTypeRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateDeviceTypeRequest_CAS)
	return res, ok
}
func (fpaov *UpdateDeviceTypeRequest_FieldTerminalPathArrayOfValues) AsAllowMissingArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type UpdateDeviceTypeRequest_FieldSubPathArrayOfValues struct {
	UpdateDeviceTypeRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateDeviceTypeRequest_FieldPathArrayOfValues = (*UpdateDeviceTypeRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateDeviceTypeRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateDeviceTypeRequest_FieldSubPathArrayOfValues) AsDeviceTypePathArrayOfValues() (device_type.DeviceType_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device_type.DeviceType_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateDeviceTypeRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateDeviceTypeRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateDeviceTypeRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateDeviceTypeRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateDeviceTypeRequestCAS_FieldPathSelector
	Get(source *UpdateDeviceTypeRequest_CAS) []interface{}
	GetSingle(source *UpdateDeviceTypeRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateDeviceTypeRequest_CAS)

	// Those methods build corresponding UpdateDeviceTypeRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateDeviceTypeRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateDeviceTypeRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateDeviceTypeRequestCAS_FieldPathArrayItemValue
}

type UpdateDeviceTypeRequestCAS_FieldPathSelector int32

const (
	UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState UpdateDeviceTypeRequestCAS_FieldPathSelector = 0
	UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask        UpdateDeviceTypeRequestCAS_FieldPathSelector = 1
)

func (s UpdateDeviceTypeRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", s))
	}
}

func BuildUpdateDeviceTypeRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateDeviceTypeRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateDeviceTypeRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateDeviceTypeRequestCAS_FieldTerminalPath{selector: UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateDeviceTypeRequestCAS_FieldTerminalPath{selector: UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := device_type.BuildDeviceType_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDeviceTypeRequestCAS_FieldSubPath{selector: UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateDeviceTypeRequest_CAS", fp)
}

func ParseUpdateDeviceTypeRequestCAS_FieldPath(rawField string) (UpdateDeviceTypeRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateDeviceTypeRequestCAS_FieldPath(fp)
}

func MustParseUpdateDeviceTypeRequestCAS_FieldPath(rawField string) UpdateDeviceTypeRequestCAS_FieldPath {
	fp, err := ParseUpdateDeviceTypeRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateDeviceTypeRequestCAS_FieldTerminalPath struct {
	selector UpdateDeviceTypeRequestCAS_FieldPathSelector
}

var _ UpdateDeviceTypeRequestCAS_FieldPath = (*UpdateDeviceTypeRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) Selector() UpdateDeviceTypeRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateDeviceTypeRequest_CAS
func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) Get(source *UpdateDeviceTypeRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateDeviceTypeRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateDeviceTypeRequest_CAS
func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) GetSingle(source *UpdateDeviceTypeRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateDeviceTypeRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
		return (*device_type.DeviceType)(nil)
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask:
		return (*device_type.DeviceType_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) ClearValue(item *UpdateDeviceTypeRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateDeviceTypeRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateDeviceTypeRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateDeviceTypeRequestCAS_FieldTerminalPathValue{UpdateDeviceTypeRequestCAS_FieldTerminalPath: *fp, value: value.(*device_type.DeviceType)}
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateDeviceTypeRequestCAS_FieldTerminalPathValue{UpdateDeviceTypeRequestCAS_FieldTerminalPath: *fp, value: value.(*device_type.DeviceType_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateDeviceTypeRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateDeviceTypeRequestCAS_FieldTerminalPathArrayOfValues{UpdateDeviceTypeRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateDeviceTypeRequestCAS_FieldTerminalPathArrayOfValues{UpdateDeviceTypeRequestCAS_FieldTerminalPath: *fp, values: values.([]*device_type.DeviceType)}
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateDeviceTypeRequestCAS_FieldTerminalPathArrayOfValues{UpdateDeviceTypeRequestCAS_FieldTerminalPath: *fp, values: values.([]*device_type.DeviceType_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateDeviceTypeRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDeviceTypeRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateDeviceTypeRequestCAS_FieldSubPath struct {
	selector UpdateDeviceTypeRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateDeviceTypeRequestCAS_FieldPath = (*UpdateDeviceTypeRequestCAS_FieldSubPath)(nil)

func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) Selector() UpdateDeviceTypeRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) AsConditionalStateSubPath() (device_type.DeviceType_FieldPath, bool) {
	res, ok := fps.subPath.(device_type.DeviceType_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateDeviceTypeRequest_CAS
func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) Get(source *UpdateDeviceTypeRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateDeviceTypeRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateDeviceTypeRequest_CAS
func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) GetSingle(source *UpdateDeviceTypeRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateDeviceTypeRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) ClearValue(item *UpdateDeviceTypeRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateDeviceTypeRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateDeviceTypeRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateDeviceTypeRequestCAS_FieldPathValue {
	return &UpdateDeviceTypeRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateDeviceTypeRequestCAS_FieldPathArrayOfValues {
	return &UpdateDeviceTypeRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateDeviceTypeRequestCAS_FieldPathArrayItemValue {
	return &UpdateDeviceTypeRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateDeviceTypeRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateDeviceTypeRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateDeviceTypeRequestCAS_FieldPathValue interface {
	UpdateDeviceTypeRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateDeviceTypeRequest_CAS)
	CompareWith(*UpdateDeviceTypeRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateDeviceTypeRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateDeviceTypeRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateDeviceTypeRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateDeviceTypeRequestCAS_FieldPathValue), nil
}

func MustParseUpdateDeviceTypeRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateDeviceTypeRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateDeviceTypeRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateDeviceTypeRequestCAS_FieldTerminalPathValue struct {
	UpdateDeviceTypeRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateDeviceTypeRequestCAS_FieldPathValue = (*UpdateDeviceTypeRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateDeviceTypeRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateDeviceTypeRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*device_type.DeviceType, bool) {
	res, ok := fpv.value.(*device_type.DeviceType)
	return res, ok
}
func (fpv *UpdateDeviceTypeRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*device_type.DeviceType_FieldMask, bool) {
	res, ok := fpv.value.(*device_type.DeviceType_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateDeviceTypeRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateDeviceTypeRequest_CAS) {
	if *target == nil {
		*target = new(UpdateDeviceTypeRequest_CAS)
	}
	switch fpv.selector {
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*device_type.DeviceType)
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device_type.DeviceType_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateDeviceTypeRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeviceTypeRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateDeviceTypeRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateDeviceTypeRequest_CAS'.
func (fpv *UpdateDeviceTypeRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateDeviceTypeRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateDeviceTypeRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateDeviceTypeRequest_CAS))
}

type UpdateDeviceTypeRequestCAS_FieldSubPathValue struct {
	UpdateDeviceTypeRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateDeviceTypeRequestCAS_FieldPathValue = (*UpdateDeviceTypeRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateDeviceTypeRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (device_type.DeviceType_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device_type.DeviceType_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateDeviceTypeRequestCAS_FieldSubPathValue) SetTo(target **UpdateDeviceTypeRequest_CAS) {
	if *target == nil {
		*target = new(UpdateDeviceTypeRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(device_type.DeviceType_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeviceTypeRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDeviceTypeRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateDeviceTypeRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateDeviceTypeRequestCAS_FieldSubPathValue) CompareWith(source *UpdateDeviceTypeRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(device_type.DeviceType_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDeviceTypeRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateDeviceTypeRequest_CAS))
}

// UpdateDeviceTypeRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateDeviceTypeRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateDeviceTypeRequestCAS_FieldPath
	ContainsValue(*UpdateDeviceTypeRequest_CAS) bool
}

// ParseUpdateDeviceTypeRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateDeviceTypeRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateDeviceTypeRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateDeviceTypeRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateDeviceTypeRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateDeviceTypeRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateDeviceTypeRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateDeviceTypeRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateDeviceTypeRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateDeviceTypeRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateDeviceTypeRequestCAS_FieldPathArrayItemValue = (*UpdateDeviceTypeRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateDeviceTypeRequest_CAS as interface{}
func (fpaiv *UpdateDeviceTypeRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateDeviceTypeRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateDeviceTypeRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateDeviceTypeRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateDeviceTypeRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateDeviceTypeRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateDeviceTypeRequest_CAS) bool {
	slice := fpaiv.UpdateDeviceTypeRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateDeviceTypeRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateDeviceTypeRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateDeviceTypeRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateDeviceTypeRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (device_type.DeviceType_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device_type.DeviceType_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateDeviceTypeRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateDeviceTypeRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(device_type.DeviceType_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDeviceTypeRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateDeviceTypeRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateDeviceTypeRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateDeviceTypeRequestCAS_FieldPath
}

func ParseUpdateDeviceTypeRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateDeviceTypeRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateDeviceTypeRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateDeviceTypeRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateDeviceTypeRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateDeviceTypeRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateDeviceTypeRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateDeviceTypeRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateDeviceTypeRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateDeviceTypeRequestCAS_FieldPathArrayOfValues = (*UpdateDeviceTypeRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateDeviceTypeRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*device_type.DeviceType) {
			values = append(values, v)
		}
	case UpdateDeviceTypeRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device_type.DeviceType_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateDeviceTypeRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*device_type.DeviceType, bool) {
	res, ok := fpaov.values.([]*device_type.DeviceType)
	return res, ok
}
func (fpaov *UpdateDeviceTypeRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device_type.DeviceType_FieldMask, bool) {
	res, ok := fpaov.values.([]*device_type.DeviceType_FieldMask)
	return res, ok
}

type UpdateDeviceTypeRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateDeviceTypeRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateDeviceTypeRequestCAS_FieldPathArrayOfValues = (*UpdateDeviceTypeRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateDeviceTypeRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateDeviceTypeRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (device_type.DeviceType_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device_type.DeviceType_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteDeviceTypeRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteDeviceTypeRequest_FieldPathSelector
	Get(source *DeleteDeviceTypeRequest) []interface{}
	GetSingle(source *DeleteDeviceTypeRequest) (interface{}, bool)
	ClearValue(item *DeleteDeviceTypeRequest)

	// Those methods build corresponding DeleteDeviceTypeRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteDeviceTypeRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteDeviceTypeRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteDeviceTypeRequest_FieldPathArrayItemValue
}

type DeleteDeviceTypeRequest_FieldPathSelector int32

const (
	DeleteDeviceTypeRequest_FieldPathSelectorName DeleteDeviceTypeRequest_FieldPathSelector = 0
)

func (s DeleteDeviceTypeRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteDeviceTypeRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceTypeRequest: %d", s))
	}
}

func BuildDeleteDeviceTypeRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteDeviceTypeRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteDeviceTypeRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteDeviceTypeRequest_FieldTerminalPath{selector: DeleteDeviceTypeRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteDeviceTypeRequest", fp)
}

func ParseDeleteDeviceTypeRequest_FieldPath(rawField string) (DeleteDeviceTypeRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteDeviceTypeRequest_FieldPath(fp)
}

func MustParseDeleteDeviceTypeRequest_FieldPath(rawField string) DeleteDeviceTypeRequest_FieldPath {
	fp, err := ParseDeleteDeviceTypeRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteDeviceTypeRequest_FieldTerminalPath struct {
	selector DeleteDeviceTypeRequest_FieldPathSelector
}

var _ DeleteDeviceTypeRequest_FieldPath = (*DeleteDeviceTypeRequest_FieldTerminalPath)(nil)

func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) Selector() DeleteDeviceTypeRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteDeviceTypeRequest
func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) Get(source *DeleteDeviceTypeRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteDeviceTypeRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteDeviceTypeRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteDeviceTypeRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteDeviceTypeRequest
func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) GetSingle(source *DeleteDeviceTypeRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteDeviceTypeRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteDeviceTypeRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteDeviceTypeRequest_FieldPathSelectorName:
		return (*device_type.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) ClearValue(item *DeleteDeviceTypeRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteDeviceTypeRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteDeviceTypeRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteDeviceTypeRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteDeviceTypeRequest_FieldPathSelectorName
}

func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteDeviceTypeRequest_FieldPathValue {
	switch fp.selector {
	case DeleteDeviceTypeRequest_FieldPathSelectorName:
		return &DeleteDeviceTypeRequest_FieldTerminalPathValue{DeleteDeviceTypeRequest_FieldTerminalPath: *fp, value: value.(*device_type.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteDeviceTypeRequest_FieldPathArrayOfValues {
	fpaov := &DeleteDeviceTypeRequest_FieldTerminalPathArrayOfValues{DeleteDeviceTypeRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteDeviceTypeRequest_FieldPathSelectorName:
		return &DeleteDeviceTypeRequest_FieldTerminalPathArrayOfValues{DeleteDeviceTypeRequest_FieldTerminalPath: *fp, values: values.([]*device_type.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceTypeRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteDeviceTypeRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceTypeRequest: %d", fp.selector))
	}
}

func (fp *DeleteDeviceTypeRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteDeviceTypeRequest_FieldPathValue allows storing values for DeleteDeviceTypeRequest fields according to their type
type DeleteDeviceTypeRequest_FieldPathValue interface {
	DeleteDeviceTypeRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteDeviceTypeRequest)
	CompareWith(*DeleteDeviceTypeRequest) (cmp int, comparable bool)
}

func ParseDeleteDeviceTypeRequest_FieldPathValue(pathStr, valueStr string) (DeleteDeviceTypeRequest_FieldPathValue, error) {
	fp, err := ParseDeleteDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDeviceTypeRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteDeviceTypeRequest_FieldPathValue), nil
}

func MustParseDeleteDeviceTypeRequest_FieldPathValue(pathStr, valueStr string) DeleteDeviceTypeRequest_FieldPathValue {
	fpv, err := ParseDeleteDeviceTypeRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteDeviceTypeRequest_FieldTerminalPathValue struct {
	DeleteDeviceTypeRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteDeviceTypeRequest_FieldPathValue = (*DeleteDeviceTypeRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteDeviceTypeRequest' as interface{}
func (fpv *DeleteDeviceTypeRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteDeviceTypeRequest_FieldTerminalPathValue) AsNameValue() (*device_type.Reference, bool) {
	res, ok := fpv.value.(*device_type.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteDeviceTypeRequest
func (fpv *DeleteDeviceTypeRequest_FieldTerminalPathValue) SetTo(target **DeleteDeviceTypeRequest) {
	if *target == nil {
		*target = new(DeleteDeviceTypeRequest)
	}
	switch fpv.selector {
	case DeleteDeviceTypeRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*device_type.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceTypeRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteDeviceTypeRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteDeviceTypeRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteDeviceTypeRequest_FieldTerminalPathValue' with the value under path in 'DeleteDeviceTypeRequest'.
func (fpv *DeleteDeviceTypeRequest_FieldTerminalPathValue) CompareWith(source *DeleteDeviceTypeRequest) (int, bool) {
	switch fpv.selector {
	case DeleteDeviceTypeRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*device_type.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDeviceTypeRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteDeviceTypeRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteDeviceTypeRequest))
}

// DeleteDeviceTypeRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteDeviceTypeRequest according to their type
// Present only for array (repeated) types.
type DeleteDeviceTypeRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteDeviceTypeRequest_FieldPath
	ContainsValue(*DeleteDeviceTypeRequest) bool
}

// ParseDeleteDeviceTypeRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteDeviceTypeRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDeviceTypeRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteDeviceTypeRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteDeviceTypeRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteDeviceTypeRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteDeviceTypeRequest_FieldTerminalPathArrayItemValue struct {
	DeleteDeviceTypeRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteDeviceTypeRequest_FieldPathArrayItemValue = (*DeleteDeviceTypeRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteDeviceTypeRequest as interface{}
func (fpaiv *DeleteDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteDeviceTypeRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteDeviceTypeRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteDeviceTypeRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteDeviceTypeRequest'
func (fpaiv *DeleteDeviceTypeRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteDeviceTypeRequest) bool {
	slice := fpaiv.DeleteDeviceTypeRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteDeviceTypeRequest_FieldPathArrayOfValues allows storing slice of values for DeleteDeviceTypeRequest fields according to their type
type DeleteDeviceTypeRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteDeviceTypeRequest_FieldPath
}

func ParseDeleteDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteDeviceTypeRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteDeviceTypeRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDeviceTypeRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteDeviceTypeRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteDeviceTypeRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteDeviceTypeRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteDeviceTypeRequest_FieldTerminalPathArrayOfValues struct {
	DeleteDeviceTypeRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteDeviceTypeRequest_FieldPathArrayOfValues = (*DeleteDeviceTypeRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteDeviceTypeRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteDeviceTypeRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*device_type.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteDeviceTypeRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*device_type.Reference, bool) {
	res, ok := fpaov.values.([]*device_type.Reference)
	return res, ok
}
