// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/os_version_service.proto
// DO NOT EDIT!!!

package os_version_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	os_version "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/os_version"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &os_version.OsVersion{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetOsVersionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetOsVersionRequest_FieldPathSelector
	Get(source *GetOsVersionRequest) []interface{}
	GetSingle(source *GetOsVersionRequest) (interface{}, bool)
	ClearValue(item *GetOsVersionRequest)

	// Those methods build corresponding GetOsVersionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetOsVersionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetOsVersionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetOsVersionRequest_FieldPathArrayItemValue
}

type GetOsVersionRequest_FieldPathSelector int32

const (
	GetOsVersionRequest_FieldPathSelectorName      GetOsVersionRequest_FieldPathSelector = 0
	GetOsVersionRequest_FieldPathSelectorFieldMask GetOsVersionRequest_FieldPathSelector = 1
	GetOsVersionRequest_FieldPathSelectorView      GetOsVersionRequest_FieldPathSelector = 2
)

func (s GetOsVersionRequest_FieldPathSelector) String() string {
	switch s {
	case GetOsVersionRequest_FieldPathSelectorName:
		return "name"
	case GetOsVersionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetOsVersionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsVersionRequest: %d", s))
	}
}

func BuildGetOsVersionRequest_FieldPath(fp gotenobject.RawFieldPath) (GetOsVersionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetOsVersionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetOsVersionRequest_FieldTerminalPath{selector: GetOsVersionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetOsVersionRequest_FieldTerminalPath{selector: GetOsVersionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetOsVersionRequest_FieldTerminalPath{selector: GetOsVersionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetOsVersionRequest", fp)
}

func ParseGetOsVersionRequest_FieldPath(rawField string) (GetOsVersionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetOsVersionRequest_FieldPath(fp)
}

func MustParseGetOsVersionRequest_FieldPath(rawField string) GetOsVersionRequest_FieldPath {
	fp, err := ParseGetOsVersionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetOsVersionRequest_FieldTerminalPath struct {
	selector GetOsVersionRequest_FieldPathSelector
}

var _ GetOsVersionRequest_FieldPath = (*GetOsVersionRequest_FieldTerminalPath)(nil)

func (fp *GetOsVersionRequest_FieldTerminalPath) Selector() GetOsVersionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetOsVersionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetOsVersionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetOsVersionRequest
func (fp *GetOsVersionRequest_FieldTerminalPath) Get(source *GetOsVersionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetOsVersionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetOsVersionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetOsVersionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetOsVersionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetOsVersionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetOsVersionRequest))
}

// GetSingle returns value pointed by specific field of from source GetOsVersionRequest
func (fp *GetOsVersionRequest_FieldTerminalPath) GetSingle(source *GetOsVersionRequest) (interface{}, bool) {
	switch fp.selector {
	case GetOsVersionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetOsVersionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetOsVersionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsVersionRequest: %d", fp.selector))
	}
}

func (fp *GetOsVersionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetOsVersionRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetOsVersionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetOsVersionRequest_FieldPathSelectorName:
		return (*os_version.Reference)(nil)
	case GetOsVersionRequest_FieldPathSelectorFieldMask:
		return (*os_version.OsVersion_FieldMask)(nil)
	case GetOsVersionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsVersionRequest: %d", fp.selector))
	}
}

func (fp *GetOsVersionRequest_FieldTerminalPath) ClearValue(item *GetOsVersionRequest) {
	if item != nil {
		switch fp.selector {
		case GetOsVersionRequest_FieldPathSelectorName:
			item.Name = nil
		case GetOsVersionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetOsVersionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetOsVersionRequest: %d", fp.selector))
		}
	}
}

func (fp *GetOsVersionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetOsVersionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetOsVersionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetOsVersionRequest_FieldPathSelectorName ||
		fp.selector == GetOsVersionRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetOsVersionRequest_FieldPathSelectorView
}

func (fp *GetOsVersionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetOsVersionRequest_FieldTerminalPath) WithIValue(value interface{}) GetOsVersionRequest_FieldPathValue {
	switch fp.selector {
	case GetOsVersionRequest_FieldPathSelectorName:
		return &GetOsVersionRequest_FieldTerminalPathValue{GetOsVersionRequest_FieldTerminalPath: *fp, value: value.(*os_version.Reference)}
	case GetOsVersionRequest_FieldPathSelectorFieldMask:
		return &GetOsVersionRequest_FieldTerminalPathValue{GetOsVersionRequest_FieldTerminalPath: *fp, value: value.(*os_version.OsVersion_FieldMask)}
	case GetOsVersionRequest_FieldPathSelectorView:
		return &GetOsVersionRequest_FieldTerminalPathValue{GetOsVersionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsVersionRequest: %d", fp.selector))
	}
}

func (fp *GetOsVersionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetOsVersionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetOsVersionRequest_FieldPathArrayOfValues {
	fpaov := &GetOsVersionRequest_FieldTerminalPathArrayOfValues{GetOsVersionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetOsVersionRequest_FieldPathSelectorName:
		return &GetOsVersionRequest_FieldTerminalPathArrayOfValues{GetOsVersionRequest_FieldTerminalPath: *fp, values: values.([]*os_version.Reference)}
	case GetOsVersionRequest_FieldPathSelectorFieldMask:
		return &GetOsVersionRequest_FieldTerminalPathArrayOfValues{GetOsVersionRequest_FieldTerminalPath: *fp, values: values.([]*os_version.OsVersion_FieldMask)}
	case GetOsVersionRequest_FieldPathSelectorView:
		return &GetOsVersionRequest_FieldTerminalPathArrayOfValues{GetOsVersionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsVersionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetOsVersionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetOsVersionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetOsVersionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsVersionRequest: %d", fp.selector))
	}
}

func (fp *GetOsVersionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetOsVersionRequest_FieldPathValue allows storing values for GetOsVersionRequest fields according to their type
type GetOsVersionRequest_FieldPathValue interface {
	GetOsVersionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetOsVersionRequest)
	CompareWith(*GetOsVersionRequest) (cmp int, comparable bool)
}

func ParseGetOsVersionRequest_FieldPathValue(pathStr, valueStr string) (GetOsVersionRequest_FieldPathValue, error) {
	fp, err := ParseGetOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetOsVersionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetOsVersionRequest_FieldPathValue), nil
}

func MustParseGetOsVersionRequest_FieldPathValue(pathStr, valueStr string) GetOsVersionRequest_FieldPathValue {
	fpv, err := ParseGetOsVersionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetOsVersionRequest_FieldTerminalPathValue struct {
	GetOsVersionRequest_FieldTerminalPath
	value interface{}
}

var _ GetOsVersionRequest_FieldPathValue = (*GetOsVersionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetOsVersionRequest' as interface{}
func (fpv *GetOsVersionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetOsVersionRequest_FieldTerminalPathValue) AsNameValue() (*os_version.Reference, bool) {
	res, ok := fpv.value.(*os_version.Reference)
	return res, ok
}
func (fpv *GetOsVersionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*os_version.OsVersion_FieldMask, bool) {
	res, ok := fpv.value.(*os_version.OsVersion_FieldMask)
	return res, ok
}
func (fpv *GetOsVersionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetOsVersionRequest
func (fpv *GetOsVersionRequest_FieldTerminalPathValue) SetTo(target **GetOsVersionRequest) {
	if *target == nil {
		*target = new(GetOsVersionRequest)
	}
	switch fpv.selector {
	case GetOsVersionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*os_version.Reference)
	case GetOsVersionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*os_version.OsVersion_FieldMask)
	case GetOsVersionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsVersionRequest: %d", fpv.selector))
	}
}

func (fpv *GetOsVersionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetOsVersionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetOsVersionRequest_FieldTerminalPathValue' with the value under path in 'GetOsVersionRequest'.
func (fpv *GetOsVersionRequest_FieldTerminalPathValue) CompareWith(source *GetOsVersionRequest) (int, bool) {
	switch fpv.selector {
	case GetOsVersionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*os_version.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetOsVersionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetOsVersionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetOsVersionRequest: %d", fpv.selector))
	}
}

func (fpv *GetOsVersionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetOsVersionRequest))
}

// GetOsVersionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetOsVersionRequest according to their type
// Present only for array (repeated) types.
type GetOsVersionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetOsVersionRequest_FieldPath
	ContainsValue(*GetOsVersionRequest) bool
}

// ParseGetOsVersionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetOsVersionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetOsVersionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetOsVersionRequest_FieldPathArrayItemValue), nil
}

func MustParseGetOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetOsVersionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetOsVersionRequest_FieldTerminalPathArrayItemValue struct {
	GetOsVersionRequest_FieldTerminalPath
	value interface{}
}

var _ GetOsVersionRequest_FieldPathArrayItemValue = (*GetOsVersionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetOsVersionRequest as interface{}
func (fpaiv *GetOsVersionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetOsVersionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetOsVersionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetOsVersionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetOsVersionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetOsVersionRequest'
func (fpaiv *GetOsVersionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetOsVersionRequest) bool {
	slice := fpaiv.GetOsVersionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetOsVersionRequest_FieldPathArrayOfValues allows storing slice of values for GetOsVersionRequest fields according to their type
type GetOsVersionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetOsVersionRequest_FieldPath
}

func ParseGetOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetOsVersionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetOsVersionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetOsVersionRequest_FieldPathArrayOfValues), nil
}

func MustParseGetOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetOsVersionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetOsVersionRequest_FieldTerminalPathArrayOfValues struct {
	GetOsVersionRequest_FieldTerminalPath
	values interface{}
}

var _ GetOsVersionRequest_FieldPathArrayOfValues = (*GetOsVersionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetOsVersionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetOsVersionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*os_version.Reference) {
			values = append(values, v)
		}
	case GetOsVersionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*os_version.OsVersion_FieldMask) {
			values = append(values, v)
		}
	case GetOsVersionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetOsVersionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*os_version.Reference, bool) {
	res, ok := fpaov.values.([]*os_version.Reference)
	return res, ok
}
func (fpaov *GetOsVersionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*os_version.OsVersion_FieldMask, bool) {
	res, ok := fpaov.values.([]*os_version.OsVersion_FieldMask)
	return res, ok
}
func (fpaov *GetOsVersionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetOsVersionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetOsVersionsRequest_FieldPathSelector
	Get(source *BatchGetOsVersionsRequest) []interface{}
	GetSingle(source *BatchGetOsVersionsRequest) (interface{}, bool)
	ClearValue(item *BatchGetOsVersionsRequest)

	// Those methods build corresponding BatchGetOsVersionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetOsVersionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetOsVersionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetOsVersionsRequest_FieldPathArrayItemValue
}

type BatchGetOsVersionsRequest_FieldPathSelector int32

const (
	BatchGetOsVersionsRequest_FieldPathSelectorNames     BatchGetOsVersionsRequest_FieldPathSelector = 0
	BatchGetOsVersionsRequest_FieldPathSelectorFieldMask BatchGetOsVersionsRequest_FieldPathSelector = 1
	BatchGetOsVersionsRequest_FieldPathSelectorView      BatchGetOsVersionsRequest_FieldPathSelector = 2
)

func (s BatchGetOsVersionsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetOsVersionsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetOsVersionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetOsVersionsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsRequest: %d", s))
	}
}

func BuildBatchGetOsVersionsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetOsVersionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetOsVersionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetOsVersionsRequest_FieldTerminalPath{selector: BatchGetOsVersionsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetOsVersionsRequest_FieldTerminalPath{selector: BatchGetOsVersionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetOsVersionsRequest_FieldTerminalPath{selector: BatchGetOsVersionsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetOsVersionsRequest", fp)
}

func ParseBatchGetOsVersionsRequest_FieldPath(rawField string) (BatchGetOsVersionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetOsVersionsRequest_FieldPath(fp)
}

func MustParseBatchGetOsVersionsRequest_FieldPath(rawField string) BatchGetOsVersionsRequest_FieldPath {
	fp, err := ParseBatchGetOsVersionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetOsVersionsRequest_FieldTerminalPath struct {
	selector BatchGetOsVersionsRequest_FieldPathSelector
}

var _ BatchGetOsVersionsRequest_FieldPath = (*BatchGetOsVersionsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) Selector() BatchGetOsVersionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetOsVersionsRequest
func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) Get(source *BatchGetOsVersionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetOsVersionsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetOsVersionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetOsVersionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetOsVersionsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetOsVersionsRequest
func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) GetSingle(source *BatchGetOsVersionsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetOsVersionsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetOsVersionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetOsVersionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetOsVersionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetOsVersionsRequest_FieldPathSelectorNames:
		return ([]*os_version.Reference)(nil)
	case BatchGetOsVersionsRequest_FieldPathSelectorFieldMask:
		return (*os_version.OsVersion_FieldMask)(nil)
	case BatchGetOsVersionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) ClearValue(item *BatchGetOsVersionsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetOsVersionsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetOsVersionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetOsVersionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetOsVersionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetOsVersionsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetOsVersionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetOsVersionsRequest_FieldPathSelectorView
}

func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetOsVersionsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetOsVersionsRequest_FieldPathSelectorNames:
		return &BatchGetOsVersionsRequest_FieldTerminalPathValue{BatchGetOsVersionsRequest_FieldTerminalPath: *fp, value: value.([]*os_version.Reference)}
	case BatchGetOsVersionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetOsVersionsRequest_FieldTerminalPathValue{BatchGetOsVersionsRequest_FieldTerminalPath: *fp, value: value.(*os_version.OsVersion_FieldMask)}
	case BatchGetOsVersionsRequest_FieldPathSelectorView:
		return &BatchGetOsVersionsRequest_FieldTerminalPathValue{BatchGetOsVersionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetOsVersionsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetOsVersionsRequest_FieldTerminalPathArrayOfValues{BatchGetOsVersionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetOsVersionsRequest_FieldPathSelectorNames:
		return &BatchGetOsVersionsRequest_FieldTerminalPathArrayOfValues{BatchGetOsVersionsRequest_FieldTerminalPath: *fp, values: values.([][]*os_version.Reference)}
	case BatchGetOsVersionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetOsVersionsRequest_FieldTerminalPathArrayOfValues{BatchGetOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]*os_version.OsVersion_FieldMask)}
	case BatchGetOsVersionsRequest_FieldPathSelectorView:
		return &BatchGetOsVersionsRequest_FieldTerminalPathArrayOfValues{BatchGetOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetOsVersionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetOsVersionsRequest_FieldPathSelectorNames:
		return &BatchGetOsVersionsRequest_FieldTerminalPathArrayItemValue{BatchGetOsVersionsRequest_FieldTerminalPath: *fp, value: value.(*os_version.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetOsVersionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetOsVersionsRequest_FieldPathValue allows storing values for BatchGetOsVersionsRequest fields according to their type
type BatchGetOsVersionsRequest_FieldPathValue interface {
	BatchGetOsVersionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetOsVersionsRequest)
	CompareWith(*BatchGetOsVersionsRequest) (cmp int, comparable bool)
}

func ParseBatchGetOsVersionsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetOsVersionsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetOsVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOsVersionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetOsVersionsRequest_FieldPathValue), nil
}

func MustParseBatchGetOsVersionsRequest_FieldPathValue(pathStr, valueStr string) BatchGetOsVersionsRequest_FieldPathValue {
	fpv, err := ParseBatchGetOsVersionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetOsVersionsRequest_FieldTerminalPathValue struct {
	BatchGetOsVersionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetOsVersionsRequest_FieldPathValue = (*BatchGetOsVersionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetOsVersionsRequest' as interface{}
func (fpv *BatchGetOsVersionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetOsVersionsRequest_FieldTerminalPathValue) AsNamesValue() ([]*os_version.Reference, bool) {
	res, ok := fpv.value.([]*os_version.Reference)
	return res, ok
}
func (fpv *BatchGetOsVersionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*os_version.OsVersion_FieldMask, bool) {
	res, ok := fpv.value.(*os_version.OsVersion_FieldMask)
	return res, ok
}
func (fpv *BatchGetOsVersionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetOsVersionsRequest
func (fpv *BatchGetOsVersionsRequest_FieldTerminalPathValue) SetTo(target **BatchGetOsVersionsRequest) {
	if *target == nil {
		*target = new(BatchGetOsVersionsRequest)
	}
	switch fpv.selector {
	case BatchGetOsVersionsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*os_version.Reference)
	case BatchGetOsVersionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*os_version.OsVersion_FieldMask)
	case BatchGetOsVersionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetOsVersionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetOsVersionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetOsVersionsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetOsVersionsRequest'.
func (fpv *BatchGetOsVersionsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetOsVersionsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetOsVersionsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetOsVersionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetOsVersionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetOsVersionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetOsVersionsRequest))
}

// BatchGetOsVersionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetOsVersionsRequest according to their type
// Present only for array (repeated) types.
type BatchGetOsVersionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetOsVersionsRequest_FieldPath
	ContainsValue(*BatchGetOsVersionsRequest) bool
}

// ParseBatchGetOsVersionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetOsVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetOsVersionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetOsVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOsVersionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetOsVersionsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetOsVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetOsVersionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetOsVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetOsVersionsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetOsVersionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetOsVersionsRequest_FieldPathArrayItemValue = (*BatchGetOsVersionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetOsVersionsRequest as interface{}
func (fpaiv *BatchGetOsVersionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetOsVersionsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*os_version.Reference, bool) {
	res, ok := fpaiv.value.(*os_version.Reference)
	return res, ok
}

func (fpaiv *BatchGetOsVersionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetOsVersionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetOsVersionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetOsVersionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetOsVersionsRequest'
func (fpaiv *BatchGetOsVersionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetOsVersionsRequest) bool {
	slice := fpaiv.BatchGetOsVersionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetOsVersionsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetOsVersionsRequest fields according to their type
type BatchGetOsVersionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetOsVersionsRequest_FieldPath
}

func ParseBatchGetOsVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetOsVersionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetOsVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOsVersionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetOsVersionsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetOsVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetOsVersionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetOsVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetOsVersionsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetOsVersionsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetOsVersionsRequest_FieldPathArrayOfValues = (*BatchGetOsVersionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetOsVersionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetOsVersionsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*os_version.Reference) {
			values = append(values, v)
		}
	case BatchGetOsVersionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*os_version.OsVersion_FieldMask) {
			values = append(values, v)
		}
	case BatchGetOsVersionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetOsVersionsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*os_version.Reference, bool) {
	res, ok := fpaov.values.([][]*os_version.Reference)
	return res, ok
}
func (fpaov *BatchGetOsVersionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*os_version.OsVersion_FieldMask, bool) {
	res, ok := fpaov.values.([]*os_version.OsVersion_FieldMask)
	return res, ok
}
func (fpaov *BatchGetOsVersionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetOsVersionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetOsVersionsResponse_FieldPathSelector
	Get(source *BatchGetOsVersionsResponse) []interface{}
	GetSingle(source *BatchGetOsVersionsResponse) (interface{}, bool)
	ClearValue(item *BatchGetOsVersionsResponse)

	// Those methods build corresponding BatchGetOsVersionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetOsVersionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetOsVersionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetOsVersionsResponse_FieldPathArrayItemValue
}

type BatchGetOsVersionsResponse_FieldPathSelector int32

const (
	BatchGetOsVersionsResponse_FieldPathSelectorOsVersions BatchGetOsVersionsResponse_FieldPathSelector = 0
	BatchGetOsVersionsResponse_FieldPathSelectorMissing    BatchGetOsVersionsResponse_FieldPathSelector = 1
)

func (s BatchGetOsVersionsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
		return "os_versions"
	case BatchGetOsVersionsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", s))
	}
}

func BuildBatchGetOsVersionsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetOsVersionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetOsVersionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "os_versions", "osVersions", "os-versions":
			return &BatchGetOsVersionsResponse_FieldTerminalPath{selector: BatchGetOsVersionsResponse_FieldPathSelectorOsVersions}, nil
		case "missing":
			return &BatchGetOsVersionsResponse_FieldTerminalPath{selector: BatchGetOsVersionsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "os_versions", "osVersions", "os-versions":
			if subpath, err := os_version.BuildOsVersion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetOsVersionsResponse_FieldSubPath{selector: BatchGetOsVersionsResponse_FieldPathSelectorOsVersions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetOsVersionsResponse", fp)
}

func ParseBatchGetOsVersionsResponse_FieldPath(rawField string) (BatchGetOsVersionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetOsVersionsResponse_FieldPath(fp)
}

func MustParseBatchGetOsVersionsResponse_FieldPath(rawField string) BatchGetOsVersionsResponse_FieldPath {
	fp, err := ParseBatchGetOsVersionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetOsVersionsResponse_FieldTerminalPath struct {
	selector BatchGetOsVersionsResponse_FieldPathSelector
}

var _ BatchGetOsVersionsResponse_FieldPath = (*BatchGetOsVersionsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) Selector() BatchGetOsVersionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetOsVersionsResponse
func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) Get(source *BatchGetOsVersionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
			for _, value := range source.GetOsVersions() {
				values = append(values, value)
			}
		case BatchGetOsVersionsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetOsVersionsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetOsVersionsResponse
func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) GetSingle(source *BatchGetOsVersionsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
		res := source.GetOsVersions()
		return res, res != nil
	case BatchGetOsVersionsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetOsVersionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
		return ([]*os_version.OsVersion)(nil)
	case BatchGetOsVersionsResponse_FieldPathSelectorMissing:
		return ([]*os_version.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) ClearValue(item *BatchGetOsVersionsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
			item.OsVersions = nil
		case BatchGetOsVersionsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetOsVersionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetOsVersionsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetOsVersionsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
		return &BatchGetOsVersionsResponse_FieldTerminalPathValue{BatchGetOsVersionsResponse_FieldTerminalPath: *fp, value: value.([]*os_version.OsVersion)}
	case BatchGetOsVersionsResponse_FieldPathSelectorMissing:
		return &BatchGetOsVersionsResponse_FieldTerminalPathValue{BatchGetOsVersionsResponse_FieldTerminalPath: *fp, value: value.([]*os_version.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetOsVersionsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetOsVersionsResponse_FieldTerminalPathArrayOfValues{BatchGetOsVersionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
		return &BatchGetOsVersionsResponse_FieldTerminalPathArrayOfValues{BatchGetOsVersionsResponse_FieldTerminalPath: *fp, values: values.([][]*os_version.OsVersion)}
	case BatchGetOsVersionsResponse_FieldPathSelectorMissing:
		return &BatchGetOsVersionsResponse_FieldTerminalPathArrayOfValues{BatchGetOsVersionsResponse_FieldTerminalPath: *fp, values: values.([][]*os_version.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetOsVersionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
		return &BatchGetOsVersionsResponse_FieldTerminalPathArrayItemValue{BatchGetOsVersionsResponse_FieldTerminalPath: *fp, value: value.(*os_version.OsVersion)}
	case BatchGetOsVersionsResponse_FieldPathSelectorMissing:
		return &BatchGetOsVersionsResponse_FieldTerminalPathArrayItemValue{BatchGetOsVersionsResponse_FieldTerminalPath: *fp, value: value.(*os_version.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetOsVersionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetOsVersionsResponse_FieldSubPath struct {
	selector BatchGetOsVersionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetOsVersionsResponse_FieldPath = (*BatchGetOsVersionsResponse_FieldSubPath)(nil)

func (fps *BatchGetOsVersionsResponse_FieldSubPath) Selector() BatchGetOsVersionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetOsVersionsResponse_FieldSubPath) AsOsVersionsSubPath() (os_version.OsVersion_FieldPath, bool) {
	res, ok := fps.subPath.(os_version.OsVersion_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetOsVersionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetOsVersionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetOsVersionsResponse
func (fps *BatchGetOsVersionsResponse_FieldSubPath) Get(source *BatchGetOsVersionsResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
		for _, item := range source.GetOsVersions() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetOsVersionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetOsVersionsResponse))
}

// GetSingle returns value of selected field from source BatchGetOsVersionsResponse
func (fps *BatchGetOsVersionsResponse_FieldSubPath) GetSingle(source *BatchGetOsVersionsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
		if len(source.GetOsVersions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOsVersions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetOsVersionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetOsVersionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetOsVersionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetOsVersionsResponse_FieldSubPath) ClearValue(item *BatchGetOsVersionsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
			for _, subItem := range item.OsVersions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetOsVersionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetOsVersionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetOsVersionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetOsVersionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetOsVersionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetOsVersionsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetOsVersionsResponse_FieldPathValue {
	return &BatchGetOsVersionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetOsVersionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetOsVersionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetOsVersionsResponse_FieldPathArrayOfValues {
	return &BatchGetOsVersionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetOsVersionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetOsVersionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetOsVersionsResponse_FieldPathArrayItemValue {
	return &BatchGetOsVersionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetOsVersionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetOsVersionsResponse_FieldPathValue allows storing values for BatchGetOsVersionsResponse fields according to their type
type BatchGetOsVersionsResponse_FieldPathValue interface {
	BatchGetOsVersionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetOsVersionsResponse)
	CompareWith(*BatchGetOsVersionsResponse) (cmp int, comparable bool)
}

func ParseBatchGetOsVersionsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetOsVersionsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetOsVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOsVersionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetOsVersionsResponse_FieldPathValue), nil
}

func MustParseBatchGetOsVersionsResponse_FieldPathValue(pathStr, valueStr string) BatchGetOsVersionsResponse_FieldPathValue {
	fpv, err := ParseBatchGetOsVersionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetOsVersionsResponse_FieldTerminalPathValue struct {
	BatchGetOsVersionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetOsVersionsResponse_FieldPathValue = (*BatchGetOsVersionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetOsVersionsResponse' as interface{}
func (fpv *BatchGetOsVersionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetOsVersionsResponse_FieldTerminalPathValue) AsOsVersionsValue() ([]*os_version.OsVersion, bool) {
	res, ok := fpv.value.([]*os_version.OsVersion)
	return res, ok
}
func (fpv *BatchGetOsVersionsResponse_FieldTerminalPathValue) AsMissingValue() ([]*os_version.Reference, bool) {
	res, ok := fpv.value.([]*os_version.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetOsVersionsResponse
func (fpv *BatchGetOsVersionsResponse_FieldTerminalPathValue) SetTo(target **BatchGetOsVersionsResponse) {
	if *target == nil {
		*target = new(BatchGetOsVersionsResponse)
	}
	switch fpv.selector {
	case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
		(*target).OsVersions = fpv.value.([]*os_version.OsVersion)
	case BatchGetOsVersionsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*os_version.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetOsVersionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetOsVersionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetOsVersionsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetOsVersionsResponse'.
func (fpv *BatchGetOsVersionsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetOsVersionsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
		return 0, false
	case BatchGetOsVersionsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetOsVersionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetOsVersionsResponse))
}

type BatchGetOsVersionsResponse_FieldSubPathValue struct {
	BatchGetOsVersionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetOsVersionsResponse_FieldPathValue = (*BatchGetOsVersionsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetOsVersionsResponse_FieldSubPathValue) AsOsVersionsPathValue() (os_version.OsVersion_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(os_version.OsVersion_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetOsVersionsResponse_FieldSubPathValue) SetTo(target **BatchGetOsVersionsResponse) {
	if *target == nil {
		*target = new(BatchGetOsVersionsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetOsVersionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetOsVersionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetOsVersionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetOsVersionsResponse_FieldSubPathValue) CompareWith(source *BatchGetOsVersionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetOsVersionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetOsVersionsResponse))
}

// BatchGetOsVersionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetOsVersionsResponse according to their type
// Present only for array (repeated) types.
type BatchGetOsVersionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetOsVersionsResponse_FieldPath
	ContainsValue(*BatchGetOsVersionsResponse) bool
}

// ParseBatchGetOsVersionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetOsVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetOsVersionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetOsVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOsVersionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetOsVersionsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetOsVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetOsVersionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetOsVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetOsVersionsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetOsVersionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetOsVersionsResponse_FieldPathArrayItemValue = (*BatchGetOsVersionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetOsVersionsResponse as interface{}
func (fpaiv *BatchGetOsVersionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetOsVersionsResponse_FieldTerminalPathArrayItemValue) AsOsVersionsItemValue() (*os_version.OsVersion, bool) {
	res, ok := fpaiv.value.(*os_version.OsVersion)
	return res, ok
}
func (fpaiv *BatchGetOsVersionsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*os_version.Reference, bool) {
	res, ok := fpaiv.value.(*os_version.Reference)
	return res, ok
}

func (fpaiv *BatchGetOsVersionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetOsVersionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetOsVersionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetOsVersionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetOsVersionsResponse'
func (fpaiv *BatchGetOsVersionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetOsVersionsResponse) bool {
	slice := fpaiv.BatchGetOsVersionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetOsVersionsResponse_FieldSubPathArrayItemValue struct {
	BatchGetOsVersionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetOsVersionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetOsVersionsResponse_FieldSubPathArrayItemValue) AsOsVersionsPathItemValue() (os_version.OsVersion_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(os_version.OsVersion_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetOsVersionsResponse'
func (fpaivs *BatchGetOsVersionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetOsVersionsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetOsVersionsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetOsVersionsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetOsVersionsResponse fields according to their type
type BatchGetOsVersionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetOsVersionsResponse_FieldPath
}

func ParseBatchGetOsVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetOsVersionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetOsVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetOsVersionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetOsVersionsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetOsVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetOsVersionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetOsVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetOsVersionsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetOsVersionsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetOsVersionsResponse_FieldPathArrayOfValues = (*BatchGetOsVersionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetOsVersionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetOsVersionsResponse_FieldPathSelectorOsVersions:
		for _, v := range fpaov.values.([][]*os_version.OsVersion) {
			values = append(values, v)
		}
	case BatchGetOsVersionsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*os_version.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetOsVersionsResponse_FieldTerminalPathArrayOfValues) AsOsVersionsArrayOfValues() ([][]*os_version.OsVersion, bool) {
	res, ok := fpaov.values.([][]*os_version.OsVersion)
	return res, ok
}
func (fpaov *BatchGetOsVersionsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*os_version.Reference, bool) {
	res, ok := fpaov.values.([][]*os_version.Reference)
	return res, ok
}

type BatchGetOsVersionsResponse_FieldSubPathArrayOfValues struct {
	BatchGetOsVersionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetOsVersionsResponse_FieldPathArrayOfValues = (*BatchGetOsVersionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetOsVersionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetOsVersionsResponse_FieldSubPathArrayOfValues) AsOsVersionsPathArrayOfValues() (os_version.OsVersion_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(os_version.OsVersion_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListOsVersionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListOsVersionsRequest_FieldPathSelector
	Get(source *ListOsVersionsRequest) []interface{}
	GetSingle(source *ListOsVersionsRequest) (interface{}, bool)
	ClearValue(item *ListOsVersionsRequest)

	// Those methods build corresponding ListOsVersionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListOsVersionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListOsVersionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListOsVersionsRequest_FieldPathArrayItemValue
}

type ListOsVersionsRequest_FieldPathSelector int32

const (
	ListOsVersionsRequest_FieldPathSelectorPageSize          ListOsVersionsRequest_FieldPathSelector = 0
	ListOsVersionsRequest_FieldPathSelectorPageToken         ListOsVersionsRequest_FieldPathSelector = 1
	ListOsVersionsRequest_FieldPathSelectorOrderBy           ListOsVersionsRequest_FieldPathSelector = 2
	ListOsVersionsRequest_FieldPathSelectorFilter            ListOsVersionsRequest_FieldPathSelector = 3
	ListOsVersionsRequest_FieldPathSelectorFieldMask         ListOsVersionsRequest_FieldPathSelector = 4
	ListOsVersionsRequest_FieldPathSelectorView              ListOsVersionsRequest_FieldPathSelector = 5
	ListOsVersionsRequest_FieldPathSelectorIncludePagingInfo ListOsVersionsRequest_FieldPathSelector = 6
)

func (s ListOsVersionsRequest_FieldPathSelector) String() string {
	switch s {
	case ListOsVersionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListOsVersionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListOsVersionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListOsVersionsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListOsVersionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListOsVersionsRequest_FieldPathSelectorView:
		return "view"
	case ListOsVersionsRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsRequest: %d", s))
	}
}

func BuildListOsVersionsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListOsVersionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListOsVersionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "page_size", "pageSize", "page-size":
			return &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListOsVersionsRequest", fp)
}

func ParseListOsVersionsRequest_FieldPath(rawField string) (ListOsVersionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListOsVersionsRequest_FieldPath(fp)
}

func MustParseListOsVersionsRequest_FieldPath(rawField string) ListOsVersionsRequest_FieldPath {
	fp, err := ParseListOsVersionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListOsVersionsRequest_FieldTerminalPath struct {
	selector ListOsVersionsRequest_FieldPathSelector
}

var _ ListOsVersionsRequest_FieldPath = (*ListOsVersionsRequest_FieldTerminalPath)(nil)

func (fp *ListOsVersionsRequest_FieldTerminalPath) Selector() ListOsVersionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListOsVersionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListOsVersionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListOsVersionsRequest
func (fp *ListOsVersionsRequest_FieldTerminalPath) Get(source *ListOsVersionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListOsVersionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListOsVersionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListOsVersionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListOsVersionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListOsVersionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListOsVersionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListOsVersionsRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListOsVersionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListOsVersionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListOsVersionsRequest))
}

// GetSingle returns value pointed by specific field of from source ListOsVersionsRequest
func (fp *ListOsVersionsRequest_FieldTerminalPath) GetSingle(source *ListOsVersionsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListOsVersionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListOsVersionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListOsVersionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListOsVersionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListOsVersionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListOsVersionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListOsVersionsRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsRequest: %d", fp.selector))
	}
}

func (fp *ListOsVersionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListOsVersionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListOsVersionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListOsVersionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListOsVersionsRequest_FieldPathSelectorPageToken:
		return (*os_version.PagerCursor)(nil)
	case ListOsVersionsRequest_FieldPathSelectorOrderBy:
		return (*os_version.OrderBy)(nil)
	case ListOsVersionsRequest_FieldPathSelectorFilter:
		return (*os_version.Filter)(nil)
	case ListOsVersionsRequest_FieldPathSelectorFieldMask:
		return (*os_version.OsVersion_FieldMask)(nil)
	case ListOsVersionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListOsVersionsRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsRequest: %d", fp.selector))
	}
}

func (fp *ListOsVersionsRequest_FieldTerminalPath) ClearValue(item *ListOsVersionsRequest) {
	if item != nil {
		switch fp.selector {
		case ListOsVersionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListOsVersionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListOsVersionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListOsVersionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListOsVersionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListOsVersionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListOsVersionsRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListOsVersionsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListOsVersionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListOsVersionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListOsVersionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListOsVersionsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListOsVersionsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListOsVersionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListOsVersionsRequest_FieldPathSelectorFilter ||
		fp.selector == ListOsVersionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListOsVersionsRequest_FieldPathSelectorView ||
		fp.selector == ListOsVersionsRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListOsVersionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListOsVersionsRequest_FieldTerminalPath) WithIValue(value interface{}) ListOsVersionsRequest_FieldPathValue {
	switch fp.selector {
	case ListOsVersionsRequest_FieldPathSelectorPageSize:
		return &ListOsVersionsRequest_FieldTerminalPathValue{ListOsVersionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListOsVersionsRequest_FieldPathSelectorPageToken:
		return &ListOsVersionsRequest_FieldTerminalPathValue{ListOsVersionsRequest_FieldTerminalPath: *fp, value: value.(*os_version.PagerCursor)}
	case ListOsVersionsRequest_FieldPathSelectorOrderBy:
		return &ListOsVersionsRequest_FieldTerminalPathValue{ListOsVersionsRequest_FieldTerminalPath: *fp, value: value.(*os_version.OrderBy)}
	case ListOsVersionsRequest_FieldPathSelectorFilter:
		return &ListOsVersionsRequest_FieldTerminalPathValue{ListOsVersionsRequest_FieldTerminalPath: *fp, value: value.(*os_version.Filter)}
	case ListOsVersionsRequest_FieldPathSelectorFieldMask:
		return &ListOsVersionsRequest_FieldTerminalPathValue{ListOsVersionsRequest_FieldTerminalPath: *fp, value: value.(*os_version.OsVersion_FieldMask)}
	case ListOsVersionsRequest_FieldPathSelectorView:
		return &ListOsVersionsRequest_FieldTerminalPathValue{ListOsVersionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListOsVersionsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListOsVersionsRequest_FieldTerminalPathValue{ListOsVersionsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsRequest: %d", fp.selector))
	}
}

func (fp *ListOsVersionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListOsVersionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListOsVersionsRequest_FieldPathArrayOfValues {
	fpaov := &ListOsVersionsRequest_FieldTerminalPathArrayOfValues{ListOsVersionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListOsVersionsRequest_FieldPathSelectorPageSize:
		return &ListOsVersionsRequest_FieldTerminalPathArrayOfValues{ListOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListOsVersionsRequest_FieldPathSelectorPageToken:
		return &ListOsVersionsRequest_FieldTerminalPathArrayOfValues{ListOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]*os_version.PagerCursor)}
	case ListOsVersionsRequest_FieldPathSelectorOrderBy:
		return &ListOsVersionsRequest_FieldTerminalPathArrayOfValues{ListOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]*os_version.OrderBy)}
	case ListOsVersionsRequest_FieldPathSelectorFilter:
		return &ListOsVersionsRequest_FieldTerminalPathArrayOfValues{ListOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]*os_version.Filter)}
	case ListOsVersionsRequest_FieldPathSelectorFieldMask:
		return &ListOsVersionsRequest_FieldTerminalPathArrayOfValues{ListOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]*os_version.OsVersion_FieldMask)}
	case ListOsVersionsRequest_FieldPathSelectorView:
		return &ListOsVersionsRequest_FieldTerminalPathArrayOfValues{ListOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListOsVersionsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListOsVersionsRequest_FieldTerminalPathArrayOfValues{ListOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListOsVersionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListOsVersionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListOsVersionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsRequest: %d", fp.selector))
	}
}

func (fp *ListOsVersionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListOsVersionsRequest_FieldPathValue allows storing values for ListOsVersionsRequest fields according to their type
type ListOsVersionsRequest_FieldPathValue interface {
	ListOsVersionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListOsVersionsRequest)
	CompareWith(*ListOsVersionsRequest) (cmp int, comparable bool)
}

func ParseListOsVersionsRequest_FieldPathValue(pathStr, valueStr string) (ListOsVersionsRequest_FieldPathValue, error) {
	fp, err := ParseListOsVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOsVersionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListOsVersionsRequest_FieldPathValue), nil
}

func MustParseListOsVersionsRequest_FieldPathValue(pathStr, valueStr string) ListOsVersionsRequest_FieldPathValue {
	fpv, err := ParseListOsVersionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListOsVersionsRequest_FieldTerminalPathValue struct {
	ListOsVersionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListOsVersionsRequest_FieldPathValue = (*ListOsVersionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListOsVersionsRequest' as interface{}
func (fpv *ListOsVersionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListOsVersionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListOsVersionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*os_version.PagerCursor, bool) {
	res, ok := fpv.value.(*os_version.PagerCursor)
	return res, ok
}
func (fpv *ListOsVersionsRequest_FieldTerminalPathValue) AsOrderByValue() (*os_version.OrderBy, bool) {
	res, ok := fpv.value.(*os_version.OrderBy)
	return res, ok
}
func (fpv *ListOsVersionsRequest_FieldTerminalPathValue) AsFilterValue() (*os_version.Filter, bool) {
	res, ok := fpv.value.(*os_version.Filter)
	return res, ok
}
func (fpv *ListOsVersionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*os_version.OsVersion_FieldMask, bool) {
	res, ok := fpv.value.(*os_version.OsVersion_FieldMask)
	return res, ok
}
func (fpv *ListOsVersionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListOsVersionsRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListOsVersionsRequest
func (fpv *ListOsVersionsRequest_FieldTerminalPathValue) SetTo(target **ListOsVersionsRequest) {
	if *target == nil {
		*target = new(ListOsVersionsRequest)
	}
	switch fpv.selector {
	case ListOsVersionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListOsVersionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*os_version.PagerCursor)
	case ListOsVersionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*os_version.OrderBy)
	case ListOsVersionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*os_version.Filter)
	case ListOsVersionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*os_version.OsVersion_FieldMask)
	case ListOsVersionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListOsVersionsRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListOsVersionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListOsVersionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListOsVersionsRequest_FieldTerminalPathValue' with the value under path in 'ListOsVersionsRequest'.
func (fpv *ListOsVersionsRequest_FieldTerminalPathValue) CompareWith(source *ListOsVersionsRequest) (int, bool) {
	switch fpv.selector {
	case ListOsVersionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListOsVersionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListOsVersionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListOsVersionsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListOsVersionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListOsVersionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListOsVersionsRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListOsVersionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListOsVersionsRequest))
}

// ListOsVersionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListOsVersionsRequest according to their type
// Present only for array (repeated) types.
type ListOsVersionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListOsVersionsRequest_FieldPath
	ContainsValue(*ListOsVersionsRequest) bool
}

// ParseListOsVersionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListOsVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListOsVersionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListOsVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOsVersionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListOsVersionsRequest_FieldPathArrayItemValue), nil
}

func MustParseListOsVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListOsVersionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListOsVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListOsVersionsRequest_FieldTerminalPathArrayItemValue struct {
	ListOsVersionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListOsVersionsRequest_FieldPathArrayItemValue = (*ListOsVersionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListOsVersionsRequest as interface{}
func (fpaiv *ListOsVersionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListOsVersionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListOsVersionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListOsVersionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListOsVersionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListOsVersionsRequest'
func (fpaiv *ListOsVersionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListOsVersionsRequest) bool {
	slice := fpaiv.ListOsVersionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListOsVersionsRequest_FieldPathArrayOfValues allows storing slice of values for ListOsVersionsRequest fields according to their type
type ListOsVersionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListOsVersionsRequest_FieldPath
}

func ParseListOsVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListOsVersionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListOsVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOsVersionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListOsVersionsRequest_FieldPathArrayOfValues), nil
}

func MustParseListOsVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListOsVersionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListOsVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListOsVersionsRequest_FieldTerminalPathArrayOfValues struct {
	ListOsVersionsRequest_FieldTerminalPath
	values interface{}
}

var _ ListOsVersionsRequest_FieldPathArrayOfValues = (*ListOsVersionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListOsVersionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListOsVersionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListOsVersionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*os_version.PagerCursor) {
			values = append(values, v)
		}
	case ListOsVersionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*os_version.OrderBy) {
			values = append(values, v)
		}
	case ListOsVersionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*os_version.Filter) {
			values = append(values, v)
		}
	case ListOsVersionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*os_version.OsVersion_FieldMask) {
			values = append(values, v)
		}
	case ListOsVersionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListOsVersionsRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListOsVersionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListOsVersionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*os_version.PagerCursor, bool) {
	res, ok := fpaov.values.([]*os_version.PagerCursor)
	return res, ok
}
func (fpaov *ListOsVersionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*os_version.OrderBy, bool) {
	res, ok := fpaov.values.([]*os_version.OrderBy)
	return res, ok
}
func (fpaov *ListOsVersionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*os_version.Filter, bool) {
	res, ok := fpaov.values.([]*os_version.Filter)
	return res, ok
}
func (fpaov *ListOsVersionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*os_version.OsVersion_FieldMask, bool) {
	res, ok := fpaov.values.([]*os_version.OsVersion_FieldMask)
	return res, ok
}
func (fpaov *ListOsVersionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListOsVersionsRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListOsVersionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListOsVersionsResponse_FieldPathSelector
	Get(source *ListOsVersionsResponse) []interface{}
	GetSingle(source *ListOsVersionsResponse) (interface{}, bool)
	ClearValue(item *ListOsVersionsResponse)

	// Those methods build corresponding ListOsVersionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListOsVersionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListOsVersionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListOsVersionsResponse_FieldPathArrayItemValue
}

type ListOsVersionsResponse_FieldPathSelector int32

const (
	ListOsVersionsResponse_FieldPathSelectorOsVersions        ListOsVersionsResponse_FieldPathSelector = 0
	ListOsVersionsResponse_FieldPathSelectorPrevPageToken     ListOsVersionsResponse_FieldPathSelector = 1
	ListOsVersionsResponse_FieldPathSelectorNextPageToken     ListOsVersionsResponse_FieldPathSelector = 2
	ListOsVersionsResponse_FieldPathSelectorCurrentOffset     ListOsVersionsResponse_FieldPathSelector = 3
	ListOsVersionsResponse_FieldPathSelectorTotalResultsCount ListOsVersionsResponse_FieldPathSelector = 4
)

func (s ListOsVersionsResponse_FieldPathSelector) String() string {
	switch s {
	case ListOsVersionsResponse_FieldPathSelectorOsVersions:
		return "os_versions"
	case ListOsVersionsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListOsVersionsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListOsVersionsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListOsVersionsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", s))
	}
}

func BuildListOsVersionsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListOsVersionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListOsVersionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "os_versions", "osVersions", "os-versions":
			return &ListOsVersionsResponse_FieldTerminalPath{selector: ListOsVersionsResponse_FieldPathSelectorOsVersions}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListOsVersionsResponse_FieldTerminalPath{selector: ListOsVersionsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListOsVersionsResponse_FieldTerminalPath{selector: ListOsVersionsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListOsVersionsResponse_FieldTerminalPath{selector: ListOsVersionsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListOsVersionsResponse_FieldTerminalPath{selector: ListOsVersionsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "os_versions", "osVersions", "os-versions":
			if subpath, err := os_version.BuildOsVersion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListOsVersionsResponse_FieldSubPath{selector: ListOsVersionsResponse_FieldPathSelectorOsVersions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListOsVersionsResponse", fp)
}

func ParseListOsVersionsResponse_FieldPath(rawField string) (ListOsVersionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListOsVersionsResponse_FieldPath(fp)
}

func MustParseListOsVersionsResponse_FieldPath(rawField string) ListOsVersionsResponse_FieldPath {
	fp, err := ParseListOsVersionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListOsVersionsResponse_FieldTerminalPath struct {
	selector ListOsVersionsResponse_FieldPathSelector
}

var _ ListOsVersionsResponse_FieldPath = (*ListOsVersionsResponse_FieldTerminalPath)(nil)

func (fp *ListOsVersionsResponse_FieldTerminalPath) Selector() ListOsVersionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListOsVersionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListOsVersionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListOsVersionsResponse
func (fp *ListOsVersionsResponse_FieldTerminalPath) Get(source *ListOsVersionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListOsVersionsResponse_FieldPathSelectorOsVersions:
			for _, value := range source.GetOsVersions() {
				values = append(values, value)
			}
		case ListOsVersionsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListOsVersionsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListOsVersionsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListOsVersionsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListOsVersionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListOsVersionsResponse))
}

// GetSingle returns value pointed by specific field of from source ListOsVersionsResponse
func (fp *ListOsVersionsResponse_FieldTerminalPath) GetSingle(source *ListOsVersionsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListOsVersionsResponse_FieldPathSelectorOsVersions:
		res := source.GetOsVersions()
		return res, res != nil
	case ListOsVersionsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListOsVersionsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListOsVersionsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListOsVersionsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fp.selector))
	}
}

func (fp *ListOsVersionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListOsVersionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListOsVersionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListOsVersionsResponse_FieldPathSelectorOsVersions:
		return ([]*os_version.OsVersion)(nil)
	case ListOsVersionsResponse_FieldPathSelectorPrevPageToken:
		return (*os_version.PagerCursor)(nil)
	case ListOsVersionsResponse_FieldPathSelectorNextPageToken:
		return (*os_version.PagerCursor)(nil)
	case ListOsVersionsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListOsVersionsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fp.selector))
	}
}

func (fp *ListOsVersionsResponse_FieldTerminalPath) ClearValue(item *ListOsVersionsResponse) {
	if item != nil {
		switch fp.selector {
		case ListOsVersionsResponse_FieldPathSelectorOsVersions:
			item.OsVersions = nil
		case ListOsVersionsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListOsVersionsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListOsVersionsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListOsVersionsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListOsVersionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListOsVersionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListOsVersionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListOsVersionsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListOsVersionsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListOsVersionsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListOsVersionsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListOsVersionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListOsVersionsResponse_FieldTerminalPath) WithIValue(value interface{}) ListOsVersionsResponse_FieldPathValue {
	switch fp.selector {
	case ListOsVersionsResponse_FieldPathSelectorOsVersions:
		return &ListOsVersionsResponse_FieldTerminalPathValue{ListOsVersionsResponse_FieldTerminalPath: *fp, value: value.([]*os_version.OsVersion)}
	case ListOsVersionsResponse_FieldPathSelectorPrevPageToken:
		return &ListOsVersionsResponse_FieldTerminalPathValue{ListOsVersionsResponse_FieldTerminalPath: *fp, value: value.(*os_version.PagerCursor)}
	case ListOsVersionsResponse_FieldPathSelectorNextPageToken:
		return &ListOsVersionsResponse_FieldTerminalPathValue{ListOsVersionsResponse_FieldTerminalPath: *fp, value: value.(*os_version.PagerCursor)}
	case ListOsVersionsResponse_FieldPathSelectorCurrentOffset:
		return &ListOsVersionsResponse_FieldTerminalPathValue{ListOsVersionsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListOsVersionsResponse_FieldPathSelectorTotalResultsCount:
		return &ListOsVersionsResponse_FieldTerminalPathValue{ListOsVersionsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fp.selector))
	}
}

func (fp *ListOsVersionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListOsVersionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListOsVersionsResponse_FieldPathArrayOfValues {
	fpaov := &ListOsVersionsResponse_FieldTerminalPathArrayOfValues{ListOsVersionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListOsVersionsResponse_FieldPathSelectorOsVersions:
		return &ListOsVersionsResponse_FieldTerminalPathArrayOfValues{ListOsVersionsResponse_FieldTerminalPath: *fp, values: values.([][]*os_version.OsVersion)}
	case ListOsVersionsResponse_FieldPathSelectorPrevPageToken:
		return &ListOsVersionsResponse_FieldTerminalPathArrayOfValues{ListOsVersionsResponse_FieldTerminalPath: *fp, values: values.([]*os_version.PagerCursor)}
	case ListOsVersionsResponse_FieldPathSelectorNextPageToken:
		return &ListOsVersionsResponse_FieldTerminalPathArrayOfValues{ListOsVersionsResponse_FieldTerminalPath: *fp, values: values.([]*os_version.PagerCursor)}
	case ListOsVersionsResponse_FieldPathSelectorCurrentOffset:
		return &ListOsVersionsResponse_FieldTerminalPathArrayOfValues{ListOsVersionsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListOsVersionsResponse_FieldPathSelectorTotalResultsCount:
		return &ListOsVersionsResponse_FieldTerminalPathArrayOfValues{ListOsVersionsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListOsVersionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListOsVersionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListOsVersionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListOsVersionsResponse_FieldPathSelectorOsVersions:
		return &ListOsVersionsResponse_FieldTerminalPathArrayItemValue{ListOsVersionsResponse_FieldTerminalPath: *fp, value: value.(*os_version.OsVersion)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fp.selector))
	}
}

func (fp *ListOsVersionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListOsVersionsResponse_FieldSubPath struct {
	selector ListOsVersionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListOsVersionsResponse_FieldPath = (*ListOsVersionsResponse_FieldSubPath)(nil)

func (fps *ListOsVersionsResponse_FieldSubPath) Selector() ListOsVersionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListOsVersionsResponse_FieldSubPath) AsOsVersionsSubPath() (os_version.OsVersion_FieldPath, bool) {
	res, ok := fps.subPath.(os_version.OsVersion_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListOsVersionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListOsVersionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListOsVersionsResponse
func (fps *ListOsVersionsResponse_FieldSubPath) Get(source *ListOsVersionsResponse) (values []interface{}) {
	switch fps.selector {
	case ListOsVersionsResponse_FieldPathSelectorOsVersions:
		for _, item := range source.GetOsVersions() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListOsVersionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListOsVersionsResponse))
}

// GetSingle returns value of selected field from source ListOsVersionsResponse
func (fps *ListOsVersionsResponse_FieldSubPath) GetSingle(source *ListOsVersionsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListOsVersionsResponse_FieldPathSelectorOsVersions:
		if len(source.GetOsVersions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOsVersions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fps.selector))
	}
}

func (fps *ListOsVersionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListOsVersionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListOsVersionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListOsVersionsResponse_FieldSubPath) ClearValue(item *ListOsVersionsResponse) {
	if item != nil {
		switch fps.selector {
		case ListOsVersionsResponse_FieldPathSelectorOsVersions:
			for _, subItem := range item.OsVersions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListOsVersionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListOsVersionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListOsVersionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListOsVersionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListOsVersionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListOsVersionsResponse_FieldSubPath) WithIValue(value interface{}) ListOsVersionsResponse_FieldPathValue {
	return &ListOsVersionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListOsVersionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListOsVersionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListOsVersionsResponse_FieldPathArrayOfValues {
	return &ListOsVersionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListOsVersionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListOsVersionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListOsVersionsResponse_FieldPathArrayItemValue {
	return &ListOsVersionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListOsVersionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListOsVersionsResponse_FieldPathValue allows storing values for ListOsVersionsResponse fields according to their type
type ListOsVersionsResponse_FieldPathValue interface {
	ListOsVersionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListOsVersionsResponse)
	CompareWith(*ListOsVersionsResponse) (cmp int, comparable bool)
}

func ParseListOsVersionsResponse_FieldPathValue(pathStr, valueStr string) (ListOsVersionsResponse_FieldPathValue, error) {
	fp, err := ParseListOsVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOsVersionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListOsVersionsResponse_FieldPathValue), nil
}

func MustParseListOsVersionsResponse_FieldPathValue(pathStr, valueStr string) ListOsVersionsResponse_FieldPathValue {
	fpv, err := ParseListOsVersionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListOsVersionsResponse_FieldTerminalPathValue struct {
	ListOsVersionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListOsVersionsResponse_FieldPathValue = (*ListOsVersionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListOsVersionsResponse' as interface{}
func (fpv *ListOsVersionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListOsVersionsResponse_FieldTerminalPathValue) AsOsVersionsValue() ([]*os_version.OsVersion, bool) {
	res, ok := fpv.value.([]*os_version.OsVersion)
	return res, ok
}
func (fpv *ListOsVersionsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*os_version.PagerCursor, bool) {
	res, ok := fpv.value.(*os_version.PagerCursor)
	return res, ok
}
func (fpv *ListOsVersionsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*os_version.PagerCursor, bool) {
	res, ok := fpv.value.(*os_version.PagerCursor)
	return res, ok
}
func (fpv *ListOsVersionsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListOsVersionsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListOsVersionsResponse
func (fpv *ListOsVersionsResponse_FieldTerminalPathValue) SetTo(target **ListOsVersionsResponse) {
	if *target == nil {
		*target = new(ListOsVersionsResponse)
	}
	switch fpv.selector {
	case ListOsVersionsResponse_FieldPathSelectorOsVersions:
		(*target).OsVersions = fpv.value.([]*os_version.OsVersion)
	case ListOsVersionsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*os_version.PagerCursor)
	case ListOsVersionsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*os_version.PagerCursor)
	case ListOsVersionsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListOsVersionsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListOsVersionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListOsVersionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListOsVersionsResponse_FieldTerminalPathValue' with the value under path in 'ListOsVersionsResponse'.
func (fpv *ListOsVersionsResponse_FieldTerminalPathValue) CompareWith(source *ListOsVersionsResponse) (int, bool) {
	switch fpv.selector {
	case ListOsVersionsResponse_FieldPathSelectorOsVersions:
		return 0, false
	case ListOsVersionsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListOsVersionsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListOsVersionsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListOsVersionsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListOsVersionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListOsVersionsResponse))
}

type ListOsVersionsResponse_FieldSubPathValue struct {
	ListOsVersionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListOsVersionsResponse_FieldPathValue = (*ListOsVersionsResponse_FieldSubPathValue)(nil)

func (fpvs *ListOsVersionsResponse_FieldSubPathValue) AsOsVersionsPathValue() (os_version.OsVersion_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(os_version.OsVersion_FieldPathValue)
	return res, ok
}

func (fpvs *ListOsVersionsResponse_FieldSubPathValue) SetTo(target **ListOsVersionsResponse) {
	if *target == nil {
		*target = new(ListOsVersionsResponse)
	}
	switch fpvs.Selector() {
	case ListOsVersionsResponse_FieldPathSelectorOsVersions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListOsVersionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListOsVersionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListOsVersionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListOsVersionsResponse_FieldSubPathValue) CompareWith(source *ListOsVersionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListOsVersionsResponse_FieldPathSelectorOsVersions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListOsVersionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListOsVersionsResponse))
}

// ListOsVersionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListOsVersionsResponse according to their type
// Present only for array (repeated) types.
type ListOsVersionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListOsVersionsResponse_FieldPath
	ContainsValue(*ListOsVersionsResponse) bool
}

// ParseListOsVersionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListOsVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListOsVersionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListOsVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOsVersionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListOsVersionsResponse_FieldPathArrayItemValue), nil
}

func MustParseListOsVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListOsVersionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListOsVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListOsVersionsResponse_FieldTerminalPathArrayItemValue struct {
	ListOsVersionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListOsVersionsResponse_FieldPathArrayItemValue = (*ListOsVersionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListOsVersionsResponse as interface{}
func (fpaiv *ListOsVersionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListOsVersionsResponse_FieldTerminalPathArrayItemValue) AsOsVersionsItemValue() (*os_version.OsVersion, bool) {
	res, ok := fpaiv.value.(*os_version.OsVersion)
	return res, ok
}

func (fpaiv *ListOsVersionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListOsVersionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListOsVersionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListOsVersionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListOsVersionsResponse'
func (fpaiv *ListOsVersionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListOsVersionsResponse) bool {
	slice := fpaiv.ListOsVersionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListOsVersionsResponse_FieldSubPathArrayItemValue struct {
	ListOsVersionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListOsVersionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListOsVersionsResponse_FieldSubPathArrayItemValue) AsOsVersionsPathItemValue() (os_version.OsVersion_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(os_version.OsVersion_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListOsVersionsResponse'
func (fpaivs *ListOsVersionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListOsVersionsResponse) bool {
	switch fpaivs.Selector() {
	case ListOsVersionsResponse_FieldPathSelectorOsVersions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListOsVersionsResponse: %d", fpaivs.Selector()))
	}
}

// ListOsVersionsResponse_FieldPathArrayOfValues allows storing slice of values for ListOsVersionsResponse fields according to their type
type ListOsVersionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListOsVersionsResponse_FieldPath
}

func ParseListOsVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListOsVersionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListOsVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListOsVersionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListOsVersionsResponse_FieldPathArrayOfValues), nil
}

func MustParseListOsVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListOsVersionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListOsVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListOsVersionsResponse_FieldTerminalPathArrayOfValues struct {
	ListOsVersionsResponse_FieldTerminalPath
	values interface{}
}

var _ ListOsVersionsResponse_FieldPathArrayOfValues = (*ListOsVersionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListOsVersionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListOsVersionsResponse_FieldPathSelectorOsVersions:
		for _, v := range fpaov.values.([][]*os_version.OsVersion) {
			values = append(values, v)
		}
	case ListOsVersionsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*os_version.PagerCursor) {
			values = append(values, v)
		}
	case ListOsVersionsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*os_version.PagerCursor) {
			values = append(values, v)
		}
	case ListOsVersionsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListOsVersionsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListOsVersionsResponse_FieldTerminalPathArrayOfValues) AsOsVersionsArrayOfValues() ([][]*os_version.OsVersion, bool) {
	res, ok := fpaov.values.([][]*os_version.OsVersion)
	return res, ok
}
func (fpaov *ListOsVersionsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*os_version.PagerCursor, bool) {
	res, ok := fpaov.values.([]*os_version.PagerCursor)
	return res, ok
}
func (fpaov *ListOsVersionsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*os_version.PagerCursor, bool) {
	res, ok := fpaov.values.([]*os_version.PagerCursor)
	return res, ok
}
func (fpaov *ListOsVersionsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListOsVersionsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListOsVersionsResponse_FieldSubPathArrayOfValues struct {
	ListOsVersionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListOsVersionsResponse_FieldPathArrayOfValues = (*ListOsVersionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListOsVersionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListOsVersionsResponse_FieldSubPathArrayOfValues) AsOsVersionsPathArrayOfValues() (os_version.OsVersion_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(os_version.OsVersion_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOsVersionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOsVersionRequest_FieldPathSelector
	Get(source *WatchOsVersionRequest) []interface{}
	GetSingle(source *WatchOsVersionRequest) (interface{}, bool)
	ClearValue(item *WatchOsVersionRequest)

	// Those methods build corresponding WatchOsVersionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOsVersionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOsVersionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOsVersionRequest_FieldPathArrayItemValue
}

type WatchOsVersionRequest_FieldPathSelector int32

const (
	WatchOsVersionRequest_FieldPathSelectorName      WatchOsVersionRequest_FieldPathSelector = 0
	WatchOsVersionRequest_FieldPathSelectorFieldMask WatchOsVersionRequest_FieldPathSelector = 1
	WatchOsVersionRequest_FieldPathSelectorView      WatchOsVersionRequest_FieldPathSelector = 2
)

func (s WatchOsVersionRequest_FieldPathSelector) String() string {
	switch s {
	case WatchOsVersionRequest_FieldPathSelectorName:
		return "name"
	case WatchOsVersionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchOsVersionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionRequest: %d", s))
	}
}

func BuildWatchOsVersionRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchOsVersionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOsVersionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchOsVersionRequest_FieldTerminalPath{selector: WatchOsVersionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchOsVersionRequest_FieldTerminalPath{selector: WatchOsVersionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchOsVersionRequest_FieldTerminalPath{selector: WatchOsVersionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOsVersionRequest", fp)
}

func ParseWatchOsVersionRequest_FieldPath(rawField string) (WatchOsVersionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOsVersionRequest_FieldPath(fp)
}

func MustParseWatchOsVersionRequest_FieldPath(rawField string) WatchOsVersionRequest_FieldPath {
	fp, err := ParseWatchOsVersionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOsVersionRequest_FieldTerminalPath struct {
	selector WatchOsVersionRequest_FieldPathSelector
}

var _ WatchOsVersionRequest_FieldPath = (*WatchOsVersionRequest_FieldTerminalPath)(nil)

func (fp *WatchOsVersionRequest_FieldTerminalPath) Selector() WatchOsVersionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOsVersionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOsVersionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOsVersionRequest
func (fp *WatchOsVersionRequest_FieldTerminalPath) Get(source *WatchOsVersionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOsVersionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchOsVersionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchOsVersionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsVersionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOsVersionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOsVersionRequest))
}

// GetSingle returns value pointed by specific field of from source WatchOsVersionRequest
func (fp *WatchOsVersionRequest_FieldTerminalPath) GetSingle(source *WatchOsVersionRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchOsVersionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchOsVersionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchOsVersionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionRequest: %d", fp.selector))
	}
}

func (fp *WatchOsVersionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOsVersionRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchOsVersionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOsVersionRequest_FieldPathSelectorName:
		return (*os_version.Reference)(nil)
	case WatchOsVersionRequest_FieldPathSelectorFieldMask:
		return (*os_version.OsVersion_FieldMask)(nil)
	case WatchOsVersionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionRequest: %d", fp.selector))
	}
}

func (fp *WatchOsVersionRequest_FieldTerminalPath) ClearValue(item *WatchOsVersionRequest) {
	if item != nil {
		switch fp.selector {
		case WatchOsVersionRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchOsVersionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchOsVersionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsVersionRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchOsVersionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOsVersionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOsVersionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOsVersionRequest_FieldPathSelectorName ||
		fp.selector == WatchOsVersionRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchOsVersionRequest_FieldPathSelectorView
}

func (fp *WatchOsVersionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOsVersionRequest_FieldTerminalPath) WithIValue(value interface{}) WatchOsVersionRequest_FieldPathValue {
	switch fp.selector {
	case WatchOsVersionRequest_FieldPathSelectorName:
		return &WatchOsVersionRequest_FieldTerminalPathValue{WatchOsVersionRequest_FieldTerminalPath: *fp, value: value.(*os_version.Reference)}
	case WatchOsVersionRequest_FieldPathSelectorFieldMask:
		return &WatchOsVersionRequest_FieldTerminalPathValue{WatchOsVersionRequest_FieldTerminalPath: *fp, value: value.(*os_version.OsVersion_FieldMask)}
	case WatchOsVersionRequest_FieldPathSelectorView:
		return &WatchOsVersionRequest_FieldTerminalPathValue{WatchOsVersionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionRequest: %d", fp.selector))
	}
}

func (fp *WatchOsVersionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOsVersionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOsVersionRequest_FieldPathArrayOfValues {
	fpaov := &WatchOsVersionRequest_FieldTerminalPathArrayOfValues{WatchOsVersionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOsVersionRequest_FieldPathSelectorName:
		return &WatchOsVersionRequest_FieldTerminalPathArrayOfValues{WatchOsVersionRequest_FieldTerminalPath: *fp, values: values.([]*os_version.Reference)}
	case WatchOsVersionRequest_FieldPathSelectorFieldMask:
		return &WatchOsVersionRequest_FieldTerminalPathArrayOfValues{WatchOsVersionRequest_FieldTerminalPath: *fp, values: values.([]*os_version.OsVersion_FieldMask)}
	case WatchOsVersionRequest_FieldPathSelectorView:
		return &WatchOsVersionRequest_FieldTerminalPathArrayOfValues{WatchOsVersionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOsVersionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOsVersionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOsVersionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionRequest: %d", fp.selector))
	}
}

func (fp *WatchOsVersionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOsVersionRequest_FieldPathValue allows storing values for WatchOsVersionRequest fields according to their type
type WatchOsVersionRequest_FieldPathValue interface {
	WatchOsVersionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOsVersionRequest)
	CompareWith(*WatchOsVersionRequest) (cmp int, comparable bool)
}

func ParseWatchOsVersionRequest_FieldPathValue(pathStr, valueStr string) (WatchOsVersionRequest_FieldPathValue, error) {
	fp, err := ParseWatchOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsVersionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOsVersionRequest_FieldPathValue), nil
}

func MustParseWatchOsVersionRequest_FieldPathValue(pathStr, valueStr string) WatchOsVersionRequest_FieldPathValue {
	fpv, err := ParseWatchOsVersionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOsVersionRequest_FieldTerminalPathValue struct {
	WatchOsVersionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOsVersionRequest_FieldPathValue = (*WatchOsVersionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOsVersionRequest' as interface{}
func (fpv *WatchOsVersionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOsVersionRequest_FieldTerminalPathValue) AsNameValue() (*os_version.Reference, bool) {
	res, ok := fpv.value.(*os_version.Reference)
	return res, ok
}
func (fpv *WatchOsVersionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*os_version.OsVersion_FieldMask, bool) {
	res, ok := fpv.value.(*os_version.OsVersion_FieldMask)
	return res, ok
}
func (fpv *WatchOsVersionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchOsVersionRequest
func (fpv *WatchOsVersionRequest_FieldTerminalPathValue) SetTo(target **WatchOsVersionRequest) {
	if *target == nil {
		*target = new(WatchOsVersionRequest)
	}
	switch fpv.selector {
	case WatchOsVersionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*os_version.Reference)
	case WatchOsVersionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*os_version.OsVersion_FieldMask)
	case WatchOsVersionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOsVersionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOsVersionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOsVersionRequest_FieldTerminalPathValue' with the value under path in 'WatchOsVersionRequest'.
func (fpv *WatchOsVersionRequest_FieldTerminalPathValue) CompareWith(source *WatchOsVersionRequest) (int, bool) {
	switch fpv.selector {
	case WatchOsVersionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*os_version.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsVersionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchOsVersionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOsVersionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOsVersionRequest))
}

// WatchOsVersionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOsVersionRequest according to their type
// Present only for array (repeated) types.
type WatchOsVersionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOsVersionRequest_FieldPath
	ContainsValue(*WatchOsVersionRequest) bool
}

// ParseWatchOsVersionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOsVersionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsVersionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOsVersionRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchOsVersionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOsVersionRequest_FieldTerminalPathArrayItemValue struct {
	WatchOsVersionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOsVersionRequest_FieldPathArrayItemValue = (*WatchOsVersionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOsVersionRequest as interface{}
func (fpaiv *WatchOsVersionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOsVersionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOsVersionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOsVersionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOsVersionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOsVersionRequest'
func (fpaiv *WatchOsVersionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOsVersionRequest) bool {
	slice := fpaiv.WatchOsVersionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOsVersionRequest_FieldPathArrayOfValues allows storing slice of values for WatchOsVersionRequest fields according to their type
type WatchOsVersionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOsVersionRequest_FieldPath
}

func ParseWatchOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOsVersionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsVersionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOsVersionRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOsVersionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOsVersionRequest_FieldTerminalPathArrayOfValues struct {
	WatchOsVersionRequest_FieldTerminalPath
	values interface{}
}

var _ WatchOsVersionRequest_FieldPathArrayOfValues = (*WatchOsVersionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOsVersionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOsVersionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*os_version.Reference) {
			values = append(values, v)
		}
	case WatchOsVersionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*os_version.OsVersion_FieldMask) {
			values = append(values, v)
		}
	case WatchOsVersionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOsVersionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*os_version.Reference, bool) {
	res, ok := fpaov.values.([]*os_version.Reference)
	return res, ok
}
func (fpaov *WatchOsVersionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*os_version.OsVersion_FieldMask, bool) {
	res, ok := fpaov.values.([]*os_version.OsVersion_FieldMask)
	return res, ok
}
func (fpaov *WatchOsVersionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOsVersionResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOsVersionResponse_FieldPathSelector
	Get(source *WatchOsVersionResponse) []interface{}
	GetSingle(source *WatchOsVersionResponse) (interface{}, bool)
	ClearValue(item *WatchOsVersionResponse)

	// Those methods build corresponding WatchOsVersionResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOsVersionResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOsVersionResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOsVersionResponse_FieldPathArrayItemValue
}

type WatchOsVersionResponse_FieldPathSelector int32

const (
	WatchOsVersionResponse_FieldPathSelectorChange WatchOsVersionResponse_FieldPathSelector = 0
)

func (s WatchOsVersionResponse_FieldPathSelector) String() string {
	switch s {
	case WatchOsVersionResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionResponse: %d", s))
	}
}

func BuildWatchOsVersionResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchOsVersionResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOsVersionResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchOsVersionResponse_FieldTerminalPath{selector: WatchOsVersionResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOsVersionResponse", fp)
}

func ParseWatchOsVersionResponse_FieldPath(rawField string) (WatchOsVersionResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOsVersionResponse_FieldPath(fp)
}

func MustParseWatchOsVersionResponse_FieldPath(rawField string) WatchOsVersionResponse_FieldPath {
	fp, err := ParseWatchOsVersionResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOsVersionResponse_FieldTerminalPath struct {
	selector WatchOsVersionResponse_FieldPathSelector
}

var _ WatchOsVersionResponse_FieldPath = (*WatchOsVersionResponse_FieldTerminalPath)(nil)

func (fp *WatchOsVersionResponse_FieldTerminalPath) Selector() WatchOsVersionResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOsVersionResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOsVersionResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOsVersionResponse
func (fp *WatchOsVersionResponse_FieldTerminalPath) Get(source *WatchOsVersionResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOsVersionResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsVersionResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOsVersionResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOsVersionResponse))
}

// GetSingle returns value pointed by specific field of from source WatchOsVersionResponse
func (fp *WatchOsVersionResponse_FieldTerminalPath) GetSingle(source *WatchOsVersionResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchOsVersionResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionResponse: %d", fp.selector))
	}
}

func (fp *WatchOsVersionResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOsVersionResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchOsVersionResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOsVersionResponse_FieldPathSelectorChange:
		return (*os_version.OsVersionChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionResponse: %d", fp.selector))
	}
}

func (fp *WatchOsVersionResponse_FieldTerminalPath) ClearValue(item *WatchOsVersionResponse) {
	if item != nil {
		switch fp.selector {
		case WatchOsVersionResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsVersionResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchOsVersionResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOsVersionResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOsVersionResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOsVersionResponse_FieldPathSelectorChange
}

func (fp *WatchOsVersionResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOsVersionResponse_FieldTerminalPath) WithIValue(value interface{}) WatchOsVersionResponse_FieldPathValue {
	switch fp.selector {
	case WatchOsVersionResponse_FieldPathSelectorChange:
		return &WatchOsVersionResponse_FieldTerminalPathValue{WatchOsVersionResponse_FieldTerminalPath: *fp, value: value.(*os_version.OsVersionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionResponse: %d", fp.selector))
	}
}

func (fp *WatchOsVersionResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOsVersionResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOsVersionResponse_FieldPathArrayOfValues {
	fpaov := &WatchOsVersionResponse_FieldTerminalPathArrayOfValues{WatchOsVersionResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOsVersionResponse_FieldPathSelectorChange:
		return &WatchOsVersionResponse_FieldTerminalPathArrayOfValues{WatchOsVersionResponse_FieldTerminalPath: *fp, values: values.([]*os_version.OsVersionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOsVersionResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOsVersionResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOsVersionResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionResponse: %d", fp.selector))
	}
}

func (fp *WatchOsVersionResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOsVersionResponse_FieldPathValue allows storing values for WatchOsVersionResponse fields according to their type
type WatchOsVersionResponse_FieldPathValue interface {
	WatchOsVersionResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOsVersionResponse)
	CompareWith(*WatchOsVersionResponse) (cmp int, comparable bool)
}

func ParseWatchOsVersionResponse_FieldPathValue(pathStr, valueStr string) (WatchOsVersionResponse_FieldPathValue, error) {
	fp, err := ParseWatchOsVersionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsVersionResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOsVersionResponse_FieldPathValue), nil
}

func MustParseWatchOsVersionResponse_FieldPathValue(pathStr, valueStr string) WatchOsVersionResponse_FieldPathValue {
	fpv, err := ParseWatchOsVersionResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOsVersionResponse_FieldTerminalPathValue struct {
	WatchOsVersionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOsVersionResponse_FieldPathValue = (*WatchOsVersionResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOsVersionResponse' as interface{}
func (fpv *WatchOsVersionResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOsVersionResponse_FieldTerminalPathValue) AsChangeValue() (*os_version.OsVersionChange, bool) {
	res, ok := fpv.value.(*os_version.OsVersionChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchOsVersionResponse
func (fpv *WatchOsVersionResponse_FieldTerminalPathValue) SetTo(target **WatchOsVersionResponse) {
	if *target == nil {
		*target = new(WatchOsVersionResponse)
	}
	switch fpv.selector {
	case WatchOsVersionResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*os_version.OsVersionChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOsVersionResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOsVersionResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOsVersionResponse_FieldTerminalPathValue' with the value under path in 'WatchOsVersionResponse'.
func (fpv *WatchOsVersionResponse_FieldTerminalPathValue) CompareWith(source *WatchOsVersionResponse) (int, bool) {
	switch fpv.selector {
	case WatchOsVersionResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOsVersionResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOsVersionResponse))
}

// WatchOsVersionResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOsVersionResponse according to their type
// Present only for array (repeated) types.
type WatchOsVersionResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOsVersionResponse_FieldPath
	ContainsValue(*WatchOsVersionResponse) bool
}

// ParseWatchOsVersionResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOsVersionResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOsVersionResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOsVersionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsVersionResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOsVersionResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchOsVersionResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchOsVersionResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOsVersionResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOsVersionResponse_FieldTerminalPathArrayItemValue struct {
	WatchOsVersionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOsVersionResponse_FieldPathArrayItemValue = (*WatchOsVersionResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOsVersionResponse as interface{}
func (fpaiv *WatchOsVersionResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOsVersionResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOsVersionResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOsVersionResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOsVersionResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOsVersionResponse'
func (fpaiv *WatchOsVersionResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOsVersionResponse) bool {
	slice := fpaiv.WatchOsVersionResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOsVersionResponse_FieldPathArrayOfValues allows storing slice of values for WatchOsVersionResponse fields according to their type
type WatchOsVersionResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOsVersionResponse_FieldPath
}

func ParseWatchOsVersionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOsVersionResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOsVersionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsVersionResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOsVersionResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchOsVersionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOsVersionResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOsVersionResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOsVersionResponse_FieldTerminalPathArrayOfValues struct {
	WatchOsVersionResponse_FieldTerminalPath
	values interface{}
}

var _ WatchOsVersionResponse_FieldPathArrayOfValues = (*WatchOsVersionResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOsVersionResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOsVersionResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*os_version.OsVersionChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOsVersionResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*os_version.OsVersionChange, bool) {
	res, ok := fpaov.values.([]*os_version.OsVersionChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOsVersionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOsVersionsRequest_FieldPathSelector
	Get(source *WatchOsVersionsRequest) []interface{}
	GetSingle(source *WatchOsVersionsRequest) (interface{}, bool)
	ClearValue(item *WatchOsVersionsRequest)

	// Those methods build corresponding WatchOsVersionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOsVersionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOsVersionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOsVersionsRequest_FieldPathArrayItemValue
}

type WatchOsVersionsRequest_FieldPathSelector int32

const (
	WatchOsVersionsRequest_FieldPathSelectorType         WatchOsVersionsRequest_FieldPathSelector = 0
	WatchOsVersionsRequest_FieldPathSelectorPageSize     WatchOsVersionsRequest_FieldPathSelector = 1
	WatchOsVersionsRequest_FieldPathSelectorPageToken    WatchOsVersionsRequest_FieldPathSelector = 2
	WatchOsVersionsRequest_FieldPathSelectorOrderBy      WatchOsVersionsRequest_FieldPathSelector = 3
	WatchOsVersionsRequest_FieldPathSelectorResumeToken  WatchOsVersionsRequest_FieldPathSelector = 4
	WatchOsVersionsRequest_FieldPathSelectorStartingTime WatchOsVersionsRequest_FieldPathSelector = 5
	WatchOsVersionsRequest_FieldPathSelectorFilter       WatchOsVersionsRequest_FieldPathSelector = 6
	WatchOsVersionsRequest_FieldPathSelectorFieldMask    WatchOsVersionsRequest_FieldPathSelector = 7
	WatchOsVersionsRequest_FieldPathSelectorView         WatchOsVersionsRequest_FieldPathSelector = 8
	WatchOsVersionsRequest_FieldPathSelectorMaxChunkSize WatchOsVersionsRequest_FieldPathSelector = 9
)

func (s WatchOsVersionsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchOsVersionsRequest_FieldPathSelectorType:
		return "type"
	case WatchOsVersionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchOsVersionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchOsVersionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchOsVersionsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchOsVersionsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchOsVersionsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchOsVersionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchOsVersionsRequest_FieldPathSelectorView:
		return "view"
	case WatchOsVersionsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsRequest: %d", s))
	}
}

func BuildWatchOsVersionsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchOsVersionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOsVersionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorType}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOsVersionsRequest", fp)
}

func ParseWatchOsVersionsRequest_FieldPath(rawField string) (WatchOsVersionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOsVersionsRequest_FieldPath(fp)
}

func MustParseWatchOsVersionsRequest_FieldPath(rawField string) WatchOsVersionsRequest_FieldPath {
	fp, err := ParseWatchOsVersionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOsVersionsRequest_FieldTerminalPath struct {
	selector WatchOsVersionsRequest_FieldPathSelector
}

var _ WatchOsVersionsRequest_FieldPath = (*WatchOsVersionsRequest_FieldTerminalPath)(nil)

func (fp *WatchOsVersionsRequest_FieldTerminalPath) Selector() WatchOsVersionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOsVersionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOsVersionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOsVersionsRequest
func (fp *WatchOsVersionsRequest_FieldTerminalPath) Get(source *WatchOsVersionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOsVersionsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchOsVersionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchOsVersionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchOsVersionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchOsVersionsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchOsVersionsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchOsVersionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchOsVersionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchOsVersionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchOsVersionsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsVersionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOsVersionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOsVersionsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchOsVersionsRequest
func (fp *WatchOsVersionsRequest_FieldTerminalPath) GetSingle(source *WatchOsVersionsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchOsVersionsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchOsVersionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchOsVersionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchOsVersionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchOsVersionsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchOsVersionsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchOsVersionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchOsVersionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchOsVersionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchOsVersionsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsRequest: %d", fp.selector))
	}
}

func (fp *WatchOsVersionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOsVersionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchOsVersionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOsVersionsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchOsVersionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchOsVersionsRequest_FieldPathSelectorPageToken:
		return (*os_version.PagerCursor)(nil)
	case WatchOsVersionsRequest_FieldPathSelectorOrderBy:
		return (*os_version.OrderBy)(nil)
	case WatchOsVersionsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchOsVersionsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchOsVersionsRequest_FieldPathSelectorFilter:
		return (*os_version.Filter)(nil)
	case WatchOsVersionsRequest_FieldPathSelectorFieldMask:
		return (*os_version.OsVersion_FieldMask)(nil)
	case WatchOsVersionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchOsVersionsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsRequest: %d", fp.selector))
	}
}

func (fp *WatchOsVersionsRequest_FieldTerminalPath) ClearValue(item *WatchOsVersionsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchOsVersionsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchOsVersionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchOsVersionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchOsVersionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchOsVersionsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchOsVersionsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchOsVersionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchOsVersionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchOsVersionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchOsVersionsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsVersionsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchOsVersionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOsVersionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOsVersionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOsVersionsRequest_FieldPathSelectorType ||
		fp.selector == WatchOsVersionsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchOsVersionsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchOsVersionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchOsVersionsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchOsVersionsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchOsVersionsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchOsVersionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchOsVersionsRequest_FieldPathSelectorView ||
		fp.selector == WatchOsVersionsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchOsVersionsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOsVersionsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchOsVersionsRequest_FieldPathValue {
	switch fp.selector {
	case WatchOsVersionsRequest_FieldPathSelectorType:
		return &WatchOsVersionsRequest_FieldTerminalPathValue{WatchOsVersionsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchOsVersionsRequest_FieldPathSelectorPageSize:
		return &WatchOsVersionsRequest_FieldTerminalPathValue{WatchOsVersionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchOsVersionsRequest_FieldPathSelectorPageToken:
		return &WatchOsVersionsRequest_FieldTerminalPathValue{WatchOsVersionsRequest_FieldTerminalPath: *fp, value: value.(*os_version.PagerCursor)}
	case WatchOsVersionsRequest_FieldPathSelectorOrderBy:
		return &WatchOsVersionsRequest_FieldTerminalPathValue{WatchOsVersionsRequest_FieldTerminalPath: *fp, value: value.(*os_version.OrderBy)}
	case WatchOsVersionsRequest_FieldPathSelectorResumeToken:
		return &WatchOsVersionsRequest_FieldTerminalPathValue{WatchOsVersionsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchOsVersionsRequest_FieldPathSelectorStartingTime:
		return &WatchOsVersionsRequest_FieldTerminalPathValue{WatchOsVersionsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchOsVersionsRequest_FieldPathSelectorFilter:
		return &WatchOsVersionsRequest_FieldTerminalPathValue{WatchOsVersionsRequest_FieldTerminalPath: *fp, value: value.(*os_version.Filter)}
	case WatchOsVersionsRequest_FieldPathSelectorFieldMask:
		return &WatchOsVersionsRequest_FieldTerminalPathValue{WatchOsVersionsRequest_FieldTerminalPath: *fp, value: value.(*os_version.OsVersion_FieldMask)}
	case WatchOsVersionsRequest_FieldPathSelectorView:
		return &WatchOsVersionsRequest_FieldTerminalPathValue{WatchOsVersionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchOsVersionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchOsVersionsRequest_FieldTerminalPathValue{WatchOsVersionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsRequest: %d", fp.selector))
	}
}

func (fp *WatchOsVersionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOsVersionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOsVersionsRequest_FieldPathArrayOfValues {
	fpaov := &WatchOsVersionsRequest_FieldTerminalPathArrayOfValues{WatchOsVersionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOsVersionsRequest_FieldPathSelectorType:
		return &WatchOsVersionsRequest_FieldTerminalPathArrayOfValues{WatchOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchOsVersionsRequest_FieldPathSelectorPageSize:
		return &WatchOsVersionsRequest_FieldTerminalPathArrayOfValues{WatchOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchOsVersionsRequest_FieldPathSelectorPageToken:
		return &WatchOsVersionsRequest_FieldTerminalPathArrayOfValues{WatchOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]*os_version.PagerCursor)}
	case WatchOsVersionsRequest_FieldPathSelectorOrderBy:
		return &WatchOsVersionsRequest_FieldTerminalPathArrayOfValues{WatchOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]*os_version.OrderBy)}
	case WatchOsVersionsRequest_FieldPathSelectorResumeToken:
		return &WatchOsVersionsRequest_FieldTerminalPathArrayOfValues{WatchOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchOsVersionsRequest_FieldPathSelectorStartingTime:
		return &WatchOsVersionsRequest_FieldTerminalPathArrayOfValues{WatchOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchOsVersionsRequest_FieldPathSelectorFilter:
		return &WatchOsVersionsRequest_FieldTerminalPathArrayOfValues{WatchOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]*os_version.Filter)}
	case WatchOsVersionsRequest_FieldPathSelectorFieldMask:
		return &WatchOsVersionsRequest_FieldTerminalPathArrayOfValues{WatchOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]*os_version.OsVersion_FieldMask)}
	case WatchOsVersionsRequest_FieldPathSelectorView:
		return &WatchOsVersionsRequest_FieldTerminalPathArrayOfValues{WatchOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchOsVersionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchOsVersionsRequest_FieldTerminalPathArrayOfValues{WatchOsVersionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOsVersionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOsVersionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOsVersionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsRequest: %d", fp.selector))
	}
}

func (fp *WatchOsVersionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOsVersionsRequest_FieldPathValue allows storing values for WatchOsVersionsRequest fields according to their type
type WatchOsVersionsRequest_FieldPathValue interface {
	WatchOsVersionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOsVersionsRequest)
	CompareWith(*WatchOsVersionsRequest) (cmp int, comparable bool)
}

func ParseWatchOsVersionsRequest_FieldPathValue(pathStr, valueStr string) (WatchOsVersionsRequest_FieldPathValue, error) {
	fp, err := ParseWatchOsVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsVersionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOsVersionsRequest_FieldPathValue), nil
}

func MustParseWatchOsVersionsRequest_FieldPathValue(pathStr, valueStr string) WatchOsVersionsRequest_FieldPathValue {
	fpv, err := ParseWatchOsVersionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOsVersionsRequest_FieldTerminalPathValue struct {
	WatchOsVersionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOsVersionsRequest_FieldPathValue = (*WatchOsVersionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOsVersionsRequest' as interface{}
func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*os_version.PagerCursor, bool) {
	res, ok := fpv.value.(*os_version.PagerCursor)
	return res, ok
}
func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) AsOrderByValue() (*os_version.OrderBy, bool) {
	res, ok := fpv.value.(*os_version.OrderBy)
	return res, ok
}
func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) AsFilterValue() (*os_version.Filter, bool) {
	res, ok := fpv.value.(*os_version.Filter)
	return res, ok
}
func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*os_version.OsVersion_FieldMask, bool) {
	res, ok := fpv.value.(*os_version.OsVersion_FieldMask)
	return res, ok
}
func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchOsVersionsRequest
func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) SetTo(target **WatchOsVersionsRequest) {
	if *target == nil {
		*target = new(WatchOsVersionsRequest)
	}
	switch fpv.selector {
	case WatchOsVersionsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchOsVersionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchOsVersionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*os_version.PagerCursor)
	case WatchOsVersionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*os_version.OrderBy)
	case WatchOsVersionsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchOsVersionsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchOsVersionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*os_version.Filter)
	case WatchOsVersionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*os_version.OsVersion_FieldMask)
	case WatchOsVersionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchOsVersionsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOsVersionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOsVersionsRequest_FieldTerminalPathValue' with the value under path in 'WatchOsVersionsRequest'.
func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) CompareWith(source *WatchOsVersionsRequest) (int, bool) {
	switch fpv.selector {
	case WatchOsVersionsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsVersionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsVersionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchOsVersionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchOsVersionsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsVersionsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsVersionsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchOsVersionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchOsVersionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsVersionsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchOsVersionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOsVersionsRequest))
}

// WatchOsVersionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOsVersionsRequest according to their type
// Present only for array (repeated) types.
type WatchOsVersionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOsVersionsRequest_FieldPath
	ContainsValue(*WatchOsVersionsRequest) bool
}

// ParseWatchOsVersionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOsVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOsVersionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOsVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsVersionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOsVersionsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchOsVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchOsVersionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOsVersionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOsVersionsRequest_FieldTerminalPathArrayItemValue struct {
	WatchOsVersionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchOsVersionsRequest_FieldPathArrayItemValue = (*WatchOsVersionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOsVersionsRequest as interface{}
func (fpaiv *WatchOsVersionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOsVersionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOsVersionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOsVersionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOsVersionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOsVersionsRequest'
func (fpaiv *WatchOsVersionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOsVersionsRequest) bool {
	slice := fpaiv.WatchOsVersionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOsVersionsRequest_FieldPathArrayOfValues allows storing slice of values for WatchOsVersionsRequest fields according to their type
type WatchOsVersionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOsVersionsRequest_FieldPath
}

func ParseWatchOsVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOsVersionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOsVersionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsVersionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOsVersionsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchOsVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOsVersionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOsVersionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOsVersionsRequest_FieldTerminalPathArrayOfValues struct {
	WatchOsVersionsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchOsVersionsRequest_FieldPathArrayOfValues = (*WatchOsVersionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOsVersionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOsVersionsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchOsVersionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchOsVersionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*os_version.PagerCursor) {
			values = append(values, v)
		}
	case WatchOsVersionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*os_version.OrderBy) {
			values = append(values, v)
		}
	case WatchOsVersionsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchOsVersionsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchOsVersionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*os_version.Filter) {
			values = append(values, v)
		}
	case WatchOsVersionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*os_version.OsVersion_FieldMask) {
			values = append(values, v)
		}
	case WatchOsVersionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchOsVersionsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOsVersionsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchOsVersionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchOsVersionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*os_version.PagerCursor, bool) {
	res, ok := fpaov.values.([]*os_version.PagerCursor)
	return res, ok
}
func (fpaov *WatchOsVersionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*os_version.OrderBy, bool) {
	res, ok := fpaov.values.([]*os_version.OrderBy)
	return res, ok
}
func (fpaov *WatchOsVersionsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchOsVersionsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchOsVersionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*os_version.Filter, bool) {
	res, ok := fpaov.values.([]*os_version.Filter)
	return res, ok
}
func (fpaov *WatchOsVersionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*os_version.OsVersion_FieldMask, bool) {
	res, ok := fpaov.values.([]*os_version.OsVersion_FieldMask)
	return res, ok
}
func (fpaov *WatchOsVersionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchOsVersionsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOsVersionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOsVersionsResponse_FieldPathSelector
	Get(source *WatchOsVersionsResponse) []interface{}
	GetSingle(source *WatchOsVersionsResponse) (interface{}, bool)
	ClearValue(item *WatchOsVersionsResponse)

	// Those methods build corresponding WatchOsVersionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOsVersionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOsVersionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOsVersionsResponse_FieldPathArrayItemValue
}

type WatchOsVersionsResponse_FieldPathSelector int32

const (
	WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges WatchOsVersionsResponse_FieldPathSelector = 0
	WatchOsVersionsResponse_FieldPathSelectorIsCurrent        WatchOsVersionsResponse_FieldPathSelector = 1
	WatchOsVersionsResponse_FieldPathSelectorPageTokenChange  WatchOsVersionsResponse_FieldPathSelector = 2
	WatchOsVersionsResponse_FieldPathSelectorResumeToken      WatchOsVersionsResponse_FieldPathSelector = 3
	WatchOsVersionsResponse_FieldPathSelectorSnapshotSize     WatchOsVersionsResponse_FieldPathSelector = 4
	WatchOsVersionsResponse_FieldPathSelectorIsSoftReset      WatchOsVersionsResponse_FieldPathSelector = 5
	WatchOsVersionsResponse_FieldPathSelectorIsHardReset      WatchOsVersionsResponse_FieldPathSelector = 6
)

func (s WatchOsVersionsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges:
		return "os_version_changes"
	case WatchOsVersionsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchOsVersionsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchOsVersionsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchOsVersionsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchOsVersionsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", s))
	}
}

func BuildWatchOsVersionsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchOsVersionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOsVersionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "os_version_changes", "osVersionChanges", "os-version-changes":
			return &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchOsVersionsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchOsVersionsResponse_FieldSubPath{selector: WatchOsVersionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOsVersionsResponse", fp)
}

func ParseWatchOsVersionsResponse_FieldPath(rawField string) (WatchOsVersionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOsVersionsResponse_FieldPath(fp)
}

func MustParseWatchOsVersionsResponse_FieldPath(rawField string) WatchOsVersionsResponse_FieldPath {
	fp, err := ParseWatchOsVersionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOsVersionsResponse_FieldTerminalPath struct {
	selector WatchOsVersionsResponse_FieldPathSelector
}

var _ WatchOsVersionsResponse_FieldPath = (*WatchOsVersionsResponse_FieldTerminalPath)(nil)

func (fp *WatchOsVersionsResponse_FieldTerminalPath) Selector() WatchOsVersionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOsVersionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOsVersionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOsVersionsResponse
func (fp *WatchOsVersionsResponse_FieldTerminalPath) Get(source *WatchOsVersionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges:
			for _, value := range source.GetOsVersionChanges() {
				values = append(values, value)
			}
		case WatchOsVersionsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchOsVersionsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchOsVersionsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchOsVersionsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchOsVersionsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOsVersionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOsVersionsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchOsVersionsResponse
func (fp *WatchOsVersionsResponse_FieldTerminalPath) GetSingle(source *WatchOsVersionsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges:
		res := source.GetOsVersionChanges()
		return res, res != nil
	case WatchOsVersionsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchOsVersionsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchOsVersionsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchOsVersionsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchOsVersionsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fp.selector))
	}
}

func (fp *WatchOsVersionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOsVersionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchOsVersionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges:
		return ([]*os_version.OsVersionChange)(nil)
	case WatchOsVersionsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchOsVersionsResponse_PageTokenChange)(nil)
	case WatchOsVersionsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchOsVersionsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchOsVersionsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchOsVersionsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fp.selector))
	}
}

func (fp *WatchOsVersionsResponse_FieldTerminalPath) ClearValue(item *WatchOsVersionsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges:
			item.OsVersionChanges = nil
		case WatchOsVersionsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchOsVersionsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchOsVersionsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchOsVersionsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchOsVersionsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchOsVersionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOsVersionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOsVersionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges ||
		fp.selector == WatchOsVersionsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchOsVersionsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchOsVersionsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchOsVersionsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchOsVersionsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchOsVersionsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOsVersionsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchOsVersionsResponse_FieldPathValue {
	switch fp.selector {
	case WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges:
		return &WatchOsVersionsResponse_FieldTerminalPathValue{WatchOsVersionsResponse_FieldTerminalPath: *fp, value: value.([]*os_version.OsVersionChange)}
	case WatchOsVersionsResponse_FieldPathSelectorIsCurrent:
		return &WatchOsVersionsResponse_FieldTerminalPathValue{WatchOsVersionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchOsVersionsResponse_FieldTerminalPathValue{WatchOsVersionsResponse_FieldTerminalPath: *fp, value: value.(*WatchOsVersionsResponse_PageTokenChange)}
	case WatchOsVersionsResponse_FieldPathSelectorResumeToken:
		return &WatchOsVersionsResponse_FieldTerminalPathValue{WatchOsVersionsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchOsVersionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchOsVersionsResponse_FieldTerminalPathValue{WatchOsVersionsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchOsVersionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchOsVersionsResponse_FieldTerminalPathValue{WatchOsVersionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchOsVersionsResponse_FieldPathSelectorIsHardReset:
		return &WatchOsVersionsResponse_FieldTerminalPathValue{WatchOsVersionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fp.selector))
	}
}

func (fp *WatchOsVersionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOsVersionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOsVersionsResponse_FieldPathArrayOfValues {
	fpaov := &WatchOsVersionsResponse_FieldTerminalPathArrayOfValues{WatchOsVersionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges:
		return &WatchOsVersionsResponse_FieldTerminalPathArrayOfValues{WatchOsVersionsResponse_FieldTerminalPath: *fp, values: values.([][]*os_version.OsVersionChange)}
	case WatchOsVersionsResponse_FieldPathSelectorIsCurrent:
		return &WatchOsVersionsResponse_FieldTerminalPathArrayOfValues{WatchOsVersionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchOsVersionsResponse_FieldTerminalPathArrayOfValues{WatchOsVersionsResponse_FieldTerminalPath: *fp, values: values.([]*WatchOsVersionsResponse_PageTokenChange)}
	case WatchOsVersionsResponse_FieldPathSelectorResumeToken:
		return &WatchOsVersionsResponse_FieldTerminalPathArrayOfValues{WatchOsVersionsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchOsVersionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchOsVersionsResponse_FieldTerminalPathArrayOfValues{WatchOsVersionsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchOsVersionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchOsVersionsResponse_FieldTerminalPathArrayOfValues{WatchOsVersionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchOsVersionsResponse_FieldPathSelectorIsHardReset:
		return &WatchOsVersionsResponse_FieldTerminalPathArrayOfValues{WatchOsVersionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOsVersionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOsVersionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOsVersionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges:
		return &WatchOsVersionsResponse_FieldTerminalPathArrayItemValue{WatchOsVersionsResponse_FieldTerminalPath: *fp, value: value.(*os_version.OsVersionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fp.selector))
	}
}

func (fp *WatchOsVersionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchOsVersionsResponse_FieldSubPath struct {
	selector WatchOsVersionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchOsVersionsResponse_FieldPath = (*WatchOsVersionsResponse_FieldSubPath)(nil)

func (fps *WatchOsVersionsResponse_FieldSubPath) Selector() WatchOsVersionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchOsVersionsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchOsVersionsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchOsVersionsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchOsVersionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchOsVersionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchOsVersionsResponse
func (fps *WatchOsVersionsResponse_FieldSubPath) Get(source *WatchOsVersionsResponse) (values []interface{}) {
	switch fps.selector {
	case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchOsVersionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchOsVersionsResponse))
}

// GetSingle returns value of selected field from source WatchOsVersionsResponse
func (fps *WatchOsVersionsResponse_FieldSubPath) GetSingle(source *WatchOsVersionsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fps.selector))
	}
}

func (fps *WatchOsVersionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchOsVersionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchOsVersionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchOsVersionsResponse_FieldSubPath) ClearValue(item *WatchOsVersionsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchOsVersionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchOsVersionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchOsVersionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchOsVersionsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchOsVersionsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchOsVersionsResponse_FieldSubPath) WithIValue(value interface{}) WatchOsVersionsResponse_FieldPathValue {
	return &WatchOsVersionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchOsVersionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchOsVersionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchOsVersionsResponse_FieldPathArrayOfValues {
	return &WatchOsVersionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchOsVersionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchOsVersionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchOsVersionsResponse_FieldPathArrayItemValue {
	return &WatchOsVersionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchOsVersionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchOsVersionsResponse_FieldPathValue allows storing values for WatchOsVersionsResponse fields according to their type
type WatchOsVersionsResponse_FieldPathValue interface {
	WatchOsVersionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOsVersionsResponse)
	CompareWith(*WatchOsVersionsResponse) (cmp int, comparable bool)
}

func ParseWatchOsVersionsResponse_FieldPathValue(pathStr, valueStr string) (WatchOsVersionsResponse_FieldPathValue, error) {
	fp, err := ParseWatchOsVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsVersionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOsVersionsResponse_FieldPathValue), nil
}

func MustParseWatchOsVersionsResponse_FieldPathValue(pathStr, valueStr string) WatchOsVersionsResponse_FieldPathValue {
	fpv, err := ParseWatchOsVersionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOsVersionsResponse_FieldTerminalPathValue struct {
	WatchOsVersionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOsVersionsResponse_FieldPathValue = (*WatchOsVersionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchOsVersionsResponse' as interface{}
func (fpv *WatchOsVersionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOsVersionsResponse_FieldTerminalPathValue) AsOsVersionChangesValue() ([]*os_version.OsVersionChange, bool) {
	res, ok := fpv.value.([]*os_version.OsVersionChange)
	return res, ok
}
func (fpv *WatchOsVersionsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchOsVersionsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchOsVersionsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchOsVersionsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchOsVersionsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchOsVersionsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchOsVersionsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchOsVersionsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchOsVersionsResponse
func (fpv *WatchOsVersionsResponse_FieldTerminalPathValue) SetTo(target **WatchOsVersionsResponse) {
	if *target == nil {
		*target = new(WatchOsVersionsResponse)
	}
	switch fpv.selector {
	case WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges:
		(*target).OsVersionChanges = fpv.value.([]*os_version.OsVersionChange)
	case WatchOsVersionsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchOsVersionsResponse_PageTokenChange)
	case WatchOsVersionsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchOsVersionsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchOsVersionsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchOsVersionsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOsVersionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOsVersionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOsVersionsResponse_FieldTerminalPathValue' with the value under path in 'WatchOsVersionsResponse'.
func (fpv *WatchOsVersionsResponse_FieldTerminalPathValue) CompareWith(source *WatchOsVersionsResponse) (int, bool) {
	switch fpv.selector {
	case WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges:
		return 0, false
	case WatchOsVersionsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchOsVersionsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsVersionsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsVersionsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchOsVersionsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchOsVersionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOsVersionsResponse))
}

type WatchOsVersionsResponse_FieldSubPathValue struct {
	WatchOsVersionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchOsVersionsResponse_FieldPathValue = (*WatchOsVersionsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchOsVersionsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchOsVersionsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchOsVersionsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchOsVersionsResponse_FieldSubPathValue) SetTo(target **WatchOsVersionsResponse) {
	if *target == nil {
		*target = new(WatchOsVersionsResponse)
	}
	switch fpvs.Selector() {
	case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchOsVersionsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchOsVersionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOsVersionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchOsVersionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchOsVersionsResponse_FieldSubPathValue) CompareWith(source *WatchOsVersionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchOsVersionsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchOsVersionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchOsVersionsResponse))
}

// WatchOsVersionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchOsVersionsResponse according to their type
// Present only for array (repeated) types.
type WatchOsVersionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOsVersionsResponse_FieldPath
	ContainsValue(*WatchOsVersionsResponse) bool
}

// ParseWatchOsVersionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOsVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOsVersionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOsVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsVersionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOsVersionsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchOsVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchOsVersionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOsVersionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOsVersionsResponse_FieldTerminalPathArrayItemValue struct {
	WatchOsVersionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchOsVersionsResponse_FieldPathArrayItemValue = (*WatchOsVersionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOsVersionsResponse as interface{}
func (fpaiv *WatchOsVersionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchOsVersionsResponse_FieldTerminalPathArrayItemValue) AsOsVersionChangesItemValue() (*os_version.OsVersionChange, bool) {
	res, ok := fpaiv.value.(*os_version.OsVersionChange)
	return res, ok
}

func (fpaiv *WatchOsVersionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOsVersionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOsVersionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOsVersionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOsVersionsResponse'
func (fpaiv *WatchOsVersionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOsVersionsResponse) bool {
	slice := fpaiv.WatchOsVersionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchOsVersionsResponse_FieldSubPathArrayItemValue struct {
	WatchOsVersionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchOsVersionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchOsVersionsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchOsVersionsResponse'
func (fpaivs *WatchOsVersionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchOsVersionsResponse) bool {
	switch fpaivs.Selector() {
	case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse: %d", fpaivs.Selector()))
	}
}

// WatchOsVersionsResponse_FieldPathArrayOfValues allows storing slice of values for WatchOsVersionsResponse fields according to their type
type WatchOsVersionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOsVersionsResponse_FieldPath
}

func ParseWatchOsVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOsVersionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOsVersionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchOsVersionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOsVersionsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchOsVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOsVersionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOsVersionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOsVersionsResponse_FieldTerminalPathArrayOfValues struct {
	WatchOsVersionsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchOsVersionsResponse_FieldPathArrayOfValues = (*WatchOsVersionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOsVersionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges:
		for _, v := range fpaov.values.([][]*os_version.OsVersionChange) {
			values = append(values, v)
		}
	case WatchOsVersionsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchOsVersionsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchOsVersionsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchOsVersionsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchOsVersionsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchOsVersionsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchOsVersionsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOsVersionsResponse_FieldTerminalPathArrayOfValues) AsOsVersionChangesArrayOfValues() ([][]*os_version.OsVersionChange, bool) {
	res, ok := fpaov.values.([][]*os_version.OsVersionChange)
	return res, ok
}
func (fpaov *WatchOsVersionsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchOsVersionsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchOsVersionsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchOsVersionsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchOsVersionsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchOsVersionsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchOsVersionsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchOsVersionsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchOsVersionsResponse_FieldSubPathArrayOfValues struct {
	WatchOsVersionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchOsVersionsResponse_FieldPathArrayOfValues = (*WatchOsVersionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchOsVersionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchOsVersionsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchOsVersionsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchOsVersionsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchOsVersionsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchOsVersionsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchOsVersionsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchOsVersionsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchOsVersionsResponse_PageTokenChange)

	// Those methods build corresponding WatchOsVersionsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchOsVersionsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchOsVersionsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchOsVersionsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchOsVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchOsVersionsResponsePageTokenChange_FieldPathSelector = 0
	WatchOsVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchOsVersionsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchOsVersionsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchOsVersionsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchOsVersionsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchOsVersionsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchOsVersionsResponsePageTokenChange_FieldTerminalPath{selector: WatchOsVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchOsVersionsResponsePageTokenChange_FieldTerminalPath{selector: WatchOsVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchOsVersionsResponse_PageTokenChange", fp)
}

func ParseWatchOsVersionsResponsePageTokenChange_FieldPath(rawField string) (WatchOsVersionsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchOsVersionsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchOsVersionsResponsePageTokenChange_FieldPath(rawField string) WatchOsVersionsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchOsVersionsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchOsVersionsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchOsVersionsResponsePageTokenChange_FieldPathSelector
}

var _ WatchOsVersionsResponsePageTokenChange_FieldPath = (*WatchOsVersionsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) Selector() WatchOsVersionsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchOsVersionsResponse_PageTokenChange
func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchOsVersionsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchOsVersionsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchOsVersionsResponse_PageTokenChange
func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchOsVersionsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchOsVersionsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*os_version.PagerCursor)(nil)
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*os_version.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchOsVersionsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchOsVersionsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchOsVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchOsVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchOsVersionsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchOsVersionsResponsePageTokenChange_FieldTerminalPathValue{WatchOsVersionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*os_version.PagerCursor)}
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchOsVersionsResponsePageTokenChange_FieldTerminalPathValue{WatchOsVersionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*os_version.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchOsVersionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchOsVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchOsVersionsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchOsVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchOsVersionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*os_version.PagerCursor)}
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchOsVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchOsVersionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*os_version.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchOsVersionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchOsVersionsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchOsVersionsResponsePageTokenChange_FieldPathValue interface {
	WatchOsVersionsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchOsVersionsResponse_PageTokenChange)
	CompareWith(*WatchOsVersionsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchOsVersionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchOsVersionsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchOsVersionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchOsVersionsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchOsVersionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchOsVersionsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchOsVersionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchOsVersionsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchOsVersionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchOsVersionsResponsePageTokenChange_FieldPathValue = (*WatchOsVersionsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchOsVersionsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchOsVersionsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*os_version.PagerCursor, bool) {
	res, ok := fpv.value.(*os_version.PagerCursor)
	return res, ok
}
func (fpv *WatchOsVersionsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*os_version.PagerCursor, bool) {
	res, ok := fpv.value.(*os_version.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchOsVersionsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchOsVersionsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchOsVersionsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*os_version.PagerCursor)
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*os_version.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchOsVersionsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchOsVersionsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchOsVersionsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchOsVersionsResponse_PageTokenChange'.
func (fpv *WatchOsVersionsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchOsVersionsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchOsVersionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchOsVersionsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchOsVersionsResponse_PageTokenChange))
}

// WatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchOsVersionsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchOsVersionsResponse_PageTokenChange) bool
}

// ParseWatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchOsVersionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchOsVersionsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchOsVersionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchOsVersionsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchOsVersionsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchOsVersionsResponse_PageTokenChange as interface{}
func (fpaiv *WatchOsVersionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchOsVersionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchOsVersionsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchOsVersionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchOsVersionsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchOsVersionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchOsVersionsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchOsVersionsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchOsVersionsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchOsVersionsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchOsVersionsResponsePageTokenChange_FieldPath
}

func ParseWatchOsVersionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchOsVersionsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchOsVersionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchOsVersionsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchOsVersionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchOsVersionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchOsVersionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchOsVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchOsVersionsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchOsVersionsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchOsVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchOsVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*os_version.PagerCursor) {
			values = append(values, v)
		}
	case WatchOsVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*os_version.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchOsVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*os_version.PagerCursor, bool) {
	res, ok := fpaov.values.([]*os_version.PagerCursor)
	return res, ok
}
func (fpaov *WatchOsVersionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*os_version.PagerCursor, bool) {
	res, ok := fpaov.values.([]*os_version.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateOsVersionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateOsVersionRequest_FieldPathSelector
	Get(source *CreateOsVersionRequest) []interface{}
	GetSingle(source *CreateOsVersionRequest) (interface{}, bool)
	ClearValue(item *CreateOsVersionRequest)

	// Those methods build corresponding CreateOsVersionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateOsVersionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateOsVersionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateOsVersionRequest_FieldPathArrayItemValue
}

type CreateOsVersionRequest_FieldPathSelector int32

const (
	CreateOsVersionRequest_FieldPathSelectorOsVersion CreateOsVersionRequest_FieldPathSelector = 0
)

func (s CreateOsVersionRequest_FieldPathSelector) String() string {
	switch s {
	case CreateOsVersionRequest_FieldPathSelectorOsVersion:
		return "os_version"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", s))
	}
}

func BuildCreateOsVersionRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateOsVersionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateOsVersionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "os_version", "osVersion", "os-version":
			return &CreateOsVersionRequest_FieldTerminalPath{selector: CreateOsVersionRequest_FieldPathSelectorOsVersion}, nil
		}
	} else {
		switch fp[0] {
		case "os_version", "osVersion", "os-version":
			if subpath, err := os_version.BuildOsVersion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateOsVersionRequest_FieldSubPath{selector: CreateOsVersionRequest_FieldPathSelectorOsVersion, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateOsVersionRequest", fp)
}

func ParseCreateOsVersionRequest_FieldPath(rawField string) (CreateOsVersionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateOsVersionRequest_FieldPath(fp)
}

func MustParseCreateOsVersionRequest_FieldPath(rawField string) CreateOsVersionRequest_FieldPath {
	fp, err := ParseCreateOsVersionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateOsVersionRequest_FieldTerminalPath struct {
	selector CreateOsVersionRequest_FieldPathSelector
}

var _ CreateOsVersionRequest_FieldPath = (*CreateOsVersionRequest_FieldTerminalPath)(nil)

func (fp *CreateOsVersionRequest_FieldTerminalPath) Selector() CreateOsVersionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateOsVersionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateOsVersionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateOsVersionRequest
func (fp *CreateOsVersionRequest_FieldTerminalPath) Get(source *CreateOsVersionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateOsVersionRequest_FieldPathSelectorOsVersion:
			if source.OsVersion != nil {
				values = append(values, source.OsVersion)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateOsVersionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateOsVersionRequest))
}

// GetSingle returns value pointed by specific field of from source CreateOsVersionRequest
func (fp *CreateOsVersionRequest_FieldTerminalPath) GetSingle(source *CreateOsVersionRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateOsVersionRequest_FieldPathSelectorOsVersion:
		res := source.GetOsVersion()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fp.selector))
	}
}

func (fp *CreateOsVersionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateOsVersionRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateOsVersionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateOsVersionRequest_FieldPathSelectorOsVersion:
		return (*os_version.OsVersion)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fp.selector))
	}
}

func (fp *CreateOsVersionRequest_FieldTerminalPath) ClearValue(item *CreateOsVersionRequest) {
	if item != nil {
		switch fp.selector {
		case CreateOsVersionRequest_FieldPathSelectorOsVersion:
			item.OsVersion = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateOsVersionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateOsVersionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateOsVersionRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreateOsVersionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateOsVersionRequest_FieldTerminalPath) WithIValue(value interface{}) CreateOsVersionRequest_FieldPathValue {
	switch fp.selector {
	case CreateOsVersionRequest_FieldPathSelectorOsVersion:
		return &CreateOsVersionRequest_FieldTerminalPathValue{CreateOsVersionRequest_FieldTerminalPath: *fp, value: value.(*os_version.OsVersion)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fp.selector))
	}
}

func (fp *CreateOsVersionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateOsVersionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateOsVersionRequest_FieldPathArrayOfValues {
	fpaov := &CreateOsVersionRequest_FieldTerminalPathArrayOfValues{CreateOsVersionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateOsVersionRequest_FieldPathSelectorOsVersion:
		return &CreateOsVersionRequest_FieldTerminalPathArrayOfValues{CreateOsVersionRequest_FieldTerminalPath: *fp, values: values.([]*os_version.OsVersion)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateOsVersionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateOsVersionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateOsVersionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fp.selector))
	}
}

func (fp *CreateOsVersionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateOsVersionRequest_FieldSubPath struct {
	selector CreateOsVersionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateOsVersionRequest_FieldPath = (*CreateOsVersionRequest_FieldSubPath)(nil)

func (fps *CreateOsVersionRequest_FieldSubPath) Selector() CreateOsVersionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateOsVersionRequest_FieldSubPath) AsOsVersionSubPath() (os_version.OsVersion_FieldPath, bool) {
	res, ok := fps.subPath.(os_version.OsVersion_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateOsVersionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateOsVersionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateOsVersionRequest
func (fps *CreateOsVersionRequest_FieldSubPath) Get(source *CreateOsVersionRequest) (values []interface{}) {
	switch fps.selector {
	case CreateOsVersionRequest_FieldPathSelectorOsVersion:
		values = append(values, fps.subPath.GetRaw(source.GetOsVersion())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateOsVersionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateOsVersionRequest))
}

// GetSingle returns value of selected field from source CreateOsVersionRequest
func (fps *CreateOsVersionRequest_FieldSubPath) GetSingle(source *CreateOsVersionRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateOsVersionRequest_FieldPathSelectorOsVersion:
		if source.GetOsVersion() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOsVersion())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fps.selector))
	}
}

func (fps *CreateOsVersionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateOsVersionRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateOsVersionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateOsVersionRequest_FieldSubPath) ClearValue(item *CreateOsVersionRequest) {
	if item != nil {
		switch fps.selector {
		case CreateOsVersionRequest_FieldPathSelectorOsVersion:
			fps.subPath.ClearValueRaw(item.OsVersion)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateOsVersionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateOsVersionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateOsVersionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateOsVersionRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateOsVersionRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateOsVersionRequest_FieldSubPath) WithIValue(value interface{}) CreateOsVersionRequest_FieldPathValue {
	return &CreateOsVersionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateOsVersionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateOsVersionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateOsVersionRequest_FieldPathArrayOfValues {
	return &CreateOsVersionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateOsVersionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateOsVersionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateOsVersionRequest_FieldPathArrayItemValue {
	return &CreateOsVersionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateOsVersionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateOsVersionRequest_FieldPathValue allows storing values for CreateOsVersionRequest fields according to their type
type CreateOsVersionRequest_FieldPathValue interface {
	CreateOsVersionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateOsVersionRequest)
	CompareWith(*CreateOsVersionRequest) (cmp int, comparable bool)
}

func ParseCreateOsVersionRequest_FieldPathValue(pathStr, valueStr string) (CreateOsVersionRequest_FieldPathValue, error) {
	fp, err := ParseCreateOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateOsVersionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateOsVersionRequest_FieldPathValue), nil
}

func MustParseCreateOsVersionRequest_FieldPathValue(pathStr, valueStr string) CreateOsVersionRequest_FieldPathValue {
	fpv, err := ParseCreateOsVersionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateOsVersionRequest_FieldTerminalPathValue struct {
	CreateOsVersionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateOsVersionRequest_FieldPathValue = (*CreateOsVersionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateOsVersionRequest' as interface{}
func (fpv *CreateOsVersionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateOsVersionRequest_FieldTerminalPathValue) AsOsVersionValue() (*os_version.OsVersion, bool) {
	res, ok := fpv.value.(*os_version.OsVersion)
	return res, ok
}

// SetTo stores value for selected field for object CreateOsVersionRequest
func (fpv *CreateOsVersionRequest_FieldTerminalPathValue) SetTo(target **CreateOsVersionRequest) {
	if *target == nil {
		*target = new(CreateOsVersionRequest)
	}
	switch fpv.selector {
	case CreateOsVersionRequest_FieldPathSelectorOsVersion:
		(*target).OsVersion = fpv.value.(*os_version.OsVersion)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateOsVersionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateOsVersionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateOsVersionRequest_FieldTerminalPathValue' with the value under path in 'CreateOsVersionRequest'.
func (fpv *CreateOsVersionRequest_FieldTerminalPathValue) CompareWith(source *CreateOsVersionRequest) (int, bool) {
	switch fpv.selector {
	case CreateOsVersionRequest_FieldPathSelectorOsVersion:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateOsVersionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateOsVersionRequest))
}

type CreateOsVersionRequest_FieldSubPathValue struct {
	CreateOsVersionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateOsVersionRequest_FieldPathValue = (*CreateOsVersionRequest_FieldSubPathValue)(nil)

func (fpvs *CreateOsVersionRequest_FieldSubPathValue) AsOsVersionPathValue() (os_version.OsVersion_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(os_version.OsVersion_FieldPathValue)
	return res, ok
}

func (fpvs *CreateOsVersionRequest_FieldSubPathValue) SetTo(target **CreateOsVersionRequest) {
	if *target == nil {
		*target = new(CreateOsVersionRequest)
	}
	switch fpvs.Selector() {
	case CreateOsVersionRequest_FieldPathSelectorOsVersion:
		fpvs.subPathValue.(os_version.OsVersion_FieldPathValue).SetTo(&(*target).OsVersion)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateOsVersionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateOsVersionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateOsVersionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateOsVersionRequest_FieldSubPathValue) CompareWith(source *CreateOsVersionRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateOsVersionRequest_FieldPathSelectorOsVersion:
		return fpvs.subPathValue.(os_version.OsVersion_FieldPathValue).CompareWith(source.GetOsVersion())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateOsVersionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateOsVersionRequest))
}

// CreateOsVersionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateOsVersionRequest according to their type
// Present only for array (repeated) types.
type CreateOsVersionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateOsVersionRequest_FieldPath
	ContainsValue(*CreateOsVersionRequest) bool
}

// ParseCreateOsVersionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateOsVersionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateOsVersionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateOsVersionRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateOsVersionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateOsVersionRequest_FieldTerminalPathArrayItemValue struct {
	CreateOsVersionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateOsVersionRequest_FieldPathArrayItemValue = (*CreateOsVersionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateOsVersionRequest as interface{}
func (fpaiv *CreateOsVersionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateOsVersionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateOsVersionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateOsVersionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateOsVersionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateOsVersionRequest'
func (fpaiv *CreateOsVersionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateOsVersionRequest) bool {
	slice := fpaiv.CreateOsVersionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateOsVersionRequest_FieldSubPathArrayItemValue struct {
	CreateOsVersionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateOsVersionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateOsVersionRequest_FieldSubPathArrayItemValue) AsOsVersionPathItemValue() (os_version.OsVersion_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(os_version.OsVersion_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateOsVersionRequest'
func (fpaivs *CreateOsVersionRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateOsVersionRequest) bool {
	switch fpaivs.Selector() {
	case CreateOsVersionRequest_FieldPathSelectorOsVersion:
		return fpaivs.subPathItemValue.(os_version.OsVersion_FieldPathArrayItemValue).ContainsValue(source.GetOsVersion())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateOsVersionRequest: %d", fpaivs.Selector()))
	}
}

// CreateOsVersionRequest_FieldPathArrayOfValues allows storing slice of values for CreateOsVersionRequest fields according to their type
type CreateOsVersionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateOsVersionRequest_FieldPath
}

func ParseCreateOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateOsVersionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateOsVersionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateOsVersionRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateOsVersionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateOsVersionRequest_FieldTerminalPathArrayOfValues struct {
	CreateOsVersionRequest_FieldTerminalPath
	values interface{}
}

var _ CreateOsVersionRequest_FieldPathArrayOfValues = (*CreateOsVersionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateOsVersionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateOsVersionRequest_FieldPathSelectorOsVersion:
		for _, v := range fpaov.values.([]*os_version.OsVersion) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateOsVersionRequest_FieldTerminalPathArrayOfValues) AsOsVersionArrayOfValues() ([]*os_version.OsVersion, bool) {
	res, ok := fpaov.values.([]*os_version.OsVersion)
	return res, ok
}

type CreateOsVersionRequest_FieldSubPathArrayOfValues struct {
	CreateOsVersionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateOsVersionRequest_FieldPathArrayOfValues = (*CreateOsVersionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateOsVersionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateOsVersionRequest_FieldSubPathArrayOfValues) AsOsVersionPathArrayOfValues() (os_version.OsVersion_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(os_version.OsVersion_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateOsVersionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateOsVersionRequest_FieldPathSelector
	Get(source *UpdateOsVersionRequest) []interface{}
	GetSingle(source *UpdateOsVersionRequest) (interface{}, bool)
	ClearValue(item *UpdateOsVersionRequest)

	// Those methods build corresponding UpdateOsVersionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateOsVersionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateOsVersionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateOsVersionRequest_FieldPathArrayItemValue
}

type UpdateOsVersionRequest_FieldPathSelector int32

const (
	UpdateOsVersionRequest_FieldPathSelectorOsVersion    UpdateOsVersionRequest_FieldPathSelector = 0
	UpdateOsVersionRequest_FieldPathSelectorUpdateMask   UpdateOsVersionRequest_FieldPathSelector = 1
	UpdateOsVersionRequest_FieldPathSelectorCas          UpdateOsVersionRequest_FieldPathSelector = 2
	UpdateOsVersionRequest_FieldPathSelectorAllowMissing UpdateOsVersionRequest_FieldPathSelector = 3
)

func (s UpdateOsVersionRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
		return "os_version"
	case UpdateOsVersionRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateOsVersionRequest_FieldPathSelectorCas:
		return "cas"
	case UpdateOsVersionRequest_FieldPathSelectorAllowMissing:
		return "allow_missing"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", s))
	}
}

func BuildUpdateOsVersionRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateOsVersionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateOsVersionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "os_version", "osVersion", "os-version":
			return &UpdateOsVersionRequest_FieldTerminalPath{selector: UpdateOsVersionRequest_FieldPathSelectorOsVersion}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateOsVersionRequest_FieldTerminalPath{selector: UpdateOsVersionRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateOsVersionRequest_FieldTerminalPath{selector: UpdateOsVersionRequest_FieldPathSelectorCas}, nil
		case "allow_missing", "allowMissing", "allow-missing":
			return &UpdateOsVersionRequest_FieldTerminalPath{selector: UpdateOsVersionRequest_FieldPathSelectorAllowMissing}, nil
		}
	} else {
		switch fp[0] {
		case "os_version", "osVersion", "os-version":
			if subpath, err := os_version.BuildOsVersion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateOsVersionRequest_FieldSubPath{selector: UpdateOsVersionRequest_FieldPathSelectorOsVersion, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateOsVersionRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateOsVersionRequest_FieldSubPath{selector: UpdateOsVersionRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateOsVersionRequest", fp)
}

func ParseUpdateOsVersionRequest_FieldPath(rawField string) (UpdateOsVersionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateOsVersionRequest_FieldPath(fp)
}

func MustParseUpdateOsVersionRequest_FieldPath(rawField string) UpdateOsVersionRequest_FieldPath {
	fp, err := ParseUpdateOsVersionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateOsVersionRequest_FieldTerminalPath struct {
	selector UpdateOsVersionRequest_FieldPathSelector
}

var _ UpdateOsVersionRequest_FieldPath = (*UpdateOsVersionRequest_FieldTerminalPath)(nil)

func (fp *UpdateOsVersionRequest_FieldTerminalPath) Selector() UpdateOsVersionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateOsVersionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateOsVersionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateOsVersionRequest
func (fp *UpdateOsVersionRequest_FieldTerminalPath) Get(source *UpdateOsVersionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
			if source.OsVersion != nil {
				values = append(values, source.OsVersion)
			}
		case UpdateOsVersionRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateOsVersionRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		case UpdateOsVersionRequest_FieldPathSelectorAllowMissing:
			values = append(values, source.AllowMissing)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateOsVersionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateOsVersionRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateOsVersionRequest
func (fp *UpdateOsVersionRequest_FieldTerminalPath) GetSingle(source *UpdateOsVersionRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
		res := source.GetOsVersion()
		return res, res != nil
	case UpdateOsVersionRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateOsVersionRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	case UpdateOsVersionRequest_FieldPathSelectorAllowMissing:
		return source.GetAllowMissing(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fp.selector))
	}
}

func (fp *UpdateOsVersionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateOsVersionRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateOsVersionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
		return (*os_version.OsVersion)(nil)
	case UpdateOsVersionRequest_FieldPathSelectorUpdateMask:
		return (*os_version.OsVersion_FieldMask)(nil)
	case UpdateOsVersionRequest_FieldPathSelectorCas:
		return (*UpdateOsVersionRequest_CAS)(nil)
	case UpdateOsVersionRequest_FieldPathSelectorAllowMissing:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fp.selector))
	}
}

func (fp *UpdateOsVersionRequest_FieldTerminalPath) ClearValue(item *UpdateOsVersionRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
			item.OsVersion = nil
		case UpdateOsVersionRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateOsVersionRequest_FieldPathSelectorCas:
			item.Cas = nil
		case UpdateOsVersionRequest_FieldPathSelectorAllowMissing:
			item.AllowMissing = false
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateOsVersionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateOsVersionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateOsVersionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateOsVersionRequest_FieldPathSelectorUpdateMask ||
		fp.selector == UpdateOsVersionRequest_FieldPathSelectorAllowMissing
}

func (fp *UpdateOsVersionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateOsVersionRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateOsVersionRequest_FieldPathValue {
	switch fp.selector {
	case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
		return &UpdateOsVersionRequest_FieldTerminalPathValue{UpdateOsVersionRequest_FieldTerminalPath: *fp, value: value.(*os_version.OsVersion)}
	case UpdateOsVersionRequest_FieldPathSelectorUpdateMask:
		return &UpdateOsVersionRequest_FieldTerminalPathValue{UpdateOsVersionRequest_FieldTerminalPath: *fp, value: value.(*os_version.OsVersion_FieldMask)}
	case UpdateOsVersionRequest_FieldPathSelectorCas:
		return &UpdateOsVersionRequest_FieldTerminalPathValue{UpdateOsVersionRequest_FieldTerminalPath: *fp, value: value.(*UpdateOsVersionRequest_CAS)}
	case UpdateOsVersionRequest_FieldPathSelectorAllowMissing:
		return &UpdateOsVersionRequest_FieldTerminalPathValue{UpdateOsVersionRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fp.selector))
	}
}

func (fp *UpdateOsVersionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateOsVersionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateOsVersionRequest_FieldPathArrayOfValues {
	fpaov := &UpdateOsVersionRequest_FieldTerminalPathArrayOfValues{UpdateOsVersionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
		return &UpdateOsVersionRequest_FieldTerminalPathArrayOfValues{UpdateOsVersionRequest_FieldTerminalPath: *fp, values: values.([]*os_version.OsVersion)}
	case UpdateOsVersionRequest_FieldPathSelectorUpdateMask:
		return &UpdateOsVersionRequest_FieldTerminalPathArrayOfValues{UpdateOsVersionRequest_FieldTerminalPath: *fp, values: values.([]*os_version.OsVersion_FieldMask)}
	case UpdateOsVersionRequest_FieldPathSelectorCas:
		return &UpdateOsVersionRequest_FieldTerminalPathArrayOfValues{UpdateOsVersionRequest_FieldTerminalPath: *fp, values: values.([]*UpdateOsVersionRequest_CAS)}
	case UpdateOsVersionRequest_FieldPathSelectorAllowMissing:
		return &UpdateOsVersionRequest_FieldTerminalPathArrayOfValues{UpdateOsVersionRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateOsVersionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateOsVersionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateOsVersionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fp.selector))
	}
}

func (fp *UpdateOsVersionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateOsVersionRequest_FieldSubPath struct {
	selector UpdateOsVersionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateOsVersionRequest_FieldPath = (*UpdateOsVersionRequest_FieldSubPath)(nil)

func (fps *UpdateOsVersionRequest_FieldSubPath) Selector() UpdateOsVersionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateOsVersionRequest_FieldSubPath) AsOsVersionSubPath() (os_version.OsVersion_FieldPath, bool) {
	res, ok := fps.subPath.(os_version.OsVersion_FieldPath)
	return res, ok
}
func (fps *UpdateOsVersionRequest_FieldSubPath) AsCasSubPath() (UpdateOsVersionRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateOsVersionRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateOsVersionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateOsVersionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateOsVersionRequest
func (fps *UpdateOsVersionRequest_FieldSubPath) Get(source *UpdateOsVersionRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
		values = append(values, fps.subPath.GetRaw(source.GetOsVersion())...)
	case UpdateOsVersionRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateOsVersionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateOsVersionRequest))
}

// GetSingle returns value of selected field from source UpdateOsVersionRequest
func (fps *UpdateOsVersionRequest_FieldSubPath) GetSingle(source *UpdateOsVersionRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
		if source.GetOsVersion() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOsVersion())
	case UpdateOsVersionRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fps.selector))
	}
}

func (fps *UpdateOsVersionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateOsVersionRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateOsVersionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateOsVersionRequest_FieldSubPath) ClearValue(item *UpdateOsVersionRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
			fps.subPath.ClearValueRaw(item.OsVersion)
		case UpdateOsVersionRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateOsVersionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateOsVersionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateOsVersionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateOsVersionRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateOsVersionRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateOsVersionRequest_FieldSubPath) WithIValue(value interface{}) UpdateOsVersionRequest_FieldPathValue {
	return &UpdateOsVersionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateOsVersionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateOsVersionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateOsVersionRequest_FieldPathArrayOfValues {
	return &UpdateOsVersionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateOsVersionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateOsVersionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateOsVersionRequest_FieldPathArrayItemValue {
	return &UpdateOsVersionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateOsVersionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateOsVersionRequest_FieldPathValue allows storing values for UpdateOsVersionRequest fields according to their type
type UpdateOsVersionRequest_FieldPathValue interface {
	UpdateOsVersionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateOsVersionRequest)
	CompareWith(*UpdateOsVersionRequest) (cmp int, comparable bool)
}

func ParseUpdateOsVersionRequest_FieldPathValue(pathStr, valueStr string) (UpdateOsVersionRequest_FieldPathValue, error) {
	fp, err := ParseUpdateOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateOsVersionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateOsVersionRequest_FieldPathValue), nil
}

func MustParseUpdateOsVersionRequest_FieldPathValue(pathStr, valueStr string) UpdateOsVersionRequest_FieldPathValue {
	fpv, err := ParseUpdateOsVersionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateOsVersionRequest_FieldTerminalPathValue struct {
	UpdateOsVersionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateOsVersionRequest_FieldPathValue = (*UpdateOsVersionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateOsVersionRequest' as interface{}
func (fpv *UpdateOsVersionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateOsVersionRequest_FieldTerminalPathValue) AsOsVersionValue() (*os_version.OsVersion, bool) {
	res, ok := fpv.value.(*os_version.OsVersion)
	return res, ok
}
func (fpv *UpdateOsVersionRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*os_version.OsVersion_FieldMask, bool) {
	res, ok := fpv.value.(*os_version.OsVersion_FieldMask)
	return res, ok
}
func (fpv *UpdateOsVersionRequest_FieldTerminalPathValue) AsCasValue() (*UpdateOsVersionRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateOsVersionRequest_CAS)
	return res, ok
}
func (fpv *UpdateOsVersionRequest_FieldTerminalPathValue) AsAllowMissingValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object UpdateOsVersionRequest
func (fpv *UpdateOsVersionRequest_FieldTerminalPathValue) SetTo(target **UpdateOsVersionRequest) {
	if *target == nil {
		*target = new(UpdateOsVersionRequest)
	}
	switch fpv.selector {
	case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
		(*target).OsVersion = fpv.value.(*os_version.OsVersion)
	case UpdateOsVersionRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*os_version.OsVersion_FieldMask)
	case UpdateOsVersionRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateOsVersionRequest_CAS)
	case UpdateOsVersionRequest_FieldPathSelectorAllowMissing:
		(*target).AllowMissing = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateOsVersionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOsVersionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateOsVersionRequest_FieldTerminalPathValue' with the value under path in 'UpdateOsVersionRequest'.
func (fpv *UpdateOsVersionRequest_FieldTerminalPathValue) CompareWith(source *UpdateOsVersionRequest) (int, bool) {
	switch fpv.selector {
	case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
		return 0, false
	case UpdateOsVersionRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateOsVersionRequest_FieldPathSelectorCas:
		return 0, false
	case UpdateOsVersionRequest_FieldPathSelectorAllowMissing:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAllowMissing()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateOsVersionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateOsVersionRequest))
}

type UpdateOsVersionRequest_FieldSubPathValue struct {
	UpdateOsVersionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateOsVersionRequest_FieldPathValue = (*UpdateOsVersionRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateOsVersionRequest_FieldSubPathValue) AsOsVersionPathValue() (os_version.OsVersion_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(os_version.OsVersion_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateOsVersionRequest_FieldSubPathValue) AsCasPathValue() (UpdateOsVersionRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateOsVersionRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateOsVersionRequest_FieldSubPathValue) SetTo(target **UpdateOsVersionRequest) {
	if *target == nil {
		*target = new(UpdateOsVersionRequest)
	}
	switch fpvs.Selector() {
	case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
		fpvs.subPathValue.(os_version.OsVersion_FieldPathValue).SetTo(&(*target).OsVersion)
	case UpdateOsVersionRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateOsVersionRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOsVersionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOsVersionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateOsVersionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateOsVersionRequest_FieldSubPathValue) CompareWith(source *UpdateOsVersionRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
		return fpvs.subPathValue.(os_version.OsVersion_FieldPathValue).CompareWith(source.GetOsVersion())
	case UpdateOsVersionRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateOsVersionRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOsVersionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateOsVersionRequest))
}

// UpdateOsVersionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateOsVersionRequest according to their type
// Present only for array (repeated) types.
type UpdateOsVersionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateOsVersionRequest_FieldPath
	ContainsValue(*UpdateOsVersionRequest) bool
}

// ParseUpdateOsVersionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateOsVersionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateOsVersionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateOsVersionRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateOsVersionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateOsVersionRequest_FieldTerminalPathArrayItemValue struct {
	UpdateOsVersionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateOsVersionRequest_FieldPathArrayItemValue = (*UpdateOsVersionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateOsVersionRequest as interface{}
func (fpaiv *UpdateOsVersionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateOsVersionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateOsVersionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateOsVersionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateOsVersionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateOsVersionRequest'
func (fpaiv *UpdateOsVersionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateOsVersionRequest) bool {
	slice := fpaiv.UpdateOsVersionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateOsVersionRequest_FieldSubPathArrayItemValue struct {
	UpdateOsVersionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateOsVersionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateOsVersionRequest_FieldSubPathArrayItemValue) AsOsVersionPathItemValue() (os_version.OsVersion_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(os_version.OsVersion_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateOsVersionRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateOsVersionRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateOsVersionRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateOsVersionRequest'
func (fpaivs *UpdateOsVersionRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateOsVersionRequest) bool {
	switch fpaivs.Selector() {
	case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
		return fpaivs.subPathItemValue.(os_version.OsVersion_FieldPathArrayItemValue).ContainsValue(source.GetOsVersion())
	case UpdateOsVersionRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateOsVersionRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest: %d", fpaivs.Selector()))
	}
}

// UpdateOsVersionRequest_FieldPathArrayOfValues allows storing slice of values for UpdateOsVersionRequest fields according to their type
type UpdateOsVersionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateOsVersionRequest_FieldPath
}

func ParseUpdateOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateOsVersionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateOsVersionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateOsVersionRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateOsVersionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateOsVersionRequest_FieldTerminalPathArrayOfValues struct {
	UpdateOsVersionRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateOsVersionRequest_FieldPathArrayOfValues = (*UpdateOsVersionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateOsVersionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateOsVersionRequest_FieldPathSelectorOsVersion:
		for _, v := range fpaov.values.([]*os_version.OsVersion) {
			values = append(values, v)
		}
	case UpdateOsVersionRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*os_version.OsVersion_FieldMask) {
			values = append(values, v)
		}
	case UpdateOsVersionRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateOsVersionRequest_CAS) {
			values = append(values, v)
		}
	case UpdateOsVersionRequest_FieldPathSelectorAllowMissing:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateOsVersionRequest_FieldTerminalPathArrayOfValues) AsOsVersionArrayOfValues() ([]*os_version.OsVersion, bool) {
	res, ok := fpaov.values.([]*os_version.OsVersion)
	return res, ok
}
func (fpaov *UpdateOsVersionRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*os_version.OsVersion_FieldMask, bool) {
	res, ok := fpaov.values.([]*os_version.OsVersion_FieldMask)
	return res, ok
}
func (fpaov *UpdateOsVersionRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateOsVersionRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateOsVersionRequest_CAS)
	return res, ok
}
func (fpaov *UpdateOsVersionRequest_FieldTerminalPathArrayOfValues) AsAllowMissingArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type UpdateOsVersionRequest_FieldSubPathArrayOfValues struct {
	UpdateOsVersionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateOsVersionRequest_FieldPathArrayOfValues = (*UpdateOsVersionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateOsVersionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateOsVersionRequest_FieldSubPathArrayOfValues) AsOsVersionPathArrayOfValues() (os_version.OsVersion_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(os_version.OsVersion_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateOsVersionRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateOsVersionRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateOsVersionRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateOsVersionRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateOsVersionRequestCAS_FieldPathSelector
	Get(source *UpdateOsVersionRequest_CAS) []interface{}
	GetSingle(source *UpdateOsVersionRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateOsVersionRequest_CAS)

	// Those methods build corresponding UpdateOsVersionRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateOsVersionRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateOsVersionRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateOsVersionRequestCAS_FieldPathArrayItemValue
}

type UpdateOsVersionRequestCAS_FieldPathSelector int32

const (
	UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState UpdateOsVersionRequestCAS_FieldPathSelector = 0
	UpdateOsVersionRequestCAS_FieldPathSelectorFieldMask        UpdateOsVersionRequestCAS_FieldPathSelector = 1
)

func (s UpdateOsVersionRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateOsVersionRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", s))
	}
}

func BuildUpdateOsVersionRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateOsVersionRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateOsVersionRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateOsVersionRequestCAS_FieldTerminalPath{selector: UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateOsVersionRequestCAS_FieldTerminalPath{selector: UpdateOsVersionRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := os_version.BuildOsVersion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateOsVersionRequestCAS_FieldSubPath{selector: UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateOsVersionRequest_CAS", fp)
}

func ParseUpdateOsVersionRequestCAS_FieldPath(rawField string) (UpdateOsVersionRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateOsVersionRequestCAS_FieldPath(fp)
}

func MustParseUpdateOsVersionRequestCAS_FieldPath(rawField string) UpdateOsVersionRequestCAS_FieldPath {
	fp, err := ParseUpdateOsVersionRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateOsVersionRequestCAS_FieldTerminalPath struct {
	selector UpdateOsVersionRequestCAS_FieldPathSelector
}

var _ UpdateOsVersionRequestCAS_FieldPath = (*UpdateOsVersionRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) Selector() UpdateOsVersionRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateOsVersionRequest_CAS
func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) Get(source *UpdateOsVersionRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateOsVersionRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateOsVersionRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateOsVersionRequest_CAS
func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) GetSingle(source *UpdateOsVersionRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateOsVersionRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateOsVersionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
		return (*os_version.OsVersion)(nil)
	case UpdateOsVersionRequestCAS_FieldPathSelectorFieldMask:
		return (*os_version.OsVersion_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) ClearValue(item *UpdateOsVersionRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateOsVersionRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateOsVersionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateOsVersionRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateOsVersionRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateOsVersionRequestCAS_FieldTerminalPathValue{UpdateOsVersionRequestCAS_FieldTerminalPath: *fp, value: value.(*os_version.OsVersion)}
	case UpdateOsVersionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateOsVersionRequestCAS_FieldTerminalPathValue{UpdateOsVersionRequestCAS_FieldTerminalPath: *fp, value: value.(*os_version.OsVersion_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateOsVersionRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateOsVersionRequestCAS_FieldTerminalPathArrayOfValues{UpdateOsVersionRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateOsVersionRequestCAS_FieldTerminalPathArrayOfValues{UpdateOsVersionRequestCAS_FieldTerminalPath: *fp, values: values.([]*os_version.OsVersion)}
	case UpdateOsVersionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateOsVersionRequestCAS_FieldTerminalPathArrayOfValues{UpdateOsVersionRequestCAS_FieldTerminalPath: *fp, values: values.([]*os_version.OsVersion_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateOsVersionRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateOsVersionRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateOsVersionRequestCAS_FieldSubPath struct {
	selector UpdateOsVersionRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateOsVersionRequestCAS_FieldPath = (*UpdateOsVersionRequestCAS_FieldSubPath)(nil)

func (fps *UpdateOsVersionRequestCAS_FieldSubPath) Selector() UpdateOsVersionRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateOsVersionRequestCAS_FieldSubPath) AsConditionalStateSubPath() (os_version.OsVersion_FieldPath, bool) {
	res, ok := fps.subPath.(os_version.OsVersion_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateOsVersionRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateOsVersionRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateOsVersionRequest_CAS
func (fps *UpdateOsVersionRequestCAS_FieldSubPath) Get(source *UpdateOsVersionRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateOsVersionRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateOsVersionRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateOsVersionRequest_CAS
func (fps *UpdateOsVersionRequestCAS_FieldSubPath) GetSingle(source *UpdateOsVersionRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateOsVersionRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateOsVersionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateOsVersionRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateOsVersionRequestCAS_FieldSubPath) ClearValue(item *UpdateOsVersionRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateOsVersionRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateOsVersionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateOsVersionRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateOsVersionRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateOsVersionRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateOsVersionRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateOsVersionRequestCAS_FieldPathValue {
	return &UpdateOsVersionRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateOsVersionRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateOsVersionRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateOsVersionRequestCAS_FieldPathArrayOfValues {
	return &UpdateOsVersionRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateOsVersionRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateOsVersionRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateOsVersionRequestCAS_FieldPathArrayItemValue {
	return &UpdateOsVersionRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateOsVersionRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateOsVersionRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateOsVersionRequestCAS_FieldPathValue interface {
	UpdateOsVersionRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateOsVersionRequest_CAS)
	CompareWith(*UpdateOsVersionRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateOsVersionRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateOsVersionRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateOsVersionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateOsVersionRequestCAS_FieldPathValue), nil
}

func MustParseUpdateOsVersionRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateOsVersionRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateOsVersionRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateOsVersionRequestCAS_FieldTerminalPathValue struct {
	UpdateOsVersionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateOsVersionRequestCAS_FieldPathValue = (*UpdateOsVersionRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateOsVersionRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateOsVersionRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*os_version.OsVersion, bool) {
	res, ok := fpv.value.(*os_version.OsVersion)
	return res, ok
}
func (fpv *UpdateOsVersionRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*os_version.OsVersion_FieldMask, bool) {
	res, ok := fpv.value.(*os_version.OsVersion_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateOsVersionRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateOsVersionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateOsVersionRequest_CAS)
	}
	switch fpv.selector {
	case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*os_version.OsVersion)
	case UpdateOsVersionRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*os_version.OsVersion_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateOsVersionRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOsVersionRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateOsVersionRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateOsVersionRequest_CAS'.
func (fpv *UpdateOsVersionRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateOsVersionRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateOsVersionRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateOsVersionRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateOsVersionRequest_CAS))
}

type UpdateOsVersionRequestCAS_FieldSubPathValue struct {
	UpdateOsVersionRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateOsVersionRequestCAS_FieldPathValue = (*UpdateOsVersionRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateOsVersionRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (os_version.OsVersion_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(os_version.OsVersion_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateOsVersionRequestCAS_FieldSubPathValue) SetTo(target **UpdateOsVersionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateOsVersionRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(os_version.OsVersion_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOsVersionRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateOsVersionRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateOsVersionRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateOsVersionRequestCAS_FieldSubPathValue) CompareWith(source *UpdateOsVersionRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(os_version.OsVersion_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateOsVersionRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateOsVersionRequest_CAS))
}

// UpdateOsVersionRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateOsVersionRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateOsVersionRequestCAS_FieldPath
	ContainsValue(*UpdateOsVersionRequest_CAS) bool
}

// ParseUpdateOsVersionRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateOsVersionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateOsVersionRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateOsVersionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateOsVersionRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateOsVersionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateOsVersionRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateOsVersionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateOsVersionRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateOsVersionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateOsVersionRequestCAS_FieldPathArrayItemValue = (*UpdateOsVersionRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateOsVersionRequest_CAS as interface{}
func (fpaiv *UpdateOsVersionRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateOsVersionRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateOsVersionRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateOsVersionRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateOsVersionRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateOsVersionRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateOsVersionRequest_CAS) bool {
	slice := fpaiv.UpdateOsVersionRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateOsVersionRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateOsVersionRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateOsVersionRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateOsVersionRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (os_version.OsVersion_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(os_version.OsVersion_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateOsVersionRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateOsVersionRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(os_version.OsVersion_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateOsVersionRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateOsVersionRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateOsVersionRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateOsVersionRequestCAS_FieldPath
}

func ParseUpdateOsVersionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateOsVersionRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateOsVersionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateOsVersionRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateOsVersionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateOsVersionRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateOsVersionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateOsVersionRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateOsVersionRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateOsVersionRequestCAS_FieldPathArrayOfValues = (*UpdateOsVersionRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateOsVersionRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*os_version.OsVersion) {
			values = append(values, v)
		}
	case UpdateOsVersionRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*os_version.OsVersion_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateOsVersionRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*os_version.OsVersion, bool) {
	res, ok := fpaov.values.([]*os_version.OsVersion)
	return res, ok
}
func (fpaov *UpdateOsVersionRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*os_version.OsVersion_FieldMask, bool) {
	res, ok := fpaov.values.([]*os_version.OsVersion_FieldMask)
	return res, ok
}

type UpdateOsVersionRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateOsVersionRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateOsVersionRequestCAS_FieldPathArrayOfValues = (*UpdateOsVersionRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateOsVersionRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateOsVersionRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (os_version.OsVersion_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(os_version.OsVersion_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteOsVersionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteOsVersionRequest_FieldPathSelector
	Get(source *DeleteOsVersionRequest) []interface{}
	GetSingle(source *DeleteOsVersionRequest) (interface{}, bool)
	ClearValue(item *DeleteOsVersionRequest)

	// Those methods build corresponding DeleteOsVersionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteOsVersionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteOsVersionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteOsVersionRequest_FieldPathArrayItemValue
}

type DeleteOsVersionRequest_FieldPathSelector int32

const (
	DeleteOsVersionRequest_FieldPathSelectorName DeleteOsVersionRequest_FieldPathSelector = 0
)

func (s DeleteOsVersionRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteOsVersionRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsVersionRequest: %d", s))
	}
}

func BuildDeleteOsVersionRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteOsVersionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteOsVersionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteOsVersionRequest_FieldTerminalPath{selector: DeleteOsVersionRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteOsVersionRequest", fp)
}

func ParseDeleteOsVersionRequest_FieldPath(rawField string) (DeleteOsVersionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteOsVersionRequest_FieldPath(fp)
}

func MustParseDeleteOsVersionRequest_FieldPath(rawField string) DeleteOsVersionRequest_FieldPath {
	fp, err := ParseDeleteOsVersionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteOsVersionRequest_FieldTerminalPath struct {
	selector DeleteOsVersionRequest_FieldPathSelector
}

var _ DeleteOsVersionRequest_FieldPath = (*DeleteOsVersionRequest_FieldTerminalPath)(nil)

func (fp *DeleteOsVersionRequest_FieldTerminalPath) Selector() DeleteOsVersionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteOsVersionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteOsVersionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteOsVersionRequest
func (fp *DeleteOsVersionRequest_FieldTerminalPath) Get(source *DeleteOsVersionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteOsVersionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteOsVersionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteOsVersionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteOsVersionRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteOsVersionRequest
func (fp *DeleteOsVersionRequest_FieldTerminalPath) GetSingle(source *DeleteOsVersionRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteOsVersionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsVersionRequest: %d", fp.selector))
	}
}

func (fp *DeleteOsVersionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteOsVersionRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteOsVersionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteOsVersionRequest_FieldPathSelectorName:
		return (*os_version.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsVersionRequest: %d", fp.selector))
	}
}

func (fp *DeleteOsVersionRequest_FieldTerminalPath) ClearValue(item *DeleteOsVersionRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteOsVersionRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteOsVersionRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteOsVersionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteOsVersionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteOsVersionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteOsVersionRequest_FieldPathSelectorName
}

func (fp *DeleteOsVersionRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteOsVersionRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteOsVersionRequest_FieldPathValue {
	switch fp.selector {
	case DeleteOsVersionRequest_FieldPathSelectorName:
		return &DeleteOsVersionRequest_FieldTerminalPathValue{DeleteOsVersionRequest_FieldTerminalPath: *fp, value: value.(*os_version.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsVersionRequest: %d", fp.selector))
	}
}

func (fp *DeleteOsVersionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteOsVersionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteOsVersionRequest_FieldPathArrayOfValues {
	fpaov := &DeleteOsVersionRequest_FieldTerminalPathArrayOfValues{DeleteOsVersionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteOsVersionRequest_FieldPathSelectorName:
		return &DeleteOsVersionRequest_FieldTerminalPathArrayOfValues{DeleteOsVersionRequest_FieldTerminalPath: *fp, values: values.([]*os_version.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsVersionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteOsVersionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteOsVersionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteOsVersionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsVersionRequest: %d", fp.selector))
	}
}

func (fp *DeleteOsVersionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteOsVersionRequest_FieldPathValue allows storing values for DeleteOsVersionRequest fields according to their type
type DeleteOsVersionRequest_FieldPathValue interface {
	DeleteOsVersionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteOsVersionRequest)
	CompareWith(*DeleteOsVersionRequest) (cmp int, comparable bool)
}

func ParseDeleteOsVersionRequest_FieldPathValue(pathStr, valueStr string) (DeleteOsVersionRequest_FieldPathValue, error) {
	fp, err := ParseDeleteOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteOsVersionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteOsVersionRequest_FieldPathValue), nil
}

func MustParseDeleteOsVersionRequest_FieldPathValue(pathStr, valueStr string) DeleteOsVersionRequest_FieldPathValue {
	fpv, err := ParseDeleteOsVersionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteOsVersionRequest_FieldTerminalPathValue struct {
	DeleteOsVersionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteOsVersionRequest_FieldPathValue = (*DeleteOsVersionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteOsVersionRequest' as interface{}
func (fpv *DeleteOsVersionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteOsVersionRequest_FieldTerminalPathValue) AsNameValue() (*os_version.Reference, bool) {
	res, ok := fpv.value.(*os_version.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteOsVersionRequest
func (fpv *DeleteOsVersionRequest_FieldTerminalPathValue) SetTo(target **DeleteOsVersionRequest) {
	if *target == nil {
		*target = new(DeleteOsVersionRequest)
	}
	switch fpv.selector {
	case DeleteOsVersionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*os_version.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsVersionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteOsVersionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteOsVersionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteOsVersionRequest_FieldTerminalPathValue' with the value under path in 'DeleteOsVersionRequest'.
func (fpv *DeleteOsVersionRequest_FieldTerminalPathValue) CompareWith(source *DeleteOsVersionRequest) (int, bool) {
	switch fpv.selector {
	case DeleteOsVersionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*os_version.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteOsVersionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteOsVersionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteOsVersionRequest))
}

// DeleteOsVersionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteOsVersionRequest according to their type
// Present only for array (repeated) types.
type DeleteOsVersionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteOsVersionRequest_FieldPath
	ContainsValue(*DeleteOsVersionRequest) bool
}

// ParseDeleteOsVersionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteOsVersionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteOsVersionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteOsVersionRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteOsVersionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteOsVersionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteOsVersionRequest_FieldTerminalPathArrayItemValue struct {
	DeleteOsVersionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteOsVersionRequest_FieldPathArrayItemValue = (*DeleteOsVersionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteOsVersionRequest as interface{}
func (fpaiv *DeleteOsVersionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteOsVersionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteOsVersionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteOsVersionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteOsVersionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteOsVersionRequest'
func (fpaiv *DeleteOsVersionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteOsVersionRequest) bool {
	slice := fpaiv.DeleteOsVersionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteOsVersionRequest_FieldPathArrayOfValues allows storing slice of values for DeleteOsVersionRequest fields according to their type
type DeleteOsVersionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteOsVersionRequest_FieldPath
}

func ParseDeleteOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteOsVersionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteOsVersionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteOsVersionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteOsVersionRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteOsVersionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteOsVersionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteOsVersionRequest_FieldTerminalPathArrayOfValues struct {
	DeleteOsVersionRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteOsVersionRequest_FieldPathArrayOfValues = (*DeleteOsVersionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteOsVersionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteOsVersionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*os_version.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteOsVersionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*os_version.Reference, bool) {
	res, ok := fpaov.values.([]*os_version.Reference)
	return res, ok
}
