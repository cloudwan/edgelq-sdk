// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/os_version_service.proto
// DO NOT EDIT!!!

package os_version_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	os_version "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/os_version"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &os_version.OsVersion{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetOsVersionRequest) GotenObjectExt() {}

func (o *GetOsVersionRequest) MakeFullFieldMask() *GetOsVersionRequest_FieldMask {
	return FullGetOsVersionRequest_FieldMask()
}

func (o *GetOsVersionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetOsVersionRequest_FieldMask()
}

func (o *GetOsVersionRequest) MakeDiffFieldMask(other *GetOsVersionRequest) *GetOsVersionRequest_FieldMask {
	if o == nil && other == nil {
		return &GetOsVersionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetOsVersionRequest_FieldMask()
	}

	res := &GetOsVersionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetOsVersionRequest_FieldTerminalPath{selector: GetOsVersionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetOsVersionRequest_FieldTerminalPath{selector: GetOsVersionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetOsVersionRequest_FieldTerminalPath{selector: GetOsVersionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetOsVersionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetOsVersionRequest))
}

func (o *GetOsVersionRequest) Clone() *GetOsVersionRequest {
	if o == nil {
		return nil
	}
	result := &GetOsVersionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &os_version.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*os_version.OsVersion_FieldMask)
	result.View = o.View
	return result
}

func (o *GetOsVersionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetOsVersionRequest) Merge(source *GetOsVersionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &os_version.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(os_version.OsVersion_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetOsVersionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetOsVersionRequest))
}

func (o *BatchGetOsVersionsRequest) GotenObjectExt() {}

func (o *BatchGetOsVersionsRequest) MakeFullFieldMask() *BatchGetOsVersionsRequest_FieldMask {
	return FullBatchGetOsVersionsRequest_FieldMask()
}

func (o *BatchGetOsVersionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetOsVersionsRequest_FieldMask()
}

func (o *BatchGetOsVersionsRequest) MakeDiffFieldMask(other *BatchGetOsVersionsRequest) *BatchGetOsVersionsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetOsVersionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetOsVersionsRequest_FieldMask()
	}

	res := &BatchGetOsVersionsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetOsVersionsRequest_FieldTerminalPath{selector: BatchGetOsVersionsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetOsVersionsRequest_FieldTerminalPath{selector: BatchGetOsVersionsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetOsVersionsRequest_FieldTerminalPath{selector: BatchGetOsVersionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetOsVersionsRequest_FieldTerminalPath{selector: BatchGetOsVersionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetOsVersionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetOsVersionsRequest))
}

func (o *BatchGetOsVersionsRequest) Clone() *BatchGetOsVersionsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetOsVersionsRequest{}
	result.Names = make([]*os_version.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &os_version.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*os_version.OsVersion_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetOsVersionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetOsVersionsRequest) Merge(source *BatchGetOsVersionsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *os_version.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &os_version.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(os_version.OsVersion_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetOsVersionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetOsVersionsRequest))
}

func (o *BatchGetOsVersionsResponse) GotenObjectExt() {}

func (o *BatchGetOsVersionsResponse) MakeFullFieldMask() *BatchGetOsVersionsResponse_FieldMask {
	return FullBatchGetOsVersionsResponse_FieldMask()
}

func (o *BatchGetOsVersionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetOsVersionsResponse_FieldMask()
}

func (o *BatchGetOsVersionsResponse) MakeDiffFieldMask(other *BatchGetOsVersionsResponse) *BatchGetOsVersionsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetOsVersionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetOsVersionsResponse_FieldMask()
	}

	res := &BatchGetOsVersionsResponse_FieldMask{}

	if len(o.GetOsVersions()) == len(other.GetOsVersions()) {
		for i, lValue := range o.GetOsVersions() {
			rValue := other.GetOsVersions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetOsVersionsResponse_FieldTerminalPath{selector: BatchGetOsVersionsResponse_FieldPathSelectorOsVersions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetOsVersionsResponse_FieldTerminalPath{selector: BatchGetOsVersionsResponse_FieldPathSelectorOsVersions})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetOsVersionsResponse_FieldTerminalPath{selector: BatchGetOsVersionsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetOsVersionsResponse_FieldTerminalPath{selector: BatchGetOsVersionsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetOsVersionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetOsVersionsResponse))
}

func (o *BatchGetOsVersionsResponse) Clone() *BatchGetOsVersionsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetOsVersionsResponse{}
	result.OsVersions = make([]*os_version.OsVersion, len(o.OsVersions))
	for i, sourceValue := range o.OsVersions {
		result.OsVersions[i] = sourceValue.Clone()
	}
	result.Missing = make([]*os_version.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &os_version.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetOsVersionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetOsVersionsResponse) Merge(source *BatchGetOsVersionsResponse) {
	for _, sourceValue := range source.GetOsVersions() {
		exists := false
		for _, currentValue := range o.OsVersions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *os_version.OsVersion
			if sourceValue != nil {
				newDstElement = new(os_version.OsVersion)
				newDstElement.Merge(sourceValue)
			}
			o.OsVersions = append(o.OsVersions, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *os_version.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &os_version.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetOsVersionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetOsVersionsResponse))
}

func (o *ListOsVersionsRequest) GotenObjectExt() {}

func (o *ListOsVersionsRequest) MakeFullFieldMask() *ListOsVersionsRequest_FieldMask {
	return FullListOsVersionsRequest_FieldMask()
}

func (o *ListOsVersionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListOsVersionsRequest_FieldMask()
}

func (o *ListOsVersionsRequest) MakeDiffFieldMask(other *ListOsVersionsRequest) *ListOsVersionsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListOsVersionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListOsVersionsRequest_FieldMask()
	}

	res := &ListOsVersionsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListOsVersionsRequest_FieldTerminalPath{selector: ListOsVersionsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListOsVersionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListOsVersionsRequest))
}

func (o *ListOsVersionsRequest) Clone() *ListOsVersionsRequest {
	if o == nil {
		return nil
	}
	result := &ListOsVersionsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &os_version.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &os_version.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &os_version.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &os_version.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*os_version.OsVersion_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListOsVersionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListOsVersionsRequest) Merge(source *ListOsVersionsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &os_version.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &os_version.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &os_version.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &os_version.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(os_version.OsVersion_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListOsVersionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListOsVersionsRequest))
}

func (o *ListOsVersionsResponse) GotenObjectExt() {}

func (o *ListOsVersionsResponse) MakeFullFieldMask() *ListOsVersionsResponse_FieldMask {
	return FullListOsVersionsResponse_FieldMask()
}

func (o *ListOsVersionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListOsVersionsResponse_FieldMask()
}

func (o *ListOsVersionsResponse) MakeDiffFieldMask(other *ListOsVersionsResponse) *ListOsVersionsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListOsVersionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListOsVersionsResponse_FieldMask()
	}

	res := &ListOsVersionsResponse_FieldMask{}

	if len(o.GetOsVersions()) == len(other.GetOsVersions()) {
		for i, lValue := range o.GetOsVersions() {
			rValue := other.GetOsVersions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListOsVersionsResponse_FieldTerminalPath{selector: ListOsVersionsResponse_FieldPathSelectorOsVersions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListOsVersionsResponse_FieldTerminalPath{selector: ListOsVersionsResponse_FieldPathSelectorOsVersions})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListOsVersionsResponse_FieldTerminalPath{selector: ListOsVersionsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListOsVersionsResponse_FieldTerminalPath{selector: ListOsVersionsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListOsVersionsResponse_FieldTerminalPath{selector: ListOsVersionsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListOsVersionsResponse_FieldTerminalPath{selector: ListOsVersionsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListOsVersionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListOsVersionsResponse))
}

func (o *ListOsVersionsResponse) Clone() *ListOsVersionsResponse {
	if o == nil {
		return nil
	}
	result := &ListOsVersionsResponse{}
	result.OsVersions = make([]*os_version.OsVersion, len(o.OsVersions))
	for i, sourceValue := range o.OsVersions {
		result.OsVersions[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &os_version.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &os_version.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListOsVersionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListOsVersionsResponse) Merge(source *ListOsVersionsResponse) {
	for _, sourceValue := range source.GetOsVersions() {
		exists := false
		for _, currentValue := range o.OsVersions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *os_version.OsVersion
			if sourceValue != nil {
				newDstElement = new(os_version.OsVersion)
				newDstElement.Merge(sourceValue)
			}
			o.OsVersions = append(o.OsVersions, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &os_version.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &os_version.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListOsVersionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListOsVersionsResponse))
}

func (o *WatchOsVersionRequest) GotenObjectExt() {}

func (o *WatchOsVersionRequest) MakeFullFieldMask() *WatchOsVersionRequest_FieldMask {
	return FullWatchOsVersionRequest_FieldMask()
}

func (o *WatchOsVersionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOsVersionRequest_FieldMask()
}

func (o *WatchOsVersionRequest) MakeDiffFieldMask(other *WatchOsVersionRequest) *WatchOsVersionRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchOsVersionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOsVersionRequest_FieldMask()
	}

	res := &WatchOsVersionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchOsVersionRequest_FieldTerminalPath{selector: WatchOsVersionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchOsVersionRequest_FieldTerminalPath{selector: WatchOsVersionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchOsVersionRequest_FieldTerminalPath{selector: WatchOsVersionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchOsVersionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOsVersionRequest))
}

func (o *WatchOsVersionRequest) Clone() *WatchOsVersionRequest {
	if o == nil {
		return nil
	}
	result := &WatchOsVersionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &os_version.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*os_version.OsVersion_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchOsVersionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOsVersionRequest) Merge(source *WatchOsVersionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &os_version.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(os_version.OsVersion_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchOsVersionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOsVersionRequest))
}

func (o *WatchOsVersionResponse) GotenObjectExt() {}

func (o *WatchOsVersionResponse) MakeFullFieldMask() *WatchOsVersionResponse_FieldMask {
	return FullWatchOsVersionResponse_FieldMask()
}

func (o *WatchOsVersionResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOsVersionResponse_FieldMask()
}

func (o *WatchOsVersionResponse) MakeDiffFieldMask(other *WatchOsVersionResponse) *WatchOsVersionResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchOsVersionResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOsVersionResponse_FieldMask()
	}

	res := &WatchOsVersionResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchOsVersionResponse_FieldTerminalPath{selector: WatchOsVersionResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchOsVersionResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOsVersionResponse))
}

func (o *WatchOsVersionResponse) Clone() *WatchOsVersionResponse {
	if o == nil {
		return nil
	}
	result := &WatchOsVersionResponse{}
	result.Change = proto.Clone(o.Change).(*os_version.OsVersionChange)
	return result
}

func (o *WatchOsVersionResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOsVersionResponse) Merge(source *WatchOsVersionResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(os_version.OsVersionChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchOsVersionResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOsVersionResponse))
}

func (o *WatchOsVersionsRequest) GotenObjectExt() {}

func (o *WatchOsVersionsRequest) MakeFullFieldMask() *WatchOsVersionsRequest_FieldMask {
	return FullWatchOsVersionsRequest_FieldMask()
}

func (o *WatchOsVersionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOsVersionsRequest_FieldMask()
}

func (o *WatchOsVersionsRequest) MakeDiffFieldMask(other *WatchOsVersionsRequest) *WatchOsVersionsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchOsVersionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOsVersionsRequest_FieldMask()
	}

	res := &WatchOsVersionsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchOsVersionsRequest_FieldTerminalPath{selector: WatchOsVersionsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchOsVersionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOsVersionsRequest))
}

func (o *WatchOsVersionsRequest) Clone() *WatchOsVersionsRequest {
	if o == nil {
		return nil
	}
	result := &WatchOsVersionsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &os_version.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &os_version.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &os_version.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &os_version.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*os_version.OsVersion_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchOsVersionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOsVersionsRequest) Merge(source *WatchOsVersionsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &os_version.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &os_version.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &os_version.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &os_version.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(os_version.OsVersion_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchOsVersionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOsVersionsRequest))
}

func (o *WatchOsVersionsResponse) GotenObjectExt() {}

func (o *WatchOsVersionsResponse) MakeFullFieldMask() *WatchOsVersionsResponse_FieldMask {
	return FullWatchOsVersionsResponse_FieldMask()
}

func (o *WatchOsVersionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOsVersionsResponse_FieldMask()
}

func (o *WatchOsVersionsResponse) MakeDiffFieldMask(other *WatchOsVersionsResponse) *WatchOsVersionsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchOsVersionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOsVersionsResponse_FieldMask()
	}

	res := &WatchOsVersionsResponse_FieldMask{}

	if len(o.GetOsVersionChanges()) == len(other.GetOsVersionChanges()) {
		for i, lValue := range o.GetOsVersionChanges() {
			rValue := other.GetOsVersionChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorOsVersionChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchOsVersionsResponse_FieldSubPath{selector: WatchOsVersionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchOsVersionsResponse_FieldTerminalPath{selector: WatchOsVersionsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchOsVersionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOsVersionsResponse))
}

func (o *WatchOsVersionsResponse) Clone() *WatchOsVersionsResponse {
	if o == nil {
		return nil
	}
	result := &WatchOsVersionsResponse{}
	result.OsVersionChanges = make([]*os_version.OsVersionChange, len(o.OsVersionChanges))
	for i, sourceValue := range o.OsVersionChanges {
		result.OsVersionChanges[i] = proto.Clone(sourceValue).(*os_version.OsVersionChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchOsVersionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOsVersionsResponse) Merge(source *WatchOsVersionsResponse) {
	for _, sourceValue := range source.GetOsVersionChanges() {
		exists := false
		for _, currentValue := range o.OsVersionChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *os_version.OsVersionChange
			if sourceValue != nil {
				newDstElement = new(os_version.OsVersionChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.OsVersionChanges = append(o.OsVersionChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchOsVersionsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchOsVersionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOsVersionsResponse))
}

func (o *WatchOsVersionsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchOsVersionsResponse_PageTokenChange) MakeFullFieldMask() *WatchOsVersionsResponse_PageTokenChange_FieldMask {
	return FullWatchOsVersionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchOsVersionsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchOsVersionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchOsVersionsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchOsVersionsResponse_PageTokenChange) *WatchOsVersionsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchOsVersionsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchOsVersionsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchOsVersionsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchOsVersionsResponsePageTokenChange_FieldTerminalPath{selector: WatchOsVersionsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchOsVersionsResponsePageTokenChange_FieldTerminalPath{selector: WatchOsVersionsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchOsVersionsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchOsVersionsResponse_PageTokenChange))
}

func (o *WatchOsVersionsResponse_PageTokenChange) Clone() *WatchOsVersionsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchOsVersionsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &os_version.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &os_version.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchOsVersionsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchOsVersionsResponse_PageTokenChange) Merge(source *WatchOsVersionsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &os_version.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &os_version.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchOsVersionsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchOsVersionsResponse_PageTokenChange))
}

func (o *CreateOsVersionRequest) GotenObjectExt() {}

func (o *CreateOsVersionRequest) MakeFullFieldMask() *CreateOsVersionRequest_FieldMask {
	return FullCreateOsVersionRequest_FieldMask()
}

func (o *CreateOsVersionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateOsVersionRequest_FieldMask()
}

func (o *CreateOsVersionRequest) MakeDiffFieldMask(other *CreateOsVersionRequest) *CreateOsVersionRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateOsVersionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateOsVersionRequest_FieldMask()
	}

	res := &CreateOsVersionRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateOsVersionRequest_FieldTerminalPath{selector: CreateOsVersionRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetOsVersion().MakeDiffFieldMask(other.GetOsVersion())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateOsVersionRequest_FieldTerminalPath{selector: CreateOsVersionRequest_FieldPathSelectorOsVersion})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateOsVersionRequest_FieldSubPath{selector: CreateOsVersionRequest_FieldPathSelectorOsVersion, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateOsVersionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateOsVersionRequest))
}

func (o *CreateOsVersionRequest) Clone() *CreateOsVersionRequest {
	if o == nil {
		return nil
	}
	result := &CreateOsVersionRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &os_version.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.OsVersion = o.OsVersion.Clone()
	return result
}

func (o *CreateOsVersionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateOsVersionRequest) Merge(source *CreateOsVersionRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &os_version.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetOsVersion() != nil {
		if o.OsVersion == nil {
			o.OsVersion = new(os_version.OsVersion)
		}
		o.OsVersion.Merge(source.GetOsVersion())
	}
}

func (o *CreateOsVersionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateOsVersionRequest))
}

func (o *UpdateOsVersionRequest) GotenObjectExt() {}

func (o *UpdateOsVersionRequest) MakeFullFieldMask() *UpdateOsVersionRequest_FieldMask {
	return FullUpdateOsVersionRequest_FieldMask()
}

func (o *UpdateOsVersionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateOsVersionRequest_FieldMask()
}

func (o *UpdateOsVersionRequest) MakeDiffFieldMask(other *UpdateOsVersionRequest) *UpdateOsVersionRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateOsVersionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateOsVersionRequest_FieldMask()
	}

	res := &UpdateOsVersionRequest_FieldMask{}
	{
		subMask := o.GetOsVersion().MakeDiffFieldMask(other.GetOsVersion())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateOsVersionRequest_FieldTerminalPath{selector: UpdateOsVersionRequest_FieldPathSelectorOsVersion})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateOsVersionRequest_FieldSubPath{selector: UpdateOsVersionRequest_FieldPathSelectorOsVersion, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateOsVersionRequest_FieldTerminalPath{selector: UpdateOsVersionRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateOsVersionRequest_FieldTerminalPath{selector: UpdateOsVersionRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateOsVersionRequest_FieldSubPath{selector: UpdateOsVersionRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateOsVersionRequest_FieldTerminalPath{selector: UpdateOsVersionRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateOsVersionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateOsVersionRequest))
}

func (o *UpdateOsVersionRequest) Clone() *UpdateOsVersionRequest {
	if o == nil {
		return nil
	}
	result := &UpdateOsVersionRequest{}
	result.OsVersion = o.OsVersion.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*os_version.OsVersion_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateOsVersionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateOsVersionRequest) Merge(source *UpdateOsVersionRequest) {
	if source.GetOsVersion() != nil {
		if o.OsVersion == nil {
			o.OsVersion = new(os_version.OsVersion)
		}
		o.OsVersion.Merge(source.GetOsVersion())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(os_version.OsVersion_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateOsVersionRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateOsVersionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateOsVersionRequest))
}

func (o *UpdateOsVersionRequest_CAS) GotenObjectExt() {}

func (o *UpdateOsVersionRequest_CAS) MakeFullFieldMask() *UpdateOsVersionRequest_CAS_FieldMask {
	return FullUpdateOsVersionRequest_CAS_FieldMask()
}

func (o *UpdateOsVersionRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateOsVersionRequest_CAS_FieldMask()
}

func (o *UpdateOsVersionRequest_CAS) MakeDiffFieldMask(other *UpdateOsVersionRequest_CAS) *UpdateOsVersionRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateOsVersionRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateOsVersionRequest_CAS_FieldMask()
	}

	res := &UpdateOsVersionRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateOsVersionRequestCAS_FieldTerminalPath{selector: UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateOsVersionRequestCAS_FieldSubPath{selector: UpdateOsVersionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateOsVersionRequestCAS_FieldTerminalPath{selector: UpdateOsVersionRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateOsVersionRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateOsVersionRequest_CAS))
}

func (o *UpdateOsVersionRequest_CAS) Clone() *UpdateOsVersionRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateOsVersionRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*os_version.OsVersion_FieldMask)
	return result
}

func (o *UpdateOsVersionRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateOsVersionRequest_CAS) Merge(source *UpdateOsVersionRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(os_version.OsVersion)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(os_version.OsVersion_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateOsVersionRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateOsVersionRequest_CAS))
}

func (o *DeleteOsVersionRequest) GotenObjectExt() {}

func (o *DeleteOsVersionRequest) MakeFullFieldMask() *DeleteOsVersionRequest_FieldMask {
	return FullDeleteOsVersionRequest_FieldMask()
}

func (o *DeleteOsVersionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteOsVersionRequest_FieldMask()
}

func (o *DeleteOsVersionRequest) MakeDiffFieldMask(other *DeleteOsVersionRequest) *DeleteOsVersionRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteOsVersionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteOsVersionRequest_FieldMask()
	}

	res := &DeleteOsVersionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteOsVersionRequest_FieldTerminalPath{selector: DeleteOsVersionRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteOsVersionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteOsVersionRequest))
}

func (o *DeleteOsVersionRequest) Clone() *DeleteOsVersionRequest {
	if o == nil {
		return nil
	}
	result := &DeleteOsVersionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &os_version.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteOsVersionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteOsVersionRequest) Merge(source *DeleteOsVersionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &os_version.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteOsVersionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteOsVersionRequest))
}
