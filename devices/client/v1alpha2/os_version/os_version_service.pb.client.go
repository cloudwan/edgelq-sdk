// Code generated by protoc-gen-goten-client
// API: OsVersionService
// DO NOT EDIT!!!

package os_version_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	os_version "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/os_version"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &os_version.OsVersion{}
	_ = &empty.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OsVersionServiceClient is the client API for OsVersionService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OsVersionServiceClient interface {
	GetOsVersion(ctx context.Context, in *GetOsVersionRequest, opts ...grpc.CallOption) (*os_version.OsVersion, error)
	BatchGetOsVersions(ctx context.Context, in *BatchGetOsVersionsRequest, opts ...grpc.CallOption) (*BatchGetOsVersionsResponse, error)
	ListOsVersions(ctx context.Context, in *ListOsVersionsRequest, opts ...grpc.CallOption) (*ListOsVersionsResponse, error)
	WatchOsVersion(ctx context.Context, in *WatchOsVersionRequest, opts ...grpc.CallOption) (WatchOsVersionClientStream, error)
	WatchOsVersions(ctx context.Context, in *WatchOsVersionsRequest, opts ...grpc.CallOption) (WatchOsVersionsClientStream, error)
	CreateOsVersion(ctx context.Context, in *CreateOsVersionRequest, opts ...grpc.CallOption) (*os_version.OsVersion, error)
	UpdateOsVersion(ctx context.Context, in *UpdateOsVersionRequest, opts ...grpc.CallOption) (*os_version.OsVersion, error)
	DeleteOsVersion(ctx context.Context, in *DeleteOsVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewOsVersionServiceClient(cc grpc.ClientConnInterface) OsVersionServiceClient {
	return &client{cc}
}

func (c *client) GetOsVersion(ctx context.Context, in *GetOsVersionRequest, opts ...grpc.CallOption) (*os_version.OsVersion, error) {
	out := new(os_version.OsVersion)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1alpha2.OsVersionService/GetOsVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetOsVersions(ctx context.Context, in *BatchGetOsVersionsRequest, opts ...grpc.CallOption) (*BatchGetOsVersionsResponse, error) {
	out := new(BatchGetOsVersionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1alpha2.OsVersionService/BatchGetOsVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListOsVersions(ctx context.Context, in *ListOsVersionsRequest, opts ...grpc.CallOption) (*ListOsVersionsResponse, error) {
	out := new(ListOsVersionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1alpha2.OsVersionService/ListOsVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchOsVersion(ctx context.Context, in *WatchOsVersionRequest, opts ...grpc.CallOption) (WatchOsVersionClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchOsVersion",
			ServerStreams: true,
		},
		"/ntt.devices.v1alpha2.OsVersionService/WatchOsVersion", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchOsVersionWatchOsVersionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchOsVersionClientStream interface {
	Recv() (*WatchOsVersionResponse, error)
	grpc.ClientStream
}

type watchOsVersionWatchOsVersionClient struct {
	grpc.ClientStream
}

func (x *watchOsVersionWatchOsVersionClient) Recv() (*WatchOsVersionResponse, error) {
	m := new(WatchOsVersionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchOsVersions(ctx context.Context, in *WatchOsVersionsRequest, opts ...grpc.CallOption) (WatchOsVersionsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchOsVersions",
			ServerStreams: true,
		},
		"/ntt.devices.v1alpha2.OsVersionService/WatchOsVersions", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchOsVersionsWatchOsVersionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchOsVersionsClientStream interface {
	Recv() (*WatchOsVersionsResponse, error)
	grpc.ClientStream
}

type watchOsVersionsWatchOsVersionsClient struct {
	grpc.ClientStream
}

func (x *watchOsVersionsWatchOsVersionsClient) Recv() (*WatchOsVersionsResponse, error) {
	m := new(WatchOsVersionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateOsVersion(ctx context.Context, in *CreateOsVersionRequest, opts ...grpc.CallOption) (*os_version.OsVersion, error) {
	out := new(os_version.OsVersion)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1alpha2.OsVersionService/CreateOsVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateOsVersion(ctx context.Context, in *UpdateOsVersionRequest, opts ...grpc.CallOption) (*os_version.OsVersion, error) {
	out := new(os_version.OsVersion)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1alpha2.OsVersionService/UpdateOsVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteOsVersion(ctx context.Context, in *DeleteOsVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1alpha2.OsVersionService/DeleteOsVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
