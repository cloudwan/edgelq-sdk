// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/public_custom.proto
// DO NOT EDIT!!!

package public_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPublicDevicesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPublicDevicesRequest_FieldPathSelector
	Get(source *ListPublicDevicesRequest) []interface{}
	GetSingle(source *ListPublicDevicesRequest) (interface{}, bool)
	ClearValue(item *ListPublicDevicesRequest)

	// Those methods build corresponding ListPublicDevicesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPublicDevicesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPublicDevicesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPublicDevicesRequest_FieldPathArrayItemValue
}

type ListPublicDevicesRequest_FieldPathSelector int32

const (
	ListPublicDevicesRequest_FieldPathSelectorParent    ListPublicDevicesRequest_FieldPathSelector = 0
	ListPublicDevicesRequest_FieldPathSelectorPageSize  ListPublicDevicesRequest_FieldPathSelector = 1
	ListPublicDevicesRequest_FieldPathSelectorPageToken ListPublicDevicesRequest_FieldPathSelector = 2
	ListPublicDevicesRequest_FieldPathSelectorOrderBy   ListPublicDevicesRequest_FieldPathSelector = 3
	ListPublicDevicesRequest_FieldPathSelectorFilter    ListPublicDevicesRequest_FieldPathSelector = 4
	ListPublicDevicesRequest_FieldPathSelectorFieldMask ListPublicDevicesRequest_FieldPathSelector = 5
	ListPublicDevicesRequest_FieldPathSelectorView      ListPublicDevicesRequest_FieldPathSelector = 6
)

func (s ListPublicDevicesRequest_FieldPathSelector) String() string {
	switch s {
	case ListPublicDevicesRequest_FieldPathSelectorParent:
		return "parent"
	case ListPublicDevicesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListPublicDevicesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListPublicDevicesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListPublicDevicesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListPublicDevicesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListPublicDevicesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesRequest: %d", s))
	}
}

func BuildListPublicDevicesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListPublicDevicesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPublicDevicesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListPublicDevicesRequest_FieldTerminalPath{selector: ListPublicDevicesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListPublicDevicesRequest_FieldTerminalPath{selector: ListPublicDevicesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListPublicDevicesRequest_FieldTerminalPath{selector: ListPublicDevicesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListPublicDevicesRequest_FieldTerminalPath{selector: ListPublicDevicesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListPublicDevicesRequest_FieldTerminalPath{selector: ListPublicDevicesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListPublicDevicesRequest_FieldTerminalPath{selector: ListPublicDevicesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListPublicDevicesRequest_FieldTerminalPath{selector: ListPublicDevicesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPublicDevicesRequest", fp)
}

func ParseListPublicDevicesRequest_FieldPath(rawField string) (ListPublicDevicesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPublicDevicesRequest_FieldPath(fp)
}

func MustParseListPublicDevicesRequest_FieldPath(rawField string) ListPublicDevicesRequest_FieldPath {
	fp, err := ParseListPublicDevicesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPublicDevicesRequest_FieldTerminalPath struct {
	selector ListPublicDevicesRequest_FieldPathSelector
}

var _ ListPublicDevicesRequest_FieldPath = (*ListPublicDevicesRequest_FieldTerminalPath)(nil)

func (fp *ListPublicDevicesRequest_FieldTerminalPath) Selector() ListPublicDevicesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPublicDevicesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPublicDevicesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPublicDevicesRequest
func (fp *ListPublicDevicesRequest_FieldTerminalPath) Get(source *ListPublicDevicesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPublicDevicesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListPublicDevicesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListPublicDevicesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListPublicDevicesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListPublicDevicesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListPublicDevicesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListPublicDevicesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPublicDevicesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPublicDevicesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPublicDevicesRequest))
}

// GetSingle returns value pointed by specific field of from source ListPublicDevicesRequest
func (fp *ListPublicDevicesRequest_FieldTerminalPath) GetSingle(source *ListPublicDevicesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListPublicDevicesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListPublicDevicesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListPublicDevicesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListPublicDevicesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListPublicDevicesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListPublicDevicesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListPublicDevicesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesRequest: %d", fp.selector))
	}
}

func (fp *ListPublicDevicesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPublicDevicesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListPublicDevicesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPublicDevicesRequest_FieldPathSelectorParent:
		return (*device.ParentName)(nil)
	case ListPublicDevicesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListPublicDevicesRequest_FieldPathSelectorPageToken:
		return (*device.PagerCursor)(nil)
	case ListPublicDevicesRequest_FieldPathSelectorOrderBy:
		return (*device.OrderBy)(nil)
	case ListPublicDevicesRequest_FieldPathSelectorFilter:
		return (*device.Filter)(nil)
	case ListPublicDevicesRequest_FieldPathSelectorFieldMask:
		return (*device.Device_FieldMask)(nil)
	case ListPublicDevicesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesRequest: %d", fp.selector))
	}
}

func (fp *ListPublicDevicesRequest_FieldTerminalPath) ClearValue(item *ListPublicDevicesRequest) {
	if item != nil {
		switch fp.selector {
		case ListPublicDevicesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListPublicDevicesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListPublicDevicesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListPublicDevicesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListPublicDevicesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListPublicDevicesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListPublicDevicesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListPublicDevicesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListPublicDevicesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPublicDevicesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPublicDevicesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPublicDevicesRequest_FieldPathSelectorParent ||
		fp.selector == ListPublicDevicesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListPublicDevicesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListPublicDevicesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListPublicDevicesRequest_FieldPathSelectorFilter ||
		fp.selector == ListPublicDevicesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListPublicDevicesRequest_FieldPathSelectorView
}

func (fp *ListPublicDevicesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListPublicDevicesRequest_FieldTerminalPath) WithIValue(value interface{}) ListPublicDevicesRequest_FieldPathValue {
	switch fp.selector {
	case ListPublicDevicesRequest_FieldPathSelectorParent:
		return &ListPublicDevicesRequest_FieldTerminalPathValue{ListPublicDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.ParentName)}
	case ListPublicDevicesRequest_FieldPathSelectorPageSize:
		return &ListPublicDevicesRequest_FieldTerminalPathValue{ListPublicDevicesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListPublicDevicesRequest_FieldPathSelectorPageToken:
		return &ListPublicDevicesRequest_FieldTerminalPathValue{ListPublicDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.PagerCursor)}
	case ListPublicDevicesRequest_FieldPathSelectorOrderBy:
		return &ListPublicDevicesRequest_FieldTerminalPathValue{ListPublicDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.OrderBy)}
	case ListPublicDevicesRequest_FieldPathSelectorFilter:
		return &ListPublicDevicesRequest_FieldTerminalPathValue{ListPublicDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.Filter)}
	case ListPublicDevicesRequest_FieldPathSelectorFieldMask:
		return &ListPublicDevicesRequest_FieldTerminalPathValue{ListPublicDevicesRequest_FieldTerminalPath: *fp, value: value.(*device.Device_FieldMask)}
	case ListPublicDevicesRequest_FieldPathSelectorView:
		return &ListPublicDevicesRequest_FieldTerminalPathValue{ListPublicDevicesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesRequest: %d", fp.selector))
	}
}

func (fp *ListPublicDevicesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPublicDevicesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPublicDevicesRequest_FieldPathArrayOfValues {
	fpaov := &ListPublicDevicesRequest_FieldTerminalPathArrayOfValues{ListPublicDevicesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPublicDevicesRequest_FieldPathSelectorParent:
		return &ListPublicDevicesRequest_FieldTerminalPathArrayOfValues{ListPublicDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.ParentName)}
	case ListPublicDevicesRequest_FieldPathSelectorPageSize:
		return &ListPublicDevicesRequest_FieldTerminalPathArrayOfValues{ListPublicDevicesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListPublicDevicesRequest_FieldPathSelectorPageToken:
		return &ListPublicDevicesRequest_FieldTerminalPathArrayOfValues{ListPublicDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.PagerCursor)}
	case ListPublicDevicesRequest_FieldPathSelectorOrderBy:
		return &ListPublicDevicesRequest_FieldTerminalPathArrayOfValues{ListPublicDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.OrderBy)}
	case ListPublicDevicesRequest_FieldPathSelectorFilter:
		return &ListPublicDevicesRequest_FieldTerminalPathArrayOfValues{ListPublicDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.Filter)}
	case ListPublicDevicesRequest_FieldPathSelectorFieldMask:
		return &ListPublicDevicesRequest_FieldTerminalPathArrayOfValues{ListPublicDevicesRequest_FieldTerminalPath: *fp, values: values.([]*device.Device_FieldMask)}
	case ListPublicDevicesRequest_FieldPathSelectorView:
		return &ListPublicDevicesRequest_FieldTerminalPathArrayOfValues{ListPublicDevicesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPublicDevicesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPublicDevicesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPublicDevicesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesRequest: %d", fp.selector))
	}
}

func (fp *ListPublicDevicesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListPublicDevicesRequest_FieldPathValue allows storing values for ListPublicDevicesRequest fields according to their type
type ListPublicDevicesRequest_FieldPathValue interface {
	ListPublicDevicesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPublicDevicesRequest)
	CompareWith(*ListPublicDevicesRequest) (cmp int, comparable bool)
}

func ParseListPublicDevicesRequest_FieldPathValue(pathStr, valueStr string) (ListPublicDevicesRequest_FieldPathValue, error) {
	fp, err := ParseListPublicDevicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPublicDevicesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPublicDevicesRequest_FieldPathValue), nil
}

func MustParseListPublicDevicesRequest_FieldPathValue(pathStr, valueStr string) ListPublicDevicesRequest_FieldPathValue {
	fpv, err := ParseListPublicDevicesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPublicDevicesRequest_FieldTerminalPathValue struct {
	ListPublicDevicesRequest_FieldTerminalPath
	value interface{}
}

var _ ListPublicDevicesRequest_FieldPathValue = (*ListPublicDevicesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPublicDevicesRequest' as interface{}
func (fpv *ListPublicDevicesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPublicDevicesRequest_FieldTerminalPathValue) AsParentValue() (*device.ParentName, bool) {
	res, ok := fpv.value.(*device.ParentName)
	return res, ok
}
func (fpv *ListPublicDevicesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListPublicDevicesRequest_FieldTerminalPathValue) AsPageTokenValue() (*device.PagerCursor, bool) {
	res, ok := fpv.value.(*device.PagerCursor)
	return res, ok
}
func (fpv *ListPublicDevicesRequest_FieldTerminalPathValue) AsOrderByValue() (*device.OrderBy, bool) {
	res, ok := fpv.value.(*device.OrderBy)
	return res, ok
}
func (fpv *ListPublicDevicesRequest_FieldTerminalPathValue) AsFilterValue() (*device.Filter, bool) {
	res, ok := fpv.value.(*device.Filter)
	return res, ok
}
func (fpv *ListPublicDevicesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*device.Device_FieldMask, bool) {
	res, ok := fpv.value.(*device.Device_FieldMask)
	return res, ok
}
func (fpv *ListPublicDevicesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListPublicDevicesRequest
func (fpv *ListPublicDevicesRequest_FieldTerminalPathValue) SetTo(target **ListPublicDevicesRequest) {
	if *target == nil {
		*target = new(ListPublicDevicesRequest)
	}
	switch fpv.selector {
	case ListPublicDevicesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*device.ParentName)
	case ListPublicDevicesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListPublicDevicesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*device.PagerCursor)
	case ListPublicDevicesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*device.OrderBy)
	case ListPublicDevicesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*device.Filter)
	case ListPublicDevicesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*device.Device_FieldMask)
	case ListPublicDevicesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesRequest: %d", fpv.selector))
	}
}

func (fpv *ListPublicDevicesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPublicDevicesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPublicDevicesRequest_FieldTerminalPathValue' with the value under path in 'ListPublicDevicesRequest'.
func (fpv *ListPublicDevicesRequest_FieldTerminalPathValue) CompareWith(source *ListPublicDevicesRequest) (int, bool) {
	switch fpv.selector {
	case ListPublicDevicesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*device.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListPublicDevicesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPublicDevicesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListPublicDevicesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListPublicDevicesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListPublicDevicesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListPublicDevicesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesRequest: %d", fpv.selector))
	}
}

func (fpv *ListPublicDevicesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPublicDevicesRequest))
}

// ListPublicDevicesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPublicDevicesRequest according to their type
// Present only for array (repeated) types.
type ListPublicDevicesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPublicDevicesRequest_FieldPath
	ContainsValue(*ListPublicDevicesRequest) bool
}

// ParseListPublicDevicesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPublicDevicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListPublicDevicesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListPublicDevicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPublicDevicesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPublicDevicesRequest_FieldPathArrayItemValue), nil
}

func MustParseListPublicDevicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListPublicDevicesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListPublicDevicesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPublicDevicesRequest_FieldTerminalPathArrayItemValue struct {
	ListPublicDevicesRequest_FieldTerminalPath
	value interface{}
}

var _ ListPublicDevicesRequest_FieldPathArrayItemValue = (*ListPublicDevicesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPublicDevicesRequest as interface{}
func (fpaiv *ListPublicDevicesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListPublicDevicesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListPublicDevicesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPublicDevicesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPublicDevicesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPublicDevicesRequest'
func (fpaiv *ListPublicDevicesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPublicDevicesRequest) bool {
	slice := fpaiv.ListPublicDevicesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListPublicDevicesRequest_FieldPathArrayOfValues allows storing slice of values for ListPublicDevicesRequest fields according to their type
type ListPublicDevicesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPublicDevicesRequest_FieldPath
}

func ParseListPublicDevicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPublicDevicesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListPublicDevicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPublicDevicesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPublicDevicesRequest_FieldPathArrayOfValues), nil
}

func MustParseListPublicDevicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListPublicDevicesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListPublicDevicesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPublicDevicesRequest_FieldTerminalPathArrayOfValues struct {
	ListPublicDevicesRequest_FieldTerminalPath
	values interface{}
}

var _ ListPublicDevicesRequest_FieldPathArrayOfValues = (*ListPublicDevicesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPublicDevicesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPublicDevicesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*device.ParentName) {
			values = append(values, v)
		}
	case ListPublicDevicesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListPublicDevicesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*device.PagerCursor) {
			values = append(values, v)
		}
	case ListPublicDevicesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*device.OrderBy) {
			values = append(values, v)
		}
	case ListPublicDevicesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*device.Filter) {
			values = append(values, v)
		}
	case ListPublicDevicesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*device.Device_FieldMask) {
			values = append(values, v)
		}
	case ListPublicDevicesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPublicDevicesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*device.ParentName, bool) {
	res, ok := fpaov.values.([]*device.ParentName)
	return res, ok
}
func (fpaov *ListPublicDevicesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListPublicDevicesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*device.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device.PagerCursor)
	return res, ok
}
func (fpaov *ListPublicDevicesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*device.OrderBy, bool) {
	res, ok := fpaov.values.([]*device.OrderBy)
	return res, ok
}
func (fpaov *ListPublicDevicesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*device.Filter, bool) {
	res, ok := fpaov.values.([]*device.Filter)
	return res, ok
}
func (fpaov *ListPublicDevicesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*device.Device_FieldMask, bool) {
	res, ok := fpaov.values.([]*device.Device_FieldMask)
	return res, ok
}
func (fpaov *ListPublicDevicesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPublicDevicesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPublicDevicesResponse_FieldPathSelector
	Get(source *ListPublicDevicesResponse) []interface{}
	GetSingle(source *ListPublicDevicesResponse) (interface{}, bool)
	ClearValue(item *ListPublicDevicesResponse)

	// Those methods build corresponding ListPublicDevicesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPublicDevicesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPublicDevicesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPublicDevicesResponse_FieldPathArrayItemValue
}

type ListPublicDevicesResponse_FieldPathSelector int32

const (
	ListPublicDevicesResponse_FieldPathSelectorDevices       ListPublicDevicesResponse_FieldPathSelector = 0
	ListPublicDevicesResponse_FieldPathSelectorPrevPageToken ListPublicDevicesResponse_FieldPathSelector = 1
	ListPublicDevicesResponse_FieldPathSelectorNextPageToken ListPublicDevicesResponse_FieldPathSelector = 2
)

func (s ListPublicDevicesResponse_FieldPathSelector) String() string {
	switch s {
	case ListPublicDevicesResponse_FieldPathSelectorDevices:
		return "devices"
	case ListPublicDevicesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListPublicDevicesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", s))
	}
}

func BuildListPublicDevicesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListPublicDevicesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPublicDevicesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "devices":
			return &ListPublicDevicesResponse_FieldTerminalPath{selector: ListPublicDevicesResponse_FieldPathSelectorDevices}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListPublicDevicesResponse_FieldTerminalPath{selector: ListPublicDevicesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListPublicDevicesResponse_FieldTerminalPath{selector: ListPublicDevicesResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "devices":
			if subpath, err := device.BuildDevice_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListPublicDevicesResponse_FieldSubPath{selector: ListPublicDevicesResponse_FieldPathSelectorDevices, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPublicDevicesResponse", fp)
}

func ParseListPublicDevicesResponse_FieldPath(rawField string) (ListPublicDevicesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPublicDevicesResponse_FieldPath(fp)
}

func MustParseListPublicDevicesResponse_FieldPath(rawField string) ListPublicDevicesResponse_FieldPath {
	fp, err := ParseListPublicDevicesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPublicDevicesResponse_FieldTerminalPath struct {
	selector ListPublicDevicesResponse_FieldPathSelector
}

var _ ListPublicDevicesResponse_FieldPath = (*ListPublicDevicesResponse_FieldTerminalPath)(nil)

func (fp *ListPublicDevicesResponse_FieldTerminalPath) Selector() ListPublicDevicesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPublicDevicesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPublicDevicesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPublicDevicesResponse
func (fp *ListPublicDevicesResponse_FieldTerminalPath) Get(source *ListPublicDevicesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPublicDevicesResponse_FieldPathSelectorDevices:
			for _, value := range source.GetDevices() {
				values = append(values, value)
			}
		case ListPublicDevicesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListPublicDevicesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPublicDevicesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPublicDevicesResponse))
}

// GetSingle returns value pointed by specific field of from source ListPublicDevicesResponse
func (fp *ListPublicDevicesResponse_FieldTerminalPath) GetSingle(source *ListPublicDevicesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListPublicDevicesResponse_FieldPathSelectorDevices:
		res := source.GetDevices()
		return res, res != nil
	case ListPublicDevicesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListPublicDevicesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fp.selector))
	}
}

func (fp *ListPublicDevicesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPublicDevicesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListPublicDevicesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPublicDevicesResponse_FieldPathSelectorDevices:
		return ([]*device.Device)(nil)
	case ListPublicDevicesResponse_FieldPathSelectorPrevPageToken:
		return (*device.PagerCursor)(nil)
	case ListPublicDevicesResponse_FieldPathSelectorNextPageToken:
		return (*device.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fp.selector))
	}
}

func (fp *ListPublicDevicesResponse_FieldTerminalPath) ClearValue(item *ListPublicDevicesResponse) {
	if item != nil {
		switch fp.selector {
		case ListPublicDevicesResponse_FieldPathSelectorDevices:
			item.Devices = nil
		case ListPublicDevicesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListPublicDevicesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListPublicDevicesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPublicDevicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPublicDevicesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPublicDevicesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListPublicDevicesResponse_FieldPathSelectorNextPageToken
}

func (fp *ListPublicDevicesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListPublicDevicesResponse_FieldTerminalPath) WithIValue(value interface{}) ListPublicDevicesResponse_FieldPathValue {
	switch fp.selector {
	case ListPublicDevicesResponse_FieldPathSelectorDevices:
		return &ListPublicDevicesResponse_FieldTerminalPathValue{ListPublicDevicesResponse_FieldTerminalPath: *fp, value: value.([]*device.Device)}
	case ListPublicDevicesResponse_FieldPathSelectorPrevPageToken:
		return &ListPublicDevicesResponse_FieldTerminalPathValue{ListPublicDevicesResponse_FieldTerminalPath: *fp, value: value.(*device.PagerCursor)}
	case ListPublicDevicesResponse_FieldPathSelectorNextPageToken:
		return &ListPublicDevicesResponse_FieldTerminalPathValue{ListPublicDevicesResponse_FieldTerminalPath: *fp, value: value.(*device.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fp.selector))
	}
}

func (fp *ListPublicDevicesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPublicDevicesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPublicDevicesResponse_FieldPathArrayOfValues {
	fpaov := &ListPublicDevicesResponse_FieldTerminalPathArrayOfValues{ListPublicDevicesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPublicDevicesResponse_FieldPathSelectorDevices:
		return &ListPublicDevicesResponse_FieldTerminalPathArrayOfValues{ListPublicDevicesResponse_FieldTerminalPath: *fp, values: values.([][]*device.Device)}
	case ListPublicDevicesResponse_FieldPathSelectorPrevPageToken:
		return &ListPublicDevicesResponse_FieldTerminalPathArrayOfValues{ListPublicDevicesResponse_FieldTerminalPath: *fp, values: values.([]*device.PagerCursor)}
	case ListPublicDevicesResponse_FieldPathSelectorNextPageToken:
		return &ListPublicDevicesResponse_FieldTerminalPathArrayOfValues{ListPublicDevicesResponse_FieldTerminalPath: *fp, values: values.([]*device.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPublicDevicesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPublicDevicesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPublicDevicesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListPublicDevicesResponse_FieldPathSelectorDevices:
		return &ListPublicDevicesResponse_FieldTerminalPathArrayItemValue{ListPublicDevicesResponse_FieldTerminalPath: *fp, value: value.(*device.Device)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fp.selector))
	}
}

func (fp *ListPublicDevicesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListPublicDevicesResponse_FieldSubPath struct {
	selector ListPublicDevicesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListPublicDevicesResponse_FieldPath = (*ListPublicDevicesResponse_FieldSubPath)(nil)

func (fps *ListPublicDevicesResponse_FieldSubPath) Selector() ListPublicDevicesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListPublicDevicesResponse_FieldSubPath) AsDevicesSubPath() (device.Device_FieldPath, bool) {
	res, ok := fps.subPath.(device.Device_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListPublicDevicesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListPublicDevicesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListPublicDevicesResponse
func (fps *ListPublicDevicesResponse_FieldSubPath) Get(source *ListPublicDevicesResponse) (values []interface{}) {
	switch fps.selector {
	case ListPublicDevicesResponse_FieldPathSelectorDevices:
		for _, item := range source.GetDevices() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListPublicDevicesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListPublicDevicesResponse))
}

// GetSingle returns value of selected field from source ListPublicDevicesResponse
func (fps *ListPublicDevicesResponse_FieldSubPath) GetSingle(source *ListPublicDevicesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListPublicDevicesResponse_FieldPathSelectorDevices:
		if len(source.GetDevices()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDevices()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fps.selector))
	}
}

func (fps *ListPublicDevicesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListPublicDevicesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListPublicDevicesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListPublicDevicesResponse_FieldSubPath) ClearValue(item *ListPublicDevicesResponse) {
	if item != nil {
		switch fps.selector {
		case ListPublicDevicesResponse_FieldPathSelectorDevices:
			for _, subItem := range item.Devices {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListPublicDevicesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListPublicDevicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListPublicDevicesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListPublicDevicesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListPublicDevicesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListPublicDevicesResponse_FieldSubPath) WithIValue(value interface{}) ListPublicDevicesResponse_FieldPathValue {
	return &ListPublicDevicesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListPublicDevicesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListPublicDevicesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListPublicDevicesResponse_FieldPathArrayOfValues {
	return &ListPublicDevicesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListPublicDevicesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListPublicDevicesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListPublicDevicesResponse_FieldPathArrayItemValue {
	return &ListPublicDevicesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListPublicDevicesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListPublicDevicesResponse_FieldPathValue allows storing values for ListPublicDevicesResponse fields according to their type
type ListPublicDevicesResponse_FieldPathValue interface {
	ListPublicDevicesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPublicDevicesResponse)
	CompareWith(*ListPublicDevicesResponse) (cmp int, comparable bool)
}

func ParseListPublicDevicesResponse_FieldPathValue(pathStr, valueStr string) (ListPublicDevicesResponse_FieldPathValue, error) {
	fp, err := ParseListPublicDevicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPublicDevicesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPublicDevicesResponse_FieldPathValue), nil
}

func MustParseListPublicDevicesResponse_FieldPathValue(pathStr, valueStr string) ListPublicDevicesResponse_FieldPathValue {
	fpv, err := ParseListPublicDevicesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPublicDevicesResponse_FieldTerminalPathValue struct {
	ListPublicDevicesResponse_FieldTerminalPath
	value interface{}
}

var _ ListPublicDevicesResponse_FieldPathValue = (*ListPublicDevicesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPublicDevicesResponse' as interface{}
func (fpv *ListPublicDevicesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPublicDevicesResponse_FieldTerminalPathValue) AsDevicesValue() ([]*device.Device, bool) {
	res, ok := fpv.value.([]*device.Device)
	return res, ok
}
func (fpv *ListPublicDevicesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*device.PagerCursor, bool) {
	res, ok := fpv.value.(*device.PagerCursor)
	return res, ok
}
func (fpv *ListPublicDevicesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*device.PagerCursor, bool) {
	res, ok := fpv.value.(*device.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListPublicDevicesResponse
func (fpv *ListPublicDevicesResponse_FieldTerminalPathValue) SetTo(target **ListPublicDevicesResponse) {
	if *target == nil {
		*target = new(ListPublicDevicesResponse)
	}
	switch fpv.selector {
	case ListPublicDevicesResponse_FieldPathSelectorDevices:
		(*target).Devices = fpv.value.([]*device.Device)
	case ListPublicDevicesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*device.PagerCursor)
	case ListPublicDevicesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*device.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fpv.selector))
	}
}

func (fpv *ListPublicDevicesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPublicDevicesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPublicDevicesResponse_FieldTerminalPathValue' with the value under path in 'ListPublicDevicesResponse'.
func (fpv *ListPublicDevicesResponse_FieldTerminalPathValue) CompareWith(source *ListPublicDevicesResponse) (int, bool) {
	switch fpv.selector {
	case ListPublicDevicesResponse_FieldPathSelectorDevices:
		return 0, false
	case ListPublicDevicesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListPublicDevicesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fpv.selector))
	}
}

func (fpv *ListPublicDevicesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPublicDevicesResponse))
}

type ListPublicDevicesResponse_FieldSubPathValue struct {
	ListPublicDevicesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListPublicDevicesResponse_FieldPathValue = (*ListPublicDevicesResponse_FieldSubPathValue)(nil)

func (fpvs *ListPublicDevicesResponse_FieldSubPathValue) AsDevicesPathValue() (device.Device_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(device.Device_FieldPathValue)
	return res, ok
}

func (fpvs *ListPublicDevicesResponse_FieldSubPathValue) SetTo(target **ListPublicDevicesResponse) {
	if *target == nil {
		*target = new(ListPublicDevicesResponse)
	}
	switch fpvs.Selector() {
	case ListPublicDevicesResponse_FieldPathSelectorDevices:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPublicDevicesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPublicDevicesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListPublicDevicesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListPublicDevicesResponse_FieldSubPathValue) CompareWith(source *ListPublicDevicesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListPublicDevicesResponse_FieldPathSelectorDevices:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPublicDevicesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListPublicDevicesResponse))
}

// ListPublicDevicesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPublicDevicesResponse according to their type
// Present only for array (repeated) types.
type ListPublicDevicesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPublicDevicesResponse_FieldPath
	ContainsValue(*ListPublicDevicesResponse) bool
}

// ParseListPublicDevicesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPublicDevicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListPublicDevicesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListPublicDevicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPublicDevicesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPublicDevicesResponse_FieldPathArrayItemValue), nil
}

func MustParseListPublicDevicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListPublicDevicesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListPublicDevicesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPublicDevicesResponse_FieldTerminalPathArrayItemValue struct {
	ListPublicDevicesResponse_FieldTerminalPath
	value interface{}
}

var _ ListPublicDevicesResponse_FieldPathArrayItemValue = (*ListPublicDevicesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPublicDevicesResponse as interface{}
func (fpaiv *ListPublicDevicesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListPublicDevicesResponse_FieldTerminalPathArrayItemValue) AsDevicesItemValue() (*device.Device, bool) {
	res, ok := fpaiv.value.(*device.Device)
	return res, ok
}

func (fpaiv *ListPublicDevicesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListPublicDevicesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPublicDevicesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPublicDevicesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPublicDevicesResponse'
func (fpaiv *ListPublicDevicesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPublicDevicesResponse) bool {
	slice := fpaiv.ListPublicDevicesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListPublicDevicesResponse_FieldSubPathArrayItemValue struct {
	ListPublicDevicesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListPublicDevicesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListPublicDevicesResponse_FieldSubPathArrayItemValue) AsDevicesPathItemValue() (device.Device_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(device.Device_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPublicDevicesResponse'
func (fpaivs *ListPublicDevicesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListPublicDevicesResponse) bool {
	switch fpaivs.Selector() {
	case ListPublicDevicesResponse_FieldPathSelectorDevices:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPublicDevicesResponse: %d", fpaivs.Selector()))
	}
}

// ListPublicDevicesResponse_FieldPathArrayOfValues allows storing slice of values for ListPublicDevicesResponse fields according to their type
type ListPublicDevicesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPublicDevicesResponse_FieldPath
}

func ParseListPublicDevicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPublicDevicesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListPublicDevicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPublicDevicesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPublicDevicesResponse_FieldPathArrayOfValues), nil
}

func MustParseListPublicDevicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListPublicDevicesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListPublicDevicesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPublicDevicesResponse_FieldTerminalPathArrayOfValues struct {
	ListPublicDevicesResponse_FieldTerminalPath
	values interface{}
}

var _ ListPublicDevicesResponse_FieldPathArrayOfValues = (*ListPublicDevicesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPublicDevicesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPublicDevicesResponse_FieldPathSelectorDevices:
		for _, v := range fpaov.values.([][]*device.Device) {
			values = append(values, v)
		}
	case ListPublicDevicesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*device.PagerCursor) {
			values = append(values, v)
		}
	case ListPublicDevicesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*device.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPublicDevicesResponse_FieldTerminalPathArrayOfValues) AsDevicesArrayOfValues() ([][]*device.Device, bool) {
	res, ok := fpaov.values.([][]*device.Device)
	return res, ok
}
func (fpaov *ListPublicDevicesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*device.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device.PagerCursor)
	return res, ok
}
func (fpaov *ListPublicDevicesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*device.PagerCursor, bool) {
	res, ok := fpaov.values.([]*device.PagerCursor)
	return res, ok
}

type ListPublicDevicesResponse_FieldSubPathArrayOfValues struct {
	ListPublicDevicesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListPublicDevicesResponse_FieldPathArrayOfValues = (*ListPublicDevicesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListPublicDevicesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListPublicDevicesResponse_FieldSubPathArrayOfValues) AsDevicesPathArrayOfValues() (device.Device_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(device.Device_FieldPathArrayOfValues)
	return res, ok
}
