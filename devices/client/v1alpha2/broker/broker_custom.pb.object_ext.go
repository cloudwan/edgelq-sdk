// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/broker_custom.proto
// DO NOT EDIT!!!

package broker_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &device.Device{}
)

func (o *ListenForConnectionsRequest) GotenObjectExt() {}

func (o *ListenForConnectionsRequest) MakeFullFieldMask() *ListenForConnectionsRequest_FieldMask {
	return FullListenForConnectionsRequest_FieldMask()
}

func (o *ListenForConnectionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListenForConnectionsRequest_FieldMask()
}

func (o *ListenForConnectionsRequest) MakeDiffFieldMask(other *ListenForConnectionsRequest) *ListenForConnectionsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListenForConnectionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListenForConnectionsRequest_FieldMask()
	}

	res := &ListenForConnectionsRequest_FieldMask{}
	{
		subMask := o.GetRegisterListener().MakeDiffFieldMask(other.GetRegisterListener())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListenForConnectionsRequest_FieldTerminalPath{selector: ListenForConnectionsRequest_FieldPathSelectorRegisterListener})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListenForConnectionsRequest_FieldSubPath{selector: ListenForConnectionsRequest_FieldPathSelectorRegisterListener, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetChannelOpenError().MakeDiffFieldMask(other.GetChannelOpenError())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListenForConnectionsRequest_FieldTerminalPath{selector: ListenForConnectionsRequest_FieldPathSelectorChannelOpenError})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListenForConnectionsRequest_FieldSubPath{selector: ListenForConnectionsRequest_FieldPathSelectorChannelOpenError, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetKeepAlive().MakeDiffFieldMask(other.GetKeepAlive())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListenForConnectionsRequest_FieldTerminalPath{selector: ListenForConnectionsRequest_FieldPathSelectorKeepAlive})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListenForConnectionsRequest_FieldSubPath{selector: ListenForConnectionsRequest_FieldPathSelectorKeepAlive, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ListenForConnectionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListenForConnectionsRequest))
}

func (o *ListenForConnectionsRequest) Clone() *ListenForConnectionsRequest {
	if o == nil {
		return nil
	}
	result := &ListenForConnectionsRequest{}
	if o, ok := o.Msg.(*ListenForConnectionsRequest_RegisterListener_); ok {
		result.Msg = (*ListenForConnectionsRequest_RegisterListener_)(nil)
		if o != nil {
			result.Msg = &ListenForConnectionsRequest_RegisterListener_{}
			result := result.Msg.(*ListenForConnectionsRequest_RegisterListener_)
			result.RegisterListener = o.RegisterListener.Clone()
		}
	}
	if o, ok := o.Msg.(*ListenForConnectionsRequest_ChannelOpenError_); ok {
		result.Msg = (*ListenForConnectionsRequest_ChannelOpenError_)(nil)
		if o != nil {
			result.Msg = &ListenForConnectionsRequest_ChannelOpenError_{}
			result := result.Msg.(*ListenForConnectionsRequest_ChannelOpenError_)
			result.ChannelOpenError = o.ChannelOpenError.Clone()
		}
	}
	if o, ok := o.Msg.(*ListenForConnectionsRequest_KeepAlive_); ok {
		result.Msg = (*ListenForConnectionsRequest_KeepAlive_)(nil)
		if o != nil {
			result.Msg = &ListenForConnectionsRequest_KeepAlive_{}
			result := result.Msg.(*ListenForConnectionsRequest_KeepAlive_)
			result.KeepAlive = o.KeepAlive.Clone()
		}
	}
	return result
}

func (o *ListenForConnectionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListenForConnectionsRequest) Merge(source *ListenForConnectionsRequest) {
	if source, ok := source.GetMsg().(*ListenForConnectionsRequest_RegisterListener_); ok {
		if dstOneOf, ok := o.Msg.(*ListenForConnectionsRequest_RegisterListener_); !ok || dstOneOf == nil {
			o.Msg = &ListenForConnectionsRequest_RegisterListener_{}
		}
		if source != nil {
			o := o.Msg.(*ListenForConnectionsRequest_RegisterListener_)
			if source.RegisterListener != nil {
				if o.RegisterListener == nil {
					o.RegisterListener = new(ListenForConnectionsRequest_RegisterListener)
				}
				o.RegisterListener.Merge(source.RegisterListener)
			}
		}
	}
	if source, ok := source.GetMsg().(*ListenForConnectionsRequest_ChannelOpenError_); ok {
		if dstOneOf, ok := o.Msg.(*ListenForConnectionsRequest_ChannelOpenError_); !ok || dstOneOf == nil {
			o.Msg = &ListenForConnectionsRequest_ChannelOpenError_{}
		}
		if source != nil {
			o := o.Msg.(*ListenForConnectionsRequest_ChannelOpenError_)
			if source.ChannelOpenError != nil {
				if o.ChannelOpenError == nil {
					o.ChannelOpenError = new(ListenForConnectionsRequest_ChannelOpenError)
				}
				o.ChannelOpenError.Merge(source.ChannelOpenError)
			}
		}
	}
	if source, ok := source.GetMsg().(*ListenForConnectionsRequest_KeepAlive_); ok {
		if dstOneOf, ok := o.Msg.(*ListenForConnectionsRequest_KeepAlive_); !ok || dstOneOf == nil {
			o.Msg = &ListenForConnectionsRequest_KeepAlive_{}
		}
		if source != nil {
			o := o.Msg.(*ListenForConnectionsRequest_KeepAlive_)
			if source.KeepAlive != nil {
				if o.KeepAlive == nil {
					o.KeepAlive = new(ListenForConnectionsRequest_KeepAlive)
				}
				o.KeepAlive.Merge(source.KeepAlive)
			}
		}
	}
}

func (o *ListenForConnectionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListenForConnectionsRequest))
}

func (o *ListenForConnectionsRequest_RegisterListener) GotenObjectExt() {}

func (o *ListenForConnectionsRequest_RegisterListener) MakeFullFieldMask() *ListenForConnectionsRequest_RegisterListener_FieldMask {
	return FullListenForConnectionsRequest_RegisterListener_FieldMask()
}

func (o *ListenForConnectionsRequest_RegisterListener) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListenForConnectionsRequest_RegisterListener_FieldMask()
}

func (o *ListenForConnectionsRequest_RegisterListener) MakeDiffFieldMask(other *ListenForConnectionsRequest_RegisterListener) *ListenForConnectionsRequest_RegisterListener_FieldMask {
	if o == nil && other == nil {
		return &ListenForConnectionsRequest_RegisterListener_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListenForConnectionsRequest_RegisterListener_FieldMask()
	}

	res := &ListenForConnectionsRequest_RegisterListener_FieldMask{}
	if o.GetDevice().String() != other.GetDevice().String() {
		res.Paths = append(res.Paths, &ListenForConnectionsRequestRegisterListener_FieldTerminalPath{selector: ListenForConnectionsRequestRegisterListener_FieldPathSelectorDevice})
	}
	return res
}

func (o *ListenForConnectionsRequest_RegisterListener) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListenForConnectionsRequest_RegisterListener))
}

func (o *ListenForConnectionsRequest_RegisterListener) Clone() *ListenForConnectionsRequest_RegisterListener {
	if o == nil {
		return nil
	}
	result := &ListenForConnectionsRequest_RegisterListener{}
	if o.Device == nil {
		result.Device = nil
	} else if data, err := o.Device.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Device = &device.Reference{}
		if err := result.Device.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListenForConnectionsRequest_RegisterListener) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListenForConnectionsRequest_RegisterListener) Merge(source *ListenForConnectionsRequest_RegisterListener) {
	if source.GetDevice() != nil {
		if data, err := source.GetDevice().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Device = &device.Reference{}
			if err := o.Device.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Device = nil
	}
}

func (o *ListenForConnectionsRequest_RegisterListener) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListenForConnectionsRequest_RegisterListener))
}

func (o *ListenForConnectionsRequest_ChannelOpenError) GotenObjectExt() {}

func (o *ListenForConnectionsRequest_ChannelOpenError) MakeFullFieldMask() *ListenForConnectionsRequest_ChannelOpenError_FieldMask {
	return FullListenForConnectionsRequest_ChannelOpenError_FieldMask()
}

func (o *ListenForConnectionsRequest_ChannelOpenError) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListenForConnectionsRequest_ChannelOpenError_FieldMask()
}

func (o *ListenForConnectionsRequest_ChannelOpenError) MakeDiffFieldMask(other *ListenForConnectionsRequest_ChannelOpenError) *ListenForConnectionsRequest_ChannelOpenError_FieldMask {
	if o == nil && other == nil {
		return &ListenForConnectionsRequest_ChannelOpenError_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListenForConnectionsRequest_ChannelOpenError_FieldMask()
	}

	res := &ListenForConnectionsRequest_ChannelOpenError_FieldMask{}
	if o.GetChannel() != other.GetChannel() {
		res.Paths = append(res.Paths, &ListenForConnectionsRequestChannelOpenError_FieldTerminalPath{selector: ListenForConnectionsRequestChannelOpenError_FieldPathSelectorChannel})
	}
	if o.GetMessage() != other.GetMessage() {
		res.Paths = append(res.Paths, &ListenForConnectionsRequestChannelOpenError_FieldTerminalPath{selector: ListenForConnectionsRequestChannelOpenError_FieldPathSelectorMessage})
	}
	return res
}

func (o *ListenForConnectionsRequest_ChannelOpenError) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListenForConnectionsRequest_ChannelOpenError))
}

func (o *ListenForConnectionsRequest_ChannelOpenError) Clone() *ListenForConnectionsRequest_ChannelOpenError {
	if o == nil {
		return nil
	}
	result := &ListenForConnectionsRequest_ChannelOpenError{}
	result.Channel = o.Channel
	result.Message = o.Message
	return result
}

func (o *ListenForConnectionsRequest_ChannelOpenError) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListenForConnectionsRequest_ChannelOpenError) Merge(source *ListenForConnectionsRequest_ChannelOpenError) {
	o.Channel = source.GetChannel()
	o.Message = source.GetMessage()
}

func (o *ListenForConnectionsRequest_ChannelOpenError) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListenForConnectionsRequest_ChannelOpenError))
}

func (o *ListenForConnectionsRequest_KeepAlive) GotenObjectExt() {}

func (o *ListenForConnectionsRequest_KeepAlive) MakeFullFieldMask() *ListenForConnectionsRequest_KeepAlive_FieldMask {
	return FullListenForConnectionsRequest_KeepAlive_FieldMask()
}

func (o *ListenForConnectionsRequest_KeepAlive) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListenForConnectionsRequest_KeepAlive_FieldMask()
}

func (o *ListenForConnectionsRequest_KeepAlive) MakeDiffFieldMask(other *ListenForConnectionsRequest_KeepAlive) *ListenForConnectionsRequest_KeepAlive_FieldMask {
	if o == nil && other == nil {
		return &ListenForConnectionsRequest_KeepAlive_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListenForConnectionsRequest_KeepAlive_FieldMask()
	}

	res := &ListenForConnectionsRequest_KeepAlive_FieldMask{}
	return res
}

func (o *ListenForConnectionsRequest_KeepAlive) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListenForConnectionsRequest_KeepAlive))
}

func (o *ListenForConnectionsRequest_KeepAlive) Clone() *ListenForConnectionsRequest_KeepAlive {
	if o == nil {
		return nil
	}
	result := &ListenForConnectionsRequest_KeepAlive{}
	return result
}

func (o *ListenForConnectionsRequest_KeepAlive) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListenForConnectionsRequest_KeepAlive) Merge(source *ListenForConnectionsRequest_KeepAlive) {
}

func (o *ListenForConnectionsRequest_KeepAlive) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListenForConnectionsRequest_KeepAlive))
}

func (o *ListenForConnectionsResponse) GotenObjectExt() {}

func (o *ListenForConnectionsResponse) MakeFullFieldMask() *ListenForConnectionsResponse_FieldMask {
	return FullListenForConnectionsResponse_FieldMask()
}

func (o *ListenForConnectionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListenForConnectionsResponse_FieldMask()
}

func (o *ListenForConnectionsResponse) MakeDiffFieldMask(other *ListenForConnectionsResponse) *ListenForConnectionsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListenForConnectionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListenForConnectionsResponse_FieldMask()
	}

	res := &ListenForConnectionsResponse_FieldMask{}
	{
		subMask := o.GetChannelRequested().MakeDiffFieldMask(other.GetChannelRequested())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ListenForConnectionsResponse_FieldTerminalPath{selector: ListenForConnectionsResponse_FieldPathSelectorChannelRequested})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ListenForConnectionsResponse_FieldSubPath{selector: ListenForConnectionsResponse_FieldPathSelectorChannelRequested, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ListenForConnectionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListenForConnectionsResponse))
}

func (o *ListenForConnectionsResponse) Clone() *ListenForConnectionsResponse {
	if o == nil {
		return nil
	}
	result := &ListenForConnectionsResponse{}
	if o, ok := o.Msg.(*ListenForConnectionsResponse_ChannelRequested_); ok {
		result.Msg = (*ListenForConnectionsResponse_ChannelRequested_)(nil)
		if o != nil {
			result.Msg = &ListenForConnectionsResponse_ChannelRequested_{}
			result := result.Msg.(*ListenForConnectionsResponse_ChannelRequested_)
			result.ChannelRequested = o.ChannelRequested.Clone()
		}
	}
	return result
}

func (o *ListenForConnectionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListenForConnectionsResponse) Merge(source *ListenForConnectionsResponse) {
	if source, ok := source.GetMsg().(*ListenForConnectionsResponse_ChannelRequested_); ok {
		if dstOneOf, ok := o.Msg.(*ListenForConnectionsResponse_ChannelRequested_); !ok || dstOneOf == nil {
			o.Msg = &ListenForConnectionsResponse_ChannelRequested_{}
		}
		if source != nil {
			o := o.Msg.(*ListenForConnectionsResponse_ChannelRequested_)
			if source.ChannelRequested != nil {
				if o.ChannelRequested == nil {
					o.ChannelRequested = new(ListenForConnectionsResponse_ChannelRequested)
				}
				o.ChannelRequested.Merge(source.ChannelRequested)
			}
		}
	}
}

func (o *ListenForConnectionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListenForConnectionsResponse))
}

func (o *ListenForConnectionsResponse_ChannelRequested) GotenObjectExt() {}

func (o *ListenForConnectionsResponse_ChannelRequested) MakeFullFieldMask() *ListenForConnectionsResponse_ChannelRequested_FieldMask {
	return FullListenForConnectionsResponse_ChannelRequested_FieldMask()
}

func (o *ListenForConnectionsResponse_ChannelRequested) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListenForConnectionsResponse_ChannelRequested_FieldMask()
}

func (o *ListenForConnectionsResponse_ChannelRequested) MakeDiffFieldMask(other *ListenForConnectionsResponse_ChannelRequested) *ListenForConnectionsResponse_ChannelRequested_FieldMask {
	if o == nil && other == nil {
		return &ListenForConnectionsResponse_ChannelRequested_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListenForConnectionsResponse_ChannelRequested_FieldMask()
	}

	res := &ListenForConnectionsResponse_ChannelRequested_FieldMask{}
	if o.GetChannel() != other.GetChannel() {
		res.Paths = append(res.Paths, &ListenForConnectionsResponseChannelRequested_FieldTerminalPath{selector: ListenForConnectionsResponseChannelRequested_FieldPathSelectorChannel})
	}
	if o.GetService() != other.GetService() {
		res.Paths = append(res.Paths, &ListenForConnectionsResponseChannelRequested_FieldTerminalPath{selector: ListenForConnectionsResponseChannelRequested_FieldPathSelectorService})
	}
	if o.GetArg() != other.GetArg() {
		res.Paths = append(res.Paths, &ListenForConnectionsResponseChannelRequested_FieldTerminalPath{selector: ListenForConnectionsResponseChannelRequested_FieldPathSelectorArg})
	}
	return res
}

func (o *ListenForConnectionsResponse_ChannelRequested) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListenForConnectionsResponse_ChannelRequested))
}

func (o *ListenForConnectionsResponse_ChannelRequested) Clone() *ListenForConnectionsResponse_ChannelRequested {
	if o == nil {
		return nil
	}
	result := &ListenForConnectionsResponse_ChannelRequested{}
	result.Channel = o.Channel
	result.Service = o.Service
	result.Arg = o.Arg
	return result
}

func (o *ListenForConnectionsResponse_ChannelRequested) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListenForConnectionsResponse_ChannelRequested) Merge(source *ListenForConnectionsResponse_ChannelRequested) {
	o.Channel = source.GetChannel()
	o.Service = source.GetService()
	o.Arg = source.GetArg()
}

func (o *ListenForConnectionsResponse_ChannelRequested) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListenForConnectionsResponse_ChannelRequested))
}

func (o *OpenConnectionChannelSocketRequest) GotenObjectExt() {}

func (o *OpenConnectionChannelSocketRequest) MakeFullFieldMask() *OpenConnectionChannelSocketRequest_FieldMask {
	return FullOpenConnectionChannelSocketRequest_FieldMask()
}

func (o *OpenConnectionChannelSocketRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullOpenConnectionChannelSocketRequest_FieldMask()
}

func (o *OpenConnectionChannelSocketRequest) MakeDiffFieldMask(other *OpenConnectionChannelSocketRequest) *OpenConnectionChannelSocketRequest_FieldMask {
	if o == nil && other == nil {
		return &OpenConnectionChannelSocketRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullOpenConnectionChannelSocketRequest_FieldMask()
	}

	res := &OpenConnectionChannelSocketRequest_FieldMask{}
	{
		subMask := o.GetRegisterSocket().MakeDiffFieldMask(other.GetRegisterSocket())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &OpenConnectionChannelSocketRequest_FieldTerminalPath{selector: OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &OpenConnectionChannelSocketRequest_FieldSubPath{selector: OpenConnectionChannelSocketRequest_FieldPathSelectorRegisterSocket, subPath: subpath})
			}
		}
	}
	if string(o.GetData()) != string(other.GetData()) {
		res.Paths = append(res.Paths, &OpenConnectionChannelSocketRequest_FieldTerminalPath{selector: OpenConnectionChannelSocketRequest_FieldPathSelectorData})
	}
	if string(o.GetError()) != string(other.GetError()) {
		res.Paths = append(res.Paths, &OpenConnectionChannelSocketRequest_FieldTerminalPath{selector: OpenConnectionChannelSocketRequest_FieldPathSelectorError})
	}
	{
		subMask := o.GetAck().MakeDiffFieldMask(other.GetAck())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &OpenConnectionChannelSocketRequest_FieldTerminalPath{selector: OpenConnectionChannelSocketRequest_FieldPathSelectorAck})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &OpenConnectionChannelSocketRequest_FieldSubPath{selector: OpenConnectionChannelSocketRequest_FieldPathSelectorAck, subPath: subpath})
			}
		}
	}
	return res
}

func (o *OpenConnectionChannelSocketRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*OpenConnectionChannelSocketRequest))
}

func (o *OpenConnectionChannelSocketRequest) Clone() *OpenConnectionChannelSocketRequest {
	if o == nil {
		return nil
	}
	result := &OpenConnectionChannelSocketRequest{}
	if o, ok := o.Msg.(*OpenConnectionChannelSocketRequest_RegisterSocket_); ok {
		result.Msg = (*OpenConnectionChannelSocketRequest_RegisterSocket_)(nil)
		if o != nil {
			result.Msg = &OpenConnectionChannelSocketRequest_RegisterSocket_{}
			result := result.Msg.(*OpenConnectionChannelSocketRequest_RegisterSocket_)
			result.RegisterSocket = o.RegisterSocket.Clone()
		}
	}
	if o, ok := o.Msg.(*OpenConnectionChannelSocketRequest_Data); ok {
		result.Msg = (*OpenConnectionChannelSocketRequest_Data)(nil)
		if o != nil {
			result.Msg = &OpenConnectionChannelSocketRequest_Data{}
			result := result.Msg.(*OpenConnectionChannelSocketRequest_Data)
			result.Data = make([]byte, len(o.Data))
			for i, bt := range o.Data {
				result.Data[i] = bt
			}
		}
	}
	if o, ok := o.Msg.(*OpenConnectionChannelSocketRequest_Error); ok {
		result.Msg = (*OpenConnectionChannelSocketRequest_Error)(nil)
		if o != nil {
			result.Msg = &OpenConnectionChannelSocketRequest_Error{}
			result := result.Msg.(*OpenConnectionChannelSocketRequest_Error)
			result.Error = make([]byte, len(o.Error))
			for i, bt := range o.Error {
				result.Error[i] = bt
			}
		}
	}
	if o, ok := o.Msg.(*OpenConnectionChannelSocketRequest_Ack); ok {
		result.Msg = (*OpenConnectionChannelSocketRequest_Ack)(nil)
		if o != nil {
			result.Msg = &OpenConnectionChannelSocketRequest_Ack{}
			result := result.Msg.(*OpenConnectionChannelSocketRequest_Ack)
			result.Ack = o.Ack.Clone()
		}
	}
	return result
}

func (o *OpenConnectionChannelSocketRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *OpenConnectionChannelSocketRequest) Merge(source *OpenConnectionChannelSocketRequest) {
	if source, ok := source.GetMsg().(*OpenConnectionChannelSocketRequest_RegisterSocket_); ok {
		if dstOneOf, ok := o.Msg.(*OpenConnectionChannelSocketRequest_RegisterSocket_); !ok || dstOneOf == nil {
			o.Msg = &OpenConnectionChannelSocketRequest_RegisterSocket_{}
		}
		if source != nil {
			o := o.Msg.(*OpenConnectionChannelSocketRequest_RegisterSocket_)
			if source.RegisterSocket != nil {
				if o.RegisterSocket == nil {
					o.RegisterSocket = new(OpenConnectionChannelSocketRequest_RegisterSocket)
				}
				o.RegisterSocket.Merge(source.RegisterSocket)
			}
		}
	}
	if source, ok := source.GetMsg().(*OpenConnectionChannelSocketRequest_Data); ok {
		if dstOneOf, ok := o.Msg.(*OpenConnectionChannelSocketRequest_Data); !ok || dstOneOf == nil {
			o.Msg = &OpenConnectionChannelSocketRequest_Data{}
		}
		if source != nil {
			o := o.Msg.(*OpenConnectionChannelSocketRequest_Data)
			o.Data = make([]byte, len(source.Data))
			for i, bt := range source.Data {
				o.Data[i] = bt
			}
		}
	}
	if source, ok := source.GetMsg().(*OpenConnectionChannelSocketRequest_Error); ok {
		if dstOneOf, ok := o.Msg.(*OpenConnectionChannelSocketRequest_Error); !ok || dstOneOf == nil {
			o.Msg = &OpenConnectionChannelSocketRequest_Error{}
		}
		if source != nil {
			o := o.Msg.(*OpenConnectionChannelSocketRequest_Error)
			o.Error = make([]byte, len(source.Error))
			for i, bt := range source.Error {
				o.Error[i] = bt
			}
		}
	}
	if source, ok := source.GetMsg().(*OpenConnectionChannelSocketRequest_Ack); ok {
		if dstOneOf, ok := o.Msg.(*OpenConnectionChannelSocketRequest_Ack); !ok || dstOneOf == nil {
			o.Msg = &OpenConnectionChannelSocketRequest_Ack{}
		}
		if source != nil {
			o := o.Msg.(*OpenConnectionChannelSocketRequest_Ack)
			if source.Ack != nil {
				if o.Ack == nil {
					o.Ack = new(Ack)
				}
				o.Ack.Merge(source.Ack)
			}
		}
	}
}

func (o *OpenConnectionChannelSocketRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*OpenConnectionChannelSocketRequest))
}

func (o *OpenConnectionChannelSocketRequest_RegisterSocket) GotenObjectExt() {}

func (o *OpenConnectionChannelSocketRequest_RegisterSocket) MakeFullFieldMask() *OpenConnectionChannelSocketRequest_RegisterSocket_FieldMask {
	return FullOpenConnectionChannelSocketRequest_RegisterSocket_FieldMask()
}

func (o *OpenConnectionChannelSocketRequest_RegisterSocket) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullOpenConnectionChannelSocketRequest_RegisterSocket_FieldMask()
}

func (o *OpenConnectionChannelSocketRequest_RegisterSocket) MakeDiffFieldMask(other *OpenConnectionChannelSocketRequest_RegisterSocket) *OpenConnectionChannelSocketRequest_RegisterSocket_FieldMask {
	if o == nil && other == nil {
		return &OpenConnectionChannelSocketRequest_RegisterSocket_FieldMask{}
	}
	if o == nil || other == nil {
		return FullOpenConnectionChannelSocketRequest_RegisterSocket_FieldMask()
	}

	res := &OpenConnectionChannelSocketRequest_RegisterSocket_FieldMask{}
	if o.GetDevice().String() != other.GetDevice().String() {
		res.Paths = append(res.Paths, &OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath{selector: OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorDevice})
	}
	if o.GetChannel() != other.GetChannel() {
		res.Paths = append(res.Paths, &OpenConnectionChannelSocketRequestRegisterSocket_FieldTerminalPath{selector: OpenConnectionChannelSocketRequestRegisterSocket_FieldPathSelectorChannel})
	}
	return res
}

func (o *OpenConnectionChannelSocketRequest_RegisterSocket) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*OpenConnectionChannelSocketRequest_RegisterSocket))
}

func (o *OpenConnectionChannelSocketRequest_RegisterSocket) Clone() *OpenConnectionChannelSocketRequest_RegisterSocket {
	if o == nil {
		return nil
	}
	result := &OpenConnectionChannelSocketRequest_RegisterSocket{}
	if o.Device == nil {
		result.Device = nil
	} else if data, err := o.Device.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Device = &device.Reference{}
		if err := result.Device.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Channel = o.Channel
	return result
}

func (o *OpenConnectionChannelSocketRequest_RegisterSocket) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *OpenConnectionChannelSocketRequest_RegisterSocket) Merge(source *OpenConnectionChannelSocketRequest_RegisterSocket) {
	if source.GetDevice() != nil {
		if data, err := source.GetDevice().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Device = &device.Reference{}
			if err := o.Device.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Device = nil
	}
	o.Channel = source.GetChannel()
}

func (o *OpenConnectionChannelSocketRequest_RegisterSocket) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*OpenConnectionChannelSocketRequest_RegisterSocket))
}

func (o *OpenConnectionChannelSocketResponse) GotenObjectExt() {}

func (o *OpenConnectionChannelSocketResponse) MakeFullFieldMask() *OpenConnectionChannelSocketResponse_FieldMask {
	return FullOpenConnectionChannelSocketResponse_FieldMask()
}

func (o *OpenConnectionChannelSocketResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullOpenConnectionChannelSocketResponse_FieldMask()
}

func (o *OpenConnectionChannelSocketResponse) MakeDiffFieldMask(other *OpenConnectionChannelSocketResponse) *OpenConnectionChannelSocketResponse_FieldMask {
	if o == nil && other == nil {
		return &OpenConnectionChannelSocketResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullOpenConnectionChannelSocketResponse_FieldMask()
	}

	res := &OpenConnectionChannelSocketResponse_FieldMask{}
	if string(o.GetData()) != string(other.GetData()) {
		res.Paths = append(res.Paths, &OpenConnectionChannelSocketResponse_FieldTerminalPath{selector: OpenConnectionChannelSocketResponse_FieldPathSelectorData})
	}
	{
		subMask := o.GetAck().MakeDiffFieldMask(other.GetAck())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &OpenConnectionChannelSocketResponse_FieldTerminalPath{selector: OpenConnectionChannelSocketResponse_FieldPathSelectorAck})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &OpenConnectionChannelSocketResponse_FieldSubPath{selector: OpenConnectionChannelSocketResponse_FieldPathSelectorAck, subPath: subpath})
			}
		}
	}
	return res
}

func (o *OpenConnectionChannelSocketResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*OpenConnectionChannelSocketResponse))
}

func (o *OpenConnectionChannelSocketResponse) Clone() *OpenConnectionChannelSocketResponse {
	if o == nil {
		return nil
	}
	result := &OpenConnectionChannelSocketResponse{}
	if o, ok := o.Msg.(*OpenConnectionChannelSocketResponse_Data); ok {
		result.Msg = (*OpenConnectionChannelSocketResponse_Data)(nil)
		if o != nil {
			result.Msg = &OpenConnectionChannelSocketResponse_Data{}
			result := result.Msg.(*OpenConnectionChannelSocketResponse_Data)
			result.Data = make([]byte, len(o.Data))
			for i, bt := range o.Data {
				result.Data[i] = bt
			}
		}
	}
	if o, ok := o.Msg.(*OpenConnectionChannelSocketResponse_Ack); ok {
		result.Msg = (*OpenConnectionChannelSocketResponse_Ack)(nil)
		if o != nil {
			result.Msg = &OpenConnectionChannelSocketResponse_Ack{}
			result := result.Msg.(*OpenConnectionChannelSocketResponse_Ack)
			result.Ack = o.Ack.Clone()
		}
	}
	return result
}

func (o *OpenConnectionChannelSocketResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *OpenConnectionChannelSocketResponse) Merge(source *OpenConnectionChannelSocketResponse) {
	if source, ok := source.GetMsg().(*OpenConnectionChannelSocketResponse_Data); ok {
		if dstOneOf, ok := o.Msg.(*OpenConnectionChannelSocketResponse_Data); !ok || dstOneOf == nil {
			o.Msg = &OpenConnectionChannelSocketResponse_Data{}
		}
		if source != nil {
			o := o.Msg.(*OpenConnectionChannelSocketResponse_Data)
			o.Data = make([]byte, len(source.Data))
			for i, bt := range source.Data {
				o.Data[i] = bt
			}
		}
	}
	if source, ok := source.GetMsg().(*OpenConnectionChannelSocketResponse_Ack); ok {
		if dstOneOf, ok := o.Msg.(*OpenConnectionChannelSocketResponse_Ack); !ok || dstOneOf == nil {
			o.Msg = &OpenConnectionChannelSocketResponse_Ack{}
		}
		if source != nil {
			o := o.Msg.(*OpenConnectionChannelSocketResponse_Ack)
			if source.Ack != nil {
				if o.Ack == nil {
					o.Ack = new(Ack)
				}
				o.Ack.Merge(source.Ack)
			}
		}
	}
}

func (o *OpenConnectionChannelSocketResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*OpenConnectionChannelSocketResponse))
}

func (o *ConnectToDeviceRequest) GotenObjectExt() {}

func (o *ConnectToDeviceRequest) MakeFullFieldMask() *ConnectToDeviceRequest_FieldMask {
	return FullConnectToDeviceRequest_FieldMask()
}

func (o *ConnectToDeviceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConnectToDeviceRequest_FieldMask()
}

func (o *ConnectToDeviceRequest) MakeDiffFieldMask(other *ConnectToDeviceRequest) *ConnectToDeviceRequest_FieldMask {
	if o == nil && other == nil {
		return &ConnectToDeviceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConnectToDeviceRequest_FieldMask()
	}

	res := &ConnectToDeviceRequest_FieldMask{}
	{
		subMask := o.GetOpenRequest().MakeDiffFieldMask(other.GetOpenRequest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectToDeviceRequest_FieldTerminalPath{selector: ConnectToDeviceRequest_FieldPathSelectorOpenRequest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectToDeviceRequest_FieldSubPath{selector: ConnectToDeviceRequest_FieldPathSelectorOpenRequest, subPath: subpath})
			}
		}
	}
	if string(o.GetData()) != string(other.GetData()) {
		res.Paths = append(res.Paths, &ConnectToDeviceRequest_FieldTerminalPath{selector: ConnectToDeviceRequest_FieldPathSelectorData})
	}
	{
		subMask := o.GetAck().MakeDiffFieldMask(other.GetAck())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectToDeviceRequest_FieldTerminalPath{selector: ConnectToDeviceRequest_FieldPathSelectorAck})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectToDeviceRequest_FieldSubPath{selector: ConnectToDeviceRequest_FieldPathSelectorAck, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetKeepAlive().MakeDiffFieldMask(other.GetKeepAlive())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectToDeviceRequest_FieldTerminalPath{selector: ConnectToDeviceRequest_FieldPathSelectorKeepAlive})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectToDeviceRequest_FieldSubPath{selector: ConnectToDeviceRequest_FieldPathSelectorKeepAlive, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ConnectToDeviceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConnectToDeviceRequest))
}

func (o *ConnectToDeviceRequest) Clone() *ConnectToDeviceRequest {
	if o == nil {
		return nil
	}
	result := &ConnectToDeviceRequest{}
	if o, ok := o.Msg.(*ConnectToDeviceRequest_OpenRequest_); ok {
		result.Msg = (*ConnectToDeviceRequest_OpenRequest_)(nil)
		if o != nil {
			result.Msg = &ConnectToDeviceRequest_OpenRequest_{}
			result := result.Msg.(*ConnectToDeviceRequest_OpenRequest_)
			result.OpenRequest = o.OpenRequest.Clone()
		}
	}
	if o, ok := o.Msg.(*ConnectToDeviceRequest_Data); ok {
		result.Msg = (*ConnectToDeviceRequest_Data)(nil)
		if o != nil {
			result.Msg = &ConnectToDeviceRequest_Data{}
			result := result.Msg.(*ConnectToDeviceRequest_Data)
			result.Data = make([]byte, len(o.Data))
			for i, bt := range o.Data {
				result.Data[i] = bt
			}
		}
	}
	if o, ok := o.Msg.(*ConnectToDeviceRequest_Ack); ok {
		result.Msg = (*ConnectToDeviceRequest_Ack)(nil)
		if o != nil {
			result.Msg = &ConnectToDeviceRequest_Ack{}
			result := result.Msg.(*ConnectToDeviceRequest_Ack)
			result.Ack = o.Ack.Clone()
		}
	}
	if o, ok := o.Msg.(*ConnectToDeviceRequest_KeepAlive_); ok {
		result.Msg = (*ConnectToDeviceRequest_KeepAlive_)(nil)
		if o != nil {
			result.Msg = &ConnectToDeviceRequest_KeepAlive_{}
			result := result.Msg.(*ConnectToDeviceRequest_KeepAlive_)
			result.KeepAlive = o.KeepAlive.Clone()
		}
	}
	return result
}

func (o *ConnectToDeviceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConnectToDeviceRequest) Merge(source *ConnectToDeviceRequest) {
	if source, ok := source.GetMsg().(*ConnectToDeviceRequest_OpenRequest_); ok {
		if dstOneOf, ok := o.Msg.(*ConnectToDeviceRequest_OpenRequest_); !ok || dstOneOf == nil {
			o.Msg = &ConnectToDeviceRequest_OpenRequest_{}
		}
		if source != nil {
			o := o.Msg.(*ConnectToDeviceRequest_OpenRequest_)
			if source.OpenRequest != nil {
				if o.OpenRequest == nil {
					o.OpenRequest = new(ConnectToDeviceRequest_OpenRequest)
				}
				o.OpenRequest.Merge(source.OpenRequest)
			}
		}
	}
	if source, ok := source.GetMsg().(*ConnectToDeviceRequest_Data); ok {
		if dstOneOf, ok := o.Msg.(*ConnectToDeviceRequest_Data); !ok || dstOneOf == nil {
			o.Msg = &ConnectToDeviceRequest_Data{}
		}
		if source != nil {
			o := o.Msg.(*ConnectToDeviceRequest_Data)
			o.Data = make([]byte, len(source.Data))
			for i, bt := range source.Data {
				o.Data[i] = bt
			}
		}
	}
	if source, ok := source.GetMsg().(*ConnectToDeviceRequest_Ack); ok {
		if dstOneOf, ok := o.Msg.(*ConnectToDeviceRequest_Ack); !ok || dstOneOf == nil {
			o.Msg = &ConnectToDeviceRequest_Ack{}
		}
		if source != nil {
			o := o.Msg.(*ConnectToDeviceRequest_Ack)
			if source.Ack != nil {
				if o.Ack == nil {
					o.Ack = new(Ack)
				}
				o.Ack.Merge(source.Ack)
			}
		}
	}
	if source, ok := source.GetMsg().(*ConnectToDeviceRequest_KeepAlive_); ok {
		if dstOneOf, ok := o.Msg.(*ConnectToDeviceRequest_KeepAlive_); !ok || dstOneOf == nil {
			o.Msg = &ConnectToDeviceRequest_KeepAlive_{}
		}
		if source != nil {
			o := o.Msg.(*ConnectToDeviceRequest_KeepAlive_)
			if source.KeepAlive != nil {
				if o.KeepAlive == nil {
					o.KeepAlive = new(ConnectToDeviceRequest_KeepAlive)
				}
				o.KeepAlive.Merge(source.KeepAlive)
			}
		}
	}
}

func (o *ConnectToDeviceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConnectToDeviceRequest))
}

func (o *ConnectToDeviceRequest_OpenRequest) GotenObjectExt() {}

func (o *ConnectToDeviceRequest_OpenRequest) MakeFullFieldMask() *ConnectToDeviceRequest_OpenRequest_FieldMask {
	return FullConnectToDeviceRequest_OpenRequest_FieldMask()
}

func (o *ConnectToDeviceRequest_OpenRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConnectToDeviceRequest_OpenRequest_FieldMask()
}

func (o *ConnectToDeviceRequest_OpenRequest) MakeDiffFieldMask(other *ConnectToDeviceRequest_OpenRequest) *ConnectToDeviceRequest_OpenRequest_FieldMask {
	if o == nil && other == nil {
		return &ConnectToDeviceRequest_OpenRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConnectToDeviceRequest_OpenRequest_FieldMask()
	}

	res := &ConnectToDeviceRequest_OpenRequest_FieldMask{}
	if o.GetDevice().String() != other.GetDevice().String() {
		res.Paths = append(res.Paths, &ConnectToDeviceRequestOpenRequest_FieldTerminalPath{selector: ConnectToDeviceRequestOpenRequest_FieldPathSelectorDevice})
	}
	if o.GetService() != other.GetService() {
		res.Paths = append(res.Paths, &ConnectToDeviceRequestOpenRequest_FieldTerminalPath{selector: ConnectToDeviceRequestOpenRequest_FieldPathSelectorService})
	}
	if o.GetArg() != other.GetArg() {
		res.Paths = append(res.Paths, &ConnectToDeviceRequestOpenRequest_FieldTerminalPath{selector: ConnectToDeviceRequestOpenRequest_FieldPathSelectorArg})
	}
	return res
}

func (o *ConnectToDeviceRequest_OpenRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConnectToDeviceRequest_OpenRequest))
}

func (o *ConnectToDeviceRequest_OpenRequest) Clone() *ConnectToDeviceRequest_OpenRequest {
	if o == nil {
		return nil
	}
	result := &ConnectToDeviceRequest_OpenRequest{}
	if o.Device == nil {
		result.Device = nil
	} else if data, err := o.Device.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Device = &device.Reference{}
		if err := result.Device.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Service = o.Service
	result.Arg = o.Arg
	return result
}

func (o *ConnectToDeviceRequest_OpenRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConnectToDeviceRequest_OpenRequest) Merge(source *ConnectToDeviceRequest_OpenRequest) {
	if source.GetDevice() != nil {
		if data, err := source.GetDevice().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Device = &device.Reference{}
			if err := o.Device.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Device = nil
	}
	o.Service = source.GetService()
	o.Arg = source.GetArg()
}

func (o *ConnectToDeviceRequest_OpenRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConnectToDeviceRequest_OpenRequest))
}

func (o *ConnectToDeviceRequest_KeepAlive) GotenObjectExt() {}

func (o *ConnectToDeviceRequest_KeepAlive) MakeFullFieldMask() *ConnectToDeviceRequest_KeepAlive_FieldMask {
	return FullConnectToDeviceRequest_KeepAlive_FieldMask()
}

func (o *ConnectToDeviceRequest_KeepAlive) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConnectToDeviceRequest_KeepAlive_FieldMask()
}

func (o *ConnectToDeviceRequest_KeepAlive) MakeDiffFieldMask(other *ConnectToDeviceRequest_KeepAlive) *ConnectToDeviceRequest_KeepAlive_FieldMask {
	if o == nil && other == nil {
		return &ConnectToDeviceRequest_KeepAlive_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConnectToDeviceRequest_KeepAlive_FieldMask()
	}

	res := &ConnectToDeviceRequest_KeepAlive_FieldMask{}
	return res
}

func (o *ConnectToDeviceRequest_KeepAlive) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConnectToDeviceRequest_KeepAlive))
}

func (o *ConnectToDeviceRequest_KeepAlive) Clone() *ConnectToDeviceRequest_KeepAlive {
	if o == nil {
		return nil
	}
	result := &ConnectToDeviceRequest_KeepAlive{}
	return result
}

func (o *ConnectToDeviceRequest_KeepAlive) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConnectToDeviceRequest_KeepAlive) Merge(source *ConnectToDeviceRequest_KeepAlive) {
}

func (o *ConnectToDeviceRequest_KeepAlive) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConnectToDeviceRequest_KeepAlive))
}

func (o *ConnectToDeviceResponse) GotenObjectExt() {}

func (o *ConnectToDeviceResponse) MakeFullFieldMask() *ConnectToDeviceResponse_FieldMask {
	return FullConnectToDeviceResponse_FieldMask()
}

func (o *ConnectToDeviceResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConnectToDeviceResponse_FieldMask()
}

func (o *ConnectToDeviceResponse) MakeDiffFieldMask(other *ConnectToDeviceResponse) *ConnectToDeviceResponse_FieldMask {
	if o == nil && other == nil {
		return &ConnectToDeviceResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConnectToDeviceResponse_FieldMask()
	}

	res := &ConnectToDeviceResponse_FieldMask{}
	{
		subMask := o.GetOpenResponse().MakeDiffFieldMask(other.GetOpenResponse())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectToDeviceResponse_FieldTerminalPath{selector: ConnectToDeviceResponse_FieldPathSelectorOpenResponse})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectToDeviceResponse_FieldSubPath{selector: ConnectToDeviceResponse_FieldPathSelectorOpenResponse, subPath: subpath})
			}
		}
	}
	if string(o.GetData()) != string(other.GetData()) {
		res.Paths = append(res.Paths, &ConnectToDeviceResponse_FieldTerminalPath{selector: ConnectToDeviceResponse_FieldPathSelectorData})
	}
	if string(o.GetError()) != string(other.GetError()) {
		res.Paths = append(res.Paths, &ConnectToDeviceResponse_FieldTerminalPath{selector: ConnectToDeviceResponse_FieldPathSelectorError})
	}
	{
		subMask := o.GetAck().MakeDiffFieldMask(other.GetAck())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ConnectToDeviceResponse_FieldTerminalPath{selector: ConnectToDeviceResponse_FieldPathSelectorAck})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ConnectToDeviceResponse_FieldSubPath{selector: ConnectToDeviceResponse_FieldPathSelectorAck, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ConnectToDeviceResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConnectToDeviceResponse))
}

func (o *ConnectToDeviceResponse) Clone() *ConnectToDeviceResponse {
	if o == nil {
		return nil
	}
	result := &ConnectToDeviceResponse{}
	if o, ok := o.Msg.(*ConnectToDeviceResponse_OpenResponse_); ok {
		result.Msg = (*ConnectToDeviceResponse_OpenResponse_)(nil)
		if o != nil {
			result.Msg = &ConnectToDeviceResponse_OpenResponse_{}
			result := result.Msg.(*ConnectToDeviceResponse_OpenResponse_)
			result.OpenResponse = o.OpenResponse.Clone()
		}
	}
	if o, ok := o.Msg.(*ConnectToDeviceResponse_Data); ok {
		result.Msg = (*ConnectToDeviceResponse_Data)(nil)
		if o != nil {
			result.Msg = &ConnectToDeviceResponse_Data{}
			result := result.Msg.(*ConnectToDeviceResponse_Data)
			result.Data = make([]byte, len(o.Data))
			for i, bt := range o.Data {
				result.Data[i] = bt
			}
		}
	}
	if o, ok := o.Msg.(*ConnectToDeviceResponse_Error); ok {
		result.Msg = (*ConnectToDeviceResponse_Error)(nil)
		if o != nil {
			result.Msg = &ConnectToDeviceResponse_Error{}
			result := result.Msg.(*ConnectToDeviceResponse_Error)
			result.Error = make([]byte, len(o.Error))
			for i, bt := range o.Error {
				result.Error[i] = bt
			}
		}
	}
	if o, ok := o.Msg.(*ConnectToDeviceResponse_Ack); ok {
		result.Msg = (*ConnectToDeviceResponse_Ack)(nil)
		if o != nil {
			result.Msg = &ConnectToDeviceResponse_Ack{}
			result := result.Msg.(*ConnectToDeviceResponse_Ack)
			result.Ack = o.Ack.Clone()
		}
	}
	return result
}

func (o *ConnectToDeviceResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConnectToDeviceResponse) Merge(source *ConnectToDeviceResponse) {
	if source, ok := source.GetMsg().(*ConnectToDeviceResponse_OpenResponse_); ok {
		if dstOneOf, ok := o.Msg.(*ConnectToDeviceResponse_OpenResponse_); !ok || dstOneOf == nil {
			o.Msg = &ConnectToDeviceResponse_OpenResponse_{}
		}
		if source != nil {
			o := o.Msg.(*ConnectToDeviceResponse_OpenResponse_)
			if source.OpenResponse != nil {
				if o.OpenResponse == nil {
					o.OpenResponse = new(ConnectToDeviceResponse_OpenResponse)
				}
				o.OpenResponse.Merge(source.OpenResponse)
			}
		}
	}
	if source, ok := source.GetMsg().(*ConnectToDeviceResponse_Data); ok {
		if dstOneOf, ok := o.Msg.(*ConnectToDeviceResponse_Data); !ok || dstOneOf == nil {
			o.Msg = &ConnectToDeviceResponse_Data{}
		}
		if source != nil {
			o := o.Msg.(*ConnectToDeviceResponse_Data)
			o.Data = make([]byte, len(source.Data))
			for i, bt := range source.Data {
				o.Data[i] = bt
			}
		}
	}
	if source, ok := source.GetMsg().(*ConnectToDeviceResponse_Error); ok {
		if dstOneOf, ok := o.Msg.(*ConnectToDeviceResponse_Error); !ok || dstOneOf == nil {
			o.Msg = &ConnectToDeviceResponse_Error{}
		}
		if source != nil {
			o := o.Msg.(*ConnectToDeviceResponse_Error)
			o.Error = make([]byte, len(source.Error))
			for i, bt := range source.Error {
				o.Error[i] = bt
			}
		}
	}
	if source, ok := source.GetMsg().(*ConnectToDeviceResponse_Ack); ok {
		if dstOneOf, ok := o.Msg.(*ConnectToDeviceResponse_Ack); !ok || dstOneOf == nil {
			o.Msg = &ConnectToDeviceResponse_Ack{}
		}
		if source != nil {
			o := o.Msg.(*ConnectToDeviceResponse_Ack)
			if source.Ack != nil {
				if o.Ack == nil {
					o.Ack = new(Ack)
				}
				o.Ack.Merge(source.Ack)
			}
		}
	}
}

func (o *ConnectToDeviceResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConnectToDeviceResponse))
}

func (o *ConnectToDeviceResponse_OpenResponse) GotenObjectExt() {}

func (o *ConnectToDeviceResponse_OpenResponse) MakeFullFieldMask() *ConnectToDeviceResponse_OpenResponse_FieldMask {
	return FullConnectToDeviceResponse_OpenResponse_FieldMask()
}

func (o *ConnectToDeviceResponse_OpenResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConnectToDeviceResponse_OpenResponse_FieldMask()
}

func (o *ConnectToDeviceResponse_OpenResponse) MakeDiffFieldMask(other *ConnectToDeviceResponse_OpenResponse) *ConnectToDeviceResponse_OpenResponse_FieldMask {
	if o == nil && other == nil {
		return &ConnectToDeviceResponse_OpenResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConnectToDeviceResponse_OpenResponse_FieldMask()
	}

	res := &ConnectToDeviceResponse_OpenResponse_FieldMask{}
	return res
}

func (o *ConnectToDeviceResponse_OpenResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConnectToDeviceResponse_OpenResponse))
}

func (o *ConnectToDeviceResponse_OpenResponse) Clone() *ConnectToDeviceResponse_OpenResponse {
	if o == nil {
		return nil
	}
	result := &ConnectToDeviceResponse_OpenResponse{}
	return result
}

func (o *ConnectToDeviceResponse_OpenResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConnectToDeviceResponse_OpenResponse) Merge(source *ConnectToDeviceResponse_OpenResponse) {
}

func (o *ConnectToDeviceResponse_OpenResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConnectToDeviceResponse_OpenResponse))
}

func (o *Ack) GotenObjectExt() {}

func (o *Ack) MakeFullFieldMask() *Ack_FieldMask {
	return FullAck_FieldMask()
}

func (o *Ack) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAck_FieldMask()
}

func (o *Ack) MakeDiffFieldMask(other *Ack) *Ack_FieldMask {
	if o == nil && other == nil {
		return &Ack_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAck_FieldMask()
	}

	res := &Ack_FieldMask{}
	if o.GetProcessed() != other.GetProcessed() {
		res.Paths = append(res.Paths, &Ack_FieldTerminalPath{selector: Ack_FieldPathSelectorProcessed})
	}
	return res
}

func (o *Ack) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Ack))
}

func (o *Ack) Clone() *Ack {
	if o == nil {
		return nil
	}
	result := &Ack{}
	result.Processed = o.Processed
	return result
}

func (o *Ack) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Ack) Merge(source *Ack) {
	o.Processed = source.GetProcessed()
}

func (o *Ack) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Ack))
}
