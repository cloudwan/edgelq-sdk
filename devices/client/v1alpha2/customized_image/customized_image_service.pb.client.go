// Code generated by protoc-gen-goten-client
// API: CustomizedImageService
// DO NOT EDIT!!!

package customized_image_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	customized_image "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/customized_image"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &customized_image.CustomizedImage{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CustomizedImageServiceClient is the client API for CustomizedImageService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomizedImageServiceClient interface {
	GetCustomizedImage(ctx context.Context, in *GetCustomizedImageRequest, opts ...grpc.CallOption) (*customized_image.CustomizedImage, error)
	BatchGetCustomizedImages(ctx context.Context, in *BatchGetCustomizedImagesRequest, opts ...grpc.CallOption) (*BatchGetCustomizedImagesResponse, error)
	ListCustomizedImages(ctx context.Context, in *ListCustomizedImagesRequest, opts ...grpc.CallOption) (*ListCustomizedImagesResponse, error)
	WatchCustomizedImage(ctx context.Context, in *WatchCustomizedImageRequest, opts ...grpc.CallOption) (WatchCustomizedImageClientStream, error)
	WatchCustomizedImages(ctx context.Context, in *WatchCustomizedImagesRequest, opts ...grpc.CallOption) (WatchCustomizedImagesClientStream, error)
	CreateCustomizedImage(ctx context.Context, in *CreateCustomizedImageRequest, opts ...grpc.CallOption) (*customized_image.CustomizedImage, error)
	UpdateCustomizedImage(ctx context.Context, in *UpdateCustomizedImageRequest, opts ...grpc.CallOption) (*customized_image.CustomizedImage, error)
	DeleteCustomizedImage(ctx context.Context, in *DeleteCustomizedImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestUrl(ctx context.Context, in *RequestUrlRequest, opts ...grpc.CallOption) (*RequestUrlResponse, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewCustomizedImageServiceClient(cc grpc.ClientConnInterface) CustomizedImageServiceClient {
	return &client{cc}
}

func (c *client) GetCustomizedImage(ctx context.Context, in *GetCustomizedImageRequest, opts ...grpc.CallOption) (*customized_image.CustomizedImage, error) {
	out := new(customized_image.CustomizedImage)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1alpha2.CustomizedImageService/GetCustomizedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetCustomizedImages(ctx context.Context, in *BatchGetCustomizedImagesRequest, opts ...grpc.CallOption) (*BatchGetCustomizedImagesResponse, error) {
	out := new(BatchGetCustomizedImagesResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1alpha2.CustomizedImageService/BatchGetCustomizedImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListCustomizedImages(ctx context.Context, in *ListCustomizedImagesRequest, opts ...grpc.CallOption) (*ListCustomizedImagesResponse, error) {
	out := new(ListCustomizedImagesResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1alpha2.CustomizedImageService/ListCustomizedImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchCustomizedImage(ctx context.Context, in *WatchCustomizedImageRequest, opts ...grpc.CallOption) (WatchCustomizedImageClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchCustomizedImage",
			ServerStreams: true,
		},
		"/ntt.devices.v1alpha2.CustomizedImageService/WatchCustomizedImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchCustomizedImageWatchCustomizedImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchCustomizedImageClientStream interface {
	Recv() (*WatchCustomizedImageResponse, error)
	grpc.ClientStream
}

type watchCustomizedImageWatchCustomizedImageClient struct {
	grpc.ClientStream
}

func (x *watchCustomizedImageWatchCustomizedImageClient) Recv() (*WatchCustomizedImageResponse, error) {
	m := new(WatchCustomizedImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchCustomizedImages(ctx context.Context, in *WatchCustomizedImagesRequest, opts ...grpc.CallOption) (WatchCustomizedImagesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchCustomizedImages",
			ServerStreams: true,
		},
		"/ntt.devices.v1alpha2.CustomizedImageService/WatchCustomizedImages", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchCustomizedImagesWatchCustomizedImagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchCustomizedImagesClientStream interface {
	Recv() (*WatchCustomizedImagesResponse, error)
	grpc.ClientStream
}

type watchCustomizedImagesWatchCustomizedImagesClient struct {
	grpc.ClientStream
}

func (x *watchCustomizedImagesWatchCustomizedImagesClient) Recv() (*WatchCustomizedImagesResponse, error) {
	m := new(WatchCustomizedImagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateCustomizedImage(ctx context.Context, in *CreateCustomizedImageRequest, opts ...grpc.CallOption) (*customized_image.CustomizedImage, error) {
	out := new(customized_image.CustomizedImage)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1alpha2.CustomizedImageService/CreateCustomizedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateCustomizedImage(ctx context.Context, in *UpdateCustomizedImageRequest, opts ...grpc.CallOption) (*customized_image.CustomizedImage, error) {
	out := new(customized_image.CustomizedImage)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1alpha2.CustomizedImageService/UpdateCustomizedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteCustomizedImage(ctx context.Context, in *DeleteCustomizedImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1alpha2.CustomizedImageService/DeleteCustomizedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) RequestUrl(ctx context.Context, in *RequestUrlRequest, opts ...grpc.CallOption) (*RequestUrlResponse, error) {
	out := new(RequestUrlResponse)
	err := c.cc.Invoke(ctx, "/ntt.devices.v1alpha2.CustomizedImageService/RequestUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
