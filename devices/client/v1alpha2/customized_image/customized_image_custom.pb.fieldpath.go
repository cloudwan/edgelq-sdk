// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/customized_image_custom.proto
// DO NOT EDIT!!!

package customized_image_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	customized_image "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/customized_image"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &customized_image.CustomizedImage{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RequestUrlRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() RequestUrlRequest_FieldPathSelector
	Get(source *RequestUrlRequest) []interface{}
	GetSingle(source *RequestUrlRequest) (interface{}, bool)
	ClearValue(item *RequestUrlRequest)

	// Those methods build corresponding RequestUrlRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RequestUrlRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) RequestUrlRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RequestUrlRequest_FieldPathArrayItemValue
}

type RequestUrlRequest_FieldPathSelector int32

const (
	RequestUrlRequest_FieldPathSelectorName RequestUrlRequest_FieldPathSelector = 0
)

func (s RequestUrlRequest_FieldPathSelector) String() string {
	switch s {
	case RequestUrlRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlRequest: %d", s))
	}
}

func BuildRequestUrlRequest_FieldPath(fp gotenobject.RawFieldPath) (RequestUrlRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RequestUrlRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &RequestUrlRequest_FieldTerminalPath{selector: RequestUrlRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RequestUrlRequest", fp)
}

func ParseRequestUrlRequest_FieldPath(rawField string) (RequestUrlRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRequestUrlRequest_FieldPath(fp)
}

func MustParseRequestUrlRequest_FieldPath(rawField string) RequestUrlRequest_FieldPath {
	fp, err := ParseRequestUrlRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RequestUrlRequest_FieldTerminalPath struct {
	selector RequestUrlRequest_FieldPathSelector
}

var _ RequestUrlRequest_FieldPath = (*RequestUrlRequest_FieldTerminalPath)(nil)

func (fp *RequestUrlRequest_FieldTerminalPath) Selector() RequestUrlRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RequestUrlRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RequestUrlRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RequestUrlRequest
func (fp *RequestUrlRequest_FieldTerminalPath) Get(source *RequestUrlRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RequestUrlRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for RequestUrlRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *RequestUrlRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RequestUrlRequest))
}

// GetSingle returns value pointed by specific field of from source RequestUrlRequest
func (fp *RequestUrlRequest_FieldTerminalPath) GetSingle(source *RequestUrlRequest) (interface{}, bool) {
	switch fp.selector {
	case RequestUrlRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlRequest: %d", fp.selector))
	}
}

func (fp *RequestUrlRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RequestUrlRequest))
}

// GetDefault returns a default value of the field type
func (fp *RequestUrlRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RequestUrlRequest_FieldPathSelectorName:
		return (*customized_image.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlRequest: %d", fp.selector))
	}
}

func (fp *RequestUrlRequest_FieldTerminalPath) ClearValue(item *RequestUrlRequest) {
	if item != nil {
		switch fp.selector {
		case RequestUrlRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for RequestUrlRequest: %d", fp.selector))
		}
	}
}

func (fp *RequestUrlRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RequestUrlRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *RequestUrlRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RequestUrlRequest_FieldPathSelectorName
}

func (fp *RequestUrlRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RequestUrlRequest_FieldTerminalPath) WithIValue(value interface{}) RequestUrlRequest_FieldPathValue {
	switch fp.selector {
	case RequestUrlRequest_FieldPathSelectorName:
		return &RequestUrlRequest_FieldTerminalPathValue{RequestUrlRequest_FieldTerminalPath: *fp, value: value.(*customized_image.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlRequest: %d", fp.selector))
	}
}

func (fp *RequestUrlRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RequestUrlRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) RequestUrlRequest_FieldPathArrayOfValues {
	fpaov := &RequestUrlRequest_FieldTerminalPathArrayOfValues{RequestUrlRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case RequestUrlRequest_FieldPathSelectorName:
		return &RequestUrlRequest_FieldTerminalPathArrayOfValues{RequestUrlRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *RequestUrlRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RequestUrlRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) RequestUrlRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlRequest: %d", fp.selector))
	}
}

func (fp *RequestUrlRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RequestUrlRequest_FieldPathValue allows storing values for RequestUrlRequest fields according to their type
type RequestUrlRequest_FieldPathValue interface {
	RequestUrlRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RequestUrlRequest)
	CompareWith(*RequestUrlRequest) (cmp int, comparable bool)
}

func ParseRequestUrlRequest_FieldPathValue(pathStr, valueStr string) (RequestUrlRequest_FieldPathValue, error) {
	fp, err := ParseRequestUrlRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RequestUrlRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(RequestUrlRequest_FieldPathValue), nil
}

func MustParseRequestUrlRequest_FieldPathValue(pathStr, valueStr string) RequestUrlRequest_FieldPathValue {
	fpv, err := ParseRequestUrlRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RequestUrlRequest_FieldTerminalPathValue struct {
	RequestUrlRequest_FieldTerminalPath
	value interface{}
}

var _ RequestUrlRequest_FieldPathValue = (*RequestUrlRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RequestUrlRequest' as interface{}
func (fpv *RequestUrlRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RequestUrlRequest_FieldTerminalPathValue) AsNameValue() (*customized_image.Reference, bool) {
	res, ok := fpv.value.(*customized_image.Reference)
	return res, ok
}

// SetTo stores value for selected field for object RequestUrlRequest
func (fpv *RequestUrlRequest_FieldTerminalPathValue) SetTo(target **RequestUrlRequest) {
	if *target == nil {
		*target = new(RequestUrlRequest)
	}
	switch fpv.selector {
	case RequestUrlRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*customized_image.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlRequest: %d", fpv.selector))
	}
}

func (fpv *RequestUrlRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RequestUrlRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RequestUrlRequest_FieldTerminalPathValue' with the value under path in 'RequestUrlRequest'.
func (fpv *RequestUrlRequest_FieldTerminalPathValue) CompareWith(source *RequestUrlRequest) (int, bool) {
	switch fpv.selector {
	case RequestUrlRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*customized_image.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlRequest: %d", fpv.selector))
	}
}

func (fpv *RequestUrlRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RequestUrlRequest))
}

// RequestUrlRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for RequestUrlRequest according to their type
// Present only for array (repeated) types.
type RequestUrlRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RequestUrlRequest_FieldPath
	ContainsValue(*RequestUrlRequest) bool
}

// ParseRequestUrlRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRequestUrlRequest_FieldPathArrayItemValue(pathStr, valueStr string) (RequestUrlRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseRequestUrlRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RequestUrlRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RequestUrlRequest_FieldPathArrayItemValue), nil
}

func MustParseRequestUrlRequest_FieldPathArrayItemValue(pathStr, valueStr string) RequestUrlRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseRequestUrlRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RequestUrlRequest_FieldTerminalPathArrayItemValue struct {
	RequestUrlRequest_FieldTerminalPath
	value interface{}
}

var _ RequestUrlRequest_FieldPathArrayItemValue = (*RequestUrlRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RequestUrlRequest as interface{}
func (fpaiv *RequestUrlRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *RequestUrlRequest_FieldTerminalPathArrayItemValue) GetSingle(source *RequestUrlRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RequestUrlRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RequestUrlRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RequestUrlRequest'
func (fpaiv *RequestUrlRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *RequestUrlRequest) bool {
	slice := fpaiv.RequestUrlRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RequestUrlRequest_FieldPathArrayOfValues allows storing slice of values for RequestUrlRequest fields according to their type
type RequestUrlRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RequestUrlRequest_FieldPath
}

func ParseRequestUrlRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (RequestUrlRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseRequestUrlRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RequestUrlRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RequestUrlRequest_FieldPathArrayOfValues), nil
}

func MustParseRequestUrlRequest_FieldPathArrayOfValues(pathStr, valuesStr string) RequestUrlRequest_FieldPathArrayOfValues {
	fpaov, err := ParseRequestUrlRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RequestUrlRequest_FieldTerminalPathArrayOfValues struct {
	RequestUrlRequest_FieldTerminalPath
	values interface{}
}

var _ RequestUrlRequest_FieldPathArrayOfValues = (*RequestUrlRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RequestUrlRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RequestUrlRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*customized_image.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RequestUrlRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*customized_image.Reference, bool) {
	res, ok := fpaov.values.([]*customized_image.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type RequestUrlResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() RequestUrlResponse_FieldPathSelector
	Get(source *RequestUrlResponse) []interface{}
	GetSingle(source *RequestUrlResponse) (interface{}, bool)
	ClearValue(item *RequestUrlResponse)

	// Those methods build corresponding RequestUrlResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) RequestUrlResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) RequestUrlResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) RequestUrlResponse_FieldPathArrayItemValue
}

type RequestUrlResponse_FieldPathSelector int32

const (
	RequestUrlResponse_FieldPathSelectorUrl     RequestUrlResponse_FieldPathSelector = 0
	RequestUrlResponse_FieldPathSelectorHeaders RequestUrlResponse_FieldPathSelector = 1
)

func (s RequestUrlResponse_FieldPathSelector) String() string {
	switch s {
	case RequestUrlResponse_FieldPathSelectorUrl:
		return "url"
	case RequestUrlResponse_FieldPathSelectorHeaders:
		return "headers"
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlResponse: %d", s))
	}
}

func BuildRequestUrlResponse_FieldPath(fp gotenobject.RawFieldPath) (RequestUrlResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object RequestUrlResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "url":
			return &RequestUrlResponse_FieldTerminalPath{selector: RequestUrlResponse_FieldPathSelectorUrl}, nil
		case "headers":
			return &RequestUrlResponse_FieldTerminalPath{selector: RequestUrlResponse_FieldPathSelectorHeaders}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object RequestUrlResponse", fp)
}

func ParseRequestUrlResponse_FieldPath(rawField string) (RequestUrlResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildRequestUrlResponse_FieldPath(fp)
}

func MustParseRequestUrlResponse_FieldPath(rawField string) RequestUrlResponse_FieldPath {
	fp, err := ParseRequestUrlResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type RequestUrlResponse_FieldTerminalPath struct {
	selector RequestUrlResponse_FieldPathSelector
}

var _ RequestUrlResponse_FieldPath = (*RequestUrlResponse_FieldTerminalPath)(nil)

func (fp *RequestUrlResponse_FieldTerminalPath) Selector() RequestUrlResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *RequestUrlResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *RequestUrlResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source RequestUrlResponse
func (fp *RequestUrlResponse_FieldTerminalPath) Get(source *RequestUrlResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case RequestUrlResponse_FieldPathSelectorUrl:
			values = append(values, source.Url)
		case RequestUrlResponse_FieldPathSelectorHeaders:
			for _, value := range source.GetHeaders() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for RequestUrlResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *RequestUrlResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*RequestUrlResponse))
}

// GetSingle returns value pointed by specific field of from source RequestUrlResponse
func (fp *RequestUrlResponse_FieldTerminalPath) GetSingle(source *RequestUrlResponse) (interface{}, bool) {
	switch fp.selector {
	case RequestUrlResponse_FieldPathSelectorUrl:
		return source.GetUrl(), source != nil
	case RequestUrlResponse_FieldPathSelectorHeaders:
		res := source.GetHeaders()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlResponse: %d", fp.selector))
	}
}

func (fp *RequestUrlResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*RequestUrlResponse))
}

// GetDefault returns a default value of the field type
func (fp *RequestUrlResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case RequestUrlResponse_FieldPathSelectorUrl:
		return ""
	case RequestUrlResponse_FieldPathSelectorHeaders:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlResponse: %d", fp.selector))
	}
}

func (fp *RequestUrlResponse_FieldTerminalPath) ClearValue(item *RequestUrlResponse) {
	if item != nil {
		switch fp.selector {
		case RequestUrlResponse_FieldPathSelectorUrl:
			item.Url = ""
		case RequestUrlResponse_FieldPathSelectorHeaders:
			item.Headers = nil
		default:
			panic(fmt.Sprintf("Invalid selector for RequestUrlResponse: %d", fp.selector))
		}
	}
}

func (fp *RequestUrlResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*RequestUrlResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *RequestUrlResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == RequestUrlResponse_FieldPathSelectorUrl ||
		fp.selector == RequestUrlResponse_FieldPathSelectorHeaders
}

func (fp *RequestUrlResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *RequestUrlResponse_FieldTerminalPath) WithIValue(value interface{}) RequestUrlResponse_FieldPathValue {
	switch fp.selector {
	case RequestUrlResponse_FieldPathSelectorUrl:
		return &RequestUrlResponse_FieldTerminalPathValue{RequestUrlResponse_FieldTerminalPath: *fp, value: value.(string)}
	case RequestUrlResponse_FieldPathSelectorHeaders:
		return &RequestUrlResponse_FieldTerminalPathValue{RequestUrlResponse_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlResponse: %d", fp.selector))
	}
}

func (fp *RequestUrlResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *RequestUrlResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) RequestUrlResponse_FieldPathArrayOfValues {
	fpaov := &RequestUrlResponse_FieldTerminalPathArrayOfValues{RequestUrlResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case RequestUrlResponse_FieldPathSelectorUrl:
		return &RequestUrlResponse_FieldTerminalPathArrayOfValues{RequestUrlResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case RequestUrlResponse_FieldPathSelectorHeaders:
		return &RequestUrlResponse_FieldTerminalPathArrayOfValues{RequestUrlResponse_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *RequestUrlResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *RequestUrlResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) RequestUrlResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case RequestUrlResponse_FieldPathSelectorHeaders:
		return &RequestUrlResponse_FieldTerminalPathArrayItemValue{RequestUrlResponse_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlResponse: %d", fp.selector))
	}
}

func (fp *RequestUrlResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// RequestUrlResponse_FieldPathValue allows storing values for RequestUrlResponse fields according to their type
type RequestUrlResponse_FieldPathValue interface {
	RequestUrlResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **RequestUrlResponse)
	CompareWith(*RequestUrlResponse) (cmp int, comparable bool)
}

func ParseRequestUrlResponse_FieldPathValue(pathStr, valueStr string) (RequestUrlResponse_FieldPathValue, error) {
	fp, err := ParseRequestUrlResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RequestUrlResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(RequestUrlResponse_FieldPathValue), nil
}

func MustParseRequestUrlResponse_FieldPathValue(pathStr, valueStr string) RequestUrlResponse_FieldPathValue {
	fpv, err := ParseRequestUrlResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type RequestUrlResponse_FieldTerminalPathValue struct {
	RequestUrlResponse_FieldTerminalPath
	value interface{}
}

var _ RequestUrlResponse_FieldPathValue = (*RequestUrlResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'RequestUrlResponse' as interface{}
func (fpv *RequestUrlResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *RequestUrlResponse_FieldTerminalPathValue) AsUrlValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *RequestUrlResponse_FieldTerminalPathValue) AsHeadersValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object RequestUrlResponse
func (fpv *RequestUrlResponse_FieldTerminalPathValue) SetTo(target **RequestUrlResponse) {
	if *target == nil {
		*target = new(RequestUrlResponse)
	}
	switch fpv.selector {
	case RequestUrlResponse_FieldPathSelectorUrl:
		(*target).Url = fpv.value.(string)
	case RequestUrlResponse_FieldPathSelectorHeaders:
		(*target).Headers = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlResponse: %d", fpv.selector))
	}
}

func (fpv *RequestUrlResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*RequestUrlResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'RequestUrlResponse_FieldTerminalPathValue' with the value under path in 'RequestUrlResponse'.
func (fpv *RequestUrlResponse_FieldTerminalPathValue) CompareWith(source *RequestUrlResponse) (int, bool) {
	switch fpv.selector {
	case RequestUrlResponse_FieldPathSelectorUrl:
		leftValue := fpv.value.(string)
		rightValue := source.GetUrl()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case RequestUrlResponse_FieldPathSelectorHeaders:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for RequestUrlResponse: %d", fpv.selector))
	}
}

func (fpv *RequestUrlResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*RequestUrlResponse))
}

// RequestUrlResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for RequestUrlResponse according to their type
// Present only for array (repeated) types.
type RequestUrlResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	RequestUrlResponse_FieldPath
	ContainsValue(*RequestUrlResponse) bool
}

// ParseRequestUrlResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseRequestUrlResponse_FieldPathArrayItemValue(pathStr, valueStr string) (RequestUrlResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseRequestUrlResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RequestUrlResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(RequestUrlResponse_FieldPathArrayItemValue), nil
}

func MustParseRequestUrlResponse_FieldPathArrayItemValue(pathStr, valueStr string) RequestUrlResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseRequestUrlResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type RequestUrlResponse_FieldTerminalPathArrayItemValue struct {
	RequestUrlResponse_FieldTerminalPath
	value interface{}
}

var _ RequestUrlResponse_FieldPathArrayItemValue = (*RequestUrlResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object RequestUrlResponse as interface{}
func (fpaiv *RequestUrlResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *RequestUrlResponse_FieldTerminalPathArrayItemValue) AsHeadersItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *RequestUrlResponse_FieldTerminalPathArrayItemValue) GetSingle(source *RequestUrlResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *RequestUrlResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*RequestUrlResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'RequestUrlResponse'
func (fpaiv *RequestUrlResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *RequestUrlResponse) bool {
	slice := fpaiv.RequestUrlResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// RequestUrlResponse_FieldPathArrayOfValues allows storing slice of values for RequestUrlResponse fields according to their type
type RequestUrlResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	RequestUrlResponse_FieldPath
}

func ParseRequestUrlResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (RequestUrlResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseRequestUrlResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing RequestUrlResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(RequestUrlResponse_FieldPathArrayOfValues), nil
}

func MustParseRequestUrlResponse_FieldPathArrayOfValues(pathStr, valuesStr string) RequestUrlResponse_FieldPathArrayOfValues {
	fpaov, err := ParseRequestUrlResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type RequestUrlResponse_FieldTerminalPathArrayOfValues struct {
	RequestUrlResponse_FieldTerminalPath
	values interface{}
}

var _ RequestUrlResponse_FieldPathArrayOfValues = (*RequestUrlResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *RequestUrlResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case RequestUrlResponse_FieldPathSelectorUrl:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case RequestUrlResponse_FieldPathSelectorHeaders:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *RequestUrlResponse_FieldTerminalPathArrayOfValues) AsUrlArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *RequestUrlResponse_FieldTerminalPathArrayOfValues) AsHeadersArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
