// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/customized_image_service.proto
// DO NOT EDIT!!!

package customized_image_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	customized_image "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/customized_image"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &customized_image.CustomizedImage{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

type GetCustomizedImageRequest_FieldMask struct {
	Paths []GetCustomizedImageRequest_FieldPath
}

func FullGetCustomizedImageRequest_FieldMask() *GetCustomizedImageRequest_FieldMask {
	res := &GetCustomizedImageRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetCustomizedImageRequest_FieldTerminalPath{selector: GetCustomizedImageRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetCustomizedImageRequest_FieldTerminalPath{selector: GetCustomizedImageRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetCustomizedImageRequest_FieldTerminalPath{selector: GetCustomizedImageRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetCustomizedImageRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetCustomizedImageRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetCustomizedImageRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetCustomizedImageRequest_FieldPath(raw)
	})
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetCustomizedImageRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) Subtract(other *GetCustomizedImageRequest_FieldMask) *GetCustomizedImageRequest_FieldMask {
	result := &GetCustomizedImageRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetCustomizedImageRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetCustomizedImageRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetCustomizedImageRequest_FieldMask) FilterInputFields() *GetCustomizedImageRequest_FieldMask {
	result := &GetCustomizedImageRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetCustomizedImageRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetCustomizedImageRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetCustomizedImageRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetCustomizedImageRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetCustomizedImageRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) AppendPath(path GetCustomizedImageRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetCustomizedImageRequest_FieldPath))
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) GetPaths() []GetCustomizedImageRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetCustomizedImageRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) Set(target, source *GetCustomizedImageRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetCustomizedImageRequest), source.(*GetCustomizedImageRequest))
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) Project(source *GetCustomizedImageRequest) *GetCustomizedImageRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetCustomizedImageRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetCustomizedImageRequest_FieldTerminalPath:
			switch tp.selector {
			case GetCustomizedImageRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetCustomizedImageRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetCustomizedImageRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetCustomizedImageRequest))
}

func (fieldMask *GetCustomizedImageRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetCustomizedImagesRequest_FieldMask struct {
	Paths []BatchGetCustomizedImagesRequest_FieldPath
}

func FullBatchGetCustomizedImagesRequest_FieldMask() *BatchGetCustomizedImagesRequest_FieldMask {
	res := &BatchGetCustomizedImagesRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetCustomizedImagesRequest_FieldTerminalPath{selector: BatchGetCustomizedImagesRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetCustomizedImagesRequest_FieldTerminalPath{selector: BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetCustomizedImagesRequest_FieldTerminalPath{selector: BatchGetCustomizedImagesRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetCustomizedImagesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetCustomizedImagesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetCustomizedImagesRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) Subtract(other *BatchGetCustomizedImagesRequest_FieldMask) *BatchGetCustomizedImagesRequest_FieldMask {
	result := &BatchGetCustomizedImagesRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetCustomizedImagesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetCustomizedImagesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) FilterInputFields() *BatchGetCustomizedImagesRequest_FieldMask {
	result := &BatchGetCustomizedImagesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetCustomizedImagesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetCustomizedImagesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetCustomizedImagesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetCustomizedImagesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) AppendPath(path BatchGetCustomizedImagesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetCustomizedImagesRequest_FieldPath))
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) GetPaths() []BatchGetCustomizedImagesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetCustomizedImagesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) Set(target, source *BatchGetCustomizedImagesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetCustomizedImagesRequest), source.(*BatchGetCustomizedImagesRequest))
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) Project(source *BatchGetCustomizedImagesRequest) *BatchGetCustomizedImagesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetCustomizedImagesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetCustomizedImagesRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetCustomizedImagesRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetCustomizedImagesRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetCustomizedImagesRequest))
}

func (fieldMask *BatchGetCustomizedImagesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetCustomizedImagesResponse_FieldMask struct {
	Paths []BatchGetCustomizedImagesResponse_FieldPath
}

func FullBatchGetCustomizedImagesResponse_FieldMask() *BatchGetCustomizedImagesResponse_FieldMask {
	res := &BatchGetCustomizedImagesResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetCustomizedImagesResponse_FieldTerminalPath{selector: BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages})
	res.Paths = append(res.Paths, &BatchGetCustomizedImagesResponse_FieldTerminalPath{selector: BatchGetCustomizedImagesResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetCustomizedImagesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetCustomizedImagesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetCustomizedImagesResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) Subtract(other *BatchGetCustomizedImagesResponse_FieldMask) *BatchGetCustomizedImagesResponse_FieldMask {
	result := &BatchGetCustomizedImagesResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetCustomizedImagesResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages: &customized_image.CustomizedImage_FieldMask{},
	}
	mySubMasks := map[BatchGetCustomizedImagesResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages: &customized_image.CustomizedImage_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetCustomizedImagesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetCustomizedImagesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetCustomizedImagesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
						mySubMasks[BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages] = customized_image.FullCustomizedImage_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetCustomizedImagesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetCustomizedImagesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetCustomizedImagesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) FilterInputFields() *BatchGetCustomizedImagesResponse_FieldMask {
	result := &BatchGetCustomizedImagesResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
			if _, ok := path.(*BatchGetCustomizedImagesResponse_FieldTerminalPath); ok {
				for _, subpath := range customized_image.FullCustomizedImage_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetCustomizedImagesResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetCustomizedImagesResponse_FieldSubPath); ok {
				selectedMask := &customized_image.CustomizedImage_FieldMask{
					Paths: []customized_image.CustomizedImage_FieldPath{sub.subPath.(customized_image.CustomizedImage_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetCustomizedImagesResponse_FieldSubPath{selector: BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetCustomizedImagesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetCustomizedImagesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetCustomizedImagesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetCustomizedImagesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) AppendPath(path BatchGetCustomizedImagesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetCustomizedImagesResponse_FieldPath))
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) GetPaths() []BatchGetCustomizedImagesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetCustomizedImagesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) Set(target, source *BatchGetCustomizedImagesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetCustomizedImagesResponse), source.(*BatchGetCustomizedImagesResponse))
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) Project(source *BatchGetCustomizedImagesResponse) *BatchGetCustomizedImagesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetCustomizedImagesResponse{}
	customizedImagesMask := &customized_image.CustomizedImage_FieldMask{}
	wholeCustomizedImagesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetCustomizedImagesResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
				result.CustomizedImages = source.CustomizedImages
				wholeCustomizedImagesAccepted = true
			case BatchGetCustomizedImagesResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetCustomizedImagesResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
				customizedImagesMask.AppendPath(tp.subPath.(customized_image.CustomizedImage_FieldPath))
			}
		}
	}
	if wholeCustomizedImagesAccepted == false && len(customizedImagesMask.Paths) > 0 {
		for _, sourceItem := range source.GetCustomizedImages() {
			result.CustomizedImages = append(result.CustomizedImages, customizedImagesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetCustomizedImagesResponse))
}

func (fieldMask *BatchGetCustomizedImagesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListCustomizedImagesRequest_FieldMask struct {
	Paths []ListCustomizedImagesRequest_FieldPath
}

func FullListCustomizedImagesRequest_FieldMask() *ListCustomizedImagesRequest_FieldMask {
	res := &ListCustomizedImagesRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo})
	return res
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListCustomizedImagesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListCustomizedImagesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListCustomizedImagesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListCustomizedImagesRequest_FieldPath(raw)
	})
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) Subtract(other *ListCustomizedImagesRequest_FieldMask) *ListCustomizedImagesRequest_FieldMask {
	result := &ListCustomizedImagesRequest_FieldMask{}
	removedSelectors := make([]bool, 8)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListCustomizedImagesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListCustomizedImagesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListCustomizedImagesRequest_FieldMask) FilterInputFields() *ListCustomizedImagesRequest_FieldMask {
	result := &ListCustomizedImagesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListCustomizedImagesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListCustomizedImagesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListCustomizedImagesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListCustomizedImagesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListCustomizedImagesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) AppendPath(path ListCustomizedImagesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListCustomizedImagesRequest_FieldPath))
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) GetPaths() []ListCustomizedImagesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListCustomizedImagesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) Set(target, source *ListCustomizedImagesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListCustomizedImagesRequest), source.(*ListCustomizedImagesRequest))
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) Project(source *ListCustomizedImagesRequest) *ListCustomizedImagesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListCustomizedImagesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListCustomizedImagesRequest_FieldTerminalPath:
			switch tp.selector {
			case ListCustomizedImagesRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListCustomizedImagesRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListCustomizedImagesRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListCustomizedImagesRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListCustomizedImagesRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListCustomizedImagesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListCustomizedImagesRequest_FieldPathSelectorView:
				result.View = source.View
			case ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo:
				result.IncludePagingInfo = source.IncludePagingInfo
			}
		}
	}
	return result
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListCustomizedImagesRequest))
}

func (fieldMask *ListCustomizedImagesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListCustomizedImagesResponse_FieldMask struct {
	Paths []ListCustomizedImagesResponse_FieldPath
}

func FullListCustomizedImagesResponse_FieldMask() *ListCustomizedImagesResponse_FieldMask {
	res := &ListCustomizedImagesResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages})
	res.Paths = append(res.Paths, &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorNextPageToken})
	res.Paths = append(res.Paths, &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset})
	res.Paths = append(res.Paths, &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount})
	return res
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListCustomizedImagesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListCustomizedImagesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListCustomizedImagesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListCustomizedImagesResponse_FieldPath(raw)
	})
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) Subtract(other *ListCustomizedImagesResponse_FieldMask) *ListCustomizedImagesResponse_FieldMask {
	result := &ListCustomizedImagesResponse_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[ListCustomizedImagesResponse_FieldPathSelector]gotenobject.FieldMask{
		ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages: &customized_image.CustomizedImage_FieldMask{},
	}
	mySubMasks := map[ListCustomizedImagesResponse_FieldPathSelector]gotenobject.FieldMask{
		ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages: &customized_image.CustomizedImage_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListCustomizedImagesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListCustomizedImagesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListCustomizedImagesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
						mySubMasks[ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages] = customized_image.FullCustomizedImage_FieldMask()
					}
				} else if tp, ok := path.(*ListCustomizedImagesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListCustomizedImagesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListCustomizedImagesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListCustomizedImagesResponse_FieldMask) FilterInputFields() *ListCustomizedImagesResponse_FieldMask {
	result := &ListCustomizedImagesResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
			if _, ok := path.(*ListCustomizedImagesResponse_FieldTerminalPath); ok {
				for _, subpath := range customized_image.FullCustomizedImage_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListCustomizedImagesResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListCustomizedImagesResponse_FieldSubPath); ok {
				selectedMask := &customized_image.CustomizedImage_FieldMask{
					Paths: []customized_image.CustomizedImage_FieldPath{sub.subPath.(customized_image.CustomizedImage_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListCustomizedImagesResponse_FieldSubPath{selector: ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListCustomizedImagesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListCustomizedImagesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListCustomizedImagesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListCustomizedImagesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListCustomizedImagesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) AppendPath(path ListCustomizedImagesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListCustomizedImagesResponse_FieldPath))
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) GetPaths() []ListCustomizedImagesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListCustomizedImagesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) Set(target, source *ListCustomizedImagesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListCustomizedImagesResponse), source.(*ListCustomizedImagesResponse))
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) Project(source *ListCustomizedImagesResponse) *ListCustomizedImagesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListCustomizedImagesResponse{}
	customizedImagesMask := &customized_image.CustomizedImage_FieldMask{}
	wholeCustomizedImagesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListCustomizedImagesResponse_FieldTerminalPath:
			switch tp.selector {
			case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
				result.CustomizedImages = source.CustomizedImages
				wholeCustomizedImagesAccepted = true
			case ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListCustomizedImagesResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			case ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset:
				result.CurrentOffset = source.CurrentOffset
			case ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount:
				result.TotalResultsCount = source.TotalResultsCount
			}
		case *ListCustomizedImagesResponse_FieldSubPath:
			switch tp.selector {
			case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
				customizedImagesMask.AppendPath(tp.subPath.(customized_image.CustomizedImage_FieldPath))
			}
		}
	}
	if wholeCustomizedImagesAccepted == false && len(customizedImagesMask.Paths) > 0 {
		for _, sourceItem := range source.GetCustomizedImages() {
			result.CustomizedImages = append(result.CustomizedImages, customizedImagesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListCustomizedImagesResponse))
}

func (fieldMask *ListCustomizedImagesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchCustomizedImageRequest_FieldMask struct {
	Paths []WatchCustomizedImageRequest_FieldPath
}

func FullWatchCustomizedImageRequest_FieldMask() *WatchCustomizedImageRequest_FieldMask {
	res := &WatchCustomizedImageRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchCustomizedImageRequest_FieldTerminalPath{selector: WatchCustomizedImageRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchCustomizedImageRequest_FieldTerminalPath{selector: WatchCustomizedImageRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchCustomizedImageRequest_FieldTerminalPath{selector: WatchCustomizedImageRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchCustomizedImageRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchCustomizedImageRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchCustomizedImageRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchCustomizedImageRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) Subtract(other *WatchCustomizedImageRequest_FieldMask) *WatchCustomizedImageRequest_FieldMask {
	result := &WatchCustomizedImageRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchCustomizedImageRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchCustomizedImageRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchCustomizedImageRequest_FieldMask) FilterInputFields() *WatchCustomizedImageRequest_FieldMask {
	result := &WatchCustomizedImageRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchCustomizedImageRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchCustomizedImageRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchCustomizedImageRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchCustomizedImageRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchCustomizedImageRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) AppendPath(path WatchCustomizedImageRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchCustomizedImageRequest_FieldPath))
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) GetPaths() []WatchCustomizedImageRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchCustomizedImageRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) Set(target, source *WatchCustomizedImageRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchCustomizedImageRequest), source.(*WatchCustomizedImageRequest))
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) Project(source *WatchCustomizedImageRequest) *WatchCustomizedImageRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchCustomizedImageRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchCustomizedImageRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchCustomizedImageRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchCustomizedImageRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchCustomizedImageRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchCustomizedImageRequest))
}

func (fieldMask *WatchCustomizedImageRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchCustomizedImageResponse_FieldMask struct {
	Paths []WatchCustomizedImageResponse_FieldPath
}

func FullWatchCustomizedImageResponse_FieldMask() *WatchCustomizedImageResponse_FieldMask {
	res := &WatchCustomizedImageResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchCustomizedImageResponse_FieldTerminalPath{selector: WatchCustomizedImageResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchCustomizedImageResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchCustomizedImageResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchCustomizedImageResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchCustomizedImageResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) Subtract(other *WatchCustomizedImageResponse_FieldMask) *WatchCustomizedImageResponse_FieldMask {
	result := &WatchCustomizedImageResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchCustomizedImageResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchCustomizedImageResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchCustomizedImageResponse_FieldMask) FilterInputFields() *WatchCustomizedImageResponse_FieldMask {
	result := &WatchCustomizedImageResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchCustomizedImageResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchCustomizedImageResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchCustomizedImageResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchCustomizedImageResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchCustomizedImageResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) AppendPath(path WatchCustomizedImageResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchCustomizedImageResponse_FieldPath))
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) GetPaths() []WatchCustomizedImageResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchCustomizedImageResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) Set(target, source *WatchCustomizedImageResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchCustomizedImageResponse), source.(*WatchCustomizedImageResponse))
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) Project(source *WatchCustomizedImageResponse) *WatchCustomizedImageResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchCustomizedImageResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchCustomizedImageResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchCustomizedImageResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchCustomizedImageResponse))
}

func (fieldMask *WatchCustomizedImageResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchCustomizedImagesRequest_FieldMask struct {
	Paths []WatchCustomizedImagesRequest_FieldPath
}

func FullWatchCustomizedImagesRequest_FieldMask() *WatchCustomizedImagesRequest_FieldMask {
	res := &WatchCustomizedImagesRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchCustomizedImagesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchCustomizedImagesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchCustomizedImagesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchCustomizedImagesRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) Subtract(other *WatchCustomizedImagesRequest_FieldMask) *WatchCustomizedImagesRequest_FieldMask {
	result := &WatchCustomizedImagesRequest_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchCustomizedImagesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchCustomizedImagesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchCustomizedImagesRequest_FieldMask) FilterInputFields() *WatchCustomizedImagesRequest_FieldMask {
	result := &WatchCustomizedImagesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchCustomizedImagesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchCustomizedImagesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchCustomizedImagesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchCustomizedImagesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchCustomizedImagesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) AppendPath(path WatchCustomizedImagesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchCustomizedImagesRequest_FieldPath))
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) GetPaths() []WatchCustomizedImagesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchCustomizedImagesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) Set(target, source *WatchCustomizedImagesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchCustomizedImagesRequest), source.(*WatchCustomizedImagesRequest))
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) Project(source *WatchCustomizedImagesRequest) *WatchCustomizedImagesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchCustomizedImagesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchCustomizedImagesRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchCustomizedImagesRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchCustomizedImagesRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchCustomizedImagesRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchCustomizedImagesRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchCustomizedImagesRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchCustomizedImagesRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchCustomizedImagesRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchCustomizedImagesRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchCustomizedImagesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchCustomizedImagesRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchCustomizedImagesRequest))
}

func (fieldMask *WatchCustomizedImagesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchCustomizedImagesResponse_FieldMask struct {
	Paths []WatchCustomizedImagesResponse_FieldPath
}

func FullWatchCustomizedImagesResponse_FieldMask() *WatchCustomizedImagesResponse_FieldMask {
	res := &WatchCustomizedImagesResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges})
	res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchCustomizedImagesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchCustomizedImagesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchCustomizedImagesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchCustomizedImagesResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) Subtract(other *WatchCustomizedImagesResponse_FieldMask) *WatchCustomizedImagesResponse_FieldMask {
	result := &WatchCustomizedImagesResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchCustomizedImagesResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange: &WatchCustomizedImagesResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchCustomizedImagesResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange: &WatchCustomizedImagesResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchCustomizedImagesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchCustomizedImagesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchCustomizedImagesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange] = FullWatchCustomizedImagesResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchCustomizedImagesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchCustomizedImagesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchCustomizedImagesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchCustomizedImagesResponse_FieldMask) FilterInputFields() *WatchCustomizedImagesResponse_FieldMask {
	result := &WatchCustomizedImagesResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchCustomizedImagesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchCustomizedImagesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchCustomizedImagesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchCustomizedImagesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchCustomizedImagesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) AppendPath(path WatchCustomizedImagesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchCustomizedImagesResponse_FieldPath))
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) GetPaths() []WatchCustomizedImagesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchCustomizedImagesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) Set(target, source *WatchCustomizedImagesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchCustomizedImagesResponse), source.(*WatchCustomizedImagesResponse))
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) Project(source *WatchCustomizedImagesResponse) *WatchCustomizedImagesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchCustomizedImagesResponse{}
	pageTokenChangeMask := &WatchCustomizedImagesResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchCustomizedImagesResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges:
				result.CustomizedImageChanges = source.CustomizedImageChanges
			case WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchCustomizedImagesResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchCustomizedImagesResponse_FieldSubPath:
			switch tp.selector {
			case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchCustomizedImagesResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchCustomizedImagesResponse))
}

func (fieldMask *WatchCustomizedImagesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchCustomizedImagesResponse_PageTokenChange_FieldMask struct {
	Paths []WatchCustomizedImagesResponsePageTokenChange_FieldPath
}

func FullWatchCustomizedImagesResponse_PageTokenChange_FieldMask() *WatchCustomizedImagesResponse_PageTokenChange_FieldMask {
	res := &WatchCustomizedImagesResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath{selector: WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath{selector: WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchCustomizedImagesResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchCustomizedImagesResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) Subtract(other *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) *WatchCustomizedImagesResponse_PageTokenChange_FieldMask {
	result := &WatchCustomizedImagesResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchCustomizedImagesResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchCustomizedImagesResponse_PageTokenChange_FieldMask {
	result := &WatchCustomizedImagesResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchCustomizedImagesResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchCustomizedImagesResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchCustomizedImagesResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchCustomizedImagesResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) AppendPath(path WatchCustomizedImagesResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchCustomizedImagesResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) GetPaths() []WatchCustomizedImagesResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchCustomizedImagesResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) Set(target, source *WatchCustomizedImagesResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchCustomizedImagesResponse_PageTokenChange), source.(*WatchCustomizedImagesResponse_PageTokenChange))
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) Project(source *WatchCustomizedImagesResponse_PageTokenChange) *WatchCustomizedImagesResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchCustomizedImagesResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchCustomizedImagesResponse_PageTokenChange))
}

func (fieldMask *WatchCustomizedImagesResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateCustomizedImageRequest_FieldMask struct {
	Paths []CreateCustomizedImageRequest_FieldPath
}

func FullCreateCustomizedImageRequest_FieldMask() *CreateCustomizedImageRequest_FieldMask {
	res := &CreateCustomizedImageRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateCustomizedImageRequest_FieldTerminalPath{selector: CreateCustomizedImageRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateCustomizedImageRequest_FieldTerminalPath{selector: CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage})
	return res
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateCustomizedImageRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateCustomizedImageRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateCustomizedImageRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateCustomizedImageRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) Subtract(other *CreateCustomizedImageRequest_FieldMask) *CreateCustomizedImageRequest_FieldMask {
	result := &CreateCustomizedImageRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateCustomizedImageRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage: &customized_image.CustomizedImage_FieldMask{},
	}
	mySubMasks := map[CreateCustomizedImageRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage: &customized_image.CustomizedImage_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateCustomizedImageRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateCustomizedImageRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateCustomizedImageRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
						mySubMasks[CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage] = customized_image.FullCustomizedImage_FieldMask()
					}
				} else if tp, ok := path.(*CreateCustomizedImageRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateCustomizedImageRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateCustomizedImageRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateCustomizedImageRequest_FieldMask) FilterInputFields() *CreateCustomizedImageRequest_FieldMask {
	result := &CreateCustomizedImageRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
			if _, ok := path.(*CreateCustomizedImageRequest_FieldTerminalPath); ok {
				for _, subpath := range customized_image.FullCustomizedImage_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateCustomizedImageRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateCustomizedImageRequest_FieldSubPath); ok {
				selectedMask := &customized_image.CustomizedImage_FieldMask{
					Paths: []customized_image.CustomizedImage_FieldPath{sub.subPath.(customized_image.CustomizedImage_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateCustomizedImageRequest_FieldSubPath{selector: CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateCustomizedImageRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateCustomizedImageRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateCustomizedImageRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateCustomizedImageRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateCustomizedImageRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) AppendPath(path CreateCustomizedImageRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateCustomizedImageRequest_FieldPath))
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) GetPaths() []CreateCustomizedImageRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateCustomizedImageRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) Set(target, source *CreateCustomizedImageRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateCustomizedImageRequest), source.(*CreateCustomizedImageRequest))
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) Project(source *CreateCustomizedImageRequest) *CreateCustomizedImageRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateCustomizedImageRequest{}
	customizedImageMask := &customized_image.CustomizedImage_FieldMask{}
	wholeCustomizedImageAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateCustomizedImageRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateCustomizedImageRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
				result.CustomizedImage = source.CustomizedImage
				wholeCustomizedImageAccepted = true
			}
		case *CreateCustomizedImageRequest_FieldSubPath:
			switch tp.selector {
			case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
				customizedImageMask.AppendPath(tp.subPath.(customized_image.CustomizedImage_FieldPath))
			}
		}
	}
	if wholeCustomizedImageAccepted == false && len(customizedImageMask.Paths) > 0 {
		result.CustomizedImage = customizedImageMask.Project(source.GetCustomizedImage())
	}
	return result
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateCustomizedImageRequest))
}

func (fieldMask *CreateCustomizedImageRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateCustomizedImageRequest_FieldMask struct {
	Paths []UpdateCustomizedImageRequest_FieldPath
}

func FullUpdateCustomizedImageRequest_FieldMask() *UpdateCustomizedImageRequest_FieldMask {
	res := &UpdateCustomizedImageRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateCustomizedImageRequest_FieldTerminalPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage})
	res.Paths = append(res.Paths, &UpdateCustomizedImageRequest_FieldTerminalPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateCustomizedImageRequest_FieldTerminalPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorCas})
	res.Paths = append(res.Paths, &UpdateCustomizedImageRequest_FieldTerminalPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing})
	return res
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateCustomizedImageRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateCustomizedImageRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateCustomizedImageRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateCustomizedImageRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) Subtract(other *UpdateCustomizedImageRequest_FieldMask) *UpdateCustomizedImageRequest_FieldMask {
	result := &UpdateCustomizedImageRequest_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[UpdateCustomizedImageRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage: &customized_image.CustomizedImage_FieldMask{},
		UpdateCustomizedImageRequest_FieldPathSelectorCas:             &UpdateCustomizedImageRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateCustomizedImageRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage: &customized_image.CustomizedImage_FieldMask{},
		UpdateCustomizedImageRequest_FieldPathSelectorCas:             &UpdateCustomizedImageRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateCustomizedImageRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateCustomizedImageRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateCustomizedImageRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
						mySubMasks[UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage] = customized_image.FullCustomizedImage_FieldMask()
					case UpdateCustomizedImageRequest_FieldPathSelectorCas:
						mySubMasks[UpdateCustomizedImageRequest_FieldPathSelectorCas] = FullUpdateCustomizedImageRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateCustomizedImageRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateCustomizedImageRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateCustomizedImageRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateCustomizedImageRequest_FieldMask) FilterInputFields() *UpdateCustomizedImageRequest_FieldMask {
	result := &UpdateCustomizedImageRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
			if _, ok := path.(*UpdateCustomizedImageRequest_FieldTerminalPath); ok {
				for _, subpath := range customized_image.FullCustomizedImage_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateCustomizedImageRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateCustomizedImageRequest_FieldSubPath); ok {
				selectedMask := &customized_image.CustomizedImage_FieldMask{
					Paths: []customized_image.CustomizedImage_FieldPath{sub.subPath.(customized_image.CustomizedImage_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateCustomizedImageRequest_FieldSubPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage, subPath: allowedPath})
				}
			}
		case UpdateCustomizedImageRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateCustomizedImageRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateCustomizedImageRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateCustomizedImageRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateCustomizedImageRequest_FieldSubPath); ok {
				selectedMask := &UpdateCustomizedImageRequest_CAS_FieldMask{
					Paths: []UpdateCustomizedImageRequestCAS_FieldPath{sub.subPath.(UpdateCustomizedImageRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateCustomizedImageRequest_FieldSubPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateCustomizedImageRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateCustomizedImageRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateCustomizedImageRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateCustomizedImageRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateCustomizedImageRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) AppendPath(path UpdateCustomizedImageRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateCustomizedImageRequest_FieldPath))
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) GetPaths() []UpdateCustomizedImageRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateCustomizedImageRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) Set(target, source *UpdateCustomizedImageRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateCustomizedImageRequest), source.(*UpdateCustomizedImageRequest))
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) Project(source *UpdateCustomizedImageRequest) *UpdateCustomizedImageRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateCustomizedImageRequest{}
	customizedImageMask := &customized_image.CustomizedImage_FieldMask{}
	wholeCustomizedImageAccepted := false
	casMask := &UpdateCustomizedImageRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateCustomizedImageRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
				result.CustomizedImage = source.CustomizedImage
				wholeCustomizedImageAccepted = true
			case UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateCustomizedImageRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			case UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing:
				result.AllowMissing = source.AllowMissing
			}
		case *UpdateCustomizedImageRequest_FieldSubPath:
			switch tp.selector {
			case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
				customizedImageMask.AppendPath(tp.subPath.(customized_image.CustomizedImage_FieldPath))
			case UpdateCustomizedImageRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateCustomizedImageRequestCAS_FieldPath))
			}
		}
	}
	if wholeCustomizedImageAccepted == false && len(customizedImageMask.Paths) > 0 {
		result.CustomizedImage = customizedImageMask.Project(source.GetCustomizedImage())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateCustomizedImageRequest))
}

func (fieldMask *UpdateCustomizedImageRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateCustomizedImageRequest_CAS_FieldMask struct {
	Paths []UpdateCustomizedImageRequestCAS_FieldPath
}

func FullUpdateCustomizedImageRequest_CAS_FieldMask() *UpdateCustomizedImageRequest_CAS_FieldMask {
	res := &UpdateCustomizedImageRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateCustomizedImageRequestCAS_FieldTerminalPath{selector: UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateCustomizedImageRequestCAS_FieldTerminalPath{selector: UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateCustomizedImageRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateCustomizedImageRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateCustomizedImageRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) Subtract(other *UpdateCustomizedImageRequest_CAS_FieldMask) *UpdateCustomizedImageRequest_CAS_FieldMask {
	result := &UpdateCustomizedImageRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateCustomizedImageRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState: &customized_image.CustomizedImage_FieldMask{},
	}
	mySubMasks := map[UpdateCustomizedImageRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState: &customized_image.CustomizedImage_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateCustomizedImageRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateCustomizedImageRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateCustomizedImageRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState] = customized_image.FullCustomizedImage_FieldMask()
					}
				} else if tp, ok := path.(*UpdateCustomizedImageRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateCustomizedImageRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateCustomizedImageRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) FilterInputFields() *UpdateCustomizedImageRequest_CAS_FieldMask {
	result := &UpdateCustomizedImageRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateCustomizedImageRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range customized_image.FullCustomizedImage_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateCustomizedImageRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateCustomizedImageRequestCAS_FieldSubPath); ok {
				selectedMask := &customized_image.CustomizedImage_FieldMask{
					Paths: []customized_image.CustomizedImage_FieldPath{sub.subPath.(customized_image.CustomizedImage_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateCustomizedImageRequestCAS_FieldSubPath{selector: UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateCustomizedImageRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateCustomizedImageRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateCustomizedImageRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateCustomizedImageRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) AppendPath(path UpdateCustomizedImageRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateCustomizedImageRequestCAS_FieldPath))
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) GetPaths() []UpdateCustomizedImageRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateCustomizedImageRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) Set(target, source *UpdateCustomizedImageRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateCustomizedImageRequest_CAS), source.(*UpdateCustomizedImageRequest_CAS))
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) Project(source *UpdateCustomizedImageRequest_CAS) *UpdateCustomizedImageRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateCustomizedImageRequest_CAS{}
	conditionalStateMask := &customized_image.CustomizedImage_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateCustomizedImageRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateCustomizedImageRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(customized_image.CustomizedImage_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateCustomizedImageRequest_CAS))
}

func (fieldMask *UpdateCustomizedImageRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteCustomizedImageRequest_FieldMask struct {
	Paths []DeleteCustomizedImageRequest_FieldPath
}

func FullDeleteCustomizedImageRequest_FieldMask() *DeleteCustomizedImageRequest_FieldMask {
	res := &DeleteCustomizedImageRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteCustomizedImageRequest_FieldTerminalPath{selector: DeleteCustomizedImageRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteCustomizedImageRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteCustomizedImageRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteCustomizedImageRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteCustomizedImageRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) Subtract(other *DeleteCustomizedImageRequest_FieldMask) *DeleteCustomizedImageRequest_FieldMask {
	result := &DeleteCustomizedImageRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteCustomizedImageRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteCustomizedImageRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteCustomizedImageRequest_FieldMask) FilterInputFields() *DeleteCustomizedImageRequest_FieldMask {
	result := &DeleteCustomizedImageRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteCustomizedImageRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteCustomizedImageRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteCustomizedImageRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteCustomizedImageRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteCustomizedImageRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) AppendPath(path DeleteCustomizedImageRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteCustomizedImageRequest_FieldPath))
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) GetPaths() []DeleteCustomizedImageRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteCustomizedImageRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) Set(target, source *DeleteCustomizedImageRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteCustomizedImageRequest), source.(*DeleteCustomizedImageRequest))
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) Project(source *DeleteCustomizedImageRequest) *DeleteCustomizedImageRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteCustomizedImageRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteCustomizedImageRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteCustomizedImageRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteCustomizedImageRequest))
}

func (fieldMask *DeleteCustomizedImageRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
