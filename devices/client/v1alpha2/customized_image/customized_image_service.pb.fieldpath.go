// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/customized_image_service.proto
// DO NOT EDIT!!!

package customized_image_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	customized_image "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/customized_image"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &customized_image.CustomizedImage{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetCustomizedImageRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetCustomizedImageRequest_FieldPathSelector
	Get(source *GetCustomizedImageRequest) []interface{}
	GetSingle(source *GetCustomizedImageRequest) (interface{}, bool)
	ClearValue(item *GetCustomizedImageRequest)

	// Those methods build corresponding GetCustomizedImageRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetCustomizedImageRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetCustomizedImageRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetCustomizedImageRequest_FieldPathArrayItemValue
}

type GetCustomizedImageRequest_FieldPathSelector int32

const (
	GetCustomizedImageRequest_FieldPathSelectorName      GetCustomizedImageRequest_FieldPathSelector = 0
	GetCustomizedImageRequest_FieldPathSelectorFieldMask GetCustomizedImageRequest_FieldPathSelector = 1
	GetCustomizedImageRequest_FieldPathSelectorView      GetCustomizedImageRequest_FieldPathSelector = 2
)

func (s GetCustomizedImageRequest_FieldPathSelector) String() string {
	switch s {
	case GetCustomizedImageRequest_FieldPathSelectorName:
		return "name"
	case GetCustomizedImageRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetCustomizedImageRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetCustomizedImageRequest: %d", s))
	}
}

func BuildGetCustomizedImageRequest_FieldPath(fp gotenobject.RawFieldPath) (GetCustomizedImageRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetCustomizedImageRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetCustomizedImageRequest_FieldTerminalPath{selector: GetCustomizedImageRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetCustomizedImageRequest_FieldTerminalPath{selector: GetCustomizedImageRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetCustomizedImageRequest_FieldTerminalPath{selector: GetCustomizedImageRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetCustomizedImageRequest", fp)
}

func ParseGetCustomizedImageRequest_FieldPath(rawField string) (GetCustomizedImageRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetCustomizedImageRequest_FieldPath(fp)
}

func MustParseGetCustomizedImageRequest_FieldPath(rawField string) GetCustomizedImageRequest_FieldPath {
	fp, err := ParseGetCustomizedImageRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetCustomizedImageRequest_FieldTerminalPath struct {
	selector GetCustomizedImageRequest_FieldPathSelector
}

var _ GetCustomizedImageRequest_FieldPath = (*GetCustomizedImageRequest_FieldTerminalPath)(nil)

func (fp *GetCustomizedImageRequest_FieldTerminalPath) Selector() GetCustomizedImageRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetCustomizedImageRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetCustomizedImageRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetCustomizedImageRequest
func (fp *GetCustomizedImageRequest_FieldTerminalPath) Get(source *GetCustomizedImageRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetCustomizedImageRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetCustomizedImageRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetCustomizedImageRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetCustomizedImageRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetCustomizedImageRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetCustomizedImageRequest))
}

// GetSingle returns value pointed by specific field of from source GetCustomizedImageRequest
func (fp *GetCustomizedImageRequest_FieldTerminalPath) GetSingle(source *GetCustomizedImageRequest) (interface{}, bool) {
	switch fp.selector {
	case GetCustomizedImageRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetCustomizedImageRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetCustomizedImageRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *GetCustomizedImageRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetCustomizedImageRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetCustomizedImageRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetCustomizedImageRequest_FieldPathSelectorName:
		return (*customized_image.Reference)(nil)
	case GetCustomizedImageRequest_FieldPathSelectorFieldMask:
		return (*customized_image.CustomizedImage_FieldMask)(nil)
	case GetCustomizedImageRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *GetCustomizedImageRequest_FieldTerminalPath) ClearValue(item *GetCustomizedImageRequest) {
	if item != nil {
		switch fp.selector {
		case GetCustomizedImageRequest_FieldPathSelectorName:
			item.Name = nil
		case GetCustomizedImageRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetCustomizedImageRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetCustomizedImageRequest: %d", fp.selector))
		}
	}
}

func (fp *GetCustomizedImageRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetCustomizedImageRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetCustomizedImageRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetCustomizedImageRequest_FieldPathSelectorName ||
		fp.selector == GetCustomizedImageRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetCustomizedImageRequest_FieldPathSelectorView
}

func (fp *GetCustomizedImageRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetCustomizedImageRequest_FieldTerminalPath) WithIValue(value interface{}) GetCustomizedImageRequest_FieldPathValue {
	switch fp.selector {
	case GetCustomizedImageRequest_FieldPathSelectorName:
		return &GetCustomizedImageRequest_FieldTerminalPathValue{GetCustomizedImageRequest_FieldTerminalPath: *fp, value: value.(*customized_image.Reference)}
	case GetCustomizedImageRequest_FieldPathSelectorFieldMask:
		return &GetCustomizedImageRequest_FieldTerminalPathValue{GetCustomizedImageRequest_FieldTerminalPath: *fp, value: value.(*customized_image.CustomizedImage_FieldMask)}
	case GetCustomizedImageRequest_FieldPathSelectorView:
		return &GetCustomizedImageRequest_FieldTerminalPathValue{GetCustomizedImageRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *GetCustomizedImageRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetCustomizedImageRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetCustomizedImageRequest_FieldPathArrayOfValues {
	fpaov := &GetCustomizedImageRequest_FieldTerminalPathArrayOfValues{GetCustomizedImageRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetCustomizedImageRequest_FieldPathSelectorName:
		return &GetCustomizedImageRequest_FieldTerminalPathArrayOfValues{GetCustomizedImageRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.Reference)}
	case GetCustomizedImageRequest_FieldPathSelectorFieldMask:
		return &GetCustomizedImageRequest_FieldTerminalPathArrayOfValues{GetCustomizedImageRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.CustomizedImage_FieldMask)}
	case GetCustomizedImageRequest_FieldPathSelectorView:
		return &GetCustomizedImageRequest_FieldTerminalPathArrayOfValues{GetCustomizedImageRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetCustomizedImageRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetCustomizedImageRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetCustomizedImageRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetCustomizedImageRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *GetCustomizedImageRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetCustomizedImageRequest_FieldPathValue allows storing values for GetCustomizedImageRequest fields according to their type
type GetCustomizedImageRequest_FieldPathValue interface {
	GetCustomizedImageRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetCustomizedImageRequest)
	CompareWith(*GetCustomizedImageRequest) (cmp int, comparable bool)
}

func ParseGetCustomizedImageRequest_FieldPathValue(pathStr, valueStr string) (GetCustomizedImageRequest_FieldPathValue, error) {
	fp, err := ParseGetCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetCustomizedImageRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetCustomizedImageRequest_FieldPathValue), nil
}

func MustParseGetCustomizedImageRequest_FieldPathValue(pathStr, valueStr string) GetCustomizedImageRequest_FieldPathValue {
	fpv, err := ParseGetCustomizedImageRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetCustomizedImageRequest_FieldTerminalPathValue struct {
	GetCustomizedImageRequest_FieldTerminalPath
	value interface{}
}

var _ GetCustomizedImageRequest_FieldPathValue = (*GetCustomizedImageRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetCustomizedImageRequest' as interface{}
func (fpv *GetCustomizedImageRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetCustomizedImageRequest_FieldTerminalPathValue) AsNameValue() (*customized_image.Reference, bool) {
	res, ok := fpv.value.(*customized_image.Reference)
	return res, ok
}
func (fpv *GetCustomizedImageRequest_FieldTerminalPathValue) AsFieldMaskValue() (*customized_image.CustomizedImage_FieldMask, bool) {
	res, ok := fpv.value.(*customized_image.CustomizedImage_FieldMask)
	return res, ok
}
func (fpv *GetCustomizedImageRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetCustomizedImageRequest
func (fpv *GetCustomizedImageRequest_FieldTerminalPathValue) SetTo(target **GetCustomizedImageRequest) {
	if *target == nil {
		*target = new(GetCustomizedImageRequest)
	}
	switch fpv.selector {
	case GetCustomizedImageRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*customized_image.Reference)
	case GetCustomizedImageRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*customized_image.CustomizedImage_FieldMask)
	case GetCustomizedImageRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetCustomizedImageRequest: %d", fpv.selector))
	}
}

func (fpv *GetCustomizedImageRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetCustomizedImageRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetCustomizedImageRequest_FieldTerminalPathValue' with the value under path in 'GetCustomizedImageRequest'.
func (fpv *GetCustomizedImageRequest_FieldTerminalPathValue) CompareWith(source *GetCustomizedImageRequest) (int, bool) {
	switch fpv.selector {
	case GetCustomizedImageRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*customized_image.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetCustomizedImageRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetCustomizedImageRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetCustomizedImageRequest: %d", fpv.selector))
	}
}

func (fpv *GetCustomizedImageRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetCustomizedImageRequest))
}

// GetCustomizedImageRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetCustomizedImageRequest according to their type
// Present only for array (repeated) types.
type GetCustomizedImageRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetCustomizedImageRequest_FieldPath
	ContainsValue(*GetCustomizedImageRequest) bool
}

// ParseGetCustomizedImageRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetCustomizedImageRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetCustomizedImageRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetCustomizedImageRequest_FieldPathArrayItemValue), nil
}

func MustParseGetCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetCustomizedImageRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetCustomizedImageRequest_FieldTerminalPathArrayItemValue struct {
	GetCustomizedImageRequest_FieldTerminalPath
	value interface{}
}

var _ GetCustomizedImageRequest_FieldPathArrayItemValue = (*GetCustomizedImageRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetCustomizedImageRequest as interface{}
func (fpaiv *GetCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetCustomizedImageRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetCustomizedImageRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetCustomizedImageRequest'
func (fpaiv *GetCustomizedImageRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetCustomizedImageRequest) bool {
	slice := fpaiv.GetCustomizedImageRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetCustomizedImageRequest_FieldPathArrayOfValues allows storing slice of values for GetCustomizedImageRequest fields according to their type
type GetCustomizedImageRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetCustomizedImageRequest_FieldPath
}

func ParseGetCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetCustomizedImageRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetCustomizedImageRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetCustomizedImageRequest_FieldPathArrayOfValues), nil
}

func MustParseGetCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetCustomizedImageRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetCustomizedImageRequest_FieldTerminalPathArrayOfValues struct {
	GetCustomizedImageRequest_FieldTerminalPath
	values interface{}
}

var _ GetCustomizedImageRequest_FieldPathArrayOfValues = (*GetCustomizedImageRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetCustomizedImageRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetCustomizedImageRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*customized_image.Reference) {
			values = append(values, v)
		}
	case GetCustomizedImageRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*customized_image.CustomizedImage_FieldMask) {
			values = append(values, v)
		}
	case GetCustomizedImageRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetCustomizedImageRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*customized_image.Reference, bool) {
	res, ok := fpaov.values.([]*customized_image.Reference)
	return res, ok
}
func (fpaov *GetCustomizedImageRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*customized_image.CustomizedImage_FieldMask, bool) {
	res, ok := fpaov.values.([]*customized_image.CustomizedImage_FieldMask)
	return res, ok
}
func (fpaov *GetCustomizedImageRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetCustomizedImagesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetCustomizedImagesRequest_FieldPathSelector
	Get(source *BatchGetCustomizedImagesRequest) []interface{}
	GetSingle(source *BatchGetCustomizedImagesRequest) (interface{}, bool)
	ClearValue(item *BatchGetCustomizedImagesRequest)

	// Those methods build corresponding BatchGetCustomizedImagesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetCustomizedImagesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetCustomizedImagesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetCustomizedImagesRequest_FieldPathArrayItemValue
}

type BatchGetCustomizedImagesRequest_FieldPathSelector int32

const (
	BatchGetCustomizedImagesRequest_FieldPathSelectorNames     BatchGetCustomizedImagesRequest_FieldPathSelector = 0
	BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask BatchGetCustomizedImagesRequest_FieldPathSelector = 1
	BatchGetCustomizedImagesRequest_FieldPathSelectorView      BatchGetCustomizedImagesRequest_FieldPathSelector = 2
)

func (s BatchGetCustomizedImagesRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetCustomizedImagesRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetCustomizedImagesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesRequest: %d", s))
	}
}

func BuildBatchGetCustomizedImagesRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetCustomizedImagesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetCustomizedImagesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetCustomizedImagesRequest_FieldTerminalPath{selector: BatchGetCustomizedImagesRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetCustomizedImagesRequest_FieldTerminalPath{selector: BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetCustomizedImagesRequest_FieldTerminalPath{selector: BatchGetCustomizedImagesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetCustomizedImagesRequest", fp)
}

func ParseBatchGetCustomizedImagesRequest_FieldPath(rawField string) (BatchGetCustomizedImagesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetCustomizedImagesRequest_FieldPath(fp)
}

func MustParseBatchGetCustomizedImagesRequest_FieldPath(rawField string) BatchGetCustomizedImagesRequest_FieldPath {
	fp, err := ParseBatchGetCustomizedImagesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetCustomizedImagesRequest_FieldTerminalPath struct {
	selector BatchGetCustomizedImagesRequest_FieldPathSelector
}

var _ BatchGetCustomizedImagesRequest_FieldPath = (*BatchGetCustomizedImagesRequest_FieldTerminalPath)(nil)

func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) Selector() BatchGetCustomizedImagesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetCustomizedImagesRequest
func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) Get(source *BatchGetCustomizedImagesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetCustomizedImagesRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetCustomizedImagesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetCustomizedImagesRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetCustomizedImagesRequest
func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) GetSingle(source *BatchGetCustomizedImagesRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetCustomizedImagesRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetCustomizedImagesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetCustomizedImagesRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetCustomizedImagesRequest_FieldPathSelectorNames:
		return ([]*customized_image.Reference)(nil)
	case BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return (*customized_image.CustomizedImage_FieldMask)(nil)
	case BatchGetCustomizedImagesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) ClearValue(item *BatchGetCustomizedImagesRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetCustomizedImagesRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetCustomizedImagesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetCustomizedImagesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetCustomizedImagesRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetCustomizedImagesRequest_FieldPathSelectorView
}

func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetCustomizedImagesRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetCustomizedImagesRequest_FieldPathSelectorNames:
		return &BatchGetCustomizedImagesRequest_FieldTerminalPathValue{BatchGetCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.([]*customized_image.Reference)}
	case BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return &BatchGetCustomizedImagesRequest_FieldTerminalPathValue{BatchGetCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(*customized_image.CustomizedImage_FieldMask)}
	case BatchGetCustomizedImagesRequest_FieldPathSelectorView:
		return &BatchGetCustomizedImagesRequest_FieldTerminalPathValue{BatchGetCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetCustomizedImagesRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetCustomizedImagesRequest_FieldTerminalPathArrayOfValues{BatchGetCustomizedImagesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetCustomizedImagesRequest_FieldPathSelectorNames:
		return &BatchGetCustomizedImagesRequest_FieldTerminalPathArrayOfValues{BatchGetCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([][]*customized_image.Reference)}
	case BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return &BatchGetCustomizedImagesRequest_FieldTerminalPathArrayOfValues{BatchGetCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.CustomizedImage_FieldMask)}
	case BatchGetCustomizedImagesRequest_FieldPathSelectorView:
		return &BatchGetCustomizedImagesRequest_FieldTerminalPathArrayOfValues{BatchGetCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetCustomizedImagesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetCustomizedImagesRequest_FieldPathSelectorNames:
		return &BatchGetCustomizedImagesRequest_FieldTerminalPathArrayItemValue{BatchGetCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(*customized_image.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetCustomizedImagesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetCustomizedImagesRequest_FieldPathValue allows storing values for BatchGetCustomizedImagesRequest fields according to their type
type BatchGetCustomizedImagesRequest_FieldPathValue interface {
	BatchGetCustomizedImagesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetCustomizedImagesRequest)
	CompareWith(*BatchGetCustomizedImagesRequest) (cmp int, comparable bool)
}

func ParseBatchGetCustomizedImagesRequest_FieldPathValue(pathStr, valueStr string) (BatchGetCustomizedImagesRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetCustomizedImagesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetCustomizedImagesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetCustomizedImagesRequest_FieldPathValue), nil
}

func MustParseBatchGetCustomizedImagesRequest_FieldPathValue(pathStr, valueStr string) BatchGetCustomizedImagesRequest_FieldPathValue {
	fpv, err := ParseBatchGetCustomizedImagesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetCustomizedImagesRequest_FieldTerminalPathValue struct {
	BatchGetCustomizedImagesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetCustomizedImagesRequest_FieldPathValue = (*BatchGetCustomizedImagesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetCustomizedImagesRequest' as interface{}
func (fpv *BatchGetCustomizedImagesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetCustomizedImagesRequest_FieldTerminalPathValue) AsNamesValue() ([]*customized_image.Reference, bool) {
	res, ok := fpv.value.([]*customized_image.Reference)
	return res, ok
}
func (fpv *BatchGetCustomizedImagesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*customized_image.CustomizedImage_FieldMask, bool) {
	res, ok := fpv.value.(*customized_image.CustomizedImage_FieldMask)
	return res, ok
}
func (fpv *BatchGetCustomizedImagesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetCustomizedImagesRequest
func (fpv *BatchGetCustomizedImagesRequest_FieldTerminalPathValue) SetTo(target **BatchGetCustomizedImagesRequest) {
	if *target == nil {
		*target = new(BatchGetCustomizedImagesRequest)
	}
	switch fpv.selector {
	case BatchGetCustomizedImagesRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*customized_image.Reference)
	case BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*customized_image.CustomizedImage_FieldMask)
	case BatchGetCustomizedImagesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetCustomizedImagesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetCustomizedImagesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetCustomizedImagesRequest_FieldTerminalPathValue' with the value under path in 'BatchGetCustomizedImagesRequest'.
func (fpv *BatchGetCustomizedImagesRequest_FieldTerminalPathValue) CompareWith(source *BatchGetCustomizedImagesRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetCustomizedImagesRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetCustomizedImagesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetCustomizedImagesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetCustomizedImagesRequest))
}

// BatchGetCustomizedImagesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetCustomizedImagesRequest according to their type
// Present only for array (repeated) types.
type BatchGetCustomizedImagesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetCustomizedImagesRequest_FieldPath
	ContainsValue(*BatchGetCustomizedImagesRequest) bool
}

// ParseBatchGetCustomizedImagesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetCustomizedImagesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetCustomizedImagesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetCustomizedImagesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetCustomizedImagesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetCustomizedImagesRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetCustomizedImagesRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetCustomizedImagesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetCustomizedImagesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetCustomizedImagesRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetCustomizedImagesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetCustomizedImagesRequest_FieldPathArrayItemValue = (*BatchGetCustomizedImagesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetCustomizedImagesRequest as interface{}
func (fpaiv *BatchGetCustomizedImagesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetCustomizedImagesRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*customized_image.Reference, bool) {
	res, ok := fpaiv.value.(*customized_image.Reference)
	return res, ok
}

func (fpaiv *BatchGetCustomizedImagesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetCustomizedImagesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetCustomizedImagesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetCustomizedImagesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetCustomizedImagesRequest'
func (fpaiv *BatchGetCustomizedImagesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetCustomizedImagesRequest) bool {
	slice := fpaiv.BatchGetCustomizedImagesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetCustomizedImagesRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetCustomizedImagesRequest fields according to their type
type BatchGetCustomizedImagesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetCustomizedImagesRequest_FieldPath
}

func ParseBatchGetCustomizedImagesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetCustomizedImagesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetCustomizedImagesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetCustomizedImagesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetCustomizedImagesRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetCustomizedImagesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetCustomizedImagesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetCustomizedImagesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetCustomizedImagesRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetCustomizedImagesRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetCustomizedImagesRequest_FieldPathArrayOfValues = (*BatchGetCustomizedImagesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetCustomizedImagesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetCustomizedImagesRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*customized_image.Reference) {
			values = append(values, v)
		}
	case BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*customized_image.CustomizedImage_FieldMask) {
			values = append(values, v)
		}
	case BatchGetCustomizedImagesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*customized_image.Reference, bool) {
	res, ok := fpaov.values.([][]*customized_image.Reference)
	return res, ok
}
func (fpaov *BatchGetCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*customized_image.CustomizedImage_FieldMask, bool) {
	res, ok := fpaov.values.([]*customized_image.CustomizedImage_FieldMask)
	return res, ok
}
func (fpaov *BatchGetCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetCustomizedImagesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetCustomizedImagesResponse_FieldPathSelector
	Get(source *BatchGetCustomizedImagesResponse) []interface{}
	GetSingle(source *BatchGetCustomizedImagesResponse) (interface{}, bool)
	ClearValue(item *BatchGetCustomizedImagesResponse)

	// Those methods build corresponding BatchGetCustomizedImagesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetCustomizedImagesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetCustomizedImagesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetCustomizedImagesResponse_FieldPathArrayItemValue
}

type BatchGetCustomizedImagesResponse_FieldPathSelector int32

const (
	BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages BatchGetCustomizedImagesResponse_FieldPathSelector = 0
	BatchGetCustomizedImagesResponse_FieldPathSelectorMissing          BatchGetCustomizedImagesResponse_FieldPathSelector = 1
)

func (s BatchGetCustomizedImagesResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return "customized_images"
	case BatchGetCustomizedImagesResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", s))
	}
}

func BuildBatchGetCustomizedImagesResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetCustomizedImagesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetCustomizedImagesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "customized_images", "customizedImages", "customized-images":
			return &BatchGetCustomizedImagesResponse_FieldTerminalPath{selector: BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages}, nil
		case "missing":
			return &BatchGetCustomizedImagesResponse_FieldTerminalPath{selector: BatchGetCustomizedImagesResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "customized_images", "customizedImages", "customized-images":
			if subpath, err := customized_image.BuildCustomizedImage_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetCustomizedImagesResponse_FieldSubPath{selector: BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetCustomizedImagesResponse", fp)
}

func ParseBatchGetCustomizedImagesResponse_FieldPath(rawField string) (BatchGetCustomizedImagesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetCustomizedImagesResponse_FieldPath(fp)
}

func MustParseBatchGetCustomizedImagesResponse_FieldPath(rawField string) BatchGetCustomizedImagesResponse_FieldPath {
	fp, err := ParseBatchGetCustomizedImagesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetCustomizedImagesResponse_FieldTerminalPath struct {
	selector BatchGetCustomizedImagesResponse_FieldPathSelector
}

var _ BatchGetCustomizedImagesResponse_FieldPath = (*BatchGetCustomizedImagesResponse_FieldTerminalPath)(nil)

func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) Selector() BatchGetCustomizedImagesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetCustomizedImagesResponse
func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) Get(source *BatchGetCustomizedImagesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
			for _, value := range source.GetCustomizedImages() {
				values = append(values, value)
			}
		case BatchGetCustomizedImagesResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetCustomizedImagesResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetCustomizedImagesResponse
func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) GetSingle(source *BatchGetCustomizedImagesResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		res := source.GetCustomizedImages()
		return res, res != nil
	case BatchGetCustomizedImagesResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetCustomizedImagesResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return ([]*customized_image.CustomizedImage)(nil)
	case BatchGetCustomizedImagesResponse_FieldPathSelectorMissing:
		return ([]*customized_image.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) ClearValue(item *BatchGetCustomizedImagesResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
			item.CustomizedImages = nil
		case BatchGetCustomizedImagesResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetCustomizedImagesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetCustomizedImagesResponse_FieldPathSelectorMissing
}

func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetCustomizedImagesResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return &BatchGetCustomizedImagesResponse_FieldTerminalPathValue{BatchGetCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.([]*customized_image.CustomizedImage)}
	case BatchGetCustomizedImagesResponse_FieldPathSelectorMissing:
		return &BatchGetCustomizedImagesResponse_FieldTerminalPathValue{BatchGetCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.([]*customized_image.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetCustomizedImagesResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetCustomizedImagesResponse_FieldTerminalPathArrayOfValues{BatchGetCustomizedImagesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return &BatchGetCustomizedImagesResponse_FieldTerminalPathArrayOfValues{BatchGetCustomizedImagesResponse_FieldTerminalPath: *fp, values: values.([][]*customized_image.CustomizedImage)}
	case BatchGetCustomizedImagesResponse_FieldPathSelectorMissing:
		return &BatchGetCustomizedImagesResponse_FieldTerminalPathArrayOfValues{BatchGetCustomizedImagesResponse_FieldTerminalPath: *fp, values: values.([][]*customized_image.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetCustomizedImagesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return &BatchGetCustomizedImagesResponse_FieldTerminalPathArrayItemValue{BatchGetCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.(*customized_image.CustomizedImage)}
	case BatchGetCustomizedImagesResponse_FieldPathSelectorMissing:
		return &BatchGetCustomizedImagesResponse_FieldTerminalPathArrayItemValue{BatchGetCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.(*customized_image.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetCustomizedImagesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetCustomizedImagesResponse_FieldSubPath struct {
	selector BatchGetCustomizedImagesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetCustomizedImagesResponse_FieldPath = (*BatchGetCustomizedImagesResponse_FieldSubPath)(nil)

func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) Selector() BatchGetCustomizedImagesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) AsCustomizedImagesSubPath() (customized_image.CustomizedImage_FieldPath, bool) {
	res, ok := fps.subPath.(customized_image.CustomizedImage_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetCustomizedImagesResponse
func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) Get(source *BatchGetCustomizedImagesResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		for _, item := range source.GetCustomizedImages() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetCustomizedImagesResponse))
}

// GetSingle returns value of selected field from source BatchGetCustomizedImagesResponse
func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) GetSingle(source *BatchGetCustomizedImagesResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		if len(source.GetCustomizedImages()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCustomizedImages()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fps.selector))
	}
}

func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetCustomizedImagesResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) ClearValue(item *BatchGetCustomizedImagesResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
			for _, subItem := range item.CustomizedImages {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetCustomizedImagesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetCustomizedImagesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) WithIValue(value interface{}) BatchGetCustomizedImagesResponse_FieldPathValue {
	return &BatchGetCustomizedImagesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetCustomizedImagesResponse_FieldPathArrayOfValues {
	return &BatchGetCustomizedImagesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetCustomizedImagesResponse_FieldPathArrayItemValue {
	return &BatchGetCustomizedImagesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetCustomizedImagesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetCustomizedImagesResponse_FieldPathValue allows storing values for BatchGetCustomizedImagesResponse fields according to their type
type BatchGetCustomizedImagesResponse_FieldPathValue interface {
	BatchGetCustomizedImagesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetCustomizedImagesResponse)
	CompareWith(*BatchGetCustomizedImagesResponse) (cmp int, comparable bool)
}

func ParseBatchGetCustomizedImagesResponse_FieldPathValue(pathStr, valueStr string) (BatchGetCustomizedImagesResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetCustomizedImagesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetCustomizedImagesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetCustomizedImagesResponse_FieldPathValue), nil
}

func MustParseBatchGetCustomizedImagesResponse_FieldPathValue(pathStr, valueStr string) BatchGetCustomizedImagesResponse_FieldPathValue {
	fpv, err := ParseBatchGetCustomizedImagesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetCustomizedImagesResponse_FieldTerminalPathValue struct {
	BatchGetCustomizedImagesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetCustomizedImagesResponse_FieldPathValue = (*BatchGetCustomizedImagesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetCustomizedImagesResponse' as interface{}
func (fpv *BatchGetCustomizedImagesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetCustomizedImagesResponse_FieldTerminalPathValue) AsCustomizedImagesValue() ([]*customized_image.CustomizedImage, bool) {
	res, ok := fpv.value.([]*customized_image.CustomizedImage)
	return res, ok
}
func (fpv *BatchGetCustomizedImagesResponse_FieldTerminalPathValue) AsMissingValue() ([]*customized_image.Reference, bool) {
	res, ok := fpv.value.([]*customized_image.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetCustomizedImagesResponse
func (fpv *BatchGetCustomizedImagesResponse_FieldTerminalPathValue) SetTo(target **BatchGetCustomizedImagesResponse) {
	if *target == nil {
		*target = new(BatchGetCustomizedImagesResponse)
	}
	switch fpv.selector {
	case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		(*target).CustomizedImages = fpv.value.([]*customized_image.CustomizedImage)
	case BatchGetCustomizedImagesResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*customized_image.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetCustomizedImagesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetCustomizedImagesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetCustomizedImagesResponse_FieldTerminalPathValue' with the value under path in 'BatchGetCustomizedImagesResponse'.
func (fpv *BatchGetCustomizedImagesResponse_FieldTerminalPathValue) CompareWith(source *BatchGetCustomizedImagesResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return 0, false
	case BatchGetCustomizedImagesResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetCustomizedImagesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetCustomizedImagesResponse))
}

type BatchGetCustomizedImagesResponse_FieldSubPathValue struct {
	BatchGetCustomizedImagesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetCustomizedImagesResponse_FieldPathValue = (*BatchGetCustomizedImagesResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetCustomizedImagesResponse_FieldSubPathValue) AsCustomizedImagesPathValue() (customized_image.CustomizedImage_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(customized_image.CustomizedImage_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetCustomizedImagesResponse_FieldSubPathValue) SetTo(target **BatchGetCustomizedImagesResponse) {
	if *target == nil {
		*target = new(BatchGetCustomizedImagesResponse)
	}
	switch fpvs.Selector() {
	case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetCustomizedImagesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetCustomizedImagesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetCustomizedImagesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetCustomizedImagesResponse_FieldSubPathValue) CompareWith(source *BatchGetCustomizedImagesResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetCustomizedImagesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetCustomizedImagesResponse))
}

// BatchGetCustomizedImagesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetCustomizedImagesResponse according to their type
// Present only for array (repeated) types.
type BatchGetCustomizedImagesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetCustomizedImagesResponse_FieldPath
	ContainsValue(*BatchGetCustomizedImagesResponse) bool
}

// ParseBatchGetCustomizedImagesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetCustomizedImagesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetCustomizedImagesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetCustomizedImagesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetCustomizedImagesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetCustomizedImagesResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetCustomizedImagesResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetCustomizedImagesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetCustomizedImagesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetCustomizedImagesResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetCustomizedImagesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetCustomizedImagesResponse_FieldPathArrayItemValue = (*BatchGetCustomizedImagesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetCustomizedImagesResponse as interface{}
func (fpaiv *BatchGetCustomizedImagesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetCustomizedImagesResponse_FieldTerminalPathArrayItemValue) AsCustomizedImagesItemValue() (*customized_image.CustomizedImage, bool) {
	res, ok := fpaiv.value.(*customized_image.CustomizedImage)
	return res, ok
}
func (fpaiv *BatchGetCustomizedImagesResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*customized_image.Reference, bool) {
	res, ok := fpaiv.value.(*customized_image.Reference)
	return res, ok
}

func (fpaiv *BatchGetCustomizedImagesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetCustomizedImagesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetCustomizedImagesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetCustomizedImagesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetCustomizedImagesResponse'
func (fpaiv *BatchGetCustomizedImagesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetCustomizedImagesResponse) bool {
	slice := fpaiv.BatchGetCustomizedImagesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetCustomizedImagesResponse_FieldSubPathArrayItemValue struct {
	BatchGetCustomizedImagesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetCustomizedImagesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetCustomizedImagesResponse_FieldSubPathArrayItemValue) AsCustomizedImagesPathItemValue() (customized_image.CustomizedImage_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(customized_image.CustomizedImage_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetCustomizedImagesResponse'
func (fpaivs *BatchGetCustomizedImagesResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetCustomizedImagesResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetCustomizedImagesResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetCustomizedImagesResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetCustomizedImagesResponse fields according to their type
type BatchGetCustomizedImagesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetCustomizedImagesResponse_FieldPath
}

func ParseBatchGetCustomizedImagesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetCustomizedImagesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetCustomizedImagesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetCustomizedImagesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetCustomizedImagesResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetCustomizedImagesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetCustomizedImagesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetCustomizedImagesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetCustomizedImagesResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetCustomizedImagesResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetCustomizedImagesResponse_FieldPathArrayOfValues = (*BatchGetCustomizedImagesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetCustomizedImagesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		for _, v := range fpaov.values.([][]*customized_image.CustomizedImage) {
			values = append(values, v)
		}
	case BatchGetCustomizedImagesResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*customized_image.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetCustomizedImagesResponse_FieldTerminalPathArrayOfValues) AsCustomizedImagesArrayOfValues() ([][]*customized_image.CustomizedImage, bool) {
	res, ok := fpaov.values.([][]*customized_image.CustomizedImage)
	return res, ok
}
func (fpaov *BatchGetCustomizedImagesResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*customized_image.Reference, bool) {
	res, ok := fpaov.values.([][]*customized_image.Reference)
	return res, ok
}

type BatchGetCustomizedImagesResponse_FieldSubPathArrayOfValues struct {
	BatchGetCustomizedImagesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetCustomizedImagesResponse_FieldPathArrayOfValues = (*BatchGetCustomizedImagesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetCustomizedImagesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetCustomizedImagesResponse_FieldSubPathArrayOfValues) AsCustomizedImagesPathArrayOfValues() (customized_image.CustomizedImage_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(customized_image.CustomizedImage_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListCustomizedImagesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListCustomizedImagesRequest_FieldPathSelector
	Get(source *ListCustomizedImagesRequest) []interface{}
	GetSingle(source *ListCustomizedImagesRequest) (interface{}, bool)
	ClearValue(item *ListCustomizedImagesRequest)

	// Those methods build corresponding ListCustomizedImagesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListCustomizedImagesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListCustomizedImagesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListCustomizedImagesRequest_FieldPathArrayItemValue
}

type ListCustomizedImagesRequest_FieldPathSelector int32

const (
	ListCustomizedImagesRequest_FieldPathSelectorParent            ListCustomizedImagesRequest_FieldPathSelector = 0
	ListCustomizedImagesRequest_FieldPathSelectorPageSize          ListCustomizedImagesRequest_FieldPathSelector = 1
	ListCustomizedImagesRequest_FieldPathSelectorPageToken         ListCustomizedImagesRequest_FieldPathSelector = 2
	ListCustomizedImagesRequest_FieldPathSelectorOrderBy           ListCustomizedImagesRequest_FieldPathSelector = 3
	ListCustomizedImagesRequest_FieldPathSelectorFilter            ListCustomizedImagesRequest_FieldPathSelector = 4
	ListCustomizedImagesRequest_FieldPathSelectorFieldMask         ListCustomizedImagesRequest_FieldPathSelector = 5
	ListCustomizedImagesRequest_FieldPathSelectorView              ListCustomizedImagesRequest_FieldPathSelector = 6
	ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo ListCustomizedImagesRequest_FieldPathSelector = 7
)

func (s ListCustomizedImagesRequest_FieldPathSelector) String() string {
	switch s {
	case ListCustomizedImagesRequest_FieldPathSelectorParent:
		return "parent"
	case ListCustomizedImagesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListCustomizedImagesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListCustomizedImagesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListCustomizedImagesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListCustomizedImagesRequest_FieldPathSelectorView:
		return "view"
	case ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesRequest: %d", s))
	}
}

func BuildListCustomizedImagesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListCustomizedImagesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListCustomizedImagesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListCustomizedImagesRequest", fp)
}

func ParseListCustomizedImagesRequest_FieldPath(rawField string) (ListCustomizedImagesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListCustomizedImagesRequest_FieldPath(fp)
}

func MustParseListCustomizedImagesRequest_FieldPath(rawField string) ListCustomizedImagesRequest_FieldPath {
	fp, err := ParseListCustomizedImagesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListCustomizedImagesRequest_FieldTerminalPath struct {
	selector ListCustomizedImagesRequest_FieldPathSelector
}

var _ ListCustomizedImagesRequest_FieldPath = (*ListCustomizedImagesRequest_FieldTerminalPath)(nil)

func (fp *ListCustomizedImagesRequest_FieldTerminalPath) Selector() ListCustomizedImagesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListCustomizedImagesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListCustomizedImagesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListCustomizedImagesRequest
func (fp *ListCustomizedImagesRequest_FieldTerminalPath) Get(source *ListCustomizedImagesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListCustomizedImagesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListCustomizedImagesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListCustomizedImagesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListCustomizedImagesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListCustomizedImagesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListCustomizedImagesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListCustomizedImagesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListCustomizedImagesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListCustomizedImagesRequest))
}

// GetSingle returns value pointed by specific field of from source ListCustomizedImagesRequest
func (fp *ListCustomizedImagesRequest_FieldTerminalPath) GetSingle(source *ListCustomizedImagesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListCustomizedImagesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListCustomizedImagesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListCustomizedImagesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListCustomizedImagesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListCustomizedImagesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListCustomizedImagesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListCustomizedImagesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesRequest: %d", fp.selector))
	}
}

func (fp *ListCustomizedImagesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListCustomizedImagesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListCustomizedImagesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListCustomizedImagesRequest_FieldPathSelectorParent:
		return (*customized_image.ParentName)(nil)
	case ListCustomizedImagesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListCustomizedImagesRequest_FieldPathSelectorPageToken:
		return (*customized_image.PagerCursor)(nil)
	case ListCustomizedImagesRequest_FieldPathSelectorOrderBy:
		return (*customized_image.OrderBy)(nil)
	case ListCustomizedImagesRequest_FieldPathSelectorFilter:
		return (*customized_image.Filter)(nil)
	case ListCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return (*customized_image.CustomizedImage_FieldMask)(nil)
	case ListCustomizedImagesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesRequest: %d", fp.selector))
	}
}

func (fp *ListCustomizedImagesRequest_FieldTerminalPath) ClearValue(item *ListCustomizedImagesRequest) {
	if item != nil {
		switch fp.selector {
		case ListCustomizedImagesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListCustomizedImagesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListCustomizedImagesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListCustomizedImagesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListCustomizedImagesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListCustomizedImagesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListCustomizedImagesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListCustomizedImagesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListCustomizedImagesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListCustomizedImagesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListCustomizedImagesRequest_FieldPathSelectorParent ||
		fp.selector == ListCustomizedImagesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListCustomizedImagesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListCustomizedImagesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListCustomizedImagesRequest_FieldPathSelectorFilter ||
		fp.selector == ListCustomizedImagesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListCustomizedImagesRequest_FieldPathSelectorView ||
		fp.selector == ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListCustomizedImagesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListCustomizedImagesRequest_FieldTerminalPath) WithIValue(value interface{}) ListCustomizedImagesRequest_FieldPathValue {
	switch fp.selector {
	case ListCustomizedImagesRequest_FieldPathSelectorParent:
		return &ListCustomizedImagesRequest_FieldTerminalPathValue{ListCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(*customized_image.ParentName)}
	case ListCustomizedImagesRequest_FieldPathSelectorPageSize:
		return &ListCustomizedImagesRequest_FieldTerminalPathValue{ListCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListCustomizedImagesRequest_FieldPathSelectorPageToken:
		return &ListCustomizedImagesRequest_FieldTerminalPathValue{ListCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(*customized_image.PagerCursor)}
	case ListCustomizedImagesRequest_FieldPathSelectorOrderBy:
		return &ListCustomizedImagesRequest_FieldTerminalPathValue{ListCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(*customized_image.OrderBy)}
	case ListCustomizedImagesRequest_FieldPathSelectorFilter:
		return &ListCustomizedImagesRequest_FieldTerminalPathValue{ListCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(*customized_image.Filter)}
	case ListCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return &ListCustomizedImagesRequest_FieldTerminalPathValue{ListCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(*customized_image.CustomizedImage_FieldMask)}
	case ListCustomizedImagesRequest_FieldPathSelectorView:
		return &ListCustomizedImagesRequest_FieldTerminalPathValue{ListCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo:
		return &ListCustomizedImagesRequest_FieldTerminalPathValue{ListCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesRequest: %d", fp.selector))
	}
}

func (fp *ListCustomizedImagesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListCustomizedImagesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListCustomizedImagesRequest_FieldPathArrayOfValues {
	fpaov := &ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues{ListCustomizedImagesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListCustomizedImagesRequest_FieldPathSelectorParent:
		return &ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues{ListCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.ParentName)}
	case ListCustomizedImagesRequest_FieldPathSelectorPageSize:
		return &ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues{ListCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListCustomizedImagesRequest_FieldPathSelectorPageToken:
		return &ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues{ListCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.PagerCursor)}
	case ListCustomizedImagesRequest_FieldPathSelectorOrderBy:
		return &ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues{ListCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.OrderBy)}
	case ListCustomizedImagesRequest_FieldPathSelectorFilter:
		return &ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues{ListCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.Filter)}
	case ListCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return &ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues{ListCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.CustomizedImage_FieldMask)}
	case ListCustomizedImagesRequest_FieldPathSelectorView:
		return &ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues{ListCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo:
		return &ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues{ListCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListCustomizedImagesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListCustomizedImagesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListCustomizedImagesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesRequest: %d", fp.selector))
	}
}

func (fp *ListCustomizedImagesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListCustomizedImagesRequest_FieldPathValue allows storing values for ListCustomizedImagesRequest fields according to their type
type ListCustomizedImagesRequest_FieldPathValue interface {
	ListCustomizedImagesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListCustomizedImagesRequest)
	CompareWith(*ListCustomizedImagesRequest) (cmp int, comparable bool)
}

func ParseListCustomizedImagesRequest_FieldPathValue(pathStr, valueStr string) (ListCustomizedImagesRequest_FieldPathValue, error) {
	fp, err := ParseListCustomizedImagesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListCustomizedImagesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListCustomizedImagesRequest_FieldPathValue), nil
}

func MustParseListCustomizedImagesRequest_FieldPathValue(pathStr, valueStr string) ListCustomizedImagesRequest_FieldPathValue {
	fpv, err := ParseListCustomizedImagesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListCustomizedImagesRequest_FieldTerminalPathValue struct {
	ListCustomizedImagesRequest_FieldTerminalPath
	value interface{}
}

var _ ListCustomizedImagesRequest_FieldPathValue = (*ListCustomizedImagesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListCustomizedImagesRequest' as interface{}
func (fpv *ListCustomizedImagesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListCustomizedImagesRequest_FieldTerminalPathValue) AsParentValue() (*customized_image.ParentName, bool) {
	res, ok := fpv.value.(*customized_image.ParentName)
	return res, ok
}
func (fpv *ListCustomizedImagesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListCustomizedImagesRequest_FieldTerminalPathValue) AsPageTokenValue() (*customized_image.PagerCursor, bool) {
	res, ok := fpv.value.(*customized_image.PagerCursor)
	return res, ok
}
func (fpv *ListCustomizedImagesRequest_FieldTerminalPathValue) AsOrderByValue() (*customized_image.OrderBy, bool) {
	res, ok := fpv.value.(*customized_image.OrderBy)
	return res, ok
}
func (fpv *ListCustomizedImagesRequest_FieldTerminalPathValue) AsFilterValue() (*customized_image.Filter, bool) {
	res, ok := fpv.value.(*customized_image.Filter)
	return res, ok
}
func (fpv *ListCustomizedImagesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*customized_image.CustomizedImage_FieldMask, bool) {
	res, ok := fpv.value.(*customized_image.CustomizedImage_FieldMask)
	return res, ok
}
func (fpv *ListCustomizedImagesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListCustomizedImagesRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListCustomizedImagesRequest
func (fpv *ListCustomizedImagesRequest_FieldTerminalPathValue) SetTo(target **ListCustomizedImagesRequest) {
	if *target == nil {
		*target = new(ListCustomizedImagesRequest)
	}
	switch fpv.selector {
	case ListCustomizedImagesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*customized_image.ParentName)
	case ListCustomizedImagesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListCustomizedImagesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*customized_image.PagerCursor)
	case ListCustomizedImagesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*customized_image.OrderBy)
	case ListCustomizedImagesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*customized_image.Filter)
	case ListCustomizedImagesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*customized_image.CustomizedImage_FieldMask)
	case ListCustomizedImagesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesRequest: %d", fpv.selector))
	}
}

func (fpv *ListCustomizedImagesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListCustomizedImagesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListCustomizedImagesRequest_FieldTerminalPathValue' with the value under path in 'ListCustomizedImagesRequest'.
func (fpv *ListCustomizedImagesRequest_FieldTerminalPathValue) CompareWith(source *ListCustomizedImagesRequest) (int, bool) {
	switch fpv.selector {
	case ListCustomizedImagesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*customized_image.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListCustomizedImagesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListCustomizedImagesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListCustomizedImagesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListCustomizedImagesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListCustomizedImagesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesRequest: %d", fpv.selector))
	}
}

func (fpv *ListCustomizedImagesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListCustomizedImagesRequest))
}

// ListCustomizedImagesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListCustomizedImagesRequest according to their type
// Present only for array (repeated) types.
type ListCustomizedImagesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListCustomizedImagesRequest_FieldPath
	ContainsValue(*ListCustomizedImagesRequest) bool
}

// ParseListCustomizedImagesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListCustomizedImagesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListCustomizedImagesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListCustomizedImagesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListCustomizedImagesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListCustomizedImagesRequest_FieldPathArrayItemValue), nil
}

func MustParseListCustomizedImagesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListCustomizedImagesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListCustomizedImagesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListCustomizedImagesRequest_FieldTerminalPathArrayItemValue struct {
	ListCustomizedImagesRequest_FieldTerminalPath
	value interface{}
}

var _ ListCustomizedImagesRequest_FieldPathArrayItemValue = (*ListCustomizedImagesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListCustomizedImagesRequest as interface{}
func (fpaiv *ListCustomizedImagesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListCustomizedImagesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListCustomizedImagesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListCustomizedImagesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListCustomizedImagesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListCustomizedImagesRequest'
func (fpaiv *ListCustomizedImagesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListCustomizedImagesRequest) bool {
	slice := fpaiv.ListCustomizedImagesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListCustomizedImagesRequest_FieldPathArrayOfValues allows storing slice of values for ListCustomizedImagesRequest fields according to their type
type ListCustomizedImagesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListCustomizedImagesRequest_FieldPath
}

func ParseListCustomizedImagesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListCustomizedImagesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListCustomizedImagesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListCustomizedImagesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListCustomizedImagesRequest_FieldPathArrayOfValues), nil
}

func MustParseListCustomizedImagesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListCustomizedImagesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListCustomizedImagesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues struct {
	ListCustomizedImagesRequest_FieldTerminalPath
	values interface{}
}

var _ ListCustomizedImagesRequest_FieldPathArrayOfValues = (*ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListCustomizedImagesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*customized_image.ParentName) {
			values = append(values, v)
		}
	case ListCustomizedImagesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListCustomizedImagesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*customized_image.PagerCursor) {
			values = append(values, v)
		}
	case ListCustomizedImagesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*customized_image.OrderBy) {
			values = append(values, v)
		}
	case ListCustomizedImagesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*customized_image.Filter) {
			values = append(values, v)
		}
	case ListCustomizedImagesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*customized_image.CustomizedImage_FieldMask) {
			values = append(values, v)
		}
	case ListCustomizedImagesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*customized_image.ParentName, bool) {
	res, ok := fpaov.values.([]*customized_image.ParentName)
	return res, ok
}
func (fpaov *ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*customized_image.PagerCursor, bool) {
	res, ok := fpaov.values.([]*customized_image.PagerCursor)
	return res, ok
}
func (fpaov *ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*customized_image.OrderBy, bool) {
	res, ok := fpaov.values.([]*customized_image.OrderBy)
	return res, ok
}
func (fpaov *ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*customized_image.Filter, bool) {
	res, ok := fpaov.values.([]*customized_image.Filter)
	return res, ok
}
func (fpaov *ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*customized_image.CustomizedImage_FieldMask, bool) {
	res, ok := fpaov.values.([]*customized_image.CustomizedImage_FieldMask)
	return res, ok
}
func (fpaov *ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListCustomizedImagesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListCustomizedImagesResponse_FieldPathSelector
	Get(source *ListCustomizedImagesResponse) []interface{}
	GetSingle(source *ListCustomizedImagesResponse) (interface{}, bool)
	ClearValue(item *ListCustomizedImagesResponse)

	// Those methods build corresponding ListCustomizedImagesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListCustomizedImagesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListCustomizedImagesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListCustomizedImagesResponse_FieldPathArrayItemValue
}

type ListCustomizedImagesResponse_FieldPathSelector int32

const (
	ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages  ListCustomizedImagesResponse_FieldPathSelector = 0
	ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken     ListCustomizedImagesResponse_FieldPathSelector = 1
	ListCustomizedImagesResponse_FieldPathSelectorNextPageToken     ListCustomizedImagesResponse_FieldPathSelector = 2
	ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset     ListCustomizedImagesResponse_FieldPathSelector = 3
	ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount ListCustomizedImagesResponse_FieldPathSelector = 4
)

func (s ListCustomizedImagesResponse_FieldPathSelector) String() string {
	switch s {
	case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return "customized_images"
	case ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListCustomizedImagesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", s))
	}
}

func BuildListCustomizedImagesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListCustomizedImagesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListCustomizedImagesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "customized_images", "customizedImages", "customized-images":
			return &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "customized_images", "customizedImages", "customized-images":
			if subpath, err := customized_image.BuildCustomizedImage_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListCustomizedImagesResponse_FieldSubPath{selector: ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListCustomizedImagesResponse", fp)
}

func ParseListCustomizedImagesResponse_FieldPath(rawField string) (ListCustomizedImagesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListCustomizedImagesResponse_FieldPath(fp)
}

func MustParseListCustomizedImagesResponse_FieldPath(rawField string) ListCustomizedImagesResponse_FieldPath {
	fp, err := ParseListCustomizedImagesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListCustomizedImagesResponse_FieldTerminalPath struct {
	selector ListCustomizedImagesResponse_FieldPathSelector
}

var _ ListCustomizedImagesResponse_FieldPath = (*ListCustomizedImagesResponse_FieldTerminalPath)(nil)

func (fp *ListCustomizedImagesResponse_FieldTerminalPath) Selector() ListCustomizedImagesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListCustomizedImagesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListCustomizedImagesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListCustomizedImagesResponse
func (fp *ListCustomizedImagesResponse_FieldTerminalPath) Get(source *ListCustomizedImagesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
			for _, value := range source.GetCustomizedImages() {
				values = append(values, value)
			}
		case ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListCustomizedImagesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListCustomizedImagesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListCustomizedImagesResponse))
}

// GetSingle returns value pointed by specific field of from source ListCustomizedImagesResponse
func (fp *ListCustomizedImagesResponse_FieldTerminalPath) GetSingle(source *ListCustomizedImagesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		res := source.GetCustomizedImages()
		return res, res != nil
	case ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListCustomizedImagesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fp.selector))
	}
}

func (fp *ListCustomizedImagesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListCustomizedImagesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListCustomizedImagesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return ([]*customized_image.CustomizedImage)(nil)
	case ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken:
		return (*customized_image.PagerCursor)(nil)
	case ListCustomizedImagesResponse_FieldPathSelectorNextPageToken:
		return (*customized_image.PagerCursor)(nil)
	case ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fp.selector))
	}
}

func (fp *ListCustomizedImagesResponse_FieldTerminalPath) ClearValue(item *ListCustomizedImagesResponse) {
	if item != nil {
		switch fp.selector {
		case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
			item.CustomizedImages = nil
		case ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListCustomizedImagesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListCustomizedImagesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListCustomizedImagesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListCustomizedImagesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListCustomizedImagesResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListCustomizedImagesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListCustomizedImagesResponse_FieldTerminalPath) WithIValue(value interface{}) ListCustomizedImagesResponse_FieldPathValue {
	switch fp.selector {
	case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return &ListCustomizedImagesResponse_FieldTerminalPathValue{ListCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.([]*customized_image.CustomizedImage)}
	case ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken:
		return &ListCustomizedImagesResponse_FieldTerminalPathValue{ListCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.(*customized_image.PagerCursor)}
	case ListCustomizedImagesResponse_FieldPathSelectorNextPageToken:
		return &ListCustomizedImagesResponse_FieldTerminalPathValue{ListCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.(*customized_image.PagerCursor)}
	case ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset:
		return &ListCustomizedImagesResponse_FieldTerminalPathValue{ListCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount:
		return &ListCustomizedImagesResponse_FieldTerminalPathValue{ListCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fp.selector))
	}
}

func (fp *ListCustomizedImagesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListCustomizedImagesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListCustomizedImagesResponse_FieldPathArrayOfValues {
	fpaov := &ListCustomizedImagesResponse_FieldTerminalPathArrayOfValues{ListCustomizedImagesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return &ListCustomizedImagesResponse_FieldTerminalPathArrayOfValues{ListCustomizedImagesResponse_FieldTerminalPath: *fp, values: values.([][]*customized_image.CustomizedImage)}
	case ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken:
		return &ListCustomizedImagesResponse_FieldTerminalPathArrayOfValues{ListCustomizedImagesResponse_FieldTerminalPath: *fp, values: values.([]*customized_image.PagerCursor)}
	case ListCustomizedImagesResponse_FieldPathSelectorNextPageToken:
		return &ListCustomizedImagesResponse_FieldTerminalPathArrayOfValues{ListCustomizedImagesResponse_FieldTerminalPath: *fp, values: values.([]*customized_image.PagerCursor)}
	case ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset:
		return &ListCustomizedImagesResponse_FieldTerminalPathArrayOfValues{ListCustomizedImagesResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount:
		return &ListCustomizedImagesResponse_FieldTerminalPathArrayOfValues{ListCustomizedImagesResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListCustomizedImagesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListCustomizedImagesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListCustomizedImagesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return &ListCustomizedImagesResponse_FieldTerminalPathArrayItemValue{ListCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.(*customized_image.CustomizedImage)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fp.selector))
	}
}

func (fp *ListCustomizedImagesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListCustomizedImagesResponse_FieldSubPath struct {
	selector ListCustomizedImagesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListCustomizedImagesResponse_FieldPath = (*ListCustomizedImagesResponse_FieldSubPath)(nil)

func (fps *ListCustomizedImagesResponse_FieldSubPath) Selector() ListCustomizedImagesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListCustomizedImagesResponse_FieldSubPath) AsCustomizedImagesSubPath() (customized_image.CustomizedImage_FieldPath, bool) {
	res, ok := fps.subPath.(customized_image.CustomizedImage_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListCustomizedImagesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListCustomizedImagesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListCustomizedImagesResponse
func (fps *ListCustomizedImagesResponse_FieldSubPath) Get(source *ListCustomizedImagesResponse) (values []interface{}) {
	switch fps.selector {
	case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		for _, item := range source.GetCustomizedImages() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListCustomizedImagesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListCustomizedImagesResponse))
}

// GetSingle returns value of selected field from source ListCustomizedImagesResponse
func (fps *ListCustomizedImagesResponse_FieldSubPath) GetSingle(source *ListCustomizedImagesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		if len(source.GetCustomizedImages()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCustomizedImages()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fps.selector))
	}
}

func (fps *ListCustomizedImagesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListCustomizedImagesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListCustomizedImagesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListCustomizedImagesResponse_FieldSubPath) ClearValue(item *ListCustomizedImagesResponse) {
	if item != nil {
		switch fps.selector {
		case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
			for _, subItem := range item.CustomizedImages {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListCustomizedImagesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListCustomizedImagesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListCustomizedImagesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListCustomizedImagesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListCustomizedImagesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListCustomizedImagesResponse_FieldSubPath) WithIValue(value interface{}) ListCustomizedImagesResponse_FieldPathValue {
	return &ListCustomizedImagesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListCustomizedImagesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListCustomizedImagesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListCustomizedImagesResponse_FieldPathArrayOfValues {
	return &ListCustomizedImagesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListCustomizedImagesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListCustomizedImagesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListCustomizedImagesResponse_FieldPathArrayItemValue {
	return &ListCustomizedImagesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListCustomizedImagesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListCustomizedImagesResponse_FieldPathValue allows storing values for ListCustomizedImagesResponse fields according to their type
type ListCustomizedImagesResponse_FieldPathValue interface {
	ListCustomizedImagesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListCustomizedImagesResponse)
	CompareWith(*ListCustomizedImagesResponse) (cmp int, comparable bool)
}

func ParseListCustomizedImagesResponse_FieldPathValue(pathStr, valueStr string) (ListCustomizedImagesResponse_FieldPathValue, error) {
	fp, err := ParseListCustomizedImagesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListCustomizedImagesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListCustomizedImagesResponse_FieldPathValue), nil
}

func MustParseListCustomizedImagesResponse_FieldPathValue(pathStr, valueStr string) ListCustomizedImagesResponse_FieldPathValue {
	fpv, err := ParseListCustomizedImagesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListCustomizedImagesResponse_FieldTerminalPathValue struct {
	ListCustomizedImagesResponse_FieldTerminalPath
	value interface{}
}

var _ ListCustomizedImagesResponse_FieldPathValue = (*ListCustomizedImagesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListCustomizedImagesResponse' as interface{}
func (fpv *ListCustomizedImagesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListCustomizedImagesResponse_FieldTerminalPathValue) AsCustomizedImagesValue() ([]*customized_image.CustomizedImage, bool) {
	res, ok := fpv.value.([]*customized_image.CustomizedImage)
	return res, ok
}
func (fpv *ListCustomizedImagesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*customized_image.PagerCursor, bool) {
	res, ok := fpv.value.(*customized_image.PagerCursor)
	return res, ok
}
func (fpv *ListCustomizedImagesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*customized_image.PagerCursor, bool) {
	res, ok := fpv.value.(*customized_image.PagerCursor)
	return res, ok
}
func (fpv *ListCustomizedImagesResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListCustomizedImagesResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListCustomizedImagesResponse
func (fpv *ListCustomizedImagesResponse_FieldTerminalPathValue) SetTo(target **ListCustomizedImagesResponse) {
	if *target == nil {
		*target = new(ListCustomizedImagesResponse)
	}
	switch fpv.selector {
	case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		(*target).CustomizedImages = fpv.value.([]*customized_image.CustomizedImage)
	case ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*customized_image.PagerCursor)
	case ListCustomizedImagesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*customized_image.PagerCursor)
	case ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fpv.selector))
	}
}

func (fpv *ListCustomizedImagesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListCustomizedImagesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListCustomizedImagesResponse_FieldTerminalPathValue' with the value under path in 'ListCustomizedImagesResponse'.
func (fpv *ListCustomizedImagesResponse_FieldTerminalPathValue) CompareWith(source *ListCustomizedImagesResponse) (int, bool) {
	switch fpv.selector {
	case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return 0, false
	case ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListCustomizedImagesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fpv.selector))
	}
}

func (fpv *ListCustomizedImagesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListCustomizedImagesResponse))
}

type ListCustomizedImagesResponse_FieldSubPathValue struct {
	ListCustomizedImagesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListCustomizedImagesResponse_FieldPathValue = (*ListCustomizedImagesResponse_FieldSubPathValue)(nil)

func (fpvs *ListCustomizedImagesResponse_FieldSubPathValue) AsCustomizedImagesPathValue() (customized_image.CustomizedImage_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(customized_image.CustomizedImage_FieldPathValue)
	return res, ok
}

func (fpvs *ListCustomizedImagesResponse_FieldSubPathValue) SetTo(target **ListCustomizedImagesResponse) {
	if *target == nil {
		*target = new(ListCustomizedImagesResponse)
	}
	switch fpvs.Selector() {
	case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListCustomizedImagesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListCustomizedImagesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListCustomizedImagesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListCustomizedImagesResponse_FieldSubPathValue) CompareWith(source *ListCustomizedImagesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListCustomizedImagesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListCustomizedImagesResponse))
}

// ListCustomizedImagesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListCustomizedImagesResponse according to their type
// Present only for array (repeated) types.
type ListCustomizedImagesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListCustomizedImagesResponse_FieldPath
	ContainsValue(*ListCustomizedImagesResponse) bool
}

// ParseListCustomizedImagesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListCustomizedImagesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListCustomizedImagesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListCustomizedImagesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListCustomizedImagesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListCustomizedImagesResponse_FieldPathArrayItemValue), nil
}

func MustParseListCustomizedImagesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListCustomizedImagesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListCustomizedImagesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListCustomizedImagesResponse_FieldTerminalPathArrayItemValue struct {
	ListCustomizedImagesResponse_FieldTerminalPath
	value interface{}
}

var _ ListCustomizedImagesResponse_FieldPathArrayItemValue = (*ListCustomizedImagesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListCustomizedImagesResponse as interface{}
func (fpaiv *ListCustomizedImagesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListCustomizedImagesResponse_FieldTerminalPathArrayItemValue) AsCustomizedImagesItemValue() (*customized_image.CustomizedImage, bool) {
	res, ok := fpaiv.value.(*customized_image.CustomizedImage)
	return res, ok
}

func (fpaiv *ListCustomizedImagesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListCustomizedImagesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListCustomizedImagesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListCustomizedImagesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListCustomizedImagesResponse'
func (fpaiv *ListCustomizedImagesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListCustomizedImagesResponse) bool {
	slice := fpaiv.ListCustomizedImagesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListCustomizedImagesResponse_FieldSubPathArrayItemValue struct {
	ListCustomizedImagesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListCustomizedImagesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListCustomizedImagesResponse_FieldSubPathArrayItemValue) AsCustomizedImagesPathItemValue() (customized_image.CustomizedImage_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(customized_image.CustomizedImage_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListCustomizedImagesResponse'
func (fpaivs *ListCustomizedImagesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListCustomizedImagesResponse) bool {
	switch fpaivs.Selector() {
	case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListCustomizedImagesResponse: %d", fpaivs.Selector()))
	}
}

// ListCustomizedImagesResponse_FieldPathArrayOfValues allows storing slice of values for ListCustomizedImagesResponse fields according to their type
type ListCustomizedImagesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListCustomizedImagesResponse_FieldPath
}

func ParseListCustomizedImagesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListCustomizedImagesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListCustomizedImagesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListCustomizedImagesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListCustomizedImagesResponse_FieldPathArrayOfValues), nil
}

func MustParseListCustomizedImagesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListCustomizedImagesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListCustomizedImagesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListCustomizedImagesResponse_FieldTerminalPathArrayOfValues struct {
	ListCustomizedImagesResponse_FieldTerminalPath
	values interface{}
}

var _ ListCustomizedImagesResponse_FieldPathArrayOfValues = (*ListCustomizedImagesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListCustomizedImagesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages:
		for _, v := range fpaov.values.([][]*customized_image.CustomizedImage) {
			values = append(values, v)
		}
	case ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*customized_image.PagerCursor) {
			values = append(values, v)
		}
	case ListCustomizedImagesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*customized_image.PagerCursor) {
			values = append(values, v)
		}
	case ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListCustomizedImagesResponse_FieldTerminalPathArrayOfValues) AsCustomizedImagesArrayOfValues() ([][]*customized_image.CustomizedImage, bool) {
	res, ok := fpaov.values.([][]*customized_image.CustomizedImage)
	return res, ok
}
func (fpaov *ListCustomizedImagesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*customized_image.PagerCursor, bool) {
	res, ok := fpaov.values.([]*customized_image.PagerCursor)
	return res, ok
}
func (fpaov *ListCustomizedImagesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*customized_image.PagerCursor, bool) {
	res, ok := fpaov.values.([]*customized_image.PagerCursor)
	return res, ok
}
func (fpaov *ListCustomizedImagesResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListCustomizedImagesResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListCustomizedImagesResponse_FieldSubPathArrayOfValues struct {
	ListCustomizedImagesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListCustomizedImagesResponse_FieldPathArrayOfValues = (*ListCustomizedImagesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListCustomizedImagesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListCustomizedImagesResponse_FieldSubPathArrayOfValues) AsCustomizedImagesPathArrayOfValues() (customized_image.CustomizedImage_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(customized_image.CustomizedImage_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchCustomizedImageRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchCustomizedImageRequest_FieldPathSelector
	Get(source *WatchCustomizedImageRequest) []interface{}
	GetSingle(source *WatchCustomizedImageRequest) (interface{}, bool)
	ClearValue(item *WatchCustomizedImageRequest)

	// Those methods build corresponding WatchCustomizedImageRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchCustomizedImageRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchCustomizedImageRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchCustomizedImageRequest_FieldPathArrayItemValue
}

type WatchCustomizedImageRequest_FieldPathSelector int32

const (
	WatchCustomizedImageRequest_FieldPathSelectorName      WatchCustomizedImageRequest_FieldPathSelector = 0
	WatchCustomizedImageRequest_FieldPathSelectorFieldMask WatchCustomizedImageRequest_FieldPathSelector = 1
	WatchCustomizedImageRequest_FieldPathSelectorView      WatchCustomizedImageRequest_FieldPathSelector = 2
)

func (s WatchCustomizedImageRequest_FieldPathSelector) String() string {
	switch s {
	case WatchCustomizedImageRequest_FieldPathSelectorName:
		return "name"
	case WatchCustomizedImageRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchCustomizedImageRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageRequest: %d", s))
	}
}

func BuildWatchCustomizedImageRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchCustomizedImageRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchCustomizedImageRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchCustomizedImageRequest_FieldTerminalPath{selector: WatchCustomizedImageRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchCustomizedImageRequest_FieldTerminalPath{selector: WatchCustomizedImageRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchCustomizedImageRequest_FieldTerminalPath{selector: WatchCustomizedImageRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchCustomizedImageRequest", fp)
}

func ParseWatchCustomizedImageRequest_FieldPath(rawField string) (WatchCustomizedImageRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchCustomizedImageRequest_FieldPath(fp)
}

func MustParseWatchCustomizedImageRequest_FieldPath(rawField string) WatchCustomizedImageRequest_FieldPath {
	fp, err := ParseWatchCustomizedImageRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchCustomizedImageRequest_FieldTerminalPath struct {
	selector WatchCustomizedImageRequest_FieldPathSelector
}

var _ WatchCustomizedImageRequest_FieldPath = (*WatchCustomizedImageRequest_FieldTerminalPath)(nil)

func (fp *WatchCustomizedImageRequest_FieldTerminalPath) Selector() WatchCustomizedImageRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchCustomizedImageRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchCustomizedImageRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchCustomizedImageRequest
func (fp *WatchCustomizedImageRequest_FieldTerminalPath) Get(source *WatchCustomizedImageRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchCustomizedImageRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchCustomizedImageRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchCustomizedImageRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchCustomizedImageRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchCustomizedImageRequest))
}

// GetSingle returns value pointed by specific field of from source WatchCustomizedImageRequest
func (fp *WatchCustomizedImageRequest_FieldTerminalPath) GetSingle(source *WatchCustomizedImageRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchCustomizedImageRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchCustomizedImageRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchCustomizedImageRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImageRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchCustomizedImageRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchCustomizedImageRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchCustomizedImageRequest_FieldPathSelectorName:
		return (*customized_image.Reference)(nil)
	case WatchCustomizedImageRequest_FieldPathSelectorFieldMask:
		return (*customized_image.CustomizedImage_FieldMask)(nil)
	case WatchCustomizedImageRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImageRequest_FieldTerminalPath) ClearValue(item *WatchCustomizedImageRequest) {
	if item != nil {
		switch fp.selector {
		case WatchCustomizedImageRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchCustomizedImageRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchCustomizedImageRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchCustomizedImageRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchCustomizedImageRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchCustomizedImageRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchCustomizedImageRequest_FieldPathSelectorName ||
		fp.selector == WatchCustomizedImageRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchCustomizedImageRequest_FieldPathSelectorView
}

func (fp *WatchCustomizedImageRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchCustomizedImageRequest_FieldTerminalPath) WithIValue(value interface{}) WatchCustomizedImageRequest_FieldPathValue {
	switch fp.selector {
	case WatchCustomizedImageRequest_FieldPathSelectorName:
		return &WatchCustomizedImageRequest_FieldTerminalPathValue{WatchCustomizedImageRequest_FieldTerminalPath: *fp, value: value.(*customized_image.Reference)}
	case WatchCustomizedImageRequest_FieldPathSelectorFieldMask:
		return &WatchCustomizedImageRequest_FieldTerminalPathValue{WatchCustomizedImageRequest_FieldTerminalPath: *fp, value: value.(*customized_image.CustomizedImage_FieldMask)}
	case WatchCustomizedImageRequest_FieldPathSelectorView:
		return &WatchCustomizedImageRequest_FieldTerminalPathValue{WatchCustomizedImageRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImageRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchCustomizedImageRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchCustomizedImageRequest_FieldPathArrayOfValues {
	fpaov := &WatchCustomizedImageRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImageRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchCustomizedImageRequest_FieldPathSelectorName:
		return &WatchCustomizedImageRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImageRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.Reference)}
	case WatchCustomizedImageRequest_FieldPathSelectorFieldMask:
		return &WatchCustomizedImageRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImageRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.CustomizedImage_FieldMask)}
	case WatchCustomizedImageRequest_FieldPathSelectorView:
		return &WatchCustomizedImageRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImageRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchCustomizedImageRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchCustomizedImageRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchCustomizedImageRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImageRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchCustomizedImageRequest_FieldPathValue allows storing values for WatchCustomizedImageRequest fields according to their type
type WatchCustomizedImageRequest_FieldPathValue interface {
	WatchCustomizedImageRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchCustomizedImageRequest)
	CompareWith(*WatchCustomizedImageRequest) (cmp int, comparable bool)
}

func ParseWatchCustomizedImageRequest_FieldPathValue(pathStr, valueStr string) (WatchCustomizedImageRequest_FieldPathValue, error) {
	fp, err := ParseWatchCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchCustomizedImageRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchCustomizedImageRequest_FieldPathValue), nil
}

func MustParseWatchCustomizedImageRequest_FieldPathValue(pathStr, valueStr string) WatchCustomizedImageRequest_FieldPathValue {
	fpv, err := ParseWatchCustomizedImageRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchCustomizedImageRequest_FieldTerminalPathValue struct {
	WatchCustomizedImageRequest_FieldTerminalPath
	value interface{}
}

var _ WatchCustomizedImageRequest_FieldPathValue = (*WatchCustomizedImageRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchCustomizedImageRequest' as interface{}
func (fpv *WatchCustomizedImageRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchCustomizedImageRequest_FieldTerminalPathValue) AsNameValue() (*customized_image.Reference, bool) {
	res, ok := fpv.value.(*customized_image.Reference)
	return res, ok
}
func (fpv *WatchCustomizedImageRequest_FieldTerminalPathValue) AsFieldMaskValue() (*customized_image.CustomizedImage_FieldMask, bool) {
	res, ok := fpv.value.(*customized_image.CustomizedImage_FieldMask)
	return res, ok
}
func (fpv *WatchCustomizedImageRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchCustomizedImageRequest
func (fpv *WatchCustomizedImageRequest_FieldTerminalPathValue) SetTo(target **WatchCustomizedImageRequest) {
	if *target == nil {
		*target = new(WatchCustomizedImageRequest)
	}
	switch fpv.selector {
	case WatchCustomizedImageRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*customized_image.Reference)
	case WatchCustomizedImageRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*customized_image.CustomizedImage_FieldMask)
	case WatchCustomizedImageRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageRequest: %d", fpv.selector))
	}
}

func (fpv *WatchCustomizedImageRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchCustomizedImageRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchCustomizedImageRequest_FieldTerminalPathValue' with the value under path in 'WatchCustomizedImageRequest'.
func (fpv *WatchCustomizedImageRequest_FieldTerminalPathValue) CompareWith(source *WatchCustomizedImageRequest) (int, bool) {
	switch fpv.selector {
	case WatchCustomizedImageRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*customized_image.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchCustomizedImageRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchCustomizedImageRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageRequest: %d", fpv.selector))
	}
}

func (fpv *WatchCustomizedImageRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchCustomizedImageRequest))
}

// WatchCustomizedImageRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchCustomizedImageRequest according to their type
// Present only for array (repeated) types.
type WatchCustomizedImageRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchCustomizedImageRequest_FieldPath
	ContainsValue(*WatchCustomizedImageRequest) bool
}

// ParseWatchCustomizedImageRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchCustomizedImageRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchCustomizedImageRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchCustomizedImageRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchCustomizedImageRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchCustomizedImageRequest_FieldTerminalPathArrayItemValue struct {
	WatchCustomizedImageRequest_FieldTerminalPath
	value interface{}
}

var _ WatchCustomizedImageRequest_FieldPathArrayItemValue = (*WatchCustomizedImageRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchCustomizedImageRequest as interface{}
func (fpaiv *WatchCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchCustomizedImageRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchCustomizedImageRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchCustomizedImageRequest'
func (fpaiv *WatchCustomizedImageRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchCustomizedImageRequest) bool {
	slice := fpaiv.WatchCustomizedImageRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchCustomizedImageRequest_FieldPathArrayOfValues allows storing slice of values for WatchCustomizedImageRequest fields according to their type
type WatchCustomizedImageRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchCustomizedImageRequest_FieldPath
}

func ParseWatchCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchCustomizedImageRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchCustomizedImageRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchCustomizedImageRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchCustomizedImageRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchCustomizedImageRequest_FieldTerminalPathArrayOfValues struct {
	WatchCustomizedImageRequest_FieldTerminalPath
	values interface{}
}

var _ WatchCustomizedImageRequest_FieldPathArrayOfValues = (*WatchCustomizedImageRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchCustomizedImageRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchCustomizedImageRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*customized_image.Reference) {
			values = append(values, v)
		}
	case WatchCustomizedImageRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*customized_image.CustomizedImage_FieldMask) {
			values = append(values, v)
		}
	case WatchCustomizedImageRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchCustomizedImageRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*customized_image.Reference, bool) {
	res, ok := fpaov.values.([]*customized_image.Reference)
	return res, ok
}
func (fpaov *WatchCustomizedImageRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*customized_image.CustomizedImage_FieldMask, bool) {
	res, ok := fpaov.values.([]*customized_image.CustomizedImage_FieldMask)
	return res, ok
}
func (fpaov *WatchCustomizedImageRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchCustomizedImageResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchCustomizedImageResponse_FieldPathSelector
	Get(source *WatchCustomizedImageResponse) []interface{}
	GetSingle(source *WatchCustomizedImageResponse) (interface{}, bool)
	ClearValue(item *WatchCustomizedImageResponse)

	// Those methods build corresponding WatchCustomizedImageResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchCustomizedImageResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchCustomizedImageResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchCustomizedImageResponse_FieldPathArrayItemValue
}

type WatchCustomizedImageResponse_FieldPathSelector int32

const (
	WatchCustomizedImageResponse_FieldPathSelectorChange WatchCustomizedImageResponse_FieldPathSelector = 0
)

func (s WatchCustomizedImageResponse_FieldPathSelector) String() string {
	switch s {
	case WatchCustomizedImageResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageResponse: %d", s))
	}
}

func BuildWatchCustomizedImageResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchCustomizedImageResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchCustomizedImageResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchCustomizedImageResponse_FieldTerminalPath{selector: WatchCustomizedImageResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchCustomizedImageResponse", fp)
}

func ParseWatchCustomizedImageResponse_FieldPath(rawField string) (WatchCustomizedImageResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchCustomizedImageResponse_FieldPath(fp)
}

func MustParseWatchCustomizedImageResponse_FieldPath(rawField string) WatchCustomizedImageResponse_FieldPath {
	fp, err := ParseWatchCustomizedImageResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchCustomizedImageResponse_FieldTerminalPath struct {
	selector WatchCustomizedImageResponse_FieldPathSelector
}

var _ WatchCustomizedImageResponse_FieldPath = (*WatchCustomizedImageResponse_FieldTerminalPath)(nil)

func (fp *WatchCustomizedImageResponse_FieldTerminalPath) Selector() WatchCustomizedImageResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchCustomizedImageResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchCustomizedImageResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchCustomizedImageResponse
func (fp *WatchCustomizedImageResponse_FieldTerminalPath) Get(source *WatchCustomizedImageResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchCustomizedImageResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchCustomizedImageResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchCustomizedImageResponse))
}

// GetSingle returns value pointed by specific field of from source WatchCustomizedImageResponse
func (fp *WatchCustomizedImageResponse_FieldTerminalPath) GetSingle(source *WatchCustomizedImageResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchCustomizedImageResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageResponse: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImageResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchCustomizedImageResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchCustomizedImageResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchCustomizedImageResponse_FieldPathSelectorChange:
		return (*customized_image.CustomizedImageChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageResponse: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImageResponse_FieldTerminalPath) ClearValue(item *WatchCustomizedImageResponse) {
	if item != nil {
		switch fp.selector {
		case WatchCustomizedImageResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchCustomizedImageResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchCustomizedImageResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchCustomizedImageResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchCustomizedImageResponse_FieldPathSelectorChange
}

func (fp *WatchCustomizedImageResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchCustomizedImageResponse_FieldTerminalPath) WithIValue(value interface{}) WatchCustomizedImageResponse_FieldPathValue {
	switch fp.selector {
	case WatchCustomizedImageResponse_FieldPathSelectorChange:
		return &WatchCustomizedImageResponse_FieldTerminalPathValue{WatchCustomizedImageResponse_FieldTerminalPath: *fp, value: value.(*customized_image.CustomizedImageChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageResponse: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImageResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchCustomizedImageResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchCustomizedImageResponse_FieldPathArrayOfValues {
	fpaov := &WatchCustomizedImageResponse_FieldTerminalPathArrayOfValues{WatchCustomizedImageResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchCustomizedImageResponse_FieldPathSelectorChange:
		return &WatchCustomizedImageResponse_FieldTerminalPathArrayOfValues{WatchCustomizedImageResponse_FieldTerminalPath: *fp, values: values.([]*customized_image.CustomizedImageChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchCustomizedImageResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchCustomizedImageResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchCustomizedImageResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageResponse: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImageResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchCustomizedImageResponse_FieldPathValue allows storing values for WatchCustomizedImageResponse fields according to their type
type WatchCustomizedImageResponse_FieldPathValue interface {
	WatchCustomizedImageResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchCustomizedImageResponse)
	CompareWith(*WatchCustomizedImageResponse) (cmp int, comparable bool)
}

func ParseWatchCustomizedImageResponse_FieldPathValue(pathStr, valueStr string) (WatchCustomizedImageResponse_FieldPathValue, error) {
	fp, err := ParseWatchCustomizedImageResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchCustomizedImageResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchCustomizedImageResponse_FieldPathValue), nil
}

func MustParseWatchCustomizedImageResponse_FieldPathValue(pathStr, valueStr string) WatchCustomizedImageResponse_FieldPathValue {
	fpv, err := ParseWatchCustomizedImageResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchCustomizedImageResponse_FieldTerminalPathValue struct {
	WatchCustomizedImageResponse_FieldTerminalPath
	value interface{}
}

var _ WatchCustomizedImageResponse_FieldPathValue = (*WatchCustomizedImageResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchCustomizedImageResponse' as interface{}
func (fpv *WatchCustomizedImageResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchCustomizedImageResponse_FieldTerminalPathValue) AsChangeValue() (*customized_image.CustomizedImageChange, bool) {
	res, ok := fpv.value.(*customized_image.CustomizedImageChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchCustomizedImageResponse
func (fpv *WatchCustomizedImageResponse_FieldTerminalPathValue) SetTo(target **WatchCustomizedImageResponse) {
	if *target == nil {
		*target = new(WatchCustomizedImageResponse)
	}
	switch fpv.selector {
	case WatchCustomizedImageResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*customized_image.CustomizedImageChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageResponse: %d", fpv.selector))
	}
}

func (fpv *WatchCustomizedImageResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchCustomizedImageResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchCustomizedImageResponse_FieldTerminalPathValue' with the value under path in 'WatchCustomizedImageResponse'.
func (fpv *WatchCustomizedImageResponse_FieldTerminalPathValue) CompareWith(source *WatchCustomizedImageResponse) (int, bool) {
	switch fpv.selector {
	case WatchCustomizedImageResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImageResponse: %d", fpv.selector))
	}
}

func (fpv *WatchCustomizedImageResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchCustomizedImageResponse))
}

// WatchCustomizedImageResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchCustomizedImageResponse according to their type
// Present only for array (repeated) types.
type WatchCustomizedImageResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchCustomizedImageResponse_FieldPath
	ContainsValue(*WatchCustomizedImageResponse) bool
}

// ParseWatchCustomizedImageResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchCustomizedImageResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchCustomizedImageResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchCustomizedImageResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchCustomizedImageResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchCustomizedImageResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchCustomizedImageResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchCustomizedImageResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchCustomizedImageResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchCustomizedImageResponse_FieldTerminalPathArrayItemValue struct {
	WatchCustomizedImageResponse_FieldTerminalPath
	value interface{}
}

var _ WatchCustomizedImageResponse_FieldPathArrayItemValue = (*WatchCustomizedImageResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchCustomizedImageResponse as interface{}
func (fpaiv *WatchCustomizedImageResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchCustomizedImageResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchCustomizedImageResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchCustomizedImageResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchCustomizedImageResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchCustomizedImageResponse'
func (fpaiv *WatchCustomizedImageResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchCustomizedImageResponse) bool {
	slice := fpaiv.WatchCustomizedImageResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchCustomizedImageResponse_FieldPathArrayOfValues allows storing slice of values for WatchCustomizedImageResponse fields according to their type
type WatchCustomizedImageResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchCustomizedImageResponse_FieldPath
}

func ParseWatchCustomizedImageResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchCustomizedImageResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchCustomizedImageResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchCustomizedImageResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchCustomizedImageResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchCustomizedImageResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchCustomizedImageResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchCustomizedImageResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchCustomizedImageResponse_FieldTerminalPathArrayOfValues struct {
	WatchCustomizedImageResponse_FieldTerminalPath
	values interface{}
}

var _ WatchCustomizedImageResponse_FieldPathArrayOfValues = (*WatchCustomizedImageResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchCustomizedImageResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchCustomizedImageResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*customized_image.CustomizedImageChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchCustomizedImageResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*customized_image.CustomizedImageChange, bool) {
	res, ok := fpaov.values.([]*customized_image.CustomizedImageChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchCustomizedImagesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchCustomizedImagesRequest_FieldPathSelector
	Get(source *WatchCustomizedImagesRequest) []interface{}
	GetSingle(source *WatchCustomizedImagesRequest) (interface{}, bool)
	ClearValue(item *WatchCustomizedImagesRequest)

	// Those methods build corresponding WatchCustomizedImagesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchCustomizedImagesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchCustomizedImagesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchCustomizedImagesRequest_FieldPathArrayItemValue
}

type WatchCustomizedImagesRequest_FieldPathSelector int32

const (
	WatchCustomizedImagesRequest_FieldPathSelectorType         WatchCustomizedImagesRequest_FieldPathSelector = 0
	WatchCustomizedImagesRequest_FieldPathSelectorParent       WatchCustomizedImagesRequest_FieldPathSelector = 1
	WatchCustomizedImagesRequest_FieldPathSelectorPageSize     WatchCustomizedImagesRequest_FieldPathSelector = 2
	WatchCustomizedImagesRequest_FieldPathSelectorPageToken    WatchCustomizedImagesRequest_FieldPathSelector = 3
	WatchCustomizedImagesRequest_FieldPathSelectorOrderBy      WatchCustomizedImagesRequest_FieldPathSelector = 4
	WatchCustomizedImagesRequest_FieldPathSelectorResumeToken  WatchCustomizedImagesRequest_FieldPathSelector = 5
	WatchCustomizedImagesRequest_FieldPathSelectorStartingTime WatchCustomizedImagesRequest_FieldPathSelector = 6
	WatchCustomizedImagesRequest_FieldPathSelectorFilter       WatchCustomizedImagesRequest_FieldPathSelector = 7
	WatchCustomizedImagesRequest_FieldPathSelectorFieldMask    WatchCustomizedImagesRequest_FieldPathSelector = 8
	WatchCustomizedImagesRequest_FieldPathSelectorView         WatchCustomizedImagesRequest_FieldPathSelector = 9
	WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize WatchCustomizedImagesRequest_FieldPathSelector = 10
)

func (s WatchCustomizedImagesRequest_FieldPathSelector) String() string {
	switch s {
	case WatchCustomizedImagesRequest_FieldPathSelectorType:
		return "type"
	case WatchCustomizedImagesRequest_FieldPathSelectorParent:
		return "parent"
	case WatchCustomizedImagesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchCustomizedImagesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchCustomizedImagesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchCustomizedImagesRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchCustomizedImagesRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchCustomizedImagesRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchCustomizedImagesRequest_FieldPathSelectorView:
		return "view"
	case WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesRequest: %d", s))
	}
}

func BuildWatchCustomizedImagesRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchCustomizedImagesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchCustomizedImagesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchCustomizedImagesRequest", fp)
}

func ParseWatchCustomizedImagesRequest_FieldPath(rawField string) (WatchCustomizedImagesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchCustomizedImagesRequest_FieldPath(fp)
}

func MustParseWatchCustomizedImagesRequest_FieldPath(rawField string) WatchCustomizedImagesRequest_FieldPath {
	fp, err := ParseWatchCustomizedImagesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchCustomizedImagesRequest_FieldTerminalPath struct {
	selector WatchCustomizedImagesRequest_FieldPathSelector
}

var _ WatchCustomizedImagesRequest_FieldPath = (*WatchCustomizedImagesRequest_FieldTerminalPath)(nil)

func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) Selector() WatchCustomizedImagesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchCustomizedImagesRequest
func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) Get(source *WatchCustomizedImagesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchCustomizedImagesRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchCustomizedImagesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchCustomizedImagesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchCustomizedImagesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchCustomizedImagesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchCustomizedImagesRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchCustomizedImagesRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchCustomizedImagesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchCustomizedImagesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchCustomizedImagesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchCustomizedImagesRequest))
}

// GetSingle returns value pointed by specific field of from source WatchCustomizedImagesRequest
func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) GetSingle(source *WatchCustomizedImagesRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchCustomizedImagesRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchCustomizedImagesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchCustomizedImagesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchCustomizedImagesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchCustomizedImagesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchCustomizedImagesRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchCustomizedImagesRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchCustomizedImagesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchCustomizedImagesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchCustomizedImagesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesRequest: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchCustomizedImagesRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchCustomizedImagesRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchCustomizedImagesRequest_FieldPathSelectorParent:
		return (*customized_image.ParentReference)(nil)
	case WatchCustomizedImagesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchCustomizedImagesRequest_FieldPathSelectorPageToken:
		return (*customized_image.PagerCursor)(nil)
	case WatchCustomizedImagesRequest_FieldPathSelectorOrderBy:
		return (*customized_image.OrderBy)(nil)
	case WatchCustomizedImagesRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchCustomizedImagesRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchCustomizedImagesRequest_FieldPathSelectorFilter:
		return (*customized_image.Filter)(nil)
	case WatchCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return (*customized_image.CustomizedImage_FieldMask)(nil)
	case WatchCustomizedImagesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesRequest: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) ClearValue(item *WatchCustomizedImagesRequest) {
	if item != nil {
		switch fp.selector {
		case WatchCustomizedImagesRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchCustomizedImagesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchCustomizedImagesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchCustomizedImagesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchCustomizedImagesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchCustomizedImagesRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchCustomizedImagesRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchCustomizedImagesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchCustomizedImagesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchCustomizedImagesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchCustomizedImagesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchCustomizedImagesRequest_FieldPathSelectorType ||
		fp.selector == WatchCustomizedImagesRequest_FieldPathSelectorParent ||
		fp.selector == WatchCustomizedImagesRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchCustomizedImagesRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchCustomizedImagesRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchCustomizedImagesRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchCustomizedImagesRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchCustomizedImagesRequest_FieldPathSelectorFilter ||
		fp.selector == WatchCustomizedImagesRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchCustomizedImagesRequest_FieldPathSelectorView ||
		fp.selector == WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) WithIValue(value interface{}) WatchCustomizedImagesRequest_FieldPathValue {
	switch fp.selector {
	case WatchCustomizedImagesRequest_FieldPathSelectorType:
		return &WatchCustomizedImagesRequest_FieldTerminalPathValue{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchCustomizedImagesRequest_FieldPathSelectorParent:
		return &WatchCustomizedImagesRequest_FieldTerminalPathValue{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(*customized_image.ParentReference)}
	case WatchCustomizedImagesRequest_FieldPathSelectorPageSize:
		return &WatchCustomizedImagesRequest_FieldTerminalPathValue{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchCustomizedImagesRequest_FieldPathSelectorPageToken:
		return &WatchCustomizedImagesRequest_FieldTerminalPathValue{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(*customized_image.PagerCursor)}
	case WatchCustomizedImagesRequest_FieldPathSelectorOrderBy:
		return &WatchCustomizedImagesRequest_FieldTerminalPathValue{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(*customized_image.OrderBy)}
	case WatchCustomizedImagesRequest_FieldPathSelectorResumeToken:
		return &WatchCustomizedImagesRequest_FieldTerminalPathValue{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchCustomizedImagesRequest_FieldPathSelectorStartingTime:
		return &WatchCustomizedImagesRequest_FieldTerminalPathValue{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchCustomizedImagesRequest_FieldPathSelectorFilter:
		return &WatchCustomizedImagesRequest_FieldTerminalPathValue{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(*customized_image.Filter)}
	case WatchCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return &WatchCustomizedImagesRequest_FieldTerminalPathValue{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(*customized_image.CustomizedImage_FieldMask)}
	case WatchCustomizedImagesRequest_FieldPathSelectorView:
		return &WatchCustomizedImagesRequest_FieldTerminalPathValue{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchCustomizedImagesRequest_FieldTerminalPathValue{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesRequest: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchCustomizedImagesRequest_FieldPathArrayOfValues {
	fpaov := &WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImagesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchCustomizedImagesRequest_FieldPathSelectorType:
		return &WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchCustomizedImagesRequest_FieldPathSelectorParent:
		return &WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.ParentReference)}
	case WatchCustomizedImagesRequest_FieldPathSelectorPageSize:
		return &WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchCustomizedImagesRequest_FieldPathSelectorPageToken:
		return &WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.PagerCursor)}
	case WatchCustomizedImagesRequest_FieldPathSelectorOrderBy:
		return &WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.OrderBy)}
	case WatchCustomizedImagesRequest_FieldPathSelectorResumeToken:
		return &WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchCustomizedImagesRequest_FieldPathSelectorStartingTime:
		return &WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchCustomizedImagesRequest_FieldPathSelectorFilter:
		return &WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.Filter)}
	case WatchCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return &WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.CustomizedImage_FieldMask)}
	case WatchCustomizedImagesRequest_FieldPathSelectorView:
		return &WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues{WatchCustomizedImagesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchCustomizedImagesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesRequest: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImagesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchCustomizedImagesRequest_FieldPathValue allows storing values for WatchCustomizedImagesRequest fields according to their type
type WatchCustomizedImagesRequest_FieldPathValue interface {
	WatchCustomizedImagesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchCustomizedImagesRequest)
	CompareWith(*WatchCustomizedImagesRequest) (cmp int, comparable bool)
}

func ParseWatchCustomizedImagesRequest_FieldPathValue(pathStr, valueStr string) (WatchCustomizedImagesRequest_FieldPathValue, error) {
	fp, err := ParseWatchCustomizedImagesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchCustomizedImagesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchCustomizedImagesRequest_FieldPathValue), nil
}

func MustParseWatchCustomizedImagesRequest_FieldPathValue(pathStr, valueStr string) WatchCustomizedImagesRequest_FieldPathValue {
	fpv, err := ParseWatchCustomizedImagesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchCustomizedImagesRequest_FieldTerminalPathValue struct {
	WatchCustomizedImagesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchCustomizedImagesRequest_FieldPathValue = (*WatchCustomizedImagesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchCustomizedImagesRequest' as interface{}
func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) AsParentValue() (*customized_image.ParentReference, bool) {
	res, ok := fpv.value.(*customized_image.ParentReference)
	return res, ok
}
func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) AsPageTokenValue() (*customized_image.PagerCursor, bool) {
	res, ok := fpv.value.(*customized_image.PagerCursor)
	return res, ok
}
func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) AsOrderByValue() (*customized_image.OrderBy, bool) {
	res, ok := fpv.value.(*customized_image.OrderBy)
	return res, ok
}
func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) AsFilterValue() (*customized_image.Filter, bool) {
	res, ok := fpv.value.(*customized_image.Filter)
	return res, ok
}
func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*customized_image.CustomizedImage_FieldMask, bool) {
	res, ok := fpv.value.(*customized_image.CustomizedImage_FieldMask)
	return res, ok
}
func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchCustomizedImagesRequest
func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) SetTo(target **WatchCustomizedImagesRequest) {
	if *target == nil {
		*target = new(WatchCustomizedImagesRequest)
	}
	switch fpv.selector {
	case WatchCustomizedImagesRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchCustomizedImagesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*customized_image.ParentReference)
	case WatchCustomizedImagesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchCustomizedImagesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*customized_image.PagerCursor)
	case WatchCustomizedImagesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*customized_image.OrderBy)
	case WatchCustomizedImagesRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchCustomizedImagesRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchCustomizedImagesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*customized_image.Filter)
	case WatchCustomizedImagesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*customized_image.CustomizedImage_FieldMask)
	case WatchCustomizedImagesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchCustomizedImagesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchCustomizedImagesRequest_FieldTerminalPathValue' with the value under path in 'WatchCustomizedImagesRequest'.
func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) CompareWith(source *WatchCustomizedImagesRequest) (int, bool) {
	switch fpv.selector {
	case WatchCustomizedImagesRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*customized_image.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchCustomizedImagesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchCustomizedImagesRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchCustomizedImagesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchCustomizedImagesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchCustomizedImagesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchCustomizedImagesRequest))
}

// WatchCustomizedImagesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchCustomizedImagesRequest according to their type
// Present only for array (repeated) types.
type WatchCustomizedImagesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchCustomizedImagesRequest_FieldPath
	ContainsValue(*WatchCustomizedImagesRequest) bool
}

// ParseWatchCustomizedImagesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchCustomizedImagesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchCustomizedImagesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchCustomizedImagesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchCustomizedImagesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchCustomizedImagesRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchCustomizedImagesRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchCustomizedImagesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchCustomizedImagesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchCustomizedImagesRequest_FieldTerminalPathArrayItemValue struct {
	WatchCustomizedImagesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchCustomizedImagesRequest_FieldPathArrayItemValue = (*WatchCustomizedImagesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchCustomizedImagesRequest as interface{}
func (fpaiv *WatchCustomizedImagesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchCustomizedImagesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchCustomizedImagesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchCustomizedImagesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchCustomizedImagesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchCustomizedImagesRequest'
func (fpaiv *WatchCustomizedImagesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchCustomizedImagesRequest) bool {
	slice := fpaiv.WatchCustomizedImagesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchCustomizedImagesRequest_FieldPathArrayOfValues allows storing slice of values for WatchCustomizedImagesRequest fields according to their type
type WatchCustomizedImagesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchCustomizedImagesRequest_FieldPath
}

func ParseWatchCustomizedImagesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchCustomizedImagesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchCustomizedImagesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchCustomizedImagesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchCustomizedImagesRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchCustomizedImagesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchCustomizedImagesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchCustomizedImagesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues struct {
	WatchCustomizedImagesRequest_FieldTerminalPath
	values interface{}
}

var _ WatchCustomizedImagesRequest_FieldPathArrayOfValues = (*WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchCustomizedImagesRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*customized_image.ParentReference) {
			values = append(values, v)
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*customized_image.PagerCursor) {
			values = append(values, v)
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*customized_image.OrderBy) {
			values = append(values, v)
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*customized_image.Filter) {
			values = append(values, v)
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*customized_image.CustomizedImage_FieldMask) {
			values = append(values, v)
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*customized_image.ParentReference, bool) {
	res, ok := fpaov.values.([]*customized_image.ParentReference)
	return res, ok
}
func (fpaov *WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*customized_image.PagerCursor, bool) {
	res, ok := fpaov.values.([]*customized_image.PagerCursor)
	return res, ok
}
func (fpaov *WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*customized_image.OrderBy, bool) {
	res, ok := fpaov.values.([]*customized_image.OrderBy)
	return res, ok
}
func (fpaov *WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*customized_image.Filter, bool) {
	res, ok := fpaov.values.([]*customized_image.Filter)
	return res, ok
}
func (fpaov *WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*customized_image.CustomizedImage_FieldMask, bool) {
	res, ok := fpaov.values.([]*customized_image.CustomizedImage_FieldMask)
	return res, ok
}
func (fpaov *WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchCustomizedImagesRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchCustomizedImagesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchCustomizedImagesResponse_FieldPathSelector
	Get(source *WatchCustomizedImagesResponse) []interface{}
	GetSingle(source *WatchCustomizedImagesResponse) (interface{}, bool)
	ClearValue(item *WatchCustomizedImagesResponse)

	// Those methods build corresponding WatchCustomizedImagesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchCustomizedImagesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchCustomizedImagesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchCustomizedImagesResponse_FieldPathArrayItemValue
}

type WatchCustomizedImagesResponse_FieldPathSelector int32

const (
	WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges WatchCustomizedImagesResponse_FieldPathSelector = 0
	WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent              WatchCustomizedImagesResponse_FieldPathSelector = 1
	WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange        WatchCustomizedImagesResponse_FieldPathSelector = 2
	WatchCustomizedImagesResponse_FieldPathSelectorResumeToken            WatchCustomizedImagesResponse_FieldPathSelector = 3
	WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize           WatchCustomizedImagesResponse_FieldPathSelector = 4
	WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset            WatchCustomizedImagesResponse_FieldPathSelector = 5
	WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset            WatchCustomizedImagesResponse_FieldPathSelector = 6
)

func (s WatchCustomizedImagesResponse_FieldPathSelector) String() string {
	switch s {
	case WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges:
		return "customized_image_changes"
	case WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchCustomizedImagesResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", s))
	}
}

func BuildWatchCustomizedImagesResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchCustomizedImagesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchCustomizedImagesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "customized_image_changes", "customizedImageChanges", "customized-image-changes":
			return &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchCustomizedImagesResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchCustomizedImagesResponse_FieldSubPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchCustomizedImagesResponse", fp)
}

func ParseWatchCustomizedImagesResponse_FieldPath(rawField string) (WatchCustomizedImagesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchCustomizedImagesResponse_FieldPath(fp)
}

func MustParseWatchCustomizedImagesResponse_FieldPath(rawField string) WatchCustomizedImagesResponse_FieldPath {
	fp, err := ParseWatchCustomizedImagesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchCustomizedImagesResponse_FieldTerminalPath struct {
	selector WatchCustomizedImagesResponse_FieldPathSelector
}

var _ WatchCustomizedImagesResponse_FieldPath = (*WatchCustomizedImagesResponse_FieldTerminalPath)(nil)

func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) Selector() WatchCustomizedImagesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchCustomizedImagesResponse
func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) Get(source *WatchCustomizedImagesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges:
			for _, value := range source.GetCustomizedImageChanges() {
				values = append(values, value)
			}
		case WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchCustomizedImagesResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchCustomizedImagesResponse))
}

// GetSingle returns value pointed by specific field of from source WatchCustomizedImagesResponse
func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) GetSingle(source *WatchCustomizedImagesResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges:
		res := source.GetCustomizedImageChanges()
		return res, res != nil
	case WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchCustomizedImagesResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchCustomizedImagesResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges:
		return ([]*customized_image.CustomizedImageChange)(nil)
	case WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
		return (*WatchCustomizedImagesResponse_PageTokenChange)(nil)
	case WatchCustomizedImagesResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) ClearValue(item *WatchCustomizedImagesResponse) {
	if item != nil {
		switch fp.selector {
		case WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges:
			item.CustomizedImageChanges = nil
		case WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchCustomizedImagesResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchCustomizedImagesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges ||
		fp.selector == WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchCustomizedImagesResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) WithIValue(value interface{}) WatchCustomizedImagesResponse_FieldPathValue {
	switch fp.selector {
	case WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges:
		return &WatchCustomizedImagesResponse_FieldTerminalPathValue{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.([]*customized_image.CustomizedImageChange)}
	case WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent:
		return &WatchCustomizedImagesResponse_FieldTerminalPathValue{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
		return &WatchCustomizedImagesResponse_FieldTerminalPathValue{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.(*WatchCustomizedImagesResponse_PageTokenChange)}
	case WatchCustomizedImagesResponse_FieldPathSelectorResumeToken:
		return &WatchCustomizedImagesResponse_FieldTerminalPathValue{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize:
		return &WatchCustomizedImagesResponse_FieldTerminalPathValue{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset:
		return &WatchCustomizedImagesResponse_FieldTerminalPathValue{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset:
		return &WatchCustomizedImagesResponse_FieldTerminalPathValue{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchCustomizedImagesResponse_FieldPathArrayOfValues {
	fpaov := &WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues{WatchCustomizedImagesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges:
		return &WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, values: values.([][]*customized_image.CustomizedImageChange)}
	case WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent:
		return &WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
		return &WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, values: values.([]*WatchCustomizedImagesResponse_PageTokenChange)}
	case WatchCustomizedImagesResponse_FieldPathSelectorResumeToken:
		return &WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize:
		return &WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset:
		return &WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset:
		return &WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchCustomizedImagesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges:
		return &WatchCustomizedImagesResponse_FieldTerminalPathArrayItemValue{WatchCustomizedImagesResponse_FieldTerminalPath: *fp, value: value.(*customized_image.CustomizedImageChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImagesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchCustomizedImagesResponse_FieldSubPath struct {
	selector WatchCustomizedImagesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchCustomizedImagesResponse_FieldPath = (*WatchCustomizedImagesResponse_FieldSubPath)(nil)

func (fps *WatchCustomizedImagesResponse_FieldSubPath) Selector() WatchCustomizedImagesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchCustomizedImagesResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchCustomizedImagesResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchCustomizedImagesResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchCustomizedImagesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchCustomizedImagesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchCustomizedImagesResponse
func (fps *WatchCustomizedImagesResponse_FieldSubPath) Get(source *WatchCustomizedImagesResponse) (values []interface{}) {
	switch fps.selector {
	case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchCustomizedImagesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchCustomizedImagesResponse))
}

// GetSingle returns value of selected field from source WatchCustomizedImagesResponse
func (fps *WatchCustomizedImagesResponse_FieldSubPath) GetSingle(source *WatchCustomizedImagesResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fps.selector))
	}
}

func (fps *WatchCustomizedImagesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchCustomizedImagesResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchCustomizedImagesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchCustomizedImagesResponse_FieldSubPath) ClearValue(item *WatchCustomizedImagesResponse) {
	if item != nil {
		switch fps.selector {
		case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchCustomizedImagesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchCustomizedImagesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchCustomizedImagesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchCustomizedImagesResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchCustomizedImagesResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchCustomizedImagesResponse_FieldSubPath) WithIValue(value interface{}) WatchCustomizedImagesResponse_FieldPathValue {
	return &WatchCustomizedImagesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchCustomizedImagesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchCustomizedImagesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchCustomizedImagesResponse_FieldPathArrayOfValues {
	return &WatchCustomizedImagesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchCustomizedImagesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchCustomizedImagesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchCustomizedImagesResponse_FieldPathArrayItemValue {
	return &WatchCustomizedImagesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchCustomizedImagesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchCustomizedImagesResponse_FieldPathValue allows storing values for WatchCustomizedImagesResponse fields according to their type
type WatchCustomizedImagesResponse_FieldPathValue interface {
	WatchCustomizedImagesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchCustomizedImagesResponse)
	CompareWith(*WatchCustomizedImagesResponse) (cmp int, comparable bool)
}

func ParseWatchCustomizedImagesResponse_FieldPathValue(pathStr, valueStr string) (WatchCustomizedImagesResponse_FieldPathValue, error) {
	fp, err := ParseWatchCustomizedImagesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchCustomizedImagesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchCustomizedImagesResponse_FieldPathValue), nil
}

func MustParseWatchCustomizedImagesResponse_FieldPathValue(pathStr, valueStr string) WatchCustomizedImagesResponse_FieldPathValue {
	fpv, err := ParseWatchCustomizedImagesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchCustomizedImagesResponse_FieldTerminalPathValue struct {
	WatchCustomizedImagesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchCustomizedImagesResponse_FieldPathValue = (*WatchCustomizedImagesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchCustomizedImagesResponse' as interface{}
func (fpv *WatchCustomizedImagesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchCustomizedImagesResponse_FieldTerminalPathValue) AsCustomizedImageChangesValue() ([]*customized_image.CustomizedImageChange, bool) {
	res, ok := fpv.value.([]*customized_image.CustomizedImageChange)
	return res, ok
}
func (fpv *WatchCustomizedImagesResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchCustomizedImagesResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchCustomizedImagesResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchCustomizedImagesResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchCustomizedImagesResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchCustomizedImagesResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchCustomizedImagesResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchCustomizedImagesResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchCustomizedImagesResponse
func (fpv *WatchCustomizedImagesResponse_FieldTerminalPathValue) SetTo(target **WatchCustomizedImagesResponse) {
	if *target == nil {
		*target = new(WatchCustomizedImagesResponse)
	}
	switch fpv.selector {
	case WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges:
		(*target).CustomizedImageChanges = fpv.value.([]*customized_image.CustomizedImageChange)
	case WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchCustomizedImagesResponse_PageTokenChange)
	case WatchCustomizedImagesResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchCustomizedImagesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchCustomizedImagesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchCustomizedImagesResponse_FieldTerminalPathValue' with the value under path in 'WatchCustomizedImagesResponse'.
func (fpv *WatchCustomizedImagesResponse_FieldTerminalPathValue) CompareWith(source *WatchCustomizedImagesResponse) (int, bool) {
	switch fpv.selector {
	case WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges:
		return 0, false
	case WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchCustomizedImagesResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchCustomizedImagesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchCustomizedImagesResponse))
}

type WatchCustomizedImagesResponse_FieldSubPathValue struct {
	WatchCustomizedImagesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchCustomizedImagesResponse_FieldPathValue = (*WatchCustomizedImagesResponse_FieldSubPathValue)(nil)

func (fpvs *WatchCustomizedImagesResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchCustomizedImagesResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchCustomizedImagesResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchCustomizedImagesResponse_FieldSubPathValue) SetTo(target **WatchCustomizedImagesResponse) {
	if *target == nil {
		*target = new(WatchCustomizedImagesResponse)
	}
	switch fpvs.Selector() {
	case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchCustomizedImagesResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchCustomizedImagesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchCustomizedImagesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchCustomizedImagesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchCustomizedImagesResponse_FieldSubPathValue) CompareWith(source *WatchCustomizedImagesResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchCustomizedImagesResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchCustomizedImagesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchCustomizedImagesResponse))
}

// WatchCustomizedImagesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchCustomizedImagesResponse according to their type
// Present only for array (repeated) types.
type WatchCustomizedImagesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchCustomizedImagesResponse_FieldPath
	ContainsValue(*WatchCustomizedImagesResponse) bool
}

// ParseWatchCustomizedImagesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchCustomizedImagesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchCustomizedImagesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchCustomizedImagesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchCustomizedImagesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchCustomizedImagesResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchCustomizedImagesResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchCustomizedImagesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchCustomizedImagesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchCustomizedImagesResponse_FieldTerminalPathArrayItemValue struct {
	WatchCustomizedImagesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchCustomizedImagesResponse_FieldPathArrayItemValue = (*WatchCustomizedImagesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchCustomizedImagesResponse as interface{}
func (fpaiv *WatchCustomizedImagesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchCustomizedImagesResponse_FieldTerminalPathArrayItemValue) AsCustomizedImageChangesItemValue() (*customized_image.CustomizedImageChange, bool) {
	res, ok := fpaiv.value.(*customized_image.CustomizedImageChange)
	return res, ok
}

func (fpaiv *WatchCustomizedImagesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchCustomizedImagesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchCustomizedImagesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchCustomizedImagesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchCustomizedImagesResponse'
func (fpaiv *WatchCustomizedImagesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchCustomizedImagesResponse) bool {
	slice := fpaiv.WatchCustomizedImagesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchCustomizedImagesResponse_FieldSubPathArrayItemValue struct {
	WatchCustomizedImagesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchCustomizedImagesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchCustomizedImagesResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchCustomizedImagesResponse'
func (fpaivs *WatchCustomizedImagesResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchCustomizedImagesResponse) bool {
	switch fpaivs.Selector() {
	case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse: %d", fpaivs.Selector()))
	}
}

// WatchCustomizedImagesResponse_FieldPathArrayOfValues allows storing slice of values for WatchCustomizedImagesResponse fields according to their type
type WatchCustomizedImagesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchCustomizedImagesResponse_FieldPath
}

func ParseWatchCustomizedImagesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchCustomizedImagesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchCustomizedImagesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchCustomizedImagesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchCustomizedImagesResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchCustomizedImagesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchCustomizedImagesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchCustomizedImagesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues struct {
	WatchCustomizedImagesResponse_FieldTerminalPath
	values interface{}
}

var _ WatchCustomizedImagesResponse_FieldPathArrayOfValues = (*WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges:
		for _, v := range fpaov.values.([][]*customized_image.CustomizedImageChange) {
			values = append(values, v)
		}
	case WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchCustomizedImagesResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchCustomizedImagesResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues) AsCustomizedImageChangesArrayOfValues() ([][]*customized_image.CustomizedImageChange, bool) {
	res, ok := fpaov.values.([][]*customized_image.CustomizedImageChange)
	return res, ok
}
func (fpaov *WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchCustomizedImagesResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchCustomizedImagesResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchCustomizedImagesResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchCustomizedImagesResponse_FieldSubPathArrayOfValues struct {
	WatchCustomizedImagesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchCustomizedImagesResponse_FieldPathArrayOfValues = (*WatchCustomizedImagesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchCustomizedImagesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchCustomizedImagesResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchCustomizedImagesResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchCustomizedImagesResponsePageTokenChange_FieldPathSelector
	Get(source *WatchCustomizedImagesResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchCustomizedImagesResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchCustomizedImagesResponse_PageTokenChange)

	// Those methods build corresponding WatchCustomizedImagesResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchCustomizedImagesResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchCustomizedImagesResponsePageTokenChange_FieldPathSelector int32

const (
	WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchCustomizedImagesResponsePageTokenChange_FieldPathSelector = 0
	WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken WatchCustomizedImagesResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchCustomizedImagesResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchCustomizedImagesResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchCustomizedImagesResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchCustomizedImagesResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath{selector: WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath{selector: WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchCustomizedImagesResponse_PageTokenChange", fp)
}

func ParseWatchCustomizedImagesResponsePageTokenChange_FieldPath(rawField string) (WatchCustomizedImagesResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchCustomizedImagesResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchCustomizedImagesResponsePageTokenChange_FieldPath(rawField string) WatchCustomizedImagesResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchCustomizedImagesResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchCustomizedImagesResponsePageTokenChange_FieldPathSelector
}

var _ WatchCustomizedImagesResponsePageTokenChange_FieldPath = (*WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) Selector() WatchCustomizedImagesResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchCustomizedImagesResponse_PageTokenChange
func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) Get(source *WatchCustomizedImagesResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchCustomizedImagesResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchCustomizedImagesResponse_PageTokenChange
func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchCustomizedImagesResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchCustomizedImagesResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*customized_image.PagerCursor)(nil)
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*customized_image.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchCustomizedImagesResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchCustomizedImagesResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchCustomizedImagesResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathValue{WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*customized_image.PagerCursor)}
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathValue{WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*customized_image.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*customized_image.PagerCursor)}
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*customized_image.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchCustomizedImagesResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchCustomizedImagesResponsePageTokenChange_FieldPathValue interface {
	WatchCustomizedImagesResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchCustomizedImagesResponse_PageTokenChange)
	CompareWith(*WatchCustomizedImagesResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchCustomizedImagesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchCustomizedImagesResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchCustomizedImagesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchCustomizedImagesResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchCustomizedImagesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchCustomizedImagesResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchCustomizedImagesResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchCustomizedImagesResponsePageTokenChange_FieldPathValue = (*WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*customized_image.PagerCursor, bool) {
	res, ok := fpv.value.(*customized_image.PagerCursor)
	return res, ok
}
func (fpv *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*customized_image.PagerCursor, bool) {
	res, ok := fpv.value.(*customized_image.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchCustomizedImagesResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchCustomizedImagesResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*customized_image.PagerCursor)
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*customized_image.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchCustomizedImagesResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchCustomizedImagesResponse_PageTokenChange'.
func (fpv *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchCustomizedImagesResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchCustomizedImagesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchCustomizedImagesResponse_PageTokenChange))
}

// WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchCustomizedImagesResponsePageTokenChange_FieldPath
	ContainsValue(*WatchCustomizedImagesResponse_PageTokenChange) bool
}

// ParseWatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchCustomizedImagesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayItemValue = (*WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchCustomizedImagesResponse_PageTokenChange as interface{}
func (fpaiv *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchCustomizedImagesResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchCustomizedImagesResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchCustomizedImagesResponse_PageTokenChange) bool {
	slice := fpaiv.WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchCustomizedImagesResponsePageTokenChange_FieldPath
}

func ParseWatchCustomizedImagesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchCustomizedImagesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchCustomizedImagesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchCustomizedImagesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchCustomizedImagesResponsePageTokenChange_FieldPathArrayOfValues = (*WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*customized_image.PagerCursor) {
			values = append(values, v)
		}
	case WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*customized_image.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*customized_image.PagerCursor, bool) {
	res, ok := fpaov.values.([]*customized_image.PagerCursor)
	return res, ok
}
func (fpaov *WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*customized_image.PagerCursor, bool) {
	res, ok := fpaov.values.([]*customized_image.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateCustomizedImageRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateCustomizedImageRequest_FieldPathSelector
	Get(source *CreateCustomizedImageRequest) []interface{}
	GetSingle(source *CreateCustomizedImageRequest) (interface{}, bool)
	ClearValue(item *CreateCustomizedImageRequest)

	// Those methods build corresponding CreateCustomizedImageRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateCustomizedImageRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateCustomizedImageRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateCustomizedImageRequest_FieldPathArrayItemValue
}

type CreateCustomizedImageRequest_FieldPathSelector int32

const (
	CreateCustomizedImageRequest_FieldPathSelectorParent          CreateCustomizedImageRequest_FieldPathSelector = 0
	CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage CreateCustomizedImageRequest_FieldPathSelector = 1
)

func (s CreateCustomizedImageRequest_FieldPathSelector) String() string {
	switch s {
	case CreateCustomizedImageRequest_FieldPathSelectorParent:
		return "parent"
	case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		return "customized_image"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", s))
	}
}

func BuildCreateCustomizedImageRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateCustomizedImageRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateCustomizedImageRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateCustomizedImageRequest_FieldTerminalPath{selector: CreateCustomizedImageRequest_FieldPathSelectorParent}, nil
		case "customized_image", "customizedImage", "customized-image":
			return &CreateCustomizedImageRequest_FieldTerminalPath{selector: CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage}, nil
		}
	} else {
		switch fp[0] {
		case "customized_image", "customizedImage", "customized-image":
			if subpath, err := customized_image.BuildCustomizedImage_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateCustomizedImageRequest_FieldSubPath{selector: CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateCustomizedImageRequest", fp)
}

func ParseCreateCustomizedImageRequest_FieldPath(rawField string) (CreateCustomizedImageRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateCustomizedImageRequest_FieldPath(fp)
}

func MustParseCreateCustomizedImageRequest_FieldPath(rawField string) CreateCustomizedImageRequest_FieldPath {
	fp, err := ParseCreateCustomizedImageRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateCustomizedImageRequest_FieldTerminalPath struct {
	selector CreateCustomizedImageRequest_FieldPathSelector
}

var _ CreateCustomizedImageRequest_FieldPath = (*CreateCustomizedImageRequest_FieldTerminalPath)(nil)

func (fp *CreateCustomizedImageRequest_FieldTerminalPath) Selector() CreateCustomizedImageRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateCustomizedImageRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateCustomizedImageRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateCustomizedImageRequest
func (fp *CreateCustomizedImageRequest_FieldTerminalPath) Get(source *CreateCustomizedImageRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateCustomizedImageRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
			if source.CustomizedImage != nil {
				values = append(values, source.CustomizedImage)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateCustomizedImageRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateCustomizedImageRequest))
}

// GetSingle returns value pointed by specific field of from source CreateCustomizedImageRequest
func (fp *CreateCustomizedImageRequest_FieldTerminalPath) GetSingle(source *CreateCustomizedImageRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateCustomizedImageRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		res := source.GetCustomizedImage()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *CreateCustomizedImageRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateCustomizedImageRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateCustomizedImageRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateCustomizedImageRequest_FieldPathSelectorParent:
		return (*customized_image.ParentReference)(nil)
	case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		return (*customized_image.CustomizedImage)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *CreateCustomizedImageRequest_FieldTerminalPath) ClearValue(item *CreateCustomizedImageRequest) {
	if item != nil {
		switch fp.selector {
		case CreateCustomizedImageRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
			item.CustomizedImage = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateCustomizedImageRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateCustomizedImageRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateCustomizedImageRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateCustomizedImageRequest_FieldPathSelectorParent
}

func (fp *CreateCustomizedImageRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateCustomizedImageRequest_FieldTerminalPath) WithIValue(value interface{}) CreateCustomizedImageRequest_FieldPathValue {
	switch fp.selector {
	case CreateCustomizedImageRequest_FieldPathSelectorParent:
		return &CreateCustomizedImageRequest_FieldTerminalPathValue{CreateCustomizedImageRequest_FieldTerminalPath: *fp, value: value.(*customized_image.ParentReference)}
	case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		return &CreateCustomizedImageRequest_FieldTerminalPathValue{CreateCustomizedImageRequest_FieldTerminalPath: *fp, value: value.(*customized_image.CustomizedImage)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *CreateCustomizedImageRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateCustomizedImageRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateCustomizedImageRequest_FieldPathArrayOfValues {
	fpaov := &CreateCustomizedImageRequest_FieldTerminalPathArrayOfValues{CreateCustomizedImageRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateCustomizedImageRequest_FieldPathSelectorParent:
		return &CreateCustomizedImageRequest_FieldTerminalPathArrayOfValues{CreateCustomizedImageRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.ParentReference)}
	case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		return &CreateCustomizedImageRequest_FieldTerminalPathArrayOfValues{CreateCustomizedImageRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.CustomizedImage)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateCustomizedImageRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateCustomizedImageRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateCustomizedImageRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *CreateCustomizedImageRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateCustomizedImageRequest_FieldSubPath struct {
	selector CreateCustomizedImageRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateCustomizedImageRequest_FieldPath = (*CreateCustomizedImageRequest_FieldSubPath)(nil)

func (fps *CreateCustomizedImageRequest_FieldSubPath) Selector() CreateCustomizedImageRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateCustomizedImageRequest_FieldSubPath) AsCustomizedImageSubPath() (customized_image.CustomizedImage_FieldPath, bool) {
	res, ok := fps.subPath.(customized_image.CustomizedImage_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateCustomizedImageRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateCustomizedImageRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateCustomizedImageRequest
func (fps *CreateCustomizedImageRequest_FieldSubPath) Get(source *CreateCustomizedImageRequest) (values []interface{}) {
	switch fps.selector {
	case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		values = append(values, fps.subPath.GetRaw(source.GetCustomizedImage())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateCustomizedImageRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateCustomizedImageRequest))
}

// GetSingle returns value of selected field from source CreateCustomizedImageRequest
func (fps *CreateCustomizedImageRequest_FieldSubPath) GetSingle(source *CreateCustomizedImageRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		if source.GetCustomizedImage() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCustomizedImage())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fps.selector))
	}
}

func (fps *CreateCustomizedImageRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateCustomizedImageRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateCustomizedImageRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateCustomizedImageRequest_FieldSubPath) ClearValue(item *CreateCustomizedImageRequest) {
	if item != nil {
		switch fps.selector {
		case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
			fps.subPath.ClearValueRaw(item.CustomizedImage)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateCustomizedImageRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateCustomizedImageRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateCustomizedImageRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateCustomizedImageRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateCustomizedImageRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateCustomizedImageRequest_FieldSubPath) WithIValue(value interface{}) CreateCustomizedImageRequest_FieldPathValue {
	return &CreateCustomizedImageRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateCustomizedImageRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateCustomizedImageRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateCustomizedImageRequest_FieldPathArrayOfValues {
	return &CreateCustomizedImageRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateCustomizedImageRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateCustomizedImageRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateCustomizedImageRequest_FieldPathArrayItemValue {
	return &CreateCustomizedImageRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateCustomizedImageRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateCustomizedImageRequest_FieldPathValue allows storing values for CreateCustomizedImageRequest fields according to their type
type CreateCustomizedImageRequest_FieldPathValue interface {
	CreateCustomizedImageRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateCustomizedImageRequest)
	CompareWith(*CreateCustomizedImageRequest) (cmp int, comparable bool)
}

func ParseCreateCustomizedImageRequest_FieldPathValue(pathStr, valueStr string) (CreateCustomizedImageRequest_FieldPathValue, error) {
	fp, err := ParseCreateCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateCustomizedImageRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateCustomizedImageRequest_FieldPathValue), nil
}

func MustParseCreateCustomizedImageRequest_FieldPathValue(pathStr, valueStr string) CreateCustomizedImageRequest_FieldPathValue {
	fpv, err := ParseCreateCustomizedImageRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateCustomizedImageRequest_FieldTerminalPathValue struct {
	CreateCustomizedImageRequest_FieldTerminalPath
	value interface{}
}

var _ CreateCustomizedImageRequest_FieldPathValue = (*CreateCustomizedImageRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateCustomizedImageRequest' as interface{}
func (fpv *CreateCustomizedImageRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateCustomizedImageRequest_FieldTerminalPathValue) AsParentValue() (*customized_image.ParentReference, bool) {
	res, ok := fpv.value.(*customized_image.ParentReference)
	return res, ok
}
func (fpv *CreateCustomizedImageRequest_FieldTerminalPathValue) AsCustomizedImageValue() (*customized_image.CustomizedImage, bool) {
	res, ok := fpv.value.(*customized_image.CustomizedImage)
	return res, ok
}

// SetTo stores value for selected field for object CreateCustomizedImageRequest
func (fpv *CreateCustomizedImageRequest_FieldTerminalPathValue) SetTo(target **CreateCustomizedImageRequest) {
	if *target == nil {
		*target = new(CreateCustomizedImageRequest)
	}
	switch fpv.selector {
	case CreateCustomizedImageRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*customized_image.ParentReference)
	case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		(*target).CustomizedImage = fpv.value.(*customized_image.CustomizedImage)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fpv.selector))
	}
}

func (fpv *CreateCustomizedImageRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateCustomizedImageRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateCustomizedImageRequest_FieldTerminalPathValue' with the value under path in 'CreateCustomizedImageRequest'.
func (fpv *CreateCustomizedImageRequest_FieldTerminalPathValue) CompareWith(source *CreateCustomizedImageRequest) (int, bool) {
	switch fpv.selector {
	case CreateCustomizedImageRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*customized_image.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fpv.selector))
	}
}

func (fpv *CreateCustomizedImageRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateCustomizedImageRequest))
}

type CreateCustomizedImageRequest_FieldSubPathValue struct {
	CreateCustomizedImageRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateCustomizedImageRequest_FieldPathValue = (*CreateCustomizedImageRequest_FieldSubPathValue)(nil)

func (fpvs *CreateCustomizedImageRequest_FieldSubPathValue) AsCustomizedImagePathValue() (customized_image.CustomizedImage_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(customized_image.CustomizedImage_FieldPathValue)
	return res, ok
}

func (fpvs *CreateCustomizedImageRequest_FieldSubPathValue) SetTo(target **CreateCustomizedImageRequest) {
	if *target == nil {
		*target = new(CreateCustomizedImageRequest)
	}
	switch fpvs.Selector() {
	case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		fpvs.subPathValue.(customized_image.CustomizedImage_FieldPathValue).SetTo(&(*target).CustomizedImage)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateCustomizedImageRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateCustomizedImageRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateCustomizedImageRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateCustomizedImageRequest_FieldSubPathValue) CompareWith(source *CreateCustomizedImageRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		return fpvs.subPathValue.(customized_image.CustomizedImage_FieldPathValue).CompareWith(source.GetCustomizedImage())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateCustomizedImageRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateCustomizedImageRequest))
}

// CreateCustomizedImageRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateCustomizedImageRequest according to their type
// Present only for array (repeated) types.
type CreateCustomizedImageRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateCustomizedImageRequest_FieldPath
	ContainsValue(*CreateCustomizedImageRequest) bool
}

// ParseCreateCustomizedImageRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateCustomizedImageRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateCustomizedImageRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateCustomizedImageRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateCustomizedImageRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateCustomizedImageRequest_FieldTerminalPathArrayItemValue struct {
	CreateCustomizedImageRequest_FieldTerminalPath
	value interface{}
}

var _ CreateCustomizedImageRequest_FieldPathArrayItemValue = (*CreateCustomizedImageRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateCustomizedImageRequest as interface{}
func (fpaiv *CreateCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateCustomizedImageRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateCustomizedImageRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateCustomizedImageRequest'
func (fpaiv *CreateCustomizedImageRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateCustomizedImageRequest) bool {
	slice := fpaiv.CreateCustomizedImageRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateCustomizedImageRequest_FieldSubPathArrayItemValue struct {
	CreateCustomizedImageRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateCustomizedImageRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateCustomizedImageRequest_FieldSubPathArrayItemValue) AsCustomizedImagePathItemValue() (customized_image.CustomizedImage_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(customized_image.CustomizedImage_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateCustomizedImageRequest'
func (fpaivs *CreateCustomizedImageRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateCustomizedImageRequest) bool {
	switch fpaivs.Selector() {
	case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		return fpaivs.subPathItemValue.(customized_image.CustomizedImage_FieldPathArrayItemValue).ContainsValue(source.GetCustomizedImage())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateCustomizedImageRequest: %d", fpaivs.Selector()))
	}
}

// CreateCustomizedImageRequest_FieldPathArrayOfValues allows storing slice of values for CreateCustomizedImageRequest fields according to their type
type CreateCustomizedImageRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateCustomizedImageRequest_FieldPath
}

func ParseCreateCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateCustomizedImageRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateCustomizedImageRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateCustomizedImageRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateCustomizedImageRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateCustomizedImageRequest_FieldTerminalPathArrayOfValues struct {
	CreateCustomizedImageRequest_FieldTerminalPath
	values interface{}
}

var _ CreateCustomizedImageRequest_FieldPathArrayOfValues = (*CreateCustomizedImageRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateCustomizedImageRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateCustomizedImageRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*customized_image.ParentReference) {
			values = append(values, v)
		}
	case CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		for _, v := range fpaov.values.([]*customized_image.CustomizedImage) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateCustomizedImageRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*customized_image.ParentReference, bool) {
	res, ok := fpaov.values.([]*customized_image.ParentReference)
	return res, ok
}
func (fpaov *CreateCustomizedImageRequest_FieldTerminalPathArrayOfValues) AsCustomizedImageArrayOfValues() ([]*customized_image.CustomizedImage, bool) {
	res, ok := fpaov.values.([]*customized_image.CustomizedImage)
	return res, ok
}

type CreateCustomizedImageRequest_FieldSubPathArrayOfValues struct {
	CreateCustomizedImageRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateCustomizedImageRequest_FieldPathArrayOfValues = (*CreateCustomizedImageRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateCustomizedImageRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateCustomizedImageRequest_FieldSubPathArrayOfValues) AsCustomizedImagePathArrayOfValues() (customized_image.CustomizedImage_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(customized_image.CustomizedImage_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateCustomizedImageRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateCustomizedImageRequest_FieldPathSelector
	Get(source *UpdateCustomizedImageRequest) []interface{}
	GetSingle(source *UpdateCustomizedImageRequest) (interface{}, bool)
	ClearValue(item *UpdateCustomizedImageRequest)

	// Those methods build corresponding UpdateCustomizedImageRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateCustomizedImageRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateCustomizedImageRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateCustomizedImageRequest_FieldPathArrayItemValue
}

type UpdateCustomizedImageRequest_FieldPathSelector int32

const (
	UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage UpdateCustomizedImageRequest_FieldPathSelector = 0
	UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask      UpdateCustomizedImageRequest_FieldPathSelector = 1
	UpdateCustomizedImageRequest_FieldPathSelectorCas             UpdateCustomizedImageRequest_FieldPathSelector = 2
	UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing    UpdateCustomizedImageRequest_FieldPathSelector = 3
)

func (s UpdateCustomizedImageRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		return "customized_image"
	case UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateCustomizedImageRequest_FieldPathSelectorCas:
		return "cas"
	case UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing:
		return "allow_missing"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", s))
	}
}

func BuildUpdateCustomizedImageRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateCustomizedImageRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateCustomizedImageRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "customized_image", "customizedImage", "customized-image":
			return &UpdateCustomizedImageRequest_FieldTerminalPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateCustomizedImageRequest_FieldTerminalPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateCustomizedImageRequest_FieldTerminalPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorCas}, nil
		case "allow_missing", "allowMissing", "allow-missing":
			return &UpdateCustomizedImageRequest_FieldTerminalPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing}, nil
		}
	} else {
		switch fp[0] {
		case "customized_image", "customizedImage", "customized-image":
			if subpath, err := customized_image.BuildCustomizedImage_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateCustomizedImageRequest_FieldSubPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateCustomizedImageRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateCustomizedImageRequest_FieldSubPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateCustomizedImageRequest", fp)
}

func ParseUpdateCustomizedImageRequest_FieldPath(rawField string) (UpdateCustomizedImageRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateCustomizedImageRequest_FieldPath(fp)
}

func MustParseUpdateCustomizedImageRequest_FieldPath(rawField string) UpdateCustomizedImageRequest_FieldPath {
	fp, err := ParseUpdateCustomizedImageRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateCustomizedImageRequest_FieldTerminalPath struct {
	selector UpdateCustomizedImageRequest_FieldPathSelector
}

var _ UpdateCustomizedImageRequest_FieldPath = (*UpdateCustomizedImageRequest_FieldTerminalPath)(nil)

func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) Selector() UpdateCustomizedImageRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateCustomizedImageRequest
func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) Get(source *UpdateCustomizedImageRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
			if source.CustomizedImage != nil {
				values = append(values, source.CustomizedImage)
			}
		case UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateCustomizedImageRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		case UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing:
			values = append(values, source.AllowMissing)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateCustomizedImageRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateCustomizedImageRequest
func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) GetSingle(source *UpdateCustomizedImageRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		res := source.GetCustomizedImage()
		return res, res != nil
	case UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateCustomizedImageRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	case UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing:
		return source.GetAllowMissing(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateCustomizedImageRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		return (*customized_image.CustomizedImage)(nil)
	case UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask:
		return (*customized_image.CustomizedImage_FieldMask)(nil)
	case UpdateCustomizedImageRequest_FieldPathSelectorCas:
		return (*UpdateCustomizedImageRequest_CAS)(nil)
	case UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) ClearValue(item *UpdateCustomizedImageRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
			item.CustomizedImage = nil
		case UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateCustomizedImageRequest_FieldPathSelectorCas:
			item.Cas = nil
		case UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing:
			item.AllowMissing = false
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateCustomizedImageRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask ||
		fp.selector == UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing
}

func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateCustomizedImageRequest_FieldPathValue {
	switch fp.selector {
	case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		return &UpdateCustomizedImageRequest_FieldTerminalPathValue{UpdateCustomizedImageRequest_FieldTerminalPath: *fp, value: value.(*customized_image.CustomizedImage)}
	case UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask:
		return &UpdateCustomizedImageRequest_FieldTerminalPathValue{UpdateCustomizedImageRequest_FieldTerminalPath: *fp, value: value.(*customized_image.CustomizedImage_FieldMask)}
	case UpdateCustomizedImageRequest_FieldPathSelectorCas:
		return &UpdateCustomizedImageRequest_FieldTerminalPathValue{UpdateCustomizedImageRequest_FieldTerminalPath: *fp, value: value.(*UpdateCustomizedImageRequest_CAS)}
	case UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing:
		return &UpdateCustomizedImageRequest_FieldTerminalPathValue{UpdateCustomizedImageRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateCustomizedImageRequest_FieldPathArrayOfValues {
	fpaov := &UpdateCustomizedImageRequest_FieldTerminalPathArrayOfValues{UpdateCustomizedImageRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		return &UpdateCustomizedImageRequest_FieldTerminalPathArrayOfValues{UpdateCustomizedImageRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.CustomizedImage)}
	case UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask:
		return &UpdateCustomizedImageRequest_FieldTerminalPathArrayOfValues{UpdateCustomizedImageRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.CustomizedImage_FieldMask)}
	case UpdateCustomizedImageRequest_FieldPathSelectorCas:
		return &UpdateCustomizedImageRequest_FieldTerminalPathArrayOfValues{UpdateCustomizedImageRequest_FieldTerminalPath: *fp, values: values.([]*UpdateCustomizedImageRequest_CAS)}
	case UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing:
		return &UpdateCustomizedImageRequest_FieldTerminalPathArrayOfValues{UpdateCustomizedImageRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateCustomizedImageRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *UpdateCustomizedImageRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateCustomizedImageRequest_FieldSubPath struct {
	selector UpdateCustomizedImageRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateCustomizedImageRequest_FieldPath = (*UpdateCustomizedImageRequest_FieldSubPath)(nil)

func (fps *UpdateCustomizedImageRequest_FieldSubPath) Selector() UpdateCustomizedImageRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateCustomizedImageRequest_FieldSubPath) AsCustomizedImageSubPath() (customized_image.CustomizedImage_FieldPath, bool) {
	res, ok := fps.subPath.(customized_image.CustomizedImage_FieldPath)
	return res, ok
}
func (fps *UpdateCustomizedImageRequest_FieldSubPath) AsCasSubPath() (UpdateCustomizedImageRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateCustomizedImageRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateCustomizedImageRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateCustomizedImageRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateCustomizedImageRequest
func (fps *UpdateCustomizedImageRequest_FieldSubPath) Get(source *UpdateCustomizedImageRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		values = append(values, fps.subPath.GetRaw(source.GetCustomizedImage())...)
	case UpdateCustomizedImageRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateCustomizedImageRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateCustomizedImageRequest))
}

// GetSingle returns value of selected field from source UpdateCustomizedImageRequest
func (fps *UpdateCustomizedImageRequest_FieldSubPath) GetSingle(source *UpdateCustomizedImageRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		if source.GetCustomizedImage() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCustomizedImage())
	case UpdateCustomizedImageRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fps.selector))
	}
}

func (fps *UpdateCustomizedImageRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateCustomizedImageRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateCustomizedImageRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateCustomizedImageRequest_FieldSubPath) ClearValue(item *UpdateCustomizedImageRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
			fps.subPath.ClearValueRaw(item.CustomizedImage)
		case UpdateCustomizedImageRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateCustomizedImageRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateCustomizedImageRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateCustomizedImageRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateCustomizedImageRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateCustomizedImageRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateCustomizedImageRequest_FieldSubPath) WithIValue(value interface{}) UpdateCustomizedImageRequest_FieldPathValue {
	return &UpdateCustomizedImageRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateCustomizedImageRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateCustomizedImageRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateCustomizedImageRequest_FieldPathArrayOfValues {
	return &UpdateCustomizedImageRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateCustomizedImageRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateCustomizedImageRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateCustomizedImageRequest_FieldPathArrayItemValue {
	return &UpdateCustomizedImageRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateCustomizedImageRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateCustomizedImageRequest_FieldPathValue allows storing values for UpdateCustomizedImageRequest fields according to their type
type UpdateCustomizedImageRequest_FieldPathValue interface {
	UpdateCustomizedImageRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateCustomizedImageRequest)
	CompareWith(*UpdateCustomizedImageRequest) (cmp int, comparable bool)
}

func ParseUpdateCustomizedImageRequest_FieldPathValue(pathStr, valueStr string) (UpdateCustomizedImageRequest_FieldPathValue, error) {
	fp, err := ParseUpdateCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateCustomizedImageRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateCustomizedImageRequest_FieldPathValue), nil
}

func MustParseUpdateCustomizedImageRequest_FieldPathValue(pathStr, valueStr string) UpdateCustomizedImageRequest_FieldPathValue {
	fpv, err := ParseUpdateCustomizedImageRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateCustomizedImageRequest_FieldTerminalPathValue struct {
	UpdateCustomizedImageRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateCustomizedImageRequest_FieldPathValue = (*UpdateCustomizedImageRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateCustomizedImageRequest' as interface{}
func (fpv *UpdateCustomizedImageRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateCustomizedImageRequest_FieldTerminalPathValue) AsCustomizedImageValue() (*customized_image.CustomizedImage, bool) {
	res, ok := fpv.value.(*customized_image.CustomizedImage)
	return res, ok
}
func (fpv *UpdateCustomizedImageRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*customized_image.CustomizedImage_FieldMask, bool) {
	res, ok := fpv.value.(*customized_image.CustomizedImage_FieldMask)
	return res, ok
}
func (fpv *UpdateCustomizedImageRequest_FieldTerminalPathValue) AsCasValue() (*UpdateCustomizedImageRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateCustomizedImageRequest_CAS)
	return res, ok
}
func (fpv *UpdateCustomizedImageRequest_FieldTerminalPathValue) AsAllowMissingValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object UpdateCustomizedImageRequest
func (fpv *UpdateCustomizedImageRequest_FieldTerminalPathValue) SetTo(target **UpdateCustomizedImageRequest) {
	if *target == nil {
		*target = new(UpdateCustomizedImageRequest)
	}
	switch fpv.selector {
	case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		(*target).CustomizedImage = fpv.value.(*customized_image.CustomizedImage)
	case UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*customized_image.CustomizedImage_FieldMask)
	case UpdateCustomizedImageRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateCustomizedImageRequest_CAS)
	case UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing:
		(*target).AllowMissing = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateCustomizedImageRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateCustomizedImageRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateCustomizedImageRequest_FieldTerminalPathValue' with the value under path in 'UpdateCustomizedImageRequest'.
func (fpv *UpdateCustomizedImageRequest_FieldTerminalPathValue) CompareWith(source *UpdateCustomizedImageRequest) (int, bool) {
	switch fpv.selector {
	case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		return 0, false
	case UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateCustomizedImageRequest_FieldPathSelectorCas:
		return 0, false
	case UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAllowMissing()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateCustomizedImageRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateCustomizedImageRequest))
}

type UpdateCustomizedImageRequest_FieldSubPathValue struct {
	UpdateCustomizedImageRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateCustomizedImageRequest_FieldPathValue = (*UpdateCustomizedImageRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateCustomizedImageRequest_FieldSubPathValue) AsCustomizedImagePathValue() (customized_image.CustomizedImage_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(customized_image.CustomizedImage_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateCustomizedImageRequest_FieldSubPathValue) AsCasPathValue() (UpdateCustomizedImageRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateCustomizedImageRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateCustomizedImageRequest_FieldSubPathValue) SetTo(target **UpdateCustomizedImageRequest) {
	if *target == nil {
		*target = new(UpdateCustomizedImageRequest)
	}
	switch fpvs.Selector() {
	case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		fpvs.subPathValue.(customized_image.CustomizedImage_FieldPathValue).SetTo(&(*target).CustomizedImage)
	case UpdateCustomizedImageRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateCustomizedImageRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateCustomizedImageRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateCustomizedImageRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateCustomizedImageRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateCustomizedImageRequest_FieldSubPathValue) CompareWith(source *UpdateCustomizedImageRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		return fpvs.subPathValue.(customized_image.CustomizedImage_FieldPathValue).CompareWith(source.GetCustomizedImage())
	case UpdateCustomizedImageRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateCustomizedImageRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateCustomizedImageRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateCustomizedImageRequest))
}

// UpdateCustomizedImageRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateCustomizedImageRequest according to their type
// Present only for array (repeated) types.
type UpdateCustomizedImageRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateCustomizedImageRequest_FieldPath
	ContainsValue(*UpdateCustomizedImageRequest) bool
}

// ParseUpdateCustomizedImageRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateCustomizedImageRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateCustomizedImageRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateCustomizedImageRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateCustomizedImageRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateCustomizedImageRequest_FieldTerminalPathArrayItemValue struct {
	UpdateCustomizedImageRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateCustomizedImageRequest_FieldPathArrayItemValue = (*UpdateCustomizedImageRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateCustomizedImageRequest as interface{}
func (fpaiv *UpdateCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateCustomizedImageRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateCustomizedImageRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateCustomizedImageRequest'
func (fpaiv *UpdateCustomizedImageRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateCustomizedImageRequest) bool {
	slice := fpaiv.UpdateCustomizedImageRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateCustomizedImageRequest_FieldSubPathArrayItemValue struct {
	UpdateCustomizedImageRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateCustomizedImageRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateCustomizedImageRequest_FieldSubPathArrayItemValue) AsCustomizedImagePathItemValue() (customized_image.CustomizedImage_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(customized_image.CustomizedImage_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateCustomizedImageRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateCustomizedImageRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateCustomizedImageRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateCustomizedImageRequest'
func (fpaivs *UpdateCustomizedImageRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateCustomizedImageRequest) bool {
	switch fpaivs.Selector() {
	case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		return fpaivs.subPathItemValue.(customized_image.CustomizedImage_FieldPathArrayItemValue).ContainsValue(source.GetCustomizedImage())
	case UpdateCustomizedImageRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateCustomizedImageRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest: %d", fpaivs.Selector()))
	}
}

// UpdateCustomizedImageRequest_FieldPathArrayOfValues allows storing slice of values for UpdateCustomizedImageRequest fields according to their type
type UpdateCustomizedImageRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateCustomizedImageRequest_FieldPath
}

func ParseUpdateCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateCustomizedImageRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateCustomizedImageRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateCustomizedImageRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateCustomizedImageRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateCustomizedImageRequest_FieldTerminalPathArrayOfValues struct {
	UpdateCustomizedImageRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateCustomizedImageRequest_FieldPathArrayOfValues = (*UpdateCustomizedImageRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateCustomizedImageRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage:
		for _, v := range fpaov.values.([]*customized_image.CustomizedImage) {
			values = append(values, v)
		}
	case UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*customized_image.CustomizedImage_FieldMask) {
			values = append(values, v)
		}
	case UpdateCustomizedImageRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateCustomizedImageRequest_CAS) {
			values = append(values, v)
		}
	case UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateCustomizedImageRequest_FieldTerminalPathArrayOfValues) AsCustomizedImageArrayOfValues() ([]*customized_image.CustomizedImage, bool) {
	res, ok := fpaov.values.([]*customized_image.CustomizedImage)
	return res, ok
}
func (fpaov *UpdateCustomizedImageRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*customized_image.CustomizedImage_FieldMask, bool) {
	res, ok := fpaov.values.([]*customized_image.CustomizedImage_FieldMask)
	return res, ok
}
func (fpaov *UpdateCustomizedImageRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateCustomizedImageRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateCustomizedImageRequest_CAS)
	return res, ok
}
func (fpaov *UpdateCustomizedImageRequest_FieldTerminalPathArrayOfValues) AsAllowMissingArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type UpdateCustomizedImageRequest_FieldSubPathArrayOfValues struct {
	UpdateCustomizedImageRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateCustomizedImageRequest_FieldPathArrayOfValues = (*UpdateCustomizedImageRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateCustomizedImageRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateCustomizedImageRequest_FieldSubPathArrayOfValues) AsCustomizedImagePathArrayOfValues() (customized_image.CustomizedImage_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(customized_image.CustomizedImage_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateCustomizedImageRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateCustomizedImageRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateCustomizedImageRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateCustomizedImageRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateCustomizedImageRequestCAS_FieldPathSelector
	Get(source *UpdateCustomizedImageRequest_CAS) []interface{}
	GetSingle(source *UpdateCustomizedImageRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateCustomizedImageRequest_CAS)

	// Those methods build corresponding UpdateCustomizedImageRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateCustomizedImageRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateCustomizedImageRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateCustomizedImageRequestCAS_FieldPathArrayItemValue
}

type UpdateCustomizedImageRequestCAS_FieldPathSelector int32

const (
	UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState UpdateCustomizedImageRequestCAS_FieldPathSelector = 0
	UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask        UpdateCustomizedImageRequestCAS_FieldPathSelector = 1
)

func (s UpdateCustomizedImageRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", s))
	}
}

func BuildUpdateCustomizedImageRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateCustomizedImageRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateCustomizedImageRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateCustomizedImageRequestCAS_FieldTerminalPath{selector: UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateCustomizedImageRequestCAS_FieldTerminalPath{selector: UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := customized_image.BuildCustomizedImage_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateCustomizedImageRequestCAS_FieldSubPath{selector: UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateCustomizedImageRequest_CAS", fp)
}

func ParseUpdateCustomizedImageRequestCAS_FieldPath(rawField string) (UpdateCustomizedImageRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateCustomizedImageRequestCAS_FieldPath(fp)
}

func MustParseUpdateCustomizedImageRequestCAS_FieldPath(rawField string) UpdateCustomizedImageRequestCAS_FieldPath {
	fp, err := ParseUpdateCustomizedImageRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateCustomizedImageRequestCAS_FieldTerminalPath struct {
	selector UpdateCustomizedImageRequestCAS_FieldPathSelector
}

var _ UpdateCustomizedImageRequestCAS_FieldPath = (*UpdateCustomizedImageRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) Selector() UpdateCustomizedImageRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateCustomizedImageRequest_CAS
func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) Get(source *UpdateCustomizedImageRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateCustomizedImageRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateCustomizedImageRequest_CAS
func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) GetSingle(source *UpdateCustomizedImageRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateCustomizedImageRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
		return (*customized_image.CustomizedImage)(nil)
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask:
		return (*customized_image.CustomizedImage_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) ClearValue(item *UpdateCustomizedImageRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateCustomizedImageRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateCustomizedImageRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateCustomizedImageRequestCAS_FieldTerminalPathValue{UpdateCustomizedImageRequestCAS_FieldTerminalPath: *fp, value: value.(*customized_image.CustomizedImage)}
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateCustomizedImageRequestCAS_FieldTerminalPathValue{UpdateCustomizedImageRequestCAS_FieldTerminalPath: *fp, value: value.(*customized_image.CustomizedImage_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateCustomizedImageRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateCustomizedImageRequestCAS_FieldTerminalPathArrayOfValues{UpdateCustomizedImageRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateCustomizedImageRequestCAS_FieldTerminalPathArrayOfValues{UpdateCustomizedImageRequestCAS_FieldTerminalPath: *fp, values: values.([]*customized_image.CustomizedImage)}
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateCustomizedImageRequestCAS_FieldTerminalPathArrayOfValues{UpdateCustomizedImageRequestCAS_FieldTerminalPath: *fp, values: values.([]*customized_image.CustomizedImage_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateCustomizedImageRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateCustomizedImageRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateCustomizedImageRequestCAS_FieldSubPath struct {
	selector UpdateCustomizedImageRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateCustomizedImageRequestCAS_FieldPath = (*UpdateCustomizedImageRequestCAS_FieldSubPath)(nil)

func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) Selector() UpdateCustomizedImageRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) AsConditionalStateSubPath() (customized_image.CustomizedImage_FieldPath, bool) {
	res, ok := fps.subPath.(customized_image.CustomizedImage_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateCustomizedImageRequest_CAS
func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) Get(source *UpdateCustomizedImageRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateCustomizedImageRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateCustomizedImageRequest_CAS
func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) GetSingle(source *UpdateCustomizedImageRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateCustomizedImageRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) ClearValue(item *UpdateCustomizedImageRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateCustomizedImageRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateCustomizedImageRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateCustomizedImageRequestCAS_FieldPathValue {
	return &UpdateCustomizedImageRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateCustomizedImageRequestCAS_FieldPathArrayOfValues {
	return &UpdateCustomizedImageRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateCustomizedImageRequestCAS_FieldPathArrayItemValue {
	return &UpdateCustomizedImageRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateCustomizedImageRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateCustomizedImageRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateCustomizedImageRequestCAS_FieldPathValue interface {
	UpdateCustomizedImageRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateCustomizedImageRequest_CAS)
	CompareWith(*UpdateCustomizedImageRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateCustomizedImageRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateCustomizedImageRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateCustomizedImageRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateCustomizedImageRequestCAS_FieldPathValue), nil
}

func MustParseUpdateCustomizedImageRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateCustomizedImageRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateCustomizedImageRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateCustomizedImageRequestCAS_FieldTerminalPathValue struct {
	UpdateCustomizedImageRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateCustomizedImageRequestCAS_FieldPathValue = (*UpdateCustomizedImageRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateCustomizedImageRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateCustomizedImageRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*customized_image.CustomizedImage, bool) {
	res, ok := fpv.value.(*customized_image.CustomizedImage)
	return res, ok
}
func (fpv *UpdateCustomizedImageRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*customized_image.CustomizedImage_FieldMask, bool) {
	res, ok := fpv.value.(*customized_image.CustomizedImage_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateCustomizedImageRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateCustomizedImageRequest_CAS) {
	if *target == nil {
		*target = new(UpdateCustomizedImageRequest_CAS)
	}
	switch fpv.selector {
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*customized_image.CustomizedImage)
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*customized_image.CustomizedImage_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateCustomizedImageRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateCustomizedImageRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateCustomizedImageRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateCustomizedImageRequest_CAS'.
func (fpv *UpdateCustomizedImageRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateCustomizedImageRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateCustomizedImageRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateCustomizedImageRequest_CAS))
}

type UpdateCustomizedImageRequestCAS_FieldSubPathValue struct {
	UpdateCustomizedImageRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateCustomizedImageRequestCAS_FieldPathValue = (*UpdateCustomizedImageRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateCustomizedImageRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (customized_image.CustomizedImage_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(customized_image.CustomizedImage_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateCustomizedImageRequestCAS_FieldSubPathValue) SetTo(target **UpdateCustomizedImageRequest_CAS) {
	if *target == nil {
		*target = new(UpdateCustomizedImageRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(customized_image.CustomizedImage_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateCustomizedImageRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateCustomizedImageRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateCustomizedImageRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateCustomizedImageRequestCAS_FieldSubPathValue) CompareWith(source *UpdateCustomizedImageRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(customized_image.CustomizedImage_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateCustomizedImageRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateCustomizedImageRequest_CAS))
}

// UpdateCustomizedImageRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateCustomizedImageRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateCustomizedImageRequestCAS_FieldPath
	ContainsValue(*UpdateCustomizedImageRequest_CAS) bool
}

// ParseUpdateCustomizedImageRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateCustomizedImageRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateCustomizedImageRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateCustomizedImageRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateCustomizedImageRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateCustomizedImageRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateCustomizedImageRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateCustomizedImageRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateCustomizedImageRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateCustomizedImageRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateCustomizedImageRequestCAS_FieldPathArrayItemValue = (*UpdateCustomizedImageRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateCustomizedImageRequest_CAS as interface{}
func (fpaiv *UpdateCustomizedImageRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateCustomizedImageRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateCustomizedImageRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateCustomizedImageRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateCustomizedImageRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateCustomizedImageRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateCustomizedImageRequest_CAS) bool {
	slice := fpaiv.UpdateCustomizedImageRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateCustomizedImageRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateCustomizedImageRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateCustomizedImageRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateCustomizedImageRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (customized_image.CustomizedImage_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(customized_image.CustomizedImage_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateCustomizedImageRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateCustomizedImageRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(customized_image.CustomizedImage_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateCustomizedImageRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateCustomizedImageRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateCustomizedImageRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateCustomizedImageRequestCAS_FieldPath
}

func ParseUpdateCustomizedImageRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateCustomizedImageRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateCustomizedImageRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateCustomizedImageRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateCustomizedImageRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateCustomizedImageRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateCustomizedImageRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateCustomizedImageRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateCustomizedImageRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateCustomizedImageRequestCAS_FieldPathArrayOfValues = (*UpdateCustomizedImageRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateCustomizedImageRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*customized_image.CustomizedImage) {
			values = append(values, v)
		}
	case UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*customized_image.CustomizedImage_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateCustomizedImageRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*customized_image.CustomizedImage, bool) {
	res, ok := fpaov.values.([]*customized_image.CustomizedImage)
	return res, ok
}
func (fpaov *UpdateCustomizedImageRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*customized_image.CustomizedImage_FieldMask, bool) {
	res, ok := fpaov.values.([]*customized_image.CustomizedImage_FieldMask)
	return res, ok
}

type UpdateCustomizedImageRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateCustomizedImageRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateCustomizedImageRequestCAS_FieldPathArrayOfValues = (*UpdateCustomizedImageRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateCustomizedImageRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateCustomizedImageRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (customized_image.CustomizedImage_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(customized_image.CustomizedImage_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteCustomizedImageRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteCustomizedImageRequest_FieldPathSelector
	Get(source *DeleteCustomizedImageRequest) []interface{}
	GetSingle(source *DeleteCustomizedImageRequest) (interface{}, bool)
	ClearValue(item *DeleteCustomizedImageRequest)

	// Those methods build corresponding DeleteCustomizedImageRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteCustomizedImageRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteCustomizedImageRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteCustomizedImageRequest_FieldPathArrayItemValue
}

type DeleteCustomizedImageRequest_FieldPathSelector int32

const (
	DeleteCustomizedImageRequest_FieldPathSelectorName DeleteCustomizedImageRequest_FieldPathSelector = 0
)

func (s DeleteCustomizedImageRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteCustomizedImageRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteCustomizedImageRequest: %d", s))
	}
}

func BuildDeleteCustomizedImageRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteCustomizedImageRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteCustomizedImageRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteCustomizedImageRequest_FieldTerminalPath{selector: DeleteCustomizedImageRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteCustomizedImageRequest", fp)
}

func ParseDeleteCustomizedImageRequest_FieldPath(rawField string) (DeleteCustomizedImageRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteCustomizedImageRequest_FieldPath(fp)
}

func MustParseDeleteCustomizedImageRequest_FieldPath(rawField string) DeleteCustomizedImageRequest_FieldPath {
	fp, err := ParseDeleteCustomizedImageRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteCustomizedImageRequest_FieldTerminalPath struct {
	selector DeleteCustomizedImageRequest_FieldPathSelector
}

var _ DeleteCustomizedImageRequest_FieldPath = (*DeleteCustomizedImageRequest_FieldTerminalPath)(nil)

func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) Selector() DeleteCustomizedImageRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteCustomizedImageRequest
func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) Get(source *DeleteCustomizedImageRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteCustomizedImageRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteCustomizedImageRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteCustomizedImageRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteCustomizedImageRequest
func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) GetSingle(source *DeleteCustomizedImageRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteCustomizedImageRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteCustomizedImageRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteCustomizedImageRequest_FieldPathSelectorName:
		return (*customized_image.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) ClearValue(item *DeleteCustomizedImageRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteCustomizedImageRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteCustomizedImageRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteCustomizedImageRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteCustomizedImageRequest_FieldPathSelectorName
}

func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteCustomizedImageRequest_FieldPathValue {
	switch fp.selector {
	case DeleteCustomizedImageRequest_FieldPathSelectorName:
		return &DeleteCustomizedImageRequest_FieldTerminalPathValue{DeleteCustomizedImageRequest_FieldTerminalPath: *fp, value: value.(*customized_image.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteCustomizedImageRequest_FieldPathArrayOfValues {
	fpaov := &DeleteCustomizedImageRequest_FieldTerminalPathArrayOfValues{DeleteCustomizedImageRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteCustomizedImageRequest_FieldPathSelectorName:
		return &DeleteCustomizedImageRequest_FieldTerminalPathArrayOfValues{DeleteCustomizedImageRequest_FieldTerminalPath: *fp, values: values.([]*customized_image.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteCustomizedImageRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteCustomizedImageRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteCustomizedImageRequest: %d", fp.selector))
	}
}

func (fp *DeleteCustomizedImageRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteCustomizedImageRequest_FieldPathValue allows storing values for DeleteCustomizedImageRequest fields according to their type
type DeleteCustomizedImageRequest_FieldPathValue interface {
	DeleteCustomizedImageRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteCustomizedImageRequest)
	CompareWith(*DeleteCustomizedImageRequest) (cmp int, comparable bool)
}

func ParseDeleteCustomizedImageRequest_FieldPathValue(pathStr, valueStr string) (DeleteCustomizedImageRequest_FieldPathValue, error) {
	fp, err := ParseDeleteCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteCustomizedImageRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteCustomizedImageRequest_FieldPathValue), nil
}

func MustParseDeleteCustomizedImageRequest_FieldPathValue(pathStr, valueStr string) DeleteCustomizedImageRequest_FieldPathValue {
	fpv, err := ParseDeleteCustomizedImageRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteCustomizedImageRequest_FieldTerminalPathValue struct {
	DeleteCustomizedImageRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteCustomizedImageRequest_FieldPathValue = (*DeleteCustomizedImageRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteCustomizedImageRequest' as interface{}
func (fpv *DeleteCustomizedImageRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteCustomizedImageRequest_FieldTerminalPathValue) AsNameValue() (*customized_image.Reference, bool) {
	res, ok := fpv.value.(*customized_image.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteCustomizedImageRequest
func (fpv *DeleteCustomizedImageRequest_FieldTerminalPathValue) SetTo(target **DeleteCustomizedImageRequest) {
	if *target == nil {
		*target = new(DeleteCustomizedImageRequest)
	}
	switch fpv.selector {
	case DeleteCustomizedImageRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*customized_image.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteCustomizedImageRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteCustomizedImageRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteCustomizedImageRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteCustomizedImageRequest_FieldTerminalPathValue' with the value under path in 'DeleteCustomizedImageRequest'.
func (fpv *DeleteCustomizedImageRequest_FieldTerminalPathValue) CompareWith(source *DeleteCustomizedImageRequest) (int, bool) {
	switch fpv.selector {
	case DeleteCustomizedImageRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*customized_image.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteCustomizedImageRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteCustomizedImageRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteCustomizedImageRequest))
}

// DeleteCustomizedImageRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteCustomizedImageRequest according to their type
// Present only for array (repeated) types.
type DeleteCustomizedImageRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteCustomizedImageRequest_FieldPath
	ContainsValue(*DeleteCustomizedImageRequest) bool
}

// ParseDeleteCustomizedImageRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteCustomizedImageRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteCustomizedImageRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteCustomizedImageRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteCustomizedImageRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteCustomizedImageRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteCustomizedImageRequest_FieldTerminalPathArrayItemValue struct {
	DeleteCustomizedImageRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteCustomizedImageRequest_FieldPathArrayItemValue = (*DeleteCustomizedImageRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteCustomizedImageRequest as interface{}
func (fpaiv *DeleteCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteCustomizedImageRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteCustomizedImageRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteCustomizedImageRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteCustomizedImageRequest'
func (fpaiv *DeleteCustomizedImageRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteCustomizedImageRequest) bool {
	slice := fpaiv.DeleteCustomizedImageRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteCustomizedImageRequest_FieldPathArrayOfValues allows storing slice of values for DeleteCustomizedImageRequest fields according to their type
type DeleteCustomizedImageRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteCustomizedImageRequest_FieldPath
}

func ParseDeleteCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteCustomizedImageRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteCustomizedImageRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteCustomizedImageRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteCustomizedImageRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteCustomizedImageRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteCustomizedImageRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteCustomizedImageRequest_FieldTerminalPathArrayOfValues struct {
	DeleteCustomizedImageRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteCustomizedImageRequest_FieldPathArrayOfValues = (*DeleteCustomizedImageRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteCustomizedImageRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteCustomizedImageRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*customized_image.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteCustomizedImageRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*customized_image.Reference, bool) {
	res, ok := fpaov.values.([]*customized_image.Reference)
	return res, ok
}
