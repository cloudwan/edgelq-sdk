// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/customized_image_service.proto
// DO NOT EDIT!!!

package customized_image_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	customized_image "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/customized_image"
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &customized_image.CustomizedImage{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetCustomizedImageRequest) GotenObjectExt() {}

func (o *GetCustomizedImageRequest) MakeFullFieldMask() *GetCustomizedImageRequest_FieldMask {
	return FullGetCustomizedImageRequest_FieldMask()
}

func (o *GetCustomizedImageRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetCustomizedImageRequest_FieldMask()
}

func (o *GetCustomizedImageRequest) MakeDiffFieldMask(other *GetCustomizedImageRequest) *GetCustomizedImageRequest_FieldMask {
	if o == nil && other == nil {
		return &GetCustomizedImageRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetCustomizedImageRequest_FieldMask()
	}

	res := &GetCustomizedImageRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetCustomizedImageRequest_FieldTerminalPath{selector: GetCustomizedImageRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetCustomizedImageRequest_FieldTerminalPath{selector: GetCustomizedImageRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetCustomizedImageRequest_FieldTerminalPath{selector: GetCustomizedImageRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetCustomizedImageRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetCustomizedImageRequest))
}

func (o *GetCustomizedImageRequest) Clone() *GetCustomizedImageRequest {
	if o == nil {
		return nil
	}
	result := &GetCustomizedImageRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &customized_image.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*customized_image.CustomizedImage_FieldMask)
	result.View = o.View
	return result
}

func (o *GetCustomizedImageRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetCustomizedImageRequest) Merge(source *GetCustomizedImageRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &customized_image.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(customized_image.CustomizedImage_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetCustomizedImageRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetCustomizedImageRequest))
}

func (o *BatchGetCustomizedImagesRequest) GotenObjectExt() {}

func (o *BatchGetCustomizedImagesRequest) MakeFullFieldMask() *BatchGetCustomizedImagesRequest_FieldMask {
	return FullBatchGetCustomizedImagesRequest_FieldMask()
}

func (o *BatchGetCustomizedImagesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetCustomizedImagesRequest_FieldMask()
}

func (o *BatchGetCustomizedImagesRequest) MakeDiffFieldMask(other *BatchGetCustomizedImagesRequest) *BatchGetCustomizedImagesRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetCustomizedImagesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetCustomizedImagesRequest_FieldMask()
	}

	res := &BatchGetCustomizedImagesRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetCustomizedImagesRequest_FieldTerminalPath{selector: BatchGetCustomizedImagesRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetCustomizedImagesRequest_FieldTerminalPath{selector: BatchGetCustomizedImagesRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetCustomizedImagesRequest_FieldTerminalPath{selector: BatchGetCustomizedImagesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetCustomizedImagesRequest_FieldTerminalPath{selector: BatchGetCustomizedImagesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetCustomizedImagesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetCustomizedImagesRequest))
}

func (o *BatchGetCustomizedImagesRequest) Clone() *BatchGetCustomizedImagesRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetCustomizedImagesRequest{}
	result.Names = make([]*customized_image.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &customized_image.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*customized_image.CustomizedImage_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetCustomizedImagesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetCustomizedImagesRequest) Merge(source *BatchGetCustomizedImagesRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *customized_image.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &customized_image.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(customized_image.CustomizedImage_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetCustomizedImagesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetCustomizedImagesRequest))
}

func (o *BatchGetCustomizedImagesResponse) GotenObjectExt() {}

func (o *BatchGetCustomizedImagesResponse) MakeFullFieldMask() *BatchGetCustomizedImagesResponse_FieldMask {
	return FullBatchGetCustomizedImagesResponse_FieldMask()
}

func (o *BatchGetCustomizedImagesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetCustomizedImagesResponse_FieldMask()
}

func (o *BatchGetCustomizedImagesResponse) MakeDiffFieldMask(other *BatchGetCustomizedImagesResponse) *BatchGetCustomizedImagesResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetCustomizedImagesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetCustomizedImagesResponse_FieldMask()
	}

	res := &BatchGetCustomizedImagesResponse_FieldMask{}

	if len(o.GetCustomizedImages()) == len(other.GetCustomizedImages()) {
		for i, lValue := range o.GetCustomizedImages() {
			rValue := other.GetCustomizedImages()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetCustomizedImagesResponse_FieldTerminalPath{selector: BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetCustomizedImagesResponse_FieldTerminalPath{selector: BatchGetCustomizedImagesResponse_FieldPathSelectorCustomizedImages})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetCustomizedImagesResponse_FieldTerminalPath{selector: BatchGetCustomizedImagesResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetCustomizedImagesResponse_FieldTerminalPath{selector: BatchGetCustomizedImagesResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetCustomizedImagesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetCustomizedImagesResponse))
}

func (o *BatchGetCustomizedImagesResponse) Clone() *BatchGetCustomizedImagesResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetCustomizedImagesResponse{}
	result.CustomizedImages = make([]*customized_image.CustomizedImage, len(o.CustomizedImages))
	for i, sourceValue := range o.CustomizedImages {
		result.CustomizedImages[i] = sourceValue.Clone()
	}
	result.Missing = make([]*customized_image.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &customized_image.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetCustomizedImagesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetCustomizedImagesResponse) Merge(source *BatchGetCustomizedImagesResponse) {
	for _, sourceValue := range source.GetCustomizedImages() {
		exists := false
		for _, currentValue := range o.CustomizedImages {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *customized_image.CustomizedImage
			if sourceValue != nil {
				newDstElement = new(customized_image.CustomizedImage)
				newDstElement.Merge(sourceValue)
			}
			o.CustomizedImages = append(o.CustomizedImages, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *customized_image.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &customized_image.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetCustomizedImagesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetCustomizedImagesResponse))
}

func (o *ListCustomizedImagesRequest) GotenObjectExt() {}

func (o *ListCustomizedImagesRequest) MakeFullFieldMask() *ListCustomizedImagesRequest_FieldMask {
	return FullListCustomizedImagesRequest_FieldMask()
}

func (o *ListCustomizedImagesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListCustomizedImagesRequest_FieldMask()
}

func (o *ListCustomizedImagesRequest) MakeDiffFieldMask(other *ListCustomizedImagesRequest) *ListCustomizedImagesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListCustomizedImagesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListCustomizedImagesRequest_FieldMask()
	}

	res := &ListCustomizedImagesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListCustomizedImagesRequest_FieldTerminalPath{selector: ListCustomizedImagesRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListCustomizedImagesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListCustomizedImagesRequest))
}

func (o *ListCustomizedImagesRequest) Clone() *ListCustomizedImagesRequest {
	if o == nil {
		return nil
	}
	result := &ListCustomizedImagesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &customized_image.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &customized_image.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &customized_image.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &customized_image.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*customized_image.CustomizedImage_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListCustomizedImagesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListCustomizedImagesRequest) Merge(source *ListCustomizedImagesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &customized_image.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &customized_image.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &customized_image.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &customized_image.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(customized_image.CustomizedImage_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListCustomizedImagesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListCustomizedImagesRequest))
}

func (o *ListCustomizedImagesResponse) GotenObjectExt() {}

func (o *ListCustomizedImagesResponse) MakeFullFieldMask() *ListCustomizedImagesResponse_FieldMask {
	return FullListCustomizedImagesResponse_FieldMask()
}

func (o *ListCustomizedImagesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListCustomizedImagesResponse_FieldMask()
}

func (o *ListCustomizedImagesResponse) MakeDiffFieldMask(other *ListCustomizedImagesResponse) *ListCustomizedImagesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListCustomizedImagesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListCustomizedImagesResponse_FieldMask()
	}

	res := &ListCustomizedImagesResponse_FieldMask{}

	if len(o.GetCustomizedImages()) == len(other.GetCustomizedImages()) {
		for i, lValue := range o.GetCustomizedImages() {
			rValue := other.GetCustomizedImages()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorCustomizedImages})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListCustomizedImagesResponse_FieldTerminalPath{selector: ListCustomizedImagesResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListCustomizedImagesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListCustomizedImagesResponse))
}

func (o *ListCustomizedImagesResponse) Clone() *ListCustomizedImagesResponse {
	if o == nil {
		return nil
	}
	result := &ListCustomizedImagesResponse{}
	result.CustomizedImages = make([]*customized_image.CustomizedImage, len(o.CustomizedImages))
	for i, sourceValue := range o.CustomizedImages {
		result.CustomizedImages[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &customized_image.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &customized_image.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListCustomizedImagesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListCustomizedImagesResponse) Merge(source *ListCustomizedImagesResponse) {
	for _, sourceValue := range source.GetCustomizedImages() {
		exists := false
		for _, currentValue := range o.CustomizedImages {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *customized_image.CustomizedImage
			if sourceValue != nil {
				newDstElement = new(customized_image.CustomizedImage)
				newDstElement.Merge(sourceValue)
			}
			o.CustomizedImages = append(o.CustomizedImages, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &customized_image.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &customized_image.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListCustomizedImagesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListCustomizedImagesResponse))
}

func (o *WatchCustomizedImageRequest) GotenObjectExt() {}

func (o *WatchCustomizedImageRequest) MakeFullFieldMask() *WatchCustomizedImageRequest_FieldMask {
	return FullWatchCustomizedImageRequest_FieldMask()
}

func (o *WatchCustomizedImageRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchCustomizedImageRequest_FieldMask()
}

func (o *WatchCustomizedImageRequest) MakeDiffFieldMask(other *WatchCustomizedImageRequest) *WatchCustomizedImageRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchCustomizedImageRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchCustomizedImageRequest_FieldMask()
	}

	res := &WatchCustomizedImageRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchCustomizedImageRequest_FieldTerminalPath{selector: WatchCustomizedImageRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchCustomizedImageRequest_FieldTerminalPath{selector: WatchCustomizedImageRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchCustomizedImageRequest_FieldTerminalPath{selector: WatchCustomizedImageRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchCustomizedImageRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchCustomizedImageRequest))
}

func (o *WatchCustomizedImageRequest) Clone() *WatchCustomizedImageRequest {
	if o == nil {
		return nil
	}
	result := &WatchCustomizedImageRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &customized_image.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*customized_image.CustomizedImage_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchCustomizedImageRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchCustomizedImageRequest) Merge(source *WatchCustomizedImageRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &customized_image.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(customized_image.CustomizedImage_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchCustomizedImageRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchCustomizedImageRequest))
}

func (o *WatchCustomizedImageResponse) GotenObjectExt() {}

func (o *WatchCustomizedImageResponse) MakeFullFieldMask() *WatchCustomizedImageResponse_FieldMask {
	return FullWatchCustomizedImageResponse_FieldMask()
}

func (o *WatchCustomizedImageResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchCustomizedImageResponse_FieldMask()
}

func (o *WatchCustomizedImageResponse) MakeDiffFieldMask(other *WatchCustomizedImageResponse) *WatchCustomizedImageResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchCustomizedImageResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchCustomizedImageResponse_FieldMask()
	}

	res := &WatchCustomizedImageResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchCustomizedImageResponse_FieldTerminalPath{selector: WatchCustomizedImageResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchCustomizedImageResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchCustomizedImageResponse))
}

func (o *WatchCustomizedImageResponse) Clone() *WatchCustomizedImageResponse {
	if o == nil {
		return nil
	}
	result := &WatchCustomizedImageResponse{}
	result.Change = proto.Clone(o.Change).(*customized_image.CustomizedImageChange)
	return result
}

func (o *WatchCustomizedImageResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchCustomizedImageResponse) Merge(source *WatchCustomizedImageResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(customized_image.CustomizedImageChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchCustomizedImageResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchCustomizedImageResponse))
}

func (o *WatchCustomizedImagesRequest) GotenObjectExt() {}

func (o *WatchCustomizedImagesRequest) MakeFullFieldMask() *WatchCustomizedImagesRequest_FieldMask {
	return FullWatchCustomizedImagesRequest_FieldMask()
}

func (o *WatchCustomizedImagesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchCustomizedImagesRequest_FieldMask()
}

func (o *WatchCustomizedImagesRequest) MakeDiffFieldMask(other *WatchCustomizedImagesRequest) *WatchCustomizedImagesRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchCustomizedImagesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchCustomizedImagesRequest_FieldMask()
	}

	res := &WatchCustomizedImagesRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesRequest_FieldTerminalPath{selector: WatchCustomizedImagesRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchCustomizedImagesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchCustomizedImagesRequest))
}

func (o *WatchCustomizedImagesRequest) Clone() *WatchCustomizedImagesRequest {
	if o == nil {
		return nil
	}
	result := &WatchCustomizedImagesRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &customized_image.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &customized_image.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &customized_image.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &customized_image.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*customized_image.CustomizedImage_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchCustomizedImagesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchCustomizedImagesRequest) Merge(source *WatchCustomizedImagesRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &customized_image.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &customized_image.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &customized_image.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &customized_image.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(customized_image.CustomizedImage_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchCustomizedImagesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchCustomizedImagesRequest))
}

func (o *WatchCustomizedImagesResponse) GotenObjectExt() {}

func (o *WatchCustomizedImagesResponse) MakeFullFieldMask() *WatchCustomizedImagesResponse_FieldMask {
	return FullWatchCustomizedImagesResponse_FieldMask()
}

func (o *WatchCustomizedImagesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchCustomizedImagesResponse_FieldMask()
}

func (o *WatchCustomizedImagesResponse) MakeDiffFieldMask(other *WatchCustomizedImagesResponse) *WatchCustomizedImagesResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchCustomizedImagesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchCustomizedImagesResponse_FieldMask()
	}

	res := &WatchCustomizedImagesResponse_FieldMask{}

	if len(o.GetCustomizedImageChanges()) == len(other.GetCustomizedImageChanges()) {
		for i, lValue := range o.GetCustomizedImageChanges() {
			rValue := other.GetCustomizedImageChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorCustomizedImageChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldSubPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesResponse_FieldTerminalPath{selector: WatchCustomizedImagesResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchCustomizedImagesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchCustomizedImagesResponse))
}

func (o *WatchCustomizedImagesResponse) Clone() *WatchCustomizedImagesResponse {
	if o == nil {
		return nil
	}
	result := &WatchCustomizedImagesResponse{}
	result.CustomizedImageChanges = make([]*customized_image.CustomizedImageChange, len(o.CustomizedImageChanges))
	for i, sourceValue := range o.CustomizedImageChanges {
		result.CustomizedImageChanges[i] = proto.Clone(sourceValue).(*customized_image.CustomizedImageChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchCustomizedImagesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchCustomizedImagesResponse) Merge(source *WatchCustomizedImagesResponse) {
	for _, sourceValue := range source.GetCustomizedImageChanges() {
		exists := false
		for _, currentValue := range o.CustomizedImageChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *customized_image.CustomizedImageChange
			if sourceValue != nil {
				newDstElement = new(customized_image.CustomizedImageChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.CustomizedImageChanges = append(o.CustomizedImageChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchCustomizedImagesResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchCustomizedImagesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchCustomizedImagesResponse))
}

func (o *WatchCustomizedImagesResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchCustomizedImagesResponse_PageTokenChange) MakeFullFieldMask() *WatchCustomizedImagesResponse_PageTokenChange_FieldMask {
	return FullWatchCustomizedImagesResponse_PageTokenChange_FieldMask()
}

func (o *WatchCustomizedImagesResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchCustomizedImagesResponse_PageTokenChange_FieldMask()
}

func (o *WatchCustomizedImagesResponse_PageTokenChange) MakeDiffFieldMask(other *WatchCustomizedImagesResponse_PageTokenChange) *WatchCustomizedImagesResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchCustomizedImagesResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchCustomizedImagesResponse_PageTokenChange_FieldMask()
	}

	res := &WatchCustomizedImagesResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath{selector: WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchCustomizedImagesResponsePageTokenChange_FieldTerminalPath{selector: WatchCustomizedImagesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchCustomizedImagesResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchCustomizedImagesResponse_PageTokenChange))
}

func (o *WatchCustomizedImagesResponse_PageTokenChange) Clone() *WatchCustomizedImagesResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchCustomizedImagesResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &customized_image.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &customized_image.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchCustomizedImagesResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchCustomizedImagesResponse_PageTokenChange) Merge(source *WatchCustomizedImagesResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &customized_image.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &customized_image.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchCustomizedImagesResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchCustomizedImagesResponse_PageTokenChange))
}

func (o *CreateCustomizedImageRequest) GotenObjectExt() {}

func (o *CreateCustomizedImageRequest) MakeFullFieldMask() *CreateCustomizedImageRequest_FieldMask {
	return FullCreateCustomizedImageRequest_FieldMask()
}

func (o *CreateCustomizedImageRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateCustomizedImageRequest_FieldMask()
}

func (o *CreateCustomizedImageRequest) MakeDiffFieldMask(other *CreateCustomizedImageRequest) *CreateCustomizedImageRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateCustomizedImageRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateCustomizedImageRequest_FieldMask()
	}

	res := &CreateCustomizedImageRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateCustomizedImageRequest_FieldTerminalPath{selector: CreateCustomizedImageRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetCustomizedImage().MakeDiffFieldMask(other.GetCustomizedImage())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateCustomizedImageRequest_FieldTerminalPath{selector: CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateCustomizedImageRequest_FieldSubPath{selector: CreateCustomizedImageRequest_FieldPathSelectorCustomizedImage, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateCustomizedImageRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateCustomizedImageRequest))
}

func (o *CreateCustomizedImageRequest) Clone() *CreateCustomizedImageRequest {
	if o == nil {
		return nil
	}
	result := &CreateCustomizedImageRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &customized_image.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CustomizedImage = o.CustomizedImage.Clone()
	return result
}

func (o *CreateCustomizedImageRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateCustomizedImageRequest) Merge(source *CreateCustomizedImageRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &customized_image.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetCustomizedImage() != nil {
		if o.CustomizedImage == nil {
			o.CustomizedImage = new(customized_image.CustomizedImage)
		}
		o.CustomizedImage.Merge(source.GetCustomizedImage())
	}
}

func (o *CreateCustomizedImageRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateCustomizedImageRequest))
}

func (o *UpdateCustomizedImageRequest) GotenObjectExt() {}

func (o *UpdateCustomizedImageRequest) MakeFullFieldMask() *UpdateCustomizedImageRequest_FieldMask {
	return FullUpdateCustomizedImageRequest_FieldMask()
}

func (o *UpdateCustomizedImageRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateCustomizedImageRequest_FieldMask()
}

func (o *UpdateCustomizedImageRequest) MakeDiffFieldMask(other *UpdateCustomizedImageRequest) *UpdateCustomizedImageRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateCustomizedImageRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateCustomizedImageRequest_FieldMask()
	}

	res := &UpdateCustomizedImageRequest_FieldMask{}
	{
		subMask := o.GetCustomizedImage().MakeDiffFieldMask(other.GetCustomizedImage())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateCustomizedImageRequest_FieldTerminalPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateCustomizedImageRequest_FieldSubPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorCustomizedImage, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateCustomizedImageRequest_FieldTerminalPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateCustomizedImageRequest_FieldTerminalPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateCustomizedImageRequest_FieldSubPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateCustomizedImageRequest_FieldTerminalPath{selector: UpdateCustomizedImageRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateCustomizedImageRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateCustomizedImageRequest))
}

func (o *UpdateCustomizedImageRequest) Clone() *UpdateCustomizedImageRequest {
	if o == nil {
		return nil
	}
	result := &UpdateCustomizedImageRequest{}
	result.CustomizedImage = o.CustomizedImage.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*customized_image.CustomizedImage_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateCustomizedImageRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateCustomizedImageRequest) Merge(source *UpdateCustomizedImageRequest) {
	if source.GetCustomizedImage() != nil {
		if o.CustomizedImage == nil {
			o.CustomizedImage = new(customized_image.CustomizedImage)
		}
		o.CustomizedImage.Merge(source.GetCustomizedImage())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(customized_image.CustomizedImage_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateCustomizedImageRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateCustomizedImageRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateCustomizedImageRequest))
}

func (o *UpdateCustomizedImageRequest_CAS) GotenObjectExt() {}

func (o *UpdateCustomizedImageRequest_CAS) MakeFullFieldMask() *UpdateCustomizedImageRequest_CAS_FieldMask {
	return FullUpdateCustomizedImageRequest_CAS_FieldMask()
}

func (o *UpdateCustomizedImageRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateCustomizedImageRequest_CAS_FieldMask()
}

func (o *UpdateCustomizedImageRequest_CAS) MakeDiffFieldMask(other *UpdateCustomizedImageRequest_CAS) *UpdateCustomizedImageRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateCustomizedImageRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateCustomizedImageRequest_CAS_FieldMask()
	}

	res := &UpdateCustomizedImageRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateCustomizedImageRequestCAS_FieldTerminalPath{selector: UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateCustomizedImageRequestCAS_FieldSubPath{selector: UpdateCustomizedImageRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateCustomizedImageRequestCAS_FieldTerminalPath{selector: UpdateCustomizedImageRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateCustomizedImageRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateCustomizedImageRequest_CAS))
}

func (o *UpdateCustomizedImageRequest_CAS) Clone() *UpdateCustomizedImageRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateCustomizedImageRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*customized_image.CustomizedImage_FieldMask)
	return result
}

func (o *UpdateCustomizedImageRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateCustomizedImageRequest_CAS) Merge(source *UpdateCustomizedImageRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(customized_image.CustomizedImage)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(customized_image.CustomizedImage_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateCustomizedImageRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateCustomizedImageRequest_CAS))
}

func (o *DeleteCustomizedImageRequest) GotenObjectExt() {}

func (o *DeleteCustomizedImageRequest) MakeFullFieldMask() *DeleteCustomizedImageRequest_FieldMask {
	return FullDeleteCustomizedImageRequest_FieldMask()
}

func (o *DeleteCustomizedImageRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteCustomizedImageRequest_FieldMask()
}

func (o *DeleteCustomizedImageRequest) MakeDiffFieldMask(other *DeleteCustomizedImageRequest) *DeleteCustomizedImageRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteCustomizedImageRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteCustomizedImageRequest_FieldMask()
	}

	res := &DeleteCustomizedImageRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteCustomizedImageRequest_FieldTerminalPath{selector: DeleteCustomizedImageRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteCustomizedImageRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteCustomizedImageRequest))
}

func (o *DeleteCustomizedImageRequest) Clone() *DeleteCustomizedImageRequest {
	if o == nil {
		return nil
	}
	result := &DeleteCustomizedImageRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &customized_image.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteCustomizedImageRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteCustomizedImageRequest) Merge(source *DeleteCustomizedImageRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &customized_image.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteCustomizedImageRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteCustomizedImageRequest))
}
