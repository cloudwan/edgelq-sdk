// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/customized_image_custom.proto
// DO NOT EDIT!!!

package customized_image_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	customized_image "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/customized_image"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &customized_image.CustomizedImage{}
)

func (o *RequestUrlRequest) GotenObjectExt() {}

func (o *RequestUrlRequest) MakeFullFieldMask() *RequestUrlRequest_FieldMask {
	return FullRequestUrlRequest_FieldMask()
}

func (o *RequestUrlRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRequestUrlRequest_FieldMask()
}

func (o *RequestUrlRequest) MakeDiffFieldMask(other *RequestUrlRequest) *RequestUrlRequest_FieldMask {
	if o == nil && other == nil {
		return &RequestUrlRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRequestUrlRequest_FieldMask()
	}

	res := &RequestUrlRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &RequestUrlRequest_FieldTerminalPath{selector: RequestUrlRequest_FieldPathSelectorName})
	}
	return res
}

func (o *RequestUrlRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RequestUrlRequest))
}

func (o *RequestUrlRequest) Clone() *RequestUrlRequest {
	if o == nil {
		return nil
	}
	result := &RequestUrlRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &customized_image.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *RequestUrlRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RequestUrlRequest) Merge(source *RequestUrlRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &customized_image.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *RequestUrlRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RequestUrlRequest))
}

func (o *RequestUrlResponse) GotenObjectExt() {}

func (o *RequestUrlResponse) MakeFullFieldMask() *RequestUrlResponse_FieldMask {
	return FullRequestUrlResponse_FieldMask()
}

func (o *RequestUrlResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRequestUrlResponse_FieldMask()
}

func (o *RequestUrlResponse) MakeDiffFieldMask(other *RequestUrlResponse) *RequestUrlResponse_FieldMask {
	if o == nil && other == nil {
		return &RequestUrlResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRequestUrlResponse_FieldMask()
	}

	res := &RequestUrlResponse_FieldMask{}
	if o.GetUrl() != other.GetUrl() {
		res.Paths = append(res.Paths, &RequestUrlResponse_FieldTerminalPath{selector: RequestUrlResponse_FieldPathSelectorUrl})
	}

	if len(o.GetHeaders()) == len(other.GetHeaders()) {
		for i, lValue := range o.GetHeaders() {
			rValue := other.GetHeaders()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &RequestUrlResponse_FieldTerminalPath{selector: RequestUrlResponse_FieldPathSelectorHeaders})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &RequestUrlResponse_FieldTerminalPath{selector: RequestUrlResponse_FieldPathSelectorHeaders})
	}
	return res
}

func (o *RequestUrlResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RequestUrlResponse))
}

func (o *RequestUrlResponse) Clone() *RequestUrlResponse {
	if o == nil {
		return nil
	}
	result := &RequestUrlResponse{}
	result.Url = o.Url
	result.Headers = make([]string, len(o.Headers))
	for i, sourceValue := range o.Headers {
		result.Headers[i] = sourceValue
	}
	return result
}

func (o *RequestUrlResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RequestUrlResponse) Merge(source *RequestUrlResponse) {
	o.Url = source.GetUrl()
	for _, sourceValue := range source.GetHeaders() {
		exists := false
		for _, currentValue := range o.Headers {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Headers = append(o.Headers, newDstElement)
		}
	}

}

func (o *RequestUrlResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RequestUrlResponse))
}
