// Code generated by protoc-gen-goten-object
// File: edgelq/devices/proto/v1alpha2/provisioning_policy_service.proto
// DO NOT EDIT!!!

package provisioning_policy_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/provisioning_policy"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetProvisioningPolicyRequest) GotenObjectExt() {}

func (o *GetProvisioningPolicyRequest) MakeFullFieldMask() *GetProvisioningPolicyRequest_FieldMask {
	return FullGetProvisioningPolicyRequest_FieldMask()
}

func (o *GetProvisioningPolicyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetProvisioningPolicyRequest_FieldMask()
}

func (o *GetProvisioningPolicyRequest) MakeDiffFieldMask(other *GetProvisioningPolicyRequest) *GetProvisioningPolicyRequest_FieldMask {
	if o == nil && other == nil {
		return &GetProvisioningPolicyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetProvisioningPolicyRequest_FieldMask()
	}

	res := &GetProvisioningPolicyRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetProvisioningPolicyRequest_FieldTerminalPath{selector: GetProvisioningPolicyRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetProvisioningPolicyRequest_FieldTerminalPath{selector: GetProvisioningPolicyRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetProvisioningPolicyRequest_FieldTerminalPath{selector: GetProvisioningPolicyRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetProvisioningPolicyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetProvisioningPolicyRequest))
}

func (o *GetProvisioningPolicyRequest) Clone() *GetProvisioningPolicyRequest {
	if o == nil {
		return nil
	}
	result := &GetProvisioningPolicyRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &provisioning_policy.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*provisioning_policy.ProvisioningPolicy_FieldMask)
	result.View = o.View
	return result
}

func (o *GetProvisioningPolicyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetProvisioningPolicyRequest) Merge(source *GetProvisioningPolicyRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &provisioning_policy.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(provisioning_policy.ProvisioningPolicy_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetProvisioningPolicyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetProvisioningPolicyRequest))
}

func (o *BatchGetProvisioningPoliciesRequest) GotenObjectExt() {}

func (o *BatchGetProvisioningPoliciesRequest) MakeFullFieldMask() *BatchGetProvisioningPoliciesRequest_FieldMask {
	return FullBatchGetProvisioningPoliciesRequest_FieldMask()
}

func (o *BatchGetProvisioningPoliciesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProvisioningPoliciesRequest_FieldMask()
}

func (o *BatchGetProvisioningPoliciesRequest) MakeDiffFieldMask(other *BatchGetProvisioningPoliciesRequest) *BatchGetProvisioningPoliciesRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProvisioningPoliciesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProvisioningPoliciesRequest_FieldMask()
	}

	res := &BatchGetProvisioningPoliciesRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProvisioningPoliciesRequest_FieldTerminalPath{selector: BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProvisioningPoliciesRequest_FieldTerminalPath{selector: BatchGetProvisioningPoliciesRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetProvisioningPoliciesRequest_FieldTerminalPath{selector: BatchGetProvisioningPoliciesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetProvisioningPoliciesRequest_FieldTerminalPath{selector: BatchGetProvisioningPoliciesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetProvisioningPoliciesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProvisioningPoliciesRequest))
}

func (o *BatchGetProvisioningPoliciesRequest) Clone() *BatchGetProvisioningPoliciesRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetProvisioningPoliciesRequest{}
	result.Names = make([]*provisioning_policy.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &provisioning_policy.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*provisioning_policy.ProvisioningPolicy_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetProvisioningPoliciesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProvisioningPoliciesRequest) Merge(source *BatchGetProvisioningPoliciesRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *provisioning_policy.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &provisioning_policy.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(provisioning_policy.ProvisioningPolicy_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetProvisioningPoliciesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProvisioningPoliciesRequest))
}

func (o *BatchGetProvisioningPoliciesResponse) GotenObjectExt() {}

func (o *BatchGetProvisioningPoliciesResponse) MakeFullFieldMask() *BatchGetProvisioningPoliciesResponse_FieldMask {
	return FullBatchGetProvisioningPoliciesResponse_FieldMask()
}

func (o *BatchGetProvisioningPoliciesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProvisioningPoliciesResponse_FieldMask()
}

func (o *BatchGetProvisioningPoliciesResponse) MakeDiffFieldMask(other *BatchGetProvisioningPoliciesResponse) *BatchGetProvisioningPoliciesResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProvisioningPoliciesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProvisioningPoliciesResponse_FieldMask()
	}

	res := &BatchGetProvisioningPoliciesResponse_FieldMask{}

	if len(o.GetProvisioningPolicies()) == len(other.GetProvisioningPolicies()) {
		for i, lValue := range o.GetProvisioningPolicies() {
			rValue := other.GetProvisioningPolicies()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetProvisioningPoliciesResponse_FieldTerminalPath{selector: BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProvisioningPoliciesResponse_FieldTerminalPath{selector: BatchGetProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProvisioningPoliciesResponse_FieldTerminalPath{selector: BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProvisioningPoliciesResponse_FieldTerminalPath{selector: BatchGetProvisioningPoliciesResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetProvisioningPoliciesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProvisioningPoliciesResponse))
}

func (o *BatchGetProvisioningPoliciesResponse) Clone() *BatchGetProvisioningPoliciesResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetProvisioningPoliciesResponse{}
	result.ProvisioningPolicies = make([]*provisioning_policy.ProvisioningPolicy, len(o.ProvisioningPolicies))
	for i, sourceValue := range o.ProvisioningPolicies {
		result.ProvisioningPolicies[i] = sourceValue.Clone()
	}
	result.Missing = make([]*provisioning_policy.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &provisioning_policy.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetProvisioningPoliciesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProvisioningPoliciesResponse) Merge(source *BatchGetProvisioningPoliciesResponse) {
	for _, sourceValue := range source.GetProvisioningPolicies() {
		exists := false
		for _, currentValue := range o.ProvisioningPolicies {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *provisioning_policy.ProvisioningPolicy
			if sourceValue != nil {
				newDstElement = new(provisioning_policy.ProvisioningPolicy)
				newDstElement.Merge(sourceValue)
			}
			o.ProvisioningPolicies = append(o.ProvisioningPolicies, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *provisioning_policy.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &provisioning_policy.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetProvisioningPoliciesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProvisioningPoliciesResponse))
}

func (o *ListProvisioningPoliciesRequest) GotenObjectExt() {}

func (o *ListProvisioningPoliciesRequest) MakeFullFieldMask() *ListProvisioningPoliciesRequest_FieldMask {
	return FullListProvisioningPoliciesRequest_FieldMask()
}

func (o *ListProvisioningPoliciesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProvisioningPoliciesRequest_FieldMask()
}

func (o *ListProvisioningPoliciesRequest) MakeDiffFieldMask(other *ListProvisioningPoliciesRequest) *ListProvisioningPoliciesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListProvisioningPoliciesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProvisioningPoliciesRequest_FieldMask()
	}

	res := &ListProvisioningPoliciesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListProvisioningPoliciesRequest_FieldTerminalPath{selector: ListProvisioningPoliciesRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListProvisioningPoliciesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProvisioningPoliciesRequest))
}

func (o *ListProvisioningPoliciesRequest) Clone() *ListProvisioningPoliciesRequest {
	if o == nil {
		return nil
	}
	result := &ListProvisioningPoliciesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &provisioning_policy.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &provisioning_policy.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &provisioning_policy.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &provisioning_policy.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*provisioning_policy.ProvisioningPolicy_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListProvisioningPoliciesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProvisioningPoliciesRequest) Merge(source *ListProvisioningPoliciesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &provisioning_policy.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &provisioning_policy.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &provisioning_policy.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &provisioning_policy.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(provisioning_policy.ProvisioningPolicy_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListProvisioningPoliciesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProvisioningPoliciesRequest))
}

func (o *ListProvisioningPoliciesResponse) GotenObjectExt() {}

func (o *ListProvisioningPoliciesResponse) MakeFullFieldMask() *ListProvisioningPoliciesResponse_FieldMask {
	return FullListProvisioningPoliciesResponse_FieldMask()
}

func (o *ListProvisioningPoliciesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProvisioningPoliciesResponse_FieldMask()
}

func (o *ListProvisioningPoliciesResponse) MakeDiffFieldMask(other *ListProvisioningPoliciesResponse) *ListProvisioningPoliciesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListProvisioningPoliciesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProvisioningPoliciesResponse_FieldMask()
	}

	res := &ListProvisioningPoliciesResponse_FieldMask{}

	if len(o.GetProvisioningPolicies()) == len(other.GetProvisioningPolicies()) {
		for i, lValue := range o.GetProvisioningPolicies() {
			rValue := other.GetProvisioningPolicies()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListProvisioningPoliciesResponse_FieldTerminalPath{selector: ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListProvisioningPoliciesResponse_FieldTerminalPath{selector: ListProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicies})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListProvisioningPoliciesResponse_FieldTerminalPath{selector: ListProvisioningPoliciesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListProvisioningPoliciesResponse_FieldTerminalPath{selector: ListProvisioningPoliciesResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListProvisioningPoliciesResponse_FieldTerminalPath{selector: ListProvisioningPoliciesResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListProvisioningPoliciesResponse_FieldTerminalPath{selector: ListProvisioningPoliciesResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListProvisioningPoliciesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProvisioningPoliciesResponse))
}

func (o *ListProvisioningPoliciesResponse) Clone() *ListProvisioningPoliciesResponse {
	if o == nil {
		return nil
	}
	result := &ListProvisioningPoliciesResponse{}
	result.ProvisioningPolicies = make([]*provisioning_policy.ProvisioningPolicy, len(o.ProvisioningPolicies))
	for i, sourceValue := range o.ProvisioningPolicies {
		result.ProvisioningPolicies[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &provisioning_policy.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &provisioning_policy.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListProvisioningPoliciesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProvisioningPoliciesResponse) Merge(source *ListProvisioningPoliciesResponse) {
	for _, sourceValue := range source.GetProvisioningPolicies() {
		exists := false
		for _, currentValue := range o.ProvisioningPolicies {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *provisioning_policy.ProvisioningPolicy
			if sourceValue != nil {
				newDstElement = new(provisioning_policy.ProvisioningPolicy)
				newDstElement.Merge(sourceValue)
			}
			o.ProvisioningPolicies = append(o.ProvisioningPolicies, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &provisioning_policy.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &provisioning_policy.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListProvisioningPoliciesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProvisioningPoliciesResponse))
}

func (o *WatchProvisioningPolicyRequest) GotenObjectExt() {}

func (o *WatchProvisioningPolicyRequest) MakeFullFieldMask() *WatchProvisioningPolicyRequest_FieldMask {
	return FullWatchProvisioningPolicyRequest_FieldMask()
}

func (o *WatchProvisioningPolicyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProvisioningPolicyRequest_FieldMask()
}

func (o *WatchProvisioningPolicyRequest) MakeDiffFieldMask(other *WatchProvisioningPolicyRequest) *WatchProvisioningPolicyRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProvisioningPolicyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProvisioningPolicyRequest_FieldMask()
	}

	res := &WatchProvisioningPolicyRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchProvisioningPolicyRequest_FieldTerminalPath{selector: WatchProvisioningPolicyRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProvisioningPolicyRequest_FieldTerminalPath{selector: WatchProvisioningPolicyRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProvisioningPolicyRequest_FieldTerminalPath{selector: WatchProvisioningPolicyRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchProvisioningPolicyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProvisioningPolicyRequest))
}

func (o *WatchProvisioningPolicyRequest) Clone() *WatchProvisioningPolicyRequest {
	if o == nil {
		return nil
	}
	result := &WatchProvisioningPolicyRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &provisioning_policy.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*provisioning_policy.ProvisioningPolicy_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchProvisioningPolicyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProvisioningPolicyRequest) Merge(source *WatchProvisioningPolicyRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &provisioning_policy.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(provisioning_policy.ProvisioningPolicy_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchProvisioningPolicyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProvisioningPolicyRequest))
}

func (o *WatchProvisioningPolicyResponse) GotenObjectExt() {}

func (o *WatchProvisioningPolicyResponse) MakeFullFieldMask() *WatchProvisioningPolicyResponse_FieldMask {
	return FullWatchProvisioningPolicyResponse_FieldMask()
}

func (o *WatchProvisioningPolicyResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProvisioningPolicyResponse_FieldMask()
}

func (o *WatchProvisioningPolicyResponse) MakeDiffFieldMask(other *WatchProvisioningPolicyResponse) *WatchProvisioningPolicyResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProvisioningPolicyResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProvisioningPolicyResponse_FieldMask()
	}

	res := &WatchProvisioningPolicyResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchProvisioningPolicyResponse_FieldTerminalPath{selector: WatchProvisioningPolicyResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchProvisioningPolicyResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProvisioningPolicyResponse))
}

func (o *WatchProvisioningPolicyResponse) Clone() *WatchProvisioningPolicyResponse {
	if o == nil {
		return nil
	}
	result := &WatchProvisioningPolicyResponse{}
	result.Change = proto.Clone(o.Change).(*provisioning_policy.ProvisioningPolicyChange)
	return result
}

func (o *WatchProvisioningPolicyResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProvisioningPolicyResponse) Merge(source *WatchProvisioningPolicyResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(provisioning_policy.ProvisioningPolicyChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchProvisioningPolicyResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProvisioningPolicyResponse))
}

func (o *WatchProvisioningPoliciesRequest) GotenObjectExt() {}

func (o *WatchProvisioningPoliciesRequest) MakeFullFieldMask() *WatchProvisioningPoliciesRequest_FieldMask {
	return FullWatchProvisioningPoliciesRequest_FieldMask()
}

func (o *WatchProvisioningPoliciesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProvisioningPoliciesRequest_FieldMask()
}

func (o *WatchProvisioningPoliciesRequest) MakeDiffFieldMask(other *WatchProvisioningPoliciesRequest) *WatchProvisioningPoliciesRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProvisioningPoliciesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProvisioningPoliciesRequest_FieldMask()
	}

	res := &WatchProvisioningPoliciesRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesRequest_FieldTerminalPath{selector: WatchProvisioningPoliciesRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchProvisioningPoliciesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProvisioningPoliciesRequest))
}

func (o *WatchProvisioningPoliciesRequest) Clone() *WatchProvisioningPoliciesRequest {
	if o == nil {
		return nil
	}
	result := &WatchProvisioningPoliciesRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &provisioning_policy.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &provisioning_policy.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &provisioning_policy.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &provisioning_policy.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*provisioning_policy.ProvisioningPolicy_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchProvisioningPoliciesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProvisioningPoliciesRequest) Merge(source *WatchProvisioningPoliciesRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &provisioning_policy.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &provisioning_policy.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &provisioning_policy.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &provisioning_policy.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(provisioning_policy.ProvisioningPolicy_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchProvisioningPoliciesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProvisioningPoliciesRequest))
}

func (o *WatchProvisioningPoliciesResponse) GotenObjectExt() {}

func (o *WatchProvisioningPoliciesResponse) MakeFullFieldMask() *WatchProvisioningPoliciesResponse_FieldMask {
	return FullWatchProvisioningPoliciesResponse_FieldMask()
}

func (o *WatchProvisioningPoliciesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProvisioningPoliciesResponse_FieldMask()
}

func (o *WatchProvisioningPoliciesResponse) MakeDiffFieldMask(other *WatchProvisioningPoliciesResponse) *WatchProvisioningPoliciesResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProvisioningPoliciesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProvisioningPoliciesResponse_FieldMask()
	}

	res := &WatchProvisioningPoliciesResponse_FieldMask{}

	if len(o.GetProvisioningPolicyChanges()) == len(other.GetProvisioningPolicyChanges()) {
		for i, lValue := range o.GetProvisioningPolicyChanges() {
			rValue := other.GetProvisioningPolicyChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorProvisioningPolicyChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchProvisioningPoliciesResponse_FieldSubPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesResponse_FieldTerminalPath{selector: WatchProvisioningPoliciesResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchProvisioningPoliciesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProvisioningPoliciesResponse))
}

func (o *WatchProvisioningPoliciesResponse) Clone() *WatchProvisioningPoliciesResponse {
	if o == nil {
		return nil
	}
	result := &WatchProvisioningPoliciesResponse{}
	result.ProvisioningPolicyChanges = make([]*provisioning_policy.ProvisioningPolicyChange, len(o.ProvisioningPolicyChanges))
	for i, sourceValue := range o.ProvisioningPolicyChanges {
		result.ProvisioningPolicyChanges[i] = proto.Clone(sourceValue).(*provisioning_policy.ProvisioningPolicyChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchProvisioningPoliciesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProvisioningPoliciesResponse) Merge(source *WatchProvisioningPoliciesResponse) {
	for _, sourceValue := range source.GetProvisioningPolicyChanges() {
		exists := false
		for _, currentValue := range o.ProvisioningPolicyChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *provisioning_policy.ProvisioningPolicyChange
			if sourceValue != nil {
				newDstElement = new(provisioning_policy.ProvisioningPolicyChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ProvisioningPolicyChanges = append(o.ProvisioningPolicyChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchProvisioningPoliciesResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchProvisioningPoliciesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProvisioningPoliciesResponse))
}

func (o *WatchProvisioningPoliciesResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchProvisioningPoliciesResponse_PageTokenChange) MakeFullFieldMask() *WatchProvisioningPoliciesResponse_PageTokenChange_FieldMask {
	return FullWatchProvisioningPoliciesResponse_PageTokenChange_FieldMask()
}

func (o *WatchProvisioningPoliciesResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProvisioningPoliciesResponse_PageTokenChange_FieldMask()
}

func (o *WatchProvisioningPoliciesResponse_PageTokenChange) MakeDiffFieldMask(other *WatchProvisioningPoliciesResponse_PageTokenChange) *WatchProvisioningPoliciesResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchProvisioningPoliciesResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProvisioningPoliciesResponse_PageTokenChange_FieldMask()
	}

	res := &WatchProvisioningPoliciesResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath{selector: WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchProvisioningPoliciesResponsePageTokenChange_FieldTerminalPath{selector: WatchProvisioningPoliciesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchProvisioningPoliciesResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProvisioningPoliciesResponse_PageTokenChange))
}

func (o *WatchProvisioningPoliciesResponse_PageTokenChange) Clone() *WatchProvisioningPoliciesResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchProvisioningPoliciesResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &provisioning_policy.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &provisioning_policy.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchProvisioningPoliciesResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProvisioningPoliciesResponse_PageTokenChange) Merge(source *WatchProvisioningPoliciesResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &provisioning_policy.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &provisioning_policy.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchProvisioningPoliciesResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProvisioningPoliciesResponse_PageTokenChange))
}

func (o *CreateProvisioningPolicyRequest) GotenObjectExt() {}

func (o *CreateProvisioningPolicyRequest) MakeFullFieldMask() *CreateProvisioningPolicyRequest_FieldMask {
	return FullCreateProvisioningPolicyRequest_FieldMask()
}

func (o *CreateProvisioningPolicyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateProvisioningPolicyRequest_FieldMask()
}

func (o *CreateProvisioningPolicyRequest) MakeDiffFieldMask(other *CreateProvisioningPolicyRequest) *CreateProvisioningPolicyRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateProvisioningPolicyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateProvisioningPolicyRequest_FieldMask()
	}

	res := &CreateProvisioningPolicyRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateProvisioningPolicyRequest_FieldTerminalPath{selector: CreateProvisioningPolicyRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetProvisioningPolicy().MakeDiffFieldMask(other.GetProvisioningPolicy())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateProvisioningPolicyRequest_FieldTerminalPath{selector: CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateProvisioningPolicyRequest_FieldSubPath{selector: CreateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateProvisioningPolicyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateProvisioningPolicyRequest))
}

func (o *CreateProvisioningPolicyRequest) Clone() *CreateProvisioningPolicyRequest {
	if o == nil {
		return nil
	}
	result := &CreateProvisioningPolicyRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &provisioning_policy.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ProvisioningPolicy = o.ProvisioningPolicy.Clone()
	return result
}

func (o *CreateProvisioningPolicyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateProvisioningPolicyRequest) Merge(source *CreateProvisioningPolicyRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &provisioning_policy.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetProvisioningPolicy() != nil {
		if o.ProvisioningPolicy == nil {
			o.ProvisioningPolicy = new(provisioning_policy.ProvisioningPolicy)
		}
		o.ProvisioningPolicy.Merge(source.GetProvisioningPolicy())
	}
}

func (o *CreateProvisioningPolicyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateProvisioningPolicyRequest))
}

func (o *UpdateProvisioningPolicyRequest) GotenObjectExt() {}

func (o *UpdateProvisioningPolicyRequest) MakeFullFieldMask() *UpdateProvisioningPolicyRequest_FieldMask {
	return FullUpdateProvisioningPolicyRequest_FieldMask()
}

func (o *UpdateProvisioningPolicyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProvisioningPolicyRequest_FieldMask()
}

func (o *UpdateProvisioningPolicyRequest) MakeDiffFieldMask(other *UpdateProvisioningPolicyRequest) *UpdateProvisioningPolicyRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateProvisioningPolicyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProvisioningPolicyRequest_FieldMask()
	}

	res := &UpdateProvisioningPolicyRequest_FieldMask{}
	{
		subMask := o.GetProvisioningPolicy().MakeDiffFieldMask(other.GetProvisioningPolicy())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProvisioningPolicyRequest_FieldTerminalPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProvisioningPolicyRequest_FieldSubPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorProvisioningPolicy, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateProvisioningPolicyRequest_FieldTerminalPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProvisioningPolicyRequest_FieldTerminalPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProvisioningPolicyRequest_FieldSubPath{selector: UpdateProvisioningPolicyRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateProvisioningPolicyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProvisioningPolicyRequest))
}

func (o *UpdateProvisioningPolicyRequest) Clone() *UpdateProvisioningPolicyRequest {
	if o == nil {
		return nil
	}
	result := &UpdateProvisioningPolicyRequest{}
	result.ProvisioningPolicy = o.ProvisioningPolicy.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*provisioning_policy.ProvisioningPolicy_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateProvisioningPolicyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProvisioningPolicyRequest) Merge(source *UpdateProvisioningPolicyRequest) {
	if source.GetProvisioningPolicy() != nil {
		if o.ProvisioningPolicy == nil {
			o.ProvisioningPolicy = new(provisioning_policy.ProvisioningPolicy)
		}
		o.ProvisioningPolicy.Merge(source.GetProvisioningPolicy())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(provisioning_policy.ProvisioningPolicy_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateProvisioningPolicyRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateProvisioningPolicyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProvisioningPolicyRequest))
}

func (o *UpdateProvisioningPolicyRequest_CAS) GotenObjectExt() {}

func (o *UpdateProvisioningPolicyRequest_CAS) MakeFullFieldMask() *UpdateProvisioningPolicyRequest_CAS_FieldMask {
	return FullUpdateProvisioningPolicyRequest_CAS_FieldMask()
}

func (o *UpdateProvisioningPolicyRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProvisioningPolicyRequest_CAS_FieldMask()
}

func (o *UpdateProvisioningPolicyRequest_CAS) MakeDiffFieldMask(other *UpdateProvisioningPolicyRequest_CAS) *UpdateProvisioningPolicyRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateProvisioningPolicyRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProvisioningPolicyRequest_CAS_FieldMask()
	}

	res := &UpdateProvisioningPolicyRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProvisioningPolicyRequestCAS_FieldTerminalPath{selector: UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProvisioningPolicyRequestCAS_FieldSubPath{selector: UpdateProvisioningPolicyRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateProvisioningPolicyRequestCAS_FieldTerminalPath{selector: UpdateProvisioningPolicyRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateProvisioningPolicyRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProvisioningPolicyRequest_CAS))
}

func (o *UpdateProvisioningPolicyRequest_CAS) Clone() *UpdateProvisioningPolicyRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateProvisioningPolicyRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*provisioning_policy.ProvisioningPolicy_FieldMask)
	return result
}

func (o *UpdateProvisioningPolicyRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProvisioningPolicyRequest_CAS) Merge(source *UpdateProvisioningPolicyRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(provisioning_policy.ProvisioningPolicy)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(provisioning_policy.ProvisioningPolicy_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateProvisioningPolicyRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProvisioningPolicyRequest_CAS))
}

func (o *DeleteProvisioningPolicyRequest) GotenObjectExt() {}

func (o *DeleteProvisioningPolicyRequest) MakeFullFieldMask() *DeleteProvisioningPolicyRequest_FieldMask {
	return FullDeleteProvisioningPolicyRequest_FieldMask()
}

func (o *DeleteProvisioningPolicyRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteProvisioningPolicyRequest_FieldMask()
}

func (o *DeleteProvisioningPolicyRequest) MakeDiffFieldMask(other *DeleteProvisioningPolicyRequest) *DeleteProvisioningPolicyRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteProvisioningPolicyRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteProvisioningPolicyRequest_FieldMask()
	}

	res := &DeleteProvisioningPolicyRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteProvisioningPolicyRequest_FieldTerminalPath{selector: DeleteProvisioningPolicyRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteProvisioningPolicyRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteProvisioningPolicyRequest))
}

func (o *DeleteProvisioningPolicyRequest) Clone() *DeleteProvisioningPolicyRequest {
	if o == nil {
		return nil
	}
	result := &DeleteProvisioningPolicyRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &provisioning_policy.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteProvisioningPolicyRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteProvisioningPolicyRequest) Merge(source *DeleteProvisioningPolicyRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &provisioning_policy.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteProvisioningPolicyRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteProvisioningPolicyRequest))
}
