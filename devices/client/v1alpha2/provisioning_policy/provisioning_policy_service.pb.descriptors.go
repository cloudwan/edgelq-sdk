// Code generated by protoc-gen-goten-client
// API: ProvisioningPolicyService
// DO NOT EDIT!!!

package provisioning_policy_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	provisioning_policy "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/provisioning_policy"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &provisioning_policy.ProvisioningPolicy{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized                                bool
	provisioningPolicyServiceDescriptor                   *ProvisioningPolicyServiceDescriptor
	getProvisioningPolicyDescriptor                       *GetProvisioningPolicyDescriptor
	batchGetProvisioningPoliciesDescriptor                *BatchGetProvisioningPoliciesDescriptor
	listProvisioningPoliciesDescriptor                    *ListProvisioningPoliciesDescriptor
	watchProvisioningPolicyDescriptor                     *WatchProvisioningPolicyDescriptor
	watchProvisioningPoliciesDescriptor                   *WatchProvisioningPoliciesDescriptor
	createProvisioningPolicyDescriptor                    *CreateProvisioningPolicyDescriptor
	updateProvisioningPolicyDescriptor                    *UpdateProvisioningPolicyDescriptor
	deleteProvisioningPolicyDescriptor                    *DeleteProvisioningPolicyDescriptor
	provisionServiceAccountToProvisioningPolicyDescriptor *ProvisionServiceAccountToProvisioningPolicyDescriptor
	removeServiceAccountFromProvisioningPolicyDescriptor  *RemoveServiceAccountFromProvisioningPolicyDescriptor
	provisionDeviceViaPolicyDescriptor                    *ProvisionDeviceViaPolicyDescriptor
	requestProvisioningApprovalDescriptor                 *RequestProvisioningApprovalDescriptor
)

type GetProvisioningPolicyDescriptor struct{}

type GetProvisioningPolicyDescriptorClientMsgHandle struct{}

type GetProvisioningPolicyDescriptorServerMsgHandle struct{}

func (d *GetProvisioningPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetProvisioningPolicyRequest{}
}

func (d *GetProvisioningPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &provisioning_policy.ProvisioningPolicy{}
}

func (d *GetProvisioningPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *GetProvisioningPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *GetProvisioningPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *GetProvisioningPolicyDescriptor) IsCollection() bool {
	return false
}

func (d *GetProvisioningPolicyDescriptor) IsPlural() bool {
	return false
}

func (d *GetProvisioningPolicyDescriptor) HasResource() bool {
	return true
}

func (d *GetProvisioningPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetProvisioningPolicyDescriptor) GetVerb() string {
	return "get"
}

func (d *GetProvisioningPolicyDescriptor) GetMethodName() string {
	return "GetProvisioningPolicy"
}

func (d *GetProvisioningPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.ProvisioningPolicyService/GetProvisioningPolicy"
}

func (d *GetProvisioningPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *GetProvisioningPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *GetProvisioningPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *GetProvisioningPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetProvisioningPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *GetProvisioningPolicyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *GetProvisioningPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProvisioningPolicyDescriptorClientMsgHandle{}
}

func (d *GetProvisioningPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetProvisioningPolicyDescriptorServerMsgHandle{}
}

func (h *GetProvisioningPolicyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetProvisioningPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *GetProvisioningPolicyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetProvisioningPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProvisioningPolicyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetProvisioningPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetProvisioningPolicyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*provisioning_policy.ProvisioningPolicy) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *GetProvisioningPolicyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*provisioning_policy.ProvisioningPolicy) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetProvisioningPolicyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*provisioning_policy.ProvisioningPolicy) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetProvisioningPolicyDescriptor() *GetProvisioningPolicyDescriptor {
	return getProvisioningPolicyDescriptor
}

type BatchGetProvisioningPoliciesDescriptor struct{}

type BatchGetProvisioningPoliciesDescriptorClientMsgHandle struct{}

type BatchGetProvisioningPoliciesDescriptorServerMsgHandle struct{}

func (d *BatchGetProvisioningPoliciesDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetProvisioningPoliciesRequest{}
}

func (d *BatchGetProvisioningPoliciesDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetProvisioningPoliciesResponse{}
}

func (d *BatchGetProvisioningPoliciesDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetProvisioningPoliciesDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetProvisioningPoliciesDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetProvisioningPoliciesDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetProvisioningPoliciesDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetProvisioningPoliciesDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetProvisioningPoliciesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetProvisioningPoliciesDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetProvisioningPoliciesDescriptor) GetMethodName() string {
	return "BatchGetProvisioningPolicies"
}

func (d *BatchGetProvisioningPoliciesDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.ProvisioningPolicyService/BatchGetProvisioningPolicies"
}

func (d *BatchGetProvisioningPoliciesDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *BatchGetProvisioningPoliciesDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *BatchGetProvisioningPoliciesDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *BatchGetProvisioningPoliciesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetProvisioningPoliciesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *BatchGetProvisioningPoliciesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *BatchGetProvisioningPoliciesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProvisioningPoliciesDescriptorClientMsgHandle{}
}

func (d *BatchGetProvisioningPoliciesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetProvisioningPoliciesDescriptorServerMsgHandle{}
}

func (h *BatchGetProvisioningPoliciesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProvisioningPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetProvisioningPoliciesRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProvisioningPoliciesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProvisioningPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetProvisioningPoliciesRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(provisioning_policy.ProvisioningPolicyNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (provisioning_policy.ProvisioningPolicyNameList)(nil)
}

func (h *BatchGetProvisioningPoliciesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProvisioningPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetProvisioningPoliciesRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetProvisioningPoliciesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProvisioningPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetProvisioningPoliciesResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetProvisioningPoliciesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetProvisioningPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetProvisioningPoliciesResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetProvisioningPolicies(); len(resources) > 0 {
			list := make(provisioning_policy.ProvisioningPolicyNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (provisioning_policy.ProvisioningPolicyNameList)(nil)
}

func (h *BatchGetProvisioningPoliciesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetProvisioningPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetProvisioningPoliciesResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetProvisioningPoliciesDescriptor() *BatchGetProvisioningPoliciesDescriptor {
	return batchGetProvisioningPoliciesDescriptor
}

type ListProvisioningPoliciesDescriptor struct{}

type ListProvisioningPoliciesDescriptorClientMsgHandle struct{}

type ListProvisioningPoliciesDescriptorServerMsgHandle struct{}

func (d *ListProvisioningPoliciesDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListProvisioningPoliciesRequest{}
}

func (d *ListProvisioningPoliciesDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListProvisioningPoliciesResponse{}
}

func (d *ListProvisioningPoliciesDescriptor) IsUnary() bool {
	return true
}

func (d *ListProvisioningPoliciesDescriptor) IsClientStream() bool {
	return false
}

func (d *ListProvisioningPoliciesDescriptor) IsServerStream() bool {
	return false
}

func (d *ListProvisioningPoliciesDescriptor) IsCollection() bool {
	return true
}

func (d *ListProvisioningPoliciesDescriptor) IsPlural() bool {
	return true
}

func (d *ListProvisioningPoliciesDescriptor) HasResource() bool {
	return true
}

func (d *ListProvisioningPoliciesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListProvisioningPoliciesDescriptor) GetVerb() string {
	return "list"
}

func (d *ListProvisioningPoliciesDescriptor) GetMethodName() string {
	return "ListProvisioningPolicies"
}

func (d *ListProvisioningPoliciesDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.ProvisioningPolicyService/ListProvisioningPolicies"
}

func (d *ListProvisioningPoliciesDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *ListProvisioningPoliciesDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *ListProvisioningPoliciesDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *ListProvisioningPoliciesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListProvisioningPoliciesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *ListProvisioningPoliciesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *ListProvisioningPoliciesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProvisioningPoliciesDescriptorClientMsgHandle{}
}

func (d *ListProvisioningPoliciesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListProvisioningPoliciesDescriptorServerMsgHandle{}
}

func (h *ListProvisioningPoliciesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProvisioningPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListProvisioningPoliciesRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListProvisioningPoliciesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProvisioningPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListProvisioningPoliciesRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListProvisioningPoliciesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProvisioningPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListProvisioningPoliciesRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*provisioning_policy.ParentName)(nil)
}

func (h *ListProvisioningPoliciesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProvisioningPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListProvisioningPoliciesResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListProvisioningPoliciesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListProvisioningPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListProvisioningPoliciesResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetProvisioningPolicies(); len(resources) > 0 {
			list := make(provisioning_policy.ProvisioningPolicyNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (provisioning_policy.ProvisioningPolicyNameList)(nil)
}

func (h *ListProvisioningPoliciesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListProvisioningPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListProvisioningPoliciesResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListProvisioningPoliciesDescriptor() *ListProvisioningPoliciesDescriptor {
	return listProvisioningPoliciesDescriptor
}

type WatchProvisioningPolicyDescriptor struct{}

type WatchProvisioningPolicyDescriptorClientMsgHandle struct{}

type WatchProvisioningPolicyDescriptorServerMsgHandle struct{}

func (d *WatchProvisioningPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProvisioningPolicyRequest{}
}

func (d *WatchProvisioningPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProvisioningPolicyResponse{}
}

func (d *WatchProvisioningPolicyDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProvisioningPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProvisioningPolicyDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProvisioningPolicyDescriptor) IsCollection() bool {
	return false
}

func (d *WatchProvisioningPolicyDescriptor) IsPlural() bool {
	return false
}

func (d *WatchProvisioningPolicyDescriptor) HasResource() bool {
	return true
}

func (d *WatchProvisioningPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProvisioningPolicyDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProvisioningPolicyDescriptor) GetMethodName() string {
	return "WatchProvisioningPolicy"
}

func (d *WatchProvisioningPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.ProvisioningPolicyService/WatchProvisioningPolicy"
}

func (d *WatchProvisioningPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *WatchProvisioningPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *WatchProvisioningPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *WatchProvisioningPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProvisioningPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *WatchProvisioningPolicyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *WatchProvisioningPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProvisioningPolicyDescriptorClientMsgHandle{}
}

func (d *WatchProvisioningPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProvisioningPolicyDescriptorServerMsgHandle{}
}

func (h *WatchProvisioningPolicyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchProvisioningPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *WatchProvisioningPolicyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchProvisioningPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProvisioningPolicyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchProvisioningPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchProvisioningPolicyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchProvisioningPolicyResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *provisioning_policy.ProvisioningPolicyChange_Added_:
				return tResChange.Added.GetProvisioningPolicy().GetName()
			case *provisioning_policy.ProvisioningPolicyChange_Modified_:
				return tResChange.Modified.GetName()
			case *provisioning_policy.ProvisioningPolicyChange_Removed_:
				return tResChange.Removed.GetName()
			case *provisioning_policy.ProvisioningPolicyChange_Current_:
				return tResChange.Current.GetProvisioningPolicy().GetName()
			}
		}
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *WatchProvisioningPolicyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchProvisioningPolicyResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProvisioningPolicyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchProvisioningPolicyResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProvisioningPolicyDescriptor() *WatchProvisioningPolicyDescriptor {
	return watchProvisioningPolicyDescriptor
}

type WatchProvisioningPoliciesDescriptor struct{}

type WatchProvisioningPoliciesDescriptorClientMsgHandle struct{}

type WatchProvisioningPoliciesDescriptorServerMsgHandle struct{}

func (d *WatchProvisioningPoliciesDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchProvisioningPoliciesRequest{}
}

func (d *WatchProvisioningPoliciesDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchProvisioningPoliciesResponse{}
}

func (d *WatchProvisioningPoliciesDescriptor) IsUnary() bool {
	return false
}

func (d *WatchProvisioningPoliciesDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchProvisioningPoliciesDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchProvisioningPoliciesDescriptor) IsCollection() bool {
	return true
}

func (d *WatchProvisioningPoliciesDescriptor) IsPlural() bool {
	return true
}

func (d *WatchProvisioningPoliciesDescriptor) HasResource() bool {
	return true
}

func (d *WatchProvisioningPoliciesDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchProvisioningPoliciesDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchProvisioningPoliciesDescriptor) GetMethodName() string {
	return "WatchProvisioningPolicies"
}

func (d *WatchProvisioningPoliciesDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.ProvisioningPolicyService/WatchProvisioningPolicies"
}

func (d *WatchProvisioningPoliciesDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *WatchProvisioningPoliciesDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *WatchProvisioningPoliciesDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *WatchProvisioningPoliciesDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchProvisioningPoliciesDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *WatchProvisioningPoliciesDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *WatchProvisioningPoliciesDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProvisioningPoliciesDescriptorClientMsgHandle{}
}

func (d *WatchProvisioningPoliciesDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchProvisioningPoliciesDescriptorServerMsgHandle{}
}

func (h *WatchProvisioningPoliciesDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchProvisioningPoliciesRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProvisioningPoliciesDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProvisioningPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchProvisioningPoliciesRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchProvisioningPoliciesDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPoliciesRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchProvisioningPoliciesRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*provisioning_policy.ParentName)(nil)
}

func (h *WatchProvisioningPoliciesDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchProvisioningPoliciesResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchProvisioningPoliciesDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchProvisioningPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchProvisioningPoliciesResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetProvisioningPolicyChanges(); len(resChanges) > 0 {
			list := make(provisioning_policy.ProvisioningPolicyNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *provisioning_policy.ProvisioningPolicyChange_Added_:
					list = append(list, tResChange.Added.GetProvisioningPolicy().GetName())
				case *provisioning_policy.ProvisioningPolicyChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *provisioning_policy.ProvisioningPolicyChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *provisioning_policy.ProvisioningPolicyChange_Current_:
					list = append(list, tResChange.Current.GetProvisioningPolicy().GetName())
				}
			}
			return list
		}
	}
	return (provisioning_policy.ProvisioningPolicyNameList)(nil)
}

func (h *WatchProvisioningPoliciesDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchProvisioningPoliciesResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchProvisioningPoliciesResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchProvisioningPoliciesDescriptor() *WatchProvisioningPoliciesDescriptor {
	return watchProvisioningPoliciesDescriptor
}

type CreateProvisioningPolicyDescriptor struct{}

type CreateProvisioningPolicyDescriptorClientMsgHandle struct{}

type CreateProvisioningPolicyDescriptorServerMsgHandle struct{}

func (d *CreateProvisioningPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateProvisioningPolicyRequest{}
}

func (d *CreateProvisioningPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &provisioning_policy.ProvisioningPolicy{}
}

func (d *CreateProvisioningPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *CreateProvisioningPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateProvisioningPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateProvisioningPolicyDescriptor) IsCollection() bool {
	return true
}

func (d *CreateProvisioningPolicyDescriptor) IsPlural() bool {
	return false
}

func (d *CreateProvisioningPolicyDescriptor) HasResource() bool {
	return true
}

func (d *CreateProvisioningPolicyDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateProvisioningPolicyDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateProvisioningPolicyDescriptor) GetMethodName() string {
	return "CreateProvisioningPolicy"
}

func (d *CreateProvisioningPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.ProvisioningPolicyService/CreateProvisioningPolicy"
}

func (d *CreateProvisioningPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *CreateProvisioningPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *CreateProvisioningPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *CreateProvisioningPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateProvisioningPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *CreateProvisioningPolicyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *CreateProvisioningPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProvisioningPolicyDescriptorClientMsgHandle{}
}

func (d *CreateProvisioningPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateProvisioningPolicyDescriptorServerMsgHandle{}
}

func (h *CreateProvisioningPolicyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateProvisioningPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetProvisioningPolicy()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *CreateProvisioningPolicyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateProvisioningPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProvisioningPolicyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateProvisioningPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*provisioning_policy.ParentName)(nil)
}

func (h *CreateProvisioningPolicyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*provisioning_policy.ProvisioningPolicy) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *CreateProvisioningPolicyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*provisioning_policy.ProvisioningPolicy) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateProvisioningPolicyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*provisioning_policy.ProvisioningPolicy) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateProvisioningPolicyDescriptor() *CreateProvisioningPolicyDescriptor {
	return createProvisioningPolicyDescriptor
}

type UpdateProvisioningPolicyDescriptor struct{}

type UpdateProvisioningPolicyDescriptorClientMsgHandle struct{}

type UpdateProvisioningPolicyDescriptorServerMsgHandle struct{}

func (d *UpdateProvisioningPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateProvisioningPolicyRequest{}
}

func (d *UpdateProvisioningPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &provisioning_policy.ProvisioningPolicy{}
}

func (d *UpdateProvisioningPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateProvisioningPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateProvisioningPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateProvisioningPolicyDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateProvisioningPolicyDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateProvisioningPolicyDescriptor) HasResource() bool {
	return true
}

func (d *UpdateProvisioningPolicyDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateProvisioningPolicyDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateProvisioningPolicyDescriptor) GetMethodName() string {
	return "UpdateProvisioningPolicy"
}

func (d *UpdateProvisioningPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.ProvisioningPolicyService/UpdateProvisioningPolicy"
}

func (d *UpdateProvisioningPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *UpdateProvisioningPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *UpdateProvisioningPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *UpdateProvisioningPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateProvisioningPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *UpdateProvisioningPolicyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *UpdateProvisioningPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProvisioningPolicyDescriptorClientMsgHandle{}
}

func (d *UpdateProvisioningPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateProvisioningPolicyDescriptorServerMsgHandle{}
}

func (h *UpdateProvisioningPolicyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateProvisioningPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetProvisioningPolicy()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *UpdateProvisioningPolicyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateProvisioningPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProvisioningPolicyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateProvisioningPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateProvisioningPolicyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*provisioning_policy.ProvisioningPolicy) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *UpdateProvisioningPolicyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*provisioning_policy.ProvisioningPolicy) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateProvisioningPolicyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*provisioning_policy.ProvisioningPolicy)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*provisioning_policy.ProvisioningPolicy) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateProvisioningPolicyDescriptor() *UpdateProvisioningPolicyDescriptor {
	return updateProvisioningPolicyDescriptor
}

type DeleteProvisioningPolicyDescriptor struct{}

type DeleteProvisioningPolicyDescriptorClientMsgHandle struct{}

type DeleteProvisioningPolicyDescriptorServerMsgHandle struct{}

func (d *DeleteProvisioningPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteProvisioningPolicyRequest{}
}

func (d *DeleteProvisioningPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteProvisioningPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteProvisioningPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteProvisioningPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteProvisioningPolicyDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteProvisioningPolicyDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteProvisioningPolicyDescriptor) HasResource() bool {
	return true
}

func (d *DeleteProvisioningPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteProvisioningPolicyDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteProvisioningPolicyDescriptor) GetMethodName() string {
	return "DeleteProvisioningPolicy"
}

func (d *DeleteProvisioningPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.ProvisioningPolicyService/DeleteProvisioningPolicy"
}

func (d *DeleteProvisioningPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *DeleteProvisioningPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *DeleteProvisioningPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *DeleteProvisioningPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteProvisioningPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *DeleteProvisioningPolicyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *DeleteProvisioningPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProvisioningPolicyDescriptorClientMsgHandle{}
}

func (d *DeleteProvisioningPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteProvisioningPolicyDescriptorServerMsgHandle{}
}

func (h *DeleteProvisioningPolicyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteProvisioningPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *DeleteProvisioningPolicyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteProvisioningPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProvisioningPolicyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteProvisioningPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteProvisioningPolicyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteProvisioningPolicyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteProvisioningPolicyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteProvisioningPolicyDescriptor() *DeleteProvisioningPolicyDescriptor {
	return deleteProvisioningPolicyDescriptor
}

type ProvisionServiceAccountToProvisioningPolicyDescriptor struct{}

type ProvisionServiceAccountToProvisioningPolicyDescriptorClientMsgHandle struct{}

type ProvisionServiceAccountToProvisioningPolicyDescriptorServerMsgHandle struct{}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &ProvisionServiceAccountToProvisioningPolicyRequest{}
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &ProvisionServiceAccountToProvisioningPolicyResponse{}
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) IsCollection() bool {
	return false
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) IsPlural() bool {
	return false
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) HasResource() bool {
	return true
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetVerb() string {
	return "provisionServiceAccountToProvisioningPolicy"
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetMethodName() string {
	return "ProvisionServiceAccountToProvisioningPolicy"
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.ProvisioningPolicyService/ProvisionServiceAccountToProvisioningPolicy"
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ProvisionServiceAccountToProvisioningPolicyDescriptorClientMsgHandle{}
}

func (d *ProvisionServiceAccountToProvisioningPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ProvisionServiceAccountToProvisioningPolicyDescriptorServerMsgHandle{}
}

func (h *ProvisionServiceAccountToProvisioningPolicyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionServiceAccountToProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ProvisionServiceAccountToProvisioningPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *ProvisionServiceAccountToProvisioningPolicyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ProvisionServiceAccountToProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ProvisionServiceAccountToProvisioningPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ProvisionServiceAccountToProvisioningPolicyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionServiceAccountToProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ProvisionServiceAccountToProvisioningPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ProvisionServiceAccountToProvisioningPolicyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionServiceAccountToProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ProvisionServiceAccountToProvisioningPolicyResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ProvisionServiceAccountToProvisioningPolicyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ProvisionServiceAccountToProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ProvisionServiceAccountToProvisioningPolicyResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ProvisionServiceAccountToProvisioningPolicyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionServiceAccountToProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ProvisionServiceAccountToProvisioningPolicyResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetProvisionServiceAccountToProvisioningPolicyDescriptor() *ProvisionServiceAccountToProvisioningPolicyDescriptor {
	return provisionServiceAccountToProvisioningPolicyDescriptor
}

type RemoveServiceAccountFromProvisioningPolicyDescriptor struct{}

type RemoveServiceAccountFromProvisioningPolicyDescriptorClientMsgHandle struct{}

type RemoveServiceAccountFromProvisioningPolicyDescriptorServerMsgHandle struct{}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &RemoveServiceAccountFromProvisioningPolicyRequest{}
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &RemoveServiceAccountFromProvisioningPolicyResponse{}
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) IsCollection() bool {
	return false
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) IsPlural() bool {
	return false
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) HasResource() bool {
	return true
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetVerb() string {
	return "removeServiceAccountFromProvisioningPolicy"
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetMethodName() string {
	return "RemoveServiceAccountFromProvisioningPolicy"
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.ProvisioningPolicyService/RemoveServiceAccountFromProvisioningPolicy"
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RemoveServiceAccountFromProvisioningPolicyDescriptorClientMsgHandle{}
}

func (d *RemoveServiceAccountFromProvisioningPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RemoveServiceAccountFromProvisioningPolicyDescriptorServerMsgHandle{}
}

func (h *RemoveServiceAccountFromProvisioningPolicyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RemoveServiceAccountFromProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*RemoveServiceAccountFromProvisioningPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *RemoveServiceAccountFromProvisioningPolicyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RemoveServiceAccountFromProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*RemoveServiceAccountFromProvisioningPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *RemoveServiceAccountFromProvisioningPolicyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RemoveServiceAccountFromProvisioningPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*RemoveServiceAccountFromProvisioningPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *RemoveServiceAccountFromProvisioningPolicyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RemoveServiceAccountFromProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*RemoveServiceAccountFromProvisioningPolicyResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *RemoveServiceAccountFromProvisioningPolicyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RemoveServiceAccountFromProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*RemoveServiceAccountFromProvisioningPolicyResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *RemoveServiceAccountFromProvisioningPolicyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RemoveServiceAccountFromProvisioningPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*RemoveServiceAccountFromProvisioningPolicyResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetRemoveServiceAccountFromProvisioningPolicyDescriptor() *RemoveServiceAccountFromProvisioningPolicyDescriptor {
	return removeServiceAccountFromProvisioningPolicyDescriptor
}

type ProvisionDeviceViaPolicyDescriptor struct{}

type ProvisionDeviceViaPolicyDescriptorClientMsgHandle struct{}

type ProvisionDeviceViaPolicyDescriptorServerMsgHandle struct{}

func (d *ProvisionDeviceViaPolicyDescriptor) NewEmptyClientMsg() proto.Message {
	return &ProvisionDeviceViaPolicyRequest{}
}

func (d *ProvisionDeviceViaPolicyDescriptor) NewEmptyServerMsg() proto.Message {
	return &ProvisionDeviceViaPolicyResponse{}
}

func (d *ProvisionDeviceViaPolicyDescriptor) IsUnary() bool {
	return true
}

func (d *ProvisionDeviceViaPolicyDescriptor) IsClientStream() bool {
	return false
}

func (d *ProvisionDeviceViaPolicyDescriptor) IsServerStream() bool {
	return false
}

func (d *ProvisionDeviceViaPolicyDescriptor) IsCollection() bool {
	return false
}

func (d *ProvisionDeviceViaPolicyDescriptor) IsPlural() bool {
	return false
}

func (d *ProvisionDeviceViaPolicyDescriptor) HasResource() bool {
	return true
}

func (d *ProvisionDeviceViaPolicyDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetVerb() string {
	return "provisionDeviceViaPolicy"
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetMethodName() string {
	return "ProvisionDeviceViaPolicy"
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.ProvisioningPolicyService/ProvisionDeviceViaPolicy"
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ProvisionDeviceViaPolicyDescriptorClientMsgHandle{}
}

func (d *ProvisionDeviceViaPolicyDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ProvisionDeviceViaPolicyDescriptorServerMsgHandle{}
}

func (h *ProvisionDeviceViaPolicyDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionDeviceViaPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ProvisionDeviceViaPolicyRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *ProvisionDeviceViaPolicyDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ProvisionDeviceViaPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ProvisionDeviceViaPolicyRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ProvisionDeviceViaPolicyDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionDeviceViaPolicyRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ProvisionDeviceViaPolicyRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ProvisionDeviceViaPolicyDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionDeviceViaPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ProvisionDeviceViaPolicyResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ProvisionDeviceViaPolicyDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ProvisionDeviceViaPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ProvisionDeviceViaPolicyResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ProvisionDeviceViaPolicyDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ProvisionDeviceViaPolicyResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ProvisionDeviceViaPolicyResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetProvisionDeviceViaPolicyDescriptor() *ProvisionDeviceViaPolicyDescriptor {
	return provisionDeviceViaPolicyDescriptor
}

type RequestProvisioningApprovalDescriptor struct{}

type RequestProvisioningApprovalDescriptorClientMsgHandle struct{}

type RequestProvisioningApprovalDescriptorServerMsgHandle struct{}

func (d *RequestProvisioningApprovalDescriptor) NewEmptyClientMsg() proto.Message {
	return &RequestProvisioningApprovalRequest{}
}

func (d *RequestProvisioningApprovalDescriptor) NewEmptyServerMsg() proto.Message {
	return &RequestProvisioningApprovalResponse{}
}

func (d *RequestProvisioningApprovalDescriptor) IsUnary() bool {
	return true
}

func (d *RequestProvisioningApprovalDescriptor) IsClientStream() bool {
	return false
}

func (d *RequestProvisioningApprovalDescriptor) IsServerStream() bool {
	return false
}

func (d *RequestProvisioningApprovalDescriptor) IsCollection() bool {
	return false
}

func (d *RequestProvisioningApprovalDescriptor) IsPlural() bool {
	return false
}

func (d *RequestProvisioningApprovalDescriptor) HasResource() bool {
	return true
}

func (d *RequestProvisioningApprovalDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *RequestProvisioningApprovalDescriptor) GetVerb() string {
	return "requestProvisioningApproval"
}

func (d *RequestProvisioningApprovalDescriptor) GetMethodName() string {
	return "RequestProvisioningApproval"
}

func (d *RequestProvisioningApprovalDescriptor) GetFullMethodName() string {
	return "/ntt.devices.v1alpha2.ProvisioningPolicyService/RequestProvisioningApproval"
}

func (d *RequestProvisioningApprovalDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *RequestProvisioningApprovalDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *RequestProvisioningApprovalDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *RequestProvisioningApprovalDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *RequestProvisioningApprovalDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return provisioningPolicyServiceDescriptor
}

func (d *RequestProvisioningApprovalDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return provisioning_policy.GetDescriptor()
}

func (d *RequestProvisioningApprovalDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RequestProvisioningApprovalDescriptorClientMsgHandle{}
}

func (d *RequestProvisioningApprovalDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &RequestProvisioningApprovalDescriptorServerMsgHandle{}
}

func (h *RequestProvisioningApprovalDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RequestProvisioningApprovalRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*RequestProvisioningApprovalRequest) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*provisioning_policy.Name)(nil)
}

func (h *RequestProvisioningApprovalDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RequestProvisioningApprovalRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*RequestProvisioningApprovalRequest) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *RequestProvisioningApprovalDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RequestProvisioningApprovalRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*RequestProvisioningApprovalRequest) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *RequestProvisioningApprovalDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RequestProvisioningApprovalResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*RequestProvisioningApprovalResponse) *provisioning_policy.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *RequestProvisioningApprovalDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*RequestProvisioningApprovalResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*RequestProvisioningApprovalResponse) []*provisioning_policy.Name
	})
	if ok {
		return provisioning_policy.ProvisioningPolicyNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *RequestProvisioningApprovalDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*RequestProvisioningApprovalResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*RequestProvisioningApprovalResponse) *provisioning_policy.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetRequestProvisioningApprovalDescriptor() *RequestProvisioningApprovalDescriptor {
	return requestProvisioningApprovalDescriptor
}

type ProvisioningPolicyServiceDescriptor struct{}

func (d *ProvisioningPolicyServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getProvisioningPolicyDescriptor,
		batchGetProvisioningPoliciesDescriptor,
		listProvisioningPoliciesDescriptor,
		watchProvisioningPolicyDescriptor,
		watchProvisioningPoliciesDescriptor,
		createProvisioningPolicyDescriptor,
		updateProvisioningPolicyDescriptor,
		deleteProvisioningPolicyDescriptor,
		provisionServiceAccountToProvisioningPolicyDescriptor,
		removeServiceAccountFromProvisioningPolicyDescriptor,
		provisionDeviceViaPolicyDescriptor,
		requestProvisioningApprovalDescriptor,
	}
}

func (d *ProvisioningPolicyServiceDescriptor) GetFullAPIName() string {
	return "/ntt.devices.v1alpha2.ProvisioningPolicyService"
}

func (d *ProvisioningPolicyServiceDescriptor) GetProtoPkgName() string {
	return "ntt.devices.v1alpha2"
}

func (d *ProvisioningPolicyServiceDescriptor) GetApiName() string {
	return "ProvisioningPolicyService"
}

func (d *ProvisioningPolicyServiceDescriptor) GetServiceDomain() string {
	return "devices.edgelq.com"
}

func (d *ProvisioningPolicyServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetProvisioningPolicyServiceDescriptor() *ProvisioningPolicyServiceDescriptor {
	return provisioningPolicyServiceDescriptor
}

func initDescriptors() {
	provisioningPolicyServiceDescriptor = &ProvisioningPolicyServiceDescriptor{}
	getProvisioningPolicyDescriptor = &GetProvisioningPolicyDescriptor{}
	batchGetProvisioningPoliciesDescriptor = &BatchGetProvisioningPoliciesDescriptor{}
	listProvisioningPoliciesDescriptor = &ListProvisioningPoliciesDescriptor{}
	watchProvisioningPolicyDescriptor = &WatchProvisioningPolicyDescriptor{}
	watchProvisioningPoliciesDescriptor = &WatchProvisioningPoliciesDescriptor{}
	createProvisioningPolicyDescriptor = &CreateProvisioningPolicyDescriptor{}
	updateProvisioningPolicyDescriptor = &UpdateProvisioningPolicyDescriptor{}
	deleteProvisioningPolicyDescriptor = &DeleteProvisioningPolicyDescriptor{}
	provisionServiceAccountToProvisioningPolicyDescriptor = &ProvisionServiceAccountToProvisioningPolicyDescriptor{}
	removeServiceAccountFromProvisioningPolicyDescriptor = &RemoveServiceAccountFromProvisioningPolicyDescriptor{}
	provisionDeviceViaPolicyDescriptor = &ProvisionDeviceViaPolicyDescriptor{}
	requestProvisioningApprovalDescriptor = &RequestProvisioningApprovalDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(provisioningPolicyServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getProvisioningPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetProvisioningPoliciesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listProvisioningPoliciesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProvisioningPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchProvisioningPoliciesDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createProvisioningPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateProvisioningPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteProvisioningPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(provisionServiceAccountToProvisioningPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(removeServiceAccountFromProvisioningPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(provisionDeviceViaPolicyDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(requestProvisioningApprovalDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
